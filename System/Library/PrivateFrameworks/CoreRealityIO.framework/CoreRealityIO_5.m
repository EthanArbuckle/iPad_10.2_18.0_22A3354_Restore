void sub_230131638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::~UsdPrimSubtreeIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&a19);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::~UsdPrimSubtreeIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&a24);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange::~UsdPrimSubtreeRange((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange *)&a29);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyFilteredDescendants(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __CFArray *Mutable;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const void *v8;
  unsigned int *v9;
  unsigned int v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v24;
  int v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  int v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  int v34[3];

  if (!a1)
    return 0;
  v3 = a1 + 24;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = a2[2];
  v5 = a2[3];
  v7 = a2[4];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  v20 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v6;
  v21 = v5;
  *(_QWORD *)&v22 = v7;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange(v3, (uint64_t *)&v20, (uint64_t)&v24);
  v20 = v24;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, &v25);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v21 + 1, &v26);
  v22 = v27;
  v23 = v28;
  v16 = v29;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, &v30);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v17 + 1, &v31);
  v18 = v32;
  v19 = v33;
  while (v20 != v16
       || v21 != v17
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v22, (uint64_t)&v18))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v20, (uint64_t)v12);
    v34[0] = 1;
    v8 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v12, v34);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
    if ((v15 & 7) != 0)
    {
      v9 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
    if (v13)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v20);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  return Mutable;
}

void sub_2301318D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::~UsdPrimSubtreeIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&a19);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::~UsdPrimSubtreeIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&a24);
  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange::~UsdPrimSubtreeRange((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeRange *)&a29);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimCopyParent(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent(v1, (uint64_t)v6);
  v10 = 1;
  v2 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v6, &v10);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  return v2;
}

void sub_2301319B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyFilteredChildren(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __CFArray *Mutable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  unsigned int *v9;
  unsigned int v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  int v34[3];

  if (!a1)
    return 0;
  v3 = a1 + 24;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = a2[2];
  v5 = a2[3];
  v7 = a2[4];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  v20 = v6;
  v21 = v5;
  *(_QWORD *)&v22 = v7;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(v3, &v20, (uint64_t)&v24);
  v20 = v24;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, &v25);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v21 + 1, &v26);
  v22 = v27;
  v23 = v28;
  v16 = v29;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, &v30);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v17 + 1, &v31);
  v18 = v32;
  v19 = v33;
  while (v20 != v16
       || v21 != v17
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v22, (uint64_t)&v18))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v20, (uint64_t)v12);
    v34[0] = 1;
    v8 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v12, v34);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
    if ((v15 & 7) != 0)
    {
      v9 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
    if (v13)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v20);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  return Mutable;
}

void sub_230131C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&a19);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&a24);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::~UsdPrimSiblingRange((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *)&a29);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimCopyVariantSets(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v1;
  uint64_t Instance;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets(v1);
  if (RIOPxrUsdVariantSetsGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdVariantSetsGetTypeID::onceToken, &__block_literal_global_19);
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
  {
    *(_DWORD *)(Instance + 16) = v12;
    *(_QWORD *)(Instance + 24) = v13;
    if (v13)
    {
      v4 = (unint64_t *)(v13 + 48);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 32), &v14);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v3 + 36), &v15);
    v6 = v16;
    *(_QWORD *)(v3 + 40) = v16;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *(_QWORD *)(v3 + 40) &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  if ((v16 & 7) != 0)
  {
    v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  if (v13)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  return v3;
}

void sub_230131DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimCopyVariantSet(uint64_t a1, char *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void *__p;
  char v8;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;

  if (!a1
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet();
  if (v8 < 0)
    operator delete(__p);
  v3 = RIOPxrUsdVariantSetCreate<pxrInternal__aapl__pxrReserved__::UsdVariantSet &>((const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v9);
  if (v14 < 0)
    operator delete(v13);
  if ((v12 & 7) != 0)
  {
    v4 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  return v3;
}

void sub_230131EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimHasVariantSets(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v1;

  if (a1
    && (v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24),
        pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))))
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::HasVariantSets(v1);
  }
  else
  {
    return 0;
  }
}

uint64_t RIOPxrUsdPrimCreateAttribute(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  std::recursive_mutex *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (a1)
    v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v1 = 0;
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
  std::recursive_mutex::lock(v2);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v1) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    v3 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
    v11 = 12;
    v3 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v7, &v11);
    if ((v10 & 7) != 0)
    {
      v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
    if (v8)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_230132024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimSetTypeName(uint64_t a1, uint64_t a2)
{
  realityio::UsdLayerMutexTracker *v3;
  std::recursive_mutex *v4;
  uint64_t v5;

  if (a1)
    v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v3 = 0;
  v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    v5 = 0;
  }
  else
  {
    v5 = pxrInternal__aapl__pxrReserved__::UsdPrim::SetTypeName(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  }
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_2301320C8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimCopyTypeName(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;
  unsigned int *v12;

  if (a1)
    v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  else
    v1 = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v1);
    v3 = *((_QWORD *)v1 + 1);
    if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v3, v2);
    v4 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(*(uint64_t **)(v3 + 24));
    if (v12)
    {
      v5 = v12 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  else
  {
    v11 = 0;
    v4 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v11);
    if ((v11 & 7) != 0)
    {
      v8 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  return v4;
}

void sub_2301321A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  if ((a9 & 7) != 0)
  {
    v10 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdPrimHasAuthoredType(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  unint64_t Data;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  Data = atomic_load(MEMORY[0x24BEE7E98]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 448));
}

BOOL RIOPxrUsdPrimHasAuthoredTypeOnLayer(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  pxrInternal__aapl__pxrReserved__::UsdObject *v4;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v5;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v6;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v7;
  _BOOL4 v8;
  BOOL v9;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::SdfSpec **v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v21;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v22;
  unsigned int *v23;

  v23 = *(unsigned int **)(a2 + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v23);
  if (a1
    && (v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24),
        (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v4) & 1) != 0))
  {
    MEMORY[0x2348B42AC](&v21, v4);
    v5 = v21;
    v6 = v22;
    if (v21 == v22)
    {
LABEL_15:
      v2 = 0;
    }
    else
    {
      while (1)
      {
        v7 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->(v5);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7);
        v8 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator==<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v19, &v23);
        v9 = v8;
        if (v8)
        {
          v10 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->(v5);
          pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetTypeName(v10);
          v2 = v18 != 0;
          if ((v18 & 7) != 0)
          {
            v11 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
            do
              v12 = __ldxr(v11);
            while (__stlxr(v12 - 2, v11));
          }
        }
        v13 = v20;
        if (v20)
        {
          v14 = (unsigned int *)(v20 + 8);
          do
          {
            v15 = __ldxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        if (v9)
          break;
        v5 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)((char *)v5 + 8);
        if (v5 == v6)
          goto LABEL_15;
      }
    }
    v19 = &v21;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  }
  else
  {
    v2 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v23);
  return v2;
}

void sub_230132394(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr((unsigned int **)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimGetSpecifier(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  int IsValid;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__ *v5;
  uint64_t v6;

  if (a1)
    v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  else
    v1 = 0;
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1);
  result = 0;
  if (IsValid)
  {
    v5 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)v1 + 1);
    if (!v5 || (*((_BYTE *)v5 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v5, v2);
    v6 = MEMORY[0x2348B3688](v5) - 1;
    if (v6 > 2)
      return 0;
    else
      return v6 + 1;
  }
  return result;
}

uint64_t RIOPxrUsdPrimGetRootLayerSpecifier(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v6[3];
  pxrInternal__aapl__pxrReserved__::SdfSpec **v7;

  if (a1)
    v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  else
    v1 = 0;
  v2 = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    MEMORY[0x2348B42AC](v6, v1);
    v3 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->(v6[0]);
    v4 = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(v3) - 1;
    if (v4 < 3)
      v2 = v4 + 1;
    else
      v2 = 0;
    v7 = v6;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  }
  return v2;
}

void sub_2301324E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimSetSpecifier(uint64_t a1, uint64_t a2)
{
  int v2;
  pxrInternal__aapl__pxrReserved__ **v3;
  std::recursive_mutex *v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  pxrInternal__aapl__pxrReserved__ *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v12;
  uint64_t v13;
  uint64_t (**v14)();
  int *v15;
  void *v16;

  if (a2 == 2)
    v2 = 2;
  else
    v2 = a2 == 1;
  if (a1)
    v3 = (pxrInternal__aapl__pxrReserved__ **)(a1 + 24);
  else
    v3 = 0;
  v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)v3) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v3))
  {
    v8 = 0;
  }
  else
  {
    v12 = v2;
    if (!atomic_load(MEMORY[0x24BEE7E98]))
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    v13 = 0;
    v7 = v3[1];
    if (!v7 || (*((_BYTE *)v7 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v3[1], v5);
    v15 = &v12;
    v14 = off_24FDF9B20;
    v8 = pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
    if ((v13 & 7) != 0)
    {
      v9 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  std::recursive_mutex::unlock(v4);
  return v8;
}

void sub_23013261C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::recursive_mutex *v11;
  unsigned int *v13;
  unsigned int v14;

  if ((a11 & 7) != 0)
  {
    v13 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  std::recursive_mutex::unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimIsPseudoRoot(uint64_t a1)
{
  if (a1)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24));
  else
    return pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(0);
}

uint64_t RIOPxrUsdPrimIsActive(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v1;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;

  if (a1
    && (v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24),
        (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) == 0)
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::IsActive(v1, v2);
  }
  else
  {
    return 0;
  }
}

uint64_t RIOPxrUsdPrimSetActive(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  std::recursive_mutex *v2;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *Data;
  uint64_t v4;

  if (a1)
    v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v1 = 0;
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
  std::recursive_mutex::lock(v2);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v1) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    v4 = 0;
  }
  else
  {
    Data = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)atomic_load(MEMORY[0x24BEE7E98]);
    if (!Data)
      Data = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    v4 = pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<BOOL>((uint64_t)v1, Data);
  }
  std::recursive_mutex::unlock(v2);
  return v4;
}

void sub_230132788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::recursive_mutex *v10;
  unsigned int *v12;
  unsigned int v13;

  if ((a10 & 7) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimClearActive(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  std::recursive_mutex *v2;
  const pxrInternal__aapl__pxrReserved__::TfToken *Data;
  uint64_t v4;

  if (a1)
    v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v1 = 0;
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
  std::recursive_mutex::lock(v2);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v1) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    v4 = 0;
  }
  else
  {
    Data = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x24BEE7E98]);
    if (!Data)
      Data = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    v4 = pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(v1, Data);
  }
  std::recursive_mutex::unlock(v2);
  return v4;
}

void sub_230132854(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimHasAuthoredActive(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  const pxrInternal__aapl__pxrReserved__::TfToken *Data;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return 0;
  }
  Data = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x24BEE7E98]);
  if (!Data)
    Data = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(v1, Data);
}

uint64_t RIOPxrUsdPrimIsAType(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v3;
  pxrInternal__aapl__pxrReserved__::TfToken *IsValid;
  const pxrInternal__aapl__pxrReserved__::TfType *v6;

  if (!a1)
    return 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0)
    return 0;
  IsValid = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3);
  if (!(_DWORD)IsValid)
    return 0;
  if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(IsValid);
  v6 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::FindByName();
  return pxrInternal__aapl__pxrReserved__::UsdPrim::IsA(v3, v6);
}

uint64_t RIOPxrUsdPrimHasProperty(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v3;

  if (a1
    && (v3 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24),
        (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) == 0)
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  }
  else
  {
    return 0;
  }
}

__CFArray *RIOPxrUsdPrimGetPropertyOrder(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v1;
  __CFArray *Mutable;
  uint64_t *i;
  const void *v4;
  _QWORD v6[3];
  void **v7;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyOrder(v1);
  for (i = (uint64_t *)v6[0]; i != (uint64_t *)v6[1]; ++i)
  {
    v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  v7 = (void **)v6;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
  return Mutable;
}

void sub_230132A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void RIOPxrUsdPrimSetPropertyOrder(uint64_t a1, const __CFArray *a2)
{
  realityio::UsdLayerMutexTracker *v2;
  uint64_t v3;
  std::recursive_mutex *v5;
  CFIndex Count;
  char *v7;
  uint64_t v8;
  CFIndex i;
  _QWORD *ValueAtIndex;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void **v14;
  char v15;

  v2 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  if (a1)
    v3 = a1 + 24;
  else
    v3 = 0;
  if (a1
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
  {
    v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v2);
    std::recursive_mutex::lock(v5);
    Count = CFArrayGetCount(a2);
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = (void **)&v11;
    v15 = 0;
    if (Count)
    {
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vallocate[abi:ne180100](&v11, Count);
      v7 = (char *)v12;
      bzero(v12, 8 * Count);
      v12 = &v7[8 * Count];
      if (Count >= 1)
      {
        v8 = 0;
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
          pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)(v11 + v8), ValueAtIndex + 2);
          v8 += 8;
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::SetPropertyOrder(v3);
    v14 = (void **)&v11;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v14);
    std::recursive_mutex::unlock(v5);
  }
}

void sub_230132B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::recursive_mutex *v5;
  va_list va;

  va_start(va, a5);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::recursive_mutex::unlock(v5);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::SetPropertyOrder(uint64_t a1)
{
  unint64_t Data;

  Data = atomic_load(MEMORY[0x24BEE7E98]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  return pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(Data + 272));
}

void RIOPxrUsdPrimClearPropertyOrder(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  std::recursive_mutex *v2;
  unint64_t Data;

  if (a1)
  {
    v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
      std::recursive_mutex::lock(v2);
      Data = atomic_load(MEMORY[0x24BEE7E98]);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
      pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 272));
      std::recursive_mutex::unlock(v2);
    }
  }
}

void sub_230132CC8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyChildrenReorder(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v1;
  __CFArray *Mutable;
  uint64_t *i;
  const void *v4;
  _QWORD v6[3];
  void **v7;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenReorder(v1);
  for (i = (uint64_t *)v6[0]; i != (uint64_t *)v6[1]; ++i)
  {
    v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  v7 = (void **)v6;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
  return Mutable;
}

void sub_230132D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void RIOPxrUsdPrimSetChildrenReorder(uint64_t a1, const __CFArray *a2)
{
  realityio::UsdLayerMutexTracker *v2;
  uint64_t v3;
  std::recursive_mutex *v5;
  CFIndex Count;
  CFIndex v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  unint64_t Data;
  unsigned int *v15;
  unsigned int v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;

  v2 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  if (a1)
    v3 = a1 + 24;
  else
    v3 = 0;
  if (a1
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
  {
    v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v2);
    std::recursive_mutex::lock(v5);
    Count = CFArrayGetCount(a2);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    if (Count >= 1)
    {
      v7 = 0;
      do
      {
        v8 = (uint64_t *)((char *)CFArrayGetValueAtIndex(a2, v7) + 16);
        v9 = *v8;
        if (*v8)
        {
          v10 = v18;
          if ((unint64_t)v18 >= v19)
          {
            v13 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v17, v8);
          }
          else
          {
            *v18 = v9;
            if ((v9 & 7) != 0)
            {
              v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
              do
                v12 = __ldxr(v11);
              while (__stxr(v12 + 2, v11));
              if ((v12 & 1) == 0)
                *v10 &= 0xFFFFFFFFFFFFFFF8;
            }
            v13 = (char *)(v10 + 1);
          }
          v18 = v13;
        }
        ++v7;
      }
      while (v7 != Count);
    }
    Data = atomic_load(MEMORY[0x24BEE7E98]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    v20 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(v3, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(Data + 216));
    if ((v20 & 7) != 0)
    {
      v15 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    v20 = (unint64_t)&v17;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    std::recursive_mutex::unlock(v5);
  }
}

void sub_230132F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  std::recursive_mutex *v12;

  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::recursive_mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void RIOPxrUsdPrimClearChildrenReorder(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  std::recursive_mutex *v2;
  unint64_t Data;

  if (a1)
  {
    v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
      std::recursive_mutex::lock(v2);
      Data = atomic_load(MEMORY[0x24BEE7E98]);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
      pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 216));
      std::recursive_mutex::unlock(v2);
    }
  }
}

void sub_230132FE4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimCopyAttribute(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!a1)
    return 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0)
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  v12 = 12;
  v4 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v8, &v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  return v4;
}

void sub_2301330A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyPropertyNames(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  __CFArray *Mutable;
  uint64_t *i;
  const void *v5;
  _QWORD v6[3];
  void **v7[5];

  v7[4] = *(void ***)MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v7[3] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyNames();
  if (!v7)
    (*((void (**)(void))v7[0] + 4))();
  for (i = (uint64_t *)v6[0]; i != (uint64_t *)v6[1]; ++i)
  {
    v5 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
  }
  v7[0] = (void **)v6;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](v7);
  return Mutable;
}

void sub_2301331DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  uint64_t *v15;
  uint64_t *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__CFArray *RIOPxrUsdPrimCopyAuthoredPropertyNames(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  __CFArray *Mutable;
  uint64_t *i;
  const void *v5;
  _QWORD v6[3];
  void **v7[5];

  v7[4] = *(void ***)MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v7[3] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertyNames();
  if (!v7)
    (*((void (**)(void))v7[0] + 4))();
  for (i = (uint64_t *)v6[0]; i != (uint64_t *)v6[1]; ++i)
  {
    v5 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
  }
  v7[0] = (void **)v6;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](v7);
  return Mutable;
}

void sub_23013334C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  uint64_t *v15;
  uint64_t *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__CFArray *RIOPxrUsdPrimCopyAttributes(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  __CFArray *Mutable;
  uint64_t i;
  const void *v4;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  int v9;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes(v1);
  for (i = v6; i != v7; i += 32)
  {
    v9 = 12;
    v4 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>(i, &v9);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  v8 = (void **)&v6;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](&v8);
  return Mutable;
}

void sub_230133470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyAuthoredAttributes(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  __CFArray *Mutable;
  uint64_t i;
  const void *v4;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  int v9;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes(v1);
  for (i = v6; i != v7; i += 32)
  {
    v9 = 12;
    v4 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>(i, &v9);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  v8 = (void **)&v6;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](&v8);
  return Mutable;
}

void sub_230133560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimHasAttribute(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v3;

  if (a1
    && (v3 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24),
        (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) == 0)
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  }
  else
  {
    return 0;
  }
}

uint64_t RIOPxrUsdPrimHasRelationship(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v3;

  if (a1
    && (v3 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24),
        (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) == 0)
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  }
  else
  {
    return 0;
  }
}

uint64_t RIOPxrUsdPrimCreateCreateRelationship(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v3;
  std::recursive_mutex *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (!a1)
    return 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    return 0;
  }
  v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  v13 = 22;
  v5 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v9, &v13);
  if ((v12 & 7) != 0)
  {
    v6 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_230133708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimCopyRelationship(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!a1)
    return 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  v12 = 22;
  v4 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v8, &v12);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  return v4;
}

void sub_2301337E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimRemoveProperty(uint64_t a1, uint64_t a2)
{
  realityio::UsdLayerMutexTracker *v3;
  std::recursive_mutex *v4;
  uint64_t v5;

  if (a1)
    v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v3 = 0;
  v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    v5 = 0;
  }
  else
  {
    v5 = pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  }
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_230133878(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimClearSpecializes(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  std::recursive_mutex *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1)
    v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v1 = 0;
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
  std::recursive_mutex::lock(v2);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v1) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    v3 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes(v1);
    v3 = MEMORY[0x2348B1EE8](&v7);
    if ((v10 & 7) != 0)
    {
      v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
    if (v8)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_230133958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::recursive_mutex *v9;

  pxrInternal__aapl__pxrReserved__::UsdSpecializes::~UsdSpecializes((pxrInternal__aapl__pxrReserved__::UsdSpecializes *)&a9);
  std::recursive_mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSpecializes::~UsdSpecializes(pxrInternal__aapl__pxrReserved__::UsdSpecializes *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

uint64_t RIOPxrUsdPrimSetSpecializes(uint64_t a1, const __CFArray *a2)
{
  realityio::UsdLayerMutexTracker *v3;
  std::recursive_mutex *v4;
  CFIndex Count;
  CFIndex i;
  _DWORD *ValueAtIndex;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;

  if (a1)
    v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v3 = 0;
  v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    v11 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
        v8 = ValueAtIndex + 4;
        v9 = v20;
        if ((unint64_t)v20 >= v21)
        {
          v10 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v19, v8);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v20, v8);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9 + 1, ValueAtIndex + 5);
          v10 = v9 + 2;
        }
        v20 = v10;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes(v3);
    v11 = MEMORY[0x2348B1EDC](&v15, &v19);
    if ((v18 & 7) != 0)
    {
      v12 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    if (v16)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
    v15 = (void **)&v19;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
  std::recursive_mutex::unlock(v4);
  return v11;
}

void sub_230133B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::recursive_mutex *v14;

  pxrInternal__aapl__pxrReserved__::UsdSpecializes::~UsdSpecializes((pxrInternal__aapl__pxrReserved__::UsdSpecializes *)&a10);
  a10 = (void **)&a14;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimAddReference(uint64_t a1, char *a2)
{
  realityio::UsdLayerMutexTracker *v3;
  std::recursive_mutex *v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  void *__p;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  char v25;

  if (a1)
    v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v3 = 0;
  v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    v6 = 0;
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(v24, a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v3);
  pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&__p);
  pxrInternal__aapl__pxrReserved__::UsdStage::ResolveIdentifierToEditTarget();
  if (SHIBYTE(v22) < 0)
  {
    v5 = v21 == 0;
    operator delete(v20);
  }
  else
  {
    v5 = SHIBYTE(v22) == 0;
  }
  v8 = v18;
  if (v18)
  {
    v9 = (unsigned int *)(v18 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (!v5)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&__p, 0.0, 1.0);
    v6 = pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference();
    if ((v23 & 7) != 0)
    {
      v12 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    goto LABEL_31;
  }
  if (v25 < 0)
  {
    if (v24[1])
      goto LABEL_19;
    goto LABEL_25;
  }
  if (!v25)
  {
LABEL_25:
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences(v3);
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v16, 0.0, 1.0);
    v6 = pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference();
    if (v19 < 0)
      operator delete(__p);
    if ((v23 & 7) != 0)
    {
      v14 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
LABEL_31:
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
    if (v21)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
    goto LABEL_33;
  }
LABEL_19:
  v6 = 0;
LABEL_33:
  if (v25 < 0)
    operator delete(v24[0]);
LABEL_9:
  std::recursive_mutex::unlock(v4);
  return v6;
}

void sub_230133DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::recursive_mutex *v26;

  pxrInternal__aapl__pxrReserved__::UsdReferences::~UsdReferences((pxrInternal__aapl__pxrReserved__::UsdReferences *)&a17);
  if (a26 < 0)
    operator delete(__p);
  std::recursive_mutex::unlock(v26);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimRemoveReference(uint64_t a1, char *a2, uint64_t a3)
{
  realityio::UsdLayerMutexTracker *v5;
  std::recursive_mutex *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;
  _BYTE v12[16];
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1)
    v5 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v5 = 0;
  v6 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v5);
  std::recursive_mutex::lock(v6);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v5) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v5))
  {
    v7 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences(v5);
    std::string::basic_string[abi:ne180100]<0>(v13, a2);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v12, 0.0, 1.0);
    v11 = 0;
    MEMORY[0x2348B1B88](__p, v13, a3 + 16, v12, &v11);
    v7 = MEMORY[0x2348B1D68](v19, __p);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v18, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    if (v16 < 0)
      operator delete(__p[0]);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v11, 0);
    if (v14 < 0)
      operator delete(v13[0]);
    if ((v22 & 7) != 0)
    {
      v8 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
    if (v20)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  }
  std::recursive_mutex::unlock(v6);
  return v7;
}

void sub_230133FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  std::recursive_mutex *v19;
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::SdfReference::~SdfReference((pxrInternal__aapl__pxrReserved__::SdfReference *)&a19);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a10, 0);
  if (a18 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::UsdReferences::~UsdReferences((pxrInternal__aapl__pxrReserved__::UsdReferences *)(v20 - 64));
  std::recursive_mutex::unlock(v19);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimSetReferences(uint64_t a1, const __CFArray *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v2;
  pxrInternal__aapl__pxrReserved__::UsdPrim *v3;
  CFIndex Count;
  CFIndex i;
  __int128 *v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  std::recursive_mutex *v18;
  uint64_t v19;
  std::string *v20;
  _QWORD v21[2];
  uint64_t *v22;
  std::string *v23;
  std::string *v24;
  unint64_t v25;
  _QWORD *v26;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if (a1)
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  else
    v3 = 0;
  if (!a1
    || (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v2))
  {
    return 0;
  }
  v18 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v2);
  std::recursive_mutex::lock(v18);
  v19 = 0;
  v20 = 0;
  v21[0] = 0;
  Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v7 = (__int128 *)((char *)CFArrayGetValueAtIndex(a2, i) + 16);
      v8 = v20;
      if ((unint64_t)v20 >= v21[0])
      {
        v10 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v20 - v19) >> 3);
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) > 0x492492492492492)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        if (0xDB6DB6DB6DB6DB6ELL * ((v21[0] - v19) >> 3) > v11)
          v11 = 0xDB6DB6DB6DB6DB6ELL * ((v21[0] - v19) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v21[0] - v19) >> 3)) >= 0x249249249249249)
          v12 = 0x492492492492492;
        else
          v12 = v11;
        v26 = v21;
        if (v12)
          v13 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>>((uint64_t)v21, v12);
        else
          v13 = 0;
        v22 = v13;
        v23 = (std::string *)&v13[7 * v10];
        v24 = v23;
        v25 = (unint64_t)&v13[7 * v12];
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(v23, v7);
        v24 = (std::string *)((char *)v24 + 56);
        std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__swap_out_circular_buffer(&v19, &v22);
        v9 = v20;
        std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfReference>::~__split_buffer((void **)&v22);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(v20, v7);
        v9 = (std::string *)((char *)v8 + 56);
      }
      v20 = v9;
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences(v3);
  v14 = MEMORY[0x2348B1D5C](&v22, &v19);
  if ((v25 & 7) != 0)
  {
    v15 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
  if (v23)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v23);
  v22 = &v19;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  std::recursive_mutex::unlock(v18);
  return v14;
}

void sub_230134258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14)
{
  pxrInternal__aapl__pxrReserved__::UsdReferences::~UsdReferences((pxrInternal__aapl__pxrReserved__::UsdReferences *)&a14);
  a13 = &a10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::recursive_mutex::unlock(a9);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyRootLayerReferences(uint64_t a1)
{
  __CFArray *Mutable;
  pxrInternal__aapl__pxrReserved__::UsdObject *v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v5;
  const char *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::SdfSpec *v14;
  void ***v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 *v20;
  __int128 *i;
  uint64_t Instance;
  const void *v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  __int128 **v31;
  const char *v32;
  uint64_t v33;
  void ***v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
    if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) == 0)
    {
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v3);
        v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v27);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v4);
        v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v31);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v3, &v25);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
        v6 = v32;
        if (v32)
        {
          v7 = (unsigned int *)(v32 + 8);
          do
          {
            v8 = __ldxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
            (*(void (**)(const char *))(*(_QWORD *)v6 + 8))(v6);
        }
        v10 = v28;
        if (v28)
        {
          v11 = (unsigned int *)(v28 + 8);
          do
          {
            v12 = __ldxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)v30) & 1) != 0)
          goto LABEL_35;
        v14 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)v30);
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v14);
        v27 = 0;
        v28 = 0;
        v29 = 0;
        if (v25)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v25 + 8)))
          {
            v31 = (__int128 **)"sdf/listEditorProxy.h";
            v32 = "_Validate";
            v33 = 423;
            v34 = (void ***)"BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::"
                            "SdfReferenceTypePolicy>::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::"
                            "SdfReferenceTypePolicy]";
            v35 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
            goto LABEL_23;
          }
          v34 = 0;
          (*(void (**)(uint64_t, __int128 **, __int128 ***))(*(_QWORD *)v25 + 72))(v25, &v27, &v31);
          v15 = v34;
          if (v34 == (void ***)&v31)
          {
            v16 = 4;
            v15 = (void ***)&v31;
          }
          else
          {
            if (!v34)
              goto LABEL_23;
            v16 = 5;
          }
          ((void (*)(void))(*v15)[v16])();
        }
LABEL_23:
        v17 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v20 = v27;
        for (i = (__int128 *)v28; v20 != i; v20 = (__int128 *)((char *)v20 + 56))
        {
          if (RIOPxrSdfReferenceGetTypeID::onceToken != -1)
            dispatch_once(&RIOPxrSdfReferenceGetTypeID::onceToken, &__block_literal_global_0);
          Instance = _CFRuntimeCreateInstance();
          v23 = (const void *)Instance;
          if (Instance)
            pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference((std::string *)(Instance + 16), v20);
          CFArrayAppendValue(Mutable, v23);
          CFRelease(v23);
        }
        v31 = &v27;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
LABEL_35:
        MEMORY[0x2348B2704](v30);
      }
    }
  }
  return Mutable;
}

void sub_2301345BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20)
{
  uint64_t *v20;
  uint64_t *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_6:
  a16 = (void **)&a12;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x2348B2704](&a15);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimCopyStage(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;

  if (a1)
    v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  else
    v1 = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1) & 1) == 0)
    return RIOPxrUsdStageCreateInMemory();
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v1);
  v2 = v10;
  if (v10)
  {
    if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&v10)
                  + 14))
      v2 = v9;
    else
      v2 = 0;
  }
  v11 = v2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v11);
  v3 = (uint64_t)v10;
  if (v10)
  {
    v4 = v10 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v7 = RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &>(&v11);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v11);
  return v7;
}

void sub_2301347A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyPrimStack(uint64_t a1)
{
  uint64_t v1;
  __CFArray *Mutable;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v5;
  unsigned int v6;
  const void *v7;
  _QWORD v9[3];
  unsigned int *v10;

  if (!a1)
    return 0;
  v1 = a1 + 24;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  MEMORY[0x2348B42AC](v9, v1);
  v3 = (unsigned int **)v9[0];
  v4 = (unsigned int **)v9[1];
  while (v3 != v4)
  {
    v5 = *v3;
    v10 = v5;
    if (v5)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    v7 = (const void *)RIOPxrSdfPrimSpecCreate<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec> &>(&v10);
    CFArrayAppendValue(Mutable, v7);
    CFRelease(v7);
    MEMORY[0x2348B2704](&v10);
    ++v3;
  }
  v10 = (unsigned int *)v9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  return Mutable;
}

uint64_t RIOPxrUsdPrimIsInstance(uint64_t result)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__::UsdObject *v2;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  pxrInternal__aapl__pxrReserved__ *v4;
  unint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(result + 24);
    if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(result + 24)) & 1) != 0)
    {
      return 0;
    }
    else
    {
      result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v2);
      if ((_DWORD)result)
      {
        v4 = *(pxrInternal__aapl__pxrReserved__ **)(v1 + 32);
        if (!v4 || (v5 = *((_QWORD *)v4 + 7), (v5 & 0x800) != 0))
        {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v4, v3);
          v5 = *((_QWORD *)v4 + 7);
        }
        return (v5 >> 8) & 1;
      }
    }
  }
  return result;
}

uint64_t RIOPxrUsdPrimIsInstanceProxy(uint64_t result)
{
  if (result)
  {
    if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(result + 24)) & 1) != 0)
      return 0;
    else
      return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  return result;
}

uint64_t RIOPxrUsdPrimIsInstanceable(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v1;

  if (a1
    && (v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24),
        (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) == 0)
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::IsInstanceable(v1);
  }
  else
  {
    return 0;
  }
}

uint64_t RIOPxrUsdPrimSetInstanceable(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  uint64_t v2;
  std::recursive_mutex *v3;

  if (!a1)
    return 0;
  v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0)
    return 0;
  v3 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
  std::recursive_mutex::lock(v3);
  v2 = pxrInternal__aapl__pxrReserved__::UsdPrim::SetInstanceable(v1);
  std::recursive_mutex::unlock(v3);
  return v2;
}

void sub_230134A44(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimClearInstanceable(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  uint64_t v2;
  std::recursive_mutex *v3;
  unint64_t Data;

  if (!a1)
    return 0;
  v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0)
    return 0;
  v3 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
  std::recursive_mutex::lock(v3);
  Data = atomic_load(MEMORY[0x24BEE7E98]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  v2 = pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 200));
  std::recursive_mutex::unlock(v3);
  return v2;
}

void sub_230134AD8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimHasAuthoredInstanceable(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v1;
  unint64_t Data;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0)
    return 0;
  Data = atomic_load(MEMORY[0x24BEE7E98]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 200));
}

uint64_t RIOPxrUsdPrimAddAppliedSchema(uint64_t a1, uint64_t a2)
{
  realityio::UsdLayerMutexTracker *v3;
  std::recursive_mutex *v4;
  uint64_t v5;

  if (a1)
    v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v3 = 0;
  v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    v5 = 0;
  }
  else
  {
    v5 = pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  }
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_230134BCC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimRemoveAppliedSchema(uint64_t a1, uint64_t a2)
{
  realityio::UsdLayerMutexTracker *v3;
  std::recursive_mutex *v4;
  uint64_t v5;

  if (a1)
    v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v3 = 0;
  v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    v5 = 0;
  }
  else
  {
    v5 = pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  }
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_230134C5C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyAppliedSchemas(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v1;
  __CFArray *Mutable;
  uint64_t *i;
  const void *v5;
  _QWORD v6[3];
  void **v7;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))
    || (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v1) & 1) != 0)
  {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(v1);
  for (i = (uint64_t *)v6[0]; i != (uint64_t *)v6[1]; ++i)
  {
    v5 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
  }
  v7 = (void **)v6;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
  return Mutable;
}

void sub_230134D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void RIOPxrUsdPrimSetAppliedSchemas(uint64_t a1, const __CFArray *a2)
{
  realityio::UsdLayerMutexTracker *v2;
  pxrInternal__aapl__pxrReserved__::UsdPrim *v3;
  std::recursive_mutex *v5;
  CFIndex Count;
  CFIndex i;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  const pxrInternal__aapl__pxrReserved__::TfToken *j;
  const pxrInternal__aapl__pxrReserved__::TfToken *v15;
  const pxrInternal__aapl__pxrReserved__::TfToken *v16;
  void **v17[3];
  const pxrInternal__aapl__pxrReserved__::TfToken *v18;
  _QWORD *v19;
  unint64_t v20;
  void ***v21;

  v2 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  if (a1)
    v3 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  else
    v3 = 0;
  if (a1
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
  {
    v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v2);
    std::recursive_mutex::lock(v5);
    Count = CFArrayGetCount(a2);
    v18 = 0;
    v19 = 0;
    v20 = 0;
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        v8 = (uint64_t *)((char *)CFArrayGetValueAtIndex(a2, i) + 16);
        v9 = *v8;
        if (*v8)
        {
          v10 = v19;
          if ((unint64_t)v19 >= v20)
          {
            v13 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v18, v8);
          }
          else
          {
            *v19 = v9;
            if ((v9 & 7) != 0)
            {
              v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
              do
                v12 = __ldxr(v11);
              while (__stxr(v12 + 2, v11));
              if ((v12 & 1) == 0)
                *v10 &= 0xFFFFFFFFFFFFFFF8;
            }
            v13 = (char *)(v10 + 1);
          }
          v19 = v13;
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(v3);
    for (j = (const pxrInternal__aapl__pxrReserved__::TfToken *)v17[0];
          j != (const pxrInternal__aapl__pxrReserved__::TfToken *)v17[1];
          j = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)j + 8))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(v3, j);
    }
    v21 = v17;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    v15 = v18;
    v16 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v19;
    while (v15 != v16)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(v3, v15);
      v15 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v15 + 8);
    }
    v17[0] = (void **)&v18;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](v17);
    std::recursive_mutex::unlock(v5);
  }
}

void sub_230134EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  std::recursive_mutex *v16;

  a16 = (void **)&a13;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::recursive_mutex::unlock(v16);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimIsPrototype(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v1;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;

  if (a1
    && (v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24),
        (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) == 0))
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::IsPrototype(v1, v2);
  }
  else
  {
    return 0;
  }
}

uint64_t RIOPxrUsdPrimCopyPrototype(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0)
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype(v1);
  v10 = 1;
  v2 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v6, &v10);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  return v2;
}

void sub_230134FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<pxrInternal__aapl__pxrReserved__::SdfSpecifier>::GetValue(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  BOOL v5;

  v3 = **(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  *(_QWORD *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(void)::ti
                      + 3;
  *(_DWORD *)a2 = v3;
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<pxrInternal__aapl__pxrReserved__::SdfSpecifier>::IsEqual(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v2 = (uint64_t)a2;
  result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((v5 & 4) != 0)
      v2 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    return *(_DWORD *)v2 == **(_DWORD **)(a1 + 8);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfSpecifierE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::GetValue(uint64_t a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue::operator=<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a2, *(uint64_t ***)(a1 + 8));
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::IsEqual(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 4) != 0)
      v6 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
    else
      v6 = *(uint64_t **)a2;
    v8 = *v6;
    v7 = v6[1];
    v9 = **(uint64_t ***)(a1 + 8);
    if (v7 - *v6 == *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - (_QWORD)v9)
    {
      if (v8 == v7)
      {
        return 1;
      }
      else
      {
        v10 = v8 + 8;
        do
        {
          v11 = *v9++;
          result = (*(_QWORD *)(v10 - 8) & 0xFFFFFFFFFFFFFFF8) == (v11 & 0xFFFFFFFFFFFFFFF8);
          v12 = (*(_QWORD *)(v10 - 8) & 0xFFFFFFFFFFFFFFF8) != (v11 & 0xFFFFFFFFFFFFFFF8) || v10 == v7;
          v10 += 8;
        }
        while (!v12);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::operator=<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t *a1, uint64_t **a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v5, (uint64_t)a1);
  a1[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_230135314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__7TfTokenENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t RIOPxrSdfPathGetTypeID()
{
  if (RIOPxrSdfPathGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfPathGetTypeID::onceToken, &__block_literal_global_30);
  return RIOPxrSdfPathGetTypeID::typeID;
}

uint64_t RIOPxrSdfPathCreateFromCString(char *__s)
{
  uint64_t v1;
  void *__p[2];
  char v4;
  int v5;

  if (!__s || !*__s)
    return RIOPxrSdfPathCreateEmptyPath();
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  MEMORY[0x2348B26F8](&v5, __p);
  v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  if (v4 < 0)
    operator delete(__p[0]);
  return v1;
}

void sub_2301354C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateEmptyPath()
{
  uint64_t v0;
  uint64_t v2;

  v2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v0 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v2);
  return v0;
}

void sub_230135554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateAbsoluteRootPath(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  _DWORD *v1;

  v1 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v1);
}

uint64_t RIOPxrSdfPathCreateReflexiveRelativePath(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  _DWORD *v1;

  v1 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(a1);
  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v1);
}

unint64_t RIOPxrSdfPathGetHash(uint64_t a1)
{
  return bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(a1 + 20)+ ((*(unsigned int *)(a1 + 20)+ (unint64_t)*(unsigned int *)(a1 + 16)+ (*(unsigned int *)(a1 + 20) + (unint64_t)*(unsigned int *)(a1 + 16))* (*(unsigned int *)(a1 + 20) + (unint64_t)*(unsigned int *)(a1 + 16))) >> 1)));
}

unint64_t _RIOPxrSdfPathCFHash(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* (a1[5]+ ((a1[5] + (unint64_t)a1[4] + (a1[5] + (unint64_t)a1[4]) * (a1[5] + (unint64_t)a1[4])) >> 1)));
}

CFStringRef RIOPxrSdfPathCopyString(uint64_t a1)
{
  const char *Text;

  if (!a1)
    return &stru_24FDFD990;
  Text = (const char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
  return CFStringCreateWithCString(0, Text, 0x8000100u);
}

uint64_t RIOPxrSdfPathCopy(uint64_t a1)
{
  if (a1)
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  else
    return RIOPxrSdfPathCreateEmptyPath();
}

uint64_t RIOPxrSdfPathGetPathElementCount(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsAbsolutePath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsPrimPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsAbsoluteRootOrPrimPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsRootPrimPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsPropertyPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsPrimPropertyPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsNamespacedPropertyPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsNamespacedPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsPrimVariantSelectionPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsPrimOrPrimVariantSelectionPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathContainsPrimVariantSelection(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathContainsPropertyElements(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return result;
}

uint64_t RIOPxrSdfPathContainsTargetPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::ContainsTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsRelationalAttributePath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsTargetPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsMapperPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsMapperArgPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsExpressionPath(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfPathIsEmpty(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() ^ 1;
  return result;
}

__CFArray *RIOPxrSdfPathCopyPrefixes(uint64_t a1)
{
  __CFArray *Mutable;
  _DWORD *i;
  const void *v4;
  _DWORD *v6;
  _DWORD *v7;
  void **v8;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    for (i = v6; i != v7; i += 2)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, i);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v8 + 1, i + 1);
      v4 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v8);
      CFArrayAppendValue(Mutable, v4);
      CFRelease(v4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
    }
    v8 = (void **)&v6;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
  return Mutable;
}

void sub_230135860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a12);
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrSdfPathCopyName(uint64_t a1)
{
  uint64_t Name;
  const char *v2;

  if (!a1)
    return &stru_24FDFD990;
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
  if (*(char *)(Name + 23) >= 0)
    v2 = (const char *)Name;
  else
    v2 = *(const char **)Name;
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

const __CFString *RIOPxrSdfPathCopyElementString(uint64_t a1)
{
  const char *p_p;
  CFStringRef v2;
  void *__p;
  char v5;

  if (!a1)
    return &stru_24FDFD990;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetElementString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
  if (v5 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v2 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_230135940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfPathCreateCopyReplacingName(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_2301359E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCopyTargetPath(uint64_t a1)
{
  _DWORD *TargetPath;

  if (!a1)
    return RIOPxrSdfPathCreateEmptyPath();
  TargetPath = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(TargetPath);
}

CFMutableArrayRef RIOPxrSdfPathCopyAllTargetPathsRecursively(uint64_t a1)
{
  CFMutableArrayRef Mutable;
  _QWORD v4[3];
  void **v5;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    memset(v4, 0, sizeof(v4));
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively();
    v5 = (void **)v4;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  return Mutable;
}

void sub_230135AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrSdfPathCopyVariantSelection(uint64_t a1)
{
  __CFArray *Mutable;
  __CFArray *v3;
  const char *v4;
  CFStringRef v5;
  const char *p_p;
  CFStringRef v7;
  void *v9;
  char v10;
  void *__p;
  char v12;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v3 = Mutable;
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    if (v10 >= 0)
      v4 = (const char *)&v9;
    else
      v4 = (const char *)v9;
    v5 = CFStringCreateWithCString(0, v4, 0x8000100u);
    CFArrayAppendValue(v3, v5);
    CFRelease(v5);
    if (v12 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v7 = CFStringCreateWithCString(0, p_p, 0x8000100u);
    CFArrayAppendValue(v3, v7);
    CFRelease(v7);
    if (v12 < 0)
      operator delete(__p);
    if (v10 < 0)
      operator delete(v9);
  }
  else
  {
    CFArrayAppendValue(Mutable, &stru_24FDFD990);
    CFArrayAppendValue(v3, &stru_24FDFD990);
  }
  return v3;
}

void sub_230135C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathHasPrefix(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  else
    return 0;
}

uint64_t RIOPxrSdfPathIsLessThan(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  else
    return 0;
}

uint64_t RIOPxrSdfPathCopyParentPath(uint64_t a1)
{
  uint64_t v1;
  int v3;

  if (!a1)
    return RIOPxrSdfPathCreateEmptyPath();
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
  v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
  return v1;
}

void sub_230135CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCopyPrimPath(uint64_t a1)
{
  uint64_t v1;
  int v3;

  if (!a1)
    return RIOPxrSdfPathCreateEmptyPath();
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
  v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
  return v1;
}

void sub_230135D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCopyPrimOrPrimVariantSelectionPath(uint64_t a1)
{
  uint64_t v1;
  int v3;

  if (!a1)
    return RIOPxrSdfPathCreateEmptyPath();
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
  v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
  return v1;
}

void sub_230135DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCopyAbsoluteRootOrPrimPath(uint64_t a1)
{
  uint64_t v1;
  int v3;

  if (!a1)
    return RIOPxrSdfPathCreateEmptyPath();
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
  v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
  return v1;
}

void sub_230135E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyStrippingAllVariantSelections(uint64_t a1)
{
  uint64_t v1;
  int v3;

  if (!a1)
    return RIOPxrSdfPathCreateEmptyPath();
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
  v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
  return v1;
}

void sub_230135EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingPath(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_230135F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingChild(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23013600C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_2301360A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingVariantSelection(uint64_t a1, char *a2, char *a3)
{
  uint64_t v4;
  void *__p;
  char v7;
  void *v8;
  char v9;
  int v10;

  if (a2 && a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, a3);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection();
    v4 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
    if (v7 < 0)
      operator delete(__p);
    if (v9 < 0)
      operator delete(v8);
    return v4;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_230136180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 24));
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_230136248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingRelationalAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_2301362E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyReplacingTargetPath(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_230136378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingMapper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_230136410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingMapperArg(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_2301364A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingExpression(uint64_t a1)
{
  uint64_t v1;
  int v3;

  if (!a1)
    return RIOPxrSdfPathCreateEmptyPath();
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
  v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
  return v1;
}

void sub_230136524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingElementString(uint64_t a1, char *a2)
{
  uint64_t v2;
  void *__p;
  char v5;
  int v6;

  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementString();
    v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
    if (v5 < 0)
      operator delete(__p);
    return v2;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_2301365D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingElementToken(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_230136688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyReplacingPrefix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;

  if (a2 && a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 16));
    v3 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    return v3;
  }
  else if (a1)
  {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_230136728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCopyCommonPrefix(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (!a2)
    return RIOPxrSdfPathCreateEmptyPath();
  pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  return v2;
}

void sub_2301367A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyMakingAbsolutePath(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (!a2)
    return RIOPxrSdfPathCreateEmptyPath();
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  return v2;
}

void sub_230136828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyMakingRelativePath(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  if (!a2)
    return RIOPxrSdfPathCreateEmptyPath();
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  return v2;
}

void sub_2301368A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrSdfPathCreateCopyRemovingCommonSuffix(uint64_t a1, uint64_t a2)
{
  __CFArray *Mutable;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t EmptyPath;
  const void *v10;
  uint64_t v11;
  const void *v12;
  int v14;
  int v15;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1 && a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::RemoveCommonSuffix((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    v5 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v14);
    v6 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v15);
    v7 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v14);
    CFArrayAppendValue(Mutable, v7);
    v8 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v15);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v5);
    CFRelease(v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  }
  else
  {
    if (a1)
      EmptyPath = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
    else
      EmptyPath = RIOPxrSdfPathCreateEmptyPath();
    v10 = (const void *)EmptyPath;
    if (a2)
      v11 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a2 + 16));
    else
      v11 = RIOPxrSdfPathCreateEmptyPath();
    v12 = (const void *)v11;
    CFArrayAppendValue(Mutable, v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v10);
    CFRelease(v12);
  }
  return Mutable;
}

void sub_230136A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathIsValidPathString(char *__s)
{
  uint64_t IsValidPathString;
  void *__p;
  char v4;

  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  IsValidPathString = pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString();
  if (v4 < 0)
    operator delete(__p);
  return IsValidPathString;
}

void sub_230136A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfPathIsValidIdentifier(char *__s)
{
  uint64_t IsValidIdentifier;
  void *__p;
  char v4;

  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  IsValidIdentifier = pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier();
  if (v4 < 0)
    operator delete(__p);
  return IsValidIdentifier;
}

void sub_230136AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfPathIsValidNamespacedIdentifier(char *__s)
{
  uint64_t IsValidNamespacedIdentifier;
  void *__p;
  char v4;

  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  IsValidNamespacedIdentifier = pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier();
  if (v4 < 0)
    operator delete(__p);
  return IsValidNamespacedIdentifier;
}

void sub_230136B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *RIOPxrSdfPathArrayDoTask(const __CFArray *a1, uint64_t a2)
{
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  _DWORD *ValueAtIndex;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  const void *v15;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  void ***v20;
  void **v21;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count)
    {
      v6 = Count;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      if (Count >= 1)
      {
        for (i = 0; i != v6; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          v9 = ValueAtIndex + 4;
          v10 = v18;
          if ((unint64_t)v18 >= v19)
          {
            v11 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v17, v9);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v18, v9);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v10 + 1, ValueAtIndex + 5);
            v11 = v10 + 2;
          }
          v18 = v11;
        }
      }
      v21 = (void **)&v17;
      v20 = &v21;
      v12 = *(_QWORD *)(a2 + 24);
      if (!v12)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, void ****))(*(_QWORD *)v12 + 48))(v12, &v20);
      v13 = *v21;
      v14 = v21[1];
      while (v13 != v14)
      {
        v15 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v13);
        CFArrayAppendValue(Mutable, v15);
        CFRelease(v15);
        v13 += 2;
      }
      v21 = (void **)&v17;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v21);
    }
  }
  return Mutable;
}

void sub_230136CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrSdfPathArrayCreateCopyConciseRelativePaths(const __CFArray *a1)
{
  __CFArray *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24FDF9C10;
  v6 = v5;
  v1 = RIOPxrSdfPathArrayDoTask(a1, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_230136D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__CFArray *RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths(const __CFArray *a1)
{
  __CFArray *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24FDF9CA0;
  v6 = v5;
  v1 = RIOPxrSdfPathArrayDoTask(a1, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_230136E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__CFArray *RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths(const __CFArray *a1)
{
  __CFArray *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24FDF9D20;
  v6 = v5;
  v1 = RIOPxrSdfPathArrayDoTask(a1, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_230136F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t _RIOPxrSdfPathCFFinalize(const void *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1 + 16);
}

BOOL _RIOPxrSdfPathCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

CFStringRef _RIOPxrSdfPathCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfPath %p>"), a1);
}

CFStringRef _RIOPxrSdfPathCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfPath %p>"), a1);
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF9C10;
  return result;
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF9C10;
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  char *v3;
  char *v4;
  char **v5;

  v2 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetConciseRelativePaths();
  if ((char **)*v2 != &v3)
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(*v2, v3, v4, (v4 - v3) >> 3);
  v5 = &v3;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_23013709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::target_type()
{
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF9CA0;
  return result;
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF9CA0;
}

uint64_t std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::operator()()
{
  return pxrInternal__aapl__pxrReserved__::SdfPath::RemoveDescendentPaths();
}

uint64_t std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::target_type()
{
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF9D20;
  return result;
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF9D20;
}

uint64_t std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::operator()()
{
  return pxrInternal__aapl__pxrReserved__::SdfPath::RemoveAncestorPaths();
}

uint64_t std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::target_type()
{
}

BOOL realityio::BuilderIsSatisfiedTracker::isBuilderWaiting(uint64_t a1, unint64_t *a2)
{
  std::recursive_mutex *v4;
  _BOOL8 v5;

  v4 = (std::recursive_mutex *)(a1 + 96);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 96));
  v5 = std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::find<std::shared_ptr<realityio::Builder>>((_QWORD *)(a1 + 16), *a2) != 0;
  std::recursive_mutex::unlock(v4);
  return v5;
}

BOOL realityio::BuilderIsSatisfiedTracker::areAllBuildersFinishedRunning(realityio::BuilderIsSatisfiedTracker *this)
{
  std::recursive_mutex *v2;
  _BOOL8 v3;

  v2 = (std::recursive_mutex *)((char *)this + 96);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 96));
  if (*((_QWORD *)this + 5))
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 10) == 0;
  std::recursive_mutex::unlock(v2);
  return v3;
}

uint64_t realityio::BuilderExecutor::runBuildersInDependencyOrder(_QWORD *a1, uint64_t a2, uint64_t a3, realityio::BuilderDependencyDAG *a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *i;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD *v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  dispatch_queue_t v34;
  void *v35;
  unsigned __int8 v36;
  dispatch_queue_t v37;
  void *v38;
  dispatch_semaphore_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  char v44;
  void *v45;
  void *v46;
  char v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v50;
  unint64_t v51;
  unint64_t *p_shared_weak_owners;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  _QWORD *j;
  NSObject *v61;
  NSObject *v62;
  os_signpost_id_t v63;
  unint64_t v64;
  NSObject *v65;
  uint64_t k;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  unint64_t *v70;
  unint64_t v71;
  int64x2_t v72;
  realityio::BuilderExecutor *v73;
  NSObject *v74;
  realityio::BuilderExecutor *v75;
  NSObject *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  int v88;
  __int128 v89;
  __int128 v90;
  int v91;
  unint64_t buf[3];
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v86 = 0u;
  v87 = 0u;
  v88 = 1065353216;
  v10 = operator new();
  v84 = a2;
  v85 = a3;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_DWORD *)(v10 + 48) = 1065353216;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_DWORD *)(v10 + 88) = 1065353216;
  MEMORY[0x2348B4CCC](v10 + 96);
  *(_QWORD *)(v10 + 160) = a4;
  for (i = (_QWORD *)a1[2]; i; i = (_QWORD *)*i)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)i[2] + 24))(&v89);
    v12 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
    if ((v89 & 7) != 0)
    {
      v13 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    if (v12)
    {
      std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100]((_QWORD *)v10, i + 2);
    }
    else
    {
      v89 = 0u;
      v90 = 0u;
      v91 = 1065353216;
      realityio::BuilderDependencyDAG::getDirectlyProvidingBuilders(a4, i + 2, (uint64_t)&v89);
      v15 = (_QWORD *)v90;
      v16 = v10 + 56;
      if ((_QWORD)v90)
      {
        while (!std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::find<std::shared_ptr<realityio::Builder>>(a1, v15[2]))
        {
          v15 = (_QWORD *)*v15;
          if (!v15)
          {
            v16 = v10 + 56;
            goto LABEL_12;
          }
        }
        v16 = v10 + 16;
      }
LABEL_12:
      std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>(v16, i + 2, i + 2);
      std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)&v89);
    }
  }
  if (*(_QWORD *)v10)
  {
    if (*(_QWORD *)(v10 + 80))
      v17 = v10 + 16;
    else
      v17 = v10 + 56;
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>(v17, (_QWORD *)v10, (_QWORD *)v10);
  }
  v88 = *(_DWORD *)(v10 + 88);
  v18 = *(_QWORD **)(v10 + 72);
  v19 = *((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v20 = 0;
    do
      *(_QWORD *)(v86 + 8 * v20++) = 0;
    while (v19 != v20);
    v21 = (_QWORD *)v87;
    v87 = 0uLL;
    if (v21)
      v22 = v18 == 0;
    else
      v22 = 1;
    if (v22)
    {
      v23 = v21;
    }
    else
    {
      do
      {
        std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](v21 + 2, v18 + 2);
        v23 = (_QWORD *)*v21;
        std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__node_insert_multi((uint64_t)&v86, v21);
        v18 = (_QWORD *)*v18;
        if (v23)
          v24 = v18 == 0;
        else
          v24 = 1;
        v21 = v23;
      }
      while (!v24);
    }
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__deallocate_node((uint64_t)&v86, v23);
  }
  for (; v18; v18 = (_QWORD *)*v18)
  {
    v25 = v18[2];
    v26 = v18[3];
    v27 = operator new(0x20uLL);
    *(_QWORD *)&v89 = v27;
    *((_QWORD *)&v89 + 1) = &v87;
    *v27 = 0;
    v27[2] = v25;
    v27[3] = v26;
    if (v26)
    {
      v28 = (unint64_t *)(v26 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    LOBYTE(v90) = 1;
    v30 = 0x9DDFEA08EB382D69 * (((8 * v25) + 8) ^ HIDWORD(v25));
    v31 = 0x9DDFEA08EB382D69 * (HIDWORD(v25) ^ (v30 >> 47) ^ v30);
    v27[1] = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__node_insert_multi((uint64_t)&v86, v27);
    *(_QWORD *)&v89 = 0;
    std::unique_ptr<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>>>>::reset[abi:ne180100]((uint64_t)&v89, 0);
  }
  v32 = operator new();
  *(_QWORD *)(v32 + 80) = 850045863;
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_WORD *)(v32 + 16) = 0;
  *(_OWORD *)(v32 + 24) = 0u;
  *(_OWORD *)(v32 + 40) = 0u;
  *(_OWORD *)(v32 + 56) = 0u;
  *(_QWORD *)(v32 + 72) = 0;
  *(_OWORD *)(v32 + 88) = 0u;
  *(_OWORD *)(v32 + 104) = 0u;
  *(_OWORD *)(v32 + 120) = 0u;
  *(_OWORD *)(v32 + 136) = 0u;
  *(_QWORD *)(v32 + 152) = 0;
  *(_QWORD *)(v32 + 160) = a4;
  *(_QWORD *)(v32 + 168) = v10;
  *(_QWORD *)(v32 + 176) = v85;
  *(_QWORD *)(v32 + 184) = v84;
  realityio::BuilderDependencyDAG::generateBuilderProviderInfo(a4, v32 + 192);
  *(_QWORD *)(v32 + 232) = a5;
  v33 = atomic_load((unsigned __int8 *)&qword_255E54D00);
  if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_255E54D00))
  {
    _MergedGlobals_49 = (uint64_t)dispatch_queue_create("com.apple.realityio.GLOBAL-concurrent-builder-execution-queue", MEMORY[0x24BDAC9C0]);
    __cxa_guard_release(&qword_255E54D00);
  }
  v34 = dispatch_queue_create_with_target_V2("com.apple.realityio.concurrent-builder-execution-queue", MEMORY[0x24BDAC9C0], (dispatch_queue_t)_MergedGlobals_49);
  v35 = *(void **)(v32 + 144);
  *(_QWORD *)(v32 + 144) = v34;

  v36 = atomic_load((unsigned __int8 *)&qword_255E54D10);
  if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255E54D10))
  {
    qword_255E54D08 = (uint64_t)dispatch_queue_create("com.apple.realityio.GLOBAL-builder-submission-queue", 0);
    __cxa_guard_release(&qword_255E54D10);
  }
  v37 = dispatch_queue_create_with_target_V2("com.apple.realityio.builder-submission-queue", 0, (dispatch_queue_t)qword_255E54D08);
  v38 = *(void **)(v32 + 152);
  *(_QWORD *)(v32 + 152) = v37;

  v39 = dispatch_semaphore_create(0);
  v40 = *(void **)(v32 + 24);
  *(_QWORD *)(v32 + 24) = v39;

  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "com.apple.realityio.should-log-builder-graph");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "objectForKey:", v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  if (v43)
    v44 = objc_msgSend(v43, "BOOLValue");
  else
    v44 = 0;
  *(_BYTE *)(v32 + 16) = v44;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "com.apple.realityio.should-log-builder-execution-times");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "objectForKey:", v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  if (v46)
    v47 = objc_msgSend(v46, "BOOLValue");
  else
    v47 = 0;
  *(_BYTE *)(v32 + 17) = v47;

  *(_QWORD *)&v89 = v32;
  v48 = (std::__shared_weak_count *)operator new();
  v48->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v48->__shared_owners_;
  v48->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF9E00;
  v48->__shared_weak_owners_ = 0;
  v48[1].__vftable = (std::__shared_weak_count_vtbl *)v32;
  *((_QWORD *)&v89 + 1) = v48;
  v50 = *(std::__shared_weak_count **)(v32 + 8);
  if (v50)
  {
    if (v50->__shared_owners_ != -1)
      goto LABEL_60;
    do
      v51 = __ldxr(p_shared_owners);
    while (__stxr(v51 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v48->__shared_weak_owners_;
    do
      v53 = __ldxr(p_shared_weak_owners);
    while (__stxr(v53 + 1, p_shared_weak_owners));
    *(_QWORD *)v32 = v32;
    *(_QWORD *)(v32 + 8) = v48;
    std::__shared_weak_count::__release_weak(v50);
  }
  else
  {
    do
      v54 = __ldxr(p_shared_owners);
    while (__stxr(v54 + 1, p_shared_owners));
    v55 = (unint64_t *)&v48->__shared_weak_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    *(_QWORD *)v32 = v32;
    *(_QWORD *)(v32 + 8) = v48;
  }
  do
    v57 = __ldaxr(p_shared_owners);
  while (__stlxr(v57 - 1, p_shared_owners));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
LABEL_60:
  v58 = v89;
  if (*(_BYTE *)(v89 + 16))
  {
    v59 = *(id *)(realityio::logObjects((realityio *)v50) + 56);
    for (j = (_QWORD *)v87; j; j = (_QWORD *)*j)
    {
      v61 = v59;
      v62 = v61;
      v63 = *(_QWORD *)(j[2] + 160);
      if (v63 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v61))
      {
        v64 = *(_QWORD *)(v85 + 272);
        LODWORD(buf[0]) = 134217984;
        *(unint64_t *)((char *)buf + 4) = v64;
        _os_signpost_emit_with_name_impl(&dword_22FF26000, v62, OS_SIGNPOST_EVENT, v63, "graph-root", "builder is ready to run at beginning of update %llu", (uint8_t *)buf, 0xCu);
      }

    }
  }
  realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder((uint64_t *)v58, (uint64_t)&v86);
  v65 = *(id *)(v58 + 24);
  dispatch_semaphore_wait(v65, 0xFFFFFFFFFFFFFFFFLL);
  for (k = v58;
        !realityio::BuilderIsSatisfiedTracker::areAllBuildersFinishedRunning(*(realityio::BuilderIsSatisfiedTracker **)(k + 168));
        k = v89)
  {
    std::mutex::lock((std::mutex *)(v58 + 80));
    v67 = *(_QWORD *)(*(_QWORD *)(v58 + 40) + ((*(_QWORD *)(v58 + 64) >> 5) & 0x7FFFFFFFFFFFFF8));
    v68 = *(_QWORD *)(v58 + 64);
    v69 = *(_OWORD *)(v67 + 16 * v68);
    *(_OWORD *)buf = v69;
    if (*((_QWORD *)&v69 + 1))
    {
      v70 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
      v67 = *(_QWORD *)(*(_QWORD *)(v58 + 40) + ((*(_QWORD *)(v58 + 64) >> 5) & 0x7FFFFFFFFFFFFF8));
      v68 = *(_QWORD *)(v58 + 64);
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v67 + 16 * v68);
    v72 = vaddq_s64(*(int64x2_t *)(v58 + 64), (int64x2_t)xmmword_230208240);
    *(int64x2_t *)(v58 + 64) = v72;
    if (v72.i64[0] >= 0x200uLL)
    {
      operator delete(**(void ***)(v58 + 40));
      *(_QWORD *)(v58 + 40) += 8;
      *(_QWORD *)(v58 + 64) -= 256;
    }
    std::mutex::unlock((std::mutex *)(v58 + 80));
    realityio::BuilderExecutor::globalPendingConcurrentWorkSemaphore(v73);
    v74 = objc_claimAutoreleasedReturnValue();
    dispatch_semaphore_wait(v74, 0xFFFFFFFFFFFFFFFFLL);

    realityio::BuilderExecutor::runBuilder(k, buf);
    realityio::BuilderExecutor::globalPendingConcurrentWorkSemaphore(v75);
    v76 = objc_claimAutoreleasedReturnValue();
    dispatch_semaphore_signal(v76);

    dispatch_semaphore_wait(v65, 0xFFFFFFFFFFFFFFFFLL);
    v77 = (std::__shared_weak_count *)buf[1];
    if (buf[1])
    {
      v78 = (unint64_t *)(buf[1] + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
  }

  v80 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  return std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)&v86);
}

void sub_230137B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  __int128 v10;
  int64x2_t v11;
  void *v12;
  __int128 *i;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::mutex *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  NSObject *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int64_t v48;
  char *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void *v67;
  void *v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t j;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  __int128 v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  int64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  void *v148;
  _QWORD *v149;
  int64x2_t v150;
  _QWORD v151[2];
  int64x2_t *block;
  int64x2_t v153;
  void *v154;
  _QWORD *v155;
  std::__shared_weak_count *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;

  if (realityio::BuilderIsSatisfiedTracker::areAllBuildersFinishedRunning((realityio::BuilderIsSatisfiedTracker *)a1[21]))
    dispatch_semaphore_signal((dispatch_semaphore_t)a1[3]);
  v150 = 0uLL;
  v151[0] = 0;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v155 = v151;
    v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)v151, v4);
    v7 = (_QWORD *)v150.i64[1];
    v8 = (_QWORD *)v150.i64[0];
    if (v150.i64[1] == v150.i64[0])
    {
      v11 = vdupq_n_s64(v150.u64[1]);
      v9 = v5;
    }
    else
    {
      v9 = v5;
      do
      {
        v10 = *((_OWORD *)v7 - 1);
        v7 -= 2;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *v7 = 0;
        v7[1] = 0;
      }
      while (v7 != v8);
      v11 = v150;
    }
    v150.i64[0] = (uint64_t)v9;
    v150.i64[1] = (uint64_t)v5;
    v153 = v11;
    v12 = (void *)v151[0];
    v151[0] = &v5[16 * v6];
    v154 = v12;
    block = (int64x2_t *)v11.i64[0];
    std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)&block);
  }
  for (i = (__int128 *)(a2 + 16);
        ;
        std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)&v150, i + 1))
  {
    i = *(__int128 **)i;
    if (!i)
      break;
  }
  v14 = 126 - 2 * __clz((v150.i64[1] - v150.i64[0]) >> 4);
  if (v150.i64[1] == v150.i64[0])
    v15 = 0;
  else
    v15 = v14;
  std::__introsort<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*,false>((__int128 *)v150.i64[0], (__int128 *)v150.i64[1], v15, 1);
  v16 = (_QWORD *)v150.i64[1];
  v17 = (_QWORD *)v150.i64[0];
  if (v150.i64[0] != v150.i64[1])
  {
    v18 = (std::mutex *)(a1 + 10);
    v149 = (_QWORD *)v150.i64[1];
    do
    {
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v17 + 56))(*v17))
      {
        std::mutex::lock(v18);
        v31 = (char *)a1[6];
        v32 = (char *)a1[5];
        v33 = v31 - v32;
        if (v31 == v32)
          v34 = 0;
        else
          v34 = 32 * (v31 - v32) - 1;
        v36 = a1[8];
        v35 = a1[9];
        v37 = v35 + v36;
        if (v34 == v35 + v36)
        {
          if (v36 >= 0x100)
          {
            a1[8] = v36 - 256;
            v40 = *(_QWORD *)v32;
            v39 = v32 + 8;
            v38 = v40;
            a1[5] = (uint64_t)v39;
            if (v31 == (char *)a1[7])
            {
              v41 = a1[4];
              v42 = (uint64_t)&v39[-v41];
              if ((unint64_t)v39 <= v41)
              {
                v80 = (uint64_t)&v31[-v41];
                v79 = v80 == 0;
                v81 = v80 >> 2;
                if (v79)
                  v82 = 1;
                else
                  v82 = v81;
                v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v82);
                v85 = &v83[8 * (v82 >> 2)];
                v86 = (uint64_t *)a1[5];
                v31 = v85;
                v87 = a1[6] - (_QWORD)v86;
                v18 = (std::mutex *)(a1 + 10);
                v16 = v149;
                if (v87)
                {
                  v31 = &v85[v87 & 0xFFFFFFFFFFFFFFF8];
                  v88 = 8 * (v87 >> 3);
                  v89 = &v83[8 * (v82 >> 2)];
                  do
                  {
                    v90 = *v86++;
                    *(_QWORD *)v89 = v90;
                    v89 += 8;
                    v88 -= 8;
                  }
                  while (v88);
                }
                v91 = (void *)a1[4];
                a1[4] = (uint64_t)v83;
                a1[5] = (uint64_t)v85;
                a1[6] = (uint64_t)v31;
                a1[7] = (uint64_t)&v83[8 * v84];
                if (v91)
                {
                  operator delete(v91);
                  v31 = (char *)a1[6];
                }
              }
              else
              {
                v43 = v42 >> 3;
                v44 = v42 >> 3 < -1;
                v45 = (v42 >> 3) + 2;
                if (v44)
                  v46 = v45;
                else
                  v46 = v43 + 1;
                v47 = &v39[-8 * (v46 >> 1)];
                v48 = v31 - v39;
                if (v31 != v39)
                {
                  memmove(&v39[-8 * (v46 >> 1)], v39, v31 - v39);
                  v31 = (char *)a1[5];
                }
                v49 = &v31[-8 * (v46 >> 1)];
                v31 = &v47[v48];
                a1[5] = (uint64_t)v49;
                a1[6] = (uint64_t)&v47[v48];
                v16 = v149;
              }
            }
            *(_QWORD *)v31 = v38;
            goto LABEL_92;
          }
          v64 = v33 >> 3;
          v65 = (char *)a1[7];
          v66 = (char *)a1[4];
          if (v33 >> 3 >= (unint64_t)((v65 - v66) >> 3))
          {
            if (v65 == v66)
              v69 = 1;
            else
              v69 = (v65 - v66) >> 2;
            v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v69);
            v72 = v71;
            v73 = operator new(0x1000uLL);
            v74 = &v70[8 * v64];
            v75 = &v70[8 * v72];
            if (v64 == v72)
            {
              v76 = 8 * v64;
              if (v33 < 1)
              {
                v92 = v73;
                v93 = v76 >> 2;
                if (v31 == v32)
                  v94 = 1;
                else
                  v94 = v93;
                v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v94);
                v74 = &v95[8 * (v94 >> 2)];
                v75 = &v95[8 * v96];
                if (v70)
                  operator delete(v70);
                v70 = v95;
                v73 = v92;
              }
              else
              {
                v77 = v76 >> 3;
                if (v77 >= -1)
                  v78 = v77 + 1;
                else
                  v78 = v77 + 2;
                v74 -= 8 * (v78 >> 1);
              }
            }
            *(_QWORD *)v74 = v73;
            v97 = v74 + 8;
            for (j = a1[6]; j != a1[5]; j -= 8)
            {
              if (v74 == v70)
              {
                if (v97 >= v75)
                {
                  if (v75 == v70)
                    v103 = 1;
                  else
                    v103 = (v75 - v70) >> 2;
                  v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v103);
                  v106 = v104;
                  v74 = &v104[(2 * v103 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v107 = v97 - v70;
                  v79 = v97 == v70;
                  v97 = v74;
                  if (!v79)
                  {
                    v97 = &v74[v107 & 0xFFFFFFFFFFFFFFF8];
                    v108 = 8 * (v107 >> 3);
                    v109 = v74;
                    v110 = (uint64_t *)v70;
                    do
                    {
                      v111 = *v110++;
                      *(_QWORD *)v109 = v111;
                      v109 += 8;
                      v108 -= 8;
                    }
                    while (v108);
                  }
                  v75 = &v104[8 * v105];
                  if (v70)
                    operator delete(v70);
                  v70 = v106;
                }
                else
                {
                  v99 = (v75 - v97) >> 3;
                  if (v99 >= -1)
                    v100 = v99 + 1;
                  else
                    v100 = v99 + 2;
                  v101 = v100 >> 1;
                  v74 = &v70[8 * (v100 >> 1)];
                  v102 = v70;
                  if (v97 != v70)
                  {
                    memmove(v74, v70, v97 - v70);
                    v102 = v97;
                  }
                  v97 = &v102[8 * v101];
                }
              }
              v112 = *(_QWORD *)(j - 8);
              *((_QWORD *)v74 - 1) = v112;
              v74 -= 8;
            }
            v113 = (void *)a1[4];
            a1[4] = (uint64_t)v70;
            a1[5] = (uint64_t)v74;
            a1[6] = (uint64_t)v97;
            a1[7] = (uint64_t)v75;
            v18 = (std::mutex *)(a1 + 10);
            v16 = v149;
            if (v113)
              operator delete(v113);
          }
          else
          {
            v67 = operator new(0x1000uLL);
            v68 = v67;
            v18 = (std::mutex *)(a1 + 10);
            if (v65 == v31)
            {
              if (v32 == v66)
              {
                if (v31 == v32)
                  v117 = 1;
                else
                  v117 = (v65 - v32) >> 2;
                v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v117);
                v32 = &v118[(2 * v117 + 6) & 0xFFFFFFFFFFFFFFF8];
                v120 = (uint64_t *)a1[5];
                v121 = v32;
                v122 = a1[6] - (_QWORD)v120;
                v18 = (std::mutex *)(a1 + 10);
                v16 = v149;
                if (v122)
                {
                  v121 = &v32[v122 & 0xFFFFFFFFFFFFFFF8];
                  v123 = 8 * (v122 >> 3);
                  v124 = v32;
                  do
                  {
                    v125 = *v120++;
                    *(_QWORD *)v124 = v125;
                    v124 += 8;
                    v123 -= 8;
                  }
                  while (v123);
                }
                v126 = (void *)a1[4];
                a1[4] = (uint64_t)v118;
                a1[5] = (uint64_t)v32;
                a1[6] = (uint64_t)v121;
                a1[7] = (uint64_t)&v118[8 * v119];
                if (v126)
                {
                  operator delete(v126);
                  v32 = (char *)a1[5];
                }
              }
              else
              {
                v16 = v149;
              }
              *((_QWORD *)v32 - 1) = v68;
              v127 = (char *)a1[5];
              v128 = (char *)a1[6];
              a1[5] = (uint64_t)(v127 - 8);
              v129 = *((_QWORD *)v127 - 1);
              a1[5] = (uint64_t)v127;
              if (v128 == (char *)a1[7])
              {
                v130 = a1[4];
                v131 = (uint64_t)&v127[-v130];
                if ((unint64_t)v127 <= v130)
                {
                  v137 = (uint64_t)&v128[-v130];
                  v79 = v137 == 0;
                  v138 = v137 >> 2;
                  if (v79)
                    v139 = 1;
                  else
                    v139 = v138;
                  v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v139);
                  v142 = &v140[8 * (v139 >> 2)];
                  v143 = (uint64_t *)a1[5];
                  v128 = v142;
                  v144 = a1[6] - (_QWORD)v143;
                  v18 = (std::mutex *)(a1 + 10);
                  v16 = v149;
                  if (v144)
                  {
                    v128 = &v142[v144 & 0xFFFFFFFFFFFFFFF8];
                    v145 = 8 * (v144 >> 3);
                    v146 = &v140[8 * (v139 >> 2)];
                    do
                    {
                      v147 = *v143++;
                      *(_QWORD *)v146 = v147;
                      v146 += 8;
                      v145 -= 8;
                    }
                    while (v145);
                  }
                  v148 = (void *)a1[4];
                  a1[4] = (uint64_t)v140;
                  a1[5] = (uint64_t)v142;
                  a1[6] = (uint64_t)v128;
                  a1[7] = (uint64_t)&v140[8 * v141];
                  if (v148)
                  {
                    operator delete(v148);
                    v128 = (char *)a1[6];
                  }
                }
                else
                {
                  v132 = v131 >> 3;
                  v44 = v131 >> 3 < -1;
                  v133 = (v131 >> 3) + 2;
                  if (v44)
                    v134 = v133;
                  else
                    v134 = v132 + 1;
                  v135 = &v127[-8 * (v134 >> 1)];
                  v136 = v128 - v127;
                  if (v128 != v127)
                  {
                    memmove(&v127[-8 * (v134 >> 1)], v127, v128 - v127);
                    v127 = (char *)a1[5];
                  }
                  v128 = &v135[v136];
                  a1[5] = (uint64_t)&v127[-8 * (v134 >> 1)];
                  a1[6] = (uint64_t)&v135[v136];
                  v16 = v149;
                }
              }
              *(_QWORD *)v128 = v129;
LABEL_92:
              a1[6] += 8;
            }
            else
            {
              *(_QWORD *)v31 = v67;
              a1[6] += 8;
              v16 = v149;
            }
          }
          v32 = (char *)a1[5];
          v35 = a1[9];
          v37 = v35 + a1[8];
        }
        v114 = *(_OWORD *)v17;
        *(_OWORD *)(*(_QWORD *)&v32[(v37 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v37) = *(_OWORD *)v17;
        if (*((_QWORD *)&v114 + 1))
        {
          v115 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
          do
            v116 = __ldxr(v115);
          while (__stxr(v116 + 1, v115));
          v35 = a1[9];
        }
        a1[9] = v35 + 1;
        dispatch_semaphore_signal((dispatch_semaphore_t)a1[3]);
        std::mutex::unlock(v18);
        goto LABEL_129;
      }
      v19 = (std::__shared_weak_count *)a1[1];
      if (!v19 || (v20 = *a1, (v21 = std::__shared_weak_count::lock(v19)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v22 = v21;
      v23 = a1[19];
      block = (int64x2_t *)MEMORY[0x24BDAC760];
      v153.i64[0] = 3321888768;
      v153.i64[1] = (uint64_t)___ZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEE_block_invoke;
      v154 = &__block_descriptor_64_ea8_32c97_ZTSKZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEE3__0_e5_v8__0l;
      v24 = (_QWORD *)*v17;
      v25 = (std::__shared_weak_count *)v17[1];
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
        v28 = (unint64_t *)&v22->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        v155 = v24;
        v156 = v25;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
      }
      else
      {
        v50 = (unint64_t *)&v22->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
        v155 = v24;
        v156 = 0;
      }
      v157 = v20;
      v158 = v22;
      v52 = (unint64_t *)&v22->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
      dispatch_async(v23, &block);
      do
        v54 = __ldaxr(v52);
      while (__stlxr(v54 - 1, v52));
      if (v54)
      {
        if (v25)
          goto LABEL_54;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        if (v25)
        {
LABEL_54:
          v55 = (unint64_t *)&v25->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      v57 = v158;
      if (v158)
      {
        v58 = (unint64_t *)&v158->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = v156;
      if (v156)
      {
        v61 = (unint64_t *)&v156->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      do
        v63 = __ldaxr(v52);
      while (__stlxr(v63 - 1, v52));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
LABEL_129:
      v17 += 2;
    }
    while (v17 != v16);
  }
  block = &v150;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&block);
}

void sub_23013859C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  void *v14;
  void *v15;

  operator delete(v15);
  if (v14)
    operator delete(v14);
  std::mutex::unlock(a9);
  a14 = &a11;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

id realityio::BuilderExecutor::globalPendingConcurrentWorkSemaphore(realityio::BuilderExecutor *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_255E54D20);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255E54D20))
  {
    qword_255E54D18 = (uint64_t)dispatch_semaphore_create(128);
    __cxa_guard_release(&qword_255E54D20);
  }
  return (id)qword_255E54D18;
}

void realityio::BuilderExecutor::runBuilder(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  os_signpost_id_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  __int128 *i;
  uint64_t *v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  _QWORD *v32;
  _QWORD *v33;
  id v35;
  _OWORD v36[2];
  int v37;
  __int128 v38;
  __int128 v39;
  int v40;
  void **v41[4];
  void ***v42;
  uint8_t v43[32];
  int v44;
  uint8_t buf[32];
  int v46;
  uint64_t v47;

  v3 = a1;
  v47 = *MEMORY[0x24BDAC8D0];
  v35 = *(id *)(realityio::logObjects((realityio *)a1) + 56);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 272);
  if (*(_BYTE *)(a1 + 16))
  {
    memset(v43, 0, sizeof(v43));
    v44 = 1065353216;
    realityio::BuilderDependencyDAG::getDirectlyDependentBuilders(*(_QWORD **)(v3 + 160), a2, (uint64_t)v43);
    v5 = *(_QWORD **)&v43[16];
    if (*(_QWORD *)&v43[16])
    {
      do
      {
        v6 = ((*(_QWORD *)(*a2 + 160) >> 2) + 2654435769 + (*(_QWORD *)(*a2 + 160) << 6) + *(_QWORD *)(v5[2] + 160)) ^ *(_QWORD *)(*a2 + 160);
        v7 = (v4 + 2654435769 + (v6 >> 2) + (v6 << 6)) ^ v6;
        v8 = v35;
        v9 = v8;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
        {
          v10 = *(_QWORD *)(*a2 + 160);
          v11 = *(_QWORD *)(v5[2] + 160);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v4;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v10;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v11;
          _os_signpost_emit_with_name_impl(&dword_22FF26000, v9, OS_SIGNPOST_EVENT, v7, "graph-edge", "builder dependency satisfied: update = %llu - providing builder = %llu - dependent builder = %llu", buf, 0x20u);
        }

        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)v43);
    v3 = a1;
  }
  v12 = *a2;
  v13 = (v4 + 2654435769 + (*(_QWORD *)(*a2 + 160) >> 2) + (*(_QWORD *)(*a2 + 160) << 6)) ^ *(_QWORD *)(*a2 + 160);
  if (*(_BYTE *)(v3 + 17))
  {
    v14 = v35;
    v15 = v14;
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      v16 = *(_QWORD *)(*a2 + 160);
      *(_DWORD *)v43 = 134218240;
      *(_QWORD *)&v43[4] = v16;
      *(_WORD *)&v43[12] = 2048;
      *(_QWORD *)&v43[14] = v4;
      _os_signpost_emit_with_name_impl(&dword_22FF26000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v13, "builder-run", "builder %llu update %llu", v43, 0x16u);
    }

    v12 = *a2;
  }
  v17 = a2[1];
  *(_QWORD *)buf = v12;
  *(_QWORD *)&buf[8] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 16);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v12 = *a2;
  }
  realityio::Inputs::Inputs((uint64_t)v43, buf, (_DWORD *)(v12 + 8), *(_QWORD *)(a1 + 184), a1 + 192, *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 232));
  if (*(_QWORD *)&buf[8])
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  (*(void (**)(unint64_t, uint8_t *))(*(_QWORD *)*a2 + 64))(*a2, v43);
  if (*(_BYTE *)(a1 + 17))
  {
    v20 = v35;
    v21 = v20;
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_22FF26000, v21, OS_SIGNPOST_INTERVAL_END, v13, "builder-run", "", buf, 2u);
    }

  }
  memset(v36, 0, sizeof(v36));
  v37 = 1065353216;
  v22 = *(_QWORD *)(a1 + 168);
  std::recursive_mutex::lock((std::recursive_mutex *)(v22 + 96));
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__erase_unique<std::shared_ptr<realityio::Builder>>((_QWORD *)(v22 + 56), a2);
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::clear((uint64_t)v36);
  v38 = 0u;
  v39 = 0u;
  v40 = 1065353216;
  realityio::BuilderDependencyDAG::getDirectlyDependentBuilders(*(_QWORD **)(v22 + 160), a2, (uint64_t)&v38);
  if (*(_QWORD *)v22 && realityio::BuilderIsSatisfiedTracker::isBuilderWaiting(v22, (unint64_t *)v22))
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t)&v38, (_QWORD *)v22, (_QWORD *)v22);
  for (i = (__int128 *)v39; i; i = *(__int128 **)i)
  {
    v24 = (uint64_t *)(i + 1);
    if (realityio::BuilderIsSatisfiedTracker::isBuilderWaiting(v22, (unint64_t *)i + 2))
    {
      std::recursive_mutex::lock((std::recursive_mutex *)(v22 + 96));
      (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)*v24 + 24))(buf);
      v25 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
      if ((buf[0] & 7) != 0)
      {
        v26 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if (v25)
      {
        if (!*(_QWORD *)(v22 + 80))
        {
          memset(buf, 0, 24);
          memset(v41, 0, 24);
          realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert((uint64_t)v41, i + 1);
          realityio::BuilderDependencyDAG::findDownstreamDependencies(*(_QWORD **)(v22 + 160), (__int128 **)v41, (uint64_t)buf);
          v28 = *(_QWORD **)(v22 + 32);
          if (v28)
          {
            while (1)
            {
              v29 = v28[2];
              if (v29 != *v24)
              {
                v30 = *(_QWORD **)buf;
                if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
                {
                  while (*v30 != v29)
                  {
                    v30 += 2;
                    if (v30 == *(_QWORD **)&buf[8])
                    {
                      v30 = *(_QWORD **)&buf[8];
                      break;
                    }
                  }
                }
                if (v30 == *(_QWORD **)&buf[8])
                  break;
              }
              v28 = (_QWORD *)*v28;
              if (!v28)
                goto LABEL_42;
            }
            v31 = 0;
          }
          else
          {
LABEL_42:
            v31 = 1;
          }
          v42 = v41;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
          v41[0] = (void **)buf;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v41);
          std::recursive_mutex::unlock((std::recursive_mutex *)(v22 + 96));
          if ((v31 & 1) == 0)
            continue;
          goto LABEL_53;
        }
      }
      else
      {
        memset(buf, 0, sizeof(buf));
        v46 = 1065353216;
        realityio::BuilderDependencyDAG::getDirectlyProvidingBuilders(*(_QWORD **)(v22 + 160), (unint64_t *)i + 2, (uint64_t)buf);
        v32 = *(_QWORD **)&buf[16];
        if (!*(_QWORD *)&buf[16])
        {
LABEL_47:
          std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)buf);
          std::recursive_mutex::unlock((std::recursive_mutex *)(v22 + 96));
LABEL_53:
          std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t)v36, (_QWORD *)i + 2, (_QWORD *)i + 2);
          std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__erase_unique<std::shared_ptr<realityio::Builder>>((_QWORD *)(v22 + 16), (_QWORD *)i + 2);
          std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>(v22 + 56, (_QWORD *)i + 2, (_QWORD *)i + 2);
          continue;
        }
        while (1)
        {
          std::recursive_mutex::lock((std::recursive_mutex *)(v22 + 96));
          if (realityio::BuilderIsSatisfiedTracker::isBuilderWaiting(v22, v32 + 2))
            break;
          std::recursive_mutex::lock((std::recursive_mutex *)(v22 + 96));
          v33 = std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::find<std::shared_ptr<realityio::Builder>>((_QWORD *)(v22 + 56), v32[2]);
          std::recursive_mutex::unlock((std::recursive_mutex *)(v22 + 96));
          std::recursive_mutex::unlock((std::recursive_mutex *)(v22 + 96));
          if (v33)
            goto LABEL_49;
          v32 = (_QWORD *)*v32;
          if (!v32)
            goto LABEL_47;
        }
        std::recursive_mutex::unlock((std::recursive_mutex *)(v22 + 96));
LABEL_49:
        std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)buf);
      }
      std::recursive_mutex::unlock((std::recursive_mutex *)(v22 + 96));
    }
  }
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)&v38);
  std::recursive_mutex::unlock((std::recursive_mutex *)(v22 + 96));
  realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(a1, v36);
  if (realityio::BuilderIsSatisfiedTracker::areAllBuildersFinishedRunning(*(realityio::BuilderIsSatisfiedTracker **)(a1 + 168)))
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 24));
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)v36);
  realityio::Inputs::~Inputs((realityio::Inputs *)v43);

}

void sub_230138C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)&a29);

  _Unwind_Resume(a1);
}

void ___ZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEE_block_invoke(realityio::BuilderExecutor *a1)
{
  NSObject *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[5];
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  realityio::BuilderExecutor::globalPendingConcurrentWorkSemaphore(a1);
  v2 = objc_claimAutoreleasedReturnValue();
  dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);

  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 5);
  v3 = *((_QWORD *)a1 + 6);
  v5 = *(NSObject **)(v3 + 144);
  v25[0] = MEMORY[0x24BDAC760];
  v25[1] = 3321888768;
  v25[2] = ___ZZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEENK3__0clEv_block_invoke;
  v25[3] = &__block_descriptor_64_ea8_32c110_ZTSKZZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEENK3__0clEvEUlvE__e5_v8__0l;
  v6 = *((_QWORD *)a1 + 4);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v3 = *((_QWORD *)a1 + 6);
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 7);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v25[4] = v6;
  v26 = v4;
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v27 = v3;
  v28 = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    dispatch_async(v5, v25);
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    dispatch_async(v5, v25);
  }
  if (v4)
  {
    v17 = (unint64_t *)&v4->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v26;
  if (v26)
  {
    v23 = (unint64_t *)&v26->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

_QWORD *__copy_helper_block_ea8_32c97_ZTSKZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEE3__0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c97_ZTSKZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEE3__0(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
}

_QWORD *std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::find<std::shared_ptr<realityio::Builder>>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v5;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::deque<std::shared_ptr<realityio::Builder>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 256;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ___ZZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEENK3__0clEv_block_invoke(uint64_t a1)
{
  realityio::BuilderExecutor *v1;
  NSObject *v2;

  realityio::BuilderExecutor::runBuilder(*(_QWORD *)(a1 + 48), (unint64_t *)(a1 + 32));
  realityio::BuilderExecutor::globalPendingConcurrentWorkSemaphore(v1);
  v2 = objc_claimAutoreleasedReturnValue();
  dispatch_semaphore_signal(v2);

}

_QWORD *__copy_helper_block_ea8_32c110_ZTSKZZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEENK3__0clEvEUlvE_(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c110_ZTSKZZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEENK3__0clEvEUlvE_(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
}

void std::default_delete<realityio::BuilderIsSatisfiedTracker>::operator()[abi:ne180100](uint64_t a1)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 96));
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table(a1 + 56);
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table(a1 + 16);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__node_insert_multi(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  int8x8_t prime;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  _QWORD *i;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint8x8_t v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;

  v4 = a2[2];
  v5 = HIDWORD(v4);
  v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    v11 = 1;
    if (v8 >= 3)
      v11 = (v8 & (v8 - 1)) != 0;
    v12 = v11 | (2 * v8);
    v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13)
      prime = (int8x8_t)v13;
    else
      prime = (int8x8_t)v12;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_92;
    if (*(_QWORD *)&prime >= v8)
      goto LABEL_43;
    v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
    {
      v21 = std::__next_prime(v21);
    }
    else
    {
      v23 = 1 << -(char)__clz(v21 - 1);
      if (v21 >= 2)
        v21 = v23;
    }
    if (*(_QWORD *)&prime <= v21)
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime >= v8)
    {
      v8 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_92:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = operator new(8 * *(_QWORD *)&prime);
      v16 = *(void **)a1;
      *(_QWORD *)a1 = v15;
      if (v16)
        operator delete(v16);
      v17 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v17++) = 0;
      while (*(_QWORD *)&prime != v17);
      v18 = *(_QWORD **)(a1 + 16);
      if (v18)
      {
        v19 = v18[1];
        v20 = (uint8x8_t)vcnt_s8(prime);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          if (v19 >= *(_QWORD *)&prime)
            v19 %= *(_QWORD *)&prime;
        }
        else
        {
          v19 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = a1 + 16;
        for (i = (_QWORD *)*v18; *v18; i = (_QWORD *)*v18)
        {
          v25 = i[1];
          if (v20.u32[0] > 1uLL)
          {
            if (v25 >= *(_QWORD *)&prime)
              v25 %= *(_QWORD *)&prime;
          }
          else
          {
            v25 &= *(_QWORD *)&prime - 1;
          }
          if (v25 == v19)
          {
            v18 = i;
          }
          else
          {
            v26 = i;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v25))
            {
              do
              {
                v27 = v26;
                v26 = (_QWORD *)*v26;
              }
              while (v26 && i[2] == v26[2]);
              *v18 = v26;
              *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v25);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v25) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v18;
              v18 = i;
              v19 = v25;
            }
          }
        }
      }
      v8 = (unint64_t)prime;
    }
    else
    {
      v39 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v39)
        operator delete(v39);
      v8 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    v29 = v7;
    if (v8 <= v7)
      v29 = v7 % v8;
  }
  else
  {
    v29 = (v8 - 1) & v7;
  }
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
  if (v30)
  {
    v31 = 0;
    do
    {
      v32 = v30;
      v30 = (_QWORD *)*v30;
      if (!v30)
        break;
      v33 = v30[1];
      if (v28.u32[0] > 1uLL)
      {
        v34 = v30[1];
        if (v33 >= v8)
          v34 = v33 % v8;
      }
      else
      {
        v34 = v33 & (v8 - 1);
      }
      if (v34 != v29)
        break;
      v35 = v33 == v7 && v30[2] == a2[2];
      v36 = v31 & !v35;
      v31 |= v35;
    }
    while (v36 != 1);
  }
  else
  {
    v32 = 0;
  }
  v37 = a2[1];
  if (v28.u32[0] > 1uLL)
  {
    if (v37 >= v8)
      v37 %= v8;
  }
  else
  {
    v37 &= v8 - 1;
  }
  if (!v32)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = a1 + 16;
    if (!*a2)
      goto LABEL_79;
    v38 = *(_QWORD *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8)
        v38 %= v8;
    }
    else
    {
      v38 &= v8 - 1;
    }
LABEL_78:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a2;
    goto LABEL_79;
  }
  *a2 = *v32;
  *v32 = a2;
  if (*a2)
  {
    v38 = *(_QWORD *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8)
        v38 %= v8;
    }
    else
    {
      v38 &= v8 - 1;
    }
    if (v38 != v37)
      goto LABEL_78;
  }
LABEL_79:
  ++*(_QWORD *)(a1 + 24);
}

void std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__erase_unique<std::shared_ptr<realityio::Builder>>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[2];
  char v14;

  v3 = std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::find<REEntity *>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = v3[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(_QWORD **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2)
      goto LABEL_19;
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_19:
      if (!*v3)
        goto LABEL_20;
      v10 = *(_QWORD *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_20:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *v8 = v11;
    *v3 = 0;
    --a1[3];
    v13[0] = v3;
    v13[1] = a1 + 2;
    v14 = 1;
    std::unique_ptr<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
}

void std::__shared_ptr_pointer<realityio::BuilderExecutor *,std::shared_ptr<realityio::BuilderExecutor>::__shared_ptr_default_delete<realityio::BuilderExecutor,realityio::BuilderExecutor>,std::allocator<realityio::BuilderExecutor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<realityio::BuilderExecutor *,std::shared_ptr<realityio::BuilderExecutor>::__shared_ptr_default_delete<realityio::BuilderExecutor,realityio::BuilderExecutor>,std::allocator<realityio::BuilderExecutor>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<realityio::BuilderExecutor>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<realityio::BuilderExecutor *,std::shared_ptr<realityio::BuilderExecutor>::__shared_ptr_default_delete<realityio::BuilderExecutor,realityio::BuilderExecutor>,std::allocator<realityio::BuilderExecutor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<realityio::BuilderExecutor>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;

  if (result)
  {
    v1 = result;
    std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table(result + 192);
    v2 = *(_QWORD *)(v1 + 168);
    *(_QWORD *)(v1 + 168) = 0;
    if (v2)
      std::default_delete<realityio::BuilderIsSatisfiedTracker>::operator()[abi:ne180100](v2);

    std::mutex::~mutex((std::mutex *)(v1 + 80));
    std::deque<std::shared_ptr<realityio::Builder>>::~deque[abi:ne180100](v1 + 32);

    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*,false>(__int128 *a1, __int128 *a2, uint64_t a3, char a4)
{
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  uint64_t v80;
  __int128 *v81;
  uint64_t v82;
  __int128 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __int128 *v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 *v108;
  __int128 *v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;

_QWORD *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *result;
  v4 = *a2;
  v5 = *(_DWORD *)(*a2 + 176);
  v6 = *a3;
  v7 = *(_DWORD *)(*a3 + 176);
  if (*(_DWORD *)(*result + 176) > v5)
  {
    if (v5 <= v7)
    {
      *result = v4;
      *a2 = v3;
      v12 = result[1];
      result[1] = a2[1];
      a2[1] = v12;
      v13 = *a2;
      if (*(_DWORD *)(*a2 + 176) <= *(_DWORD *)(*a3 + 176))
        return result;
      *a2 = *a3;
      *a3 = v13;
      v8 = a3 + 1;
      result = a2 + 1;
    }
    else
    {
      *result++ = v6;
      *a3 = v3;
      v8 = a3 + 1;
    }
    v9 = v8;
    goto LABEL_10;
  }
  if (v5 > v7)
  {
    *a2 = v6;
    *a3 = v4;
    v9 = a2 + 1;
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v11 = *result;
    if (*(_DWORD *)(*result + 176) > *(_DWORD *)(*a2 + 176))
    {
      *result++ = *a2;
      *a2 = v11;
LABEL_10:
      v14 = *result;
      *result = *v9;
      *v9 = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(char *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)a1;
      v7 = *((_QWORD *)a2 - 2);
      if (*(_DWORD *)(*(_QWORD *)a1 + 176) > *(_DWORD *)(v7 + 176))
      {
        *(_QWORD *)a1 = v7;
        *((_QWORD *)a2 - 2) = v6;
        v8 = *((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6);
      v20 = *((_QWORD *)a1 + 6);
      v21 = *((_QWORD *)a2 - 2);
      if (*(_DWORD *)(v20 + 176) > *(_DWORD *)(v21 + 176))
      {
        *((_QWORD *)a1 + 6) = v21;
        *((_QWORD *)a2 - 2) = v20;
        v22 = *((_QWORD *)a1 + 7);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v22;
        v23 = *((_QWORD *)a1 + 4);
        v24 = *((_QWORD *)a1 + 6);
        v25 = *(_DWORD *)(v24 + 176);
        if (*(_DWORD *)(v23 + 176) > v25)
        {
          v26 = *((_QWORD *)a1 + 5);
          v27 = *((_QWORD *)a1 + 7);
          *((_QWORD *)a1 + 4) = v24;
          *((_QWORD *)a1 + 5) = v27;
          *((_QWORD *)a1 + 6) = v23;
          *((_QWORD *)a1 + 7) = v26;
          v28 = *((_QWORD *)a1 + 2);
          if (*(_DWORD *)(v28 + 176) > v25)
          {
            v29 = *((_QWORD *)a1 + 3);
            *((_QWORD *)a1 + 2) = v24;
            *((_QWORD *)a1 + 3) = v27;
            *((_QWORD *)a1 + 4) = v28;
            *((_QWORD *)a1 + 5) = v29;
            v30 = *(_QWORD *)a1;
            if (*(_DWORD *)(*(_QWORD *)a1 + 176) > v25)
            {
              v31 = *((_QWORD *)a1 + 1);
              *(_QWORD *)a1 = v24;
              *((_QWORD *)a1 + 1) = v27;
              *((_QWORD *)a1 + 2) = v30;
              *((_QWORD *)a1 + 3) = v31;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4);
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)(*(_QWORD *)v9 + 176) > *(_DWORD *)(*(_QWORD *)v10 + 176))
    {
      v13 = *((_QWORD *)v10 + 1);
      *(_QWORD *)&v32 = *(_QWORD *)v10;
      *((_QWORD *)&v32 + 1) = v13;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      v14 = v11;
      while (1)
      {
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)&a1[v14 + 48], (__int128 *)&a1[v14 + 32]);
        if (v14 == -32)
          break;
        v15 = *(_DWORD *)(*(_QWORD *)&a1[v14 + 16] + 176);
        v14 -= 16;
        if (v15 <= *(_DWORD *)(v32 + 176))
        {
          v16 = (uint64_t)&a1[v14 + 48];
          goto LABEL_13;
        }
      }
      v16 = (uint64_t)a1;
LABEL_13:
      std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v16, &v32);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

_QWORD *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*a3 + 176) > *(_DWORD *)(*a4 + 176))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = *a2;
    if (*(_DWORD *)(*a2 + 176) > *(_DWORD *)(*a3 + 176))
    {
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      v13 = *a1;
      if (*(_DWORD *)(*a1 + 176) > *(_DWORD *)(*a2 + 176))
      {
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t realityio::mtlx::MtlxActionPayload::MtlxActionPayload(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v14;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v15;
  __int16 v16;
  uint64_t Name;
  __int128 v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  __int16 v24;
  unint64_t v25;
  const char *v26;
  void *v27;
  void *v28;
  std::string *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  const char *v37;
  void *v38;
  void *v39;
  id v40;
  __n128 v41;
  __int128 v42;
  id v43;
  std::string v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  std::string::size_type v48;
  void **v49;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle()
     + 4;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_QWORD *)(a1 + 200) = objc_opt_new();
  *(_QWORD *)(a1 + 208) = objc_opt_new();
  v5 = objc_opt_new();
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 216) = v5;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_WORD *)(a1 + 288) = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a2 + 16))(&v46, *(_QWORD *)a2, a2[2]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)&v46);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
  Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)(a1 + 8), (_QWORD *)Data + 1);
  v7 = *(_QWORD *)a2;
  v8 = *((_QWORD *)a2 + 1);
  MEMORY[0x2348B274C](&v44, "info:id");
  v46 = v7;
  v47 = v8;
  v48 = v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v9 = (unsigned int *)(v44.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v48 = (std::string::size_type)v9;
  }
  if ((v44.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v11 = (unsigned int *)(v44.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if (!(*(unsigned int (**)(uint64_t, _QWORD, std::string::size_type *))(*(_QWORD *)v46 + 184))(v46, v47, &v48)|| ((*(uint64_t (**)(uint64_t, _QWORD, std::string::size_type *))(*(_QWORD *)v46 + 32))(v46, v47, &v48) & 1) == 0)
  {
    realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, CFSTR("No identification attribute found."), 1u, 0);
    goto LABEL_26;
  }
  v45 = 0;
  if (!(*(unsigned int (**)(uint64_t, _QWORD, std::string::size_type *, uint64_t *))(*(_QWORD *)v46 + 112))(v46, v47, &v48, &v45))goto LABEL_31;
  v13 = v45 & 0xFFFFFFFFFFFFFFF8;
  if ((v45 & 0xFFFFFFFFFFFFFFF8) == 0)
    goto LABEL_31;
  if (*(char *)(v13 + 39) < 0)
  {
    if (*(_QWORD *)(v13 + 24))
      goto LABEL_17;
LABEL_31:
    realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, CFSTR("Identitfication attribute is not valid."), 1u, 0);
    goto LABEL_32;
  }
  if (!*(_BYTE *)(v13 + 39))
    goto LABEL_31;
LABEL_17:
  v14 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  if ((v45 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 13) & 0xFFFFFFFFFFFFFFF8))
  {
    v24 = *(_WORD *)(a1 + 288) | 1;
  }
  else
  {
    v15 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v15)
      v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    v16 = *(_WORD *)(a1 + 288);
    if ((v45 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v15 + 14) & 0xFFFFFFFFFFFFFFF8))
    {
      *(_WORD *)(a1 + 288) = v16 | 8;
      Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
      }
      else
      {
        v18 = *(_OWORD *)Name;
        v44.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v18;
      }
      v25 = v45 & 0xFFFFFFFFFFFFFFF8;
      if ((v45 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v26 = (const char *)(v25 + 16);
        if (*(char *)(v25 + 39) < 0)
          v26 = *(const char **)v26;
      }
      else
      {
        v26 = "";
      }
      v27 = (void *)MEMORY[0x24BE8F618];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v26);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v44;
      else
        v29 = (std::string *)v44.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v29);
      v43 = 0;
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "nodeWithNodeDefName:name:error:", v28, v30, &v43);
      v31 = objc_claimAutoreleasedReturnValue();
      v40 = v43;
      v32 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v31;

      if (*(_QWORD *)(a1 + 24))
      {
        v41 = *(__n128 *)a2;
        (*(void (**)(__int128 *__return_ptr, unint64_t, __n128 *, __n128))(*(_QWORD *)v41.n128_u64[0]
                                                                                           + 200))(&v42, v41.n128_u64[0], &v41, v41);
        objc_msgSend(*(id *)(a1 + 24), "inputs");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        realityio::mtlx::MtlxActionPayload::addSiblingInputs((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (unsigned int **)&v42, v33);

        v49 = (void **)&v42;
        std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&v49);
        v41 = *(__n128 *)a2;
        (*(void (**)(__int128 *__return_ptr, unint64_t, __n128 *, __n128))(*(_QWORD *)v41.n128_u64[0]
                                                                                           + 208))(&v42, v41.n128_u64[0], &v41, v41);
        objc_msgSend(*(id *)(a1 + 24), "outputs");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        realityio::mtlx::MtlxActionPayload::addSiblingOutputs((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (unsigned int **)&v42, v34);

        v49 = (void **)&v42;
        std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&v49);
        v42 = *(_OWORD *)a2;
        realityio::mtlx::MtlxActionPayload::initializeTextureCoords(a1, (uint64_t)&v42, &v45);
        v35 = v40;
      }
      else
      {
        v36 = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (v36)
        {
          v37 = (const char *)(v36 + 16);
          if (*(char *)(v36 + 39) < 0)
            v37 = *(const char **)v37;
        }
        else
        {
          v37 = "";
        }
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v37);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to import from %@"), v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = v40;
        realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, v39, 2u, v40);

      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);

      goto LABEL_32;
    }
    v24 = v16 | 2;
  }
  *(_WORD *)(a1 + 288) = v24;
LABEL_32:
  if ((v45 & 7) != 0)
  {
    v22 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
LABEL_26:
  if ((v48 & 7) != 0)
  {
    v19 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  void *v7;
  uint64_t Name;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  __n128 v21;
  __n128 v22;
  unsigned int *v23[3];

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle()
     + 4;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_QWORD *)(a1 + 200) = objc_opt_new();
  *(_QWORD *)(a1 + 208) = objc_opt_new();
  v5 = objc_opt_new();
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 216) = v5;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_WORD *)(a1 + 288) = 0;
  (*(void (**)(unsigned int **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a2 + 16))(v23, *(_QWORD *)a2, a2[2]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)v23);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
  Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)(a1 + 8), Data);
  v7 = (void *)MEMORY[0x24BDD17C8];
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  if (*(char *)(Name + 23) >= 0)
    v9 = Name;
  else
    v9 = *(_QWORD *)Name;
  objc_msgSend(v7, "stringWithUTF8String:", v9, a1 + 160, a1 + 120, a1 + 80, a1 + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = *(__n128 *)a2;
  (*(void (**)(unsigned int **__return_ptr, unint64_t, __n128 *, __n128))(*(_QWORD *)v22.n128_u64[0]
                                                                                          + 200))(v23, v22.n128_u64[0], &v22, v22);
  v21 = *(__n128 *)a2;
  (*(void (**)(__n128 *__return_ptr, unint64_t, __n128 *, __n128))(*(_QWORD *)v21.n128_u64[0] + 208))(&v22, v21.n128_u64[0], &v21, v21);
  realityio::mtlx::MtlxActionPayload::createSGInputs((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, v23[0], v23[1]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  realityio::mtlx::MtlxActionPayload::createSGOutputs((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (uint64_t **)&v22);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BE8F600], "graphWithName:inputs:outputs:", v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  realityio::mtlx::MtlxActionPayload::setSGGraph(a1, v13);

  v14 = *(id *)(a1 + 16);
  objc_msgSend(v14, "argumentsNode");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "outputs");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  realityio::mtlx::MtlxActionPayload::addArgumentOutputs(a1, (realityio::mtlx::NeoShadeNodeGraph *)a2, v16);

  v17 = *(id *)(a1 + 16);
  objc_msgSend(v17, "resultsNode");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "inputs");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  realityio::mtlx::MtlxActionPayload::addResultInputs(a1, (realityio::mtlx::NeoShadeNodeGraph *)a2, v19);

  v21.n128_u64[0] = (unint64_t)&v22;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  v22.n128_u64[0] = (unint64_t)v23;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);

  return a1;
}

void sub_23013ACA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table(v32);
  std::__tree<std::string>::destroy(v31, *(char **)(v28 + 232));

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(v30);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(v29);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(a12);

  v34 = *(_QWORD *)(v28 + 8);
  if ((v34 & 7) != 0)
  {
    v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v28);
  _Unwind_Resume(a1);
}

void realityio::mtlx::MtlxActionPayload::setError(pxrInternal__aapl__pxrReserved__::SdfPath *a1, void *a2, unsigned int a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSError *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a4;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a1));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Error in prim %@: %@"), v9, v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v9, CFSTR("primPath"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v7, CFSTR("message"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, *MEMORY[0x24BDD0FC8]);
  if (v8)
  {
    v14[0] = v8;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v14, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v12, CFSTR("NSMultipleUnderlyingErrorsKey"));

  }
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("MaterialX"), a3, v11);
  v13 = (NSError *)objc_claimAutoreleasedReturnValue();
  realityio::mtlx::MtlxActionPayload::setError(a1, v13);

}

void sub_23013AFD8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void realityio::mtlx::MtlxActionPayload::addSiblingInputs(pxrInternal__aapl__pxrReserved__::SdfPath *a1, unsigned int **a2, void *a3)
{
  id v5;
  realityio *v6;
  realityio *v7;
  unsigned int *v8;
  unsigned int *v9;
  NSObject *v10;
  uint64_t Text;
  void *v12;
  unint64_t v13;
  const char *v14;
  void *v15;
  id v16;
  unsigned int *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void **v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  void *v37;
  id v38;
  id v39;
  void **v40;
  unsigned int v41;
  unsigned int *v42;
  uint64_t v43;
  _QWORD v44[5];
  uint8_t buf[32];
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[16];
  id v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  if (!*((_QWORD *)a1 + 4))
  {
    v38 = v5;
    v39 = 0;
    v6 = (realityio *)v5;
    v7 = v6;
    v9 = *a2;
    v8 = a2[1];
    if (*a2 == v8)
    {
LABEL_29:

    }
    else
    {
      while (1)
      {
        v10 = *(id *)(realityio::logObjects(v6) + 48);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(void ***__return_ptr, _QWORD, _QWORD, unsigned int *))(**(_QWORD **)v9 + 24))(&v40, *(_QWORD *)v9, v9[2], v9 + 4);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = Text;
          _os_log_impl(&dword_22FF26000, v10, OS_LOG_TYPE_INFO, "    Adding sibling input %s", buf, 0xCu);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
        }

        v12 = (void *)MEMORY[0x24BDD17C8];
        (*(void (**)(uint8_t *__return_ptr, _QWORD, _QWORD, unsigned int *, uint64_t))(**(_QWORD **)v9 + 40))(buf, *(_QWORD *)v9, v9[2], v9 + 4, 1);
        v13 = *(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v14 = (const char *)(v13 + 16);
          if (*(char *)(v13 + 39) < 0)
            v14 = *(const char **)v14;
        }
        else
        {
          v14 = "";
        }
        objc_msgSend(v12, "stringWithUTF8String:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v39;
        v39 = v15;

        if ((buf[0] & 7) != 0)
        {
          v17 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        v44[0] = MEMORY[0x24BDAC760];
        v44[1] = 3221225472;
        v44[2] = ___ZN9realityio4mtlx12_GLOBAL__N_19addInputsERKNSt3__16vectorINS0_13NeoShadeInputENS2_9allocatorIS4_EEEEPK7NSArrayIP7SGInputERNS2_13unordered_mapIN32pxrInternal__aapl__pxrReserved__7SdfPathENS0_17MtlxActionPayload11InputRecordENSI_4HashENS2_8equal_toISI_EENS5_INS2_4pairIKSI_SK_EEEEEERU8__strongP8NSString_block_invoke;
        v44[3] = &__block_descriptor_40_e24_B32__0__SGInput_8Q16_B24l;
        v44[4] = &v39;
        v19 = (void *)MEMORY[0x2348B5260](v44);
        v20 = -[realityio indexOfObjectPassingTest:](v7, "indexOfObjectPassingTest:", v19);
        realityio::mtlx::MtlxActionPayload::Connectable::Connectable<realityio::mtlx::NeoShadeInput>((uint64_t)buf, v9);
        v49 = 0;
        if (v20 == 0x7FFFFFFFFFFFFFFFLL)
          break;
        -[realityio objectAtIndex:](v7, "objectAtIndex:", v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = v49;
        v49 = v21;

        if (!v49)
          break;
        v23 = *(void ***)v9;
        v41 = v9[2];
        v40 = v23;
        v24 = (unsigned int *)*((_QWORD *)v9 + 2);
        v42 = v24;
        if ((v24 & 7) != 0)
        {
          v25 = (unsigned int *)((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 2, v25));
          if ((v26 & 1) == 0)
            v42 = v25;
        }
        (*((void (**)(uint64_t *__return_ptr, void **, _QWORD, unsigned int **))*v40 + 3))(&v43, v40, v41, &v42);
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>((uint64_t)a1 + 120, (unsigned int *)&v43, &v43, (uint64_t)buf);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
        if ((v42 & 7) != 0)
        {
          v27 = (unsigned int *)((unint64_t)v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v28 = __ldxr(v27);
          while (__stlxr(v28 - 2, v27));
        }

        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v48);
        if ((v47 & 7) != 0)
        {
          v29 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
          do
            v30 = __ldxr(v29);
          while (__stlxr(v30 - 2, v29));
        }
        if ((v46 & 7) != 0)
        {
          v31 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
          do
            v32 = __ldxr(v31);
          while (__stlxr(v32 - 2, v31));
        }
        v40 = (void **)&buf[8];
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v40);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);

        v9 += 6;
        if (v9 == v8)
          goto LABEL_29;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v48);
      if ((v47 & 7) != 0)
      {
        v33 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      if ((v46 & 7) != 0)
      {
        v35 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      v40 = (void **)&buf[8];
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v40);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unknown input name '%@' in '%s'"), v39, pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a1));
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      realityio::mtlx::MtlxActionPayload::setError(a1, v37, 6u, 0);

    }
    v5 = v38;
  }

}

void sub_23013B44C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void realityio::mtlx::MtlxActionPayload::addSiblingOutputs(pxrInternal__aapl__pxrReserved__::SdfPath *a1, unsigned int **a2, void *a3)
{
  id v5;
  realityio *v6;
  realityio *v7;
  unsigned int *v8;
  unsigned int *v9;
  NSObject *v10;
  uint64_t Text;
  void *v12;
  unint64_t v13;
  const char *v14;
  __CFString *v15;
  __CFString *v16;
  unsigned int *v17;
  unsigned int v18;
  __CFString *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  void **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  void *v38;
  id v39;
  __CFString *v40;
  void **v41;
  unsigned int v42;
  unsigned int *v43;
  uint64_t v44;
  _QWORD v45[5];
  uint8_t buf[32];
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[16];
  id v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  if (!*((_QWORD *)a1 + 4))
  {
    v39 = v5;
    v40 = 0;
    v6 = (realityio *)v5;
    v7 = v6;
    v8 = *a2;
    v9 = a2[1];
    if (*a2 == v9)
    {
LABEL_32:

    }
    else
    {
      while (1)
      {
        v10 = *(id *)(realityio::logObjects(v6) + 48);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(void ***__return_ptr, _QWORD, _QWORD, unsigned int *))(**(_QWORD **)v8 + 24))(&v41, *(_QWORD *)v8, v8[2], v8 + 4);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = Text;
          _os_log_impl(&dword_22FF26000, v10, OS_LOG_TYPE_INFO, "    Adding sibling output %s", buf, 0xCu);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
        }

        v12 = (void *)MEMORY[0x24BDD17C8];
        (*(void (**)(uint8_t *__return_ptr, _QWORD, _QWORD, unsigned int *, _QWORD))(**(_QWORD **)v8 + 40))(buf, *(_QWORD *)v8, v8[2], v8 + 4, 0);
        v13 = *(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v14 = (const char *)(v13 + 16);
          if (*(char *)(v13 + 39) < 0)
            v14 = *(const char **)v14;
        }
        else
        {
          v14 = "";
        }
        objc_msgSend(v12, "stringWithUTF8String:", v14);
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v16 = v40;
        v40 = v15;

        if ((buf[0] & 7) != 0)
        {
          v17 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        if ((-[__CFString isEqualToString:](v40, "isEqualToString:", CFSTR("surface")) & 1) != 0
          || -[__CFString isEqualToString:](v40, "isEqualToString:", CFSTR("vertex")))
        {
          v19 = v40;
          v40 = CFSTR("out");

        }
        v45[0] = MEMORY[0x24BDAC760];
        v45[1] = 3221225472;
        v45[2] = ___ZN9realityio4mtlx12_GLOBAL__N_110addOutputsERKNSt3__16vectorINS0_14NeoShadeOutputENS2_9allocatorIS4_EEEEPK7NSArrayIP8SGOutputERNS2_13unordered_mapIN32pxrInternal__aapl__pxrReserved__7SdfPathENS0_17MtlxActionPayload12OutputRecordENSI_4HashENS2_8equal_toISI_EENS5_INS2_4pairIKSI_SK_EEEEEERU8__strongP8NSString_block_invoke;
        v45[3] = &__block_descriptor_40_e25_B32__0__SGOutput_8Q16_B24l;
        v45[4] = &v40;
        v20 = (void *)MEMORY[0x2348B5260](v45);
        v21 = -[realityio indexOfObjectPassingTest:](v7, "indexOfObjectPassingTest:", v20);
        realityio::mtlx::MtlxActionPayload::Connectable::Connectable<realityio::mtlx::NeoShadeOutput>((uint64_t)buf, v8);
        v50 = 0;
        if (v21 == 0x7FFFFFFFFFFFFFFFLL)
          break;
        -[realityio objectAtIndex:](v7, "objectAtIndex:", v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = v50;
        v50 = v22;

        if (!v50)
          break;
        v24 = *(void ***)v8;
        v42 = v8[2];
        v41 = v24;
        v25 = (unsigned int *)*((_QWORD *)v8 + 2);
        v43 = v25;
        if ((v25 & 7) != 0)
        {
          v26 = (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFF8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 2, v26));
          if ((v27 & 1) == 0)
            v43 = v26;
        }
        (*((void (**)(uint64_t *__return_ptr, void **, _QWORD, unsigned int **))*v41 + 3))(&v44, v41, v42, &v43);
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>((uint64_t)a1 + 160, (unsigned int *)&v44, &v44, (uint64_t)buf);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44);
        if ((v43 & 7) != 0)
        {
          v28 = (unsigned int *)((unint64_t)v43 & 0xFFFFFFFFFFFFFFF8);
          do
            v29 = __ldxr(v28);
          while (__stlxr(v29 - 2, v28));
        }

        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v49);
        if ((v48 & 7) != 0)
        {
          v30 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
          do
            v31 = __ldxr(v30);
          while (__stlxr(v31 - 2, v30));
        }
        if ((v47 & 7) != 0)
        {
          v32 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        v41 = (void **)&buf[8];
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v41);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);

        v8 += 6;
        if (v8 == v9)
          goto LABEL_32;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v49);
      if ((v48 & 7) != 0)
      {
        v34 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      if ((v47 & 7) != 0)
      {
        v36 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      v41 = (void **)&buf[8];
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v41);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);

      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Unknown output name '%@' in '%s'"), v40, pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a1));
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      realityio::mtlx::MtlxActionPayload::setError(a1, v38, 7u, 0);

    }
    v5 = v39;
  }

}

void sub_23013B930(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void realityio::mtlx::MtlxActionPayload::initializeTextureCoords(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v7;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v8;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v9;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v10;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v11;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v12;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v13;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v14;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v15;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v16;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v17;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v18;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v19;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v20;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v21;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v22;
  uint64_t v23;
  char v24;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v29;
  _QWORD *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v39;
  _QWORD *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v45;
  int v46;
  std::string::size_type v47;
  unsigned int *v48;
  unsigned int v49;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v51;
  int v52;
  std::string *v53;
  std::string::size_type size;
  std::string *v55;
  __int128 v56;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  _QWORD *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t **v74;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v75;
  char v76;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v77;
  char v78;
  int v79;
  unsigned int *v80;
  unsigned int v81;
  std::string::size_type v82;
  pxrInternal__aapl__pxrReserved__::TfToken *v83;
  const std::string *EmptyString;
  int v85;
  pxrInternal__aapl__pxrReserved__::VtValue *v86;
  uint64_t MutableObj;
  __int128 v88;
  unsigned int *v89;
  unsigned int v90;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v91;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v92;
  uint64_t v93;
  _QWORD *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  const char *v99;
  realityio *v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  std::string::size_type v106;
  int v107;
  std::string::size_type v108;
  uint64_t Name;
  std::string *v110;
  int v111;
  uint64_t v112;
  std::string *v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  uint64_t v121;
  __int128 v122;
  uint64_t **v123;
  char v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int *v127;
  std::string v128;
  std::string::size_type v129;
  uint64_t v130;
  std::string v131;
  std::string buf;
  uint64_t v133;
  char v134;
  std::string v135;
  std::string v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 18) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_53;
  v7 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v7 + 20) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_53:
    v25 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v25)
      v25 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    v26 = (unsigned int *)*((_QWORD *)v25 + 32);
    v127 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)((unint64_t)v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v127 = v27;
    }
    realityio::TexcoordID::TexcoordID((uint64_t)&buf, &v127, 0, 0);
    v29 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v29)
      v29 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    v30 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(a1 + 248, *((_QWORD *)v29 + 32), (uint64_t *)v29 + 32);
    realityio::TexcoordID::operator=((uint64_t)(v30 + 3), (uint64_t)&buf);
    if (v134 < 0)
      operator delete((void *)buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__s.__data_[8] & 7) != 0)
    {
      v31 = (unsigned int *)(buf.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    if ((v127 & 7) != 0)
    {
      v33 = (unsigned int *)((unint64_t)v127 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    return;
  }
  v8 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v8)
    v8 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 19) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_71;
  v9 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v9)
    v9 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v9 + 21) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_71:
    v35 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v35)
      v35 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    v36 = (unsigned int *)*((_QWORD *)v35 + 33);
    v126 = v36;
    if ((v36 & 7) != 0)
    {
      v37 = (unsigned int *)((unint64_t)v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 2, v37));
      if ((v38 & 1) == 0)
        v126 = v37;
    }
    realityio::TexcoordID::TexcoordID((uint64_t)&buf, &v126, 1, 0);
    v39 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v39)
      v39 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    v40 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(a1 + 248, *((_QWORD *)v39 + 33), (uint64_t *)v39 + 33);
    realityio::TexcoordID::operator=((uint64_t)(v40 + 3), (uint64_t)&buf);
    if (v134 < 0)
      operator delete((void *)buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__s.__data_[8] & 7) != 0)
    {
      v41 = (unsigned int *)(buf.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    if ((v126 & 7) != 0)
    {
      v43 = (unsigned int *)((unint64_t)v126 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
    return;
  }
  v10 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v10 + 15) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_89;
  v11 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v11)
    v11 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v11 + 16) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_89;
  v12 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v12)
    v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v12 + 17) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_89:
    v45 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v45)
      v45 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    v46 = *(_DWORD *)(a2 + 8);
    v128.__r_.__value_.__r.__words[0] = *(_QWORD *)a2;
    LODWORD(v128.__r_.__value_.__r.__words[1]) = v46;
    v47 = *((_QWORD *)v45 + 8);
    v128.__r_.__value_.__r.__words[2] = v47;
    if ((v47 & 7) != 0)
    {
      v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 2, v48));
      if ((v49 & 1) == 0)
        v128.__r_.__value_.__r.__words[2] = (std::string::size_type)v48;
    }
    v131.__r_.__value_.__l.__size_ = 0;
    (*(void (**)(std::string::size_type, _QWORD, std::string::size_type *, std::string *))(*(_QWORD *)v128.__r_.__value_.__l.__data_ + 104))(v128.__r_.__value_.__r.__words[0], LODWORD(v128.__r_.__value_.__r.__words[1]), &v128.__r_.__value_.__r.__words[2], &v131);
    if ((*(unsigned int (**)(std::string::size_type, _QWORD, std::string::size_type *))(*(_QWORD *)v128.__r_.__value_.__l.__data_
                                                                                                  + 32))(v128.__r_.__value_.__r.__words[0], LODWORD(v128.__r_.__value_.__r.__words[1]), &v128.__r_.__value_.__r.__words[2])&& (Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v131), pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB798], v51)))
    {
      v52 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)&v131);
    }
    else
    {
      v52 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v136, "UV");
    std::to_string(&v135, v52);
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &v135;
    else
      v53 = (std::string *)v135.__r_.__value_.__r.__words[0];
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v135.__r_.__value_.__r.__words[2]);
    else
      size = v135.__r_.__value_.__l.__size_;
    v55 = std::string::append(&v136, (const std::string::value_type *)v53, size);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x2348B2764](&v130, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v135.__r_.__value_.__l.__data_);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v136.__r_.__value_.__l.__data_);
    v57 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v57)
      v57 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    v58 = *a3 & 0xFFFFFFFFFFFFFFF8;
    v59 = *((_QWORD *)v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v125 = v130;
    if ((v130 & 7) != 0)
    {
      v60 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 2, v60));
      if ((v61 & 1) == 0)
        v125 = (uint64_t)v60;
    }
    realityio::TexcoordID::TexcoordID((uint64_t)&buf, &v125, v52, v58 != v59);
    v62 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(a1 + 248, v130, &v130);
    realityio::TexcoordID::operator=((uint64_t)(v62 + 3), (uint64_t)&buf);
    if (v134 < 0)
      operator delete((void *)buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__s.__data_[8] & 7) != 0)
    {
      v63 = (unsigned int *)(buf.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8);
      do
        v64 = __ldxr(v63);
      while (__stlxr(v64 - 2, v63));
    }
    if ((v125 & 7) != 0)
    {
      v65 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
      do
        v66 = __ldxr(v65);
      while (__stlxr(v66 - 2, v65));
    }
    if ((v130 & 7) != 0)
    {
      v67 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFFFF8);
      do
        v68 = __ldxr(v67);
      while (__stlxr(v68 - 2, v67));
    }
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v131);
    if ((v128.__r_.__value_.__s.__data_[16] & 7) != 0)
    {
      v69 = (unsigned int *)(v128.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8);
      do
        v70 = __ldxr(v69);
      while (__stlxr(v70 - 2, v69));
    }
    return;
  }
  v13 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v13)
    v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v13 + 27) & 0xFFFFFFFFFFFFFFF8))
  {
    v24 = 0;
    v71 = 0;
    v23 = 1;
  }
  else
  {
    v14 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v14)
      v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 28) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_134;
    v15 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v15)
      v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 29) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_134;
    v16 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 30) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_134;
    v17 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v17)
      v17 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 31) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_134:
      v24 = 0;
      v23 = 1;
LABEL_135:
      v71 = 1;
      goto LABEL_137;
    }
    v18 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v18)
      v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v18 + 22) & 0xFFFFFFFFFFFFFFF8))
    {
      v19 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v19)
        v19 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v19 + 23) & 0xFFFFFFFFFFFFFFF8))
      {
        v20 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v20)
          v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
        if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v20 + 24) & 0xFFFFFFFFFFFFFFF8))
        {
          v21 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
          if (!v21)
            v21 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
          if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v21 + 25) & 0xFFFFFFFFFFFFFFF8))
          {
            v22 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
            if (!v22)
              v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
            if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v22 + 26) & 0xFFFFFFFFFFFFFFF8))
              return;
          }
        }
      }
      v23 = 0;
      v24 = 1;
      goto LABEL_135;
    }
    v23 = 0;
    v71 = 0;
    v24 = 1;
  }
LABEL_137:
  v72 = *(_QWORD **)(a1 + 136);
  if (v72)
  {
    v73 = a1 + 248;
    v74 = (uint64_t **)(a1 + 224);
    v124 = v24 ^ 1;
    v123 = (uint64_t **)(a1 + 224);
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v72 + 2));
      pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace();
      v75 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v75)
        v75 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
      if ((v130 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v75 + 9) & 0xFFFFFFFFFFFFFFF8))
        v76 = v23;
      else
        v76 = 0;
      if ((v76 & 1) == 0)
      {
        v77 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v77)
          v77 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
        v78 = v124;
        if ((v130 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v77 + 10) & 0xFFFFFFFFFFFFFFF8))
          v78 = 1;
        if ((v78 & 1) != 0)
          goto LABEL_219;
      }
      v129 = 0;
      memset(&v128, 0, sizeof(v128));
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v72 + 10));
      v79 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
      if (v79)
      {
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v72 + 10));
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&buf) & 1) != 0)
        {
          pxrInternal__aapl__pxrReserved__::VtValue::UncheckedRemove<pxrInternal__aapl__pxrReserved__::TfToken>(&buf, &v136);
        }
        else
        {
          v136.__r_.__value_.__r.__words[0] = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
          if ((v136.__r_.__value_.__s.__data_[0] & 7) != 0)
          {
            v119 = (unsigned int *)(v136.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v120 = __ldxr(v119);
            while (__stxr(v120 + 2, v119));
            if ((v120 & 1) == 0)
              v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
          }
        }
        if ((v129 & 7) != 0)
        {
          v80 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
          do
            v81 = __ldxr(v80);
          while (__stlxr(v81 - 2, v80));
        }
        v82 = v136.__r_.__value_.__r.__words[0];
        v129 = v136.__r_.__value_.__r.__words[0];
        v136.__r_.__value_.__r.__words[0] = 0;
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
        if ((v82 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (const std::string *)((v82 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v83);
        std::string::operator=(&v128, EmptyString);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v72 + 10));
        v85 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
        if (v85)
        {
          v86 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v135, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v72 + 10));
          if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>(v86) & 1) != 0)
          {
            memset(&buf, 0, sizeof(buf));
            if ((v135.__r_.__value_.__s.__data_[8] & 4) != 0)
            {
              (*(void (**)(std::string *__return_ptr, std::string *))((v135.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
                                                                               + 176))(&v136, &v135);
              pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v135, &v136);
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v136);
            }
            MutableObj = pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_GetMutableObj((uint64_t *)&v135);
            v88 = *(_OWORD *)MutableObj;
            buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(MutableObj + 16);
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v88;
            *(_QWORD *)(MutableObj + 8) = 0;
            *(_QWORD *)(MutableObj + 16) = 0;
            *(_QWORD *)MutableObj = 0;
            if (v135.__r_.__value_.__l.__size_ && (v135.__r_.__value_.__s.__data_[8] & 3) != 3)
              (*(void (**)(std::string *))((v135.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 32))(&v135);
            v135.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v121 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
            if (*(char *)(v121 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v121, *(_QWORD *)(v121 + 8));
            }
            else
            {
              v122 = *(_OWORD *)v121;
              buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v121 + 16);
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v122;
            }
          }
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v128.__r_.__value_.__l.__data_);
          v128 = buf;
          *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
          buf.__r_.__value_.__s.__data_[0] = 0;
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v135);
          MEMORY[0x2348B2764](&buf, &v128);
          if ((v129 & 7) != 0)
          {
            v89 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
            do
              v90 = __ldxr(v89);
            while (__stlxr(v90 - 2, v89));
          }
          v129 = buf.__r_.__value_.__r.__words[0];
        }
      }
      v91 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v91)
        v91 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
      if ((v129 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v91 + 39) & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_214;
      v92 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v92)
        v92 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
      v93 = v129;
      if ((v129 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v92 + 40) & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_214;
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v128.__r_.__value_.__l.__size_)
        {
LABEL_198:
          memset(&v136, 0, sizeof(v136));
          memset(&v135, 0, sizeof(v135));
          if ((_DWORD)v23)
          {
            MEMORY[0x2348B4AD4](&v136, "GeomProp");
            v99 = "geomprop";
          }
          else
          {
            MEMORY[0x2348B4AD4](&v136, "PrimvarReader");
            v99 = "varname";
          }
          v100 = (realityio *)MEMORY[0x2348B4AD4](&v135, v99);
          v101 = *(id *)(realityio::logObjects(v100) + 48);
          if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
          {
            v102 = v23;
            v103 = v73;
            v104 = v71;
            v105 = SHIBYTE(v136.__r_.__value_.__r.__words[2]);
            v106 = v136.__r_.__value_.__r.__words[0];
            v107 = SHIBYTE(v135.__r_.__value_.__r.__words[2]);
            v108 = v135.__r_.__value_.__r.__words[0];
            Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(v72 + 2));
            v110 = &v135;
            if (v107 < 0)
              v110 = (std::string *)v108;
            v111 = *(char *)(Name + 23);
            v112 = *(_QWORD *)Name;
            v113 = &v136;
            if (v105 < 0)
              v113 = (std::string *)v106;
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            if (v111 >= 0)
              v114 = Name;
            else
              v114 = v112;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v113;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v110;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
            v133 = v114;
            _os_log_impl(&dword_22FF26000, v101, OS_LOG_TYPE_DEFAULT, "%s has an empty %s attribute at path %s.", (uint8_t *)&buf, 0x20u);
            v71 = v104;
            v73 = v103;
            v23 = v102;
            v74 = v123;
          }

          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v135.__r_.__value_.__l.__data_);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v136.__r_.__value_.__l.__data_);
LABEL_214:
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v128.__r_.__value_.__l.__data_);
          if ((v129 & 7) != 0)
          {
            v115 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
            do
              v116 = __ldxr(v115);
            while (__stlxr(v116 - 2, v115));
          }
          goto LABEL_219;
        }
        std::string::__init_copy_ctor_external(&v131, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
      }
      else
      {
        if (!*((_BYTE *)&v128.__r_.__value_.__s + 23))
          goto LABEL_198;
        v131 = v128;
      }
      realityio::TexcoordID::TexcoordID((uint64_t)&buf, (uint64_t)&v131, -1, v71);
      v94 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(v73, v93, (uint64_t *)&v129);
      realityio::TexcoordID::operator=((uint64_t)(v94 + 3), (uint64_t)&buf);
      if (v134 < 0)
        operator delete((void *)buf.__r_.__value_.__r.__words[2]);
      if ((buf.__r_.__value_.__s.__data_[8] & 7) != 0)
      {
        v95 = (unsigned int *)(buf.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8);
        do
          v96 = __ldxr(v95);
        while (__stlxr(v96 - 2, v95));
      }
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v74, (const void **)&v128.__r_.__value_.__l.__data_, (uint64_t)&v128);
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v128.__r_.__value_.__l.__data_);
      if ((v129 & 7) != 0)
      {
        v97 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
        do
          v98 = __ldxr(v97);
        while (__stlxr(v98 - 2, v97));
      }
LABEL_219:
      if ((v130 & 7) != 0)
      {
        v117 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFFFF8);
        do
          v118 = __ldxr(v117);
        while (__stlxr(v118 - 2, v117));
      }
      v72 = (_QWORD *)*v72;
    }
    while (v72);
  }
}

void sub_23013C774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  unsigned int *v40;
  unsigned int v41;

  if (a2)
  {
    if ((a25 & 7) != 0)
    {
      v40 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stlxr(v41 - 2, v40));
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

realityio::mtlx::MtlxActionPayload *realityio::mtlx::MtlxActionPayload::MtlxActionPayload(realityio::mtlx::MtlxActionPayload *this, realityio::mtlx::NeoShadeNodeGraph *a2)
{
  uint64_t v4;
  uint64_t v5;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  void *v7;
  uint64_t Name;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  __n128 v21;
  __n128 v22;
  unsigned int *v23[3];

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle()
     + 4;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *((_QWORD *)this + 25) = objc_opt_new();
  *((_QWORD *)this + 26) = objc_opt_new();
  v5 = objc_opt_new();
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 28) = (char *)this + 232;
  *((_QWORD *)this + 27) = v5;
  *((_QWORD *)this + 30) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1065353216;
  *((_WORD *)this + 144) = 0;
  (*(void (**)(unsigned int **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a2 + 16))(v23, *(_QWORD *)a2, *((unsigned int *)a2 + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this, (int *)v23);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
  Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)this + 1, (_QWORD *)Data + 2);
  v7 = (void *)MEMORY[0x24BDD17C8];
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  if (*(char *)(Name + 23) >= 0)
    v9 = Name;
  else
    v9 = *(_QWORD *)Name;
  objc_msgSend(v7, "stringWithUTF8String:", v9, (char *)this + 160, (char *)this + 120, (char *)this + 80, (char *)this + 40);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *((_WORD *)this + 144) |= 0x10u;
  v22 = *(__n128 *)a2;
  (*(void (**)(unsigned int **__return_ptr, unint64_t, __n128 *, __n128))(*(_QWORD *)v22.n128_u64[0]
                                                                                          + 200))(v23, v22.n128_u64[0], &v22, v22);
  v21 = *(__n128 *)a2;
  (*(void (**)(__n128 *__return_ptr, unint64_t, __n128 *, __n128))(*(_QWORD *)v21.n128_u64[0] + 208))(&v22, v21.n128_u64[0], &v21, v21);
  realityio::mtlx::MtlxActionPayload::createSGInputs(this, v23[0], v23[1]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  realityio::mtlx::MtlxActionPayload::createSGOutputs(this, (uint64_t **)&v22);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BE8F600], "graphWithName:inputs:outputs:", v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  realityio::mtlx::MtlxActionPayload::setSGGraph((uint64_t)this, v13);

  v14 = *((id *)this + 2);
  objc_msgSend(v14, "argumentsNode");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "outputs");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  realityio::mtlx::MtlxActionPayload::addArgumentOutputs((uint64_t)this, a2, v16);

  v17 = *((id *)this + 2);
  objc_msgSend(v17, "resultsNode");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "inputs");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  realityio::mtlx::MtlxActionPayload::addResultInputs((uint64_t)this, a2, v19);

  v21.n128_u64[0] = (unint64_t)&v22;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  v22.n128_u64[0] = (unint64_t)v23;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);

  return this;
}

void sub_23013CC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table(v14);
  std::__tree<std::string>::destroy(v13, *(char **)(v12 + 232));

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(a9);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(a12);

  v16 = *(_QWORD *)(v12 + 8);
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v12);
  _Unwind_Resume(a1);
}

id realityio::mtlx::MtlxActionPayload::createSGInputs(pxrInternal__aapl__pxrReserved__::SdfPath *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  void *v6;
  void *v7;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v8;
  const char *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  std::type_info v29;
  unsigned int v30;
  unsigned int *v31;
  std::type_info_vtbl *v32;

  if (a2 == a3)
  {
    v6 = (void *)MEMORY[0x24BDBD1A8];
  }
  else
  {
    v4 = a2;
    v6 = (void *)MEMORY[0x24BDBD1A8];
    do
    {
      v7 = (void *)MEMORY[0x24BDD17C8];
      (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t *__return_ptr, _QWORD, _QWORD, unsigned int *, uint64_t))(**(_QWORD **)v4 + 40))(&v29.__type_name, *(_QWORD *)v4, v4[2], v4 + 4, 1);
      v8 = v29.__type_name & 0xFFFFFFFFFFFFFFF8;
      if ((v29.__type_name & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v9 = (const char *)(v8 + 16);
        if (*(char *)(v8 + 39) < 0)
          v9 = *(const char **)v9;
      }
      else
      {
        v9 = "";
      }
      objc_msgSend(v7, "stringWithUTF8String:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v29.__type_name & 7) != 0)
      {
        v11 = (unsigned int *)(v29.__type_name & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
      v29.__type_name = (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *, uint64_t))(**(_QWORD **)v4 + 48))(*(_QWORD *)v4, v4[2], v4 + 4, 1);
      v13 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v29.__type_name);
      v29.__type_name = *(_QWORD *)v4;
      v30 = v4[2];
      v14 = (unsigned int *)*((_QWORD *)v4 + 2);
      v31 = v14;
      if ((v14 & 7) != 0)
      {
        v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 2, v15));
        if ((v16 & 1) == 0)
          v31 = v15;
      }
      (*(void (**)(std::type_info_vtbl **__return_ptr, std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t, _QWORD, unsigned int **))(*(_QWORD *)v29.__type_name + 120))(&v32, v29.__type_name, v30, &v31);
      if ((v31 & 7) != 0)
      {
        v17 = (unsigned int *)((unint64_t)v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      v29.__vftable = v32;
      if ((v32 & 7) != 0)
      {
        v19 = (unsigned int *)((unint64_t)v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 2, v19));
        if ((v20 & 1) == 0)
          v29.__vftable = (std::type_info_vtbl *)((unint64_t)v29.__vftable & 0xFFFFFFFFFFFFFFF8);
      }
      v21 = realityio::conversions::usdToSGDataType(v13, &v29);
      if (((uint64_t)v29.__vftable & 7) != 0)
      {
        v22 = (unsigned int *)((unint64_t)v29.__vftable & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      objc_msgSend(MEMORY[0x24BE8F608], "inputWithName:type:", v10, v21);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (v24)
      {
        objc_msgSend(v6, "arrayByAddingObject:", v24);
        v25 = objc_claimAutoreleasedReturnValue();

        v6 = (void *)v25;
      }
      else
      {
        realityio::mtlx::MtlxActionPayload::setError(a1, CFSTR("Could not create a node input"), 3u, 0);
      }

      if ((v32 & 7) != 0)
      {
        v26 = (unsigned int *)((unint64_t)v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }

      v4 += 6;
    }
    while (v4 != a3);
  }
  return v6;
}

id realityio::mtlx::MtlxActionPayload::createSGOutputs(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t **a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  unint64_t v8;
  const char *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v28;
  unsigned int *v29;
  unsigned int v30;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  std::type_info v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int *v52;
  std::type_info_vtbl *v53;

  v4 = (void *)objc_opt_new();
  v6 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v7 = (void *)MEMORY[0x24BDD17C8];
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)*v6 + 40))(&v50, *v6, *((unsigned int *)v6 + 2), v6 + 2, 0);
      v8 = v50 & 0xFFFFFFFFFFFFFFF8;
      if ((v50 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v9 = (const char *)(v8 + 16);
        if (*(char *)(v8 + 39) < 0)
          v9 = *(const char **)v9;
      }
      else
      {
        v9 = "";
      }
      objc_msgSend(v7, "stringWithUTF8String:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v50 & 7) != 0)
      {
        v11 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
      v50 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)*v6 + 48))(*v6, *((unsigned int *)v6 + 2), v6 + 2, 0);
      v13 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v50);
      v14 = *v6;
      v51 = *((_DWORD *)v6 + 2);
      v50 = v14;
      v15 = (unsigned int *)v6[2];
      v52 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 2, v16));
        if ((v17 & 1) == 0)
          v52 = v16;
      }
      (*(void (**)(std::type_info_vtbl **__return_ptr, uint64_t, _QWORD, unsigned int **))(*(_QWORD *)v50 + 120))(&v53, v50, v51, &v52);
      if ((v52 & 7) != 0)
      {
        v18 = (unsigned int *)((unint64_t)v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
      if ((*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)Data & 0xFFFFFFFFFFFFFFF8))
      {
        v26 = *v6;
        v27 = *((unsigned int *)v6 + 2);
        v28 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v28)
          v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 96))(&v50, v26, v27, (uint64_t)v28 + 24);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, unsigned int **, _QWORD))(*(_QWORD *)v50 + 40))(&v49, v50, v51, &v52, 0);
        if ((v52 & 7) != 0)
        {
          v29 = (unsigned int *)((unint64_t)v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v30 = __ldxr(v29);
          while (__stlxr(v30 - 2, v29));
        }
        v31 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v31)
          v31 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26 + 152))(&v50, v26, v27, (uint64_t)v31 + 96);
        (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t *__return_ptr, uint64_t, _QWORD, unsigned int **, _QWORD))(*(_QWORD *)v50 + 40))(&v48.__type_name, v50, v51, &v52, 0);
        if ((v52 & 7) != 0)
        {
          v32 = (unsigned int *)((unint64_t)v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)*v6 + 40))(&v50, *v6, *((unsigned int *)v6 + 2), v6 + 2, 0);
        v34 = v49;
        v35 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
        if ((v50 & 7) != 0)
        {
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        if (v35 == (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8))
        {
          v23 = 53;
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)*v6 + 40))(&v50, *v6, *((unsigned int *)v6 + 2), v6 + 2, 0);
          v37 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
          type_name = v48.__type_name;
          if ((v50 & 7) != 0)
          {
            do
              v39 = __ldxr(v37);
            while (__stlxr(v39 - 2, v37));
          }
          if (v37 == (unsigned int *)(type_name & 0xFFFFFFFFFFFFFFF8))
            v23 = 54;
          else
            v23 = 0;
        }
        if ((v48.__type_name & 7) != 0)
        {
          v40 = (unsigned int *)(v48.__type_name & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        if ((v49 & 7) != 0)
        {
          v42 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
          do
            v43 = __ldxr(v42);
          while (__stlxr(v43 - 2, v42));
        }
      }
      else
      {
        v48.__vftable = v53;
        if ((v53 & 7) != 0)
        {
          v21 = (unsigned int *)((unint64_t)v53 & 0xFFFFFFFFFFFFFFF8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 2, v21));
          if ((v22 & 1) == 0)
            v48.__vftable = (std::type_info_vtbl *)((unint64_t)v48.__vftable & 0xFFFFFFFFFFFFFFF8);
        }
        v23 = realityio::conversions::usdToSGDataType(v13, &v48);
        if (((uint64_t)v48.__vftable & 7) != 0)
        {
          v24 = (unsigned int *)((unint64_t)v48.__vftable & 0xFFFFFFFFFFFFFFF8);
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
      }
      objc_msgSend(MEMORY[0x24BE8F620], "outputWithName:type:", v10, v23);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      if (v44)
        objc_msgSend(v4, "addObject:", v44);
      else
        realityio::mtlx::MtlxActionPayload::setError(a1, CFSTR("Could not create a node output"), 3u, 0);

      if ((v53 & 7) != 0)
      {
        v45 = (unsigned int *)((unint64_t)v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }

      v6 += 3;
    }
    while (v6 != v5);
  }
  return v4;
}

void realityio::mtlx::MtlxActionPayload::setSGGraph(uint64_t a1, void *a2)
{
  void *v4;
  id v5;

  v5 = a2;
  objc_storeStrong((id *)(a1 + 16), a2);
  if (v5)
  {
    v4 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;

  }
}

void realityio::mtlx::MtlxActionPayload::addArgumentOutputs(uint64_t a1, realityio::mtlx::NeoShadeNodeGraph *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t i;
  realityio *v8;
  realityio *v9;
  unsigned int *v10;
  unsigned int *v11;
  NSObject *v12;
  void *v13;
  uint64_t Text;
  void *v15;
  void *v16;
  unint64_t v17;
  const char *v18;
  void *v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  realityio *v23;
  void **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  id obj;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  unsigned int v39;
  unsigned int *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD v46[3];
  _BYTE buf[12];
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  realityio *v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  realityio::mtlx::NeoShadeNodeGraph::GetInputs(a2, (uint64_t)v46);
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  obj = v5;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v54, 16);
  if (v6)
  {
    v36 = *(_QWORD *)v43;
    v34 = a1 + 80;
    do
    {
      v37 = v6;
      for (i = 0; i != v37; ++i)
      {
        if (*(_QWORD *)v43 != v36)
          objc_enumerationMutation(obj);
        v8 = (realityio *)*(id *)(*((_QWORD *)&v42 + 1) + 8 * i);
        v9 = v8;
        v10 = (unsigned int *)v46[0];
        v11 = (unsigned int *)v46[1];
        while (v10 != v11)
        {
          v12 = *(id *)(realityio::logObjects(v8) + 48);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            -[realityio name](v9, "name");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            (*(void (**)(void ***__return_ptr, _QWORD, _QWORD, unsigned int *))(**(_QWORD **)v10 + 24))(&v38, *(_QWORD *)v10, v10[2], v10 + 4);
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v13;
            v48 = 2080;
            v49 = Text;
            _os_log_impl(&dword_22FF26000, v12, OS_LOG_TYPE_INFO, "    Publishing argument node output '%@' in %s", buf, 0x16u);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);

          }
          -[realityio name](v9, "name");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = (void *)MEMORY[0x24BDD17C8];
          (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, unsigned int *, uint64_t))(**(_QWORD **)v10 + 40))(buf, *(_QWORD *)v10, v10[2], v10 + 4, 1);
          v17 = *(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v18 = (const char *)(v17 + 16);
            if (*(char *)(v17 + 39) < 0)
              v18 = *(const char **)v18;
          }
          else
          {
            v18 = "";
          }
          objc_msgSend(v16, "stringWithUTF8String:", v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v15, "isEqualToString:", v19);

          if ((buf[0] & 7) != 0)
          {
            v21 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
            do
              v22 = __ldxr(v21);
            while (__stlxr(v22 - 2, v21));
          }

          if (v20)
          {
            v23 = v9;
            realityio::mtlx::MtlxActionPayload::Connectable::Connectable<realityio::mtlx::NeoShadeInput>((uint64_t)buf, v10);
            v53 = v23;
            v24 = *(void ***)v10;
            v39 = v10[2];
            v38 = v24;
            v25 = (unsigned int *)*((_QWORD *)v10 + 2);
            v40 = v25;
            if ((v25 & 7) != 0)
            {
              v26 = (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFF8);
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 2, v26));
              if ((v27 & 1) == 0)
                v40 = v26;
            }
            (*((void (**)(uint64_t *__return_ptr, void **, _QWORD, unsigned int **))*v38 + 3))(&v41, v38, v39, &v40);
            std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>(v34, (unsigned int *)&v41, &v41, (uint64_t)buf);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
            if ((v40 & 7) != 0)
            {
              v28 = (unsigned int *)((unint64_t)v40 & 0xFFFFFFFFFFFFFFF8);
              do
                v29 = __ldxr(v28);
              while (__stlxr(v29 - 2, v28));
            }

            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v52);
            if ((v51 & 7) != 0)
            {
              v30 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
              do
                v31 = __ldxr(v30);
              while (__stlxr(v31 - 2, v30));
            }
            if ((v50 & 7) != 0)
            {
              v32 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
              do
                v33 = __ldxr(v32);
              while (__stlxr(v33 - 2, v32));
            }
            v38 = (void **)&buf[8];
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v38);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
            break;
          }
          v10 += 6;
        }

      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v54, 16);
    }
    while (v6);
  }

  *(_QWORD *)buf = v46;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

}

void sub_23013D88C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void realityio::mtlx::MtlxActionPayload::addResultInputs(uint64_t a1, realityio::mtlx::NeoShadeNodeGraph *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t i;
  realityio *v8;
  realityio *v9;
  unsigned int *v10;
  unsigned int *v11;
  NSObject *v12;
  void *v13;
  uint64_t Text;
  void *v15;
  void *v16;
  unint64_t v17;
  const char *v18;
  void *v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  realityio *v23;
  void **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  id obj;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  unsigned int v39;
  unsigned int *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD v46[3];
  _BYTE buf[12];
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  realityio *v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  realityio::mtlx::NeoShadeNodeGraph::GetOutputs(a2, (uint64_t)v46);
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  obj = v5;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v54, 16);
  if (v6)
  {
    v36 = *(_QWORD *)v43;
    v34 = a1 + 40;
    do
    {
      v37 = v6;
      for (i = 0; i != v37; ++i)
      {
        if (*(_QWORD *)v43 != v36)
          objc_enumerationMutation(obj);
        v8 = (realityio *)*(id *)(*((_QWORD *)&v42 + 1) + 8 * i);
        v9 = v8;
        v10 = (unsigned int *)v46[0];
        v11 = (unsigned int *)v46[1];
        while (v10 != v11)
        {
          v12 = *(id *)(realityio::logObjects(v8) + 48);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            -[realityio name](v9, "name");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            (*(void (**)(void ***__return_ptr, _QWORD, _QWORD, unsigned int *))(**(_QWORD **)v10 + 24))(&v38, *(_QWORD *)v10, v10[2], v10 + 4);
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v13;
            v48 = 2080;
            v49 = Text;
            _os_log_impl(&dword_22FF26000, v12, OS_LOG_TYPE_INFO, "    Publishing result node input '%@' in %s", buf, 0x16u);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);

          }
          -[realityio name](v9, "name");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = (void *)MEMORY[0x24BDD17C8];
          (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, unsigned int *, _QWORD))(**(_QWORD **)v10 + 40))(buf, *(_QWORD *)v10, v10[2], v10 + 4, 0);
          v17 = *(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v18 = (const char *)(v17 + 16);
            if (*(char *)(v17 + 39) < 0)
              v18 = *(const char **)v18;
          }
          else
          {
            v18 = "";
          }
          objc_msgSend(v16, "stringWithUTF8String:", v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v15, "isEqualToString:", v19);

          if ((buf[0] & 7) != 0)
          {
            v21 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
            do
              v22 = __ldxr(v21);
            while (__stlxr(v22 - 2, v21));
          }

          if (v20)
          {
            v23 = v9;
            realityio::mtlx::MtlxActionPayload::Connectable::Connectable<realityio::mtlx::NeoShadeOutput>((uint64_t)buf, v10);
            v53 = v23;
            v24 = *(void ***)v10;
            v39 = v10[2];
            v38 = v24;
            v25 = (unsigned int *)*((_QWORD *)v10 + 2);
            v40 = v25;
            if ((v25 & 7) != 0)
            {
              v26 = (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFF8);
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 2, v26));
              if ((v27 & 1) == 0)
                v40 = v26;
            }
            (*((void (**)(uint64_t *__return_ptr, void **, _QWORD, unsigned int **))*v38 + 3))(&v41, v38, v39, &v40);
            std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>(v34, (unsigned int *)&v41, &v41, (uint64_t)buf);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
            if ((v40 & 7) != 0)
            {
              v28 = (unsigned int *)((unint64_t)v40 & 0xFFFFFFFFFFFFFFF8);
              do
                v29 = __ldxr(v28);
              while (__stlxr(v29 - 2, v28));
            }

            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v52);
            if ((v51 & 7) != 0)
            {
              v30 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
              do
                v31 = __ldxr(v30);
              while (__stlxr(v31 - 2, v30));
            }
            if ((v50 & 7) != 0)
            {
              v32 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
              do
                v33 = __ldxr(v32);
              while (__stlxr(v33 - 2, v32));
            }
            v38 = (void **)&buf[8];
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v38);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
            break;
          }
          v10 += 6;
        }

      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v54, 16);
    }
    while (v6);
  }

  *(_QWORD *)buf = v46;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

}

void sub_23013DCDC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_23013E028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table(v14);
  std::__tree<std::string>::destroy(v13, *(char **)(v12 + 232));

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(a9);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(a12);

  v16 = *(_QWORD *)(v12 + 8);
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v12);
  _Unwind_Resume(a1);
}

void realityio::mtlx::MtlxActionPayload::setError(realityio::mtlx::MtlxActionPayload *this, NSError *a2)
{
  NSError *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t i;
  void *v10;

  v3 = a2;
  if (v3)
  {
    v4 = (void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;

    v5 = (void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;

    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::clear((uint64_t)this + 40);
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::clear((uint64_t)this + 80);
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::clear((uint64_t)this + 120);
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::clear((uint64_t)this + 160);
    v6 = (void *)*((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;

    v7 = (void *)*((_QWORD *)this + 26);
    *((_QWORD *)this + 26) = 0;

    std::__tree<std::string>::destroy((uint64_t)this + 224, *((char **)this + 29));
    *((_QWORD *)this + 28) = (char *)this + 232;
    *((_QWORD *)this + 29) = 0;
    *((_QWORD *)this + 30) = 0;
    if (*((_QWORD *)this + 34))
    {
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__deallocate_node((uint64_t)this + 248, *((_QWORD **)this + 33));
      *((_QWORD *)this + 33) = 0;
      v8 = *((_QWORD *)this + 32);
      if (v8)
      {
        for (i = 0; i != v8; ++i)
          *(_QWORD *)(*((_QWORD *)this + 31) + 8 * i) = 0;
      }
      *((_QWORD *)this + 34) = 0;
    }
  }
  v10 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v3;

}

void realityio::mtlx::MtlxActionPayload::addChildError(id *this, NSError *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSError *v11;
  NSError *v12;

  v12 = a2;
  v3 = (void *)MEMORY[0x24BDBCED8];
  v4 = this[4];
  objc_msgSend(v4, "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dictionaryWithDictionary:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_opt_new();
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("NSMultipleUnderlyingErrorsKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
    objc_msgSend(v7, "addObjectsFromArray:", v8);
  objc_msgSend(v7, "addObject:", v12);
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, CFSTR("NSMultipleUnderlyingErrorsKey"));
  v9 = (void *)MEMORY[0x24BDD1540];
  v10 = this[4];
  objc_msgSend(v9, "errorWithDomain:code:userInfo:", CFSTR("MaterialX"), objc_msgSend(v10, "code"), v6);
  v11 = (NSError *)objc_claimAutoreleasedReturnValue();
  realityio::mtlx::MtlxActionPayload::setError((realityio::mtlx::MtlxActionPayload *)this, v11);

}

uint64_t realityio::TexcoordID::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  void **v7;
  __int128 v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  if (a2 != a1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
  }
  v7 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*v7);
  v8 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a2 + 39) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t *realityio::mtlx::MtlxActionPayload::collectTextureInfo(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  _QWORD *v5;
  uint64_t v6;

  result = std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(a1 + 224), *(const void ***)(a2 + 224), (const void ***)(a2 + 232));
  v5 = *(_QWORD **)(a2 + 264);
  if (v5)
  {
    v6 = a1 + 248;
    do
    {
      result = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID> const&>(v6, v5 + 2, v5 + 2);
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return result;
}

uint64_t realityio::mtlx::MtlxActionPayload::collectNodes(realityio::mtlx::MtlxActionPayload *this, id *a2)
{
  _BOOL8 isSiblingOf;
  NSObject *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  realityio *v10;
  NSObject *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  realityio *v16;
  realityio *v17;
  uint64_t v18;
  realityio *v19;
  void *v20;
  NSObject *v21;
  id v22;
  uint64_t v23;
  _BOOL8 isParentOf;
  __int16 v25;
  __int16 v26;
  void *v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  void *v32;
  id v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t v39[128];
  uint8_t buf[4];
  uint64_t Text;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  isSiblingOf = realityio::mtlx::MtlxActionPayload::isSiblingOf(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if (isSiblingOf)
  {
    v5 = *(id *)(realityio::logObjects((realityio *)isSiblingOf) + 48);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
      v42 = 2080;
      v43 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      _os_log_impl(&dword_22FF26000, v5, OS_LOG_TYPE_INFO, "Collecting sibling nodes into %s from %s", buf, 0x16u);
    }

    v6 = (void *)*((_QWORD *)this + 26);
    v7 = a2[3];
    objc_msgSend(v6, "addObject:", v7);

    v8 = (void *)*((_QWORD *)this + 26);
    objc_msgSend(a2[26], "allObjects");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addObjectsFromArray:", v9);
    goto LABEL_5;
  }
  isParentOf = realityio::mtlx::MtlxActionPayload::isParentOf(this, (const realityio::mtlx::MtlxActionPayload *)a2);
  if (isParentOf)
  {
    v25 = *((_WORD *)this + 144);
    if ((v25 & 3) != 0)
      v26 = *((_WORD *)a2 + 144) | v25 | 4;
    else
      v26 = *((_WORD *)a2 + 144) | v25;
    *((_WORD *)this + 144) = v26;
    if ((v26 & 3) != 0)
      return 1;
    v31 = *(id *)(realityio::logObjects((realityio *)isParentOf) + 48);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
      v42 = 2080;
      v43 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      _os_log_impl(&dword_22FF26000, v31, OS_LOG_TYPE_INFO, "Collecting child nodes into %s from %s", buf, 0x16u);
    }

    v32 = (void *)*((_QWORD *)this + 25);
    v33 = a2[3];
    objc_msgSend(v32, "addObject:", v33);

    v34 = (void *)*((_QWORD *)this + 25);
    objc_msgSend(a2[26], "allObjects");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "addObjectsFromArray:", v9);
LABEL_5:

    v11 = *(id *)(realityio::logObjects(v10) + 48);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = a2[3];
      objc_msgSend(v12, "name");
      v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v14 = objc_msgSend(v13, "UTF8String");
      *(_DWORD *)buf = 136315138;
      Text = v14;
      _os_log_impl(&dword_22FF26000, v11, OS_LOG_TYPE_INFO, "  Adding '%s'", buf, 0xCu);

    }
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v15 = a2[26];
    v16 = (realityio *)objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    v17 = v16;
    if (v16)
    {
      v18 = *(_QWORD *)v36;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v36 != v18)
            objc_enumerationMutation(v15);
          v20 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v19);
          v21 = *(id *)(realityio::logObjects(v16) + 48);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v20, "name");
            v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v23 = objc_msgSend(v22, "UTF8String");
            *(_DWORD *)buf = 136315138;
            Text = v23;
            _os_log_impl(&dword_22FF26000, v21, OS_LOG_TYPE_INFO, "  Adding '%s'", buf, 0xCu);

          }
          v19 = (realityio *)((char *)v19 + 1);
        }
        while (v17 != v19);
        v16 = (realityio *)objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
        v17 = v16;
      }
      while (v16);
    }

    return 1;
  }
  v28 = (void *)MEMORY[0x24BDD17C8];
  v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
  objc_msgSend(v28, "stringWithFormat:", CFSTR("Unexpected dependency between %s and %s."), v29, pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  realityio::mtlx::MtlxActionPayload::setError(this, v30, 5u, 0);

  return 0;
}

void sub_23013E858(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

BOOL realityio::mtlx::MtlxActionPayload::isParentOf(realityio::mtlx::MtlxActionPayload *this, const realityio::mtlx::MtlxActionPayload *a2)
{
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  if ((*((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 1) & 0xFFFFFFFFFFFFFFF8))
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2);
  v5 = *(_QWORD *)this;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v6 = v5 == v8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  return v6;
}

uint64_t realityio::mtlx::MtlxActionPayload::collectInputsAndOutputs(realityio::mtlx::MtlxActionPayload *this, unsigned int **a2)
{
  NSObject *v4;
  unint64_t v5;
  const char *v6;
  _BOOL8 isSiblingOf;
  NSObject *v8;
  unint64_t v9;
  const char *v10;
  _BOOL8 isParentOf;
  NSObject *v12;
  unint64_t v13;
  const char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  realityio *v20;
  unsigned int *i;
  unsigned int *j;
  _QWORD *k;
  NSObject *v24;
  uint64_t v25;
  _QWORD *m;
  NSObject *v27;
  uint64_t v28;
  uint64_t Name;
  uint64_t v30;
  realityio *v31;
  unsigned int *n;
  unsigned int *ii;
  _QWORD *jj;
  NSObject *v35;
  uint64_t v36;
  _QWORD *kk;
  NSObject *v38;
  uint64_t v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  uint64_t Text;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = *(id *)(realityio::logObjects(this) + 48);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8;
    if (v5)
    {
      v6 = (const char *)(v5 + 16);
      if (*(char *)(v5 + 39) < 0)
        v6 = *(const char **)v6;
    }
    else
    {
      v6 = "";
    }
    *(_DWORD *)buf = 136315394;
    v41 = (uint64_t)v6;
    v42 = 2080;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    _os_log_impl(&dword_22FF26000, v4, OS_LOG_TYPE_INFO, "Collecting inputs and outputs on %s %s", buf, 0x16u);
  }

  isSiblingOf = realityio::mtlx::MtlxActionPayload::isSiblingOf(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if (isSiblingOf)
  {
    v8 = *(id *)(realityio::logObjects((realityio *)isSiblingOf) + 48);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (unint64_t)a2[1] & 0xFFFFFFFFFFFFFFF8;
      if (v9)
      {
        v10 = (const char *)(v9 + 16);
        if (*(char *)(v9 + 39) < 0)
          v10 = *(const char **)v10;
      }
      else
      {
        v10 = "";
      }
      v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      *(_DWORD *)buf = 136315394;
      v41 = (uint64_t)v10;
      v42 = 2080;
      Text = v19;
      _os_log_impl(&dword_22FF26000, v8, OS_LOG_TYPE_INFO, "  Sibling on %s %s", buf, 0x16u);
    }

    for (i = a2[22]; i; i = *(unsigned int **)i)
      v20 = (realityio *)std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord> const&>((uint64_t)this + 160, i + 4, (uint64_t)(i + 4));
    for (j = a2[17]; j; j = *(unsigned int **)j)
      v20 = (realityio *)std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord> const&>((uint64_t)this + 120, j + 4, (uint64_t)(j + 4));
    for (k = (_QWORD *)*((_QWORD *)this + 22); k; k = (_QWORD *)*k)
    {
      v24 = *(id *)(realityio::logObjects(v20) + 48);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(k + 3));
        *(_DWORD *)buf = 136315138;
        v41 = v25;
        _os_log_impl(&dword_22FF26000, v24, OS_LOG_TYPE_INFO, "    %s", buf, 0xCu);
      }

    }
    for (m = (_QWORD *)*((_QWORD *)this + 17); m; m = (_QWORD *)*m)
    {
      v27 = *(id *)(realityio::logObjects(v20) + 48);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        v28 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(m + 3));
        *(_DWORD *)buf = 136315138;
        v41 = v28;
        _os_log_impl(&dword_22FF26000, v27, OS_LOG_TYPE_INFO, "    %s", buf, 0xCu);
      }

    }
  }
  else
  {
    isParentOf = realityio::mtlx::MtlxActionPayload::isParentOf(this, (const realityio::mtlx::MtlxActionPayload *)a2);
    if (!isParentOf)
    {
      v15 = (void *)MEMORY[0x24BDD17C8];
      v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
      objc_msgSend(v15, "stringWithFormat:", CFSTR("Unexpected dependency between %s and %s."), v16, pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      realityio::mtlx::MtlxActionPayload::setError(this, v17, 5u, 0);

      return 0;
    }
    v12 = *(id *)(realityio::logObjects((realityio *)isParentOf) + 48);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = (unint64_t)a2[1] & 0xFFFFFFFFFFFFFFF8;
      if (v13)
      {
        v14 = (const char *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0)
          v14 = *(const char **)v14;
      }
      else
      {
        v14 = "";
      }
      Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if (*(char *)(Name + 23) >= 0)
        v30 = Name;
      else
        v30 = *(_QWORD *)Name;
      *(_DWORD *)buf = 136315394;
      v41 = (uint64_t)v14;
      v42 = 2080;
      Text = v30;
      _os_log_impl(&dword_22FF26000, v12, OS_LOG_TYPE_INFO, "  Child on %s %s", buf, 0x16u);
    }

    for (n = a2[22]; n; n = *(unsigned int **)n)
      v31 = (realityio *)std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord> const&>((uint64_t)this + 80, n + 4, (uint64_t)(n + 4));
    for (ii = a2[17]; ii; ii = *(unsigned int **)ii)
      v31 = (realityio *)std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord> const&>((uint64_t)this + 40, ii + 4, (uint64_t)(ii + 4));
    for (jj = (_QWORD *)*((_QWORD *)this + 12); jj; jj = (_QWORD *)*jj)
    {
      v35 = *(id *)(realityio::logObjects(v31) + 48);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        v36 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(jj + 3));
        *(_DWORD *)buf = 136315138;
        v41 = v36;
        _os_log_impl(&dword_22FF26000, v35, OS_LOG_TYPE_INFO, "    Output %s", buf, 0xCu);
      }

    }
    for (kk = (_QWORD *)*((_QWORD *)this + 7); kk; kk = (_QWORD *)*kk)
    {
      v38 = *(id *)(realityio::logObjects(v31) + 48);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        v39 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(kk + 3));
        *(_DWORD *)buf = 136315138;
        v41 = v39;
        _os_log_impl(&dword_22FF26000, v38, OS_LOG_TYPE_INFO, "    Input %s", buf, 0xCu);
      }

    }
  }
  return 1;
}

void sub_23013EE48(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void realityio::mtlx::MtlxActionPayload::populateSubgraph(id *this)
{
  NSObject *v2;
  unint64_t v3;
  const char *v4;
  void *v5;
  id v6;
  char v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  unsigned int v13;
  id v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  uint64_t Text;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!this[4])
  {
    v2 = *(id *)(realityio::logObjects((realityio *)this) + 48);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = (unint64_t)this[1] & 0xFFFFFFFFFFFFFFF8;
      if (v3)
      {
        v4 = (const char *)(v3 + 16);
        if (*(char *)(v3 + 39) < 0)
          v4 = *(const char **)v4;
      }
      else
      {
        v4 = "";
      }
      *(_DWORD *)buf = 136315394;
      v16 = v4;
      v17 = 2080;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
      _os_log_impl(&dword_22FF26000, v2, OS_LOG_TYPE_INFO, "Populating %s %s", buf, 0x16u);
    }

    objc_msgSend(this[25], "allObjects");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = this[2];
    v14 = 0;
    v7 = objc_msgSend(v6, "insertNodes:error:", v5, &v14);
    v8 = v14;
    if ((v7 & 1) == 0)
    {
      v9 = (void *)MEMORY[0x24BDD17C8];
      v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
      objc_msgSend(v9, "stringWithFormat:", CFSTR("Unexpected dependency between %s and %s."), v10, pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)this));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
      if (((unint64_t)this[1] & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)Data & 0xFFFFFFFFFFFFFFF8))
        v13 = 4;
      else
        v13 = 3;
      realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)this, v11, v13, v8);

    }
  }
}

void sub_23013F058(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void realityio::mtlx::MtlxActionPayload::connectFromOutput(pxrInternal__aapl__pxrReserved__::SdfPath *a1, void *a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3, _QWORD *a4, pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  id v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  uint64_t v12;
  uint64_t v13;
  realityio *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t Text;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  _BYTE buf[12];
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v10 = *a3;
  v11 = a3[1];
  if (*a3 != v11)
  {
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(a5);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(v10);
      v13 = v29;
      v12 = *(_QWORD *)buf;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      v14 = (realityio *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
      if (v12 == v13)
        break;
      v20 = std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a4, (unsigned int *)v10);
      if (v20)
      {
        v21 = v20;
        if (*((_BYTE *)v20 + 72))
        {
          realityio::mtlx::MtlxActionPayload::setError(a1, CFSTR("Multiple connections to input."), 8u, 0);
          goto LABEL_16;
        }
        v22 = (void *)*((_QWORD *)a1 + 2);
        v23 = v21[12];
        v28 = 0;
        objc_msgSend(v22, "connect:to:error:", v9, v23, &v28);
        v24 = v28;
        if (v24)
        {
          v27 = v24;
          realityio::mtlx::MtlxActionPayload::setError(a1, CFSTR("Failed to create material."), 0, v24);

          goto LABEL_16;
        }
        *((_BYTE *)v21 + 72) = 1;
        v15 = *(id *)(realityio::logObjects(0) + 48);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a5);
          v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v10);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = Text;
          v31 = 2080;
          v32 = v26;
          v18 = v15;
          v19 = "  Connected %s from output %s";
LABEL_10:
          _os_log_impl(&dword_22FF26000, v18, OS_LOG_TYPE_INFO, v19, buf, 0x16u);
        }
LABEL_11:

      }
      v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
      if (v10 == v11)
        goto LABEL_16;
    }
    v15 = *(id *)(realityio::logObjects(v14) + 48);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a5);
      v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v10);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v16;
      v31 = 2080;
      v32 = v17;
      v18 = v15;
      v19 = "    Filtering connection from %s to %s";
      goto LABEL_10;
    }
    goto LABEL_11;
  }
LABEL_16:

}

void sub_23013F2C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void realityio::mtlx::MtlxActionPayload::connectSubgraph(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  realityio *v4;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t Text;
  const char *v10;
  _QWORD *v11;
  pxrInternal__aapl__pxrReserved__::SdfPath **v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  id v19;
  _QWORD *v20;
  _QWORD *v21;
  pxrInternal__aapl__pxrReserved__::TfToken *v22;
  unsigned __int8 *EmptyString;
  uint64_t v24;
  void *v25;
  void *v26;
  void **v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v34;
  BOOL v35;
  _BOOL4 v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  int v45;
  NSObject *v46;
  unint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  realityio *v52;
  pxrInternal__aapl__pxrReserved__::SdfPath *v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int *v57;
  char v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  _BYTE *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  int v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  unsigned int *v79;
  unsigned int v80;
  int8x8_t v81;
  unint64_t v82;
  uint8x8_t v83;
  unint64_t v84;
  id v85;
  void *v86;
  _QWORD *v87;
  _QWORD *j;
  unint64_t v89;
  pxrInternal__aapl__pxrReserved__::TfToken *v90;
  const std::string *v91;
  unsigned int *v92;
  unsigned int v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  std::string *v98;
  void *v99;
  uint64_t v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  unsigned int *v107;
  unsigned int v108;
  void *v109;
  id v110;
  id v111;
  id v112;
  void *v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t String;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  const std::string *Name;
  void **v133;
  void *v134;
  uint64_t v135;
  uint64_t Type;
  _QWORD *v137;
  char *v138;
  const std::type_info *v139;
  void *v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  uint64_t v144;
  void *v145;
  unsigned int *v146;
  unsigned int v147;
  pxrInternal__aapl__pxrReserved__::VtValue *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int *v158;
  unsigned int v159;
  unint64_t v160;
  unsigned int *v161;
  unsigned int v162;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *Data;
  unsigned int *v164;
  int v165;
  const std::type_info *v166;
  const std::type_info *v167;
  uint64_t v168;
  unsigned int *v169;
  unsigned int v170;
  unint64_t v171;
  const std::type_info *v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  unint64_t v176;
  const std::type_info *v177;
  uint64_t v178;
  unsigned int *v179;
  unsigned int v180;
  unint64_t v181;
  uint64_t v182;
  __int128 v183;
  float v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int *v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  unint64_t v194;
  uint64_t v195;
  __int128 v196;
  int v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  pxrInternal__aapl__pxrReserved__::VtValue *v207;
  pxrInternal__aapl__pxrReserved__::VtValue *v208;
  const std::type_info *v209;
  const std::type_info *v210;
  uint64_t v211;
  id v212;
  id v213;
  id v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  uint64_t v220;
  void *v221;
  const std::type_info *v222;
  uint64_t v223;
  const std::type_info *v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  void *v233;
  void *v234;
  uint64_t v235;
  unsigned int *v236;
  unsigned int v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  const std::type_info *v241;
  const std::type_info *v242;
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  float v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int *v249;
  unsigned int v250;
  unsigned int *v251;
  unsigned int v252;
  const std::type_info *v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  int v257;
  unsigned int *v258;
  unsigned int v259;
  unsigned int *v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int v263;
  const std::type_info *v264;
  const std::type_info *v265;
  const std::type_info *v266;
  const std::type_info *v267;
  const std::type_info *v268;
  const std::type_info *v269;
  uint64_t v270;
  const std::type_info *v271;
  const std::type_info *v272;
  const std::type_info *v273;
  uint64_t v274;
  const std::type_info *v275;
  const std::type_info *v276;
  const std::type_info *v277;
  uint64_t v278;
  const std::type_info *v279;
  uint64_t v280;
  const std::type_info *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  pxrInternal__aapl__pxrReserved__::SdfPath *v286;
  uint64_t *v287;
  id v288;
  char v289;
  _QWORD *v290;
  id obj;
  unsigned int *obja;
  id objb;
  _QWORD *v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  _QWORD v303[3];
  _QWORD v304[3];
  void *__p[2];
  __int128 v306;
  __int128 v307;
  __int128 v308;
  void *v309;
  id location;
  unint64_t v311;
  _BYTE v312[128];
  _BYTE buf[24];
  uint64_t v314;
  std::string v315;
  _BYTE v316[12];
  __int16 v317;
  _BYTE v318[10];
  _QWORD v319[4];

  v319[1] = *MEMORY[0x24BDAC8D0];
  if (!a1[4])
  {
    v2 = a1;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)*a2 + 200))(v304);
    v287 = a2;
    v4 = (realityio *)(*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)*a2 + 208))(v303, *a2, a2);
    v5 = *(id *)(realityio::logObjects(v4) + 48);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = v2[1] & 0xFFFFFFFFFFFFFFF8;
      if (v6)
      {
        v7 = (const char *)(v6 + 16);
        if (*(char *)(v6 + 39) < 0)
          v7 = *(const char **)v7;
      }
      else
      {
        v7 = "";
      }
      v8 = v2[2];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v2);
      v10 = "child";
      *(_DWORD *)buf = 136315650;
      if (!v8)
        v10 = "sibling";
      *(_QWORD *)&buf[4] = v10;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v7;
      *(_WORD *)&buf[22] = 2080;
      v314 = Text;
      _os_log_impl(&dword_22FF26000, v5, OS_LOG_TYPE_INFO, "Connecting %s inputs of %s %s", buf, 0x20u);
    }
    v294 = v2;

    v284 = (uint64_t)(v2 + 10);
    if (v2[2])
      v11 = v2 + 10;
    else
      v11 = v2 + 20;
    v12 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(v11 + 2);
    v290 = v2 + 5;
    while (1)
    {
      v12 = (pxrInternal__aapl__pxrReserved__::SdfPath **)*v12;
      if (!v12)
        break;
      realityio::mtlx::MtlxActionPayload::connectFromOutput((pxrInternal__aapl__pxrReserved__::SdfPath *)v2, v12[12], v12 + 4, v290, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 2));
      if (v2[4])
        goto LABEL_402;
    }
    v13 = (void *)v2[2];
    if (v13)
    {
      v301 = 0u;
      v302 = 0u;
      v299 = 0u;
      v300 = 0u;
      objc_msgSend(v13, "argumentsNode");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "outputs");
      obj = (id)objc_claimAutoreleasedReturnValue();

      v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v299, v312, 16);
      if (v15)
      {
        v16 = *(_QWORD *)v300;
        do
        {
          for (i = 0; i != v15; ++i)
          {
            if (*(_QWORD *)v300 != v16)
              objc_enumerationMutation(obj);
            v18 = *(void **)(*((_QWORD *)&v299 + 1) + 8 * i);
            memset(buf, 0, sizeof(buf));
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            objc_msgSend(v18, "name");
            v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v19, "UTF8String"));

            v20 = (_QWORD *)v304[0];
            v21 = (_QWORD *)v304[1];
            while (1)
            {
              if (v20 == v21)
                goto LABEL_63;
              v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(_QWORD *(**)(_BYTE *__return_ptr, _QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v20 + 40))(v316, *v20, *((unsigned int *)v20 + 2), v20 + 2, 1);
              if ((*(_QWORD *)v316 & 0xFFFFFFFFFFFFFFF8) != 0)
                EmptyString = (unsigned __int8 *)((*(_QWORD *)v316 & 0xFFFFFFFFFFFFFFF8) + 16);
              else
                EmptyString = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
              v24 = EmptyString[23];
              if ((v24 & 0x80u) == 0)
                v25 = (void *)EmptyString[23];
              else
                v25 = (void *)*((_QWORD *)EmptyString + 1);
              v26 = (void *)BYTE7(v306);
              if (SBYTE7(v306) < 0)
                v26 = __p[1];
              if (v25 == v26)
              {
                if ((SBYTE7(v306) & 0x80u) == 0)
                  v27 = __p;
                else
                  v27 = (void **)__p[0];
                if ((v24 & 0x80) != 0)
                {
                  v36 = memcmp(*(const void **)EmptyString, v27, *((_QWORD *)EmptyString + 1)) == 0;
                }
                else if (EmptyString[23])
                {
                  v28 = v24 - 1;
                  do
                  {
                    v30 = *EmptyString++;
                    v29 = v30;
                    v32 = *(unsigned __int8 *)v27;
                    v27 = (void **)((char *)v27 + 1);
                    v31 = v32;
                    v34 = v28-- != 0;
                    v35 = v29 == v31;
                    v36 = v29 == v31;
                  }
                  while (v35 && v34);
                }
                else
                {
                  v36 = 1;
                }
              }
              else
              {
                v36 = 0;
              }
              if ((v316[0] & 7) != 0)
              {
                v37 = (unsigned int *)(*(_QWORD *)v316 & 0xFFFFFFFFFFFFFFF8);
                do
                  v38 = __ldxr(v37);
                while (__stlxr(v38 - 2, v37));
              }
              if (v36)
                break;
              v20 += 3;
            }
            (*(void (**)(_QWORD, _QWORD, _QWORD *, uint64_t, _BYTE *))(*(_QWORD *)*v20 + 80))(*v20, *((unsigned int *)v20 + 2), v20 + 2, 1, buf);
            v39 = *v20;
            *(_DWORD *)&v316[8] = *((_DWORD *)v20 + 2);
            *(_QWORD *)v316 = v39;
            v40 = v20[2];
            *(_QWORD *)&v318[2] = v40;
            if ((v40 & 7) != 0)
            {
              v41 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 2, v41));
              if ((v42 & 1) == 0)
                *(_QWORD *)&v318[2] = v41;
            }
            (*(void (**)(unint64_t *__return_ptr, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)v316 + 24))(&v311, *(_QWORD *)v316, *(unsigned int *)&v316[8], &v318[2]);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v315, (int *)&v311);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v315.__r_.__value_.__r.__words + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v311);
            if ((v318[2] & 7) != 0)
            {
              v43 = (unsigned int *)(*(_QWORD *)&v318[2] & 0xFFFFFFFFFFFFFFF8);
              do
                v44 = __ldxr(v43);
              while (__stlxr(v44 - 2, v43));
            }
LABEL_63:
            if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()
              || *(_QWORD *)buf == *(_QWORD *)&buf[8])
            {
              v45 = 5;
            }
            else
            {
              realityio::mtlx::MtlxActionPayload::connectFromOutput((pxrInternal__aapl__pxrReserved__::SdfPath *)v294, v18, (pxrInternal__aapl__pxrReserved__::SdfPath **)buf, v290, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v315);
              v45 = v294[4] != 0;
            }
            if (SBYTE7(v306) < 0)
              operator delete(__p[0]);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v315);
            __p[0] = buf;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            if (v45 != 5 && v45)
            {

              goto LABEL_402;
            }
          }
          v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v299, v312, 16);
        }
        while (v15);
      }

      v2 = v294;
    }
    if (v2[4])
      goto LABEL_402;
    v46 = *(id *)(realityio::logObjects((realityio *)v13) + 48);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      v47 = v2[1] & 0xFFFFFFFFFFFFFFF8;
      if (v47)
      {
        v48 = (const char *)(v47 + 16);
        if (*(char *)(v47 + 39) < 0)
          v48 = *(const char **)v48;
      }
      else
      {
        v48 = "";
      }
      v49 = v2[2];
      v50 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v2);
      v51 = "child";
      *(_DWORD *)buf = 136315650;
      if (!v49)
        v51 = "sibling";
      *(_QWORD *)&buf[4] = v51;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v48;
      *(_WORD *)&buf[22] = 2080;
      v314 = v50;
      _os_log_impl(&dword_22FF26000, v46, OS_LOG_TYPE_INFO, "Connecting %s inputs of %s %s", buf, 0x20u);
    }

    v53 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v294;
    v54 = v290;
    if (!v294[2])
      v54 = v294 + 15;
    v55 = v54 + 2;
LABEL_87:
    v56 = *v55;
    if (!v56)
    {
      v122 = *(id *)(realityio::logObjects(v52) + 48);
      if (os_log_type_enabled(v122, OS_LOG_TYPE_INFO))
      {
        v123 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v53);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v123;
        _os_log_impl(&dword_22FF26000, v122, OS_LOG_TYPE_INFO, "  Adding child constants to %s", buf, 0xCu);
      }

      v124 = (uint64_t *)v294[7];
      if (!v124)
      {
LABEL_401:
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::clear((uint64_t)v290);
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::clear(v284);
        goto LABEL_402;
      }
      while (2)
      {
        if (*((_BYTE *)v124 + 72))
          goto LABEL_304;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v124 + 3));
        v125 = *(_QWORD *)buf;
        v126 = v294;
        v127 = *v294;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
        if (v125 == v127)
          goto LABEL_303;
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v124 + 3));
        if (*(char *)(String + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
        }
        else
        {
          v129 = *(_OWORD *)String;
          *(_QWORD *)&v306 = *(_QWORD *)(String + 16);
          *(_OWORD *)__p = v129;
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v124 + 3));
        v130 = *(_QWORD *)buf;
        v131 = *v294;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
        if (v130 == v131)
        {
          Name = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(v124 + 3));
          std::string::operator=((std::string *)__p, Name);
        }
        if ((SBYTE7(v306) & 0x80u) == 0)
          v133 = __p;
        else
          v133 = (void **)__p[0];
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v133);
        v134 = (void *)objc_claimAutoreleasedReturnValue();
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v124 + 10));
        v135 = *(_QWORD *)&buf[8];
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        if (!v135)
        {
          v145 = 0;
          goto LABEL_291;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v124 + 10));
        Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        location = 0;
        v137 = operator new(0x20uLL);
        *v137 = &off_24FDF9EB8;
        v137[1] = &location;
        v137[2] = v124 + 3;
        v137[3] = v294;
        v138 = (char *)operator new(0x20uLL);
        *(_QWORD *)v138 = &off_24FDF9EB8;
        *(_OWORD *)(v138 + 8) = *(_OWORD *)(v137 + 1);
        *((_QWORD *)v138 + 3) = v137[3];
        operator delete(v137);
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v124 + 10));
        *(_QWORD *)v316 = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        LODWORD(v137) = pxrInternal__aapl__pxrReserved__::TfType::IsA();
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        if ((_DWORD)v137)
        {
          v140 = (void *)MEMORY[0x24BE8F618];
          v141 = v124[7];
          *(_QWORD *)buf = v141;
          if ((v141 & 7) != 0)
          {
            v142 = (unsigned int *)(v141 & 0xFFFFFFFFFFFFFFF8);
            do
              v143 = __ldxr(v142);
            while (__stxr(v143 + 2, v142));
            if ((v143 & 1) == 0)
              *(_QWORD *)buf = v142;
          }
          v144 = realityio::conversions::usdToSGDataType(Type, (const std::type_info *)buf);
          *(_QWORD *)v316 = location;
          objc_msgSend(v140, "nodeWithConstantString:type:name:error:", v134, v144, v134, v316);
          v145 = (void *)objc_claimAutoreleasedReturnValue();
          objc_storeStrong(&location, *(id *)v316);
          if ((buf[0] & 7) != 0)
          {
            v146 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
            do
              v147 = __ldxr(v146);
            while (__stlxr(v147 - 2, v146));
          }
LABEL_290:
          (*(void (**)(char *))(*(_QWORD *)v138 + 48))(v138);
          (*(void (**)(char *))(*(_QWORD *)v138 + 40))(v138);

LABEL_291:
          if (SBYTE7(v306) < 0)
            operator delete(__p[0]);
          if (v145 && !v294[4])
          {
            v215 = (void *)v294[2];
            *(_QWORD *)buf = v145;
            objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", buf, 1);
            v216 = (void *)objc_claimAutoreleasedReturnValue();
            __p[0] = 0;
            objc_msgSend(v215, "insertNodes:error:", v216, __p);
            v214 = __p[0];

            if (v214)
            {
              v217 = (void *)objc_claimAutoreleasedReturnValue();
              realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)v294, v217, 0xAu, v214);
            }
            else
            {
              objc_msgSend(v145, "outputs");
              v217 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v217, "firstObject");
              v218 = (void *)objc_claimAutoreleasedReturnValue();
              v219 = (void *)v294[2];
              v220 = v124[12];
              *(_QWORD *)v316 = 0;
              objc_msgSend(v219, "connect:to:error:", v218, v220, v316);
              v214 = *(id *)v316;
              if (v214)
              {
                v221 = (void *)objc_claimAutoreleasedReturnValue();
                realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)v294, v221, 9u, v214);

              }
            }

          }
          else
          {
            v214 = 0;
          }

          v126 = v294;
LABEL_303:
          if (v126[4])
            goto LABEL_402;
LABEL_304:
          v124 = (uint64_t *)*v124;
          if (!v124)
            goto LABEL_401;
          continue;
        }
        break;
      }
      v148 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v316, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v124 + 10));
      realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::VtValue>(v148);
      v149 = objc_claimAutoreleasedReturnValue();
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v316);
      objb = (id)v149;
      if (v149)
      {
        v150 = (void *)MEMORY[0x24BE8F618];
        v151 = v124[7];
        *(_QWORD *)buf = v151;
        if ((v151 & 7) != 0)
        {
          v152 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
          do
            v153 = __ldxr(v152);
          while (__stxr(v153 + 2, v152));
          if ((v153 & 1) == 0)
            *(_QWORD *)buf = v152;
        }
        v154 = realityio::conversions::usdToSGDataType(Type, (const std::type_info *)buf);
        v315.__r_.__value_.__r.__words[0] = (std::string::size_type)location;
        objc_msgSend(v150, "nodeWithConstantScalar:type:name:error:", v149, v154, v134, &v315);
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        objc_storeStrong(&location, v315.__r_.__value_.__l.__data_);
        if ((buf[0] & 7) != 0)
        {
          v155 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
          do
            v156 = __ldxr(v155);
          while (__stlxr(v156 - 2, v155));
        }
        goto LABEL_289;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v315, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v124 + 10));
      v157 = v124[7];
      if ((v157 & 7) != 0)
      {
        v158 = (unsigned int *)(v157 & 0xFFFFFFFFFFFFFFF8);
        do
          v159 = __ldxr(v158);
        while (__stxr(v159 + 2, v158));
        if ((v159 & 1) == 0)
          v157 &= 0xFFFFFFFFFFFFFFF8;
      }
      v160 = v124[8];
      if ((v160 & 7) != 0)
      {
        v161 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFFFF8);
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 2, v161));
        if ((v162 & 1) == 0)
          v160 &= 0xFFFFFFFFFFFFFFF8;
      }
      Data = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::ShaderGraphUtilityTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ShaderGraphUtilityTokens);
      v164 = (unsigned int *)(v157 & 0xFFFFFFFFFFFFFFF8);
      v289 = v157;
      if ((v157 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)Data + 6) & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_216:
        v165 = 0;
        v309 = 0;
        goto LABEL_275;
      }
      v319[0] = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        v168 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
        if ((v160 & 7) != 0)
        {
          v169 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFFFF8);
          do
            v170 = __ldxr(v169);
          while (__stxr(v170 + 2, v169));
          if ((v170 & 1) != 0)
            v171 = v160;
          else
            v171 = v160 & 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
          v171 = v160;
        }
        v182 = 0;
        v183 = xmmword_2301FF8E0;
        do
        {
          v184 = *(double *)(v168 + 8 * v182);
          v295 = v183;
          *(float *)((unint64_t)&v295 & 0xFFFFFFFFFFFFFFF3 | (4 * (v182 & 3))) = v184;
          v183 = v295;
          ++v182;
        }
        while (v182 != 3);
        *(_OWORD *)buf = v295;
        v311 = v171;
        if ((v171 & 7) != 0)
        {
          v185 = (unsigned int *)(v171 & 0xFFFFFFFFFFFFFFF8);
          do
            v186 = __ldxr(v185);
          while (__stxr(v186 + 2, v185));
          if ((v186 & 1) == 0)
            v311 = v171 & 0xFFFFFFFFFFFFFFF8;
        }
        realityio::createCGColor((float32x4_t *)buf, &v311, (CGColorRef *)&v309);
        if ((v311 & 7) != 0)
        {
          v187 = (unsigned int *)(v311 & 0xFFFFFFFFFFFFFFF8);
          do
            v188 = __ldxr(v187);
          while (__stlxr(v188 - 2, v187));
        }
        if ((v171 & 7) != 0)
        {
          v189 = (unsigned int *)(v171 & 0xFFFFFFFFFFFFFFF8);
          do
            v190 = __ldxr(v189);
          while (__stlxr(v190 - 2, v189));
        }
        goto LABEL_274;
      }
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        v173 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
        if ((v160 & 7) != 0)
        {
          v174 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFFFF8);
          do
            v175 = __ldxr(v174);
          while (__stxr(v175 + 2, v174));
          if ((v175 & 1) != 0)
            v176 = v160;
          else
            v176 = v160 & 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
          v176 = v160;
        }
        v195 = 0;
        v196 = xmmword_2301FF8E0;
        do
        {
          v197 = *(_DWORD *)(v173 + 4 * v195);
          v296 = v196;
          *(_DWORD *)((unint64_t)&v296 & 0xFFFFFFFFFFFFFFF3 | (4 * (v195 & 3))) = v197;
          v196 = v296;
          ++v195;
        }
        while (v195 != 3);
        *(_OWORD *)buf = v296;
        v311 = v176;
        if ((v176 & 7) != 0)
        {
          v198 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
          do
            v199 = __ldxr(v198);
          while (__stxr(v199 + 2, v198));
          if ((v199 & 1) == 0)
            v311 = v176 & 0xFFFFFFFFFFFFFFF8;
        }
        realityio::createCGColor((float32x4_t *)buf, &v311, (CGColorRef *)&v309);
        if ((v311 & 7) != 0)
        {
          v200 = (unsigned int *)(v311 & 0xFFFFFFFFFFFFFFF8);
          do
            v201 = __ldxr(v200);
          while (__stlxr(v201 - 2, v200));
        }
        if ((v176 & 7) != 0)
        {
          v202 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
          do
            v203 = __ldxr(v202);
          while (__stlxr(v203 - 2, v202));
        }
LABEL_274:
        v165 = 3;
      }
      else
      {
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          v178 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          if ((v160 & 7) != 0)
          {
            v179 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFFFF8);
            do
              v180 = __ldxr(v179);
            while (__stxr(v180 + 2, v179));
            if ((v180 & 1) != 0)
              v181 = v160;
            else
              v181 = v160 & 0xFFFFFFFFFFFFFFF8;
          }
          else
          {
            v181 = v160;
          }
          v244 = 0;
          v245 = xmmword_2301FF8E0;
          do
          {
            v246 = *(double *)(v178 + 8 * v244);
            v297 = v245;
            *(float *)((unint64_t)&v297 & 0xFFFFFFFFFFFFFFF3 | (4 * (v244 & 3))) = v246;
            v245 = v297;
            ++v244;
          }
          while (v244 != 4);
          *(_OWORD *)buf = v297;
          v311 = v181;
          if ((v181 & 7) != 0)
          {
            v247 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
            do
              v248 = __ldxr(v247);
            while (__stxr(v248 + 2, v247));
            if ((v248 & 1) == 0)
              v311 = v181 & 0xFFFFFFFFFFFFFFF8;
          }
          realityio::createCGColor((float32x4_t *)buf, &v311, (CGColorRef *)&v309);
          if ((v311 & 7) != 0)
          {
            v249 = (unsigned int *)(v311 & 0xFFFFFFFFFFFFFFF8);
            do
              v250 = __ldxr(v249);
            while (__stlxr(v250 - 2, v249));
          }
          if ((v181 & 7) != 0)
          {
            v251 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
            do
              v252 = __ldxr(v251);
            while (__stlxr(v252 - 2, v251));
          }
        }
        else
        {
          if (!pxrInternal__aapl__pxrReserved__::TfType::IsA())
            goto LABEL_216;
          v191 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          if ((v160 & 7) != 0)
          {
            v192 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFFFF8);
            do
              v193 = __ldxr(v192);
            while (__stxr(v193 + 2, v192));
            if ((v193 & 1) != 0)
              v194 = v160;
            else
              v194 = v160 & 0xFFFFFFFFFFFFFFF8;
          }
          else
          {
            v194 = v160;
          }
          v255 = 0;
          v256 = xmmword_2301FF8E0;
          do
          {
            v257 = *(_DWORD *)(v191 + 4 * v255);
            v298 = v256;
            *(_DWORD *)((unint64_t)&v298 & 0xFFFFFFFFFFFFFFF3 | (4 * (v255 & 3))) = v257;
            v256 = v298;
            ++v255;
          }
          while (v255 != 4);
          *(_OWORD *)buf = v298;
          v311 = v194;
          if ((v194 & 7) != 0)
          {
            v258 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
            do
              v259 = __ldxr(v258);
            while (__stxr(v259 + 2, v258));
            if ((v259 & 1) == 0)
              v311 = v194 & 0xFFFFFFFFFFFFFFF8;
          }
          realityio::createCGColor((float32x4_t *)buf, &v311, (CGColorRef *)&v309);
          if ((v311 & 7) != 0)
          {
            v260 = (unsigned int *)(v311 & 0xFFFFFFFFFFFFFFF8);
            do
              v261 = __ldxr(v260);
            while (__stlxr(v261 - 2, v260));
          }
          if ((v194 & 7) != 0)
          {
            v262 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
            do
              v263 = __ldxr(v262);
            while (__stlxr(v263 - 2, v262));
          }
        }
        v165 = 4;
      }
LABEL_275:
      if ((v160 & 7) != 0)
      {
        v204 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFFFF8);
        do
          v205 = __ldxr(v204);
        while (__stlxr(v205 - 2, v204));
      }
      if ((v289 & 7) != 0)
      {
        do
          v206 = __ldxr(v164);
        while (__stlxr(v206 - 2, v164));
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
      if (v309)
      {
        *(_QWORD *)buf = location;
        if (v165 == 3)
          objc_msgSend(MEMORY[0x24BE8F618], "nodeWithConstantColor3:name:error:");
        else
          objc_msgSend(MEMORY[0x24BE8F618], "nodeWithConstantColor4:name:error:");
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        v212 = *(id *)buf;
        v213 = location;
        location = v212;
LABEL_288:

        realityio::WrappedCFRef<CGColor *>::~WrappedCFRef((const void **)&v309);
LABEL_289:

        goto LABEL_290;
      }
      v208 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(v207, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v124 + 10));
      v311 = pxrInternal__aapl__pxrReserved__::VtValue::GetType(v208);
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
        goto LABEL_285;
      }
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        v223 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
        goto LABEL_308;
      }
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        v225 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
        goto LABEL_311;
      }
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
        pxrInternal__aapl__pxrReserved__::GfMatrix2f::GfMatrix2f();
LABEL_285:
        realityio::conversions::asScalarMatrix<pxrInternal__aapl__pxrReserved__::GfMatrix2f>();
        v211 = objc_claimAutoreleasedReturnValue();
        goto LABEL_312;
      }
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        v243 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
        MEMORY[0x2348B18AC](buf, v243);
        v223 = (uint64_t)buf;
LABEL_308:
        realityio::conversions::asScalarMatrix<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(v223);
        v211 = objc_claimAutoreleasedReturnValue();
        goto LABEL_312;
      }
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        v254 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
        MEMORY[0x2348B199C](buf, v254);
        v225 = (uint64_t)buf;
LABEL_311:
        realityio::conversions::asScalarMatrix<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v225);
        v211 = objc_claimAutoreleasedReturnValue();
LABEL_312:
        v213 = (id)v211;
      }
      else
      {
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
          goto LABEL_372;
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfQuatf>();
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
LABEL_372:
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatd>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfQuatd>();
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2d>();
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2f>();
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          v270 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2i>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2i>(v270);
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3d>();
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3f>();
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          v274 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3i>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3i>(v274);
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4d>();
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4f>();
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          v278 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4i>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4i>(v278);
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          v280 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2h>(v280);
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          v282 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3h>(v282);
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          v283 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
          realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4h>(v283);
          v211 = objc_claimAutoreleasedReturnValue();
          goto LABEL_312;
        }
        v213 = 0;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v315);
      if (v213)
      {
        v226 = (void *)MEMORY[0x24BE8F618];
        v227 = v124[7];
        *(_QWORD *)buf = v227;
        if ((v227 & 7) != 0)
        {
          v228 = (unsigned int *)(v227 & 0xFFFFFFFFFFFFFFF8);
          do
            v229 = __ldxr(v228);
          while (__stxr(v229 + 2, v228));
          if ((v229 & 1) == 0)
            *(_QWORD *)buf = v228;
        }
        v230 = realityio::conversions::usdToSGDataType(Type, (const std::type_info *)buf);
        v315.__r_.__value_.__r.__words[0] = (std::string::size_type)location;
        objc_msgSend(v226, "nodeWithConstantVector:type:name:error:", v213, v230, v134, &v315);
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        objc_storeStrong(&location, v315.__r_.__value_.__l.__data_);
        if ((buf[0] & 7) != 0)
        {
          v231 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
          do
            v232 = __ldxr(v231);
          while (__stlxr(v232 - 2, v231));
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v124 + 10));
        realityio::conversions::asString<pxrInternal__aapl__pxrReserved__::VtValue>((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        v233 = (void *)objc_claimAutoreleasedReturnValue();
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        if (v233)
        {
          v234 = (void *)MEMORY[0x24BE8F618];
          v235 = v124[7];
          *(_QWORD *)buf = v235;
          if ((v235 & 7) != 0)
          {
            v236 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
            do
              v237 = __ldxr(v236);
            while (__stxr(v237 + 2, v236));
            if ((v237 & 1) == 0)
              *(_QWORD *)buf = v236;
          }
          v238 = realityio::conversions::usdToSGDataType(Type, (const std::type_info *)buf);
          v315.__r_.__value_.__r.__words[0] = (std::string::size_type)location;
          objc_msgSend(v234, "nodeWithConstantString:type:name:error:", v233, v238, v134, &v315);
          v145 = (void *)objc_claimAutoreleasedReturnValue();
          objc_storeStrong(&location, v315.__r_.__value_.__l.__data_);
          if ((buf[0] & 7) != 0)
          {
            v239 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
            do
              v240 = __ldxr(v239);
            while (__stlxr(v240 - 2, v239));
          }
        }
        else
        {
          v145 = 0;
        }

        v213 = 0;
      }
      goto LABEL_288;
    }
    v288 = *(id *)(v56 + 96);
    v57 = *(unsigned int **)(v56 + 32);
    obja = *(unsigned int **)(v56 + 40);
    v285 = v56;
    v58 = 0;
    if (v57 == obja)
      goto LABEL_165;
    v286 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v56 + 16);
    while (1)
    {
      v59 = std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v294 + 15, v57);
      if (v59)
      {
        v60 = v59;
        if (*((_BYTE *)v59 + 72))
        {
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Multiple connections to input '%s'."), pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v59 + 2)), v284);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          realityio::mtlx::MtlxActionPayload::setError(v53, v61, 8u, 0);

        }
        v62 = (void *)MEMORY[0x24BDD17C8];
        pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(v60 + 3));
        pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace();
        if (v318[9] >= 0)
          v63 = v316;
        else
          v63 = *(_BYTE **)v316;
        objc_msgSend(v62, "stringWithUTF8String:", v63);
        v64 = objc_claimAutoreleasedReturnValue();
        if ((v318[9] & 0x80000000) != 0)
          operator delete(*(void **)v316);
        *(_OWORD *)__p = 0u;
        v306 = 0u;
        v307 = 0u;
        v308 = 0u;
        objc_msgSend((id)v294[2], "argumentsNode");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v65, "outputs");
        v66 = (void *)objc_claimAutoreleasedReturnValue();

        v67 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", __p, buf, 16);
        if (v67)
        {
          v68 = *(_QWORD *)v306;
LABEL_100:
          v69 = 0;
          while (1)
          {
            if (*(_QWORD *)v306 != v68)
              objc_enumerationMutation(v66);
            v70 = (void *)*((_QWORD *)__p[1] + v69);
            objc_msgSend(v70, "name");
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            v72 = -[NSObject isEqualToString:](v64, "isEqualToString:", v71);

            if (v72)
              break;
            if (v67 == ++v69)
            {
              v67 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", __p, buf, 16);
              if (v67)
                goto LABEL_100;
              goto LABEL_155;
            }
          }
          v73 = v70;
          v74 = v288;
          v75 = *v287;
          v76 = *((unsigned int *)v287 + 2);
          v77 = v73;
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 176))(v75, v76)
            && (objc_msgSend(v77, "type") == 11 || objc_msgSend(v77, "type") == 12))
          {
            objc_msgSend(v77, "name");
            v78 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            MEMORY[0x2348B274C](&v315, objc_msgSend(v78, "UTF8String"));
            (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, std::string *))(*(_QWORD *)v75 + 144))(v316, v75, v76, &v315);
            if ((v315.__r_.__value_.__s.__data_[0] & 7) != 0)
            {
              v79 = (unsigned int *)(v315.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v80 = __ldxr(v79);
              while (__stlxr(v80 - 2, v79));
            }

            memset(&v315, 0, sizeof(v315));
            if (objc_msgSend(v77, "type") == 11)
            {
              (*(void (**)(_QWORD, _QWORD, _BYTE *, std::string *))(**(_QWORD **)v316 + 72))(*(_QWORD *)v316, *(unsigned int *)&v316[8], &v318[2], &v315);
            }
            else
            {
              v311 = 0;
              v90 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(_QWORD, _QWORD, _BYTE *, unint64_t *))(**(_QWORD **)v316 + 64))(*(_QWORD *)v316, *(unsigned int *)&v316[8], &v318[2], &v311);
              if ((v311 & 0xFFFFFFFFFFFFFFF8) != 0)
                v91 = (const std::string *)((v311 & 0xFFFFFFFFFFFFFFF8) + 16);
              else
                v91 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v90);
              std::string::operator=(&v315, v91);
              if ((v311 & 7) != 0)
              {
                v92 = (unsigned int *)(v311 & 0xFFFFFFFFFFFFFFF8);
                do
                  v93 = __ldxr(v92);
                while (__stlxr(v93 - 2, v92));
              }
            }
            v94 = (void *)v294[27];
            objc_msgSend(v77, "name");
            v95 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v94, "objectForKeyedSubscript:", v95);
            v96 = (void *)objc_claimAutoreleasedReturnValue();

            if (v96)
            {
              v85 = 0;
            }
            else
            {
              v97 = (void *)MEMORY[0x24BE8F618];
              if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v98 = &v315;
              else
                v98 = (std::string *)v315.__r_.__value_.__r.__words[0];
              objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v98);
              v99 = (void *)objc_claimAutoreleasedReturnValue();
              v100 = objc_msgSend(v77, "type");
              objc_msgSend(v77, "name");
              v101 = (void *)objc_claimAutoreleasedReturnValue();
              v311 = 0;
              objc_msgSend(v97, "nodeWithConstantString:type:name:error:", v99, v100, v101, &v311);
              v96 = (void *)objc_claimAutoreleasedReturnValue();
              v85 = (id)v311;

              if (!v85)
              {
                v102 = (void *)v294[2];
                v319[0] = v96;
                objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v319, 1);
                v103 = (void *)objc_claimAutoreleasedReturnValue();
                location = 0;
                objc_msgSend(v102, "insertNodes:error:", v103, &location);
                v85 = location;

                v104 = (void *)v294[27];
                objc_msgSend(v77, "name");
                v105 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v104, "setObject:forKeyedSubscript:", v96, v105);

              }
            }
            objc_msgSend(v96, "outputs");
            v106 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v106, "objectAtIndexedSubscript:", 0);
            v86 = (void *)objc_claimAutoreleasedReturnValue();

            if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v315.__r_.__value_.__l.__data_);
            if ((v318[2] & 7) != 0)
            {
              v107 = (unsigned int *)(*(_QWORD *)&v318[2] & 0xFFFFFFFFFFFFFFF8);
              do
                v108 = __ldxr(v107);
              while (__stlxr(v108 - 2, v107));
            }
          }
          else
          {
            v85 = 0;
            v86 = v77;
          }
          v109 = (void *)v294[2];
          *(_QWORD *)v316 = v85;
          objc_msgSend(v109, "connect:to:error:", v86, v74, v316);
          v110 = *(id *)v316;

          v111 = objc_retainAutorelease(v110);
          v112 = v111;
          v113 = v112;
          if (v111)
          {
            realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)v294, CFSTR("Failed to create material."), 0, v112);

            goto LABEL_163;
          }
          v114 = *(id *)(realityio::logObjects((realityio *)v112) + 48);
          if (os_log_type_enabled(v114, OS_LOG_TYPE_INFO))
          {
            v115 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v286);
            v116 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v57);
            *(_DWORD *)v316 = 136315394;
            *(_QWORD *)&v316[4] = v115;
            v317 = 2080;
            *(_QWORD *)v318 = v116;
            _os_log_impl(&dword_22FF26000, v114, OS_LOG_TYPE_INFO, "  Connected %s from input %s", v316, 0x16u);
          }

          v58 = 1;
        }
LABEL_155:

LABEL_156:
        v53 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v294;
      }
      else
      {
        v81 = *(int8x8_t *)((char *)v53 + 88);
        if (v81)
        {
          v82 = bswap64(0x9E3779B97F4A7C55* (v57[1]+ ((v57[1]+ (unint64_t)*v57+ (v57[1] + (unint64_t)*v57) * (v57[1] + (unint64_t)*v57)) >> 1)));
          v83 = (uint8x8_t)vcnt_s8(v81);
          v83.i16[0] = vaddlv_u8(v83);
          if (v83.u32[0] > 1uLL)
          {
            v84 = v82;
            if (v82 >= *(_QWORD *)&v81)
              v84 = v82 % *(_QWORD *)&v81;
          }
          else
          {
            v84 = v82 & (*(_QWORD *)&v81 - 1);
          }
          v87 = *(_QWORD **)(*((_QWORD *)v53 + 10) + 8 * v84);
          if (v87)
          {
            for (j = (_QWORD *)*v87; j; j = (_QWORD *)*j)
            {
              v89 = j[1];
              if (v89 == v82)
              {
                if (j[2] == *(_QWORD *)v57)
                {
                  v117 = (void *)*((_QWORD *)v53 + 2);
                  v118 = j[12];
                  v309 = 0;
                  objc_msgSend(v117, "connect:to:error:", v118, v288, &v309);
                  v119 = v309;
                  v113 = v119;
                  if (!v119)
                  {
                    v64 = *(id *)(realityio::logObjects(0) + 48);
                    v58 = 1;
                    if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
                    {
                      v120 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v286);
                      v121 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v57);
                      *(_DWORD *)v316 = 136315394;
                      *(_QWORD *)&v316[4] = v120;
                      v317 = 2080;
                      *(_QWORD *)v318 = v121;
                      _os_log_impl(&dword_22FF26000, v64, OS_LOG_TYPE_INFO, "  Internally connected %s to %s", v316, 0x16u);
                    }
                    goto LABEL_156;
                  }
                  realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)v294, CFSTR("Failed to create material."), 0, v119);
LABEL_163:
                  v58 = 0;
LABEL_164:

LABEL_165:
                  v55 = (uint64_t *)v285;
                  *(_BYTE *)(v285 + 72) = v58 & 1;
                  v53 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v294;
                  if (v294[4])
                  {
LABEL_402:
                    *(_QWORD *)buf = v303;
                    std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                    *(_QWORD *)buf = v304;
                    std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                    return;
                  }
                  goto LABEL_87;
                }
              }
              else
              {
                if (v83.u32[0] > 1uLL)
                {
                  if (v89 >= *(_QWORD *)&v81)
                    v89 %= *(_QWORD *)&v81;
                }
                else
                {
                  v89 &= *(_QWORD *)&v81 - 1;
                }
                if (v89 != v84)
                  break;
              }
            }
          }
        }
      }
      v57 += 2;
      if (v57 == obja)
      {
        v113 = 0;
        goto LABEL_164;
      }
    }
  }
}

void sub_23014112C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::MtlxActionPayload::nodeFromGraph(id *this)
{
  void *v2;
  uint64_t Name;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  if (!this[4])
  {
    v2 = (void *)MEMORY[0x24BDD17C8];
    Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
    if (*(char *)(Name + 23) >= 0)
      v4 = Name;
    else
      v4 = *(_QWORD *)Name;
    objc_msgSend(v2, "stringWithUTF8String:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x24BE8F618];
    v7 = this[2];
    v13 = 0;
    objc_msgSend(v6, "nodeWithGraph:name:error:", v7, v5, &v13);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v13;
    v10 = v8;
    objc_storeStrong(this + 3, v8);
    if (v10)
    {
      v11 = this[2];
      this[2] = 0;

    }
    if (v9)
      realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)this, CFSTR("Failed to import NodeGraph."), 3u, v9);
    v12 = this[25];
    this[25] = 0;

    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::clear((uint64_t)(this + 5));
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::clear((uint64_t)(this + 10));

  }
}

BOOL realityio::mtlx::MtlxActionPayload::isSiblingOf(realityio::mtlx::MtlxActionPayload *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  _BOOL8 v5;
  uint64_t v7;
  uint64_t v8;

  Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  if ((*((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 1) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  if (*(_QWORD *)this == *(_QWORD *)a2)
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2);
  v5 = v8 == v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  return v5;
}

uint64_t ___ZN9realityio4mtlx12_GLOBAL__N_19addInputsERKNSt3__16vectorINS0_13NeoShadeInputENS2_9allocatorIS4_EEEEPK7NSArrayIP7SGInputERNS2_13unordered_mapIN32pxrInternal__aapl__pxrReserved__7SdfPathENS0_17MtlxActionPayload11InputRecordENSI_4HashENS2_8equal_toISI_EENS5_INS2_4pairIKSI_SK_EEEEEERU8__strongP8NSString_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", **(_QWORD **)(a1 + 32));

  return v4;
}

void sub_230141604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MtlxActionPayload::Connectable::Connectable<realityio::mtlx::NeoShadeInput>(uint64_t a1, _QWORD *a2)
{
  unsigned int *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  pxrInternal__aapl__pxrReserved__::VtValue *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;

  v27 = *a2;
  v31 = *((_DWORD *)a2 + 2);
  v5 = a2 + 2;
  v4 = (unsigned int *)a2[2];
  v35 = v4;
  if ((v4 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v35 = v6;
  }
  (*(void (**)(uint64_t, _QWORD, unsigned int **))(*(_QWORD *)v27 + 24))(v27, v31, &v35);
  if ((v35 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v28 = *a2;
  v32 = *((_DWORD *)a2 + 2);
  v10 = (unsigned int *)a2[2];
  v35 = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v35 = v11;
  }
  (*(void (**)(uint64_t, _QWORD, unsigned int **))(*(_QWORD *)v28 + 120))(v28, v32, &v35);
  if ((v35 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v29 = *a2;
  v33 = *((_DWORD *)a2 + 2);
  v15 = (unsigned int *)a2[2];
  v35 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v35 = v16;
  }
  (*(void (**)(uint64_t, _QWORD, unsigned int **))(*(_QWORD *)v29 + 128))(v29, v33, &v35);
  if ((v35 & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v30 = *a2;
  v34 = *((_DWORD *)a2 + 2);
  v20 = (unsigned int *)a2[2];
  v35 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v35 = v21;
  }
  (*(void (**)(uint64_t, _QWORD, unsigned int **, uint64_t))(*(_QWORD *)v30 + 104))(v30, v34, &v35, a1 + 56);
  if ((v35 & 7) != 0)
  {
    v24 = (unsigned int *)((unint64_t)v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  realityio::conversions::castToSupportedType((realityio::conversions *)(a1 + 56), v23);
  (*(void (**)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)*a2 + 80))(*a2, *((unsigned int *)a2 + 2), v5, 1, a1 + 8);
  return a1;
}

void sub_230141894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  _QWORD *v13;
  _QWORD *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v15);
  if ((*v14 & 7) != 0)
  {
    v17 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if ((*v13 & 7) != 0)
  {
    v19 = (unsigned int *)(*v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v12);
  _Unwind_Resume(a1);
}

void sub_230141974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v12;
  unsigned int v13;

  if ((a12 & 7) != 0)
  {
    v12 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  JUMPOUT(0x23014196CLL);
}

uint64_t ___ZN9realityio4mtlx12_GLOBAL__N_110addOutputsERKNSt3__16vectorINS0_14NeoShadeOutputENS2_9allocatorIS4_EEEEPK7NSArrayIP8SGOutputERNS2_13unordered_mapIN32pxrInternal__aapl__pxrReserved__7SdfPathENS0_17MtlxActionPayload12OutputRecordENSI_4HashENS2_8equal_toISI_EENS5_INS2_4pairIKSI_SK_EEEEEERU8__strongP8NSString_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", **(_QWORD **)(a1 + 32));

  return v4;
}

void sub_2301419E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MtlxActionPayload::Connectable::Connectable<realityio::mtlx::NeoShadeOutput>(uint64_t a1, _QWORD *a2)
{
  unsigned int *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  pxrInternal__aapl__pxrReserved__::VtValue *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;

  v27 = *a2;
  v31 = *((_DWORD *)a2 + 2);
  v5 = a2 + 2;
  v4 = (unsigned int *)a2[2];
  v35 = v4;
  if ((v4 & 7) != 0)
  {
    v6 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v35 = v6;
  }
  (*(void (**)(uint64_t, _QWORD, unsigned int **))(*(_QWORD *)v27 + 24))(v27, v31, &v35);
  if ((v35 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v28 = *a2;
  v32 = *((_DWORD *)a2 + 2);
  v10 = (unsigned int *)a2[2];
  v35 = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v35 = v11;
  }
  (*(void (**)(uint64_t, _QWORD, unsigned int **))(*(_QWORD *)v28 + 120))(v28, v32, &v35);
  if ((v35 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v29 = *a2;
  v33 = *((_DWORD *)a2 + 2);
  v15 = (unsigned int *)a2[2];
  v35 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v35 = v16;
  }
  (*(void (**)(uint64_t, _QWORD, unsigned int **))(*(_QWORD *)v29 + 128))(v29, v33, &v35);
  if ((v35 & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v30 = *a2;
  v34 = *((_DWORD *)a2 + 2);
  v20 = (unsigned int *)a2[2];
  v35 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v35 = v21;
  }
  (*(void (**)(uint64_t, _QWORD, unsigned int **, uint64_t))(*(_QWORD *)v30 + 104))(v30, v34, &v35, a1 + 56);
  if ((v35 & 7) != 0)
  {
    v24 = (unsigned int *)((unint64_t)v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  realityio::conversions::castToSupportedType((realityio::conversions *)(a1 + 56), v23);
  (*(void (**)(_QWORD, _QWORD, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)*a2 + 80))(*a2, *((unsigned int *)a2 + 2), v5, 0, a1 + 8);
  return a1;
}

void sub_230141C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  _QWORD *v13;
  _QWORD *v14;
  pxrInternal__aapl__pxrReserved__::VtValue *v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v15);
  if ((*v14 & 7) != 0)
  {
    v17 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if ((*v13 & 7) != 0)
  {
    v19 = (unsigned int *)(*v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v12);
  _Unwind_Resume(a1);
}

void sub_230141D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v12;
  unsigned int v13;

  if ((a12 & 7) != 0)
  {
    v12 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  JUMPOUT(0x230141D48);
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v6 = bswap64(0x9E3779B97F4A7C55 * (a2 & 0xFFFFFFFFFFFFFFF8));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if ((v10[2] & 0xFFFFFFFFFFFFFFF8) == (a2 & 0xFFFFFFFFFFFFFFF8))
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 16;
  v13 = (char *)operator new(0x48uLL);
  v26[0] = v13;
  v26[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  v14 = *a3;
  *((_QWORD *)v13 + 2) = *a3;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      *((_QWORD *)v13 + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v7 || (float)(v18 * (float)v7) < v17)
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v22);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v24 >= v7)
          v24 %= v7;
      }
      else
      {
        v24 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v10 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v10;
}

void sub_2301420A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0,std::allocator<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0,std::allocator<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDF9EB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0,std::allocator<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF9EB8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0,std::allocator<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  id v3;

  if (**(_QWORD **)(a1 + 8))
  {
    v2 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 24);
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("Failed to create asset constant at %s."), pxrInternal__aapl__pxrReserved__::SdfPath::GetText(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 16)));
    v3 = (id)objc_claimAutoreleasedReturnValue();
    realityio::mtlx::MtlxActionPayload::setError(v2, v3, 0xAu, **(void ***)(a1 + 8));

  }
}

uint64_t std::__function::__func<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0,std::allocator<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0,std::allocator<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0>,void ()(void)>::target_type()
{
}

id realityio::conversions::asScalarMatrix<pxrInternal__aapl__pxrReserved__::GfMatrix2f>()
{
  void *v0;
  uint64_t v1;
  char v2;
  char v3;
  void *v4;
  uint64_t v5;
  char v6;
  char v7;
  void *v8;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 2);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = 0;
  v2 = 1;
  do
  {
    v3 = v2;
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = v6;
      realityio::conversions::asScalar<float>();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:atIndexedSubscript:", v8, v5);

      v6 = 0;
      v5 = 1;
    }
    while ((v7 & 1) != 0);
    objc_msgSend(v0, "setObject:atIndexedSubscript:", v4, v1);

    v2 = 0;
    v1 = 1;
  }
  while ((v3 & 1) != 0);
  return v0;
}

id realityio::conversions::asScalarMatrix<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 3; ++i)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = 0;
    v6 = a1;
    do
    {
      realityio::conversions::asScalar<float>();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:atIndexedSubscript:", v7, v5);

      ++v5;
      v6 += 12;
    }
    while (v5 != 3);
    objc_msgSend(v2, "setObject:atIndexedSubscript:", v4, i);

    a1 += 4;
  }
  return v2;
}

id realityio::conversions::asScalarMatrix<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 4; ++i)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 4);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = 0;
    v6 = a1;
    do
    {
      realityio::conversions::asScalar<float>();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:atIndexedSubscript:", v7, v5);

      ++v5;
      v6 += 16;
    }
    while (v5 != 4);
    objc_msgSend(v2, "setObject:atIndexedSubscript:", v4, i);

    a1 += 4;
  }
  return v2;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfQuatd>()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 4);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  realityio::conversions::asScalar<double>();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setObject:atIndexedSubscript:", v1, 0);

  v2 = 0;
  do
  {
    realityio::conversions::asScalar<double>();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "setObject:atIndexedSubscript:", v3, ++v2);

  }
  while (v2 != 3);
  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfQuatf>()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 4);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  realityio::conversions::asScalar<float>();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setObject:atIndexedSubscript:", v1, 0);

  v2 = 0;
  do
  {
    realityio::conversions::asScalar<float>();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "setObject:atIndexedSubscript:", v3, ++v2);

  }
  while (v2 != 3);
  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2d>()
{
  void *v0;
  uint64_t v1;
  char v2;
  char v3;
  void *v4;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 2);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = 0;
  v2 = 1;
  do
  {
    v3 = v2;
    realityio::conversions::asScalar<double>();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "setObject:atIndexedSubscript:", v4, v1);

    v2 = 0;
    v1 = 1;
  }
  while ((v3 & 1) != 0);
  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2f>()
{
  void *v0;
  uint64_t v1;
  char v2;
  char v3;
  void *v4;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 2);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = 0;
  v2 = 1;
  do
  {
    v3 = v2;
    realityio::conversions::asScalar<float>();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "setObject:atIndexedSubscript:", v4, v1);

    v2 = 0;
    v1 = 1;
  }
  while ((v3 & 1) != 0);
  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;
  char v5;
  void *v6;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = 0;
  v4 = 1;
  do
  {
    v5 = v4;
    realityio::conversions::asScalar<int>(*(unsigned int *)(a1 + 4 * v3));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:atIndexedSubscript:", v6, v3);

    v4 = 0;
    v3 = 1;
  }
  while ((v5 & 1) != 0);
  return v2;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3d>()
{
  void *v0;
  uint64_t i;
  void *v2;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 3);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 3; ++i)
  {
    realityio::conversions::asScalar<double>();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "setObject:atIndexedSubscript:", v2, i);

  }
  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3f>()
{
  void *v0;
  uint64_t i;
  void *v2;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 3);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 3; ++i)
  {
    realityio::conversions::asScalar<float>();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "setObject:atIndexedSubscript:", v2, i);

  }
  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 3; ++i)
  {
    realityio::conversions::asScalar<int>(*(unsigned int *)(a1 + 4 * i));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:atIndexedSubscript:", v4, i);

  }
  return v2;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4d>()
{
  void *v0;
  uint64_t i;
  void *v2;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 4);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 4; ++i)
  {
    realityio::conversions::asScalar<double>();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "setObject:atIndexedSubscript:", v2, i);

  }
  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4f>()
{
  void *v0;
  uint64_t i;
  void *v2;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 4);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 4; ++i)
  {
    realityio::conversions::asScalar<float>();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "setObject:atIndexedSubscript:", v2, i);

  }
  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 4; ++i)
  {
    realityio::conversions::asScalar<int>(*(unsigned int *)(a1 + 4 * i));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:atIndexedSubscript:", v4, i);

  }
  return v2;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;
  char v5;
  void *v6;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = 0;
  v4 = 1;
  do
  {
    v5 = v4;
    realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::pxr_half::half>(*(_WORD *)(a1 + 2 * v3));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:atIndexedSubscript:", v6, v3);

    v4 = 0;
    v3 = 1;
  }
  while ((v5 & 1) != 0);
  return v2;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 3; ++i)
  {
    realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::pxr_half::half>(*(_WORD *)(a1 + 2 * i));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:atIndexedSubscript:", v4, i);

  }
  return v2;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1)
{
  void *v2;
  uint64_t i;
  void *v4;

  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 4; ++i)
  {
    realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::pxr_half::half>(*(_WORD *)(a1 + 2 * i));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:atIndexedSubscript:", v4, i);

  }
  return v2;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v25[2];
  char v26;

  v8 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *(_QWORD *)a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = a1 + 16;
  v15 = (char *)operator new(0x68uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 4, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 5, a3 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 6, (_DWORD *)a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 7, (_DWORD *)(a4 + 4));
  *((_OWORD *)v15 + 2) = *(_OWORD *)(a4 + 8);
  *((_QWORD *)v15 + 6) = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  v15[72] = *(_BYTE *)(a4 + 48);
  *(_QWORD *)(a4 + 40) = 0;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((_QWORD *)v15 + 10, (_QWORD *)(a4 + 56));
  v16 = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 72) = 0;
  *((_QWORD *)v15 + 12) = v16;
  v26 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v25[0] = *v23;
    *v23 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v14;
    if (*(_QWORD *)v25[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9)
          v24 %= v9;
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v25[0];
    }
  }
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
}

void sub_230142EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v25[2];
  char v26;

  v8 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *(_QWORD *)a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = a1 + 16;
  v15 = (char *)operator new(0x68uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 4, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 5, a3 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 6, (_DWORD *)a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 7, (_DWORD *)(a4 + 4));
  *((_OWORD *)v15 + 2) = *(_OWORD *)(a4 + 8);
  *((_QWORD *)v15 + 6) = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  v15[72] = *(_BYTE *)(a4 + 48);
  *(_QWORD *)(a4 + 40) = 0;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((_QWORD *)v15 + 10, (_QWORD *)(a4 + 56));
  v16 = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 72) = 0;
  *((_QWORD *)v15 + 12) = v16;
  v26 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v25[0] = *v23;
    *v23 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v14;
    if (*(_QWORD *)v25[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9)
          v24 %= v9;
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v25[0];
    }
  }
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
}

void sub_2301431A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrTfWeakPtrGetTypeID()
{
  if (RIOPxrTfWeakPtrGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrTfWeakPtrGetTypeID::onceToken, &__block_literal_global_31);
  return RIOPxrTfWeakPtrGetTypeID::typeID;
}

uint64_t RIOPxrTfWeakPtrRefGetBase(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(result + 16));
  return result;
}

uint64_t _RIOPxrTfWeakPtrCFFinalize(char *a1)
{
  return (**((uint64_t (***)(char *))a1 + 2))(a1 + 16);
}

uint64_t _RIOPxrTfWeakPtrCFEqual(const void *a1, const void *a2)
{
  return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator==();
}

unint64_t _RIOPxrTfWeakPtrCFHash(char *a1)
{
  return (unint64_t)pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetUniqueIdentifier((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 16)) >> 3;
}

CFStringRef _RIOPxrTfWeakPtrCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrTfWeakPtr %p>"), a1);
}

CFStringRef _RIOPxrTfWeakPtrCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrTfWeakPtr %p>"), a1);
}

uint64_t RIOPxrUsdAttributeSetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char IsValid;
  unsigned int *v5;
  unsigned int v6;
  std::recursive_mutex *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = 0;
  if (a1)
    v3 = a1 + 24;
  else
    v3 = 0;
  if (a1 && a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v9, (uint64_t *)(v3 + 8), (_DWORD *)(v3 + 16));
    IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9);
    if ((v12 & 7) != 0)
    {
      v5 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    if (v10)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
    if ((IsValid & 1) != 0)
    {
      v7 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>((realityio::UsdLayerMutexTracker *)v3);
      std::recursive_mutex::lock(v7);
      v2 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
      std::recursive_mutex::unlock(v7);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_2301433CC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(realityio::UsdLayerMutexTracker *a1)
{
  void *v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  uint64_t *EditTarget;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = realityio::UsdLayerMutexTracker::instance(a1);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v22);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v3);
    v5 = EditTarget[1];
    v20 = *EditTarget;
    v21 = v5;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = v23;
    if (v23)
    {
      v9 = (unsigned int *)(v23 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v20);
  v14 = v13;
  v15 = v21;
  if (v21)
  {
    v16 = (unsigned int *)(v21 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
  }
  return v14;
}

void sub_2301434D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (a10)
  {
    v13 = a10 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdAttributeCopyValue(uint64_t a1)
{
  uint64_t v1;
  char IsValid;
  unsigned int *v3;
  unsigned int v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1;
  v10 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v6, (uint64_t *)(a1 + 32), (_DWORD *)(a1 + 40));
    IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v6);
    if ((v9 & 7) != 0)
    {
      v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
    if (v7)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
    if ((IsValid & 1) != 0)
    {
      v7 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
        v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)v6);
      else
        v1 = 0;
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_23014363C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeCopyTypeName(uint64_t a1)
{
  char IsValid;
  unsigned int *v3;
  unsigned int v4;
  uint64_t TypeName;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
    goto LABEL_9;
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&TypeName, (uint64_t *)(a1 + 32), (_DWORD *)(a1 + 40));
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&TypeName);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  if ((IsValid & 1) != 0)
    TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a1 + 24));
  else
LABEL_9:
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(&TypeName);
}

void sub_23014372C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeGetVariability(uint64_t result)
{
  uint64_t v1;
  char IsValid;
  unsigned int *v3;
  unsigned int v4;
  int Variability;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v1 = result;
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v6, (uint64_t *)(result + 32), (_DWORD *)(result + 40));
    IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6);
    if ((v9 & 7) != 0)
    {
      v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
    if (v7)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
    if ((IsValid & 1) != 0)
    {
      Variability = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetVariability((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v1 + 24));
      if (Variability == 2)
        return 2;
      else
        return Variability == 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_2301437F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeCopyColorSpace(uint64_t result)
{
  uint64_t v1;
  char IsValid;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    v1 = result;
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v7, (uint64_t *)(result + 32), (_DWORD *)(result + 40));
    IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7);
    if ((v10 & 7) != 0)
    {
      v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
    if (v8)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
    if ((IsValid & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v1 + 24));
      result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v7);
      if ((v7 & 7) != 0)
      {
        v5 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_2301438D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  if ((a9 & 7) != 0)
  {
    v9 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrUsdAttributeSetColorSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char IsValid;
  unsigned int *v5;
  unsigned int v6;
  std::recursive_mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1)
    v2 = a1 + 24;
  else
    v2 = 0;
  if (a1 && a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v8, (uint64_t *)(v2 + 8), (_DWORD *)(v2 + 16));
    IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8);
    if ((v11 & 7) != 0)
    {
      v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
    if (v9)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
    if ((IsValid & 1) != 0)
    {
      v7 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>((realityio::UsdLayerMutexTracker *)v2);
      std::recursive_mutex::lock(v7);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::SetColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
      std::recursive_mutex::unlock(v7);
    }
  }
}

void sub_2301439DC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeHasColorSpace(uint64_t result)
{
  uint64_t v1;
  char IsValid;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (result)
  {
    v1 = result;
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v5, (uint64_t *)(result + 32), (_DWORD *)(result + 40));
    IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5);
    if ((v8 & 7) != 0)
    {
      v3 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
    if (v6)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
    if ((IsValid & 1) != 0)
      return pxrInternal__aapl__pxrReserved__::UsdAttribute::HasColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v1 + 24));
    else
      return 0;
  }
  return result;
}

void sub_230143AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeClearColorSpace(uint64_t a1)
{
  char IsValid;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v5;
  std::recursive_mutex *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v9, (uint64_t *)(a1 + 32), (_DWORD *)(a1 + 40));
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9);
  if ((v12 & 7) != 0)
  {
    v3 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  if ((IsValid & 1) == 0)
    return 0;
  v5 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a1 + 24);
  v6 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>((realityio::UsdLayerMutexTracker *)(a1 + 24));
  std::recursive_mutex::lock(v6);
  v7 = pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearColorSpace(v5);
  std::recursive_mutex::unlock(v6);
  return v7;
}

void sub_230143B80(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeHasValue(uint64_t result)
{
  uint64_t v1;
  char IsValid;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (result)
  {
    v1 = result;
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v5, (uint64_t *)(result + 32), (_DWORD *)(result + 40));
    IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5);
    if ((v8 & 7) != 0)
    {
      v3 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
    if (v6)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
    if ((IsValid & 1) != 0)
      return pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v1 + 24));
    else
      return 0;
  }
  return result;
}

void sub_230143C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeHasAuthoredValue(uint64_t a1)
{
  if (a1)
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a1 + 24));
  else
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue(0);
}

void RIOPxrUsdAttributeBlock(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  std::recursive_mutex *v2;

  if (a1)
    v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v1 = 0;
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(v1);
  std::recursive_mutex::lock(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Block(v1);
  std::recursive_mutex::unlock(v2);
}

void sub_230143CB0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeClear(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  std::recursive_mutex *v2;
  uint64_t v3;

  if (a1)
    v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v1 = 0;
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(v1);
  std::recursive_mutex::lock(v2);
  v3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear(v1);
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_230143D10(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void RIOPxrUsdAttributeClearAll(uint64_t a1)
{
  uint64_t v1;
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD **v5;
  BOOL v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  char v33[8];
  unsigned int *v34;
  char v35[8];
  uint64_t v36;
  uint64_t v37;
  char v38[8];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD **v42;
  _QWORD *v43[2];
  uint64_t v44;
  uint64_t v45;
  _DWORD v46[10];
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (a1)
    v1 = a1 + 24;
  else
    v1 = 0;
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>((realityio::UsdLayerMutexTracker *)v1);
  std::recursive_mutex::lock(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v1);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAllAuthoredMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)v1);
  v3 = v42;
  if (v42 != v43)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 4));
      v4 = (_QWORD *)v3[1];
      if (v4)
      {
        do
        {
          v5 = (_QWORD **)v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD **)v3[2];
          v6 = *v5 == v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
    }
    while (v5 != v43);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v38, (uint64_t *)(v1 + 8), (_DWORD *)(v1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v38);
  v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v36);
  EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
  v9 = EditTarget;
  v10 = EditTarget[1];
  v44 = *EditTarget;
  v45 = v10;
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::_Data(v46, (uint64_t)(EditTarget + 2));
  v47 = *(_OWORD *)(v9 + 7);
  v13 = v37;
  if (v37)
  {
    v14 = (unsigned int *)(v37 + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v36 = v44;
  v37 = v45;
  if (v45)
  {
    v17 = (unsigned int *)(v45 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v1, &v34);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPropertySpecForScenePath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)&v44, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v34);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
  v19 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v36);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v35);
  MEMORY[0x2348B2890](&v34, v19, v33);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v33);
  pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v36);
  v20 = v34;
  v32 = v34;
  if (v34)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::RemovePropertyIfHasOnlyRequiredFields();
  MEMORY[0x2348B2704](&v32);
  MEMORY[0x2348B2704](&v34);
  MEMORY[0x2348B2704](v35);
  v22 = v37;
  if (v37)
  {
    v23 = (unsigned int *)(v37 + 8);
    do
    {
      v24 = __ldxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)v46);
  v26 = v45;
  if (v45)
  {
    v27 = (unsigned int *)(v45 + 8);
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  if ((v41 & 7) != 0)
  {
    v30 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
  if (v39)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v42, v43[0]);
  std::recursive_mutex::unlock(v2);
}

void sub_230144018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

CFMutableArrayRef RIOPxrUsdAttributeCopyTimeSamples(uint64_t a1)
{
  if (a1)
    pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  return CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
}

void sub_23014422C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdAttributeAddConnection(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  std::recursive_mutex *v2;
  uint64_t v3;

  if (a1)
    v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v1 = 0;
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(v1);
  std::recursive_mutex::lock(v2);
  v3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection();
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_2301442B0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeRemoveConnection(uint64_t a1, uint64_t a2)
{
  realityio::UsdLayerMutexTracker *v3;
  std::recursive_mutex *v4;
  uint64_t v5;

  if (a1)
    v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v3 = 0;
  v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(v3);
  std::recursive_mutex::lock(v4);
  v5 = pxrInternal__aapl__pxrReserved__::UsdAttribute::RemoveConnection(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_230144320(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeSetConnections(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v5;
  _DWORD *ValueAtIndex;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  realityio::UsdLayerMutexTracker *v10;
  std::recursive_mutex *v11;
  uint64_t v12;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  void **v17;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v5 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
      v7 = ValueAtIndex + 4;
      v8 = v15;
      if ((unint64_t)v15 >= v16)
      {
        v9 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v14, v7);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v15, v7);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8 + 1, ValueAtIndex + 5);
        v9 = v8 + 2;
      }
      v15 = v9;
      ++v5;
    }
    while (Count != v5);
  }
  if (a1)
    v10 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v10 = 0;
  v11 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(v10);
  std::recursive_mutex::lock(v11);
  v12 = pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections();
  std::recursive_mutex::unlock(v11);
  v17 = (void **)&v14;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  return v12;
}

void sub_230144428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  std::recursive_mutex *v12;

  std::recursive_mutex::unlock(v12);
  a12 = &a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeClearConnections(uint64_t a1)
{
  realityio::UsdLayerMutexTracker *v1;
  std::recursive_mutex *v2;
  uint64_t v3;

  if (a1)
    v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  else
    v1 = 0;
  v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(v1);
  std::recursive_mutex::lock(v2);
  v3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearConnections(v1);
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_2301444A8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeCopyConnections()
{
  _QWORD v1[3];
  void **v2;

  memset(v1, 0, sizeof(v1));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
  v2 = (void **)v1;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v2);
  return 0;
}

void sub_2301445B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeHasAuthoredConnections(uint64_t a1)
{
  if (a1)
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a1 + 24));
  else
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections(0);
}

uint64_t realityio::TextEntityBuilder::kOutputName(realityio::TextEntityBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "text_entity");
    realityio::TextEntityBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::TextEntityBuilder::kOutputName(void)::kOutputName;
}

void sub_230144670(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::TextEntityBuilder *realityio::TextEntityBuilder::TextEntityBuilder(realityio::TextEntityBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "TextEntityBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTextEntityBuilderIdentifier);
  realityio::generateTextPrimDirtyStageSubscription(&v12);
  v20[0] = &off_24FDFA030;
  v21 = v20;
  v18[0] = &off_24FDFA0B0;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDF9FB8;
  *((_QWORD *)this + 35) = 0;
  return this;
}

void sub_23014483C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

_QWORD *realityio::TextEntityBuilder::run(_QWORD *this, realityio::Inputs *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  realityio::TextEntityBuilder *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  char *PrimPath;
  unsigned int *v10;
  unsigned int v11;
  realityio *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t Text;
  uint64_t v22;
  _BYTE v23[8];
  uint64_t v24;
  __int128 buf;
  uint64_t *v26;
  realityio::TextEntityBuilder *p_buf;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!this[35])
  {
    v3 = this;
    v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)this);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v4, (uint64_t)v23);
    if (v23[0])
    {
      v22 = v24;
      if (v24)
      {
        RERetain();
        v5 = *((_QWORD *)a2 + 6);
        *(_QWORD *)&buf = &off_24FDFA130;
        *((_QWORD *)&buf + 1) = v3;
        v26 = &v22;
        p_buf = (realityio::TextEntityBuilder *)&buf;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 16))(v5, &buf);
        v6 = p_buf;
        if (p_buf == (realityio::TextEntityBuilder *)&buf)
        {
          v7 = 4;
          v6 = (realityio::TextEntityBuilder *)&buf;
        }
        else
        {
          if (!p_buf)
          {
LABEL_20:
            v15 = v3[2];
            v14 = (std::__shared_weak_count *)v3[3];
            *(_QWORD *)&buf = v15;
            *((_QWORD *)&buf + 1) = v14;
            if (v14)
            {
              p_shared_owners = (unint64_t *)&v14->__shared_owners_;
              do
                v17 = __ldxr(p_shared_owners);
              while (__stxr(v17 + 1, p_shared_owners));
            }
            v18 = (__int128 *)realityio::TextEntityBuilder::kOutputName(v6);
            realityio::Outputs::storeValue<realityio::WrappedRERef<REEntity *> &>(v15, v18, v3 + 35);
            if (v14)
            {
              v19 = (unint64_t *)&v14->__shared_owners_;
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v20 - 1, v19));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
LABEL_16:
            realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v22);
            return (_QWORD *)realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v23);
          }
          v7 = 5;
        }
        v6 = (realityio::TextEntityBuilder *)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 8 * v7))();
        goto LABEL_20;
      }
    }
    else
    {
      v22 = 0;
    }
    v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, (realityio::Inputs *)((char *)a2 + 32));
    PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&buf);
    if ((p_buf & 7) != 0)
    {
      v10 = (unsigned int *)((unint64_t)p_buf & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
    v12 = (realityio *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
      v12 = (realityio *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
    v13 = *(id *)(realityio::logObjects(v12) + 24);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = Text;
      _os_log_error_impl(&dword_22FF26000, v13, OS_LOG_TYPE_ERROR, "Unable to create text entity at path (%s) because the parent entity does not exist.\n", (uint8_t *)&buf, 0xCu);
    }

    goto LABEL_16;
  }
  return this;
}

void sub_230144B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a10);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *realityio::TextEntityBuilder::clear(realityio::TextEntityBuilder *this, realityio::Inputs *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void **v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t (**v14)();
  uint64_t (**v16)();
  realityio::TextEntityBuilder *v17;
  uint64_t (***v18)();
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v16 = (uint64_t (**)())v5;
  v17 = (realityio::TextEntityBuilder *)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (const void **)realityio::TextEntityBuilder::kOutputName(this);
  std::mutex::lock((std::mutex *)(v5 + 64));
  if (v5 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v5 + 40, v8))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v5 + 40), v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v5, (unsigned __int8 *)v8);
  std::mutex::unlock((std::mutex *)(v5 + 64));
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v11 = *((_QWORD *)a2 + 6);
  v16 = &off_24FDFA1B0;
  v17 = this;
  v18 = &v16;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v11 + 16))(v11, &v16);
  v12 = v18;
  if (v18 == &v16)
  {
    v13 = 4;
    v12 = &v16;
  }
  else
  {
    if (!v18)
      goto LABEL_16;
    v13 = 5;
  }
  (*v12)[v13]();
LABEL_16:
  v16 = 0;
  v14 = (uint64_t (**)())*((_QWORD *)this + 35);
  if (v14)
  {
    *((_QWORD *)this + 35) = 0;
    v16 = v14;
  }
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v16);
}

void sub_230144D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::TextEntityBuilder::~TextEntityBuilder(realityio::TextEntityBuilder *this)
{
  realityio::TextEntityBuilder::~TextEntityBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::TextEntityBuilder *v2;
  uint64_t v3;
  realityio::TextEntityBuilder *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_QWORD *)this = &off_24FDF9FB8;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)this + 35);
  *(_QWORD *)this = off_24FDE1CA0;
  v2 = (realityio::TextEntityBuilder *)*((_QWORD *)this + 34);
  if (v2 == (realityio::TextEntityBuilder *)((char *)this + 248))
  {
    v3 = 4;
    v2 = (realityio::TextEntityBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (realityio::TextEntityBuilder *)*((_QWORD *)this + 30);
  if (v4 == (realityio::TextEntityBuilder *)((char *)this + 216))
  {
    v5 = 4;
    v4 = (realityio::TextEntityBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v6 = *((_QWORD *)this + 24);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = *((_QWORD *)this + 23);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFA030;
  return result;
}

void std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFA030;
}

void std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_230145048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFA0B0;
  return result;
}

void std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFA0B0;
}

void std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::TextEntityBuilder::kOutputName((realityio::TextEntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 35, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2301452F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDFA130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDFA130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = REEntityCreate();
  RENetworkComponentGetComponentType();
  v8[0] = &off_24FDEEC60;
  v9 = v8;
  v7 = REEntityGetOrAddComponentByClass();
  if (!v9)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v9 + 48))(v9, &v7);
  RENetworkMarkComponentDirty();
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_7;
    v4 = 5;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
LABEL_7:
  v8[0] = v2;
  if (v2)
    RERetain();
  v5 = *(_QWORD *)(v1 + 280);
  if (v5 != v2)
  {
    *(_QWORD *)(v1 + 280) = v2;
    v8[0] = v5;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v8);
  RERelease();
  REEntitySetParent();
  return REEntitySetName();
}

void sub_2301455A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFA1B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFA1B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 280);
  if (result)
    return REEntitySetParent();
  return result;
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t realityio::LiveSceneManager::LiveSceneManager(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  dispatch_queue_t v13;
  void *v14;
  realityio *v15;
  NSObject *v16;
  uint8_t buf[16];

  *(_QWORD *)a1 = &off_24FDFA230;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = *a4;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(a1 + 32));
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  MEMORY[0x2348B4CCC]();
  MEMORY[0x2348B4CCC](a1 + 152);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a6;
  *(_QWORD *)(a1 + 240) = a7;
  *(_QWORD *)(a1 + 248) = a5;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = a8;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  *(_QWORD *)(a1 + 328) = 850045863;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  v13 = dispatch_queue_create("com.apple.realityio.live-scene-update-queue", 0);
  v14 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v13;

  if (*(_DWORD *)(a1 + 288) == 1)
  {
    v16 = *(NSObject **)realityio::logObjects(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22FF26000, v16, OS_LOG_TYPE_DEFAULT, "ImportSession using TargetGeneration for additional builder dirty propagation \"RealityIO/TargetDirtying\" FeatureFlag", buf, 2u);
    }
  }
  return a1;
}

void sub_230145874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, realityio::LiveSceneManager::UpdateFramingInfo *a9, std::mutex *a10, uint64_t a11, uint64_t *a12, uint64_t a13, std::recursive_mutex *a14, uint64_t a15)
{
  uint64_t v15;
  unsigned int **v16;
  realityio::LiveSceneManager::UpdateFramingInfo *v17;
  uint64_t v18;
  std::recursive_mutex *v19;
  uint64_t v20;
  std::mutex *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  realityio::LiveSceneManager::UpdateFramingInfo *v32;

  v32 = v17;
  v24 = v20;
  std::vector<realityio::LiveSceneManager::AssetRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v23);
  v26 = *a12;
  *a12 = 0;
  if (v26)
    std::default_delete<realityio::LiveSceneManager::LiveSceneUpdateContext>::operator()[abi:ne180100](v26);
  realityio::LiveSceneManager::UpdateFramingInfo::~UpdateFramingInfo(v32);
  std::mutex::~mutex(v21);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy(v18, *(_QWORD **)(v15 + 312));
  a15 = a13;
  std::vector<realityio::LiveSceneManager::CompatibilityFault>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);

  std::recursive_mutex::~recursive_mutex(v19);
  std::recursive_mutex::~recursive_mutex(a14);
  v27 = *(uint64_t **)(v15 + 80);
  if (v27 == v22 + 2)
  {
    v28 = 4;
    v27 = v22 + 2;
  }
  else
  {
    if (!v27)
      goto LABEL_8;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_8:
  v29 = *(_QWORD *)(v15 + 48);
  *(_QWORD *)(v15 + 48) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *v22;
  *v22 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v16);
  v31 = *(std::__shared_weak_count **)(v15 + 16);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneManager::UpdateFramingInfo::~UpdateFramingInfo(realityio::LiveSceneManager::UpdateFramingInfo *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  realityio::LiveSceneManager::UpdateFramingInfo *v5;
  uint64_t v6;

  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (realityio::LiveSceneManager::UpdateFramingInfo *)*((_QWORD *)this + 3);
  if (v5 == this)
  {
    v6 = 4;
    v5 = this;
  }
  else
  {
    if (!v5)
      return;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
}

void realityio::LiveSceneManager::~LiveSceneManager(realityio::LiveSceneManager *this)
{
  uint64_t v2;
  uint64_t v3;
  realityio::LiveSceneManager *v4;
  uint64_t v5;
  realityio::LiveSceneManager *v6;
  uint64_t v7;
  realityio::LiveSceneManager *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void **v13;

  *(_QWORD *)this = &off_24FDFA230;
  v2 = *((_QWORD *)this + 37);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v13 = (void **)((char *)this + 504);
  std::vector<realityio::LiveSceneManager::AssetRecord>::__destroy_vector::operator()[abi:ne180100](&v13);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 488);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 472);
  v3 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v3)
    std::default_delete<realityio::LiveSceneManager::LiveSceneUpdateContext>::operator()[abi:ne180100](v3);
  v4 = (realityio::LiveSceneManager *)*((_QWORD *)this + 56);
  if (v4 == (realityio::LiveSceneManager *)((char *)this + 424))
  {
    v5 = 4;
    v4 = (realityio::LiveSceneManager *)((char *)this + 424);
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_10:
  v6 = (realityio::LiveSceneManager *)*((_QWORD *)this + 52);
  if (v6 == (realityio::LiveSceneManager *)((char *)this + 392))
  {
    v7 = 4;
    v6 = (realityio::LiveSceneManager *)((char *)this + 392);
  }
  else
  {
    if (!v6)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_15:
  std::mutex::~mutex((std::mutex *)((char *)this + 328));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy((uint64_t)this + 304, *((_QWORD **)this + 39));
  v13 = (void **)((char *)this + 256);
  std::vector<realityio::LiveSceneManager::CompatibilityFault>::__destroy_vector::operator()[abi:ne180100](&v13);

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 152));
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 88));
  v8 = (realityio::LiveSceneManager *)*((_QWORD *)this + 10);
  if (v8 == (realityio::LiveSceneManager *)((char *)this + 56))
  {
    v9 = 4;
    v8 = (realityio::LiveSceneManager *)((char *)this + 56);
  }
  else
  {
    if (!v8)
      goto LABEL_20;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_20:
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)this + 4);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

{
  realityio::LiveSceneManager::~LiveSceneManager(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::LiveSceneManager::performBlockLaterOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 464);
  if (v2)
    return std::vector<std::function<void ()(void)>>::push_back[abi:ne180100]((uint64_t *)(v2 + 24), a2);
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
}

uint64_t std::vector<std::function<void ()(void)>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[32 * v10];
    v18 = &v14[32 * v13];
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
    v17 = v16 + 32;
    std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = (uint64_t)std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(&v15);
  }
  else
  {
    result = std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100](*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_230145CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t realityio::LiveSceneManager::performBlockSyncOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 472);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
}

uint64_t realityio::LiveSceneManager::enableEntityOnCompletion(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(uint64_t **)(a1 + 464);
  v3 = (uint64_t *)v2[14];
  if ((unint64_t)v3 >= v2[15])
  {
    result = std::vector<realityio::WrappedRERef<REEntity *>>::__push_back_slow_path<realityio::WrappedRERef<REEntity *> const&>(v2 + 13, a2);
  }
  else
  {
    v4 = *a2;
    *v3 = *a2;
    if (v4)
      RERetain();
    result = (uint64_t)(v3 + 1);
    v2[14] = (uint64_t)(v3 + 1);
  }
  v2[14] = result;
  return result;
}

void sub_230145D8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 112) = v2;
  _Unwind_Resume(a1);
}

void realityio::LiveSceneManager::queueForDeferredAssetLoad(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15[2];
  std::__shared_weak_count *v16;

  v4 = (std::__shared_weak_count *)operator new(0x40uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFA760;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF09F0;
  v4[1].__shared_owners_ = 0;
  v4[2].__vftable = 0;
  v4[2].__shared_owners_ = 0;
  v4[1].__shared_weak_owners_ = 0;
  v15[1] = (uint64_t)&v4[1];
  v16 = v4;
  v15[0] = *a2;
  realityio::WrappedRERef<REAsset *>::operator=(&v4[1].__shared_owners_, v15);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 464) + 128);
  *(_QWORD *)&v14 = v4 + 1;
  *((_QWORD *)&v14 + 1) = v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  realityio::AssetLoadTracker::add(v6, &v14);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_230145EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneManager::performLiveSceneUpdateMaybeAsync(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const void *v9;
  realityio *v10;
  NSObject *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  dispatch_semaphore_t v24;
  void *v25;
  unint64_t v26;
  dispatch_semaphore_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  dispatch_semaphore_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  NSObject *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD v49[6];
  std::__shared_weak_count *v50;
  char v51;
  uint8_t buf[8];
  std::__shared_weak_count *v53;
  const void *v54;
  const void *v55[2];
  std::__shared_weak_count *v56;
  uint64_t v57;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 16)
    && REEngineGetServiceLocator()
    && MEMORY[0x2348B1264]())
  {
    REAssetManagerGetEngineQueue();
    v4 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = *(unsigned __int8 *)(a2 + 64);
  if (*(_BYTE *)(a2 + 64))
    dispatch_assert_queue_V2(v4);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  v55[1] = *(const void **)(a1 + 8);
  if (!v6 || (v7 = std::__shared_weak_count::lock(v6), (v56 = v7) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v55[0] = (const void *)(*(_QWORD *)(a1 + 24) - 16);
  CFRetain(v55[0]);
  v9 = *(const void **)(*(_QWORD *)(a1 + 24) + 8);
  v54 = v9;
  if (v9)
    CFRetain(v9);
  std::mutex::lock((std::mutex *)(a1 + 328));
  if (*(_QWORD *)(a1 + 464))
  {
    v11 = *(NSObject **)realityio::logObjects(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22FF26000, v11, OS_LOG_TYPE_DEFAULT, "Attempting to start a live update while update already in progress -- queuing another.", buf, 2u);
    }
    *(_BYTE *)(a1 + 457) = 1;
    std::mutex::unlock((std::mutex *)(a1 + 328));
    goto LABEL_59;
  }
  std::function<void ()(void)>::operator=((_QWORD *)(a1 + 392), a2);
  std::function<void ()(void)>::operator=((_QWORD *)(a1 + 424), a2 + 32);
  *(_WORD *)(a1 + 456) = *(_WORD *)(a2 + 64);
  v12 = operator new(0x88uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_24FDFA7B0;
  v12[3] = &off_24FDFA800;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  *((_OWORD *)v12 + 5) = 0u;
  *((_OWORD *)v12 + 6) = 0u;
  *((_OWORD *)v12 + 7) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  MEMORY[0x2348B4CCC](v12 + 4);
  *((_OWORD *)v12 + 6) = 0u;
  *((_OWORD *)v12 + 7) = 0u;
  v12[3] = &off_24FDFA2B8;
  v12[16] = a1;
  v13 = *(std::__shared_weak_count **)(a1 + 496);
  *(_QWORD *)(a1 + 488) = v12 + 3;
  *(_QWORD *)(a1 + 496) = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = operator new();
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 488);
  v19 = *(std::__shared_weak_count **)(a1 + 496);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_QWORD *)(v16 + 64) = 0;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_QWORD *)(v16 + 72) = &off_24FDFA818;
  *(_QWORD *)(v16 + 96) = v16 + 72;
  *(_QWORD *)(v16 + 104) = 0;
  *(_QWORD *)(v16 + 112) = 0;
  *(_QWORD *)(v16 + 120) = 0;
  *(_QWORD *)(v16 + 128) = v18;
  *(_QWORD *)(v16 + 136) = v19;
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v24 = dispatch_semaphore_create(0);
    v25 = *(void **)(v17 + 16);
    *(_QWORD *)(v17 + 16) = v24;

    do
      v26 = __ldaxr(v22);
    while (__stlxr(v26 - 1, v22));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    v27 = dispatch_semaphore_create(0);
    v28 = *(void **)(v17 + 16);
    *(_QWORD *)(v17 + 16) = v27;

  }
  v29 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = v17;
  if (v29)
    std::default_delete<realityio::LiveSceneManager::LiveSceneUpdateContext>::operator()[abi:ne180100](v29);
  realityio::WrappedCFRef<RIOImportSession *>::operator=((const void **)v17, v55);
  realityio::WrappedCFRef<RIOImportSession *>::operator=((const void **)(*(_QWORD *)(a1 + 464) + 8), &v54);
  std::mutex::unlock((std::mutex *)(a1 + 328));
  *(_QWORD *)buf = 0;
  v53 = 0;
  v30 = operator new();
  v31 = v4;
  if (v5)
  {
    *(_QWORD *)v30 = &off_24FDE85C8;
    *(_QWORD *)(v30 + 8) = v31;
    *(_QWORD *)(v30 + 16) = 0;
    *(_QWORD *)(v30 + 24) = 850045863;
    *(_OWORD *)(v30 + 32) = 0u;
    *(_OWORD *)(v30 + 48) = 0u;
    *(_OWORD *)(v30 + 64) = 0u;
    *(_OWORD *)(v30 + 80) = 0u;
    *(_OWORD *)(v30 + 96) = 0u;
    *(_OWORD *)(v30 + 112) = 0u;
    *(_OWORD *)(v30 + 124) = 0u;
    v32 = v31;
    v33 = dispatch_semaphore_create(0);
    v34 = *(void **)(v30 + 16);
    *(_QWORD *)(v30 + 16) = v33;

    v35 = (std::__shared_weak_count *)operator new();
    v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFA898;
    v35->__shared_owners_ = 0;
    v35->__shared_weak_owners_ = 0;
    v35[1].__vftable = (std::__shared_weak_count_vtbl *)v30;
  }
  else
  {
    *(_QWORD *)v30 = &off_24FDE8578;
    *(_QWORD *)(v30 + 8) = v31;
    v57 = v30;
    v35 = (std::__shared_weak_count *)operator new();
    v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFA910;
    v35->__shared_owners_ = 0;
    v35->__shared_weak_owners_ = 0;
    v35[1].__vftable = (std::__shared_weak_count_vtbl *)v30;
    v57 = 0;
    std::unique_ptr<realityio::AsyncUpdateEngineQueueManager>::reset[abi:ne180100](&v57);
  }
  *(_QWORD *)buf = v30;
  v53 = v35;
  v36 = *(NSObject **)(a1 + 216);
  v49[0] = MEMORY[0x24BDAC760];
  v49[1] = 3321888768;
  v49[2] = ___ZN9realityio16LiveSceneManager32performLiveSceneUpdateMaybeAsyncENS0_17UpdateFramingInfoE_block_invoke;
  v49[3] = &__block_descriptor_64_ea8_32c99_ZTSKZN9realityio16LiveSceneManager32performLiveSceneUpdateMaybeAsyncENS0_17UpdateFramingInfoEE3__0_e5_v8__0l;
  v37 = (unint64_t *)&v35->__shared_owners_;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
  v49[4] = a1;
  v49[5] = v30;
  v50 = v35;
  do
    v39 = __ldxr(v37);
  while (__stxr(v39 + 1, v37));
  v51 = v5;
  dispatch_async(v36, v49);
  do
    v40 = __ldaxr(v37);
  while (__stlxr(v40 - 1, v37));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    if (!v5)
      goto LABEL_48;
    goto LABEL_47;
  }
  if (v5)
LABEL_47:
    realityio::SyncUpdateEngineQueueManager::yieldEngineQueueExecution(*(realityio::SyncUpdateEngineQueueManager **)buf);
LABEL_48:
  v41 = v50;
  if (v50)
  {
    v42 = (unint64_t *)&v50->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v53;
  if (v53)
  {
    v45 = (unint64_t *)&v53->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v8 = v56;
LABEL_59:
  realityio::WrappedCFRef<void const*>::~WrappedCFRef(&v54);
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef(v55);
  if (v8)
  {
    v47 = (unint64_t *)&v8->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

}

void sub_23014644C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  va_list va1;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, const void *);
  std::unique_ptr<realityio::AsyncUpdateEngineQueueManager>::reset[abi:ne180100]((uint64_t *)(v10 - 72));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  realityio::WrappedCFRef<void const*>::~WrappedCFRef((const void **)va1);
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef((const void **)va2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v10 - 88);

  _Unwind_Resume(a1);
}

const void **realityio::WrappedCFRef<RIOImportSession *>::operator=(const void **a1, const void **a2)
{
  const void *v3;
  const void *v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      CFRelease(v3);
      v4 = *a2;
    }
    *a1 = v4;
    if (v4)
      CFRetain(v4);
  }
  return a1;
}

void ___ZN9realityio16LiveSceneManager32performLiveSceneUpdateMaybeAsyncENS0_17UpdateFramingInfoE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8[2];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  v8[0] = *(_QWORD *)(a1 + 40);
  v8[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  realityio::LiveSceneManager::updateLiveSceneImpl(v2, v8);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (*(_BYTE *)(a1 + 56))
    realityio::SyncUpdateEngineQueueManager::stopYieldEngineQueueExecution(*(realityio::SyncUpdateEngineQueueManager **)(a1 + 40));
}

void sub_2301465F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, __int128 a16, uint64_t a17)
{
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  char *exception_ptr;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v19 = v17;
  if (v19)
  {
    v21 = v19;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(exception_object);
    a9 = MEMORY[0x24BEE9D40] + 16;
    v25 = *((_QWORD *)exception_ptr + 5);
    v26 = *(_OWORD *)(exception_ptr + 24);
    a10 = *(_OWORD *)(exception_ptr + 8);
    a11 = v26;
    a12 = v25;
    __p = 0;
    a14 = 0;
    a15 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *((const void **)exception_ptr + 6), *((_QWORD *)exception_ptr + 7), (uint64_t)(*((_QWORD *)exception_ptr + 7) - *((_QWORD *)exception_ptr + 6)) >> 3);
    if (exception_ptr[95] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&a16, *((const std::string::value_type **)exception_ptr + 9), *((_QWORD *)exception_ptr + 10));
    }
    else
    {
      v27 = *(_OWORD *)(exception_ptr + 72);
      a17 = *((_QWORD *)exception_ptr + 11);
      a16 = v27;
    }
    __cxa_begin_catch(exception_object);
    pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames();
    MEMORY[0x2348B1F18](&a9);
    __cxa_end_catch();
    JUMPOUT(0x2301465D0);
  }
  _Unwind_Resume(exception_object);
}

void sub_230146720()
{
  JUMPOUT(0x230146734);
}

uint64_t __copy_helper_block_ea8_32c99_ZTSKZN9realityio16LiveSceneManager32performLiveSceneUpdateMaybeAsyncENS0_17UpdateFramingInfoEE3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  return result;
}

uint64_t __destroy_helper_block_ea8_32c99_ZTSKZN9realityio16LiveSceneManager32performLiveSceneUpdateMaybeAsyncENS0_17UpdateFramingInfoEE3__0(uint64_t a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 40);
}

_QWORD *realityio::LiveSceneManager::updateLiveScene(realityio::LiveSceneManager *this, unsigned __int8 a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  __int16 v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15[0] = &off_24FDFA988;
  v15[1] = this;
  v16 = v15;
  v17[0] = &off_24FDFAA08;
  v18 = v17;
  v19 = a2;
  v10[0] = &off_24FDFA988;
  v10[1] = this;
  v13 = v12;
  v11 = v10;
  v12[0] = &off_24FDFAA08;
  v14 = a2;
  realityio::LiveSceneManager::performLiveSceneUpdateMaybeAsync((uint64_t)this, (uint64_t)v10);
  v2 = v13;
  if (v13 == v12)
  {
    v3 = 4;
    v2 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = v11;
  if (v11 == v10)
  {
    v5 = 4;
    v4 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = v18;
  if (v18 == v17)
  {
    v7 = 4;
    v6 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  result = v16;
  if (v16 == v15)
  {
    v9 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2301468CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  realityio::LiveSceneManager::UpdateFramingInfo::~UpdateFramingInfo((realityio::LiveSceneManager::UpdateFramingInfo *)va);
  realityio::LiveSceneManager::UpdateFramingInfo::~UpdateFramingInfo((realityio::LiveSceneManager::UpdateFramingInfo *)va1);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneManager::updateAsset(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, unsigned __int8 a3)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  char IsValid;
  unsigned int *v8;
  unsigned int v9;
  realityio *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t Text;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  __int16 v30;
  __int128 buf;
  uint64_t v32;
  uint64_t p_buf;
  _QWORD v34[3];
  _QWORD *v35;
  __int16 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, a2);
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&buf);
  if ((p_buf & 7) != 0)
  {
    v8 = (unsigned int *)(p_buf & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
  v10 = (realityio *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
    v10 = (realityio *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
  if ((IsValid & 1) == 0)
  {
    v12 = *(id *)(realityio::logObjects(v10) + 16);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = Text;
      _os_log_impl(&dword_22FF26000, v12, OS_LOG_TYPE_DEFAULT, "Invalid Prim for updateAsset \"%s\"", (uint8_t *)&buf, 0xCu);
    }

    return;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, (_DWORD *)a2 + 1);
  v25 = a1;
  p_buf = 0;
  *(_QWORD *)&buf = &off_24FDFAA88;
  DWORD2(buf) = v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  HIDWORD(buf) = v24;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  v32 = v25;
  p_buf = (uint64_t)&buf;
  v35 = 0;
  v36 = a3;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  v11 = p_buf;
  if (!p_buf)
    goto LABEL_10;
  if ((__int128 *)p_buf != &buf)
  {
    v11 = (*(uint64_t (**)(void))(*(_QWORD *)p_buf + 16))();
LABEL_10:
    v27 = (_BYTE *)v11;
    goto LABEL_15;
  }
  v27 = v26;
  (*(void (**)(uint64_t, uint64_t))(buf + 24))((uint64_t)&buf, (uint64_t)v26);
LABEL_15:
  v14 = v34;
  v15 = v28;
  v16 = (uint64_t)v35;
  if (!v35)
  {
LABEL_18:
    v29 = (_BYTE *)v16;
    goto LABEL_20;
  }
  if (v35 != v34)
  {
    v16 = (*(uint64_t (**)(void))(*v35 + 16))();
    goto LABEL_18;
  }
  v29 = v28;
  (*(void (**)(_QWORD *, _BYTE *))(v34[0] + 24))(v34, v28);
LABEL_20:
  v30 = v36;
  realityio::LiveSceneManager::performLiveSceneUpdateMaybeAsync(a1, (uint64_t)v26);
  if (v29 == v28)
  {
    v17 = 4;
  }
  else
  {
    if (!v29)
      goto LABEL_25;
    v17 = 5;
    v15 = v29;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v17))(v15);
LABEL_25:
  v18 = v27;
  if (v27 == v26)
  {
    v19 = 4;
    v18 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_30;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_30:
  if (v35 == v34)
  {
    v20 = 4;
    goto LABEL_34;
  }
  if (v35)
  {
    v20 = 5;
    v14 = v35;
LABEL_34:
    (*(void (**)(_QWORD *))(*v14 + 8 * v20))(v14);
  }
  v21 = (__int128 *)p_buf;
  if ((__int128 *)p_buf == &buf)
  {
    v22 = 4;
    v21 = &buf;
  }
  else
  {
    if (!p_buf)
      return;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
}

void sub_230146BF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *realityio::LiveSceneManager::addAsset(uint64_t *a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  std::string __p;
  int v13;
  int v14;

  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(_QWORD *)(a3 + 8))
      goto LABEL_6;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a3 + 23))
LABEL_5:
    REAssetSetMetadataString();
LABEL_6:
  v11 = *a2;
  if (v11)
    RERetain();
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, a4 + 1);
  v8 = a1[64];
  if (v8 >= a1[65])
  {
    v9 = std::vector<realityio::LiveSceneManager::AssetRecord>::__push_back_slow_path<realityio::LiveSceneManager::AssetRecord>(a1 + 63, (uint64_t)&v11);
  }
  else
  {
    std::vector<realityio::LiveSceneManager::AssetRecord>::__construct_one_at_end[abi:ne180100]<realityio::LiveSceneManager::AssetRecord>((uint64_t)(a1 + 63), (uint64_t)&v11);
    v9 = v8 + 40;
  }
  a1[64] = v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v11);
}

void sub_230146DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneManager::AssetRecord::~AssetRecord(void **this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this);
}

void realityio::LiveSceneManager::visitDirtyPrim(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &)::$_0::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  realityio::DirtyStageSubscription *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v26;
  uint64_t v27;
  int v28;
  pxrInternal__aapl__pxrReserved__::UsdStage *v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t (***v32)();
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v41;
  uint64_t v42;
  int v43;
  pxrInternal__aapl__pxrReserved__::UsdStage *v44;
  uint64_t (***v45)();
  uint64_t v46;
  uint64_t (***v47)();
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  realityio *v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *v63;
  char v64;
  char v65;
  NSObject *v66;
  uint64_t Text;
  unint64_t v68;
  const char *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t (**v76)();
  uint64_t v77;
  uint64_t (***v78)();
  uint64_t (**v79)();
  uint64_t v80;
  uint64_t (***v81)();
  __int128 v82;
  __int128 *v83;
  _BYTE buf[22];
  _BYTE *v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *a2;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(*(_QWORD *)a1, v5, v5);
  if ((v6 & 1) == 0)
    return;
  if (!**(_BYTE **)(a1 + 8)
    || (pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) == 0
    && !pxrInternal__aapl__pxrReserved__::TfToken::operator==())
  {
    v20 = (realityio::DirtyStageSubscription *)(*a2)[1];
    v19 = (std::__shared_weak_count *)(*a2)[2];
    v75 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    if (**(_BYTE **)(a1 + 8) != ((int)realityio::DirtyStageSubscription::numberOfStageMetadataOnlyPredicates(v20) == (uint64_t)(*((_QWORD *)v20 + 2) - *((_QWORD *)v20 + 1)) >> 4))
      goto LABEL_119;
    if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 40)))
    {
      v28 = 1;
      goto LABEL_53;
    }
    v24 = *(_QWORD *)(v4 + 40);
    v23 = *(_QWORD *)(v4 + 48);
    v25 = *(_QWORD *)(a1 + 48);
    v26 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 24);
    if (v23)
      v27 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(v23 + 8));
    else
      v27 = 0;
    v29 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(v24 + 8));
    *(_QWORD *)buf = &off_24FDFA340;
    *(_QWORD *)&buf[8] = v24;
    v85 = buf;
    *(_QWORD *)&v82 = &off_24FDFA3D0;
    *((_QWORD *)&v82 + 1) = v24;
    v83 = &v82;
    v79 = &off_24FDFA450;
    v80 = v24;
    v81 = &v79;
    v76 = &off_24FDFA4D0;
    v77 = v24;
    v78 = &v76;
    v28 = realityio::DirtyStageSubscription::validate((uint64_t)v20, v26, v27, v29, v24 + 16, v25, (uint64_t)buf, (uint64_t)&v82, (uint64_t)&v79, (uint64_t)&v76);
    v30 = v78;
    if (v78 == &v76)
    {
      v31 = 4;
      v30 = &v76;
    }
    else
    {
      if (!v78)
        goto LABEL_38;
      v31 = 5;
    }
    (*v30)[v31]();
LABEL_38:
    v32 = v81;
    if (v81 == &v79)
    {
      v33 = 4;
      v32 = &v79;
    }
    else
    {
      if (!v81)
        goto LABEL_43;
      v33 = 5;
    }
    (*v32)[v33]();
LABEL_43:
    v34 = v83;
    if (v83 == &v82)
    {
      v35 = 4;
      v34 = &v82;
    }
    else
    {
      if (!v83)
        goto LABEL_48;
      v35 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_48:
    v36 = v85;
    if (v85 == buf)
    {
      v37 = 4;
      v36 = buf;
    }
    else
    {
      if (!v85)
        goto LABEL_53;
      v37 = 5;
    }
    (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_53:
    if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 40)))
    {
      v43 = 0;
      goto LABEL_78;
    }
    v39 = *(_QWORD *)(v4 + 40);
    v38 = *(_QWORD *)(v4 + 48);
    v40 = *(_QWORD *)(a1 + 48);
    v41 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 24);
    if (v38)
      v42 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(v38 + 8));
    else
      v42 = 0;
    v44 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(v39 + 8));
    *(_QWORD *)buf = &off_24FDFA560;
    *(_QWORD *)&buf[8] = v39;
    v85 = buf;
    *(_QWORD *)&v82 = &off_24FDFA5E0;
    *((_QWORD *)&v82 + 1) = v39;
    v83 = &v82;
    v79 = &off_24FDFA660;
    v80 = v39;
    v81 = &v79;
    v76 = &off_24FDFA6E0;
    v77 = v39;
    v78 = &v76;
    v43 = realityio::DirtyStageSubscription::validate((uint64_t)v20, v41, v42, v44, v39 + 16, v40, (uint64_t)buf, (uint64_t)&v82, (uint64_t)&v79, (uint64_t)&v76);
    v45 = v78;
    if (v78 == &v76)
    {
      v46 = 4;
      v45 = &v76;
    }
    else
    {
      if (!v78)
        goto LABEL_63;
      v46 = 5;
    }
    (*v45)[v46]();
LABEL_63:
    v47 = v81;
    if (v81 == &v79)
    {
      v48 = 4;
      v47 = &v79;
    }
    else
    {
      if (!v81)
        goto LABEL_68;
      v48 = 5;
    }
    (*v47)[v48]();
LABEL_68:
    v49 = v83;
    if (v83 == &v82)
    {
      v50 = 4;
      v49 = &v82;
    }
    else
    {
      if (!v83)
        goto LABEL_73;
      v50 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
LABEL_73:
    v51 = v85;
    if (v85 == buf)
    {
      v52 = 4;
      v51 = buf;
    }
    else
    {
      if (!v85)
        goto LABEL_78;
      v52 = 5;
    }
    (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_78:
    realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(*(realityio::BuilderDependencyDAG **)(v4 + 248), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::TfToken *)v5, &v82);
    if ((v28 | v43 ^ ((_QWORD)v82 != 0)) == 1)
    {
      if ((_QWORD)v82)
        v53 = 0;
      else
        v53 = v43;
      if (v53 == 1)
      {
        v54 = (*a2)[6];
        if (!v54)
          std::__throw_bad_function_call[abi:ne180100]();
        v55 = (realityio *)(*(_QWORD *(**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v54 + 48))(buf, v54, *(_QWORD *)(a1 + 24));
        v56 = *(_OWORD *)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
        v82 = v56;
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v61 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        ++totalBuilders;
        if (!(_QWORD)v82)
        {
          v66 = *(id *)(realityio::logObjects(v55) + 16);
          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
          {
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 24));
            v68 = *v5 & 0xFFFFFFFFFFFFFFF8;
            if (v68)
            {
              v69 = (const char *)(v68 + 16);
              if (*(char *)(v68 + 39) < 0)
                v69 = *(const char **)v69;
            }
            else
            {
              v69 = "";
            }
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = Text;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v69;
            _os_log_impl(&dword_22FF26000, v66, OS_LOG_TYPE_DEFAULT, "Builder at prim path (%s) with identifier (%s) could not be generated.", buf, 0x16u);
          }

          goto LABEL_113;
        }
        *(_QWORD *)(v82 + 168) = *(_QWORD *)(v4 + 24);
        v63 = (uint64_t *)(a1 + 32);
      }
      else
      {
        if ((_QWORD)v82)
          v64 = v43;
        else
          v64 = 1;
        if ((v64 & 1) != 0)
        {
          v65 = v43 ^ 1;
          if (!(_QWORD)v82)
            v65 = 1;
          if ((v65 & 1) != 0)
            goto LABEL_113;
          v63 = (uint64_t *)(a1 + 64);
        }
        else
        {
          v63 = (uint64_t *)(a1 + 56);
        }
      }
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(*v63, &v82);
    }
LABEL_113:
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v19 = v75;
LABEL_119:
    if (!v19)
      return;
    v73 = (unint64_t *)&v19->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (v74)
      return;
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    v18 = v19;
LABEL_124:
    std::__shared_weak_count::__release_weak(v18);
    return;
  }
  realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(*(realityio::BuilderDependencyDAG **)(v4 + 248), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::TfToken *)v5, buf);
  if (!*(_QWORD *)buf)
  {
    v7 = (*a2)[6];
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 48))(&v82, v7, *(_QWORD *)(a1 + 24));
    v8 = v82;
    v82 = 0uLL;
    v9 = *(std::__shared_weak_count **)&buf[8];
    *(_OWORD *)buf = v8;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    *(_QWORD *)(*(_QWORD *)buf + 168) = *(_QWORD *)(v4 + 24);
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(*(_QWORD *)(a1 + 32), (__int128 *)buf);
  }
  v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      v18 = v15;
      goto LABEL_124;
    }
  }
}

void sub_230147588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

intptr_t realityio::LiveSceneManager::AssetDeferredLoadGroup::onComplete(realityio::LiveSceneManager::AssetDeferredLoadGroup *this)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*((_QWORD *)this + 13) + 464) + 16));
}

const void **realityio::LiveSceneManager::addMetadataToAssets(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0::operator()(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  __CFString *v6;
  void *v8;
  void *__p;
  uint64_t v10;
  char v11;
  CFTypeRef cf;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
  REAssetSetMetadataString();
  v6 = (__CFString *)REAssetCopyMetadataString();
  cf = v6;
  if (v6)
  {
    realityio::CFStringCopyUTF8String(v6, (uint64_t)&v8);
    if ((_BYTE)v8)
    {
      REAssetSetDebugName();
      if ((_BYTE)v8)
      {
        if (v11 < 0)
          operator delete(__p);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    REAssetSetDebugName();
  }
  __p = 0;
  v10 = 0;
  v8 = 0;
  if (realityio::ImportSessionImpl::getAssetURLFromBundle(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), a2, this, (uint64_t)&v8))REAssetSetMetadataString();
  if (SHIBYTE(v10) < 0)
    operator delete(v8);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_23014780C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, const void *a20)
{
  if ((_BYTE)a10)
  {
    if (a19 < 0)
      operator delete(__p);
  }
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&a20);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneManager::updateLiveSceneImpl(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  realityio *v10;
  NSObject *v11;
  uint64_t v12;
  realityio *v13;
  const void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  os_signpost_id_t v22;
  _BOOL4 v23;
  uint64_t v24;
  pxrInternal__aapl__pxrReserved__::SdfPath *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *i;
  NSObject *v38;
  NSObject *v39;
  uint64_t v40;
  os_signpost_id_t v41;
  unint64_t v42;
  const char *v43;
  uint64_t Text;
  int v45;
  uint64_t v46;
  const char *v47;
  unsigned int *v48;
  unsigned int v49;
  char *v50;
  char *j;
  NSObject *v52;
  NSObject *v53;
  os_signpost_id_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unint64_t *v62;
  unint64_t *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *k;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  unint64_t *p_shared_weak_owners;
  unint64_t v75;
  _QWORD *m;
  _QWORD *v77;
  uint64_t n;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  NSObject *v89;
  NSObject *v90;
  os_signpost_id_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  NSObject *v96;
  NSObject *v97;
  os_signpost_id_t v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  NSObject *v102;
  NSObject *v103;
  os_signpost_id_t v104;
  std::chrono::steady_clock::time_point v105;
  NSObject *v106;
  uint64_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t **v110;
  char **v111;
  unint64_t *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t ii;
  unint64_t v118;
  uint64_t v119;
  uint8_t *v120;
  uint64_t v121;
  NSObject *v122;
  NSObject *v123;
  os_signpost_id_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint8_t *v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  NSObject *v138;
  std::__shared_weak_count *v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  char v143;
  CFTypeRef *v144;
  uint64_t v145;
  const void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint8_t *v154;
  uint64_t v155;
  realityio *v156;
  NSObject *v157;
  const char *v158;
  NSObject *v159;
  os_log_type_t v160;
  CFTypeRef v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  NSObject *log;
  _QWORD block[4];
  __int128 v181;
  std::__shared_weak_count *v182;
  const void *v183;
  const void *v184;
  char v185;
  uint8_t *v186;
  std::__shared_weak_count *v187;
  CFTypeRef v188;
  std::__shared_weak_count *v189[2];
  __int128 v190;
  int v191;
  __int128 __p;
  __int128 v193;
  int v194;
  __int128 v195;
  __int128 v196;
  int v197;
  unsigned int *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  _BYTE v208[40];
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int *v212;
  char v213;
  CFTypeRef cf;
  uint8_t buf[32];
  _BYTE v216[20];
  _BYTE *v217;
  __int16 v218;
  _BYTE v219[24];
  _BYTE *v220;
  _BYTE v221[24];
  _BYTE *v222;
  _BYTE v223[24];
  _BYTE *v224;
  uint64_t v225;

  v225 = *MEMORY[0x24BDAC8D0];
  std::chrono::steady_clock::now();
  v213 = 1;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 216));
  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(std::__shared_weak_count **)(a1 + 480);
  *(_QWORD *)(a1 + 472) = v4;
  *(_QWORD *)(a1 + 480) = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (realityio::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (realityio::internal::enableSignposts(0, 0))
    kdebug_trace();
  std::chrono::steady_clock::now();
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 152));
  v11 = *(id *)(realityio::logObjects(v10) + 16);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22FF26000, v11, OS_LOG_TYPE_INFO, "Starting live scene update phase 1\n", buf, 2u);
  }

  v12 = *(_QWORD *)(a1 + 416);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  v13 = (realityio *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
  if (*(_DWORD *)(a1 + 288) == 1)
  {
    if (*(_QWORD *)(a1 + 296))
      goto LABEL_21;
    v14 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 8);
    *(_QWORD *)buf = v14;
    if (v14)
      CFRetain(v14);
    v15 = operator new();
    v212 = *(unsigned int **)(*(_QWORD *)(a1 + 40) + 8);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v212);
    realityio::ImportSessionV2::ImportSessionV2(v15, &v212, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 16), *(_QWORD *)(a1 + 24), (const void **)buf);
    *(_QWORD *)(a1 + 296) = v15;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v212);
    *(_BYTE *)(*(_QWORD *)(a1 + 296) + 272) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 272);
    v13 = (realityio *)realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef((const void **)buf);
    if (*(_DWORD *)(a1 + 288) == 1)
    {
LABEL_21:
      v16 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)buf = *(_QWORD *)(a1 + 8);
      if (v16)
      {
        *(_QWORD *)&buf[8] = std::__shared_weak_count::lock(v16);
        if (*(_QWORD *)&buf[8])
        {
          v13 = (realityio *)std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](*(_QWORD *)(a1 + 296) + 40, (__int128 *)buf);
          v17 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v18 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          goto LABEL_28;
        }
      }
      else
      {
        *(_QWORD *)&buf[8] = 0;
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
  }
LABEL_28:
  v20 = *(id *)(realityio::logObjects(v13) + 56);
  v21 = v20;
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 272);
  log = v20;
  if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v23 = os_signpost_enabled(v20);
    v21 = log;
    if (v23)
    {
      v24 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v24;
      _os_signpost_emit_with_name_impl(&dword_22FF26000, log, OS_SIGNPOST_EVENT, v22, "live-scene-update-state-prepare-update", "importSession %p", buf, 0xCu);
      v21 = log;
    }
  }

  v209 = 0;
  v210 = 0;
  v211 = 0;
  realityio::BuilderDependencyDAG::topologicalSort(*(realityio::BuilderDependencyDAG **)(a1 + 248), (uint64_t)&v209);
  realityio::BuilderDependencyDAG::generateBuilderProviderInfo(*(realityio::BuilderDependencyDAG **)(a1 + 248), (uint64_t)v208);
  v205 = 0;
  v206 = 0;
  v207 = 0;
  v202 = 0;
  v203 = 0;
  v204 = 0;
  v199 = 0;
  v200 = 0;
  v201 = 0;
  totalBuilders = 0;
  std::chrono::steady_clock::now();
  v25 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 40);
  v26 = *(_QWORD *)(a1 + 48);
  v224 = 0;
  v27 = operator new(0x28uLL);
  *v27 = &off_24FDFAB08;
  v27[1] = a1;
  v27[2] = &v205;
  v27[3] = &v202;
  v27[4] = &v199;
  v224 = v27;
  realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(v25, v26, (uint64_t)v223);
  v28 = v224;
  if (v224 == v223)
  {
    v29 = 4;
    v28 = v223;
    goto LABEL_35;
  }
  if (v224)
  {
    v29 = 5;
LABEL_35:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  if (v213 && *(_DWORD *)(a1 + 288) == 1)
  {
    v30 = *(_QWORD *)(a1 + 296);
    *(_BYTE *)(v30 + 1360) = 0;
    v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16));
    realityio::ImportSessionV2::setRootEntity(v30, v31);
    std::chrono::steady_clock::now();
    v32 = *(_QWORD *)(a1 + 296);
    v198 = *(unsigned int **)(*(_QWORD *)(a1 + 40) + 8);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v198);
    realityio::ImportSessionV2::setStage(v32, &v198);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v198);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 296) + 24))(*(_QWORD *)(a1 + 296), 0);
    std::chrono::steady_clock::now();
    realityio::LiveSceneManager::insertEntityBuilders(a1, (_QWORD *)(*(_QWORD *)(a1 + 296) + 1112), (uint64_t)&v205, (uint64_t)&v202, (uint64_t)&v199);
    v33 = *a2;
    *(_QWORD *)buf = &off_24FDFAB98;
    *(_QWORD *)&buf[8] = a1;
    *(_QWORD *)&buf[24] = buf;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v33 + 16))(v33, buf);
    v34 = *(uint8_t **)&buf[24];
    if (*(uint8_t **)&buf[24] == buf)
    {
      v35 = 4;
      v34 = buf;
    }
    else
    {
      if (!*(_QWORD *)&buf[24])
        goto LABEL_43;
      v35 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
  }
LABEL_43:
  std::chrono::steady_clock::now();
  v36 = v205;
  for (i = v206; v36 != i; v36 += 2)
  {
    v38 = log;
    v39 = v38;
    v40 = *v36;
    v41 = *(_QWORD *)(*v36 + 160);
    if (v41 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v38))
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v40 + 24))(&v195, v40);
      v42 = v195 & 0xFFFFFFFFFFFFFFF8;
      if ((v195 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v43 = (const char *)(v42 + 16);
        if (*(char *)(v42 + 39) < 0)
          v43 = *(const char **)v43;
      }
      else
      {
        v43 = "";
      }
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v36 + 8));
      v45 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v36 + 56))(*v36);
      v46 = *(_QWORD *)(a1 + 24);
      v47 = "FALSE";
      if (v45)
        v47 = "TRUE";
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v43;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = Text;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = v47;
      *(_WORD *)v216 = 2048;
      *(_QWORD *)&v216[2] = v46;
      _os_signpost_emit_with_name_impl(&dword_22FF26000, v39, OS_SIGNPOST_EVENT, v41, "builder-created", "builder created: identifier = %s and prim path = %s and is-async = %s and import session = %p", buf, 0x2Au);
      if ((v195 & 7) != 0)
      {
        v48 = (unsigned int *)(v195 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
    }

  }
  v50 = v199;
  for (j = v200; v50 != j; v50 += 16)
  {
    v52 = log;
    v53 = v52;
    v54 = *(_QWORD *)(*(_QWORD *)v50 + 160);
    if (v54 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v52))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_22FF26000, v53, OS_SIGNPOST_EVENT, v54, "builder-removed", "", buf, 2u);
    }

  }
  std::chrono::steady_clock::now();
  if (v213)
  {
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)buf = &buf[8];
    v55 = *(_QWORD *)(a1 + 40);
    v56 = *(_QWORD *)(a1 + 248);
    v222 = 0;
    v57 = operator new(0x30uLL);
    *v57 = &off_24FDFAC18;
    v57[1] = &v199;
    v57[2] = buf;
    v57[3] = a1;
    v57[4] = v55 + 184;
    v57[5] = &v202;
    v222 = v57;
    realityio::BuilderDependencyDAG::forAllBuilders(*(_QWORD **)(v56 + 16), (uint64_t)v221);
    v58 = v222;
    if (v222 == v221)
    {
      v59 = 4;
      v58 = v221;
    }
    else
    {
      if (!v222)
      {
LABEL_67:
        std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)buf, *(_QWORD **)&buf[8]);
        goto LABEL_68;
      }
      v59 = 5;
    }
    (*(void (**)(void))(*v58 + 8 * v59))();
    goto LABEL_67;
  }
LABEL_68:
  std::chrono::steady_clock::now();
  if (v213)
  {
    memset(buf, 0, 24);
    std::vector<std::shared_ptr<realityio::Builder>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::Builder>*,std::shared_ptr<realityio::Builder>*>(buf, v202, v203, (v203 - v202) >> 4);
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::merge((uint64_t)buf, v199, v200);
    realityio::BuilderDependencyDAG::findDownstreamDependencies(*(_QWORD **)(a1 + 248), (__int128 **)buf, (uint64_t)buf);
    v61 = v199;
    v60 = v200;
    while (v61 != v60)
    {
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::erase((uint64_t *)buf, v61);
      v61 += 16;
    }
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::merge((uint64_t)&v202, *(_QWORD **)buf, *(_QWORD **)&buf[8]);
    *(_QWORD *)&v195 = buf;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
    if (v213)
    {
      std::chrono::steady_clock::now();
      v63 = (unint64_t *)v199;
      v62 = (unint64_t *)v200;
      while (v63 != v62)
      {
        realityio::BuilderDependencyDAG::removeBuilder(*(_QWORD **)(a1 + 248), v63);
        v63 += 2;
      }
    }
  }
  std::chrono::steady_clock::now();
  if (v213)
  {
    memset(buf, 0, 24);
    realityio::BuilderDependencyDAG::addBuildersAndResyncIODescriptors(*(_QWORD **)(a1 + 248), &v205, *(_QWORD *)(a1 + 40), (uint64_t)buf);
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::merge((uint64_t)&v202, *(_QWORD **)buf, *(_QWORD **)&buf[8]);
    *(_QWORD *)&v195 = buf;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
  }
  std::chrono::steady_clock::now();
  if (v213)
  {
    memset(buf, 0, 24);
    std::vector<std::shared_ptr<realityio::Builder>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::Builder>*,std::shared_ptr<realityio::Builder>*>(buf, v202, v203, (v203 - v202) >> 4);
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::merge((uint64_t)buf, v205, v206);
    realityio::BuilderDependencyDAG::findDownstreamDependencies(*(_QWORD **)(a1 + 248), (__int128 **)buf, (uint64_t)buf);
    v65 = v205;
    v64 = v206;
    while (v65 != v64)
    {
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::erase((uint64_t *)buf, v65);
      v65 += 2;
    }
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::merge((uint64_t)&v202, *(_QWORD **)buf, *(_QWORD **)&buf[8]);
    *(_QWORD *)&v195 = buf;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
  }
  std::chrono::steady_clock::now();
  v195 = 0u;
  v196 = 0u;
  v197 = 1065353216;
  realityio::BuilderDependencyDAG::findUnsatisfiableBuilders(*(_QWORD **)(a1 + 248), (uint64_t)&v195);
  for (k = (_QWORD *)v196; k; k = (_QWORD *)*k)
    ;
  if (v213)
  {
    v67 = v210;
    while (v67 != v209)
    {
      v69 = *(_QWORD *)(v67 - 16);
      v67 -= 16;
      v68 = v69;
      *(_QWORD *)&__p = v69;
      v70 = *(std::__shared_weak_count **)(v67 + 8);
      *((_QWORD *)&__p + 1) = v70;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      v73 = v199;
      if (v199 != v200)
      {
        while (*(_QWORD *)v73 != v68)
        {
          v73 += 16;
          if (v73 == v200)
          {
            v73 = v200;
            break;
          }
        }
      }
      if (v73 != v200)
      {
        v189[0] = (std::__shared_weak_count *)v68;
        v189[1] = v70;
        if (v70)
        {
          p_shared_weak_owners = (unint64_t *)&v70->__shared_weak_owners_;
          do
            v75 = __ldxr(p_shared_weak_owners);
          while (__stxr(v75 + 1, p_shared_weak_owners));
        }
        realityio::Inputs::Inputs((uint64_t)buf, v189, (_DWORD *)(v68 + 8), *(_QWORD *)(a1 + 24), (uint64_t)v208, *(_QWORD *)(a1 + 48), *a2);
        if (v189[1])
          std::__shared_weak_count::__release_weak(v189[1]);
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v68 + 72))(v68, buf);
        std::__tree<unsigned int>::destroy(v68 + 40, *(_QWORD **)(v68 + 48));
        *(_QWORD *)(v68 + 40) = v68 + 48;
        *(_QWORD *)(v68 + 48) = 0;
        *(_QWORD *)(v68 + 56) = 0;
        v77 = *(_QWORD **)(v68 + 64);
        for (m = *(_QWORD **)(v68 + 72); m != v77; m = realityio::WrappedRERef<REAsset *>::~WrappedRERef(m - 1))
          ;
        *(_QWORD *)(v68 + 72) = v77;
        v79 = *(_QWORD *)(v68 + 88);
        for (n = *(_QWORD *)(v68 + 96);
              n != v79;
        *(_QWORD *)(v68 + 96) = v79;
        realityio::Inputs::~Inputs((realityio::Inputs *)buf);
      }
      if (v70)
      {
        v80 = (unint64_t *)&v70->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
    }
  }
  *(_QWORD *)&buf[24] = 0;
  std::vector<std::shared_ptr<realityio::Builder>>::__vdeallocate((void **)&v199);
  v199 = 0;
  v200 = 0;
  v201 = 0;
  memset(buf, 0, 24);
  *(_QWORD *)&__p = buf;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = 0u;
  v193 = 0u;
  v194 = 1065353216;
  if (v213)
  {
    realityio::BuilderDependencyDAG::generateBuilderProviderInfo(*(realityio::BuilderDependencyDAG **)(a1 + 248), (uint64_t)buf);
    if (*((_QWORD *)&v193 + 1))
    {
      std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__deallocate_node((uint64_t)&__p, (_QWORD *)v193);
      *(_QWORD *)&v193 = 0;
      v82 = *((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v83 = 0;
        do
          *(_QWORD *)(__p + 8 * v83++) = 0;
        while (v82 != v83);
      }
      *((_QWORD *)&v193 + 1) = 0;
    }
    v84 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    v85 = (void *)__p;
    *(_QWORD *)&__p = v84;
    if (v85)
      operator delete(v85);
    v86 = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    v193 = *(_OWORD *)&buf[16];
    v194 = *(_DWORD *)v216;
    *((_QWORD *)&__p + 1) = v86;
    if (*(_QWORD *)&buf[24])
    {
      v87 = *(_QWORD *)(*(_QWORD *)&buf[16] + 8);
      if ((v86 & (v86 - 1)) != 0)
      {
        if (v87 >= v86)
          v87 %= v86;
      }
      else
      {
        v87 &= v86 - 1;
      }
      *(_QWORD *)(__p + 8 * v87) = &v193;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)&buf[24] = 0;
    }
    std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table((uint64_t)buf);
  }
  v88 = *(_QWORD *)(a1 + 40);
  v89 = log;
  v90 = v89;
  v91 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 272);
  if (v91 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v89))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_22FF26000, v90, OS_SIGNPOST_EVENT, v91, "live-scene-update-state-run-builders", "", buf, 2u);
  }

  *(_OWORD *)v189 = 0u;
  v190 = 0u;
  v191 = 1065353216;
  if (v213)
  {
    std::chrono::steady_clock::now();
    v92 = *(_QWORD *)(a1 + 248);
    v220 = 0;
    v93 = operator new(0x38uLL);
    *v93 = &off_24FDFACA8;
    v93[1] = a1;
    v93[2] = &v202;
    v93[3] = &v205;
    v93[4] = &v195;
    v93[5] = v88 + 184;
    v93[6] = v189;
    v220 = v93;
    realityio::BuilderDependencyDAG::forAllBuilders(*(_QWORD **)(v92 + 16), (uint64_t)v219);
    v94 = v220;
    if (v220 == v219)
    {
      v95 = 4;
      v94 = v219;
    }
    else
    {
      if (!v220)
        goto LABEL_137;
      v95 = 5;
    }
    (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_137:
    if (v213)
    {
      std::chrono::steady_clock::now();
      realityio::BuilderExecutor::runBuildersInDependencyOrder(v189, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), *(realityio::BuilderDependencyDAG **)(a1 + 248), *a2);
      *(_QWORD *)&buf[24] = 0;
      std::vector<std::shared_ptr<realityio::Builder>>::__vdeallocate((void **)&v202);
      v202 = 0;
      v203 = 0;
      v204 = 0;
      memset(buf, 0, 24);
      v186 = buf;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
      *(_QWORD *)&buf[24] = 0;
      std::vector<std::shared_ptr<realityio::Builder>>::__vdeallocate((void **)&v205);
      v205 = 0;
      v206 = 0;
      v207 = 0;
      memset(buf, 0, 24);
      v186 = buf;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
    }
  }
  v96 = v90;
  v97 = v96;
  v98 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 272);
  if (v98 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v96))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_22FF26000, v97, OS_SIGNPOST_EVENT, v98, "live-scene-update-state-wait-for-assets", "", buf, 2u);
  }

  if (v213)
  {
    std::chrono::steady_clock::now();
    v99 = *a2;
    *(_QWORD *)buf = &off_24FDFAD28;
    *(_QWORD *)&buf[8] = a1;
    *(_QWORD *)&buf[16] = &v213;
    *(_QWORD *)&buf[24] = buf;
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v99 + 16))(v99, buf);
    v100 = *(uint8_t **)&buf[24];
    if (*(uint8_t **)&buf[24] == buf)
    {
      v101 = 4;
      v100 = buf;
    }
    else
    {
      if (!*(_QWORD *)&buf[24])
      {
LABEL_148:
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 464) + 16), 0xFFFFFFFFFFFFFFFFLL);
        std::chrono::steady_clock::now();
        std::chrono::steady_clock::now();
        goto LABEL_149;
      }
      v101 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v100 + 8 * v101))();
    goto LABEL_148;
  }
LABEL_149:
  v102 = v97;
  v103 = v102;
  v104 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 272);
  if (v104 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v102))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_22FF26000, v103, OS_SIGNPOST_EVENT, v104, "live-scene-update-state-post-asset-load", "", buf, 2u);
  }

  v105.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v106 = *(id *)(realityio::logObjects((realityio *)v105.__d_.__rep_) + 16);
  if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22FF26000, v106, OS_LOG_TYPE_INFO, "Starting live scene update phase 2\n", buf, 2u);
  }

  v107 = *a2;
  *(_QWORD *)buf = &off_24FDFADA8;
  *(_QWORD *)&buf[8] = a1;
  *(_QWORD *)&buf[16] = &v213;
  *(_QWORD *)&buf[24] = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v107 + 16))(v107, buf);
  v108 = *(uint8_t **)&buf[24];
  if (*(uint8_t **)&buf[24] == buf)
  {
    v109 = 4;
    v108 = buf;
  }
  else
  {
    if (!*(_QWORD *)&buf[24])
      goto LABEL_159;
    v109 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v108 + 8 * v109))();
LABEL_159:
  v110 = (uint64_t **)v190;
  memset(buf, 0, sizeof(buf));
  *(_DWORD *)v216 = 1065353216;
  if ((_QWORD)v190)
  {
    do
    {
      v111 = realityio::Builder::addedAssets((realityio::Builder *)v110[2]);
      v112 = (unint64_t *)*v111;
      v113 = (unint64_t *)v111[1];
      while (v112 != v113)
      {
        v114 = *v112;
        if (!std::__hash_table<REAsset *,std::hash<REAsset *>,std::equal_to<REAsset *>,std::allocator<REAsset *>>::find<REAsset *>(*(uint64_t *)buf, *(unint64_t *)&buf[8], *v112))
        {
          std::__hash_table<REAsset *,std::hash<REAsset *>,std::equal_to<REAsset *>,std::allocator<REAsset *>>::__emplace_unique_key_args<REAsset *,REAsset * const&>((float *)buf, v114, v114);
          v115 = v110[2];
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v186, (_DWORD *)v115 + 2);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v186 + 1, (_DWORD *)v115 + 3);
          realityio::LiveSceneManager::addMetadataToAssets(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0::operator()(a1, v114, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v186);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v186);
        }
        ++v112;
      }
      v110 = (uint64_t **)*v110;
    }
    while (v110);
  }
  v116 = *(_QWORD *)(a1 + 504);
  for (ii = *(_QWORD *)(a1 + 512); v116 != ii; v116 += 40)
  {
    v118 = *(_QWORD *)v116;
    if (!std::__hash_table<REAsset *,std::hash<REAsset *>,std::equal_to<REAsset *>,std::allocator<REAsset *>>::find<REAsset *>(*(uint64_t *)buf, *(unint64_t *)&buf[8], *(_QWORD *)v116))
    {
      std::__hash_table<REAsset *,std::hash<REAsset *>,std::equal_to<REAsset *>,std::allocator<REAsset *>>::__emplace_unique_key_args<REAsset *,REAsset * const&>((float *)buf, v118, v118);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&cf, (_DWORD *)(v116 + 32));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&cf + 1, (_DWORD *)(v116 + 36));
      realityio::LiveSceneManager::addMetadataToAssets(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0::operator()(a1, v118, (pxrInternal__aapl__pxrReserved__::SdfPath *)&cf);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&cf);
    }
  }
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)buf);
  v119 = *a2;
  *(_QWORD *)buf = &off_24FDFAE28;
  *(_QWORD *)&buf[8] = a1;
  *(_QWORD *)&buf[24] = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v119 + 16))(v119, buf);
  v120 = *(uint8_t **)&buf[24];
  if (*(uint8_t **)&buf[24] == buf)
  {
    v121 = 4;
    v120 = buf;
    goto LABEL_174;
  }
  if (*(_QWORD *)&buf[24])
  {
    v121 = 5;
LABEL_174:
    (*(void (**)(void))(*(_QWORD *)v120 + 8 * v121))();
  }
  v122 = v103;
  v123 = v122;
  v124 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 272);
  if (v124 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v122))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_22FF26000, v123, OS_SIGNPOST_EVENT, v124, "live-scene-update-state-finished", "", buf, 2u);
  }

  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  *(_QWORD *)(a1 + 280) = 0;
  v125 = *(_QWORD *)(a1 + 464);
  v127 = *(_QWORD *)(v125 + 48);
  v126 = *(_QWORD *)(v125 + 56);
  if (v126 != v127)
  {
    while (1)
    {
      v128 = v126 - 32;
      v129 = *(_QWORD **)(v126 - 8);
      if ((_QWORD *)(v126 - 32) == v129)
        break;
      if (v129)
      {
        v130 = 5;
LABEL_183:
        (*(void (**)(void))(*v129 + 8 * v130))();
      }
      v126 = v128;
      if (v128 == v127)
        goto LABEL_185;
    }
    v129 = (_QWORD *)(v126 - 32);
    v130 = 4;
    goto LABEL_183;
  }
LABEL_185:
  *(_QWORD *)(v125 + 56) = v127;
  realityio::AssetLoadTracker::clear(*(realityio::AssetLoadTracker **)(*(_QWORD *)(a1 + 464) + 128));
  v131 = (_QWORD *)(*(_QWORD *)(a1 + 464) + 72);
  *(_QWORD *)buf = &off_24FDFAEA8;
  *(_QWORD *)&buf[24] = buf;
  std::__function::__value_func<void ()(void)>::swap[abi:ne180100](buf, v131);
  v132 = *(uint8_t **)&buf[24];
  if (*(uint8_t **)&buf[24] == buf)
  {
    v133 = 4;
    v132 = buf;
    goto LABEL_189;
  }
  if (*(_QWORD *)&buf[24])
  {
    v133 = 5;
LABEL_189:
    (*(void (**)(void))(*(_QWORD *)v132 + 8 * v133))();
  }
  v134 = *(_QWORD *)(a1 + 296);
  if (v134)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v134 + 40, (__int128 *)buf);
    v135 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v136 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 16)
    && REEngineGetServiceLocator()
    && MEMORY[0x2348B1264]())
  {
    REAssetManagerGetEngineQueue();
    v138 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v138 = 0;
  }
  cf = 0;
  v188 = 0;
  v140 = *(void ***)(a1 + 8);
  v139 = *(std::__shared_weak_count **)(a1 + 16);
  v186 = (uint8_t *)v140;
  if (!v139 || (v141 = std::__shared_weak_count::lock(v139), (v187 = v141) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v142 = v141;
  std::mutex::lock((std::mutex *)(a1 + 328));
  v143 = *(_BYTE *)(a1 + 456);
  if (*(_BYTE *)(a1 + 457))
  {
    realityio::WrappedCFRef<RIOImportSession *>::operator=(&cf, *(const void ***)(a1 + 464));
    realityio::WrappedCFRef<RIOImportSession *>::operator=(&v188, (const void **)(*(_QWORD *)(a1 + 464) + 8));
  }
  v144 = *(CFTypeRef **)(a1 + 464);
  if (*v144)
    CFRelease(*v144);
  *v144 = 0;
  v145 = *(_QWORD *)(a1 + 464);
  v146 = *(const void **)(v145 + 8);
  if (v146)
    CFRelease(v146);
  *(_QWORD *)(v145 + 8) = 0;
  v147 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = 0;
  if (v147)
    std::default_delete<realityio::LiveSceneManager::LiveSceneUpdateContext>::operator()[abi:ne180100](v147);
  v149 = *(_QWORD *)(a1 + 40);
  v148 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v149;
  if (v148)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
    v150 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v150)
      (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
  }
  v151 = *(_QWORD *)(a1 + 448);
  if (v151)
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 48))(v151);
  *(_QWORD *)&buf[24] = 0;
  v217 = 0;
  v218 = 0;
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((_QWORD *)(a1 + 392), (uint64_t)buf);
  v152 = v216;
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((_QWORD *)(a1 + 424), (uint64_t)v216);
  *(_WORD *)(a1 + 456) = v218;
  if (v217 == v216)
  {
    v153 = 4;
  }
  else
  {
    if (!v217)
      goto LABEL_222;
    v153 = 5;
    v152 = v217;
  }
  (*(void (**)(_QWORD *))(*v152 + 8 * v153))(v152);
LABEL_222:
  v154 = *(uint8_t **)&buf[24];
  if (*(uint8_t **)&buf[24] == buf)
  {
    v155 = 4;
    v154 = buf;
  }
  else
  {
    if (!*(_QWORD *)&buf[24])
      goto LABEL_227;
    v155 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v154 + 8 * v155))();
LABEL_227:
  std::mutex::unlock((std::mutex *)(a1 + 328));
  if (*(_QWORD *)(a1 + 80))
  {
    v157 = *(id *)(realityio::logObjects(v156) + 16);
    if (!os_log_type_enabled(v157, OS_LOG_TYPE_INFO))
      goto LABEL_233;
    *(_WORD *)buf = 0;
    v158 = "Ending live scene update\n";
    v159 = v157;
    v160 = OS_LOG_TYPE_INFO;
  }
  else
  {
    v157 = *(id *)(realityio::logObjects(v156) + 16);
    if (!os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
      goto LABEL_233;
    *(_WORD *)buf = 0;
    v158 = "Ending live scene update, but there is no scene update pass completion block!\n";
    v159 = v157;
    v160 = OS_LOG_TYPE_DEFAULT;
  }
  _os_log_impl(&dword_22FF26000, v159, v160, v158, buf, 2u);
LABEL_233:

  v161 = cf;
  if (*(_QWORD *)(a1 + 80) | (unint64_t)cf)
  {
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3321888768;
    block[2] = ___ZN9realityio16LiveSceneManager19updateLiveSceneImplENSt3__110shared_ptrINS_18EngineQueueManagerEEEb_block_invoke;
    block[3] = &__block_descriptor_80_ea8_32c110_ZTSKZN9realityio16LiveSceneManager19updateLiveSceneImplENSt3__110shared_ptrINS_18EngineQueueManagerEEEbE4__10_e5_v8__0l;
    *(_QWORD *)buf = a1;
    *(_QWORD *)&buf[8] = v140;
    *(_QWORD *)&buf[16] = v142;
    v162 = (unint64_t *)&v142->__shared_owners_;
    do
      v163 = __ldxr(v162);
    while (__stxr(v163 + 1, v162));
    *(_QWORD *)&buf[24] = v161;
    if (v161)
      CFRetain(v161);
    *(_QWORD *)v216 = v188;
    if (v188)
      CFRetain(v188);
    v216[8] = v143;
    v181 = *(_OWORD *)buf;
    v182 = *(std::__shared_weak_count **)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v164 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
      do
        v165 = __ldxr(v164);
      while (__stxr(v165 + 1, v164));
    }
    v183 = *(const void **)&buf[24];
    if (*(_QWORD *)&buf[24])
      CFRetain(*(CFTypeRef *)&buf[24]);
    v184 = *(const void **)v216;
    if (*(_QWORD *)v216)
      CFRetain(*(CFTypeRef *)v216);
    v185 = v216[8];
    dispatch_async(v138, block);
    realityio::WrappedCFRef<void const*>::~WrappedCFRef((const void **)v216);
    realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef((const void **)&buf[24]);
    v166 = *(std::__shared_weak_count **)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v167 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    realityio::WrappedCFRef<void const*>::~WrappedCFRef(&v184);
    realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef(&v183);
    v169 = v182;
    if (v182)
    {
      v170 = (unint64_t *)&v182->__shared_owners_;
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
  }
  else if (realityio::internal::enableSignposts(0, 0))
  {
    kdebug_trace();
  }
  v172 = *(std::__shared_weak_count **)(a1 + 480);
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  if (v172)
  {
    v173 = (unint64_t *)&v172->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  v175 = v187;
  if (v187)
  {
    v176 = (unint64_t *)&v187->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  realityio::WrappedCFRef<void const*>::~WrappedCFRef(&v188);
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef(&cf);

  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)v189);
  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table((uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>>>::~__hash_table((uint64_t)&v195);
  *(_QWORD *)buf = &v199;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v202;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v205;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table((uint64_t)v208);
  *(_QWORD *)buf = &v209;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 152));
}

void sub_230148F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::recursive_mutex *a10)
{
  std::recursive_mutex::unlock(a10);
  _Unwind_Resume(a1);
}

realityio::ImportSession::CancelledException *realityio::ImportSession::CancelledException::CancelledException(realityio::ImportSession::CancelledException *this, const realityio::ImportSession::CancelledException *a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)this = off_24FDF1300;
  v3 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return this;
}

void sub_2301495DC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::forAllBuilders(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if (a1)
  {
    v3 = a1;
    do
    {
      v9 = 0;
      v10 = 0;
      v4 = (std::__shared_weak_count *)v3[3];
      if (v4)
      {
        v10 = std::__shared_weak_count::lock(v4);
        if (v10)
          v9 = v3[2];
      }
      v5 = *(_QWORD *)(a2 + 24);
      if (!v5)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v9);
      v6 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
}

void sub_2301496A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::merge(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = v4[1];
      *(_QWORD *)&v12 = *v4;
      *((_QWORD *)&v12 + 1) = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(a1, &v12);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

{
  _QWORD *v4;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = v4[1];
      *(_QWORD *)&v12 = *v4;
      *((_QWORD *)&v12 + 1) = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(a1, &v12);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

void sub_230149768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_230149828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9realityio16LiveSceneManager19updateLiveSceneImplENSt3__110shared_ptrINS_18EngineQueueManagerEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  std::recursive_mutex::lock((std::recursive_mutex *)(v2 + 88));
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 88));
  result = realityio::internal::enableSignposts(0, 0);
  if ((_DWORD)result)
    result = kdebug_trace();
  if (*(_QWORD *)(a1 + 56))
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 24) + 16) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 16), *(unsigned __int8 *)(a1 + 72));
  return result;
}

void sub_2301498E4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_32c110_ZTSKZN9realityio16LiveSceneManager19updateLiveSceneImplENSt3__110shared_ptrINS_18EngineQueueManagerEEEbE4__10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  const void *v7;
  CFTypeRef result;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(const void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
    CFRetain(v7);
  result = *(CFTypeRef *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = result;
  if (result)
    result = CFRetain(result);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return result;
}

void sub_230149974(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;

  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef(v2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1 + 40);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_32c110_ZTSKZN9realityio16LiveSceneManager19updateLiveSceneImplENSt3__110shared_ptrINS_18EngineQueueManagerEEEbE4__10(uint64_t a1)
{
  realityio::WrappedCFRef<void const*>::~WrappedCFRef((const void **)(a1 + 64));
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef((const void **)(a1 + 56));
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_10::~$_10(uint64_t a1)
{
  realityio::WrappedCFRef<void const*>::~WrappedCFRef((const void **)(a1 + 32));
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef((const void **)(a1 + 24));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void realityio::LiveSceneManager::setSceneUpdatePassCompletion(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;

  v4 = (std::recursive_mutex *)(a1 + 88);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 88));
  std::function<void ()(void)>::operator=((_QWORD *)(a1 + 56), a2);
  std::recursive_mutex::unlock(v4);
}

void sub_230149A44(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

const void **realityio::LiveSceneManager::description@<X0>(realityio::LiveSceneManager *this@<X0>, CFStringRef *a2@<X8>)
{
  uint64_t v4;
  const void *v6;

  *a2 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16) + 16);
  (*(void (**)(const void **__return_ptr))(**((_QWORD **)this + 29) + 16))(&v6);
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<LiveSceneManager: %p { user stage: %p, engine: %p, state tracker: %@, }>"), this, (char *)this + 32, v4, v6);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&v6);
}

void sub_230149ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const void **v6;
  va_list va;

  va_start(va, a6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v6);
  _Unwind_Resume(a1);
}

int64x2_t *realityio::LiveSceneManager::getDeploymentErrors(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t ***v5;
  uint64_t ***v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t ***v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t *v35;
  _BOOL4 v36;
  uint64_t *v37;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v38;
  uint64_t *v39;
  pxrInternal__aapl__pxrReserved__::SdfPath *v40;
  void **v41;
  uint64_t Name;
  unint64_t v43;
  uint64_t v44;
  void **v45;
  void **v46;
  BOOL v47;
  realityio::Builder **j;
  char **v49;
  char *v50;
  char *v51;
  __CFString *Type;
  realityio::Builder *v53;
  void **v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v58;
  int64x2_t *v59;
  uint64_t *v60;
  realityio::Builder **v61;
  uint64_t ***v63;
  void *v64[2];
  char v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;
  int64x2_t v69;
  _QWORD v70[2];
  int64x2_t *v71;
  void *__p[2];
  uint64_t v73;
  _QWORD *v74;

  v59 = (int64x2_t *)(a1 + 32);
  if (a1[35] != a2)
  {
    v3 = a1[32];
    for (i = a1[33]; i != v3; std::allocator<realityio::LiveSceneManager::CompatibilityFault>::destroy[abi:ne180100](i))
      i -= 40;
    a1[33] = v3;
    if (a2)
    {
      v69 = 0uLL;
      v70[0] = 0;
      v63 = 0;
      v64[0] = 0;
      v64[1] = 0;
      realityio::BuilderDependencyDAG::getAllBuilders(a1[31], (uint64_t *)&v63);
      v60 = a1;
      v5 = v63;
      v6 = (uint64_t ***)v64[0];
      if (v63 != v64[0])
      {
        while (1)
        {
          v66 = 0;
          v67 = 0;
          v7 = (std::__shared_weak_count *)v5[1];
          if (!v7)
            break;
          v8 = (uint64_t *)std::__shared_weak_count::lock(v7);
          v67 = v8;
          if (!v8)
            goto LABEL_11;
          v9 = *v5;
          v66 = *v5;
LABEL_12:
          v10 = v69.i64[1];
          if (v69.i64[1] >= v70[0])
          {
            v12 = (v69.i64[1] - v69.i64[0]) >> 4;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 60)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v14 = v70[0] - v69.i64[0];
            if ((v70[0] - v69.i64[0]) >> 3 > v13)
              v13 = v14 >> 3;
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
              v15 = 0xFFFFFFFFFFFFFFFLL;
            else
              v15 = v13;
            v74 = v70;
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)v70, v15);
            v18 = (uint64_t ***)&v16[16 * v12];
            *v18 = v9;
            v18[1] = (uint64_t **)v8;
            v19 = (_QWORD *)v69.i64[1];
            v20 = (_QWORD *)v69.i64[0];
            if (v69.i64[1] == v69.i64[0])
            {
              v23 = vdupq_n_s64(v69.u64[1]);
              v21 = &v16[16 * v12];
            }
            else
            {
              v21 = &v16[16 * v12];
              do
              {
                v22 = *((_OWORD *)v19 - 1);
                v19 -= 2;
                *((_OWORD *)v21 - 1) = v22;
                v21 -= 16;
                *v19 = 0;
                v19[1] = 0;
              }
              while (v19 != v20);
              v23 = v69;
            }
            v11 = v18 + 2;
            v69.i64[0] = (uint64_t)v21;
            v69.i64[1] = (uint64_t)(v18 + 2);
            *(int64x2_t *)__p = v23;
            v24 = v70[0];
            v70[0] = &v16[16 * v17];
            v73 = v24;
            v71 = (int64x2_t *)v23.i64[0];
            std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)&v71);
          }
          else
          {
            *(_QWORD *)v69.i64[1] = v9;
            *(_QWORD *)(v10 + 8) = v8;
            v11 = (_QWORD *)(v10 + 16);
          }
          v69.i64[1] = (uint64_t)v11;
          v5 += 2;
          if (v5 == v6)
            goto LABEL_27;
        }
        v8 = 0;
LABEL_11:
        v9 = 0;
        goto LABEL_12;
      }
LABEL_27:
      v71 = (int64x2_t *)&v63;
      std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      v67 = 0;
      v68 = 0;
      v66 = &v67;
      v58 = v69.i64[1];
      if (v69.i64[0] != v69.i64[1])
      {
        v25 = v69.i64[0];
        while (1)
        {
          v26 = *(void ***)(*(_QWORD *)v25 + 40);
          v27 = *(_QWORD *)v25 + 48;
          if (v26 != (void **)v27)
            break;
LABEL_70:
          v25 += 16;
          if (v25 == v58)
          {
            v61 = (realityio::Builder **)v69.i64[1];
            for (j = (realityio::Builder **)v69.i64[0]; j != v61; j += 2)
            {
              v49 = realityio::Builder::addedAssets(*j);
              v51 = *v49;
              v50 = v49[1];
              while (v51 != v50)
              {
                if ((REAssetIsAvailableForMajorVersion() & 1) == 0)
                {
                  Type = (__CFString *)REAssetGetType();
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
                  __p[0] = 0;
                  __p[1] = 0;
                  v73 = 0;
                  v53 = *j;
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v71, (_DWORD *)*j + 2);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v71 + 4, (_DWORD *)v53 + 3);
                  LOBYTE(v74) = 1;
                  realityio::CFStringCopyUTF8String(Type, (uint64_t)&v63);
                  if ((_BYTE)v63)
                  {
                    if (v65 >= 0)
                      v54 = v64;
                    else
                      v54 = (void **)v64[0];
                    MEMORY[0x2348B4AD4](__p, v54);
                  }
                  v55 = v60[33];
                  if (v55 >= v60[34])
                  {
                    v56 = std::vector<realityio::LiveSceneManager::CompatibilityFault>::__push_back_slow_path<realityio::LiveSceneManager::CompatibilityFault const&>(v59, (uint64_t)&v71);
                  }
                  else
                  {
                    std::allocator<realityio::LiveSceneManager::CompatibilityFault>::construct[abi:ne180100]<realityio::LiveSceneManager::CompatibilityFault,realityio::LiveSceneManager::CompatibilityFault const&>(v60[33], (uint64_t)&v71);
                    v56 = v55 + 40;
                    v60[33] = v55 + 40;
                  }
                  v60[33] = v56;
                  if ((_BYTE)v63 && v65 < 0)
                    operator delete(v64[0]);
                  if (SHIBYTE(v73) < 0)
                    operator delete(__p[0]);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
                }
                v51 += 8;
              }
            }
            goto LABEL_91;
          }
        }
        while ((REComponentIsAvailableForMajorVersion() & 1) != 0)
        {
LABEL_64:
          v45 = (void **)v26[1];
          if (v45)
          {
            do
            {
              v46 = v45;
              v45 = (void **)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              v46 = (void **)v26[2];
              v47 = *v46 == v26;
              v26 = v46;
            }
            while (!v47);
          }
          v26 = v46;
          if (v46 == (void **)v27)
            goto LABEL_70;
        }
        v28 = v25;
        v29 = *(_QWORD *)v25;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v63, (_DWORD *)(v29 + 8));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v63 + 1, (_DWORD *)(v29 + 12));
        v64[0] = v26[4];
        v30 = v67;
        v31 = &v67;
        v32 = &v67;
        if (!v67)
          goto LABEL_54;
        v33 = &v67;
        do
        {
          v34 = v33;
          v35 = v30 + 4;
          v36 = std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::operator()[abi:ne180100]((pxrInternal__aapl__pxrReserved__::SdfPath *)(v30 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v63);
          if (v36)
            v37 = v30 + 1;
          else
            v37 = v30;
          if (v36)
            v33 = v34;
          else
            v33 = (uint64_t **)v30;
          v30 = (uint64_t *)*v37;
        }
        while (*v37);
        if (v33 != &v67)
        {
          v38 = v36
              ? (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v34 + 4)
              : (const pxrInternal__aapl__pxrReserved__::SdfPath *)v35;
          if (!std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::operator()[abi:ne180100]((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, v38))
          {
LABEL_63:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
            v25 = v28;
            goto LABEL_64;
          }
        }
        v39 = v67;
        v31 = &v67;
        v32 = &v67;
        if (!v67)
          goto LABEL_54;
        v31 = &v67;
        while (1)
        {
          while (1)
          {
            v32 = (uint64_t **)v39;
            v40 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v39 + 4);
            if (!std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::operator()[abi:ne180100]((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v39 + 4)))break;
            v39 = *v32;
            v31 = v32;
            if (!*v32)
              goto LABEL_54;
          }
          if (!std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::operator()[abi:ne180100](v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v63))break;
          v31 = v32 + 1;
          v39 = v32[1];
          if (!v39)
            goto LABEL_54;
        }
        if (!*v31)
        {
LABEL_54:
          v41 = (void **)operator new(0x30uLL);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v41 + 8, &v63);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v41 + 9, (_DWORD *)&v63 + 1);
          v41[5] = v64[0];
          *v41 = 0;
          v41[1] = 0;
          v41[2] = v32;
          *v31 = (uint64_t *)v41;
          if (*v66)
          {
            v66 = (uint64_t **)*v66;
            v41 = (void **)*v31;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v67, (uint64_t *)v41);
          ++v68;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        __p[0] = 0;
        __p[1] = 0;
        v73 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v71, &v63);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v71 + 4, (_DWORD *)&v63 + 1);
        LOBYTE(v74) = 0;
        Name = REComponentClassGetName();
        MEMORY[0x2348B4AD4](__p, Name);
        v43 = v60[33];
        if (v43 >= v60[34])
        {
          v44 = std::vector<realityio::LiveSceneManager::CompatibilityFault>::__push_back_slow_path<realityio::LiveSceneManager::CompatibilityFault const&>(v59, (uint64_t)&v71);
        }
        else
        {
          std::allocator<realityio::LiveSceneManager::CompatibilityFault>::construct[abi:ne180100]<realityio::LiveSceneManager::CompatibilityFault,realityio::LiveSceneManager::CompatibilityFault const&>(v60[33], (uint64_t)&v71);
          v44 = v43 + 40;
          v60[33] = v43 + 40;
        }
        v60[33] = v44;
        if (SHIBYTE(v73) < 0)
          operator delete(__p[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
        goto LABEL_63;
      }
LABEL_91:
      v60[35] = a2;
      std::__tree<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::destroy(v67);
      v71 = &v69;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    }
  }
  return v59;
}

void sub_23014A104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  a21 = (uint64_t *)&a14;
  std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a14 = &a24;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::getAllBuilders(uint64_t a1, uint64_t *a2)
{
  __int128 *i;

  std::vector<std::weak_ptr<realityio::Builder>>::__clear[abi:ne180100](a2);
  for (i = *(__int128 **)(a1 + 16); i; i = *(__int128 **)i)
    std::vector<std::weak_ptr<realityio::Builder>>::push_back[abi:ne180100](a2, i + 1);
}

void realityio::LiveSceneManager::CompatibilityFault::~CompatibilityFault(void **this)
{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23014A2E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFA340;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFA340;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return realityio::LiveSceneUpdate::isStageMetadataDirty(*(realityio::LiveSceneUpdate **)(a1 + 8), a2);
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFA3D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFA3D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return realityio::LiveSceneUpdate::isPrimMetadataDirty(*(realityio::LiveSceneUpdate **)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFA450;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFA450;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return realityio::LiveSceneUpdate::isPropertyDirty(*(realityio::LiveSceneUpdate **)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFA4D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFA4D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  return realityio::LiveSceneUpdate::isPropertyMetadataDirty(*(realityio::LiveSceneUpdate **)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFA560;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFA560;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)(a1 + 8) + 8));
  return pxrInternal__aapl__pxrReserved__::UsdStage::HasMetadata(v3, a2);
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFA5E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFA5E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t HasMetadata;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)(a1 + 8) + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10))
    HasMetadata = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10, a3);
  else
    HasMetadata = 0;
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  return HasMetadata;
}

void sub_23014A7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;

  if ((a12 & 7) != 0)
  {
    v13 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a11);
  if (a10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFA660;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFA660;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t HasProperty;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)(a1 + 8) + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10))
    HasProperty = pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, a3);
  else
    HasProperty = 0;
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  return HasProperty;
}

void sub_23014A980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;

  if ((a12 & 7) != 0)
  {
    v13 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a11);
  if (a10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFA6E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFA6E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t HasMetadata;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)(a1 + 8) + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v12)
    && pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, a3))
  {
    HasMetadata = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v12, a4);
  }
  else
  {
    HasMetadata = 0;
  }
  if ((v15 & 7) != 0)
  {
    v9 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  if (v13)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  return HasMetadata;
}

void sub_23014AB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;

  if ((a12 & 7) != 0)
  {
    v13 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a11);
  if (a10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

_QWORD *std::vector<std::shared_ptr<realityio::Builder>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::Builder>*,std::shared_ptr<realityio::Builder>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v4 = result;
    if (a4 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(result + 2), a4);
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v7];
    while (a2 != a3)
    {
      *result = *a2;
      v8 = a2[1];
      result[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      result += 2;
    }
    v4[1] = result;
  }
  return result;
}

void sub_23014AC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<void const*>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void std::vector<realityio::LiveSceneManager::CompatibilityFault>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<realityio::LiveSceneManager::CompatibilityFault>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<realityio::LiveSceneManager::CompatibilityFault>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::default_delete<realityio::LiveSceneManager::LiveSceneUpdateContext>::operator()[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 128);
  v2 = *(_QWORD **)(a1 + 104);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 112);
    v4 = *(void **)(a1 + 104);
    if (v3 != v2)
    {
      do
        v3 = realityio::WrappedRERef<REEntity *>::~WrappedRERef(v3 - 1);
      while (v3 != v2);
      v4 = *(void **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD **)(a1 + 96);
  if (v5 == (_QWORD *)(a1 + 72))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v5)
    {
LABEL_11:
      v7 = (void **)(a1 + 48);
      std::vector<std::function<pxrInternal__aapl__pxrReserved__::SdfPredicateFunctionResult ()(pxrInternal__aapl__pxrReserved__::UsdObject const&)>>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = (void **)(a1 + 24);
      std::vector<std::function<pxrInternal__aapl__pxrReserved__::SdfPredicateFunctionResult ()(pxrInternal__aapl__pxrReserved__::UsdObject const&)>>::__destroy_vector::operator()[abi:ne180100](&v7);

      realityio::WrappedCFRef<void const*>::~WrappedCFRef((const void **)(a1 + 8));
      realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef((const void **)a1);
      JUMPOUT(0x2348B4E1CLL);
    }
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
  goto LABEL_11;
}

void std::vector<realityio::LiveSceneManager::AssetRecord>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<realityio::LiveSceneManager::AssetRecord>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::allocator<realityio::LiveSceneManager::AssetRecord>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 32);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)a2);
}

uint64_t std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>,std::reverse_iterator<std::function<void ()(void)>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7 = a7;
  if (a3 != a5)
  {
    v10 = (_QWORD *)(a7 - 8);
    do
    {
      v11 = *(_QWORD *)(a3 - 8);
      v12 = a3 - 32;
      v13 = v10;
      if (v11)
      {
        if (v12 == v11)
        {
          *v10 = v10 - 3;
          (*(void (**)(_QWORD))(**(_QWORD **)(a3 - 8) + 24))(*(_QWORD *)(a3 - 8));
          goto LABEL_8;
        }
        *v10 = v11;
        v13 = (_QWORD *)(a3 - 8);
      }
      *v13 = 0;
LABEL_8:
      v10 -= 4;
      v7 -= 32;
      a3 = v12;
    }
    while (v12 != a5);
  }
  return a6;
}

void **std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::function<void ()(void)>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<std::function<void ()(void)>>::clear[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_QWORD *)result[2];
  if (v1 != v2)
  {
    v3 = result;
    while (1)
    {
      result = v1 - 4;
      v3[2] = v1 - 4;
      v4 = (_QWORD *)*(v1 - 1);
      if (v4 == result)
        break;
      if (v4)
      {
        result = v4;
        v5 = 5;
LABEL_7:
        (*(void (**)(void))(*result + 8 * v5))();
        result = (_QWORD *)v3[2];
      }
      v1 = result;
      if (result == v2)
        return result;
    }
    v5 = 4;
    goto LABEL_7;
  }
  return result;
}

uint64_t std::vector<realityio::WrappedRERef<REEntity *>>::__push_back_slow_path<realityio::WrappedRERef<REEntity *> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[8 * v9];
  v12 = *a2;
  *(_QWORD *)v11 = *a2;
  if (v12)
  {
    RERetain();
    v11 = v16;
  }
  v16 = v11 + 8;
  std::vector<realityio::WrappedRERef<REEntity *>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<realityio::WrappedRERef<REEntity *>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_23014B250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<realityio::WrappedRERef<REEntity *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::WrappedRERef<REEntity *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::WrappedRERef<REEntity *>>,std::reverse_iterator<realityio::WrappedRERef<REEntity *>*>,std::reverse_iterator<realityio::WrappedRERef<REEntity *>*>,std::reverse_iterator<realityio::WrappedRERef<REEntity *>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::WrappedRERef<REEntity *>>,std::reverse_iterator<realityio::WrappedRERef<REEntity *>*>,std::reverse_iterator<realityio::WrappedRERef<REEntity *>*>,std::reverse_iterator<realityio::WrappedRERef<REEntity *>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(a3 + v11 - 8);
      *(_QWORD *)(a7 - 8 + v11) = v12;
      if (v12)
        RERetain();
      v11 -= 8;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_23014B350(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 8)
    realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<realityio::WrappedRERef<REEntity *>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<realityio::AssetLoadTracker::Asset>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFA760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AssetLoadTracker::Asset>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFA760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__shared_ptr_emplace<realityio::AssetLoadTracker::Asset>::__on_zero_shared(_QWORD *a1)
{
  a1[3] = &off_24FDF09F0;
  realityio::WrappedRERef<REAssetLoadRequest *>::~WrappedRERef(a1 + 7);
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 4);
}

void std::__shared_ptr_emplace<realityio::LiveSceneManager::AssetDeferredLoadGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFA7B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::LiveSceneManager::AssetDeferredLoadGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFA7B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::LiveSceneManager::AssetDeferredLoadGroup>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  *(_QWORD *)(a1 + 24) = &off_24FDFA800;
  v2 = (void **)(a1 + 96);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 32));
}

void _ZNSt3__110__function6__funcIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_ENS_9allocatorIS5_EEFvvEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_ENS_9allocatorIS5_EEFvvEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFA818;
  return result;
}

void _ZNKSt3__110__function6__funcIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_ENS_9allocatorIS5_EEFvvEE7__cloneEPNS0_6__baseIS8_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFA818;
}

uint64_t _ZNKSt3__110__function6__funcIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_ENS_9allocatorIS5_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_E))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_ENS_9allocatorIS5_EEFvvEE11target_typeEv()
{
  return &_ZTIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_E;
}

void std::__shared_ptr_pointer<realityio::SyncUpdateEngineQueueManager *,std::shared_ptr<realityio::EngineQueueManager>::__shared_ptr_default_delete<realityio::EngineQueueManager,realityio::SyncUpdateEngineQueueManager>,std::allocator<realityio::SyncUpdateEngineQueueManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<realityio::SyncUpdateEngineQueueManager *,std::shared_ptr<realityio::EngineQueueManager>::__shared_ptr_default_delete<realityio::EngineQueueManager,realityio::SyncUpdateEngineQueueManager>,std::allocator<realityio::SyncUpdateEngineQueueManager>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<realityio::SyncUpdateEngineQueueManager>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<realityio::SyncUpdateEngineQueueManager *,std::shared_ptr<realityio::EngineQueueManager>::__shared_ptr_default_delete<realityio::EngineQueueManager,realityio::SyncUpdateEngineQueueManager>,std::allocator<realityio::SyncUpdateEngineQueueManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<realityio::SyncUpdateEngineQueueManager>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100]((_QWORD *)(result + 88));
    std::mutex::~mutex((std::mutex *)(v1 + 24));

    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

void std::__shared_ptr_pointer<realityio::AsyncUpdateEngineQueueManager *,std::shared_ptr<realityio::EngineQueueManager>::__shared_ptr_default_delete<realityio::EngineQueueManager,realityio::AsyncUpdateEngineQueueManager>,std::allocator<realityio::AsyncUpdateEngineQueueManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<realityio::AsyncUpdateEngineQueueManager *,std::shared_ptr<realityio::EngineQueueManager>::__shared_ptr_default_delete<realityio::EngineQueueManager,realityio::AsyncUpdateEngineQueueManager>,std::allocator<realityio::AsyncUpdateEngineQueueManager>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {

    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::AsyncUpdateEngineQueueManager *,std::shared_ptr<realityio::EngineQueueManager>::__shared_ptr_default_delete<realityio::EngineQueueManager,realityio::AsyncUpdateEngineQueueManager>,std::allocator<realityio::AsyncUpdateEngineQueueManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::unique_ptr<realityio::AsyncUpdateEngineQueueManager>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {

    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFA988;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFA988;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  realityio::LiveSceneUpdate *v2;
  uint64_t v3;
  _BYTE v4[288];
  _BYTE v5[16];

  v1 = *(_QWORD *)(a1 + 8);
  realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v5, 2040, v1);
  realityio::LiveSceneUpdate::makeFromTrackedStageState(*(void ***)(v1 + 232), *(realityio::UsdStageStateTracker **)(v1 + 24), (uint64_t)v4);
  v2 = (realityio::LiveSceneUpdate *)operator new();
  realityio::LiveSceneUpdate::LiveSceneUpdate(v2, (const realityio::LiveSceneUpdate *)v4);
  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = v2;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  realityio::LiveSceneUpdate::~LiveSceneUpdate((realityio::LiveSceneUpdate *)v4);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v5);
}

void sub_23014B834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x2348B4E1C](v9, 0x10F1C40428E376ELL);
  realityio::LiveSceneUpdate::~LiveSceneUpdate((realityio::LiveSceneUpdate *)&a9);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)(v10 - 48));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0>,void ()(void)>::target_type()
{
}

realityio::LiveSceneUpdate *realityio::LiveSceneUpdate::LiveSceneUpdate(realityio::LiveSceneUpdate *this, const realityio::LiveSceneUpdate *a2)
{
  const realityio::internal::PrimToEntityMap::EntityData *v4;
  const realityio::internal::PrimToEntityMap::EntityData *v5;
  unint64_t v6;
  std::string *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t **v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  uint64_t **v22;
  const void **v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t **v27;
  uint64_t *v28;
  std::string *v29;
  __int128 v30;
  const void **v31;
  const void ***v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  std::string *v54;
  __int128 *v55;
  __int128 v56;
  std::string *v57;
  const std::string::value_type **v58;
  __int128 v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t *v64;
  _QWORD *v65;
  _QWORD *v66;
  char *v67;
  _QWORD *v68;
  uint64_t **v69;
  char *v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string **v75;
  _QWORD *v76;
  std::string *size;
  std::string **v78;
  std::string *v79;
  std::string *v80;
  uint64_t **p_size;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  realityio::LiveSceneUpdate *v88;
  const realityio::LiveSceneUpdate *v89;
  uint64_t **v90;
  uint64_t **v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t **v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  char v99;
  _QWORD *v100;
  std::string *v101;
  char v102;
  uint64_t *v103;
  char *v104;
  char v105;
  uint64_t v106[2];

  *(_QWORD *)this = &off_24FDF6D90;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 2, *((const void **)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v4 = (const realityio::internal::PrimToEntityMap::EntityData *)*((_QWORD *)a2 + 5);
  v5 = (const realityio::internal::PrimToEntityMap::EntityData *)*((_QWORD *)a2 + 6);
  v88 = this;
  v89 = a2;
  v103 = (uint64_t *)((char *)this + 40);
  LOBYTE(v104) = 0;
  if (v5 != v4)
  {
    v6 = 0x4EC4EC4EC4EC4EC5 * ((v5 - v4) >> 3);
    if (v6 >= 0x276276276276277)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::internal::PrimToEntityMap::EntityData>>((uint64_t)this + 56, v6);
    *((_QWORD *)this + 5) = v7;
    *((_QWORD *)this + 6) = v7;
    *((_QWORD *)this + 7) = (char *)v7 + 104 * v8;
    v101 = v7;
    v106[0] = (uint64_t)v7;
    v96 = (uint64_t *)((char *)this + 56);
    v97 = v106;
    v98 = (uint64_t *)&v101;
    v99 = 0;
    do
    {
      realityio::internal::PrimToEntityMap::EntityData::EntityData(v7, v4);
      v4 = (const realityio::internal::PrimToEntityMap::EntityData *)((char *)v4 + 104);
      v7 = (std::string *)((char *)v101 + 104);
      v101 = (std::string *)((char *)v101 + 104);
    }
    while (v4 != v5);
    *((_QWORD *)this + 6) = v7;
  }
  *((_QWORD *)this + 9) = 0;
  v9 = (uint64_t *)((char *)this + 72);
  *((_QWORD *)this + 8) = (char *)this + 72;
  v10 = (char *)this + 64;
  *((_QWORD *)v10 + 2) = 0;
  v11 = (char *)*((_QWORD *)a2 + 8);
  v12 = (char *)a2 + 72;
  if (v11 != (char *)a2 + 72)
  {
    while (1)
    {
      v13 = *v9;
      if (*(uint64_t **)v10 == v9)
        break;
      v14 = v9;
      if (v13)
      {
        do
        {
          v15 = (uint64_t *)v13;
          v13 = *(_QWORD *)(v13 + 8);
        }
        while (v13);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v14[2];
          v16 = *v15 == (_QWORD)v14;
          v14 = v15;
        }
        while (v16);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v15 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 32)))
      {
        if (!*v9)
          goto LABEL_14;
LABEL_16:
        v103 = v15;
        v17 = (uint64_t **)(v15 + 1);
        goto LABEL_18;
      }
      v17 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v10, &v103, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 32));
LABEL_18:
      if (!*v17)
        goto LABEL_19;
LABEL_20:
      v19 = (char *)*((_QWORD *)v11 + 1);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(char **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (char *)*((_QWORD *)v11 + 2);
          v16 = *(_QWORD *)v20 == (_QWORD)v11;
          v11 = v20;
        }
        while (!v16);
      }
      v11 = v20;
      if (v20 == v12)
        goto LABEL_26;
    }
    v15 = v9;
    if (!v13)
    {
LABEL_14:
      v103 = v9;
      v17 = (uint64_t **)v9;
LABEL_19:
      v18 = (uint64_t *)operator new(0x30uLL);
      v96 = v18;
      v97 = v9;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v18 + 8, (_DWORD *)v11 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v18 + 9, (_DWORD *)v11 + 9);
      v18[5] = *((_QWORD *)v11 + 5);
      LOBYTE(v98) = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)v10, (uint64_t)v103, v17, v18);
      v96 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)&v96, 0);
      goto LABEL_20;
    }
    goto LABEL_16;
  }
LABEL_26:
  *((_QWORD *)v88 + 12) = 0;
  v21 = (uint64_t *)((char *)v88 + 96);
  *((_QWORD *)v88 + 11) = (char *)v88 + 96;
  v22 = (uint64_t **)((char *)v88 + 88);
  *((_QWORD *)v88 + 13) = 0;
  v23 = (const void **)*((_QWORD *)v89 + 11);
  if (v23 != (const void **)((char *)v89 + 96))
  {
    while (1)
    {
      v24 = (char *)*v21;
      if (*v22 == v21)
        break;
      v25 = (char *)v88 + 96;
      if (v24)
      {
        do
        {
          v26 = v24;
          v24 = (char *)*((_QWORD *)v24 + 1);
        }
        while (v24);
      }
      else
      {
        do
        {
          v26 = (char *)*((_QWORD *)v25 + 2);
          v16 = *(_QWORD *)v26 == (_QWORD)v25;
          v25 = v26;
        }
        while (v16);
      }
      if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)v88 + 104, (const void **)v26 + 4, v23 + 4))
      {
        if (!*v21)
          goto LABEL_34;
LABEL_36:
        v96 = (uint64_t *)v26;
        v27 = (uint64_t **)(v26 + 8);
        goto LABEL_38;
      }
      v27 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)v22, &v96, v23 + 4);
LABEL_38:
      if (!*v27)
        goto LABEL_39;
LABEL_43:
      v31 = (const void **)v23[1];
      if (v31)
      {
        do
        {
          v32 = (const void ***)v31;
          v31 = (const void **)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (const void ***)v23[2];
          v16 = *v32 == v23;
          v23 = (const void **)v32;
        }
        while (!v16);
      }
      v23 = (const void **)v32;
      if (v32 == (const void ***)((char *)v89 + 96))
        goto LABEL_49;
    }
    v26 = (char *)v88 + 96;
    if (!v24)
    {
LABEL_34:
      v96 = (uint64_t *)((char *)v88 + 96);
      v27 = (uint64_t **)((char *)v88 + 96);
LABEL_39:
      v28 = (uint64_t *)operator new(0x40uLL);
      v29 = (std::string *)(v28 + 4);
      if (*((char *)v23 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v29, (const std::string::value_type *)v23[4], (std::string::size_type)v23[5]);
      }
      else
      {
        v30 = *((_OWORD *)v23 + 2);
        v28[6] = (uint64_t)v23[6];
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
      }
      v28[7] = (uint64_t)v23[7];
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v22, (uint64_t)v96, v27, v28);
      goto LABEL_43;
    }
    goto LABEL_36;
  }
LABEL_49:
  *((_QWORD *)v88 + 15) = 0;
  *((_QWORD *)v88 + 14) = (char *)v88 + 120;
  v91 = (uint64_t **)((char *)v88 + 112);
  v92 = (uint64_t *)((char *)v88 + 120);
  *((_QWORD *)v88 + 16) = 0;
  v33 = (_QWORD *)*((_QWORD *)v89 + 14);
  if (v33 != (_QWORD *)((char *)v89 + 120))
  {
    do
    {
      v34 = (_QWORD *)((char *)v88 + 120);
      v35 = (_QWORD *)*v92;
      if (*v91 != v92)
      {
        v36 = (char *)v88 + 120;
        if (v35)
        {
          do
          {
            v34 = v35;
            v35 = (_QWORD *)v35[1];
          }
          while (v35);
        }
        else
        {
          do
          {
            v34 = (_QWORD *)*((_QWORD *)v36 + 2);
            v16 = *v34 == (_QWORD)v36;
            v36 = (char *)v34;
          }
          while (v16);
        }
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v34 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v33 + 4)))
        {
          v37 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v91, &v100, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v33 + 4));
LABEL_60:
          if (*v37)
            goto LABEL_97;
          goto LABEL_63;
        }
        v35 = (_QWORD *)*v92;
      }
      if (v35)
      {
        v100 = v34;
        v37 = (uint64_t **)(v34 + 1);
        goto LABEL_60;
      }
      v37 = (uint64_t **)((char *)v88 + 120);
      v100 = (_QWORD *)((char *)v88 + 120);
LABEL_63:
      v38 = (uint64_t *)operator new(0x40uLL);
      v90 = v37;
      v103 = v38;
      v104 = (char *)v88 + 120;
      v105 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v38 + 8, (_DWORD *)v33 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v38 + 9, (_DWORD *)v33 + 9);
      v38[6] = 0;
      v39 = v38 + 6;
      v38[5] = (uint64_t)(v38 + 6);
      v40 = (uint64_t)(v38 + 5);
      *(_QWORD *)(v40 + 16) = 0;
      v41 = (_QWORD *)v33[5];
      if (v41 != v33 + 6)
      {
        v42 = 0;
        v43 = v39;
        v93 = v40;
        v94 = v39;
        while (1)
        {
          if (v43 == v39)
          {
            v45 = v39;
            if (v42)
            {
LABEL_74:
              v106[0] = (uint64_t)v45;
              v46 = (uint64_t **)(v45 + 1);
              goto LABEL_76;
            }
          }
          else
          {
            v44 = v39;
            if (v42)
            {
              do
              {
                v45 = v42;
                v42 = (uint64_t *)v42[1];
              }
              while (v42);
            }
            else
            {
              do
              {
                v45 = (uint64_t *)v44[2];
                v16 = *v45 == (_QWORD)v44;
                v44 = v45;
              }
              while (v16);
            }
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v45 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v41 + 4)))
            {
              v46 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(v40, v106, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v41 + 4));
LABEL_76:
              if (*v46)
                goto LABEL_89;
              goto LABEL_77;
            }
            if (*v39)
              goto LABEL_74;
          }
          v106[0] = (uint64_t)v39;
          v46 = (uint64_t **)v39;
LABEL_77:
          v47 = (uint64_t *)operator new(0x40uLL);
          v96 = v47;
          v97 = v39;
          LOBYTE(v98) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v47 + 8, (_DWORD *)v41 + 8);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v47 + 9, (_DWORD *)v41 + 9);
          v47[5] = 0;
          v47[6] = 0;
          v47[7] = 0;
          v49 = v41[5];
          v48 = v41[6];
          v101 = (std::string *)(v47 + 5);
          v102 = 0;
          if (v48 != v49)
          {
            v50 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v49) >> 4);
            if (v50 >= 0x555555555555556)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)(v47 + 7), v50);
            v52 = 0;
            v47[5] = (uint64_t)v51;
            v47[6] = (uint64_t)v51;
            v47[7] = (uint64_t)&v51[48 * v53];
            do
            {
              v54 = (std::string *)&v51[v52];
              v55 = (__int128 *)(v49 + v52);
              if (*(char *)(v49 + v52 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v54, *(const std::string::value_type **)v55, *((_QWORD *)v55 + 1));
              }
              else
              {
                v56 = *v55;
                v54->__r_.__value_.__r.__words[2] = *((_QWORD *)v55 + 2);
                *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v56;
              }
              v57 = (std::string *)&v51[v52 + 24];
              v58 = (const std::string::value_type **)(v49 + v52 + 24);
              if (*(char *)(v49 + v52 + 47) < 0)
              {
                std::string::__init_copy_ctor_external(v57, *v58, *(_QWORD *)(v49 + v52 + 32));
              }
              else
              {
                v59 = *(_OWORD *)v58;
                *(_QWORD *)&v51[v52 + 40] = *(_QWORD *)(v49 + v52 + 40);
                *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v59;
              }
              v52 += 48;
            }
            while (v49 + v52 != v48);
            v47[6] = (uint64_t)&v51[v52];
            v47 = v96;
            v40 = v93;
            v39 = v94;
          }
          LOBYTE(v98) = 1;
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)v40, v106[0], v46, v47);
          v96 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v96, 0);
LABEL_89:
          v60 = (_QWORD *)v41[1];
          if (v60)
          {
            do
            {
              v61 = v60;
              v60 = (_QWORD *)*v60;
            }
            while (v60);
          }
          else
          {
            do
            {
              v61 = (_QWORD *)v41[2];
              v16 = *v61 == (_QWORD)v41;
              v41 = v61;
            }
            while (!v16);
          }
          if (v61 == v33 + 6)
            break;
          v42 = (uint64_t *)*v39;
          v43 = *(uint64_t **)v40;
          v41 = v61;
        }
      }
      v105 = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v91, (uint64_t)v100, v90, v103);
      v103 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v103, 0);
LABEL_97:
      v62 = (_QWORD *)v33[1];
      if (v62)
      {
        do
        {
          v63 = v62;
          v62 = (_QWORD *)*v62;
        }
        while (v62);
      }
      else
      {
        do
        {
          v63 = (_QWORD *)v33[2];
          v16 = *v63 == (_QWORD)v33;
          v33 = v63;
        }
        while (!v16);
      }
      v33 = v63;
    }
    while (v63 != (_QWORD *)((char *)v89 + 120));
  }
  *((_QWORD *)v88 + 18) = 0;
  v64 = (uint64_t *)((char *)v88 + 144);
  *((_QWORD *)v88 + 17) = (char *)v88 + 144;
  v95 = (uint64_t **)((char *)v88 + 136);
  *((_QWORD *)v88 + 19) = 0;
  v65 = (_QWORD *)*((_QWORD *)v89 + 17);
  if (v65 != (_QWORD *)((char *)v89 + 144))
  {
    do
    {
      v66 = (_QWORD *)*v64;
      if (*v95 == v64)
      {
        v68 = (_QWORD *)((char *)v88 + 144);
        if (v66)
        {
LABEL_113:
          v106[0] = (uint64_t)v68;
          v69 = (uint64_t **)(v68 + 1);
          goto LABEL_115;
        }
      }
      else
      {
        v67 = (char *)v88 + 144;
        if (v66)
        {
          do
          {
            v68 = v66;
            v66 = (_QWORD *)v66[1];
          }
          while (v66);
        }
        else
        {
          do
          {
            v68 = (_QWORD *)*((_QWORD *)v67 + 2);
            v16 = *v68 == (_QWORD)v67;
            v67 = (char *)v68;
          }
          while (v16);
        }
        if (!pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<())
        {
          v69 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)v95, v106);
LABEL_115:
          if (*v69)
            goto LABEL_145;
          goto LABEL_116;
        }
        if (*v64)
          goto LABEL_113;
      }
      v106[0] = (uint64_t)v88 + 144;
      v69 = (uint64_t **)((char *)v88 + 144);
LABEL_116:
      v70 = (char *)operator new(0x68uLL);
      v103 = (uint64_t *)v70;
      v104 = (char *)v88 + 144;
      v105 = 0;
      v71 = (std::string *)(v70 + 32);
      if (*((char *)v65 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v71, (const std::string::value_type *)v65[4], v65[5]);
      }
      else
      {
        v72 = *((_OWORD *)v65 + 2);
        *((_QWORD *)v70 + 6) = v65[6];
        *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
      }
      v73 = (std::string *)(v70 + 56);
      if (*((char *)v65 + 79) < 0)
      {
        std::string::__init_copy_ctor_external(v73, (const std::string::value_type *)v65[7], v65[8]);
      }
      else
      {
        v74 = *(_OWORD *)(v65 + 7);
        *((_QWORD *)v70 + 9) = v65[9];
        *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
      }
      *((_QWORD *)v70 + 11) = 0;
      v75 = (std::string **)(v70 + 88);
      *((_QWORD *)v70 + 10) = v70 + 88;
      *((_QWORD *)v70 + 12) = 0;
      v76 = (_QWORD *)v65[10];
      if (v76 != v65 + 11)
      {
        size = 0;
        v78 = (std::string **)(v70 + 88);
        while (1)
        {
          if (v78 == v75)
          {
            v80 = (std::string *)(v70 + 88);
            if (size)
            {
LABEL_133:
              v101 = v80;
              p_size = (uint64_t **)&v80->__r_.__value_.__l.__size_;
              goto LABEL_135;
            }
          }
          else
          {
            v79 = (std::string *)(v70 + 88);
            if (size)
            {
              do
              {
                v80 = size;
                size = (std::string *)size->__r_.__value_.__l.__size_;
              }
              while (size);
            }
            else
            {
              do
              {
                v80 = (std::string *)v79->__r_.__value_.__r.__words[2];
                v16 = v80->__r_.__value_.__r.__words[0] == (_QWORD)v79;
                v79 = v80;
              }
              while (v16);
            }
            if (!realityio::TextureImportOperationSettings::operator<((uint64_t)&v80[1].__r_.__value_.__l.__size_, (uint64_t)(v76 + 4)))
            {
              p_size = (uint64_t **)std::__tree<realityio::TextureImportOperationSettings>::__find_equal<realityio::TextureImportOperationSettings>((uint64_t)(v70 + 80), &v101, (uint64_t)(v76 + 4));
LABEL_135:
              if (*p_size)
                goto LABEL_137;
              goto LABEL_136;
            }
            if (*v75)
              goto LABEL_133;
          }
          v101 = (std::string *)(v70 + 88);
          p_size = (uint64_t **)(v70 + 88);
LABEL_136:
          std::__tree<realityio::TextureImportOperationSettings>::__construct_node<realityio::TextureImportOperationSettings const&>((uint64_t)(v70 + 80), (const realityio::TextureImportOperationSettings *)(v76 + 4), (uint64_t)&v96);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)v70 + 10, (uint64_t)v101, p_size, v96);
          v96 = 0;
          std::unique_ptr<std::__tree_node<realityio::TextureImportOperationSettings,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TextureImportOperationSettings,void *>>>>::reset[abi:ne180100]((uint64_t)&v96, 0);
LABEL_137:
          v82 = (_QWORD *)v76[1];
          if (v82)
          {
            do
            {
              v83 = v82;
              v82 = (_QWORD *)*v82;
            }
            while (v82);
          }
          else
          {
            do
            {
              v83 = (_QWORD *)v76[2];
              v16 = *v83 == (_QWORD)v76;
              v76 = v83;
            }
            while (!v16);
          }
          if (v83 == v65 + 11)
            break;
          size = *v75;
          v78 = (std::string **)*((_QWORD *)v70 + 10);
          v76 = v83;
        }
      }
      v105 = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v95, v106[0], v69, v103);
      v103 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v103, 0);
LABEL_145:
      v84 = (_QWORD *)v65[1];
      if (v84)
      {
        do
        {
          v85 = v84;
          v84 = (_QWORD *)*v84;
        }
        while (v84);
      }
      else
      {
        do
        {
          v85 = (_QWORD *)v65[2];
          v16 = *v85 == (_QWORD)v65;
          v65 = v85;
        }
        while (!v16);
      }
      v65 = v85;
    }
    while (v85 != (_QWORD *)((char *)v89 + 144));
  }
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::map[abi:ne180100]((uint64_t *)v88 + 20, (uint64_t)v89 + 160);
  *((_QWORD *)v88 + 24) = *((_QWORD *)v89 + 24);
  *((_QWORD *)v88 + 23) = &off_24FDE8388;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v88 + 24);
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::map[abi:ne180100]((uint64_t *)v88 + 25, (uint64_t)v89 + 200);
  *((_QWORD *)v88 + 28) = &off_24FDF4548;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)v88 + 232, (uint64_t)v89 + 232);
  v86 = *((_QWORD *)v89 + 34);
  *((_BYTE *)v88 + 280) = *((_BYTE *)v89 + 280);
  *((_QWORD *)v88 + 34) = v86;
  return v88;
}

void sub_23014C3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, unsigned int **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  unsigned int **v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t v27;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(v25, *(_QWORD **)(v27 + 208));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v24);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(v23, *(_QWORD **)(a11 + 168));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy(a22, *v26);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(a17, *a18);
  realityio::internal::PrimToEntityMap::~PrimToEntityMap(a9);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(a10);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::internal::PrimToEntityMap::EntityData>,realityio::internal::PrimToEntityMap::EntityData*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      v6 = *(_QWORD *)a1;
      do
      {
        v4 -= 104;
        std::allocator<realityio::internal::PrimToEntityMap::EntityData>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFAA08;
  return result;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFAA08;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1>,void ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24FDFAA88;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24FDFAA88;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 1));
  JUMPOUT(0x2348B4E1CLL);
}

_DWORD *std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = (_DWORD *)(a1 + 8);
  v3 = operator new(0x18uLL);
  *(_QWORD *)v3 = &off_24FDFAA88;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v3 + 2, v2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v3 + 3, (_DWORD *)(a1 + 12));
  *((_QWORD *)v3 + 2) = *(_QWORD *)(a1 + 16);
  return v3;
}

_DWORD *std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  _DWORD *result;

  *(_QWORD *)a2 = &off_24FDFAA88;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 8), (_DWORD *)(a1 + 8));
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 12), (_DWORD *)(a1 + 12));
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t *NameToken;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  realityio::LiveSceneUpdate *v19;
  uint64_t v20;
  char **v21;
  _QWORD *v22[35];
  char *v23;
  char *v24;
  unint64_t v25;
  unsigned int *v26;
  _QWORD v27[11];
  uint64_t *v28;
  _QWORD *v29[2];
  char v30[8];
  int v31;
  int v32;
  char v33;
  _QWORD *v34;
  _QWORD v35[7];
  int v36;

  v1 = (char **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v22[0] = 0;
  v22[1] = 0;
  v21 = (char **)v22;
  realityio::UsdPrimDelta::UsdPrimDelta((uint64_t)v30, (_DWORD *)(a1 + 8), 1, (uint64_t)&v21);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)&v21, v22[0]);
  v29[0] = 0;
  v29[1] = 0;
  v28 = (uint64_t *)v29;
  v21 = v1;
  v3 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(&v28, (pxrInternal__aapl__pxrReserved__::SdfPath *)v1, (uint64_t)&std::piecewise_construct, (_DWORD **)&v21);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v3 + 6), &v31);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v3 + 52, &v32);
  *((_BYTE *)v3 + 56) = v33;
  if (v3 + 5 != (uint64_t *)v30)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *> *,long>>((uint64_t **)v3 + 8, v34, v35);
    *((_DWORD *)v3 + 32) = v36;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>(v3 + 12, (_QWORD *)v35[5], 0);
  }
  v26 = *(unsigned int **)(v2 + 32);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v26);
  realityio::UsdStageDelta::UsdStageDelta(v27, &v26, (uint64_t)&v28);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v26);
  realityio::UsdStageStateTracker::updateWithStageDelta(*(realityio::UsdStageStateTracker **)(v2 + 232), (const realityio::UsdStageDelta *)v27);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v4 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v1) & 0xFFFFFFFFFFFFFFF8;
  if (v4)
  {
    if (*(char *)(v4 + 39) < 0)
    {
      if (!*(_QWORD *)(v4 + 24))
        goto LABEL_33;
    }
    else if (!*(_BYTE *)(v4 + 39))
    {
      goto LABEL_33;
    }
    NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v1);
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]<true,0>((uint64_t)&v21, v1, NameToken);
    v6 = v24;
    if ((unint64_t)v24 >= v25)
    {
      v7 = (v24 - v23) >> 4;
      if ((unint64_t)(v7 + 1) >> 60)
        std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
      v8 = (uint64_t)(v25 - (_QWORD)v23) >> 3;
      if (v8 <= v7 + 1)
        v8 = v7 + 1;
      if (v25 - (unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v9 = 0xFFFFFFFFFFFFFFFLL;
      else
        v9 = v8;
      if (v9)
      {
        if (v9 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(16 * v9);
      }
      else
      {
        v10 = 0;
      }
      v11 = &v10[16 * v7];
      v12 = &v10[16 * v9];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11, &v21);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 1, (_DWORD *)&v21 + 1);
      *((_QWORD **)v11 + 1) = v22[0];
      v22[0] = 0;
      v14 = v23;
      v13 = v24;
      if (v24 == v23)
      {
        v23 = v11;
        v24 = v11 + 16;
        v25 = (unint64_t)v12;
      }
      else
      {
        v15 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11[v15 - 16], &v13[v15 - 16]);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11[v15 - 12], &v13[v15 - 12]);
          *(_QWORD *)&v11[v15 - 8] = *(_QWORD *)&v13[v15 - 8];
          *(_QWORD *)&v13[v15 - 8] = 0;
          v15 -= 16;
        }
        while (&v13[v15] != v14);
        v13 = v23;
        v16 = v24;
        v23 = &v11[v15];
        v24 = v11 + 16;
        v25 = (unint64_t)v12;
        while (v16 != v13)
        {
          v16 -= 16;
          std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::destroy[abi:ne180100]((uint64_t)v16);
        }
      }
      if (v13)
        operator delete(v13);
      v24 = v11 + 16;
      if (((uint64_t)v22[0] & 7) != 0)
      {
        v17 = (unsigned int *)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v24, &v21);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 1, (_DWORD *)&v21 + 1);
      *((_QWORD **)v6 + 1) = v22[0];
      v22[0] = 0;
      v24 = v6 + 16;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  }
LABEL_33:
  realityio::LiveSceneUpdate::makeFromTrackedStageState(*(void ***)(v2 + 232), *(realityio::UsdStageStateTracker **)(v2 + 24), (uint64_t)&v21);
  v19 = (realityio::LiveSceneUpdate *)operator new();
  realityio::LiveSceneUpdate::LiveSceneUpdate(v19, (const realityio::LiveSceneUpdate *)&v21);
  v20 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  realityio::LiveSceneUpdate::~LiveSceneUpdate((realityio::LiveSceneUpdate *)&v21);
  v21 = &v23;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)v27);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&v28, v29[0]);
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)v30);
}

void sub_23014CBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  a9 = (void **)&a45;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100](&a9);
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)&a49);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(v49 - 200, *(_QWORD **)(v49 - 192));
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)(v49 - 176));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__alloc_func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *std::vector<realityio::LiveSceneManager::AssetRecord>::__construct_one_at_end[abi:ne180100]<realityio::LiveSceneManager::AssetRecord>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _DWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 8) = v5;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v4 + 32), (_DWORD *)(a2 + 32));
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v4 + 36), (_DWORD *)(a2 + 36));
  *(_QWORD *)(a1 + 8) = v4 + 40;
  return result;
}

uint64_t std::vector<realityio::LiveSceneManager::AssetRecord>::__push_back_slow_path<realityio::LiveSceneManager::AssetRecord>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::LiveSceneManager::AssetRecord>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[40 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v12 = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 8) = v12;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 8, (_DWORD *)(a2 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 9, (_DWORD *)(a2 + 36));
  v15[2] = v11 + 40;
  std::vector<realityio::LiveSceneManager::AssetRecord>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<realityio::LiveSceneManager::AssetRecord>::~__split_buffer(v15);
  return v13;
}

void sub_23014CF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<realityio::LiveSceneManager::AssetRecord>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::LiveSceneManager::AssetRecord>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::LiveSceneManager::AssetRecord>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::LiveSceneManager::AssetRecord>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::LiveSceneManager::AssetRecord>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  uint64_t v15;
  uint64_t v16;

  v7 = a7;
  v15 = a6;
  v16 = a7;
  if (a3 != a5)
  {
    v9 = a3;
    v10 = a3;
    do
    {
      v11 = *(_QWORD *)(v10 - 40);
      v10 -= 40;
      *(_QWORD *)(v7 - 40) = v11;
      if (v11)
        RERetain();
      v12 = (std::string *)(v7 - 32);
      if (*(char *)(v9 - 9) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(v9 - 32), *(_QWORD *)(v9 - 24));
      }
      else
      {
        v13 = *(_OWORD *)(v9 - 32);
        *(_QWORD *)(v7 - 16) = *(_QWORD *)(v9 - 16);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 4), (_DWORD *)(v9 - 4));
      v7 = v16 - 40;
      v16 -= 40;
      v9 = v10;
    }
    while (v10 != a5);
    return v15;
  }
  return a6;
}

void sub_23014D118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(v9 - 40));
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::LiveSceneManager::AssetRecord>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::LiveSceneManager::AssetRecord>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (v2 != v3)
    {
      v4 = *(_QWORD *)a1;
      do
      {
        std::allocator<realityio::LiveSceneManager::AssetRecord>::destroy[abi:ne180100](v4, v2);
        v2 += 40;
      }
      while (v2 != v3);
    }
  }
  return a1;
}

void **std::__split_buffer<realityio::LiveSceneManager::AssetRecord>::~__split_buffer(void **a1)
{
  std::__split_buffer<realityio::LiveSceneManager::AssetRecord>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<realityio::LiveSceneManager::AssetRecord>::clear[abi:ne180100](_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = result[1];
  v1 = result[2];
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = v3[4];
      v3[2] = v1 - 40;
      result = std::allocator<realityio::LiveSceneManager::AssetRecord>::destroy[abi:ne180100](v4, v1 - 40);
      v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,std::hash<pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  if (!*((_QWORD *)&xmmword_255E54D38 + 1))
    return 0;
  v1 = a1 & 0xFFFFFFFFFFFFFFF8;
  v2 = bswap64(0x9E3779B97F4A7C55 * (a1 & 0xFFFFFFFFFFFFFFF8));
  v3 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_255E54D38 + 8));
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = v2;
    if (v2 >= *((_QWORD *)&xmmword_255E54D38 + 1))
      v4 = v2 % *((_QWORD *)&xmmword_255E54D38 + 1);
  }
  else
  {
    v4 = (*((_QWORD *)&xmmword_255E54D38 + 1) - 1) & v2;
  }
  v5 = *(_QWORD **)(xmmword_255E54D38 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v2 == v7)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v1)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *((_QWORD *)&xmmword_255E54D38 + 1))
            v7 %= *((_QWORD *)&xmmword_255E54D38 + 1);
        }
        else
        {
          v7 &= *((_QWORD *)&xmmword_255E54D38 + 1) - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<REAsset *,std::hash<REAsset *>,std::equal_to<REAsset *>,std::allocator<REAsset *>>::find<REAsset *>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  if (!a2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= a2)
      v7 = v5 % a2;
  }
  else
  {
    v7 = v5 & (a2 - 1);
  }
  v8 = *(_QWORD **)(a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= a2)
            v10 %= a2;
        }
        else
        {
          v10 &= a2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<REAsset *,std::hash<REAsset *>,std::equal_to<REAsset *>,std::allocator<REAsset *>>::__emplace_unique_key_args<REAsset *,REAsset * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v14 = *v33;
LABEL_72:
    *v33 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    v34 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_23014D7C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24FDFAB08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDFAB08;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

pxrInternal__aapl__pxrReserved__ *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t ***v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *PrimAtPath;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;
  pxrInternal__aapl__pxrReserved__ *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int8x16_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t **v29;
  int v30;
  uint64_t **v31;
  _QWORD *v32;
  int v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t **v36;
  BOOL v37;
  uint64_t **v38;
  uint64_t **v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  pxrInternal__aapl__pxrReserved__ *result;
  _QWORD *exception;
  unint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint8x8_t v49;
  _QWORD *v50;
  _QWORD *i;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unsigned int v55;
  float v56;
  _BOOL8 v57;
  unint64_t v58;
  unint64_t v59;
  int8x8_t prime;
  void *v61;
  void *v62;
  uint64_t v63;
  _QWORD **v64;
  unint64_t v65;
  uint8x8_t v66;
  unint64_t v67;
  uint8x8_t v68;
  uint64_t v69;
  _QWORD *j;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int8x8_t v81;
  unint64_t v82;
  int8x16_t v83;
  uint64_t *v84;
  __int128 v85;
  uint64_t v86;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v87;
  uint64_t v88;
  char *v89;
  uint64_t *v90;
  int8x16_t v91;
  _OWORD v92[2];
  int v93;
  uint64_t v94;
  BOOL v95;
  char v96[8];
  pxrInternal__aapl__pxrReserved__ *v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE v100[32];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v83 = *(int8x16_t *)(a1 + 24);
  v5 = atomic_load((unsigned int *)(*(_QWORD *)(v4 + 24) + 28));
  if (v5 == 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v85, "standardVisitDirtyPrimCancel");
    realityio::ImportSession::CancelledException::CancelledException(exception, &v85);
  }
  v7 = *(uint64_t ****)(v4 + 240);
  v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)(v4 + 40) + 8));
  PrimAtPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2);
  v95 = 0;
  v95 = *(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(PrimAtPath);
  if (v95
    || (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v96) & 1) == 0)
  {
    MEMORY[0x2348B274C](&v94, "");
  }
  else
  {
    v11 = v97;
    if (!v97 || (*((_BYTE *)v97 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v97, v10);
    v12 = **((_QWORD **)v11 + 3);
    v94 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v94 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  memset(v92, 0, sizeof(v92));
  v93 = 1065353216;
  *(_QWORD *)&v85 = v92;
  *((_QWORD *)&v85 + 1) = &v95;
  v86 = v4;
  v87 = a2;
  v88 = v3;
  v89 = v96;
  v15 = vextq_s8(v83, v83, 8uLL);
  v16 = *(_QWORD *)(v4 + 240);
  v90 = &v94;
  v17 = *(_DWORD *)(v4 + 288);
  if (v17 == 1)
    v18 = v16 + 112;
  else
    v18 = v16 + 64;
  if (v17 == 1)
    v19 = 136;
  else
    v19 = 88;
  v91 = v15;
  if (v17 == 1)
    v20 = v16 + 136;
  else
    v20 = v16 + 88;
  v21 = atomic_load((unsigned __int8 *)&_MergedGlobals_50);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_50))
  {
    v79 = v18;
    MEMORY[0x2348B274C](v100, "com.apple.mesh-component-builder");
    MEMORY[0x2348B274C](&v101, "com.apple.mesh-asset-builder");
    MEMORY[0x2348B274C](&v102, "com.apple.mesh-model-descriptor-builder");
    MEMORY[0x2348B274C](&v103, "com.apple.material-asset-builder");
    v80 = 0;
    v81 = 0;
    v46 = 0;
    xmmword_255E54D38 = 0u;
    *(_OWORD *)&qword_255E54D48 = 0u;
    v84 = &v104;
    dword_255E54D58 = 1065353216;
    while (1)
    {
      v47 = *(_QWORD *)&v100[8 * v80];
      v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
      v82 = bswap64(0x9E3779B97F4A7C55 * (v47 & 0xFFFFFFFFFFFFFFF8));
      if (v46)
      {
        v49 = (uint8x8_t)vcnt_s8((int8x8_t)v46);
        v49.i16[0] = vaddlv_u8(v49);
        if (v49.u32[0] > 1uLL)
        {
          v2 = v82;
          if (v82 >= v46)
            v2 = v82 % v46;
        }
        else
        {
          v2 = v82 & (v46 - 1);
        }
        v50 = *(_QWORD **)(xmmword_255E54D38 + 8 * v2);
        if (v50)
        {
          for (i = (_QWORD *)*v50; i; i = (_QWORD *)*i)
          {
            v52 = i[1];
            if (v52 == v82)
            {
              if ((unsigned int *)(i[2] & 0xFFFFFFFFFFFFFFF8) == v48)
                goto LABEL_153;
            }
            else
            {
              if (v49.u32[0] > 1uLL)
              {
                if (v52 >= v46)
                  v52 %= v46;
              }
              else
              {
                v52 &= v46 - 1;
              }
              if (v52 != v2)
                break;
            }
          }
        }
      }
      v53 = operator new(0x18uLL);
      *v53 = 0;
      v53[1] = v82;
      v54 = v46;
      v53[2] = v47;
      if ((v47 & 7) != 0)
      {
        do
          v55 = __ldxr(v48);
        while (__stxr(v55 + 2, v48));
        v81 = *(int8x8_t *)((char *)&xmmword_255E54D38 + 8);
        if ((v55 & 1) == 0)
          v53[2] &= 0xFFFFFFFFFFFFFFF8;
        v54 = (unint64_t)v81;
      }
      v56 = (float)(unint64_t)(qword_255E54D50 + 1);
      if (!v46 || (float)(*(float *)&dword_255E54D58 * (float)v46) < v56)
        break;
LABEL_143:
      v72 = xmmword_255E54D38;
      v73 = *(_QWORD **)(xmmword_255E54D38 + 8 * v2);
      if (v73)
      {
        *v53 = *v73;
      }
      else
      {
        *v53 = qword_255E54D48;
        qword_255E54D48 = (uint64_t)v53;
        *(_QWORD *)(v72 + 8 * v2) = &qword_255E54D48;
        if (!*v53)
          goto LABEL_152;
        v74 = *(_QWORD *)(*v53 + 8);
        if ((v46 & (v46 - 1)) != 0)
        {
          if (v74 >= v46)
            v74 %= v46;
        }
        else
        {
          v74 &= v46 - 1;
        }
        v73 = (_QWORD *)(xmmword_255E54D38 + 8 * v74);
      }
      *v73 = v53;
LABEL_152:
      ++qword_255E54D50;
      v46 = v54;
LABEL_153:
      if (++v80 == 4)
      {
        do
        {
          v76 = *--v84;
          if ((v76 & 7) != 0)
          {
            v77 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
            do
              v78 = __ldxr(v77);
            while (__stlxr(v78 - 2, v77));
          }
        }
        while (v84 != (uint64_t *)v100);
        __cxa_guard_release(&_MergedGlobals_50);
        v18 = v79;
        goto LABEL_23;
      }
    }
    v57 = (v46 & (v46 - 1)) != 0;
    if (v46 < 3)
      v57 = 1;
    v58 = v57 | (2 * v46);
    v59 = vcvtps_u32_f32(v56 / *(float *)&dword_255E54D58);
    if (v58 <= v59)
      prime = (int8x8_t)v59;
    else
      prime = (int8x8_t)v58;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v81 = *(int8x8_t *)((char *)&xmmword_255E54D38 + 8);
    }
    if (*(_QWORD *)&prime > *(_QWORD *)&v81)
      goto LABEL_108;
    if (*(_QWORD *)&prime < *(_QWORD *)&v81)
    {
      v67 = vcvtps_u32_f32((float)(unint64_t)qword_255E54D50 / *(float *)&dword_255E54D58);
      if (*(_QWORD *)&v81 < 3uLL || (v68 = (uint8x8_t)vcnt_s8(v81), v68.i16[0] = vaddlv_u8(v68), v68.u32[0] > 1uLL))
      {
        v67 = std::__next_prime(v67);
      }
      else
      {
        v69 = 1 << -(char)__clz(v67 - 1);
        if (v67 >= 2)
          v67 = v69;
      }
      if (*(_QWORD *)&prime <= v67)
        prime = (int8x8_t)v67;
      if (*(_QWORD *)&prime >= *(_QWORD *)&v81)
      {
        v81 = *(int8x8_t *)((char *)&xmmword_255E54D38 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_108:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v61 = operator new(8 * *(_QWORD *)&prime);
          v62 = (void *)xmmword_255E54D38;
          *(_QWORD *)&xmmword_255E54D38 = v61;
          if (v62)
            operator delete(v62);
          v63 = 0;
          *((int8x8_t *)&xmmword_255E54D38 + 1) = prime;
          do
            *(_QWORD *)(xmmword_255E54D38 + 8 * v63++) = 0;
          while (*(_QWORD *)&prime != v63);
          v64 = (_QWORD **)qword_255E54D48;
          if (qword_255E54D48)
          {
            v65 = *(_QWORD *)(qword_255E54D48 + 8);
            v66 = (uint8x8_t)vcnt_s8(prime);
            v66.i16[0] = vaddlv_u8(v66);
            if (v66.u32[0] > 1uLL)
            {
              if (v65 >= *(_QWORD *)&prime)
                v65 %= *(_QWORD *)&prime;
            }
            else
            {
              v65 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_255E54D38 + 8 * v65) = &qword_255E54D48;
            for (j = *v64; j; v65 = v71)
            {
              v71 = j[1];
              if (v66.u32[0] > 1uLL)
              {
                if (v71 >= *(_QWORD *)&prime)
                  v71 %= *(_QWORD *)&prime;
              }
              else
              {
                v71 &= *(_QWORD *)&prime - 1;
              }
              if (v71 != v65)
              {
                if (!*(_QWORD *)(xmmword_255E54D38 + 8 * v71))
                {
                  *(_QWORD *)(xmmword_255E54D38 + 8 * v71) = v64;
                  goto LABEL_133;
                }
                *v64 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_255E54D38 + 8 * v71);
                **(_QWORD **)(xmmword_255E54D38 + 8 * v71) = j;
                j = v64;
              }
              v71 = v65;
LABEL_133:
              v64 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v81 = prime;
          goto LABEL_137;
        }
        v75 = (void *)xmmword_255E54D38;
        *(_QWORD *)&xmmword_255E54D38 = 0;
        if (v75)
          operator delete(v75);
        v81 = 0;
        *((_QWORD *)&xmmword_255E54D38 + 1) = 0;
      }
    }
LABEL_137:
    if ((*(_QWORD *)&v81 & (*(_QWORD *)&v81 - 1)) != 0)
    {
      if (v82 >= *(_QWORD *)&v81)
      {
        v46 = (unint64_t)v81;
        v2 = v82 % *(_QWORD *)&v81;
      }
      else
      {
        v46 = (unint64_t)v81;
        v2 = v82;
      }
    }
    else
    {
      v46 = (unint64_t)v81;
      v2 = (*(_QWORD *)&v81 - 1) & v82;
    }
    v54 = v46;
    goto LABEL_143;
  }
LABEL_23:
  v22 = *(_DWORD *)(v4 + 288);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v96))
  {
    v26 = *v7;
    v27 = v7[1];
    while (v26 != v27)
    {
      if (v22 != 1
        || !std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,std::hash<pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(**v26))
      {
        realityio::LiveSceneManager::visitDirtyPrim(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &)::$_0::operator()((uint64_t)&v85, v26);
      }
      v26 += 2;
    }
    goto LABEL_63;
  }
  v23 = (uint64_t **)(v18 + 8);
  v24 = *(uint64_t **)(v18 + 8);
  if (!v24)
    goto LABEL_57;
  v25 = v18 + 16;
  while ((std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v25, &v94, v24 + 4) & 1) != 0)
  {
    v23 = (uint64_t **)v24;
LABEL_30:
    v24 = (uint64_t *)*v24;
    if (!v24)
      goto LABEL_57;
  }
  if (std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v25, v24 + 4, &v94))
  {
    ++v24;
    goto LABEL_30;
  }
  v28 = (uint64_t *)*v24;
  v29 = (uint64_t **)v24;
  if (*v24)
  {
    v29 = (uint64_t **)v24;
    do
    {
      v30 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v25, v28 + 4, &v94);
      v31 = (uint64_t **)(v28 + 1);
      if (!v30)
      {
        v31 = (uint64_t **)v28;
        v29 = (uint64_t **)v28;
      }
      v28 = *v31;
    }
    while (*v31);
  }
  v32 = (_QWORD *)v24[1];
  if (v32)
  {
    do
    {
      v33 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v25, &v94, v32 + 4);
      v34 = v32 + 1;
      if (v33)
      {
        v34 = v32;
        v23 = (uint64_t **)v32;
      }
      v32 = (_QWORD *)*v34;
    }
    while (*v34);
  }
  if (v29 != v23)
  {
    do
    {
      if (v22 != 1
        || !std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,std::hash<pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(*v29[5]))
      {
        realityio::LiveSceneManager::visitDirtyPrim(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &)::$_0::operator()((uint64_t)&v85, v29 + 5);
      }
      v35 = v29[1];
      if (v35)
      {
        do
        {
          v36 = (uint64_t **)v35;
          v35 = (uint64_t *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (uint64_t **)v29[2];
          v37 = *v36 == (uint64_t *)v29;
          v29 = v36;
        }
        while (!v37);
      }
      v29 = v36;
    }
    while (v36 != v23);
  }
LABEL_57:
  v38 = *(uint64_t ***)(v16 + v19);
  v39 = *(uint64_t ***)(v20 + 8);
  while (v38 != v39)
  {
    if (v22 != 1
      || !std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,std::hash<pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(**v38))
    {
      realityio::LiveSceneManager::visitDirtyPrim(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &)::$_0::operator()((uint64_t)&v85, v38);
    }
    v38 += 2;
  }
LABEL_63:
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v92);
  if ((v94 & 7) != 0)
  {
    v40 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  if ((v99 & 7) != 0)
  {
    v42 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
  result = v97;
  if (v97)
    return (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v97);
  return result;
}

void sub_23014E1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;

  __cxa_guard_abort(&_MergedGlobals_50);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&a28);
  if ((a34 & 7) != 0)
  {
    v36 = (unsigned int *)(a34 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(v34 - 136);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v34 - 144);
  v41 = *(_QWORD *)(v34 - 152);
  if (v41)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFAB98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFAB98;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1>,void ()(void)>::operator()(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = result[1];
  v2 = *(_QWORD *)(v1 + 464);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  if (v3 == v4)
    goto LABEL_17;
  do
  {
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v9, v3);
    if (!v10)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *))(*(_QWORD *)v10 + 48))(v10);
    result = v10;
    if (v10 == v9)
    {
      result = v9;
      v5 = 4;
    }
    else
    {
      if (!v10)
        goto LABEL_8;
      v5 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
LABEL_8:
    v3 += 32;
  }
  while (v3 != v4);
  v2 = *(_QWORD *)(v1 + 464);
  v6 = *(_QWORD *)(v2 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  if (v3 != v6)
  {
    while (1)
    {
      v7 = v3 - 32;
      result = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == result)
        break;
      if (result)
      {
        v8 = 5;
LABEL_14:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
      }
      v3 -= 32;
      if (v7 == v6)
      {
        v3 = v6;
        goto LABEL_17;
      }
    }
    result = (_QWORD *)(v3 - 32);
    v8 = 4;
    goto LABEL_14;
  }
LABEL_17:
  *(_QWORD *)(v2 + 32) = v3;
  return result;
}

void sub_23014E5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2>,void ()(std::shared_ptr<realityio::Builder>)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2>,void ()(std::shared_ptr<realityio::Builder>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24FDFAC18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2>,void ()(std::shared_ptr<realityio::Builder>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDFAC18;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2>,void ()(std::shared_ptr<realityio::Builder>)>::operator()(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  pxrInternal__aapl__pxrReserved__::UsdStage *v11;
  int IsValid;
  unsigned int *v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = (uint64_t *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v18 = v3;
  v6 = *(_QWORD **)v4;
  v7 = *(_QWORD **)(v4 + 8);
  if (v6 != v7)
  {
    while (*v6 != (_QWORD)v3)
    {
      v6 += 2;
      if (v6 == v7)
      {
        v6 = v7;
        break;
      }
    }
  }
  if (v6 == v7)
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = v3;
    v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 8);
    if ((_QWORD *)(*(_QWORD *)(a1 + 16) + 8) == std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(*(_QWORD *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 8)))
    {
      v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)(v8 + 40) + 8));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v11, v10);
      IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v19);
      if ((v22 & 7) != 0)
      {
        v13 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
      if (v20)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
      if (!IsValid)
      {
LABEL_16:
        realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(*v5, &v18);
        goto LABEL_17;
      }
      v9 = v18;
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(*(uint64_t ***)(a1 + 16), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v18 + 8), (_DWORD *)(v18 + 8));
    }
    if (!realityio::MutableDirtyPropertyTable::anyMatch((realityio::MutableDirtyPropertyTable *)(v9 + 136), *(const realityio::UsdStageDelta **)(a1 + 32)))goto LABEL_17;
    v5 = (uint64_t *)(a1 + 40);
    goto LABEL_16;
  }
LABEL_17:
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_23014E854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v15;
  unsigned int v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  if ((a14 & 7) != 0)
  {
    v15 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a13);
  if (a12)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a12);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2>,void ()(std::shared_ptr<realityio::Builder>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2>,void ()(std::shared_ptr<realityio::Builder>)>::target_type()
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5>,void ()(std::shared_ptr<realityio::Builder>)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5>,void ()(std::shared_ptr<realityio::Builder>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24FDFACA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5>,void ()(std::shared_ptr<realityio::Builder>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDFACA8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5>,void ()(std::shared_ptr<realityio::Builder>)>::operator()(_QWORD *a1, unint64_t *a2)
{
  unsigned int v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *i;
  unint64_t v21;
  uint64_t result;
  _QWORD *exception;
  __int128 v24;

  v2 = atomic_load((unsigned int *)(*(_QWORD *)(a1[1] + 24) + 28));
  if (v2 == 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v24, "accumBuildersCancel");
    realityio::ImportSession::CancelledException::CancelledException(exception, &v24);
  }
  v5 = a1[2];
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  v8 = *a2;
  if (*(_QWORD **)v5 != v7)
  {
    while (*v6 != v8)
    {
      v6 += 2;
      if (v6 == v7)
      {
        v6 = *(_QWORD **)(v5 + 8);
        break;
      }
    }
  }
  v9 = a1[3];
  v10 = *(_QWORD **)v9;
  v11 = *(_QWORD **)(v9 + 8);
  if (*(_QWORD **)v9 != v11)
  {
    while (*v10 != v8)
    {
      v10 += 2;
      if (v10 == v11)
      {
        v10 = *(_QWORD **)(v9 + 8);
        break;
      }
    }
  }
  v12 = (_QWORD *)a1[4];
  v13 = (int8x8_t)v12[1];
  if (v13)
  {
    v14 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
    v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v14 >> 47) ^ v14);
    v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
    v17 = (uint8x8_t)vcnt_s8(v13);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v18 = v16;
      if (v16 >= *(_QWORD *)&v13)
        v18 = v16 % *(_QWORD *)&v13;
    }
    else
    {
      v18 = v16 & (*(_QWORD *)&v13 - 1);
    }
    v19 = *(_QWORD **)(*v12 + 8 * v18);
    if (v19)
    {
      for (i = (_QWORD *)*v19; i; i = (_QWORD *)*i)
      {
        v21 = i[1];
        if (v21 == v16)
        {
          if (i[2] == v8)
          {
            result = realityio::Builder::isResync(v8, a1[5]);
            if ((_DWORD)result)
              return (uint64_t)std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>(a1[6], a2, a2);
            return result;
          }
        }
        else
        {
          if (v17.u32[0] > 1uLL)
          {
            if (v21 >= *(_QWORD *)&v13)
              v21 %= *(_QWORD *)&v13;
          }
          else
          {
            v21 &= *(_QWORD *)&v13 - 1;
          }
          if (v21 != v18)
            break;
        }
      }
    }
  }
  result = realityio::Builder::isResync(v8, a1[5]);
  if (v6 != v7 || v10 != v11 || (result & 1) != 0)
    return (uint64_t)std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>(a1[6], a2, a2);
  return result;
}

void sub_23014EC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5>,void ()(std::shared_ptr<realityio::Builder>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5>,void ()(std::shared_ptr<realityio::Builder>)>::target_type()
{
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDFAD28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDFAD28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  int *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  int v21;
  const char *v22;
  int *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 464);
  v5 = *(_QWORD *)(v2 + 32);
  v4 = (uint64_t *)(v2 + 32);
  v3 = v5;
  v6 = *(v4 - 1);
  if (v6 != v5)
  {
    while (1)
    {
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)&v21, v6);
      v8 = atomic_load((unsigned int *)(*(_QWORD *)(v1 + 24) + 28));
      if (v8 == 1)
      {
        **(_BYTE **)(a1 + 16) = 0;
      }
      else
      {
        if (!v23)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(int *))(*(_QWORD *)v23 + 48))(v23);
      }
      v9 = v23;
      if (v23 == &v21)
        break;
      if (v23)
      {
        v10 = 5;
LABEL_10:
        (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
      }
      v6 += 32;
      if (v8 == 1 || v6 == v3)
      {
        v12 = *(_QWORD *)(v1 + 464);
        v13 = *(_QWORD *)(v12 + 32);
        v4 = (uint64_t *)(v12 + 32);
        v6 = v13;
        v14 = *(v4 - 1);
        if (v13 == v14)
          goto LABEL_24;
        while (1)
        {
          v15 = v6 - 32;
          v16 = *(_QWORD **)(v6 - 8);
          if ((_QWORD *)(v6 - 32) == v16)
            break;
          if (v16)
          {
            v17 = 5;
LABEL_21:
            (*(void (**)(void))(*v16 + 8 * v17))();
          }
          v6 -= 32;
          if (v15 == v14)
          {
            v6 = v14;
            goto LABEL_24;
          }
        }
        v16 = (_QWORD *)(v6 - 32);
        v17 = 4;
        goto LABEL_21;
      }
    }
    v9 = &v21;
    v10 = 4;
    goto LABEL_10;
  }
LABEL_24:
  *v4 = v6;
  v18 = realityio::internal::enableSignposts(0, 0);
  if ((_DWORD)v18)
    v18 = kdebug_trace();
  v19 = *(NSObject **)(realityio::logObjects((realityio *)v18) + 16);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    if (*(_BYTE *)(v1 + 456))
      v20 = "YES";
    else
      v20 = "NO";
    v21 = 136315138;
    v22 = v20;
    _os_log_impl(&dword_22FF26000, v19, OS_LOG_TYPE_INFO, "Phase 1 complete -> loadAssets() -- updating synchronous: %s\n", (uint8_t *)&v21, 0xCu);
  }
  std::chrono::steady_clock::now();
  realityio::AssetLoadTracker::loadAssets(*(_QWORD *)(*(_QWORD *)(v1 + 464) + 128), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) + 16), *(unsigned __int8 *)(v1 + 456));
}

void sub_23014EF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v13;
  uint64_t v14;

  v13 = a12;
  if (a12 == &a9)
  {
    v14 = 4;
    v13 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDFADA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDFADA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7>,void ()(void)>::operator()(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v1 = result[1];
  v2 = *(_QWORD *)(v1 + 464);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  if (v3 != v4)
  {
    v5 = result;
    while (1)
    {
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v9, v3);
      v6 = atomic_load((unsigned int *)(*(_QWORD *)(v1 + 24) + 28));
      if (v6 == 1)
      {
        *(_BYTE *)v5[2] = 0;
      }
      else
      {
        if (!v10)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *))(*(_QWORD *)v10 + 48))(v10);
      }
      result = v10;
      if (v10 == v9)
        break;
      if (v10)
      {
        v7 = 5;
LABEL_11:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
      }
      v3 += 32;
      if (v6 == 1 || v3 == v4)
        return result;
    }
    result = v9;
    v7 = 4;
    goto LABEL_11;
  }
  return result;
}

void sub_23014F110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFAE28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFAE28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t ChildCount;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 464);
  v3 = *(_QWORD **)(v2 + 104);
  v4 = *(_QWORD **)(v2 + 112);
  while (v3 != v4)
  {
    if ((REEntityGetSelfEnabled() & 1) == 0)
      MEMORY[0x2348B0A30](*v3, 1);
    ++v3;
  }
  v5 = atomic_load((unsigned int *)(*(_QWORD *)(v1 + 24) + 28));
  if (v5 == 1)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 24) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16));
    ChildCount = REEntityGetChildCount();
    if (ChildCount)
    {
      v7 = ChildCount;
      for (i = 0; i != v7; ++i)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 24) + 16) + 16))(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16));
        REEntityGetChild();
        REEntitySetParent();
      }
    }
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v1 + 464) + 96);
  if (!v9)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFAEA8;
  return result;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFAEA8;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9>,void ()(void)>::target_type()
{
}

void std::__tree<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::destroy(*a1);
    std::__tree<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::destroy(a1[1]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

BOOL std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::operator()[abi:ne180100](pxrInternal__aapl__pxrReserved__::SdfPath *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a1, a2) & 1) != 0)
    return 1;
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, a1) & 1) != 0)
    return 0;
  return *((_QWORD *)a1 + 1) < *((_QWORD *)a2 + 1);
}

uint64_t std::vector<realityio::LiveSceneManager::CompatibilityFault>::__push_back_slow_path<realityio::LiveSceneManager::CompatibilityFault const&>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  int64x2_t *v22;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
    std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v3;
  v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v19 = v7;
  v20.i64[0] = (uint64_t)&v7[40 * v2];
  v21 = &v7[40 * v6];
  std::allocator<realityio::LiveSceneManager::CompatibilityFault>::construct[abi:ne180100]<realityio::LiveSceneManager::CompatibilityFault,realityio::LiveSceneManager::CompatibilityFault const&>(v20.i64[0], a2);
  v8 = v20.i64[0];
  v9 = v20.i64[0] + 40;
  v20.i64[1] = v20.i64[0] + 40;
  v11 = a1->i64[0];
  v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    v16 = vdupq_n_s64(v10);
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = v8 + v12;
      v14 = v10 + v12;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v8 + v12 - 40), (_DWORD *)(v10 + v12 - 40));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v8 + v12 - 36), (_DWORD *)(v10 + v12 - 36));
      v15 = *(_OWORD *)(v10 + v12 - 32);
      *(_QWORD *)(v13 - 16) = *(_QWORD *)(v10 + v12 - 16);
      *(_OWORD *)(v13 - 32) = v15;
      *(_QWORD *)(v14 - 32) = 0;
      *(_QWORD *)(v14 - 24) = 0;
      *(_QWORD *)(v14 - 16) = 0;
      *(_BYTE *)(v13 - 8) = *(_BYTE *)(v10 + v12 - 8);
      v12 -= 40;
    }
    while (v10 + v12 != v11);
    v16 = *a1;
    v9 = v20.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  v20 = v16;
  v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<realityio::LiveSceneManager::CompatibilityFault>::~__split_buffer((uint64_t)&v19);
  return v9;
}

void sub_23014F600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<realityio::LiveSceneManager::CompatibilityFault>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::LiveSceneManager::CompatibilityFault>::construct[abi:ne180100]<realityio::LiveSceneManager::CompatibilityFault,realityio::LiveSceneManager::CompatibilityFault const&>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  std::string *v5;
  __int128 v6;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  v5 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
}

void sub_23014F684(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<realityio::LiveSceneManager::CompatibilityFault>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::allocator<realityio::LiveSceneManager::CompatibilityFault>::destroy[abi:ne180100](i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

realityio::USDDiagnostics *realityio::USDDiagnostics::USDDiagnostics(realityio::USDDiagnostics *this, const char *a2)
{
  void **v4;
  char *v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_24FDFAF28;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (void **)((char *)this + 8);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 850045863;
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (char *)this + 64;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 850045863;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 30) = 0;
  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *v4;
  *v4 = (void *)v6;

  MEMORY[0x2348B4AD4](v5, a2);
  return this;
}

void sub_23014F7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  _QWORD *v12;
  std::mutex *v13;
  std::mutex *v14;
  _QWORD *v16;
  uint64_t v17;

  std::mutex::~mutex(v14);
  std::mutex::~mutex(v13);
  v16 = *(_QWORD **)(v10 + 112);
  if (v16 == v12)
  {
    v17 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v17 = 5;
    v12 = *(_QWORD **)(v10 + 112);
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v17))(v12);
LABEL_6:
  if (*(char *)(v10 + 87) < 0)
    operator delete(*v11);
  a10 = v10 + 40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v10 + 16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);

  _Unwind_Resume(a1);
}

void realityio::USDDiagnostics::~USDDiagnostics(realityio::USDDiagnostics *this)
{
  realityio::USDDiagnostics *v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)this = &off_24FDFAF28;
  if (!atomic_load((unint64_t *)off_24FDDF020))
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::RemoveDelegate();
  std::mutex::~mutex((std::mutex *)((char *)this + 184));
  std::mutex::~mutex((std::mutex *)((char *)this + 120));
  v3 = (realityio::USDDiagnostics *)*((_QWORD *)this + 14);
  if (v3 == (realityio::USDDiagnostics *)((char *)this + 88))
  {
    v4 = 4;
    v3 = (realityio::USDDiagnostics *)((char *)this + 88);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  v5 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);

}

{
  realityio::USDDiagnostics::~USDDiagnostics(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::USDDiagnostics::Add(realityio::USDDiagnostics *this)
{
  if (!atomic_load((unint64_t *)off_24FDDF020))
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  return pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AddDelegate();
}

unint64_t realityio::USDDiagnostics::shouldSaveMessage(uint64_t a1, char *a2)
{
  uint64_t v4;
  int64_t v5;
  char *v6;
  const char *v7;
  char v8;
  uint64_t v9;
  const char *v10;
  unint64_t result;
  unint64_t v12;
  size_t v13;
  size_t v14;
  const char *v15;
  int v16;
  BOOL v17;
  int64_t v18;
  int64_t v19;
  const char *v20;
  int64_t v21;
  int64_t v22;
  char *v23;
  int v24;
  int64_t v25;
  char *v26;
  char *v27;
  NSObject *v28;
  char *v29;
  char *v30;
  uint8_t buf[4];
  char *v32;
  uint64_t v33;

  v4 = 0;
  v33 = *MEMORY[0x24BDAC8D0];
  v5 = a2[23];
  if ((v5 & 0x80u) == 0)
    v6 = a2;
  else
    v6 = *(char **)a2;
  v30 = v6;
  v7 = (const char *)(a1 + 64);
  v8 = 1;
LABEL_5:
  v9 = v4;
  do
  {
    v10 = off_24FDFAF58[v9];
    result = (unint64_t)strstr(v6, v10);
    if (result)
    {
      v12 = result;
      v13 = strlen(v10);
      if (*(char *)(a1 + 87) < 0)
      {
        v15 = *(const char **)(a1 + 64);
        v14 = *(_QWORD *)(a1 + 72);
      }
      else
      {
        v14 = *(unsigned __int8 *)(a1 + 87);
        v15 = v7;
      }
      v16 = strncmp((const char *)(v12 + v13), v15, v14);
      v8 = 0;
      result = v16 == 0;
      v4 = v9 + 1;
      if (v16)
        v17 = v9 == 4;
      else
        v17 = 1;
      if (v17)
        return result;
      goto LABEL_5;
    }
    ++v9;
  }
  while (v9 != 5);
  if ((v8 & 1) == 0)
    return 0;
  v18 = *(unsigned __int8 *)(a1 + 87);
  v19 = *(_QWORD *)(a1 + 72);
  if ((v18 & 0x80u) == 0)
    v20 = v7;
  else
    v20 = *(const char **)(a1 + 64);
  if ((v18 & 0x80u) == 0)
    v21 = v18;
  else
    v21 = v19;
  if (v21)
  {
    if ((v5 & 0x80u) == 0)
      v22 = v5;
    else
      v22 = *((_QWORD *)a2 + 1);
    if (v22 >= v21)
    {
      v23 = &v6[v22];
      v24 = *v20;
      do
      {
        v25 = v22 - v21;
        if (v25 == -1)
          break;
        v26 = (char *)memchr(v6, v24, v25 + 1);
        if (!v26)
          break;
        v27 = v26;
        if (!memcmp(v26, v20, v21))
        {
          result = 1;
          if (v27 == v23 || v27 - v30 == -1)
            return result;
          goto LABEL_39;
        }
        v6 = v27 + 1;
        v22 = v23 - v6;
      }
      while (v23 - v6 >= v21);
    }
  }
  else
  {
LABEL_39:
    v28 = *(NSObject **)realityio::logObjects((realityio *)result);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      if (a2[23] >= 0)
        v29 = a2;
      else
        v29 = *(char **)a2;
      *(_DWORD *)buf = 136315138;
      v32 = v29;
      _os_log_impl(&dword_22FF26000, v28, OS_LOG_TYPE_DEFAULT, "Unrecognized error pattern \"%s\"", buf, 0xCu);
    }
  }
  return 1;
}

void realityio::USDDiagnostics::saveMessage(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  __CFString *v6;
  int v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  if (*((char *)a3 + 23) < 0)
    a3 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a3);
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5)
    v6 = (__CFString *)v5;
  else
    v6 = CFSTR("Unknown error.");
  v7 = -[__CFString hasPrefix:](v6, "hasPrefix:", CFSTR("Usd crate file version mismatch"));
  v13 = *MEMORY[0x24BDD0FC8];
  v14[0] = v6;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
    v9 = -1;
  else
    v9 = a2;
  objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("RealityIOErrorDomain"), v9, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = *(id *)(a1 + 8);
  objc_sync_enter(v11);
  objc_msgSend(*(id *)(a1 + 8), "addObject:", v10);
  objc_sync_exit(v11);

  v12 = *(_QWORD *)(a1 + 112);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);

}

void sub_23014FCE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id realityio::USDDiagnostics::GetError(id *this)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v2 = this[1];
  objc_sync_enter(v2);
  objc_msgSend(this[1], "firstObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(this[1], "count") >= 2)
  {
    objc_msgSend(v3, "userInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(v4, "mutableCopy");

    objc_msgSend(this[1], "subarrayWithRange:", 1, objc_msgSend(this[1], "count") - 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKey:", v6, CFSTR("AdditionalErrors"));
    v7 = (void *)MEMORY[0x24BDD1540];
    objc_msgSend(v3, "domain");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v3, "code");
    v10 = (void *)objc_msgSend(v5, "copy");
    objc_msgSend(v7, "errorWithDomain:code:userInfo:", v8, v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v11;
  }
  objc_sync_exit(v2);

  return v3;
}

void sub_23014FE5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23014FEB8()
{
  JUMPOUT(0x23014FEA4);
}

id realityio::USDDiagnostics::GetErrors(id *this)
{
  id v2;
  id v3;

  v2 = this[1];
  objc_sync_enter(v2);
  v3 = this[1];
  objc_sync_exit(v2);

  return v3;
}

void realityio::USDDiagnostics::ClearErrors(id *this)
{
  id obj;

  obj = this[1];
  objc_sync_enter(obj);
  objc_msgSend(this[1], "removeAllObjects");
  objc_sync_exit(obj);

}

void sub_23014FF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void realityio::USDDiagnostics::GetWarnings(__int128 **this@<X0>, std::string *a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)(this + 15);
  std::mutex::lock((std::mutex *)(this + 15));
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[2], this[3], 0xAAAAAAAAAAAAAAABLL * (((char *)this[3] - (char *)this[2]) >> 3));
  std::mutex::unlock(v4);
}

void sub_23014FFCC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::USDDiagnostics::GetStatusMessages(__int128 **this@<X0>, std::string *a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)(this + 23);
  std::mutex::lock((std::mutex *)(this + 23));
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[5], this[6], 0xAAAAAAAAAAAAAAABLL * (((char *)this[6] - (char *)this[5]) >> 3));
  std::mutex::unlock(v4);
}

void sub_230150040(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::USDDiagnostics::IssueError(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)(a2 + 40);
  if (realityio::USDDiagnostics::shouldSaveMessage(a1, (char *)(a2 + 40)))
    realityio::USDDiagnostics::saveMessage(a1, *(_DWORD *)(a2 + 72), v4);
}

void realityio::USDDiagnostics::IssueFatalError(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (realityio::USDDiagnostics::shouldSaveMessage(a1, (char *)a3))
    realityio::USDDiagnostics::saveMessage(a1, 4, a3);
}

unint64_t realityio::USDDiagnostics::IssueStatus(uint64_t a1, uint64_t a2)
{
  __int128 *v3;
  unint64_t result;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (__int128 *)(a2 + 40);
  result = realityio::USDDiagnostics::shouldSaveMessage(a1, (char *)(a2 + 40));
  if ((_DWORD)result)
  {
    std::mutex::lock((std::mutex *)(a1 + 184));
    v5 = (uint64_t *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    if (v6 >= *(_QWORD *)(a1 + 56))
    {
      v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, v3);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, v3);
      v7 = v6 + 24;
    }
    *(_QWORD *)(a1 + 48) = v7;
    std::mutex::unlock((std::mutex *)(a1 + 184));
    result = *(_QWORD *)(a1 + 112);
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 48))(result);
  }
  return result;
}

void sub_230150180(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t realityio::USDDiagnostics::IssueWarning(uint64_t a1, uint64_t a2)
{
  __int128 *v3;
  unint64_t result;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (__int128 *)(a2 + 40);
  result = realityio::USDDiagnostics::shouldSaveMessage(a1, (char *)(a2 + 40));
  if ((_DWORD)result)
  {
    std::mutex::lock((std::mutex *)(a1 + 120));
    v5 = (uint64_t *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    if (v6 >= *(_QWORD *)(a1 + 32))
    {
      v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, v3);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, v3);
      v7 = v6 + 24;
    }
    *(_QWORD *)(a1 + 24) = v7;
    std::mutex::unlock((std::mutex *)(a1 + 120));
    result = *(_QWORD *)(a1 + 112);
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 48))(result);
  }
  return result;
}

void sub_230150228(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfAssetPathGetTypeID()
{
  if (RIOPxrSdfAssetPathGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfAssetPathGetTypeID::onceToken, &__block_literal_global_32);
  return RIOPxrSdfAssetPathGetTypeID::typeID;
}

uint64_t RIOPxrSdfAssetPathIsLessThan(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<();
  else
    return 0;
}

uint64_t RIOPxrSdfAssetPathCreateEmptyPath()
{
  uint64_t v0;
  uint64_t v1;
  void *v3[2];
  char v4;
  void *__p;
  char v6;

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v3);
  RIOPxrSdfAssetPathCreate<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((__int128 *)v3);
  v1 = v0;
  if (v6 < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  return v1;
}

void sub_230150324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a9);
  _Unwind_Resume(a1);
}

__n128 RIOPxrSdfAssetPathCreate<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(__int128 *a1)
{
  uint64_t Instance;
  __n128 result;
  __int128 v4;

  if (RIOPxrSdfAssetPathGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfAssetPathGetTypeID::onceToken, &__block_literal_global_32);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v4 = *a1;
    *(_QWORD *)(Instance + 32) = *((_QWORD *)a1 + 2);
    *(_OWORD *)(Instance + 16) = v4;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    *(_QWORD *)a1 = 0;
    result = *(__n128 *)((char *)a1 + 24);
    *(_QWORD *)(Instance + 56) = *((_QWORD *)a1 + 5);
    *(__n128 *)(Instance + 40) = result;
    *((_QWORD *)a1 + 4) = 0;
    *((_QWORD *)a1 + 5) = 0;
    *((_QWORD *)a1 + 3) = 0;
  }
  return result;
}

BOOL RIOPxrSdfAssetPathIsEmpty(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    if (*(char *)(result + 39) < 0)
      v1 = *(_QWORD *)(result + 24);
    else
      v1 = *(unsigned __int8 *)(result + 39);
    return v1 == 0;
  }
  return result;
}

uint64_t RIOPxrSdfAssetPathCreateFromCString(char *__s)
{
  uint64_t v1;
  uint64_t v2;
  void *v4[2];
  char v5;
  void *v6[2];
  char v7;
  void *__p;
  char v9;

  if (!__s || !*__s)
    return RIOPxrSdfAssetPathCreateEmptyPath();
  std::string::basic_string[abi:ne180100]<0>(v4, __s);
  MEMORY[0x2348B1B64](v6, v4);
  RIOPxrSdfAssetPathCreate<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((__int128 *)v6);
  v2 = v1;
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v5 < 0)
    operator delete(v4[0]);
  return v2;
}

void sub_23015048C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfAssetPathCreateFromCStringWithResolvedPath(char *__s, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *__p;
  char v13;

  if (!__s || !a2 || !*__s || !*a2)
    return RIOPxrSdfAssetPathCreateEmptyPath();
  std::string::basic_string[abi:ne180100]<0>(v8, __s);
  std::string::basic_string[abi:ne180100]<0>(v6, a2);
  MEMORY[0x2348B1B70](v10, v8, v6);
  RIOPxrSdfAssetPathCreate<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((__int128 *)v10);
  v4 = v3;
  if (v13 < 0)
    operator delete(__p);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  return v4;
}

void sub_23015057C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrSdfAssetPathAssetPathCopyString(uint64_t a1)
{
  const char *v1;

  if (!a1)
    return &stru_24FDFD990;
  v1 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v1 = *(const char **)v1;
  return CFStringCreateWithCString(0, v1, 0x8000100u);
}

CFStringRef RIOPxrSdfAssetPathResolvedPathCopyString(uint64_t a1)
{
  const char *v1;

  if (!a1)
    return &stru_24FDFD990;
  v1 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v1 = *(const char **)v1;
  return CFStringCreateWithCString(0, v1, 0x8000100u);
}

void _RIOPxrSdfAssetPathCFFinalize(void **a1)
{
  if (*((char *)a1 + 63) < 0)
    operator delete(a1[5]);
  if (*((char *)a1 + 39) < 0)
    operator delete(a1[2]);
}

uint64_t _RIOPxrSdfAssetPathCFEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==(a1 + 16, a2 + 16);
}

unint64_t _RIOPxrSdfAssetPathCFHash(const char *a1)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,std::string const&>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v2, a1 + 16, (uint64_t)(a1 + 40));
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

CFStringRef _RIOPxrSdfAssetPathCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfAssetPath %p>"), a1);
}

CFStringRef _RIOPxrSdfAssetPathCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfAssetPath %p>"), a1);
}

unsigned int **realityio::mtlxFromUsd@<X0>(_QWORD *a1@<X8>)
{
  RIO_MTLX *v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  const char *v4;
  const std::string *v5;
  int v6;
  RIO_MTLX::Element *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  __int128 *v13;
  pxrInternal__aapl__pxrReserved__::UsdStage *v14;
  BOOL v15;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  pxrInternal__aapl__pxrReserved__ *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  pxrInternal__aapl__pxrReserved__ *v31;
  uint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  void *__p;
  pxrInternal__aapl__pxrReserved__ *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53[2];
  _BYTE v54[40];
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  uint64_t *v58;
  unint64_t *v59;
  unsigned int *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  const char *v64;
  char v65;
  void *v66;
  char v67;
  uint64_t v68;
  const std::string *v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v62 = 0;
  v63 = 0;
  v61 = (char *)&v62;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v61, v62);
  v2 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  if (!v60)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
    return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v60);
  }
  RIO_MTLX::Document::createDocument<RIO_MTLX::Document>(v2, &v58);
  memset(&v57, 0, sizeof(v57));
  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v60);
  MEMORY[0x2348B274C](&v56, "customLayerData");
  MEMORY[0x2348B274C](&v55, "colorSpace");
  v70 = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadataByDictKey(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55, (pxrInternal__aapl__pxrReserved__::VtValue *)&v69) & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v69))
    {
      if ((v70 & 4) != 0)
        v5 = (const std::string *)(*(uint64_t (**)(const std::string **))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(&v69);
      else
        v5 = v69;
      std::string::operator=(&v57, v5);
      v6 = 1;
      goto LABEL_13;
    }
    v61 = "usd/stage.h";
    v62 = "GetMetadataByDictKey";
    v63 = 2442;
    v64 = "BOOL pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadataByDictKey(const TfToken &, const TfToken &, T *) c"
          "onst [T = std::string]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000023020531BLL & 0x7FFFFFFFFFFFFFFFLL), v4);
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v69);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    if (SHIBYTE(v51) < 0)
      operator delete(__p);
    if ((v54[7] & 0x80000000) != 0)
      operator delete(v53[0]);
  }
  v6 = 0;
LABEL_13:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v69);
  if ((v55 & 7) != 0)
  {
    v8 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if ((v56 & 7) != 0)
  {
    v10 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if (v6)
  {
    v12 = v58;
    v13 = (__int128 *)RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(v7);
    RIO_MTLX::Element::setAttribute(v12, v13, &v57);
  }
  v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v60);
  pxrInternal__aapl__pxrReserved__::UsdStage::Traverse(v14);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)v53, (uint64_t)&v61);
  while (1)
  {
    __p = v53[1];
    v50 = (pxrInternal__aapl__pxrReserved__ *)v53;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    LODWORD(v52) = 0;
    WORD2(v52) = 0;
    if (v62 == (char *)v50 && v61 == __p)
    {
      v15 = 1;
      if (v63 == v51 && !(_DWORD)v64 && !BYTE4(v64))
        v15 = BYTE5(v64) != 0;
    }
    else
    {
      v15 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
    if (!v15)
      break;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v61, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&__p);
    v17 = v50;
    if (!v50 || (*((_BYTE *)v50 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v50, v16);
    v18 = (uint64_t *)*((_QWORD *)v17 + 3);
    MEMORY[0x2348B274C](&v69, "Material");
    v19 = *v18;
    v20 = (unsigned int *)((unint64_t)v69 & 0xFFFFFFFFFFFFFFF8);
    if ((v69 & 7) != 0)
    {
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((v52 & 7) != 0)
    {
      v22 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
    if (v50)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v50);
    if ((unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8) == v20)
    {
      v47 = v58;
      v48 = (std::__shared_weak_count *)v59;
      if (v59)
      {
        v24 = v59 + 1;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v61, (uint64_t)&__p);
      if ((v52 & 7) != 0)
      {
        v26 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
      if (v50)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v50);
      v28 = v48;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v61);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
  v32 = v58;
  v31 = (pxrInternal__aapl__pxrReserved__ *)v59;
  v46 = (std::__shared_weak_count *)v59;
  if (v59)
  {
    v33 = v59 + 1;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v61);
  __p = v32;
  v50 = v31;
  if (v31)
  {
    v35 = (unint64_t *)((char *)v31 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  RIO_MTLX::writeToXmlStream((uint64_t *)&__p, (uint64_t)&v63, 0);
  if (v31)
  {
    v37 = (unint64_t *)((char *)v31 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      (*(void (**)(pxrInternal__aapl__pxrReserved__ *))(*(_QWORD *)v31 + 16))(v31);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v31);
    }
  }
  std::stringbuf::str();
  v61 = (char *)*MEMORY[0x24BEDB7F0];
  v39 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(char **)((char *)&v61 + *((_QWORD *)v61 - 3)) = *(char **)(MEMORY[0x24BEDB7F0] + 64);
  v63 = v39;
  v64 = (const char *)(MEMORY[0x24BEDB848] + 16);
  if (v67 < 0)
    operator delete(v66);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](&v68);
  if (v46)
  {
    v40 = (unint64_t *)&v46->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v54);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v42 = (std::__shared_weak_count *)v59;
  if (v59)
  {
    v43 = v59 + 1;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v60);
}

void sub_230150DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,unsigned int *a45,__int16 a46,char a47,char a48,uint64_t a49)
{
  uint64_t v49;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;

  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v49 - 104));
  if ((a35 & 7) != 0)
  {
    v51 = (unsigned int *)(a35 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  if ((a36 & 7) != 0)
  {
    v53 = (unsigned int *)(a36 & 0xFFFFFFFFFFFFFFF8);
    do
      v54 = __ldxr(v53);
    while (__stlxr(v54 - 2, v53));
  }
  if (a42 < 0)
    operator delete(a37);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a45);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::convertMaterial(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  std::string::size_type v5;
  unsigned int *v6;
  unsigned int v7;
  void **v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  std::string *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  const pxrInternal__aapl__pxrReserved__::TfToken *Name;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *v25;
  char *v26;
  _BOOL4 v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  void **v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  void **v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  __int128 *v40;
  uint64_t **v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  std::__shared_weak_count *v48;
  RIO_MTLX::NodeGraph *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  pxrInternal__aapl__pxrReserved__::TfToken *v52;
  unint64_t EmptyString;
  pxrInternal__aapl__pxrReserved__ *v54;
  uint64_t *UsdPrimAllPrimsPredicate;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  pxrInternal__aapl__pxrReserved__::TfToken *ShaderId;
  uint64_t v60;
  std::string *v61;
  __int128 v62;
  const char *v63;
  int v64;
  std::string::size_type v65;
  size_t v66;
  size_t v67;
  const char *v68;
  std::string *p_p;
  size_t v70;
  __int128 v71;
  RIO_MTLX::Node *v72;
  pxrInternal__aapl__pxrReserved__::TfToken *v73;
  unint64_t v74;
  std::string::size_type v75;
  std::string::size_type i;
  const pxrInternal__aapl__pxrReserved__::TfToken *v77;
  unsigned int *v78;
  unsigned int v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  std::string *v94;
  std::string **v95;
  void **v96;
  pxrInternal__aapl__pxrReserved__::SdfPath *v97;
  _DWORD *v98;
  uint64_t *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  int64_t size;
  const char *v108;
  const char *v109;
  uint64_t v110;
  std::string::size_type v111;
  pxrInternal__aapl__pxrReserved__::TfToken *v112;
  uint64_t v113;
  __int128 v114;
  unsigned int *v115;
  unsigned int v116;
  char *v117;
  const char *v118;
  uint64_t *v119;
  uint64_t v120;
  const pxrInternal__aapl__pxrReserved__::TfToken *v121;
  unsigned int *v122;
  unsigned int v123;
  RIO_MTLX::Output *v124;
  unint64_t v125;
  char *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  uint64_t *v141;
  __int128 *v142;
  std::string *v143;
  std::string **v144;
  std::string **v145;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v146;
  int v147;
  std::string::__raw *v148;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v149;
  unsigned int *v150;
  unsigned int v151;
  RIO_MTLX::PortElement *v152;
  std::__shared_weak_count *v153;
  const std::string *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t *v157;
  __int128 *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t **v169;
  void **v170;
  pxrInternal__aapl__pxrReserved__::SdfPath *v171;
  char *v172;
  uint64_t *v173;
  __int128 v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t *v181;
  unint64_t v182;
  pxrInternal__aapl__pxrReserved__::TfToken *v183;
  pxrInternal__aapl__pxrReserved__::UsdObject *v184;
  uint64_t v185;
  std::string::size_type v186;
  const char *v187;
  int v188;
  std::string::size_type v189;
  size_t v190;
  size_t v191;
  const char *v192;
  int64_t v193;
  char *v194;
  size_t v195;
  __int128 v196;
  RIO_MTLX::Node *v197;
  RIO_MTLX *ValidIdentifier;
  const std::string *v199;
  uint64_t *v200;
  uint64_t v201;
  const pxrInternal__aapl__pxrReserved__::TfToken *v202;
  unsigned int *v203;
  unsigned int v204;
  uint64_t *v205;
  void **v206;
  _BOOL4 v207;
  unsigned int *v208;
  unsigned int v209;
  unsigned int v210;
  void **v211;
  void ***v212;
  std::string::size_type v213;
  unint64_t *v214;
  unint64_t v215;
  __int128 *v216;
  _DWORD *v217;
  void ***v218;
  unint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unsigned int *v227;
  unsigned int v228;
  unsigned int *v229;
  unsigned int v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  unsigned int v236;
  void **v237;
  void ***v238;
  std::string::size_type v239;
  unint64_t *v240;
  unint64_t v241;
  __int128 *v242;
  _DWORD *v243;
  void ***v244;
  unint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  unsigned int *v248;
  unsigned int v249;
  RIO_MTLX::Input *v250;
  unint64_t v251;
  char *v252;
  unsigned int *v253;
  unsigned int v254;
  uint64_t **v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int *v258;
  unsigned int v259;
  uint64_t *v260;
  void *v261;
  std::string::size_type v262;
  unint64_t *v263;
  unint64_t v264;
  pxrInternal__aapl__pxrReserved__::UsdObject *v265;
  pxrInternal__aapl__pxrReserved__::TfToken *v266;
  uint64_t v267;
  __int128 v268;
  unsigned int *v269;
  unsigned int v270;
  uint64_t v271;
  RIO_MTLX *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t j;
  uint64_t *NodeName;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  unsigned __int8 *v284;
  unsigned __int8 *v285;
  uint64_t *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  RIO_MTLX::PortElement *v291;
  std::__shared_weak_count *v292;
  unint64_t *p_size;
  unint64_t v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  unsigned int *v309;
  unsigned int v310;
  unsigned int *v311;
  unsigned int v312;
  unsigned int *v313;
  unsigned int v314;
  RIO_MTLX *v315;
  pxrInternal__aapl__pxrReserved__::TfToken *v316;
  unint64_t v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  unsigned int *v329;
  unsigned int v330;
  unsigned int *v331;
  unsigned int v332;
  int64_t v334;
  const char *v335;
  const char *v336;
  uint64_t v337;
  std::string::size_type v338;
  pxrInternal__aapl__pxrReserved__::TfToken *v339;
  uint64_t v340;
  __int128 v341;
  unsigned int *v342;
  unsigned int v343;
  int v344;
  char *v345;
  const char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  RIO_MTLX::Node **v350;
  uint64_t v351;
  uint64_t v352;
  pxrInternal__aapl__pxrReserved__::UsdObject *v353;
  int __c[2];
  int __ca;
  std::string::size_type v356;
  __int128 v357;
  const std::string *v358[2];
  unsigned __int128 v359;
  std::string v360;
  uint64_t *v361;
  std::__shared_weak_count *v362;
  RIO_MTLX::Node *v363;
  std::__shared_weak_count *v364;
  __int128 v365;
  RIO_MTLX::PortElement *v366;
  std::__shared_weak_count *v367;
  uint64_t v368;
  uint64_t v369;
  __int128 v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t **v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  std::string v383;
  std::__shared_weak_count *v384;
  uint64_t *v385;
  std::__shared_weak_count *v386;
  std::string __p;
  uint64_t v388;
  void *v389;
  std::string::size_type v390;
  uint64_t v391;
  uint64_t v392;
  std::string::size_type v393;
  std::__shared_weak_count *v394;
  std::string v395;
  std::string v396;
  std::string v397;
  std::string v398;
  uint64_t v399;
  __int128 v400;
  __int128 v401;
  uint64_t v402;
  RIO_MTLX::PortElement *v403;
  std::string *v404;
  uint64_t v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  std::string v408;
  std::string v409;
  unint64_t v410;
  unint64_t v411;
  __int128 v412;
  void *v413;
  uint64_t v414;
  _BYTE v415[7];
  unsigned __int8 v416;
  uint64_t v417;
  _DWORD v418[5];
  unsigned int v419;
  __int128 v420;
  __int128 v421;
  uint64_t v422;
  void **v423;
  std::__shared_weak_count *v424;
  __int128 v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  int v429;
  __int128 v430;
  uint64_t v431;
  uint64_t v432;

  v432 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v381 = MEMORY[0x24BEE9D88] + 16;
  if (v382
    && (*(_BYTE *)(v382 + 57) & 8) == 0
    && ((*(uint64_t (**)(uint64_t *))(MEMORY[0x24BEE9D88] + 48))(&v381) & 1) != 0)
  {
    v380 = 0;
    MEMORY[0x2348B274C](&v409, "mtlx");
    Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
    v5 = *((_QWORD *)Data + 27);
    v409.__r_.__value_.__l.__size_ = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if ((v7 & 1) == 0)
        v409.__r_.__value_.__l.__size_ &= 0xFFFFFFFFFFFFFFF8;
    }
    v423 = 0;
    v424 = 0;
    *(_QWORD *)&v425 = 0;
    v413 = &v423;
    LOBYTE(v414) = 0;
    v8 = (void **)operator new(0x10uLL);
    v9 = 0;
    v10 = 0;
    v423 = v8;
    v424 = (std::__shared_weak_count *)v8;
    *(_QWORD *)&v425 = v8 + 2;
    do
    {
      v11 = v9;
      v12 = v409.__r_.__value_.__r.__words[v10];
      *v8 = (void *)v12;
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          *v8 = (void *)((unint64_t)*v8 & 0xFFFFFFFFFFFFFFF8);
      }
      ++v8;
      v9 = 1;
      v10 = 1;
    }
    while ((v11 & 1) == 0);
    v424 = (std::__shared_weak_count *)v8;
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
    v15 = (std::string *)&v409.__r_.__value_.__r.__words[2];
    v413 = &v423;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v413);
    do
    {
      v17 = v15[-1].__r_.__value_.__r.__words[2];
      v15 = (std::string *)((char *)v15 - 8);
      v16 = v17;
      if ((v17 & 7) != 0)
      {
        v18 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
    }
    while (v15 != &v409);
    if (v379
      && (*(_BYTE *)(v379 + 57) & 8) == 0
      && ((*(uint64_t (**)(uint64_t *))(v378 + 32))(&v378) & 1) != 0)
    {
      v350 = (RIO_MTLX::Node **)a1;
      v353 = a2;
      v377 = 0;
      v376 = 0;
      v375 = &v376;
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v378);
      v20 = v373;
      v21 = v374;
      if (v373 != v374)
      {
        v349 = MEMORY[0x24BEE9D58] + 16;
        v348 = MEMORY[0x24BEE9DC0] + 16;
        v347 = MEMORY[0x24BEE9D98] + 16;
        v356 = MEMORY[0x24BEE9D38] + 16;
        v352 = v374;
        do
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v423, (uint64_t *)(v20 + 8), (_DWORD *)(v20 + 16));
          Name = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v20);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v423, Name);
          if ((BYTE8(v425) & 7) != 0)
          {
            v23 = (unsigned int *)(*((_QWORD *)&v425 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v24 = __ldxr(v23);
            while (__stlxr(v24 - 2, v23));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v425);
          if (v424)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v424);
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v370))
          {
            MEMORY[0x2348B37D8](&v413, v20, 0);
            if (v418[4])
            {
              if (v419 >= 2)
                v25 = (uint64_t *)((char *)v413 + 8);
              else
                v25 = &v414;
              if (v419 >= 2)
                v26 = (char *)v413 + 16;
              else
                v26 = v415;
              pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v423, v25, v26);
              v27 = (_DWORD)v423 != *(_DWORD *)a2
                 || v424 != *((std::__shared_weak_count **)a2 + 1)
                 || (_QWORD)v425 != *((_QWORD *)a2 + 2)
                 || (*((_QWORD *)&v425 + 1) & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFF8);
              if ((BYTE8(v425) & 7) != 0)
              {
                v28 = (unsigned int *)(*((_QWORD *)&v425 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v29 = __ldxr(v28);
                while (__stlxr(v29 - 2, v28));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v425);
              if (v424)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v424);
              if (v27)
              {
                v351 = v20;
                v30 = v419;
                v31 = (char *)v413;
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                if (v30 >= 2)
                  v32 = (void **)v31;
                else
                  v32 = &v413;
                v33 = (unint64_t)v32[3];
                v409.__r_.__value_.__r.__words[0] = v349;
                v410 = v33;
                if ((v33 & 7) != 0)
                {
                  v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v35 = __ldxr(v34);
                  while (__stxr(v35 + 2, v34));
                  if ((v35 & 1) == 0)
                    v410 &= 0xFFFFFFFFFFFFFFF8;
                }
                if (v30 >= 2)
                  v36 = (void **)v31;
                else
                  v36 = &v413;
                v37 = (unint64_t)v36[4];
                v409.__r_.__value_.__r.__words[0] = v348;
                v411 = v37;
                if ((v37 & 7) != 0)
                {
                  v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v39 = __ldxr(v38);
                  while (__stxr(v39 + 2, v38));
                  if ((v39 & 1) == 0)
                    v411 &= 0xFFFFFFFFFFFFFFF8;
                }
                v40 = (__int128 *)(v31 + 40);
                if (v30 < 2)
                  v40 = (__int128 *)v418;
                v412 = *v40;
                pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v366, (uint64_t *)&v409.__r_.__value_.__l.__size_, &v409.__r_.__value_.__r.__words[2]);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v366, &v423);
                v20 = v351;
                v41 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v375, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v423);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v423);
                if (&v376 == v41)
                {
                  v49 = *(RIO_MTLX::NodeGraph **)a1;
                  v48 = *(std::__shared_weak_count **)(a1 + 8);
                  v363 = *(RIO_MTLX::Node **)a1;
                  v364 = v48;
                  if (v48)
                  {
                    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
                    do
                      v51 = __ldxr(p_shared_owners);
                    while (__stxr(v51 + 1, p_shared_owners));
                  }
                  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                  v406 = v347;
                  v52 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v366);
                  if ((*(_QWORD *)v52 & 0xFFFFFFFFFFFFFFF8) != 0)
                    EmptyString = (*(_QWORD *)v52 & 0xFFFFFFFFFFFFFFF8) + 16;
                  else
                    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v52);
                  RIO_MTLX::Element::addChild<RIO_MTLX::NodeGraph>(v49, EmptyString, (uint64_t *)&v365);
                  v404 = 0;
                  v405 = 0;
                  v403 = (RIO_MTLX::PortElement *)&v404;
                  UsdPrimAllPrimsPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v54);
                  v57 = *UsdPrimAllPrimsPredicate;
                  v56 = UsdPrimAllPrimsPredicate[1];
                  v58 = UsdPrimAllPrimsPredicate[2];
                  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
                    && ((v57 & 0x2000) != 0 || (v56 & 0x2000) == 0))
                  {
                    v57 |= 0x2000uLL;
                    v56 &= ~0x2000uLL;
                  }
                  *(_QWORD *)&v420 = v57;
                  *((_QWORD *)&v420 + 1) = v56;
                  *(_QWORD *)&v421 = v58;
                  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v366, (uint64_t *)&v420, (uint64_t)&v423);
                  *(_QWORD *)&v420 = v423;
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v420 + 2, &v424);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v420 + 3, (_DWORD *)&v424 + 1);
                  v421 = v425;
                  v422 = v426;
                  *(_QWORD *)&v400 = v427;
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v400 + 2, &v428);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v400 + 3, &v429);
                  v401 = v430;
                  v402 = v431;
                  while (v420 != v400
                       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v421, (uint64_t)&v401))
                  {
                    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v420, (uint64_t)&v398);
                    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                    v397.__r_.__value_.__l.__size_ = v356;
                    v397.__r_.__value_.__r.__words[0] = 0;
                    ShaderId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v397.__r_.__value_.__r.__words[1], (pxrInternal__aapl__pxrReserved__::TfToken *)&v397);
                    if ((_DWORD)ShaderId)
                    {
                      memset(&v396, 0, sizeof(v396));
                      if ((v397.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
                        v60 = (v397.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16;
                      else
                        v60 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ShaderId);
                      std::string::basic_string[abi:ne180100]<0>(&v389, "ND_");
                      pxrInternal__aapl__pxrReserved__::TfStringGetSuffix();
                      v61 = std::string::insert(&v408, 0, "_");
                      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
                      __p.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v62;
                      v61->__r_.__value_.__l.__size_ = 0;
                      v61->__r_.__value_.__r.__words[2] = 0;
                      v61->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v408.__r_.__value_.__l.__data_);
                      if (v391 >= 0)
                        v63 = (const char *)&v389;
                      else
                        v63 = (const char *)v389;
                      v64 = *(char *)(v60 + 23);
                      v65 = *(_QWORD *)(v60 + 8);
                      if (v64 >= 0)
                        v66 = *(unsigned __int8 *)(v60 + 23);
                      else
                        v66 = *(_QWORD *)(v60 + 8);
                      v67 = strlen(v63);
                      if (v66 >= v67
                        && (v64 >= 0 ? (v68 = (const char *)v60) : (v68 = *(const char **)v60),
                            !strncmp(v68, v63, v67)
                         && ((*(_QWORD *)__c = HIBYTE(__p.__r_.__value_.__r.__words[2]),
                              (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                           ? (p_p = &__p)
                           : (p_p = (std::string *)__p.__r_.__value_.__r.__words[0]),
                             (v70 = strlen((const char *)p_p), v66 >= v70)
                          && !strcmp(&v68[v66 - v70], (const char *)p_p))))
                      {
                        if (SLOBYTE(__c[0]) >= 0)
                          size = *(_QWORD *)__c;
                        else
                          size = __p.__r_.__value_.__l.__size_;
                        if (size)
                        {
                          v108 = &v68[v66];
                          if ((uint64_t)v66 >= size)
                          {
                            __ca = p_p->__r_.__value_.__s.__data_[0];
                            v117 = (char *)v68;
                            do
                            {
                              if (v66 - size == -1)
                                break;
                              v118 = (const char *)memchr(v117, __ca, v66 - size + 1);
                              if (!v118)
                                break;
                              v109 = v118;
                              if (!memcmp(v118, p_p, size))
                                goto LABEL_201;
                              v117 = (char *)(v109 + 1);
                              v66 = v108 - (v109 + 1);
                            }
                            while ((uint64_t)v66 >= size);
                          }
                          v109 = v108;
LABEL_201:
                          if (v109 == v108)
                            v110 = -1;
                          else
                            v110 = v109 - v68;
                        }
                        else
                        {
                          v110 = 0;
                        }
                        std::string::basic_string(&v408, &__p, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v393);
                        if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v396.__r_.__value_.__l.__data_);
                        v396 = v408;
                        if (v391 >= 0)
                          v111 = HIBYTE(v391);
                        else
                          v111 = v390;
                        std::string::basic_string(&v408, (const std::string *)v60, v111, v110 - v111, (std::allocator<char> *)&v383.__r_.__value_.__r.__words[1]);
                        v112 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B2764](&v393, &v408);
                        if ((v393 & 0xFFFFFFFFFFFFFFF8) != 0)
                          v113 = (v393 & 0xFFFFFFFFFFFFFFF8) + 16;
                        else
                          v113 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v112);
                        if (*(char *)(v113 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v395, *(const std::string::value_type **)v113, *(_QWORD *)(v113 + 8));
                        }
                        else
                        {
                          v114 = *(_OWORD *)v113;
                          v395.__r_.__value_.__r.__words[2] = *(_QWORD *)(v113 + 16);
                          *(_OWORD *)&v395.__r_.__value_.__l.__data_ = v114;
                        }
                        if ((v393 & 7) != 0)
                        {
                          v115 = (unsigned int *)(v393 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v116 = __ldxr(v115);
                          while (__stlxr(v116 - 2, v115));
                        }
                        if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v408.__r_.__value_.__l.__data_);
                      }
                      else if (v64 < 0)
                      {
                        std::string::__init_copy_ctor_external(&v395, *(const std::string::value_type **)v60, v65);
                      }
                      else
                      {
                        v71 = *(_OWORD *)v60;
                        v395.__r_.__value_.__r.__words[2] = *(_QWORD *)(v60 + 16);
                        *(_OWORD *)&v395.__r_.__value_.__l.__data_ = v71;
                      }
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v391) < 0)
                        operator delete(v389);
                      v72 = (RIO_MTLX::Node *)v365;
                      v73 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v398);
                      if ((*(_QWORD *)v73 & 0xFFFFFFFFFFFFFFF8) != 0)
                        v74 = (*(_QWORD *)v73 & 0xFFFFFFFFFFFFFFF8) + 16;
                      else
                        v74 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v73);
                      RIO_MTLX::GraphElement::addNode(v72, &v395, v74, &v396, (uint64_t *)&v393);
                      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v397.__r_.__value_.__r.__words[1]);
                      v75 = v408.__r_.__value_.__l.__size_;
                      for (i = v408.__r_.__value_.__r.__words[0]; i != v75; i += 32)
                      {
                        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&__p, (uint64_t *)(i + 8), (_DWORD *)(i + 16));
                        v77 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)i);
                        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, v77);
                        if ((v388 & 7) != 0)
                        {
                          v78 = (unsigned int *)(v388 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v79 = __ldxr(v78);
                          while (__stlxr(v79 - 2, v78));
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p.__r_.__value_.__r.__words[2]);
                        if (__p.__r_.__value_.__l.__size_)
                          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__p.__r_.__value_.__l.__size_);
                        v383.__r_.__value_.__r.__words[2] = v393;
                        v384 = v394;
                        if (v394)
                        {
                          v80 = (unint64_t *)&v394->__shared_owners_;
                          do
                            v81 = __ldxr(v80);
                          while (__stxr(v81 + 1, v80));
                        }
                        v383.__r_.__value_.__l.__size_ = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)i);
                        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v383.__r_.__value_.__r.__words[1]);
                        v383.__r_.__value_.__r.__words[0] = 0;
                        v82 = v386;
                        if (v386)
                        {
                          v83 = (unint64_t *)&v386->__shared_owners_;
                          do
                            v84 = __ldaxr(v83);
                          while (__stlxr(v84 - 1, v83));
                          if (!v84)
                          {
                            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                            std::__shared_weak_count::__release_weak(v82);
                          }
                        }
                        if ((v383.__r_.__value_.__s.__data_[0] & 7) != 0)
                        {
                          v85 = (unsigned int *)(v383.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                          do
                            v86 = __ldxr(v85);
                          while (__stlxr(v86 - 2, v85));
                        }
                        if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0)
                        {
                          v87 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                          do
                            v88 = __ldxr(v87);
                          while (__stlxr(v88 - 2, v87));
                        }
                        v89 = v384;
                        if (v384)
                        {
                          v90 = (unint64_t *)&v384->__shared_owners_;
                          do
                            v91 = __ldaxr(v90);
                          while (__stlxr(v91 - 1, v90));
                          if (!v91)
                          {
                            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                            std::__shared_weak_count::__release_weak(v89);
                          }
                        }
                        if ((v392 & 7) != 0)
                        {
                          v92 = (unsigned int *)(v392 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v93 = __ldxr(v92);
                          while (__stlxr(v93 - 2, v92));
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v391);
                        if (v390)
                          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v390);
                      }
                      v389 = &v408;
                      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v389);
                      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v398, &v389);
                      v94 = v404;
                      v95 = &v404;
                      v96 = (void **)&v404;
                      if (!v404)
                        goto LABEL_174;
                      v96 = (void **)&v404;
                      while (1)
                      {
                        while (1)
                        {
                          v95 = (std::string **)v94;
                          v97 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&v94[1].__r_.__value_.__r.__words[1];
                          if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v389, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v94[1].__r_.__value_.__r.__words[1]))break;
                          v94 = *v95;
                          v96 = (void **)v95;
                          if (!*v95)
                            goto LABEL_174;
                        }
                        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v97, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v389))break;
                        v96 = (void **)(v95 + 1);
                        v94 = v95[1];
                        if (!v94)
                          goto LABEL_174;
                      }
                      v98 = *v96;
                      if (!*v96)
                      {
LABEL_174:
                        v98 = operator new(0x38uLL);
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v98 + 8, &v389);
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v98 + 9, (_DWORD *)&v389 + 1);
                        *((_QWORD *)v98 + 5) = 0;
                        *((_QWORD *)v98 + 6) = 0;
                        *(_QWORD *)v98 = 0;
                        *((_QWORD *)v98 + 1) = 0;
                        *((_QWORD *)v98 + 2) = v95;
                        *v96 = v98;
                        v99 = (uint64_t *)v98;
                        if (*(_QWORD *)v403)
                        {
                          v403 = *(RIO_MTLX::PortElement **)v403;
                          v99 = (uint64_t *)*v96;
                        }
                        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v404, v99);
                        ++v405;
                      }
                      std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100]((_QWORD *)v98 + 5, (uint64_t *)&v393);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v389);
                      v100 = v394;
                      if (v394)
                      {
                        v101 = (unint64_t *)&v394->__shared_owners_;
                        do
                          v102 = __ldaxr(v101);
                        while (__stlxr(v102 - 1, v101));
                        if (!v102)
                        {
                          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                          std::__shared_weak_count::__release_weak(v100);
                        }
                      }
                      if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v395.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v396.__r_.__value_.__l.__data_);
                    }
                    if ((v397.__r_.__value_.__s.__data_[0] & 7) != 0)
                    {
                      v103 = (unsigned int *)(v397.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                      do
                        v104 = __ldxr(v103);
                      while (__stlxr(v104 - 2, v103));
                    }
                    MEMORY[0x2348B1EC4](&v397.__r_.__value_.__r.__words[1]);
                    if ((v399 & 7) != 0)
                    {
                      v105 = (unsigned int *)(v399 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v106 = __ldxr(v105);
                      while (__stlxr(v106 - 2, v105));
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v398.__r_.__value_.__r.__words[2]);
                    if (v398.__r_.__value_.__l.__size_)
                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v398.__r_.__value_.__l.__size_);
                    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v420);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v400 + 8);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v420 + 8);
                  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v406);
                  v119 = (uint64_t *)v389;
                  v120 = v390;
                  while (v119 != (uint64_t *)v120)
                  {
                    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v420, v119 + 1, (_DWORD *)v119 + 4);
                    v121 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v119);
                    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v420, v121);
                    if ((BYTE8(v421) & 7) != 0)
                    {
                      v122 = (unsigned int *)(*((_QWORD *)&v421 + 1) & 0xFFFFFFFFFFFFFFF8);
                      do
                        v123 = __ldxr(v122);
                      while (__stlxr(v123 - 2, v122));
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421);
                    if (*((_QWORD *)&v420 + 1))
                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v420 + 1));
                    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v400))
                    {
                      MEMORY[0x2348B391C](&v420, v119, 0);
                      v398.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v400);
                      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v398);
                      if ((_DWORD)v422)
                      {
                        v124 = (RIO_MTLX::Output *)v365;
                        pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v400);
                        v125 = v393 & 0xFFFFFFFFFFFFFFF8;
                        if ((v393 & 0xFFFFFFFFFFFFFFF8) != 0)
                        {
                          v126 = (char *)(v125 + 16);
                          if (*(char *)(v125 + 39) < 0)
                            v126 = *(char **)v126;
                        }
                        else
                        {
                          v126 = "";
                        }
                        std::string::basic_string[abi:ne180100]<0>(&v398, v126);
                        RIO_MTLX::InterfaceElement::addOutput(v124, (uint64_t)&v398, &__p, (uint64_t *)&v408);
                        if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v398.__r_.__value_.__l.__data_);
                        if ((v393 & 7) != 0)
                        {
                          v139 = (unsigned int *)(v393 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v140 = __ldxr(v139);
                          while (__stlxr(v140 - 2, v139));
                        }
                        if (HIDWORD(v422) >= 2)
                          v141 = (uint64_t *)(v420 + 8);
                        else
                          v141 = (uint64_t *)&v420 + 1;
                        if (HIDWORD(v422) >= 2)
                          v142 = (__int128 *)(v420 + 16);
                        else
                          v142 = &v421;
                        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v398, v141, v142);
                        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v398, &v393);
                        v143 = v404;
                        if (!v404)
                          goto LABEL_280;
                        v144 = &v404;
                        do
                        {
                          v145 = v144;
                          v146 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v143[1].__r_.__value_.__r.__words[1];
                          v147 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v143[1].__r_.__value_.__r.__words[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v393);
                          v148 = (std::string::__raw *)&v143->__r_.__value_.__r.__words[1];
                          if (!v147)
                          {
                            v148 = (std::string::__raw *)v143;
                            v144 = (std::string **)v143;
                          }
                          v143 = (std::string *)v148->__words[0];
                        }
                        while (v148->__words[0]);
                        if (v144 == &v404
                          || (!v147
                            ? (v149 = v146)
                            : (v149 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v145 + 4)),
                              pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v393, v149)))
                        {
LABEL_280:
                          v144 = &v404;
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v393);
                        if ((v399 & 7) != 0)
                        {
                          v150 = (unsigned int *)(v399 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v151 = __ldxr(v150);
                          while (__stlxr(v151 - 2, v150));
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v398.__r_.__value_.__r.__words[2]);
                        v152 = (RIO_MTLX::PortElement *)v398.__r_.__value_.__l.__size_;
                        if (v398.__r_.__value_.__l.__size_)
                          v152 = (RIO_MTLX::PortElement *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v398.__r_.__value_.__l.__size_);
                        if (&v404 != v144)
                        {
                          v154 = v144[5];
                          v153 = (std::__shared_weak_count *)v144[6];
                          v398.__r_.__value_.__r.__words[0] = (std::string::size_type)v154;
                          v398.__r_.__value_.__l.__size_ = (std::string::size_type)v153;
                          if (v153)
                          {
                            v155 = (unint64_t *)&v153->__shared_owners_;
                            do
                              v156 = __ldxr(v155);
                            while (__stxr(v156 + 1, v155));
                          }
                          v157 = (uint64_t *)v408.__r_.__value_.__r.__words[0];
                          v158 = (__int128 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(v152);
                          RIO_MTLX::Element::setAttribute(v157, v158, v154 + 2);
                          if (v153)
                          {
                            v159 = (unint64_t *)&v153->__shared_owners_;
                            do
                              v160 = __ldaxr(v159);
                            while (__stlxr(v160 - 1, v159));
                            if (!v160)
                            {
                              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                              std::__shared_weak_count::__release_weak(v153);
                            }
                          }
                        }
                        v161 = (std::__shared_weak_count *)v408.__r_.__value_.__l.__size_;
                        if (v408.__r_.__value_.__l.__size_)
                        {
                          v162 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                          do
                            v163 = __ldaxr(v162);
                          while (__stlxr(v163 - 1, v162));
                          if (!v163)
                          {
                            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                            std::__shared_weak_count::__release_weak(v161);
                          }
                        }
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      else
                      {
                        *(_OWORD *)&v396.__r_.__value_.__l.__data_ = v365;
                        if (*((_QWORD *)&v365 + 1))
                        {
                          v127 = (unint64_t *)(*((_QWORD *)&v365 + 1) + 8);
                          do
                            v128 = __ldxr(v127);
                          while (__stxr(v128 + 1, v127));
                        }
                        __p.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v119);
                        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&__p);
                        v397.__r_.__value_.__r.__words[0] = 0;
                        v129 = (std::__shared_weak_count *)v397.__r_.__value_.__r.__words[2];
                        if (v397.__r_.__value_.__r.__words[2])
                        {
                          v130 = (unint64_t *)(v397.__r_.__value_.__r.__words[2] + 8);
                          do
                            v131 = __ldaxr(v130);
                          while (__stlxr(v131 - 1, v130));
                          if (!v131)
                          {
                            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                            std::__shared_weak_count::__release_weak(v129);
                          }
                        }
                        if ((v397.__r_.__value_.__s.__data_[0] & 7) != 0)
                        {
                          v132 = (unsigned int *)(v397.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                          do
                            v133 = __ldxr(v132);
                          while (__stlxr(v133 - 2, v132));
                        }
                        if ((v398.__r_.__value_.__s.__data_[0] & 7) != 0)
                        {
                          v134 = (unsigned int *)(v398.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                          do
                            v135 = __ldxr(v134);
                          while (__stlxr(v135 - 2, v134));
                        }
                        v136 = (std::__shared_weak_count *)v396.__r_.__value_.__l.__size_;
                        if (v396.__r_.__value_.__l.__size_)
                        {
                          v137 = (unint64_t *)(v396.__r_.__value_.__l.__size_ + 8);
                          do
                            v138 = __ldaxr(v137);
                          while (__stlxr(v138 - 1, v137));
                          if (!v138)
                          {
                            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                            std::__shared_weak_count::__release_weak(v136);
                          }
                        }
                      }
                      if ((v395.__r_.__value_.__s.__data_[0] & 7) != 0)
                      {
                        v164 = (unsigned int *)(v395.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v165 = __ldxr(v164);
                        while (__stlxr(v165 - 2, v164));
                      }
                      pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)&v420);
                    }
                    if ((BYTE8(v401) & 7) != 0)
                    {
                      v166 = (unsigned int *)(*((_QWORD *)&v401 + 1) & 0xFFFFFFFFFFFFFFF8);
                      do
                        v167 = __ldxr(v166);
                      while (__stlxr(v167 - 2, v166));
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v401);
                    if (*((_QWORD *)&v400 + 1))
                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v400 + 1));
                    v119 += 4;
                  }
                  *(_QWORD *)&v420 = &v389;
                  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v420);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v428);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v424);
                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>>>::destroy(v404);
                  MEMORY[0x2348B2170](&v406);
                  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v366, &v423);
                  v168 = v376;
                  v169 = &v376;
                  v170 = (void **)&v376;
                  if (!v376)
                    goto LABEL_321;
                  v170 = (void **)&v376;
                  while (1)
                  {
                    while (1)
                    {
                      v169 = (uint64_t **)v168;
                      v171 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v168 + 4);
                      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v423, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v168 + 4)))break;
                      v168 = *v169;
                      v170 = (void **)v169;
                      if (!*v169)
                        goto LABEL_321;
                    }
                    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v171, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v423))break;
                    v170 = (void **)(v169 + 1);
                    v168 = v169[1];
                    if (!v168)
                      goto LABEL_321;
                  }
                  v172 = (char *)*v170;
                  if (!*v170)
                  {
LABEL_321:
                    v172 = (char *)operator new(0x38uLL);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v172 + 8, &v423);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v172 + 9, (_DWORD *)&v423 + 1);
                    *((_QWORD *)v172 + 5) = 0;
                    *((_QWORD *)v172 + 6) = 0;
                    *(_QWORD *)v172 = 0;
                    *((_QWORD *)v172 + 1) = 0;
                    *((_QWORD *)v172 + 2) = v169;
                    *v170 = v172;
                    v173 = (uint64_t *)v172;
                    if (*v375)
                    {
                      v375 = (uint64_t **)*v375;
                      v173 = (uint64_t *)*v170;
                    }
                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v376, v173);
                    ++v377;
                  }
                  v174 = v365;
                  v365 = 0uLL;
                  v175 = (std::__shared_weak_count *)*((_QWORD *)v172 + 6);
                  *(_OWORD *)(v172 + 40) = v174;
                  if (v175)
                  {
                    v176 = (unint64_t *)&v175->__shared_owners_;
                    do
                      v177 = __ldaxr(v176);
                    while (__stlxr(v177 - 1, v176));
                    if (!v177)
                    {
                      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                      std::__shared_weak_count::__release_weak(v175);
                    }
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v423);
                  v178 = (std::__shared_weak_count *)*((_QWORD *)&v365 + 1);
                  v20 = v351;
                  if (*((_QWORD *)&v365 + 1))
                  {
                    v179 = (unint64_t *)(*((_QWORD *)&v365 + 1) + 8);
                    do
                      v180 = __ldaxr(v179);
                    while (__stlxr(v180 - 1, v179));
                    if (!v180)
                    {
                      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                      std::__shared_weak_count::__release_weak(v178);
                    }
                  }
                  if (v364)
                  {
                    v181 = &v364->__shared_owners_;
                    do
                      v182 = __ldaxr((unint64_t *)v181);
                    while (__stlxr(v182 - 1, (unint64_t *)v181));
                    if (!v182)
                    {
                      ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                      std::__shared_weak_count::__release_weak(v364);
                    }
                  }
                }
                if ((v369 & 7) != 0)
                {
                  v42 = (unsigned int *)(v369 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v43 = __ldxr(v42);
                  while (__stlxr(v43 - 2, v42));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v368);
                if (v367)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v367);
                if ((v411 & 7) != 0)
                {
                  v44 = (unsigned int *)(v411 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v45 = __ldxr(v44);
                  while (__stlxr(v45 - 2, v44));
                }
                MEMORY[0x2348B2350](&v409);
              }
            }
            pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdShadeConnectionSourceInfo,1u>::~TfSmallVector((uint64_t)&v413);
            v21 = v352;
          }
          if ((v372 & 7) != 0)
          {
            v46 = (unsigned int *)(v372 & 0xFFFFFFFFFFFFFFF8);
            do
              v47 = __ldxr(v46);
            while (__stlxr(v47 - 2, v46));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v371);
          if (*((_QWORD *)&v370 + 1))
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v370 + 1));
          v20 += 32;
        }
        while (v20 != v21);
      }
      v423 = (void **)&v373;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v423);
      v396.__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v398, "unknownNodeType");
      v183 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v378, (pxrInternal__aapl__pxrReserved__::TfToken *)&v396);
      v184 = a2;
      if ((_DWORD)v183)
      {
        if ((v396.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          v185 = (v396.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v185 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v183);
        std::string::basic_string[abi:ne180100]<0>(&v423, "ND_");
        std::string::basic_string[abi:ne180100]<0>(&v413, "_surfaceshader");
        v186 = BYTE7(v425);
        if ((SBYTE7(v425) & 0x80u) == 0)
          v187 = (const char *)&v423;
        else
          v187 = (const char *)v423;
        v188 = *(char *)(v185 + 23);
        v189 = *(_QWORD *)(v185 + 8);
        if (v188 >= 0)
          v190 = *(unsigned __int8 *)(v185 + 23);
        else
          v190 = *(_QWORD *)(v185 + 8);
        v191 = strlen(v187);
        if (v190 >= v191
          && (v188 >= 0 ? (v192 = (const char *)v185) : (v192 = *(const char **)v185),
              !strncmp(v192, v187, v191)
           && ((v193 = v416, (v416 & 0x80u) == 0) ? (v194 = (char *)&v413) : (v194 = (char *)v413),
               (v195 = strlen(v194), v190 >= v195) && !strcmp(&v192[v190 - v195], v194))))
        {
          if ((v193 & 0x80u) == 0)
            v334 = v193;
          else
            v334 = v414;
          if (v334)
          {
            v335 = &v192[v190];
            if ((uint64_t)v190 >= v334)
            {
              v344 = *v194;
              v345 = (char *)v192;
              do
              {
                if (v190 - v334 == -1)
                  break;
                v346 = (const char *)memchr(v345, v344, v190 - v334 + 1);
                if (!v346)
                  break;
                v336 = v346;
                if (!memcmp(v346, v194, v334))
                  goto LABEL_617;
                v345 = (char *)(v336 + 1);
                v190 = v335 - (v336 + 1);
              }
              while ((uint64_t)v190 >= v334);
            }
            v336 = v335;
LABEL_617:
            v184 = v353;
            v337 = v336 - v192;
            if (v336 == v335)
              v337 = -1;
          }
          else
          {
            v337 = 0;
            v184 = v353;
          }
          if ((v186 & 0x80u) == 0)
            v338 = v186;
          else
            v338 = (std::string::size_type)v424;
          std::string::basic_string(&v409, (const std::string *)v185, v338, v337 - v338, (std::allocator<char> *)&v389);
          v339 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B2764](&v400, &v409);
          if ((v400 & 0xFFFFFFFFFFFFFFF8) != 0)
            v340 = (v400 & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v340 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v339);
          if (*(char *)(v340 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v420, *(const std::string::value_type **)v340, *(_QWORD *)(v340 + 8));
          }
          else
          {
            v341 = *(_OWORD *)v340;
            *(_QWORD *)&v421 = *(_QWORD *)(v340 + 16);
            v420 = v341;
          }
          if ((v400 & 7) != 0)
          {
            v342 = (unsigned int *)(v400 & 0xFFFFFFFFFFFFFFF8);
            do
              v343 = __ldxr(v342);
            while (__stlxr(v343 - 2, v342));
          }
          if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v409.__r_.__value_.__l.__data_);
        }
        else
        {
          if (v188 < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v420, *(const std::string::value_type **)v185, v189);
          }
          else
          {
            v196 = *(_OWORD *)v185;
            *(_QWORD *)&v421 = *(_QWORD *)(v185 + 16);
            v420 = v196;
          }
          v184 = v353;
        }
        if ((char)v416 < 0)
          operator delete(v413);
        if (SBYTE7(v425) < 0)
          operator delete(v423);
        if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v398.__r_.__value_.__l.__data_);
        *(_OWORD *)&v398.__r_.__value_.__l.__data_ = v420;
        v398.__r_.__value_.__r.__words[2] = v421;
      }
      v197 = *v350;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v184, &v413);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v413);
      ValidIdentifier = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier();
      v199 = (const std::string *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING(ValidIdentifier);
      RIO_MTLX::GraphElement::addNode(v197, &v398, (uint64_t)&v423, v199, (uint64_t *)&v370);
      if (SBYTE7(v425) < 0)
        operator delete(v423);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v413);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v378);
      v200 = (uint64_t *)v389;
      v201 = v390;
      if (v389 != (void *)v390)
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v423, v200 + 1, (_DWORD *)v200 + 4);
          v202 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v200);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v423, v202);
          if ((BYTE8(v425) & 7) != 0)
          {
            v203 = (unsigned int *)(*((_QWORD *)&v425 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v204 = __ldxr(v203);
            while (__stlxr(v204 - 2, v203));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v425);
          if (v424)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v424);
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v413))
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes();
            if ((_DWORD)v426)
            {
              if (HIDWORD(v426) >= 2)
                v205 = (uint64_t *)(v423 + 1);
              else
                v205 = (uint64_t *)&v424;
              if (HIDWORD(v426) >= 2)
                v206 = v423 + 2;
              else
                v206 = (void **)&v425;
              pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v409, v205, v206);
              v207 = LODWORD(v409.__r_.__value_.__l.__data_) == *(_DWORD *)v184
                  && *(_OWORD *)&v409.__r_.__value_.__r.__words[1] == *(_OWORD *)((char *)v184 + 8)
                  && (v410 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v184 + 3) & 0xFFFFFFFFFFFFFFF8);
              if ((v410 & 7) != 0)
              {
                v208 = (unsigned int *)(v410 & 0xFFFFFFFFFFFFFFF8);
                do
                  v209 = __ldxr(v208);
                while (__stlxr(v209 - 2, v208));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v409.__r_.__value_.__r.__words[2]);
              if (v409.__r_.__value_.__l.__size_)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v409.__r_.__value_.__l.__size_);
              if (v207)
              {
                v210 = HIDWORD(v426);
                v211 = v423;
                if (HIDWORD(v426) >= 2)
                  v212 = (void ***)v423;
                else
                  v212 = &v423;
                LODWORD(v409.__r_.__value_.__l.__data_) = *(_DWORD *)v212;
                v213 = (std::string::size_type)v212[1];
                v409.__r_.__value_.__l.__size_ = v213;
                if (v213)
                {
                  v214 = (unint64_t *)(v213 + 48);
                  do
                    v215 = __ldxr(v214);
                  while (__stxr(v215 + 1, v214));
                }
                if (v210 >= 2)
                  v216 = (__int128 *)(v211 + 2);
                else
                  v216 = &v425;
                if (v210 >= 2)
                  v217 = (_DWORD *)v211 + 5;
                else
                  v217 = (_DWORD *)&v425 + 1;
                if (v210 >= 2)
                  v218 = (void ***)v211;
                else
                  v218 = &v423;
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v409.__r_.__value_.__r.__words[2], v216);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v409.__r_.__value_.__r.__words[2] + 1, v217);
                v219 = (unint64_t)v218[3];
                v410 = v219;
                if ((v219 & 7) != 0)
                {
                  v220 = (unsigned int *)(v219 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v221 = __ldxr(v220);
                  while (__stxr(v221 + 2, v220));
                  if ((v221 & 1) == 0)
                    v410 &= 0xFFFFFFFFFFFFFFF8;
                }
                *(_OWORD *)&v360.__r_.__value_.__r.__words[1] = v370;
                if (*((_QWORD *)&v370 + 1))
                {
                  v222 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
                  do
                    v223 = __ldxr(v222);
                  while (__stxr(v223 + 1, v222));
                }
                v184 = v353;
                *(_QWORD *)&v400 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v409);
                pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v400);
                pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v200);
                v224 = v362;
                if (v362)
                {
                  v225 = (unint64_t *)&v362->__shared_owners_;
                  do
                    v226 = __ldaxr(v225);
                  while (__stlxr(v226 - 1, v225));
                  if (!v226)
                  {
                    ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                    std::__shared_weak_count::__release_weak(v224);
                  }
                }
                if ((v360.__r_.__value_.__s.__data_[0] & 7) != 0)
                {
                  v227 = (unsigned int *)(v360.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v228 = __ldxr(v227);
                  while (__stlxr(v228 - 2, v227));
                }
                if ((v420 & 7) != 0)
                {
                  v229 = (unsigned int *)(v420 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v230 = __ldxr(v229);
                  while (__stlxr(v230 - 2, v229));
                }
                v231 = (std::__shared_weak_count *)v360.__r_.__value_.__r.__words[2];
                if (v360.__r_.__value_.__r.__words[2])
                {
                  v232 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
                  do
                    v233 = __ldaxr(v232);
                  while (__stlxr(v233 - 1, v232));
                  if (!v233)
                  {
                    ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                    std::__shared_weak_count::__release_weak(v231);
                  }
                }
                if ((v410 & 7) != 0)
                {
                  v234 = (unsigned int *)(v410 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v235 = __ldxr(v234);
                  while (__stlxr(v235 - 2, v234));
                }
                goto LABEL_571;
              }
              v184 = v353;
              if ((_DWORD)v426)
              {
                v236 = HIDWORD(v426);
                v237 = v423;
                if (HIDWORD(v426) >= 2)
                  v238 = (void ***)v423;
                else
                  v238 = &v423;
                LODWORD(v409.__r_.__value_.__l.__data_) = *(_DWORD *)v238;
                v239 = (std::string::size_type)v238[1];
                v409.__r_.__value_.__l.__size_ = v239;
                if (v239)
                {
                  v240 = (unint64_t *)(v239 + 48);
                  do
                    v241 = __ldxr(v240);
                  while (__stxr(v241 + 1, v240));
                }
                if (v236 >= 2)
                  v242 = (__int128 *)(v237 + 2);
                else
                  v242 = &v425;
                if (v236 >= 2)
                  v243 = (_DWORD *)v237 + 5;
                else
                  v243 = (_DWORD *)&v425 + 1;
                if (v236 >= 2)
                  v244 = (void ***)v237;
                else
                  v244 = &v423;
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v409.__r_.__value_.__r.__words[2], v242);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v409.__r_.__value_.__r.__words[2] + 1, v243);
                v245 = (unint64_t)v244[3];
                v410 = v245;
                if ((v245 & 7) != 0)
                {
                  v246 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v247 = __ldxr(v246);
                  while (__stxr(v247 + 2, v246));
                  if ((v247 & 1) == 0)
                    v410 &= 0xFFFFFFFFFFFFFFF8;
                }
                *(_QWORD *)&v420 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v409);
                pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v420);
                v184 = v353;
                *(_QWORD *)&v400 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v409);
                pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v400);
                if ((v420 & 7) != 0)
                {
                  v248 = (unsigned int *)(v420 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v249 = __ldxr(v248);
                  while (__stlxr(v249 - 2, v248));
                }
                v250 = (RIO_MTLX::Input *)v370;
                pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v200);
                v251 = v400 & 0xFFFFFFFFFFFFFFF8;
                if ((v400 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  v252 = (char *)(v251 + 16);
                  if (*(char *)(v251 + 39) < 0)
                    v252 = *(char **)v252;
                }
                else
                {
                  v252 = "";
                }
                std::string::basic_string[abi:ne180100]<0>(&v420, v252);
                RIO_MTLX::InterfaceElement::addInput(v250, (uint64_t)&v420, &__p, (uint64_t *)&v366);
                if (SBYTE7(v421) < 0)
                  operator delete((void *)v420);
                if ((v400 & 7) != 0)
                {
                  v253 = (unsigned int *)(v400 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v254 = __ldxr(v253);
                  while (__stlxr(v254 - 2, v253));
                }
                pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v400, (uint64_t *)&v409.__r_.__value_.__l.__size_, &v409.__r_.__value_.__r.__words[2]);
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v400, (uint64_t)&v420);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v420, &v408);
                v255 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v375, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v408);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v408);
                if ((BYTE8(v421) & 7) != 0)
                {
                  v256 = (unsigned int *)(*((_QWORD *)&v421 + 1) & 0xFFFFFFFFFFFFFFF8);
                  do
                    v257 = __ldxr(v256);
                  while (__stlxr(v257 - 2, v256));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421);
                if (*((_QWORD *)&v420 + 1))
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v420 + 1));
                if ((BYTE8(v401) & 7) != 0)
                {
                  v258 = (unsigned int *)(*((_QWORD *)&v401 + 1) & 0xFFFFFFFFFFFFFFF8);
                  do
                    v259 = __ldxr(v258);
                  while (__stlxr(v259 - 2, v258));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v401);
                if (*((_QWORD *)&v400 + 1))
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v400 + 1));
                if (&v376 == v255)
                  goto LABEL_558;
                v260 = v255[5];
                if (v260
                {
                  v262 = (std::string::size_type)v255[6];
                  v408.__r_.__value_.__r.__words[0] = (std::string::size_type)v261;
                  v408.__r_.__value_.__l.__size_ = v262;
                  if (v262)
                  {
                    v263 = (unint64_t *)(v262 + 8);
                    do
                      v264 = __ldxr(v263);
                    while (__stxr(v264 + 1, v263));
                  }
                }
                else
                {
                  *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
                }
                v265 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v420, (uint64_t *)&v409.__r_.__value_.__l.__size_, &v409.__r_.__value_.__r.__words[2]);
                v266 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v265);
                if ((*(_QWORD *)v266 & 0xFFFFFFFFFFFFFFF8) != 0)
                  v267 = (*(_QWORD *)v266 & 0xFFFFFFFFFFFFFFF8) + 16;
                else
                  v267 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v266);
                if (*(char *)(v267 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&v400, *(const std::string::value_type **)v267, *(_QWORD *)(v267 + 8));
                }
                else
                {
                  v268 = *(_OWORD *)v267;
                  *(_QWORD *)&v401 = *(_QWORD *)(v267 + 16);
                  v400 = v268;
                }
                if ((BYTE8(v421) & 7) != 0)
                {
                  v269 = (unsigned int *)(*((_QWORD *)&v421 + 1) & 0xFFFFFFFFFFFFFFF8);
                  do
                    v270 = __ldxr(v269);
                  while (__stlxr(v270 - 2, v269));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421);
                if (*((_QWORD *)&v420 + 1))
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v420 + 1));
                v271 = v408.__r_.__value_.__r.__words[0];
                RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>((uint64_t)v408.__r_.__value_.__l.__data_, (unsigned __int8 *)&v400, &v406);
                v273 = (std::__shared_weak_count *)v408.__r_.__value_.__l.__size_;
                v359 = __PAIR128__(v408.__r_.__value_.__l.__size_, v271);
                if (v408.__r_.__value_.__l.__size_)
                {
                  v274 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                  do
                    v275 = __ldxr(v274);
                  while (__stxr(v275 + 1, v274));
                }
                v276 = RIO_MTLX::EMPTY_STRING(v272);
                RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v271, (unsigned __int8 *)v276, (uint64_t)&v420);
                v277 = *((_QWORD *)&v420 + 1);
                for (j = v420; ; j += 16)
                {
                  if (j == v277)
                  {
                    v397.__r_.__value_.__l.__size_ = (std::string::size_type)&v420;
                    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v397.__r_.__value_.__l.__size_);
                    v404 = 0;
                    v403 = 0;
                    v184 = v353;
                    goto LABEL_528;
                  }
                  NodeName = RIO_MTLX::PortElement::getNodeName(*(RIO_MTLX::PortElement **)j);
                  v280 = BYTE7(v401);
                  if ((SBYTE7(v401) & 0x80u) == 0)
                    v281 = BYTE7(v401);
                  else
                    v281 = *((_QWORD *)&v400 + 1);
                  v282 = *((unsigned __int8 *)NodeName + 23);
                  v283 = (char)v282;
                  if ((v282 & 0x80u) != 0)
                    v282 = NodeName[1];
                  if (v281 == v282)
                  {
                    if (v283 >= 0)
                      v284 = (unsigned __int8 *)NodeName;
                    else
                      v284 = (unsigned __int8 *)*NodeName;
                    if ((BYTE7(v401) & 0x80) != 0)
                    {
                      if (!memcmp((const void *)v400, v284, *((size_t *)&v400 + 1)))
                      {
LABEL_523:
                        v286 = *(uint64_t **)(j + 8);
                        v403 = *(RIO_MTLX::PortElement **)j;
                        v404 = (std::string *)v286;
                        v184 = v353;
                        if (v286)
                        {
                          v287 = (unint64_t *)(v286 + 1);
                          do
                            v288 = __ldxr(v287);
                          while (__stxr(v288 + 1, v287));
                        }
                        v397.__r_.__value_.__l.__size_ = (std::string::size_type)&v420;
                        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v397.__r_.__value_.__l.__size_);
LABEL_528:
                        if (v273)
                        {
                          v289 = (unint64_t *)&v273->__shared_owners_;
                          do
                            v290 = __ldaxr(v289);
                          while (__stlxr(v290 - 1, v289));
                          if (!v290)
                          {
                            ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                            std::__shared_weak_count::__release_weak(v273);
                          }
                        }
                        v291 = v366;
                        v292 = (std::__shared_weak_count *)v404;
                        v358[0] = (const std::string *)v403;
                        v358[1] = v404;
                        if (v404)
                        {
                          p_size = &v404->__r_.__value_.__l.__size_;
                          do
                            v294 = __ldxr(p_size);
                          while (__stxr(v294 + 1, p_size));
                        }
                        RIO_MTLX::Input::setConnectedOutput(v291, v358);
                        if (v292)
                        {
                          v295 = (unint64_t *)&v292->__shared_owners_;
                          do
                            v296 = __ldaxr(v295);
                          while (__stlxr(v296 - 1, v295));
                          if (!v296)
                          {
                            ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                            std::__shared_weak_count::__release_weak(v292);
                          }
                        }
                        v297 = (std::__shared_weak_count *)v404;
                        if (v404)
                        {
                          v298 = &v404->__r_.__value_.__l.__size_;
                          do
                            v299 = __ldaxr(v298);
                          while (__stlxr(v299 - 1, v298));
                          if (!v299)
                          {
                            ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                            std::__shared_weak_count::__release_weak(v297);
                          }
                        }
                        v300 = v407;
                        if (v407)
                        {
                          v301 = (unint64_t *)&v407->__shared_owners_;
                          do
                            v302 = __ldaxr(v301);
                          while (__stlxr(v302 - 1, v301));
                          if (!v302)
                          {
                            ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                            std::__shared_weak_count::__release_weak(v300);
                          }
                        }
                        if (SBYTE7(v401) < 0)
                          operator delete((void *)v400);
                        v303 = (std::__shared_weak_count *)v408.__r_.__value_.__l.__size_;
                        if (v408.__r_.__value_.__l.__size_)
                        {
                          v304 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                          do
                            v305 = __ldaxr(v304);
                          while (__stlxr(v305 - 1, v304));
                          if (!v305)
                          {
                            ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                            std::__shared_weak_count::__release_weak(v303);
                          }
                        }
LABEL_558:
                        v306 = v367;
                        if (v367)
                        {
                          v307 = (unint64_t *)&v367->__shared_owners_;
                          do
                            v308 = __ldaxr(v307);
                          while (__stlxr(v308 - 1, v307));
                          if (!v308)
                          {
                            ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                            std::__shared_weak_count::__release_weak(v306);
                          }
                        }
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__p.__r_.__value_.__l.__data_);
                        if ((v395.__r_.__value_.__s.__data_[0] & 7) != 0)
                        {
                          v309 = (unsigned int *)(v395.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                          do
                            v310 = __ldxr(v309);
                          while (__stlxr(v310 - 2, v309));
                        }
                        if ((v410 & 7) != 0)
                        {
                          v311 = (unsigned int *)(v410 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v312 = __ldxr(v311);
                          while (__stlxr(v312 - 2, v311));
                        }
LABEL_571:
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v409.__r_.__value_.__r.__words[2]);
                        if (v409.__r_.__value_.__l.__size_)
                          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v409.__r_.__value_.__l.__size_);
                        break;
                      }
                    }
                    else
                    {
                      if (!BYTE7(v401))
                        goto LABEL_523;
                      v285 = (unsigned __int8 *)&v400;
                      while (*v285 == *v284)
                      {
                        ++v285;
                        ++v284;
                        if (!--v280)
                          goto LABEL_523;
                      }
                    }
                  }
                }
              }
            }
            pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)&v423);
          }
          if ((v417 & 7) != 0)
          {
            v313 = (unsigned int *)(v417 & 0xFFFFFFFFFFFFFFF8);
            do
              v314 = __ldxr(v313);
            while (__stlxr(v314 - 2, v313));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v415);
          if (v414)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v414);
          v200 += 4;
        }
        while (v200 != (uint64_t *)v201);
      }
      v423 = &v389;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v423);
      v315 = *v350;
      v316 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v184);
      if ((*(_QWORD *)v316 & 0xFFFFFFFFFFFFFFF8) != 0)
        v317 = (*(_QWORD *)v316 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v317 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v316);
      v357 = v370;
      if (*((_QWORD *)&v370 + 1))
      {
        v318 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
        do
          v319 = __ldxr(v318);
        while (__stxr(v319 + 1, v318));
      }
      RIO_MTLX::GraphElement::addMaterialNode(v315, v317, (const std::string **)&v357, (uint64_t *)&v423);
      v320 = (std::__shared_weak_count *)*((_QWORD *)&v357 + 1);
      if (*((_QWORD *)&v357 + 1))
      {
        v321 = (unint64_t *)(*((_QWORD *)&v357 + 1) + 8);
        do
          v322 = __ldaxr(v321);
        while (__stlxr(v322 - 1, v321));
        if (!v322)
        {
          ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
          std::__shared_weak_count::__release_weak(v320);
        }
      }
      v323 = v424;
      if (v424)
      {
        v324 = (unint64_t *)&v424->__shared_owners_;
        do
          v325 = __ldaxr(v324);
        while (__stlxr(v325 - 1, v324));
        if (!v325)
        {
          ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
          std::__shared_weak_count::__release_weak(v323);
        }
      }
      v326 = (std::__shared_weak_count *)*((_QWORD *)&v370 + 1);
      if (*((_QWORD *)&v370 + 1))
      {
        v327 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
        do
          v328 = __ldaxr(v327);
        while (__stlxr(v328 - 1, v327));
        if (!v328)
        {
          ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
          std::__shared_weak_count::__release_weak(v326);
        }
      }
      if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v398.__r_.__value_.__l.__data_);
      if ((v396.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v329 = (unsigned int *)(v396.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v330 = __ldxr(v329);
        while (__stlxr(v330 - 2, v329));
      }
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::destroy(v376);
    }
    MEMORY[0x2348B1EC4](&v378);
    if ((v380 & 7) != 0)
    {
      v331 = (unsigned int *)(v380 & 0xFFFFFFFFFFFFFFF8);
      do
        v332 = __ldxr(v331);
      while (__stlxr(v332 - 2, v331));
    }
  }
  return MEMORY[0x2348B20B0](&v381);
}

void sub_23015339C(_Unwind_Exception *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;

  if ((STACK[0x3E8] & 7) != 0)
  {
    v2 = (unsigned int *)(STACK[0x3E8] & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  if ((STACK[0x250] & 7) != 0)
  {
    v4 = (unsigned int *)(STACK[0x250] & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  MEMORY[0x2348B20B0](&STACK[0x258]);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::setInput(uint64_t **a1, RIO_MTLX::Input **a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::UsdProperty *this, std::string *a5)
{
  std::string::size_type v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unint64_t v33;
  const char *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  RIO_MTLX::Input *v41;
  RIO_MTLX *v42;
  _QWORD *v43;
  RIO_MTLX::TypedElement *v44;
  const std::string *v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  RIO_MTLX::Input *v61;
  RIO_MTLX *v62;
  uint64_t *v63;
  std::string *v64;
  uint64_t *v65;
  const std::string *v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *size;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  __int128 *v75;
  RIO_MTLX::ValueElement *v76;
  __int128 *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  RIO_MTLX::Element *v81;
  __int128 *v82;
  unsigned int *v83;
  unsigned int v84;
  unint64_t v85;
  char *v86;
  RIO_MTLX::Input *v87;
  RIO_MTLX *v88;
  uint64_t *v89;
  std::string *v90;
  uint64_t *v91;
  const std::string *v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  __int128 *v101;
  RIO_MTLX::ValueElement *v102;
  __int128 *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  RIO_MTLX::Input *v107;
  RIO_MTLX *v108;
  uint64_t *v109;
  std::string *v110;
  uint64_t *v111;
  const std::string *v112;
  __int128 v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  __int128 *v121;
  RIO_MTLX::ValueElement *v122;
  __int128 *v123;
  unint64_t *v124;
  unint64_t v125;
  char *v126;
  RIO_MTLX::Input *v127;
  RIO_MTLX *v128;
  uint64_t *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  RIO_MTLX::Input *v138;
  RIO_MTLX *v139;
  uint64_t *v140;
  unint64_t *v141;
  void *v142;
  RIO_MTLX::Input *v143;
  RIO_MTLX *v144;
  uint64_t *v145;
  RIO_MTLX *v146;
  uint64_t *v147;
  const std::string *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  __int128 *v153;
  RIO_MTLX::ValueElement *v154;
  __int128 *v155;
  unint64_t *v156;
  uint64_t *v157;
  std::__shared_weak_count *v158;
  RIO_MTLX *v159;
  int v160;
  std::string __p;
  RIO_MTLX *v162[2];
  std::string v163;
  void *v164;
  char v165;
  __int128 v166;

  *a1 = 0;
  a1[1] = 0;
  if (a5->__r_.__value_.__r.__words[0] <= 7)
  {
    pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(this);
    v10 = a5->__r_.__value_.__r.__words[0];
    if (&v163 != a5)
    {
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
      v10 = 0;
      a5->__r_.__value_.__r.__words[0] = v163.__r_.__value_.__r.__words[0];
      v163.__r_.__value_.__r.__words[0] = 0;
    }
    if ((v10 & 7) != 0)
    {
      v13 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
  }
  MEMORY[0x2348B274C](&v163, "asset");
  v15 = (unsigned int *)(v163.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
  v16 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if ((v163.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    do
      v17 = __ldxr(v15);
    while (__stlxr(v17 - 2, v15));
  }
  if (v15 == (unsigned int *)v16)
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v163);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
    v35 = a5->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
    if (v35)
    {
      v36 = (char *)(v35 + 16);
      if (*(char *)(v35 + 39) < 0)
        v36 = *(char **)v36;
    }
    else
    {
      v36 = "";
    }
    v41 = *a2;
    v42 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(&__p, v36);
    v43 = RIO_MTLX::FILENAME_TYPE_STRING(v42);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v41, (unsigned __int8 *)&__p, v162);
    v44 = v162[0];
    if (!v162[0])
    {
      v45 = (const std::string *)RIO_MTLX::DEFAULT_TYPE_STRING(0);
      RIO_MTLX::InterfaceElement::addInput(v41, (uint64_t)&__p, v45, (uint64_t *)&v166);
      v46 = v166;
      v166 = 0uLL;
      v47 = (std::__shared_weak_count *)v162[1];
      *(_OWORD *)v162 = v46;
      if (v47)
      {
        p_shared_owners = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldaxr(p_shared_owners);
        while (__stlxr(v49 - 1, p_shared_owners));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
      if (*((_QWORD *)&v166 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v44 = v162[0];
    }
    RIO_MTLX::ValueElement::setValue<std::string>(v44, &v163, (uint64_t)v43);
    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v162);
    v53 = (std::__shared_weak_count *)v162[1];
    if (v162[1])
    {
      v54 = (unint64_t *)((char *)v162[1] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasColorSpace(this))
    {
      v56 = *a1;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(this);
      v57 = v166 & 0xFFFFFFFFFFFFFFF8;
      if ((v166 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v58 = (char *)(v57 + 16);
        if (*(char *)(v57 + 39) < 0)
          v58 = *(char **)v58;
      }
      else
      {
        v58 = "";
      }
      v81 = (RIO_MTLX::Element *)std::string::basic_string[abi:ne180100]<0>(&__p, v58);
      v82 = (__int128 *)RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(v81);
      RIO_MTLX::Element::setAttribute(v56, v82, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v166 & 7) != 0)
      {
        v83 = (unsigned int *)(v166 & 0xFFFFFFFFFFFFFFF8);
        do
          v84 = __ldxr(v83);
        while (__stlxr(v84 - 2, v83));
      }
    }
    if (v165 < 0)
      operator delete(v164);
    goto LABEL_165;
  }
  MEMORY[0x2348B274C](&v163, "float2");
  v18 = (unsigned int *)(v163.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
  v19 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if ((v163.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    do
      v20 = __ldxr(v18);
    while (__stlxr(v20 - 2, v18));
  }
  if (v18 == (unsigned int *)v19)
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>();
    v37 = a5->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
    if (v37)
    {
      v38 = (char *)(v37 + 16);
      if (*(char *)(v37 + 39) < 0)
        v38 = *(char **)v38;
    }
    else
    {
      v38 = "";
    }
    v61 = *a2;
    v62 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(&__p, v38);
    v159 = v162[0];
    v63 = RIO_MTLX::EMPTY_STRING(v62);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v61, (unsigned __int8 *)&__p, &v166);
    v65 = (uint64_t *)v166;
    if (!(_QWORD)v166)
    {
      v66 = (const std::string *)RIO_MTLX::DEFAULT_TYPE_STRING((RIO_MTLX *)v64);
      v64 = RIO_MTLX::InterfaceElement::addInput(v61, (uint64_t)&__p, v66, (uint64_t *)&v163);
      v67 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = 0uLL;
      v68 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
      v166 = v67;
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      size = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
      if (v163.__r_.__value_.__l.__size_)
      {
        v72 = (unint64_t *)(v163.__r_.__value_.__l.__size_ + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v65 = (uint64_t *)v166;
    }
    v74 = *((unsigned __int8 *)v63 + 23);
    if ((v74 & 0x80u) != 0)
      v74 = v63[1];
    if (!v74)
    {
      v64 = (std::string *)RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE();
      v63 = &RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v;
    }
    v75 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v64);
    RIO_MTLX::Element::setAttribute(v65, v75, (const std::string *)v63);
    RIO_MTLX::toValueString<RIO_MTLX::Vector2>((uint64_t)&v159, &v163);
    v77 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v76);
    RIO_MTLX::Element::setAttribute(v65, v77, &v163);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a1, &v166);
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
    if (!*((_QWORD *)&v166 + 1))
      goto LABEL_186;
    v79 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    goto LABEL_184;
  }
  MEMORY[0x2348B274C](&v163, "float3");
  v21 = (unsigned int *)(v163.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
  v22 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if ((v163.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    do
      v23 = __ldxr(v21);
    while (__stlxr(v23 - 2, v21));
  }
  if (v21 == (unsigned int *)v22)
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>();
    v39 = a5->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
    if (v39)
    {
      v40 = (char *)(v39 + 16);
      if (*(char *)(v39 + 39) < 0)
        v40 = *(char **)v40;
    }
    else
    {
      v40 = "";
    }
    v87 = *a2;
    v88 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(&__p, v40);
    v159 = v162[0];
    v160 = (int)v162[1];
    v89 = RIO_MTLX::EMPTY_STRING(v88);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v87, (unsigned __int8 *)&__p, &v166);
    v91 = (uint64_t *)v166;
    if (!(_QWORD)v166)
    {
      v92 = (const std::string *)RIO_MTLX::DEFAULT_TYPE_STRING((RIO_MTLX *)v90);
      v90 = RIO_MTLX::InterfaceElement::addInput(v87, (uint64_t)&__p, v92, (uint64_t *)&v163);
      v93 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = 0uLL;
      v94 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
      v166 = v93;
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v97 = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
      if (v163.__r_.__value_.__l.__size_)
      {
        v98 = (unint64_t *)(v163.__r_.__value_.__l.__size_ + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v91 = (uint64_t *)v166;
    }
    v100 = *((unsigned __int8 *)v89 + 23);
    if ((v100 & 0x80u) != 0)
      v100 = v89[1];
    if (!v100)
    {
      v90 = (std::string *)RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE();
      v89 = &RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v;
    }
    v101 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v90);
    RIO_MTLX::Element::setAttribute(v91, v101, (const std::string *)v89);
    RIO_MTLX::toValueString<RIO_MTLX::Vector3>((uint64_t)&v159, &v163);
    v103 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v102);
    RIO_MTLX::Element::setAttribute(v91, v103, &v163);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a1, &v166);
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
    if (!*((_QWORD *)&v166 + 1))
      goto LABEL_186;
    v104 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v80 = __ldaxr(v104);
    while (__stlxr(v80 - 1, v104));
    goto LABEL_184;
  }
  MEMORY[0x2348B274C](&v163, "float");
  v24 = *a3 & 0xFFFFFFFFFFFFFFF8;
  v25 = (unsigned int *)(v163.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
  if ((v163.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  if ((unsigned int *)v24 == v25)
  {
    LODWORD(v162[0]) = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
    v59 = a5->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
    if (v59)
    {
      v60 = (char *)(v59 + 16);
      if (*(char *)(v59 + 39) < 0)
        v60 = *(char **)v60;
    }
    else
    {
      v60 = "";
    }
    v107 = *a2;
    v108 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(&__p, v60);
    v109 = RIO_MTLX::EMPTY_STRING(v108);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v107, (unsigned __int8 *)&__p, &v166);
    v111 = (uint64_t *)v166;
    if (!(_QWORD)v166)
    {
      v112 = (const std::string *)RIO_MTLX::DEFAULT_TYPE_STRING((RIO_MTLX *)v110);
      v110 = RIO_MTLX::InterfaceElement::addInput(v107, (uint64_t)&__p, v112, (uint64_t *)&v163);
      v113 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = 0uLL;
      v114 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
      v166 = v113;
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v117 = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
      if (v163.__r_.__value_.__l.__size_)
      {
        v118 = (unint64_t *)(v163.__r_.__value_.__l.__size_ + 8);
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      v111 = (uint64_t *)v166;
    }
    v120 = *((unsigned __int8 *)v109 + 23);
    if ((v120 & 0x80u) != 0)
      v120 = v109[1];
    if (!v120)
    {
      v110 = (std::string *)RIO_MTLX::TypedValue<float>::TYPE();
      v109 = RIO_MTLX::TypedValue<float>::TYPE(void)::v;
    }
    v121 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE((RIO_MTLX::TypedElement *)v110);
    RIO_MTLX::Element::setAttribute(v111, v121, (const std::string *)v109);
    v122 = (RIO_MTLX::ValueElement *)RIO_MTLX::toValueString<float>((uint64_t)v162, &v163);
    v123 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v122);
    RIO_MTLX::Element::setAttribute(v111, v123, &v163);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a1, &v166);
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
    if (!*((_QWORD *)&v166 + 1))
      goto LABEL_186;
    v124 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v80 = __ldaxr(v124);
    while (__stlxr(v80 - 1, v124));
    goto LABEL_184;
  }
  MEMORY[0x2348B274C](&v163, "color3f");
  v27 = *a3 & 0xFFFFFFFFFFFFFFF8;
  v28 = (unsigned int *)(v163.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
  if ((v163.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  if ((unsigned int *)v27 == v28)
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>();
    v85 = a5->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
    if (v85)
    {
      v86 = (char *)(v85 + 16);
      if (*(char *)(v85 + 39) < 0)
        v86 = *(char **)v86;
    }
    else
    {
      v86 = "";
    }
    v138 = *a2;
    v139 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(&v163, v86);
    v162[0] = (RIO_MTLX *)v166;
    LODWORD(v162[1]) = DWORD2(v166);
    v140 = RIO_MTLX::EMPTY_STRING(v139);
    RIO_MTLX::InterfaceElement::setInputValue<RIO_MTLX::Color3>((uint64_t **)&__p, v138, (unsigned __int8 *)&v163, (uint64_t)v162, v140);
    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&__p);
    v135 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_165;
    v141 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v137 = __ldaxr(v141);
    while (__stlxr(v137 - 1, v141));
    goto LABEL_163;
  }
  MEMORY[0x2348B274C](&v163, "int");
  v30 = *a3 & 0xFFFFFFFFFFFFFFF8;
  v31 = (unsigned int *)(v163.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
  if ((v163.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  if ((unsigned int *)v30 != v31)
  {
    v33 = *a3 & 0xFFFFFFFFFFFFFFF8;
    if (v33)
    {
      v34 = (const char *)(v33 + 16);
      if (*(char *)(v33 + 39) < 0)
        v34 = *(const char **)v34;
    }
    else
    {
      v34 = "";
    }
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "\n Unhandled input type = \"%s\"\n", v34);
    v125 = a5->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
    if (v125)
    {
      v126 = (char *)(v125 + 16);
      if (*(char *)(v125 + 39) < 0)
        v126 = *(char **)v126;
    }
    else
    {
      v126 = "";
    }
    v127 = *a2;
    v128 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(&v163, v126);
    __asm { FMOV            V0.2S, #1.0 }
    __p.__r_.__value_.__r.__words[0] = _D0;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 1065353216;
    v134 = RIO_MTLX::EMPTY_STRING(v128);
    RIO_MTLX::InterfaceElement::setInputValue<RIO_MTLX::Color3>(&v157, v127, (unsigned __int8 *)&v163, (uint64_t)&__p, v134);
    v135 = v158;
    if (!v158)
      goto LABEL_165;
    v136 = (unint64_t *)&v158->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
LABEL_163:
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
LABEL_165:
    if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v142 = (void *)v163.__r_.__value_.__r.__words[0];
    goto LABEL_188;
  }
  LODWORD(v162[0]) = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>();
  v105 = a5->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
  if (v105)
  {
    v106 = (char *)(v105 + 16);
    if (*(char *)(v105 + 39) < 0)
      v106 = *(char **)v106;
  }
  else
  {
    v106 = "";
  }
  v143 = *a2;
  v144 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(&__p, v106);
  v145 = RIO_MTLX::EMPTY_STRING(v144);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)v143, (unsigned __int8 *)&__p, &v166);
  v147 = (uint64_t *)v166;
  if (!(_QWORD)v166)
  {
    v148 = (const std::string *)RIO_MTLX::DEFAULT_TYPE_STRING(v146);
    RIO_MTLX::InterfaceElement::addInput(v143, (uint64_t)&__p, v148, (uint64_t *)&v163);
    v146 = (RIO_MTLX *)std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)&v166, (__int128 *)&v163);
    v149 = (std::__shared_weak_count *)v163.__r_.__value_.__l.__size_;
    if (v163.__r_.__value_.__l.__size_)
    {
      v150 = (unint64_t *)(v163.__r_.__value_.__l.__size_ + 8);
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
    }
    v147 = (uint64_t *)v166;
  }
  v152 = *((unsigned __int8 *)v145 + 23);
  if ((v152 & 0x80u) != 0)
    v152 = v145[1];
  if (!v152)
  {
    v146 = (RIO_MTLX *)RIO_MTLX::TypedValue<int>::TYPE();
    v145 = RIO_MTLX::TypedValue<int>::TYPE(void)::v;
  }
  v153 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v146);
  RIO_MTLX::Element::setAttribute(v147, v153, (const std::string *)v145);
  v154 = (RIO_MTLX::ValueElement *)RIO_MTLX::toValueString<int>((uint64_t)v162, &v163);
  v155 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v154);
  RIO_MTLX::Element::setAttribute(v147, v155, &v163);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a1, &v166);
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v156 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v80 = __ldaxr(v156);
    while (__stlxr(v80 - 1, v156));
LABEL_184:
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
LABEL_186:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
  v142 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_188:
  operator delete(v142);
}

void sub_230154888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v28 - 64);
  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::mtlxTypeString(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v20;

  MEMORY[0x2348B274C](&v20, "color3f");
  v4 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  v5 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
  if ((v20 & 7) != 0)
  {
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((unsigned int *)v4 == v5)
  {
    v18 = "color3";
  }
  else
  {
    MEMORY[0x2348B274C](&v20, "float");
    v7 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    v8 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    if ((v20 & 7) != 0)
    {
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    if ((unsigned int *)v7 == v8)
    {
      v18 = "float";
    }
    else
    {
      MEMORY[0x2348B274C](&v20, "float3");
      v10 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      v11 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      if ((v20 & 7) != 0)
      {
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
      if ((unsigned int *)v10 == v11)
      {
        v18 = "float3";
      }
      else
      {
        MEMORY[0x2348B274C](&v20, "int");
        v13 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
        v14 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        if ((v20 & 7) != 0)
        {
          do
            v15 = __ldxr(v14);
          while (__stlxr(v15 - 2, v14));
        }
        if ((unsigned int *)v13 == v14)
        {
          v18 = "int";
        }
        else
        {
          v16 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v16)
          {
            v17 = (const char *)(v16 + 16);
            if (*(char *)(v16 + 39) < 0)
              v17 = *(const char **)v17;
          }
          else
          {
            v17 = "";
          }
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "\nUnhandled typetoke \"%s\" \n", v17);
          v18 = "";
        }
      }
    }
  }
  return std::string::basic_string[abi:ne180100]<0>(this, v18);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>>>::destroy(a1[1]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdShadeConnectionSourceInfo,1u>::~TfSmallVector(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = a1;
  v2 = *(_DWORD *)(a1 + 60);
  if (v2 >= 2)
    a1 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(v1 + 56);
  if (v3)
  {
    v4 = a1 + 56 * v3;
    do
    {
      v5 = *(_QWORD *)(a1 + 32);
      if ((v5 & 7) != 0)
      {
        v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stlxr(v7 - 2, v6));
      }
      a1 = MEMORY[0x2348B2350]() + 56;
    }
    while (a1 != v4);
    v2 = *(_DWORD *)(v1 + 60);
  }
  if (v2 >= 2)
    free(*(void **)v1);
  return v1;
}

void RIO_MTLX::InterfaceElement::setInputValue<RIO_MTLX::Color3>(uint64_t **a1, RIO_MTLX::Input *a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5)
{
  RIO_MTLX *v10;
  uint64_t *v11;
  const std::string *v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  RIO_MTLX::ValueElement *v18;
  __int128 *v19;
  std::string __p;

  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)a2, a3, a1);
  v11 = *a1;
  if (!*a1)
  {
    v12 = (const std::string *)RIO_MTLX::DEFAULT_TYPE_STRING(v10);
    RIO_MTLX::InterfaceElement::addInput(a2, (uint64_t)a3, v12, (uint64_t *)&__p);
    v10 = (RIO_MTLX *)std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v11 = *a1;
  }
  v16 = *((unsigned __int8 *)a5 + 23);
  if ((v16 & 0x80u) != 0)
    v16 = a5[1];
  if (!v16)
  {
    v10 = (RIO_MTLX *)RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE();
    a5 = &RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v;
  }
  v17 = (__int128 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v10);
  RIO_MTLX::Element::setAttribute(v11, v17, (const std::string *)a5);
  RIO_MTLX::toValueString<RIO_MTLX::Color3>(a4, &__p);
  v19 = (__int128 *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v18);
  RIO_MTLX::Element::setAttribute(v11, v19, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_230154DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::_Destruct(a1);
  if (*(_DWORD *)(a1 + 36) >= 2u)
    free(*(void **)a1);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::_Destruct(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v1 = result;
  if (*(_DWORD *)(result + 36) >= 2u)
    v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(result + 32);
  if ((_DWORD)v2)
  {
    v3 = v1 + 32 * v2;
    do
    {
      v4 = *(_QWORD *)(v1 + 24);
      if ((v4 & 7) != 0)
      {
        v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v1 + 16);
      result = *(_QWORD *)(v1 + 8);
      if (result)
        result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
      v1 += 32;
    }
    while (v1 != v3);
  }
  return result;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::destroy(a1[1]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t realityio::internal::dumpDiagnostics(const void **a1, unsigned int **a2)
{
  const void *v2;
  uint64_t v5;
  size_t v6;
  std::string *v7;
  const void *v8;
  size_t v9;
  std::string *p_s;
  const void *v11;
  char v12;
  BOOL v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  uint64_t v22;
  std::string *v23;
  void *v24;
  int v25;
  __CFError *v26;
  __CFString *v27;
  const char *v28;
  uint64_t ServiceLocator;
  uint64_t v30;
  unint64_t v31;
  std::string *p_p;
  FILE *v33;
  std::string *v34;
  FILE *v35;
  std::string::size_type v36;
  uint64_t v37;
  const __CFString *Type;
  const __CFString *v39;
  char *CStringPtr;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  std::string *v43;
  std::string *v44;
  size_t v45;
  uint64_t AssetId;
  const char *v47;
  void *v48;
  const char *v49;
  const char *v50;
  std::string *v51;
  std::string *v52;
  BOOL v53;
  FILE *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  int v58;
  FILE *v59;
  void *v60;
  void *v61;
  void *v63;
  char v64;
  unsigned int *v65;
  void *v66;
  char v67;
  std::string __s;
  std::string v69;
  std::string __p;
  std::string v71;
  FILE *__stream;
  void *v73;
  uint64_t v74;
  void *v75;
  char v76;
  _BYTE v77[15];
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v2 = (const void *)*((unsigned __int8 *)a1 + 23);
  if ((char)v2 < 0)
    v2 = a1[1];
  if (!v2)
    return 0;
  if ((pxrInternal__aapl__pxrReserved__::TfIsDir() & 1) != 0
    || (v5 = 0, pxrInternal__aapl__pxrReserved__::TfMakeDirs()))
  {
    v65 = *a2;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v65);
    if (*((char *)a1 + 23) >= 0)
      v6 = *((unsigned __int8 *)a1 + 23);
    else
      v6 = (size_t)a1[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&v69, v6 + 14);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v69;
    else
      v7 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if (v6)
    {
      if (*((char *)a1 + 23) >= 0)
        v8 = a1;
      else
        v8 = *a1;
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, "/snapshot.usdz");
    std::string::basic_string[abi:ne180100]<0>(&__stream, "rootLayer");
    std::string::basic_string[abi:ne180100]<0>(&__p, ".usda");
    pxrInternal__aapl__pxrReserved__::ArchMakeTmpFileName();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74) < 0)
      operator delete(__stream);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v65);
    v73 = 0;
    v74 = 0;
    __stream = (FILE *)&v73;
    pxrInternal__aapl__pxrReserved__::UsdStage::Export();
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__stream, v73);
    MEMORY[0x2348B1B64](&__stream, &v71);
    memset(&__p, 0, sizeof(__p));
    pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewUsdzPackage();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v76 < 0)
      operator delete(v75);
    if (SHIBYTE(v74) < 0)
      operator delete(__stream);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v65);
    if (*((char *)a1 + 23) >= 0)
      v9 = *((unsigned __int8 *)a1 + 23);
    else
      v9 = (size_t)a1[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v9 + 17);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s = &__s;
    else
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (v9)
    {
      if (*((char *)a1 + 23) >= 0)
        v11 = a1;
      else
        v11 = *a1;
      memmove(p_s, v11, v9);
    }
    strcpy((char *)p_s + v9, "/snapshot.reality");
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__s.__r_.__value_.__l.__size_)
      {
LABEL_81:
        operator delete(__s.__r_.__value_.__l.__data_);
        goto LABEL_82;
      }
      std::string::__init_copy_ctor_external(&v71, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      {
LABEL_82:
        std::string::basic_string[abi:ne180100]<0>(&v63, "reality.json");
        ServiceLocator = REEngineGetServiceLocator();
        v30 = MEMORY[0x2348B1264](ServiceLocator);
        RESceneCreate();
        RESceneAddEntity();
        v31 = REAssetManagerSceneAssetCreate();
        pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
        REAssetSerializeToJSON();
        if (SHIBYTE(v74) < 0)
          operator delete(__stream);
        RERelease();
        std::string::basic_string[abi:ne180100]<0>(&v71, "assets");
        pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        if ((pxrInternal__aapl__pxrReserved__::TfIsDir() & 1) != 0
          || (pxrInternal__aapl__pxrReserved__::TfMakeDirs() & 1) != 0)
        {
          *(_OWORD *)&v71.__r_.__value_.__r.__words[1] = 0uLL;
          v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]<0>(&v69, "assetManifest.json");
          pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v33 = fopen((const char *)p_p, "w");
          if (v33)
          {
            std::string::basic_string[abi:ne180100]<0>(&__s, "assetLinks.sh");
            pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s.__r_.__value_.__l.__data_);
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v34 = &v69;
            else
              v34 = (std::string *)v69.__r_.__value_.__r.__words[0];
            v35 = fopen((const char *)v34, "w");
            if (v35)
            {
              fwrite("/bin/mkdir -p assetLinks\n", 0x19uLL, 1uLL, v35);
              fwrite("{\n", 2uLL, 1uLL, v33);
              v36 = v71.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)v71.__r_.__value_.__l.__data_ != &v71.__r_.__value_.__r.__words[1])
              {
                v37 = 0;
                do
                {
                  Type = (const __CFString *)REAssetGetType();
                  v39 = Type;
                  if (Type)
                  {
                    CStringPtr = (char *)CFStringGetCStringPtr(Type, 0x8000100u);
                    if (!CStringPtr)
                    {
                      Length = CFStringGetLength(v39);
                      MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
                      std::string::basic_string[abi:ne180100](&__s, MaximumSizeForEncoding, 0);
                      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v43 = &__s;
                      else
                        v43 = (std::string *)__s.__r_.__value_.__r.__words[0];
                      CFStringGetCString(v39, (char *)v43, MaximumSizeForEncoding, 0x8000100u);
                      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v44 = &__s;
                      else
                        v44 = (std::string *)__s.__r_.__value_.__r.__words[0];
                      v45 = strlen((const char *)v44);
                      std::string::resize(&__s, v45, 0);
                      goto LABEL_113;
                    }
                  }
                  else
                  {
                    CStringPtr = "";
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__s, CStringPtr);
LABEL_113:
                  AssetId = REAssetGetAssetId();
                  pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier();
                  if (v67 >= 0)
                    v48 = &v66;
                  else
                    v48 = v66;
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%llu.%s.json", v47, v37, v48);
                  if (v67 < 0)
                    operator delete(v66);
                  pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
                  REAssetSerializeToJSON();
                  if (v78 >= 0)
                    v49 = v77;
                  else
                    v49 = *(const char **)v77;
                  fprintf(v35, "/bin/ln -sf ../%s assetLinks/asset.%llu\n", v49, AssetId);
                  if (v78 >= 0)
                    v50 = v77;
                  else
                    v50 = *(const char **)v77;
                  fprintf(v33, "  \"%s\": \"%llu\"", v50, AssetId);
                  if (v37 != v71.__r_.__value_.__r.__words[2] - 1)
                    fputc(44, v33);
                  fputc(10, v33);
                  CFRelease(v39);
                  if (v67 < 0)
                    operator delete(v66);
                  if (v78 < 0)
                    operator delete(*(void **)v77);
                  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__s.__r_.__value_.__l.__data_);
                  v51 = *(std::string **)(v36 + 8);
                  if (v51)
                  {
                    do
                    {
                      v52 = v51;
                      v51 = (std::string *)v51->__r_.__value_.__r.__words[0];
                    }
                    while (v51);
                  }
                  else
                  {
                    do
                    {
                      v52 = *(std::string **)(v36 + 16);
                      v53 = v52->__r_.__value_.__r.__words[0] == v36;
                      v36 = (std::string::size_type)v52;
                    }
                    while (!v53);
                  }
                  ++v37;
                  v36 = (std::string::size_type)v52;
                }
                while (v52 != (std::string *)&v71.__r_.__value_.__r.__words[1]);
              }
              RERelease();
              fwrite("}\n", 2uLL, 1uLL, v33);
              fclose(v33);
            }
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v69.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((_QWORD *)v71.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(v74) < 0)
          operator delete(__stream);
        if (v64 < 0)
          operator delete(v63);
        std::string::basic_string[abi:ne180100]<0>(&__p, "info.json");
        pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
        pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Replace();
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        fwrite("{\n", 2uLL, 1uLL, __stream);
        v54 = __stream;
        objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.CoreRE"));
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        v56 = *MEMORY[0x24BDBD2A0];
        objc_msgSend(v55, "objectForInfoDictionaryKey:", *MEMORY[0x24BDBD2A0]);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        v58 = objc_msgSend(v57, "intValue");

        fprintf(v54, "\t\"CoreREVersion\": %lu,\n", v58);
        v59 = __stream;
        objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.CoreRealityIO"));
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v60, "objectForInfoDictionaryKey:", v56);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v56) = objc_msgSend(v61, "intValue");

        fprintf(v59, "\t\"CoreRealityIOVersion\": %lu\n", (int)v56);
        v5 = 1;
        fwrite("}\n", 2uLL, 1uLL, __stream);
        MEMORY[0x2348B1FF0](&__stream);
        return v5;
      }
      v71 = __s;
    }
    v13 = v12 < 0;
    v14 = &__s;
    if (v13)
      v14 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (v14->__r_.__value_.__s.__data_[0] != 47)
    {
      getcwd((char *)&__stream, 0x400uLL);
      std::string::basic_string[abi:ne180100]<0>(&v69, (char *)&__stream);
      v15 = std::string::append(&v69, "/");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &__s;
      else
        v17 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      else
        size = __s.__r_.__value_.__l.__size_;
      v19 = std::string::append(&__p, (const std::string::value_type *)v17, size);
      v20 = v19->__r_.__value_.__r.__words[0];
      *(_QWORD *)v77 = v19->__r_.__value_.__l.__size_;
      *(_QWORD *)&v77[7] = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
      v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      v71.__r_.__value_.__r.__words[0] = v20;
      v71.__r_.__value_.__l.__size_ = *(_QWORD *)v77;
      *(std::string::size_type *)((char *)&v71.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v77[7];
      *((_BYTE *)&v71.__r_.__value_.__s + 23) = v21;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
    }
    v22 = REEngineGetServiceLocator();
    MEMORY[0x2348B1264](v22);
    RESceneCreate();
    RESceneAddEntity();
    REAssetManagerSceneAssetCreate();
    RERelease();
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v71;
    else
      v23 = (std::string *)v71.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    RERealityFileWritingParametersCreate();
    RERealityFileWritingParametersSetMajorVersion();
    if (RERealityFileWriterCreateWithParameters())
    {
      RERealityFileWriterSetMetadataString();
      objc_msgSend(objc_retainAutorelease(v24), "cStringUsingEncoding:", 4);
      if ((RERealityFileWriterOpen() & 1) != 0)
      {
        REAssetManagerCreateAssetRequest();
        REAssetLoadRequestAddAsset();
        REAssetLoadRequestWaitForCompletion();
        RERelease();
        RERealityFileAssetWriteReportCreate();
        __p.__r_.__value_.__r.__words[0] = REAssetWithMetadataCreate();
        RERelease();
        v25 = RERealityFileWriterWriteAssetArrayAndDependencies();
        v26 = (__CFError *)RERealityFileAssetWriteReportGetError();
        RERelease();
        if (v26)
        {
          v27 = (__CFString *)CFErrorCopyDescription(v26);
          realityio::CFStringCopyUTF8String(v27, (uint64_t)&__stream);
          if ((_BYTE)__stream)
          {
            v28 = (const char *)&v73;
            if (SHIBYTE(v75) < 0)
              v28 = (const char *)v73;
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "\n ERROR %s\n", v28);
            if ((_BYTE)__stream && SHIBYTE(v75) < 0)
              operator delete(v73);
          }
        }
        else if (v25 && (RERealityFileWriterClose() & 1) != 0)
        {
          RERelease();
          RERelease();
          RERelease();
        }
      }
    }

    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_82;
    goto LABEL_81;
  }
  return v5;
}

void sub_230155AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;

  if (a51 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

uint64_t realityio::internal::`anonymous namespace'::getDependentAssets(unint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t Size;
  uint64_t v15;
  uint64_t i;
  unint64_t Asset;
  _QWORD *v18;
  unint64_t v19;

  v7 = a3 + 1;
  v6 = a3[1];
  v8 = a3 + 1;
  v9 = a3 + 1;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v10 <= a1)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_8;
      }
      if (v10 >= a1)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v11 = (uint64_t *)operator new(0x28uLL);
    v11[4] = a1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *v8 = v11;
    v12 = (uint64_t *)**a3;
    if (v12)
    {
      *a3 = v12;
      v13 = *v8;
    }
    else
    {
      v13 = v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a3[1], v13);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
  }
  REAssetCopyDependencyArray();
  Size = REAssetDynamicArrayGetSize();
  if (Size)
  {
    v15 = Size;
    for (i = 0; i != v15; ++i)
    {
      Asset = REAssetDynamicArrayGetAsset();
      v18 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v19 = v18[4];
          if (Asset >= v19)
          {
            if (v19 >= Asset)
              goto LABEL_20;
            ++v18;
          }
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
LABEL_20:
      ;
    }
  }
  return RERelease();
}

realityio::PhysicsRigidBodyComponentBuilder *realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(realityio::PhysicsRigidBodyComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  void *__src;
  _BYTE v21[16];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__src, "PhysicsRigidBodyComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kPhysicsRigidBodyComponentBuilderIdentifier);
  realityio::generatePhysicsRigidBodyDirtyStageSubscription(&v12);
  v19 = v18;
  v16[0] = &off_24FDFB140;
  v17 = v16;
  v18[0] = &off_24FDFB0C0;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)&__src, (uint64_t)__p, &v12, (uint64_t)v18, (uint64_t)v16);
  v4 = v17;
  if (v17 == v16)
  {
    v5 = 4;
    v4 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v19;
  if (v19 == v18)
  {
    v7 = 4;
    v6 = v18;
    goto LABEL_10;
  }
  if (v19)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if ((v21[15] & 0x80000000) != 0)
    operator delete(__src);
  *(_QWORD *)this = &off_24FDFB048;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = 0;
  __src = (void *)RERigidBodyComponentGetComponentType();
  std::vector<REComponentClass *>::__assign_with_size[abi:ne180100]<REComponentClass * const*,REComponentClass * const*>((char *)this + 280, (char *)&__src, (uint64_t)v21, 1uLL);
  return this;
}

void sub_230156074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char *a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v28 = a21;
  if (a21 == v25)
  {
    v29 = 4;
    v28 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  v30 = a25;
  if (a25 == &a22)
  {
    v31 = 4;
    v30 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_11;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  _Unwind_Resume(a1);
}

uint64_t realityio::PhysicsRigidBodyComponentBuilder::run(realityio::PhysicsRigidBodyComponentBuilder *this, std::__shared_weak_count **a2)
{
  int *v2;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  double *v7;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *Data;
  realityio *UsdPhysicsAttributeDoubleValue;
  unsigned int *v10;
  unsigned int v11;
  _BYTE *size;
  NSObject *v13;
  uint64_t Text;
  realityio::EntityBuilder *v15;
  uint64_t v16;
  realityio *v17;
  realityio::PhysicsMaterialAssetBuilder *v18;
  uint64_t v19;
  realityio *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  std::string *v40;
  __int128 v41;
  uint64_t String;
  int v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  __int128 v48;
  realityio *v49;
  uint64_t v50;
  std::mutex *v51;
  int v52;
  unsigned int *v53;
  unsigned int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  NSObject *v62;
  int v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  const void **EmptyString;
  unsigned int *v69;
  unsigned int v70;
  uint64_t result;
  __int128 v72;
  int v73;
  int v74;
  BOOL v75;
  unint64_t *v76;
  unint64_t v77;
  std::mutex *v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  char v82[8];
  uint64_t v83;
  void *__p;
  char v85;
  realityio *v86;
  int v87;
  realityio *v88;
  uint64_t v89;
  char v90[8];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  __int128 v100;
  std::string v101;
  _BYTE buf[24];
  std::string v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, v5);
  v89 = 0;
  MEMORY[0x2348B274C](buf, "physics:mass");
  Data = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(MEMORY[0x24BEE83A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
  UsdPhysicsAttributeDoubleValue = (realityio *)realityio::getUsdPhysicsAttributeDoubleValue((realityio *)v90, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)buf, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)Data + 64), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v89, v7);
  if ((buf[0] & 7) != 0)
  {
    v10 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  size = buf;
  if ((UsdPhysicsAttributeDoubleValue & 1) != 0)
  {
    v13 = *(id *)(realityio::logObjects(UsdPhysicsAttributeDoubleValue) + 24);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v90, &v87);
      v2 = &v87;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v87);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = Text;
      _os_log_impl(&dword_22FF26000, v13, OS_LOG_TYPE_INFO, "Updating entity's rigid body for prim %s", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87);
    }

    v16 = realityio::EntityBuilder::kInputName(v15);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v16, (uint64_t)&v87);
    if ((_BYTE)v87)
    {
      v17 = v88;
      v86 = v88;
      if (v88)
      {
        v18 = (realityio::PhysicsMaterialAssetBuilder *)RERetain();
        v19 = realityio::PhysicsMaterialAssetBuilder::kOutputName(v18);
        realityio::Inputs::_getValue<REAsset *>((uint64_t)a2, v19, (uint64_t)v82);
        if (!v82[0] || (v81 = v83) == 0)
        {
          v39 = *(NSObject **)(realityio::logObjects(v20) + 24);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_22FF26000, v39, OS_LOG_TYPE_DEFAULT, "No physics material asset exists for the rigid body. The rigid body's component will not be created", buf, 2u);
          }
          goto LABEL_78;
        }
        v21 = realityio::PhysicsColliderComponentBuilder::kOutputName(v20);
        v97 = 0;
        v98 = 0;
        v22 = a2[3];
        if (v22)
        {
          v98 = std::__shared_weak_count::lock(v22);
          if (v98)
            v97 = a2[2];
        }
        MEMORY[0x2348B2764](&v99, v21);
        v23 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(a2[1], &v97);
        if (v23 == v24)
        {
          std::operator+<char>();
          v40 = std::string::append(&v94, ") at prim path (");
          v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          v95.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v5);
          v43 = *(char *)(String + 23);
          if (v43 >= 0)
            v44 = (const std::string::value_type *)String;
          else
            v44 = *(const std::string::value_type **)String;
          if (v43 >= 0)
            v45 = *(unsigned __int8 *)(String + 23);
          else
            v45 = *(_QWORD *)(String + 8);
          v46 = std::string::append(&v95, v44, v45);
          v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v96.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          v35 = std::string::append(&v96, ")");
        }
        else
        {
          v25 = 1;
          v26 = v23;
          do
          {
            v26 = (_QWORD *)*v26;
            --v25;
          }
          while (v26 != v24);
          if (!v25)
          {
            v64 = v23[5];
            v51 = *(std::mutex **)(v64 + 16);
            v65 = *(std::__shared_weak_count **)(v64 + 24);
            v96.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
            v96.__r_.__value_.__l.__size_ = (std::string::size_type)v65;
            if (v65)
            {
              p_shared_owners = (unint64_t *)&v65->__shared_owners_;
              do
                v67 = __ldxr(p_shared_owners);
              while (__stxr(v67 + 1, p_shared_owners));
            }
            if ((v23[7] & 0xFFFFFFFFFFFFFFF8) != 0)
              EmptyString = (const void **)((v23[7] & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v23);
            realityio::Outputs::getRawValue<RECollisionShape *>(v51, EmptyString, (uint64_t)buf);
            v73 = buf[0];
            if (buf[0])
            {
              *(_QWORD *)&v72 = *(_QWORD *)&buf[8];
            }
            else
            {
              v100 = *(_OWORD *)&buf[8];
              v49 = (realityio *)&v101;
              if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v101, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
                if (buf[0])
                  v75 = 0;
                else
                  v75 = (v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
                v74 = v75;
              }
              else
              {
                v74 = 0;
                v101 = v103;
              }
              v72 = v100;
              size = (_BYTE *)v101.__r_.__value_.__l.__size_;
              v51 = (std::mutex *)v101.__r_.__value_.__r.__words[0];
              LOBYTE(v2) = *((_BYTE *)&v101.__r_.__value_.__s + 23);
              if (v74)
              {
                v79 = v100;
                operator delete(v103.__r_.__value_.__l.__data_);
                v72 = v79;
              }
            }
            if (v65)
            {
              v76 = (unint64_t *)&v65->__shared_owners_;
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                v80 = v72;
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
                v72 = v80;
              }
            }
            v50 = v72;
            if (v73)
            {
              v52 = 0;
            }
            else
            {
              *(_OWORD *)buf = v72;
              if ((v2 & 0x80) == 0)
              {
LABEL_50:
                v52 = 1;
                goto LABEL_51;
              }
              std::string::__init_copy_ctor_external((std::string *)&buf[16], (const std::string::value_type *)v51, (std::string::size_type)size);
              v50 = *(_QWORD *)buf;
              v78 = *(std::mutex **)&buf[16];
              LOBYTE(v2) = v103.__r_.__value_.__s.__data_[15];
              operator delete(v51);
              v52 = 1;
              v51 = v78;
            }
LABEL_51:
            if ((v99 & 7) != 0)
            {
              v53 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
              do
                v54 = __ldxr(v53);
              while (__stlxr(v54 - 2, v53));
            }
            v55 = v98;
            if (v98)
            {
              v56 = (unint64_t *)&v98->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            if ((v52 & 1) != 0 || (*(_QWORD *)&v100 = v50) == 0)
            {
              v62 = *(NSObject **)(realityio::logObjects(v49) + 24);
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_22FF26000, v62, OS_LOG_TYPE_DEFAULT, "No physics collision shape exists for the rigid body. The rigid body's component will not be created.", buf, 2u);
              }
              if ((char)v2 < 0)
                v63 = v52;
              else
                v63 = 0;
              if (v63 == 1)
                operator delete(v51);
              goto LABEL_78;
            }
            v58 = a2[6];
            v59 = operator new(0x38uLL);
            *v59 = &off_24FDFB1C0;
            v59[1] = a2;
            v59[2] = &v89;
            v59[3] = &v100;
            v59[4] = &v86;
            v59[5] = this;
            v59[6] = &v81;
            v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
            ((void (*)(std::__shared_weak_count *, _BYTE *))v58->__on_zero_shared)(v58, buf);
            v60 = (_QWORD *)v103.__r_.__value_.__r.__words[0];
            if (v103.__r_.__value_.__l.__data_ == buf)
            {
              v61 = 4;
              v60 = buf;
            }
            else
            {
              if (!v103.__r_.__value_.__r.__words[0])
              {
LABEL_78:
                if (!v82[0] && v85 < 0)
                  operator delete(__p);
LABEL_81:
                realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v86);
                realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v87);
                goto LABEL_82;
              }
              v61 = 5;
            }
            (*(void (**)(void))(*v60 + 8 * v61))();
            goto LABEL_78;
          }
          std::operator+<char>();
          v27 = std::string::append(&v94, ") at prim path (");
          v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v95.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v5);
          v30 = *(char *)(v29 + 23);
          if (v30 >= 0)
            v31 = (const std::string::value_type *)v29;
          else
            v31 = *(const std::string::value_type **)v29;
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(v29 + 23);
          else
            v32 = *(_QWORD *)(v29 + 8);
          v33 = std::string::append(&v95, v31, v32);
          v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          v96.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          v35 = std::string::append(&v96, ") because more than one connected builder produced the same output type");
        }
        v48 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[0] = v35->__r_.__value_.__r.__words[2];
        v100 = v48;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        v49 = (realityio *)realityio::DetailedError::DetailedError(buf, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v100);
        v50 = *(_QWORD *)buf;
        v51 = *(std::mutex **)&buf[16];
        LOBYTE(v2) = v103.__r_.__value_.__s.__data_[15];
        *(_QWORD *)&buf[16] = 0;
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = 0uLL;
        if (v101.__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v100);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        goto LABEL_50;
      }
    }
    else
    {
      v86 = 0;
    }
    v38 = *(NSObject **)(realityio::logObjects(v17) + 24);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22FF26000, v38, OS_LOG_TYPE_DEFAULT, "Stopping operation to set the rigid body component because entity no longer exists", buf, 2u);
    }
    goto LABEL_81;
  }
  v36 = *(id *)(realityio::logObjects(UsdPhysicsAttributeDoubleValue) + 24);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v90, &v87);
    v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v87);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v37;
    _os_log_impl(&dword_22FF26000, v36, OS_LOG_TYPE_DEFAULT, "Could not retrieve mass value from the attribute on prim: %s", buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87);
  }

LABEL_82:
  if ((v93 & 7) != 0)
  {
    v69 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v92);
  result = v91;
  if (v91)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v91);
  return result;
}

void sub_23015692C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void *v53;
  uint64_t v54;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;

  operator delete(v53);
  v56 = *(_QWORD *)(v54 - 200);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v54 - 216);
  if (!a12 && a20 < 0)
    operator delete(__p);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a21);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a22);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a31);
  _Unwind_Resume(a1);
}

_QWORD *realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::PhysicsRigidBodyComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  realityio::Inputs *v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a2 + 6);
  v5 = a2;
  v6[0] = &off_24FDFB2C0;
  v6[1] = &v5;
  v6[2] = this;
  v7 = v6;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_230156BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::PhysicsRigidBodyComponentBuilder::~PhysicsRigidBodyComponentBuilder(realityio::PhysicsRigidBodyComponentBuilder *this)
{
  realityio::PhysicsRigidBodyComponentBuilder::~PhysicsRigidBodyComponentBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  void *v2;
  realityio::PhysicsRigidBodyComponentBuilder *v3;
  uint64_t v4;
  realityio::PhysicsRigidBodyComponentBuilder *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)this = &off_24FDFB048;
  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_24FDE1CA0;
  v3 = (realityio::PhysicsRigidBodyComponentBuilder *)*((_QWORD *)this + 34);
  if (v3 == (realityio::PhysicsRigidBodyComponentBuilder *)((char *)this + 248))
  {
    v4 = 4;
    v3 = (realityio::PhysicsRigidBodyComponentBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (realityio::PhysicsRigidBodyComponentBuilder *)*((_QWORD *)this + 30);
  if (v5 == (realityio::PhysicsRigidBodyComponentBuilder *)((char *)this + 216))
  {
    v6 = 4;
    v5 = (realityio::PhysicsRigidBodyComponentBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = *((_QWORD *)this + 23);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFB0C0;
  return result;
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFB0C0;
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  realityio::PhysicsMaterialAssetBuilder *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  realityio::PhysicsColliderComponentBuilder *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v40) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)&v40, &v42);
  v6 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (realityio::PhysicsMaterialAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v42);
  v10 = v43;
  if (v43)
  {
    v11 = (unint64_t *)&v43->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::PhysicsMaterialAssetBuilder::kOutputName(v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v15 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!v15)
    v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  LODWORD(v38) = 0;
  std::allocate_shared[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::allocator<realityio::RelatedPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(v13, (uint64_t *)v14 + 16, (uint64_t *)v15 + 13, (int *)&v38, &v40);
  v16 = v41;
  if (v41)
  {
    v17 = (unint64_t *)&v41->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (realityio::PhysicsColliderComponentBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v40);
  v20 = v41;
  if (v41)
  {
    v21 = (unint64_t *)&v41->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = realityio::PhysicsColliderComponentBuilder::kOutputName(v19);
  v24 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v24)
    v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v37 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v23, (uint64_t *)v24 + 18, &v37, &v38);
  v25 = v39;
  if (v39)
  {
    v26 = (unint64_t *)&v39->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v38);
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v25)
  {
    v31 = (unint64_t *)&v25->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v16)
  {
    v33 = (unint64_t *)&v16->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v6)
  {
    v35 = (unint64_t *)&v6->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2301570BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (v18)
  {
    v23 = (unint64_t *)&v18->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v17)
  {
    v25 = (unint64_t *)&v17->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v16)
  {
    v27 = (unint64_t *)&v16->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v29 = __ldaxr(v19);
  while (__stlxr(v29 - 1, v19));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFB140;
  return result;
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFB140;
}

char *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24FDFB1C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDFB1C0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  _OWORD v14[4];
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  memset(v14, 0, sizeof(v14));
  REMakeMassFrameFromShapeAndMass();
  RERigidBodyComponentGetComponentType();
  v3 = *(_QWORD *)(a1 + 48);
  v4 = operator new(0x20uLL);
  *v4 = &off_24FDFB230;
  v4[1] = v2;
  v4[2] = v3;
  v4[3] = v14;
  v17 = v4;
  v15 = REEntityGetOrAddComponentByClass();
  if (!v17)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v15);
  RENetworkMarkComponentDirty();
  result = v17;
  if (v17 == v16)
  {
    v13 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*result + 8 * v13))(result, v5, v6, v7, v8, v9, v10, v11, *(_QWORD *)&v14[0]);
}

void sub_23015753C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDFB230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDFB230;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  RERigidBodyComponentSetMaterial();
  RERigidBodyComponentSetMotionType();
  return RERigidBodyComponentSetMassFrame();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDFB2C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDFB2C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  v3 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v2, v3, (uint64_t)v8);
  if (v8[0])
  {
    v7 = v9;
    if (v9)
    {
      RERetain();
      v4 = *(_QWORD *)(v1 + 280);
      v5 = *(_QWORD *)(v1 + 288);
      while (v4 != v5)
      {
        REEntityRemoveComponentByClass();
        v4 += 8;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v7);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v8);
}

void sub_230157800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t realityio::replication::write()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::write(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  return realityio::replication::write();
}

uint64_t realityio::replication::details::writeMap<pxrInternal__aapl__pxrReserved__::VtDictionary>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  BOOL v13;
  std::string __p;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  std::string v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v18.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::VtDictionary::size(this);
  std::ostream::write();
  v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(this);
  v6 = v5;
  v15 = v4;
  v16 = v5;
  result = pxrInternal__aapl__pxrReserved__::VtDictionary::end(this);
  v9 = result;
  v10 = v8;
  if (v8)
    v11 = v4 == result;
  else
    v11 = 1;
  v12 = v11;
  if (v6 != v8 || (v12 & 1) == 0)
  {
    do
    {
      std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&v18, (__int128 *)(v4 + 32));
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      else
        __p = v18;
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17, (const pxrInternal__aapl__pxrReserved__::VtValue *)v19);
      realityio::replication::write();
      realityio::replication::write(a1, v17);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      result = (uint64_t)pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> const*,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(&v15);
      v4 = v15;
      v13 = v15 == v9 || v10 == 0;
    }
    while (v16 != v10 || !v13);
  }
  return result;
}

void sub_230157A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::~pair((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::write(uint64_t a1, uint64_t a2)
{
  realityio::replication::write();
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24));
  realityio::replication::write();
  return std::ostream::write();
}

void realityio::replication::write(pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  pxrInternal__aapl__pxrReserved__::SdfPath **v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  pxrInternal__aapl__pxrReserved__::TfToken *v76;
  uint64_t v77;
  uint64_t v78;

  v2 = a2;
  pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(a2);
  std::ostream::write();
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(v2))
  {
    std::ostream::write();
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_50;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(v2))
  {
    std::ostream::write();
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) == 0)
    {
LABEL_8:
      std::ostream::write();
LABEL_9:
      std::ostream::write();
      return;
    }
LABEL_50:
    (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_8;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(v2))
  {
    std::ostream::write();
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_50;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(v2))
  {
    std::ostream::write();
    v5 = *((_QWORD *)v2 + 1);
    if ((v5 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
LABEL_102:
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(v2))
  {
    std::ostream::write();
    v6 = *((_QWORD *)v2 + 1);
    if ((v6 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>(v2))
  {
    std::ostream::write();
    v7 = *((_QWORD *)v2 + 1);
    if ((v7 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
LABEL_24:
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>(v2))
  {
    std::ostream::write();
    v8 = *((_QWORD *)v2 + 1);
    if ((v8 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_102;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(v2))
  {
    std::ostream::write();
    v9 = *((_QWORD *)v2 + 1);
    if ((v9 & 4) != 0)
      v10 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v2);
    else
      v10 = *(uint64_t **)v2;
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((uint64_t)a1, v10);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(v2))
  {
    std::ostream::write();
    v11 = *((_QWORD *)v2 + 1);
    if ((v11 & 4) != 0)
      v12 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v2);
    else
      v12 = *(uint64_t **)v2;
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, v12);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(v2))
  {
    std::ostream::write();
    v13 = *((_QWORD *)v2 + 1);
    if ((v13 & 4) != 0)
      v14 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v2);
    else
      v14 = *(uint64_t **)v2;
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((uint64_t)a1, v14);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(v2))
  {
    std::ostream::write();
    v15 = *((_QWORD *)v2 + 1);
    if ((v15 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
LABEL_110:
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(v2))
  {
    std::ostream::write();
    v16 = *((_QWORD *)v2 + 1);
    if ((v16 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
LABEL_106:
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(v2))
  {
    std::ostream::write();
    v17 = *((_QWORD *)v2 + 1);
    if ((v17 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_102;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(v2))
  {
    std::ostream::write();
    v18 = *((_QWORD *)v2 + 1);
    if ((v18 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_106;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(v2))
  {
    std::ostream::write();
    v19 = *((_QWORD *)v2 + 1);
    if ((v19 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_102;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(v2))
  {
    std::ostream::write();
    v20 = *((_QWORD *)v2 + 1);
    if ((v20 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_24;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(v2))
  {
    std::ostream::write();
    v21 = *((_QWORD *)v2 + 1);
    if ((v21 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_102;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(v2))
  {
    std::ostream::write();
    v22 = *((_QWORD *)v2 + 1);
    if ((v22 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(v2))
  {
    std::ostream::write();
    v23 = *((_QWORD *)v2 + 1);
    if ((v23 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
LABEL_79:
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(v2))
  {
    std::ostream::write();
    v24 = *((_QWORD *)v2 + 1);
    if ((v24 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(v2))
  {
    std::ostream::write();
    v25 = *((_QWORD *)v2 + 1);
    if ((v25 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_79;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(v2))
  {
    std::ostream::write();
    v26 = *((_QWORD *)v2 + 1);
    if ((v26 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_110;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(v2))
  {
    std::ostream::write();
    v27 = *((_QWORD *)v2 + 1);
    if ((v27 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v27 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_106;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(v2))
  {
    std::ostream::write();
    v28 = *((_QWORD *)v2 + 1);
    if ((v28 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_102;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(v2))
  {
    std::ostream::write();
    v29 = *((_QWORD *)v2 + 1);
    if ((v29 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_106;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(v2))
  {
    std::ostream::write();
    v30 = *((_QWORD *)v2 + 1);
    if ((v30 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_110;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(v2))
  {
    std::ostream::write();
    v31 = *((_QWORD *)v2 + 1);
    if ((v31 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(v2))
  {
    std::ostream::write();
    v32 = *((_QWORD *)v2 + 1);
    if ((v32 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>(v2))
  {
LABEL_121:
    std::ostream::write();
    v33 = *((_QWORD *)v2 + 1);
    if ((v33 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>(v2))
  {
LABEL_126:
    std::ostream::write();
    v34 = *((_QWORD *)v2 + 1);
    if ((v34 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>(v2))
  {
    goto LABEL_131;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>(v2))
  {
    std::ostream::write();
    v36 = *((_QWORD *)v2 + 1);
    if ((v36 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>(v2))
    goto LABEL_126;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>(v2))
    goto LABEL_131;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>(v2))
    goto LABEL_146;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(v2))
  {
    std::ostream::write();
    v37 = *((_QWORD *)v2 + 1);
    if ((v37 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    realityio::replication::write(a1, v2);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(v2))
  {
LABEL_146:
    std::ostream::write();
    v38 = *((_QWORD *)v2 + 1);
    if ((v38 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    realityio::replication::write();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatd>(v2))
  {
LABEL_150:
    std::ostream::write();
    v39 = *((_QWORD *)v2 + 1);
    if ((v39 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>(v2))
    goto LABEL_156;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuath>(v2))
    goto LABEL_131;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2d>(v2))
    goto LABEL_156;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>(v2))
    goto LABEL_131;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2h>(v2))
    goto LABEL_126;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2i>(v2))
    goto LABEL_131;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>(v2))
  {
    std::ostream::write();
    v41 = *((_QWORD *)v2 + 1);
    if ((v41 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>(v2))
    goto LABEL_172;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>(v2))
  {
    std::ostream::write();
    v42 = *((_QWORD *)v2 + 1);
    if ((v42 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3i>(v2))
  {
LABEL_172:
    std::ostream::write();
    v43 = *((_QWORD *)v2 + 1);
    if ((v43 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4d>(v2))
    goto LABEL_150;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>(v2))
    goto LABEL_156;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4h>(v2))
    goto LABEL_131;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4i>(v2))
  {
LABEL_156:
    std::ostream::write();
    v40 = *((_QWORD *)v2 + 1);
    if ((v40 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(v2))
    goto LABEL_150;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(v2))
  {
    std::ostream::write();
    v44 = *((_QWORD *)v2 + 1);
    if ((v44 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v44 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v2))
  {
    std::ostream::write();
    v45 = *((_QWORD *)v2 + 1);
    if ((v45 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>(v2))
  {
    std::ostream::write();
    v46 = *((_QWORD *)v2 + 1);
    if ((v46 & 4) != 0)
      v47 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    else
      v47 = *(pxrInternal__aapl__pxrReserved__::VtDictionary **)v2;
    realityio::replication::details::writeMap<pxrInternal__aapl__pxrReserved__::VtDictionary>((uint64_t)a1, v47);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>(v2))
  {
    std::ostream::write();
    v48 = *((_QWORD *)v2 + 1);
    if ((v48 & 4) != 0)
      v49 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v48 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    else
      v49 = *(_QWORD *)v2;
    realityio::replication::write<pxrInternal__aapl__pxrReserved__::TfToken>(a1, v49);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>(v2))
  {
    std::ostream::write();
    v50 = *((_QWORD *)v2 + 1);
    if ((v50 & 4) != 0)
      v51 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    else
      v51 = *(_QWORD *)v2;
    realityio::replication::write<std::string>((uint64_t)a1, v51);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(v2))
  {
    std::ostream::write();
    v52 = *((_QWORD *)v2 + 1);
    if ((v52 & 4) != 0)
      v53 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v52 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    else
      v53 = *(_QWORD *)v2;
    realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, v53);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>(v2))
  {
    std::ostream::write();
    v54 = *((_QWORD *)v2 + 1);
    if ((v54 & 4) != 0)
      v55 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    else
      v55 = *(_QWORD *)v2;
    realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfReference>((uint64_t)a1, v55);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>(v2))
  {
    std::ostream::write();
    v56 = *((_QWORD *)v2 + 1);
    if ((v56 & 4) == 0)
    {
      v57 = *(uint64_t **)v2;
LABEL_220:
      realityio::replication::write<int>((uint64_t)a1, v57);
      return;
    }
LABEL_219:
    v57 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v56 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(v2);
    goto LABEL_220;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>(v2))
  {
    std::ostream::write();
    v58 = *((_QWORD *)v2 + 1);
    if ((v58 & 4) == 0)
    {
      v59 = *(uint64_t **)v2;
LABEL_225:
      realityio::replication::write<long long>((uint64_t)a1, v59);
      return;
    }
LABEL_224:
    v59 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v58 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(v2);
    goto LABEL_225;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>(v2))
  {
    std::ostream::write();
    v56 = *((_QWORD *)v2 + 1);
    if ((v56 & 4) == 0)
    {
      v57 = *(uint64_t **)v2;
      goto LABEL_220;
    }
    goto LABEL_219;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>(v2))
  {
    std::ostream::write();
    v58 = *((_QWORD *)v2 + 1);
    if ((v58 & 4) == 0)
    {
      v59 = *(uint64_t **)v2;
      goto LABEL_225;
    }
    goto LABEL_224;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(v2))
  {
    std::ostream::write();
    v60 = *((_QWORD *)v2 + 1);
    if ((v60 & 4) != 0)
      v61 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    else
      v61 = *(pxrInternal__aapl__pxrReserved__::SdfPath ***)v2;
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t)a1, v61);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(v2))
  {
    std::ostream::write();
    v62 = *((_QWORD *)v2 + 1);
    if ((v62 & 4) != 0)
      v63 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v62 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v2);
    else
      v63 = *(uint64_t **)v2;
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, v63);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPermission>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfVariability>(v2))
  {
    goto LABEL_126;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<std::string,std::string>>(v2))
  {
    std::ostream::write();
    v64 = *((_QWORD *)v2 + 1);
    if ((v64 & 4) != 0)
      v65 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v64 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(v2);
    else
      v65 = *(uint64_t **)v2;
    realityio::replication::details::writeMap<std::map<std::string,std::string>>((uint64_t)a1, v65);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPayload>(v2))
  {
    std::ostream::write();
    v66 = *((_QWORD *)v2 + 1);
    if ((v66 & 4) != 0)
      v67 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v66 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    else
      v67 = *(_QWORD *)v2;
    realityio::replication::write((uint64_t)a1, v67);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<double>>(v2))
  {
    std::ostream::write();
    v68 = *((_QWORD *)v2 + 1);
    if ((v68 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v68 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    realityio::replication::details::writeVector<std::vector<long long>>();
    return;
  }
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>(v2))
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<std::string>>(v2))
    {
      std::ostream::write();
      v70 = *((_QWORD *)v2 + 1);
      if ((v70 & 4) != 0)
        v71 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v70 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 168))(v2);
      else
        v71 = *(uint64_t **)v2;
      realityio::replication::details::writeVector<std::vector<std::string>>((uint64_t)a1, v71);
      return;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(v2))
      goto LABEL_121;
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(v2))
    {
      std::ostream::write();
      v72 = *((_QWORD *)v2 + 1);
      if ((v72 & 4) != 0)
        v73 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v72 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
      else
        v73 = *(_QWORD *)v2;
      v76 = a1;
      goto LABEL_290;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(v2))
    {
      std::ostream::write();
      v74 = *((_QWORD *)v2 + 1);
      if ((v74 & 4) != 0)
        v75 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v74 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
      else
        v75 = *(_QWORD *)v2;
      realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>((uint64_t)a1, v75);
      return;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>(v2))
    {
      std::ostream::write();
      v77 = *((_QWORD *)v2 + 1);
      if ((v77 & 4) != 0)
        v78 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v77 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
      else
        v78 = *(_QWORD *)v2;
      realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfPayload>((uint64_t)a1, v78);
      return;
    }
    if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(v2))
    {
      std::ostream::write();
      v76 = a1;
      v73 = (uint64_t)v2;
LABEL_290:
      realityio::replication::write(v76, v73);
      return;
    }
LABEL_131:
    std::ostream::write();
    v35 = *((_QWORD *)v2 + 1);
    if ((v35 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_9;
  }
  std::ostream::write();
  v69 = *((_QWORD *)v2 + 1);
  if ((v69 & 4) != 0)
    (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
  realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>();
}

uint64_t realityio::replication::write<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2)
{
  _QWORD *v4;

  std::ostream::write();
  if (*(_BYTE *)a2)
  {
    v4 = (_QWORD *)(a2 + 8);
  }
  else
  {
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, (_QWORD *)(a2 + 32));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, (_QWORD *)(a2 + 56));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, (_QWORD *)(a2 + 80));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, (_QWORD *)(a2 + 104));
    v4 = (_QWORD *)(a2 + 128);
  }
  return realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t realityio::replication::write<std::string>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  std::ostream::write();
  if (*(_BYTE *)a2)
  {
    v4 = (uint64_t *)(a2 + 8);
  }
  else
  {
    realityio::replication::details::writeVector<std::vector<std::string>>(a1, (uint64_t *)(a2 + 32));
    realityio::replication::details::writeVector<std::vector<std::string>>(a1, (uint64_t *)(a2 + 56));
    realityio::replication::details::writeVector<std::vector<std::string>>(a1, (uint64_t *)(a2 + 80));
    realityio::replication::details::writeVector<std::vector<std::string>>(a1, (uint64_t *)(a2 + 104));
    v4 = (uint64_t *)(a2 + 128);
  }
  return realityio::replication::details::writeVector<std::vector<std::string>>(a1, v4);
}

uint64_t realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath **v4;

  std::ostream::write();
  if (*(_BYTE *)a2)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8);
  }
  else
  {
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 32));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 56));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 80));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 104));
    v4 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 128);
  }
  return realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfReference>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  std::ostream::write();
  if (*(_BYTE *)a2)
  {
    v4 = (uint64_t *)(a2 + 8);
  }
  else
  {
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, (uint64_t *)(a2 + 32));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, (uint64_t *)(a2 + 56));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, (uint64_t *)(a2 + 80));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, (uint64_t *)(a2 + 104));
    v4 = (uint64_t *)(a2 + 128);
  }
  return realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIiEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t realityio::replication::write<int>(uint64_t a1, _BYTE *a2)
{
  std::ostream::write();
  if (!*a2)
  {
    realityio::replication::details::writeVector<std::vector<int>>();
    realityio::replication::details::writeVector<std::vector<int>>();
    realityio::replication::details::writeVector<std::vector<int>>();
    realityio::replication::details::writeVector<std::vector<int>>();
  }
  return realityio::replication::details::writeVector<std::vector<int>>();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIxEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t realityio::replication::write<long long>(uint64_t a1, _BYTE *a2)
{
  std::ostream::write();
  if (!*a2)
  {
    realityio::replication::details::writeVector<std::vector<long long>>();
    realityio::replication::details::writeVector<std::vector<long long>>();
    realityio::replication::details::writeVector<std::vector<long long>>();
    realityio::replication::details::writeVector<std::vector<long long>>();
  }
  return realityio::replication::details::writeVector<std::vector<long long>>();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIjEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIyEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPermission>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__13SdfPermissionE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfVariability>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__14SdfVariabilityE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<std::string,std::string>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002302109F2 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPayload>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10SdfPayloadE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<double>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000230210A96 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__14SdfLayerOffsetENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<std::string>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000230210B13 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__20SdfUnregisteredValueE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  std::ostream::write();
  if (*(_BYTE *)a2)
  {
    v4 = (uint64_t *)(a2 + 8);
  }
  else
  {
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, (uint64_t *)(a2 + 32));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, (uint64_t *)(a2 + 56));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, (uint64_t *)(a2 + 80));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, (uint64_t *)(a2 + 104));
    v4 = (uint64_t *)(a2 + 128);
  }
  return realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfPayload>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  std::ostream::write();
  if (*(_BYTE *)a2)
  {
    v4 = (uint64_t *)(a2 + 8);
  }
  else
  {
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, (uint64_t *)(a2 + 32));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, (uint64_t *)(a2 + 56));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, (uint64_t *)(a2 + 80));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, (uint64_t *)(a2 + 104));
    v4 = (uint64_t *)(a2 + 128);
  }
  return realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__11SdfTimeCodeE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<float>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  result = std::ostream::write();
  if (v3)
  {
    v5 = a2[4];
    v6 = 24 * v3;
    do
    {
      result = realityio::replication::write();
      v5 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;

  v4 = *a2;
  result = std::ostream::write();
  if (v4)
  {
    v6 = (_QWORD *)a2[4];
    v7 = 8 * v4;
    do
    {
      result = realityio::replication::write(a1, v6++);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  result = std::ostream::write();
  if (v3)
  {
    v5 = a2[4];
    v6 = 48 * v3;
    do
    {
      result = realityio::replication::write();
      v5 += 48;
      v6 -= 48;
    }
    while (v6);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v5 = *a2;
  v4 = a2[1];
  result = std::ostream::write();
  if (v4 != v5)
  {
    v7 = *a2;
    v8 = v7 + v4 - v5;
    do
    {
      realityio::replication::write();
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 24));
      realityio::replication::write();
      std::ostream::write();
      result = realityio::replication::details::writeMap<pxrInternal__aapl__pxrReserved__::VtDictionary>(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)(v7 + 48));
      v7 += 56;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<std::vector<int>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<std::vector<long long>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t v5;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t v8;

  v4 = *a2;
  v3 = a2[1];
  v5 = (v3 - *a2) >> 3;
  result = std::ostream::write();
  if (v3 != v4)
  {
    v7 = *a2;
    v8 = 8 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v7);
      result = realityio::replication::write();
      v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)*a2;
  v4 = (_QWORD *)a2[1];
  v6 = ((uint64_t)v4 - *a2) >> 3;
  result = std::ostream::write();
  if (v4 != v5)
  {
    v8 = (_QWORD *)*a2;
    v9 = 8 * v6;
    do
    {
      result = realityio::replication::write(a1, v8++);
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

void realityio::replication::details::writeMap<std::map<std::string,std::string>>(uint64_t a1, _QWORD *a2)
{
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  BOOL v8;
  std::string __p;
  std::string v10;
  std::string v11;
  std::string v12;

  v11.__r_.__value_.__r.__words[0] = a2[2];
  std::ostream::write();
  v5 = (__int128 *)*a2;
  v3 = (__int128 *)(a2 + 1);
  v4 = v5;
  if (v5 != v3)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v11, v4 + 2);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v10, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
      else
        v10 = v11;
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
      else
        __p = v12;
      realityio::replication::write();
      realityio::replication::write();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
      v6 = (__int128 *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(__int128 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (__int128 *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v3);
  }
}

void sub_23015A510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23)
{
  if (a21 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a23);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>()
{
  std::ostream::write();
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<std::vector<std::string>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v3 = a2[1];
  v5 = (v3 - *a2) / 24;
  result = std::ostream::write();
  if (v3 != v4)
  {
    v7 = *a2;
    v8 = 24 * v5;
    do
    {
      result = realityio::replication::write();
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v5 = *a2;
  v4 = a2[1];
  v6 = (v4 - *a2) >> 4;
  result = std::ostream::write();
  if (v4 != v5)
  {
    v8 = *a2;
    v9 = 16 * v6;
    do
    {
      result = realityio::replication::write(a1, v8);
      v8 += 16;
      v9 -= 16;
    }
    while (v9);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v5 = *a2;
  v4 = a2[1];
  v6 = (v4 - *a2) / 48;
  result = std::ostream::write();
  if (v4 != v5)
  {
    v8 = *a2;
    v9 = 48 * v6;
    do
    {
      result = realityio::replication::write(a1, v8);
      v8 += 48;
      v9 -= 48;
    }
    while (v9);
  }
  return result;
}

realityio::TransformComponentBuilder *realityio::TransformComponentBuilder::TransformComponentBuilder(realityio::TransformComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "TransformComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTransformComponentBuilderIdentifier);
  realityio::generateTransformDirtyStageSubscription(&v12);
  v20[0] = &off_24FDFB3B8;
  v21 = v20;
  v18[0] = &off_24FDFB438;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDFB340;
  return this;
}

void sub_23015A8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t realityio::TransformComponentBuilder::run(uint64_t **this, realityio::ImportSession **a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  realityio *PrimAtPath;
  NSObject *v7;
  realityio::EntityBuilder *v8;
  uint64_t v9;
  realityio::EntityBuilder *v10;
  uint64_t v11;
  realityio *v12;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *Data;
  void **v18;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v19;
  BOOL RealityKitStage;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  realityio::ImportSession *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void ***p_ComponentType;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t Text;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t result;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v52;
  int v53;
  unsigned int *v54;
  unsigned int v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60;
  char v61;
  _BYTE v62[8];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[8];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[72];
  _DWORD v71[32];
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[8];
  pxrInternal__aapl__pxrReserved__::SdfPath *v75;
  void *v76;
  char v77;
  _BYTE v78[8];
  uint64_t v79[5];
  _BYTE v80[8];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  __int128 v85;
  __int128 v86;
  _BYTE v87[21];
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 __p;
  uint64_t v92;
  _BYTE v93[24];
  _BYTE *v94;
  void **ComponentType;
  uint64_t v96;
  void *v97;
  char v98;
  _BYTE buf[12];
  __int16 v100;
  uint64_t v101;
  float WorldScaleAtPrim;
  char v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v4 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a2 + 1);
  PrimAtPath = (realityio *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  v7 = *(id *)(realityio::logObjects(PrimAtPath) + 24);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22FF26000, v7, OS_LOG_TYPE_INFO, "Updating entity transform", buf, 2u);
  }

  v9 = realityio::EntityBuilder::kInputName(v8);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v9, (uint64_t)v78);
  if (v78[0])
  {
    v11 = realityio::EntityBuilder::kPrimPathOutputName(v10);
    realityio::Inputs::_getValue<pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)a2, v11, (uint64_t)v74);
    if (v74[0])
    {
      v13 = v75;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v80, buf);
      v14 = *(_QWORD *)v13;
      v15 = *(_QWORD *)buf;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      v16 = (uint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
      if (v14 == v15)
      {
        *(_QWORD *)buf = 0;
        v104 = 0u;
        v105 = 0u;
        v106 = 0u;
        v107 = 0u;
        realityio::WrappedRERef<REAsset *>::operator=(v16, v79);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v72 = MEMORY[0x24BEE9D78] + 16;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v71, 1.0);
        if (v73 && (*(_BYTE *)(v73 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v72 + 32))(&v72))
        {
          MEMORY[0x2348B2068](v70, &v72);
          pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation();
          ComponentType = (void **)v70;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](&ComponentType);
        }
        MEMORY[0x2348B199C](v70, v71);
        REDecomposeMatrix();
        Data = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
        if (!Data)
          Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v80, (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)((char *)Data + 64));
        if (!pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v66))
          goto LABEL_25;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v80);
        v18 = (void **)v96;
        if (v96)
        {
          if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(&v96)
                        + 14))
            v18 = ComponentType;
          else
            v18 = 0;
        }
        v58[0] = v18;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v58);
        v19 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
        if (!v19)
          v19 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
        v62[0] = 0;
        RealityKitStage = realityio::getRealityKitStageMetadata<BOOL>((uint64_t *)v58, (_QWORD *)v19 + 7, (pxrInternal__aapl__pxrReserved__::VtValue *)v62);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)v58);
        v21 = v96;
        if (v96)
        {
          v22 = (unsigned int *)(v96 + 8);
          do
          {
            v23 = __ldxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        }
        if (!RealityKitStage)
        {
          v103 = 1;
          ComponentType = (void **)REAnchoringComponentGetComponentType();
          std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)&ComponentType, (uint64_t *)&ComponentType);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
          v52 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
          if (!v52)
            v52 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v80, (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)((char *)v52 + 72));
          if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v62))
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
          WorldScaleAtPrim = realityio::ImportSession::getWorldScaleAtPrim(a2[5], (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v80);
          std::string::basic_string[abi:ne180100]<0>(v58, "resource_name");
          realityio::Inputs::_getValue<void *>((uint64_t)&ComponentType, (uint64_t)a2, (uint64_t)v58);
          if (v59 < 0)
            operator delete(v58[0]);
          v53 = ComponentType;
          if ((_BYTE)ComponentType)
            MEMORY[0x2348B4AD4](&v105, v96);
          std::string::basic_string[abi:ne180100]<0>(v56, "resource_group");
          realityio::Inputs::_getValue<void *>((uint64_t)v58, (uint64_t)a2, (uint64_t)v56);
          if (v57 < 0)
            operator delete(v56[0]);
          if (LOBYTE(v58[0]))
          {
            MEMORY[0x2348B4AD4]((char *)&v106 + 8, v58[1]);
          }
          else if (v61 < 0)
          {
            operator delete(v60);
          }
          if (!v53 && v98 < 0)
            operator delete(v97);
          if ((v65 & 7) != 0)
          {
            v54 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
            do
              v55 = __ldxr(v54);
            while (__stlxr(v55 - 2, v54));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v64);
          if (v63)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v63);
        }
        else
        {
LABEL_25:
          v103 = 0;
        }
        v25 = a2[5];
        v94 = 0;
        v26 = (char *)operator new(0xA0uLL);
        *(_QWORD *)v26 = off_24FDFB4B8;
        v27 = v90;
        *((_QWORD *)v26 + 2) = v84[0];
        v28 = v86;
        *((_OWORD *)v26 + 2) = v85;
        *((_OWORD *)v26 + 3) = v28;
        *((_OWORD *)v26 + 4) = *(_OWORD *)v87;
        *(_QWORD *)(v26 + 77) = *(_QWORD *)&v87[13];
        *(_OWORD *)(v26 + 88) = v88;
        v88 = 0u;
        *(_OWORD *)(v26 + 104) = v89;
        *((_QWORD *)v26 + 15) = v27;
        v84[0] = 0;
        v90 = 0;
        v89 = 0u;
        *((_QWORD *)v26 + 18) = v92;
        *((_OWORD *)v26 + 8) = __p;
        __p = 0u;
        v92 = 0;
        v94 = v26;
        v29 = *((_QWORD *)v25 + 2);
        v97 = std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone((uint64_t)v26);
        realityio::ImportSessionImpl::performBlockLaterOnEngineQueue(v29, (uint64_t)&ComponentType);
        p_ComponentType = (void ***)v97;
        if (v97 == &ComponentType)
        {
          v31 = 4;
          p_ComponentType = &ComponentType;
        }
        else
        {
          if (!v97)
            goto LABEL_39;
          v31 = 5;
        }
        ((void (*)(void))(*p_ComponentType)[v31])();
LABEL_39:
        v37 = v94;
        if (v94 == v93)
        {
          v38 = 4;
          v37 = v93;
        }
        else
        {
          if (!v94)
          {
LABEL_44:
            if (SHIBYTE(v92) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(v90) < 0)
              operator delete((void *)v89);
            if ((BYTE8(v88) & 7) != 0)
            {
              v39 = (unsigned int *)(*((_QWORD *)&v88 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v40 = __ldxr(v39);
              while (__stlxr(v40 - 2, v39));
            }
            if ((v88 & 7) != 0)
            {
              v41 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
              do
                v42 = __ldxr(v41);
              while (__stlxr(v42 - 2, v41));
            }
            realityio::WrappedRERef<REEntity *>::~WrappedRERef(v84);
            if ((v69 & 7) != 0)
            {
              v43 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
              do
                v44 = __ldxr(v43);
              while (__stlxr(v44 - 2, v43));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
            if (v67)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v67);
            MEMORY[0x2348B2080](&v72);
            if (SHIBYTE(v107) < 0)
              operator delete(*((void **)&v106 + 1));
            if (SBYTE7(v106) < 0)
              operator delete((void *)v105);
            if ((BYTE8(v104) & 7) != 0)
            {
              v45 = (unsigned int *)(*((_QWORD *)&v104 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v46 = __ldxr(v45);
              while (__stlxr(v46 - 2, v45));
            }
            if ((v104 & 7) != 0)
            {
              v47 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
              do
                v48 = __ldxr(v47);
              while (__stlxr(v48 - 2, v47));
            }
            realityio::WrappedRERef<REEntity *>::~WrappedRERef(buf);
            goto LABEL_70;
          }
          v38 = 5;
        }
        (*(void (**)(void))(*v37 + 8 * v38))();
        goto LABEL_44;
      }
      v33 = *(id *)(realityio::logObjects((realityio *)v16) + 24);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v80, v71);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v71);
        v36 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v75);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = Text;
        v100 = 2080;
        v101 = v36;
        _os_log_impl(&dword_22FF26000, v33, OS_LOG_TYPE_INFO, "Skipping entity transform for %s becuase entity is for %s", buf, 0x16u);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v71);
      }
    }
    else
    {
      v33 = *(id *)(realityio::logObjects(v12) + 24);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v80, v71);
        v34 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v71);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v34;
        _os_log_impl(&dword_22FF26000, v33, OS_LOG_TYPE_INFO, "Skipping entity transform for %s becuase entity path is not available for some reason", buf, 0xCu);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v71);
      }
    }

LABEL_70:
    if (!v74[0] && v77 < 0)
      operator delete(v76);
    goto LABEL_73;
  }
  v32 = *(NSObject **)(realityio::logObjects(v10) + 24);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22FF26000, v32, OS_LOG_TYPE_DEFAULT, "Stopping operation to set transform component because entity no longer exists", buf, 2u);
  }
LABEL_73:
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v78);
  if ((v83 & 7) != 0)
  {
    v49 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v82);
  result = v81;
  if (v81)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v81);
  return result;
}

void sub_23015B1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a64;
  char a70;
  uint64_t v70;
  unint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&a13);
  v72 = STACK[0x2A8];
  if (STACK[0x2A8])
  {
    v73 = (unsigned int *)(v72 + 8);
    do
    {
      v74 = __ldxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
      (*(void (**)(unint64_t))(*(_QWORD *)v72 + 8))(v72);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a23);
  MEMORY[0x2348B2080](&a52);
  realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0::~$_0(v70 - 224);
  if (!a55 && a63 < 0)
    operator delete(__p);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a64);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a70);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::TransformAnchoringData::TransformAnchoringData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v4)
    RERetain();
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 2);
  v7 = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 61) = *(uint64_t *)((char *)a2 + 61);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  v8 = a2[9];
  *(_QWORD *)(a1 + 72) = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *(_QWORD *)(a1 + 72) &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = a2[10];
  *(_QWORD *)(a1 + 80) = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      *(_QWORD *)(a1 + 80) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), (const std::string::value_type *)a2[11], a2[12]);
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 11);
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_OWORD *)(a1 + 88) = v14;
  }
  v15 = (std::string *)(a1 + 112);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)a2[14], a2[15]);
  }
  else
  {
    v16 = *((_OWORD *)a2 + 7);
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  return a1;
}

void sub_23015B538(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v2);
  v4 = *(_QWORD *)(v1 + 80);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  v7 = *(_QWORD *)(v1 + 72);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)v1);
  _Unwind_Resume(a1);
}

_QWORD *realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v2 = *(_QWORD *)(a1 + 80);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 72);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)a1);
}

_QWORD *realityio::TransformComponentBuilder::clear(realityio::TransformComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a2 + 6);
  v5[0] = &off_24FDFB638;
  v5[1] = a2;
  v6 = v5;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_23015B6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::TransformComponentBuilder::~TransformComponentBuilder(realityio::TransformComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFB3B8;
  return result;
}

void std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFB3B8;
}

void std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  realityio::EntityBuilder *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v59) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)&v59, &v61);
  v6 = v62;
  if (v62)
  {
    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (realityio::EntityBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v61);
  v10 = v62;
  if (v62)
  {
    v11 = (unint64_t *)&v62->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::EntityBuilder::kPrimPathOutputName(v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v57) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v13, (uint64_t *)v14 + 20, (int *)&v57, &v59);
  v15 = v60;
  if (v60)
  {
    v16 = (unint64_t *)&v60->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v59);
  v18 = v60;
  if (v60)
  {
    v19 = (unint64_t *)&v60->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  MEMORY[0x2348B274C](&v55, "resource_name");
  MEMORY[0x2348B274C](&v53, "resourceName");
  LODWORD(v49) = 1;
  std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,void>(&v57, v55, &v53, (int *)&v49);
  if ((v53 & 7) != 0)
  {
    v21 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  if ((v55 & 7) != 0)
  {
    v23 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  v55 = v57;
  v56 = v58;
  if (v58)
  {
    v25 = (unint64_t *)&v58->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v55);
  v27 = v56;
  if (v56)
  {
    v28 = (unint64_t *)&v56->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  MEMORY[0x2348B274C](&v49, "resource_group");
  MEMORY[0x2348B274C](&v52, "resourceGroup");
  v51 = 1;
  std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,void>(&v53, v49, &v52, &v51);
  if ((v52 & 7) != 0)
  {
    v30 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  if ((v49 & 7) != 0)
  {
    v32 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  v49 = v53;
  v50 = v54;
  if (v54)
  {
    v34 = (unint64_t *)&v54->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v49);
  v36 = v50;
  if (v50)
  {
    v37 = (unint64_t *)&v50->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  v39 = v54;
  if (v54)
  {
    v40 = (unint64_t *)&v54->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v58;
  if (v58)
  {
    v43 = (unint64_t *)&v58->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v15)
  {
    v45 = (unint64_t *)&v15->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v47 = (unint64_t *)&v6->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_23015BBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;

  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  do
    v26 = __ldaxr(v22);
  while (__stlxr(v26 - 1, v22));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t `anonymous namespace'::referenceImageCallback@<X0>(_anonymous_namespace_ *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdStage *a2@<X1>, uint64_t a3@<X8>)
{
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *Data;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v6;
  uint64_t v7;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t result;
  _QWORD v18[3];
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[8];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v28))
  {
    Data = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v28, (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)((char *)Data + 64));
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v24))
    {
      v23 = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      v6 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v6)
        v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
      v7 = v23;
      if ((v23 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 2) & 0xFFFFFFFFFFFFFFF8))
      {
        v8 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
        if (!v8)
          v8 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v28, (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)((char *)v8 + 80));
        if (pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v19))
        {
          memset(v18, 0, sizeof(v18));
          pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
          v32 = (void **)v18;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v32);
        }
        if ((v22 & 7) != 0)
        {
          v9 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
          do
            v10 = __ldxr(v9);
          while (__stlxr(v10 - 2, v9));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
        if (v20)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
        v7 = v23;
      }
      if ((v7 & 7) != 0)
      {
        v11 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
    }
    if ((v27 & 7) != 0)
    {
      v13 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
    if (v25)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
  }
  if ((v31 & 7) != 0)
  {
    v15 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  result = v29;
  if (v29)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
  return result;
}

void sub_23015C108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  *(_QWORD *)(v3 - 40) = va;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va1);
  if ((v16 & 7) != 0)
  {
    v5 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v3 - 72));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,void>(_QWORD *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t EmptyString;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::string __p;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)operator new(0x68uLL);
  v9 = v8;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24FDE4958;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
  }
  else
  {
    v11 = *(_OWORD *)EmptyString;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
  }
  v17[0] = &off_24FDE49A8;
  v18 = v17;
  realityio::CustomInputDescriptor::CustomInputDescriptor((_QWORD *)v9 + 3, (uint64_t)&__p, a3, (uint64_t)v17, *a4);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_12;
    v15 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v14 + 8 * v15))(v14, v12, v13);
LABEL_12:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = (char *)v9 + 24;
  a1[1] = v9;
}

void sub_23015C2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::__shared_weak_count *v18;
  void *v20;

  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFB438;
  return result;
}

void std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFB438;
}

char *std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::Inputs::_getValue<void *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string *v21;
  __int128 v22;
  uint64_t String;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  __int128 v29;
  std::string::size_type v30;
  char v31;
  uint64_t v32;
  std::mutex *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string::size_type v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  const void **EmptyString;
  std::mutex *v40;
  uint64_t v41;
  uint64_t v42;
  std::string::size_type v43;
  uint64_t v44;
  std::string *v45;
  __int128 v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string::size_type v54;
  std::string::value_type *__s;
  std::string v56;
  std::string v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::string v61;
  void *__p[2];
  std::string::size_type v63;
  __int128 v64;
  std::string v65;
  _QWORD v66[5];

  v66[2] = *MEMORY[0x24BDAC8D0];
  v58 = 0;
  v59 = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 24);
  if (v7)
  {
    v59 = std::__shared_weak_count::lock(v7);
    if (v59)
      v58 = *(_QWORD *)(a2 + 16);
  }
  MEMORY[0x2348B2764](&v60, a3);
  v8 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a2 + 8), &v58);
  if (v8 == v9)
  {
    std::operator+<char>();
    v21 = std::string::append(&v56, ") at prim path (");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    v24 = *(char *)(String + 23);
    if (v24 >= 0)
      v25 = (const std::string::value_type *)String;
    else
      v25 = *(const std::string::value_type **)String;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(String + 23);
    else
      v26 = *(_QWORD *)(String + 8);
    v27 = std::string::append(&v57, v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v61, ")");
LABEL_22:
    v29 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v63 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v29;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v64, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a1 + 8) = v64;
    v66[0] = v65.__r_.__value_.__l.__size_;
    v30 = v65.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v66 + 7) = *(std::string::size_type *)((char *)&v65.__r_.__value_.__r.__words[1] + 7);
    v31 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    memset(&v65, 0, sizeof(v65));
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v66 + 7);
    v32 = v66[0];
    *(_QWORD *)(a1 + 24) = v30;
    *(_QWORD *)(a1 + 32) = v32;
    *(_BYTE *)(a1 + 47) = v31;
    if (SHIBYTE(v63) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    {
      v33 = (std::mutex *)v56.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v33);
      goto LABEL_56;
    }
    goto LABEL_56;
  }
  v10 = 1;
  v11 = v8;
  do
  {
    v11 = (_QWORD *)*v11;
    --v10;
  }
  while (v11 != v9);
  if (v10)
  {
    std::operator+<char>();
    v12 = std::string::append(&v56, ") at prim path (");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    v15 = *(char *)(v14 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)v14;
    else
      v16 = *(const std::string::value_type **)v14;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v14 + 23);
    else
      v17 = *(_QWORD *)(v14 + 8);
    v18 = std::string::append(&v57, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v61, ") because more than one connected builder produced the same output type");
    goto LABEL_22;
  }
  v34 = v8[5];
  v36 = *(_QWORD *)(v34 + 16);
  v35 = *(std::__shared_weak_count **)(v34 + 24);
  v57.__r_.__value_.__r.__words[0] = v36;
  v57.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
  }
  if ((v8[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((v8[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
  v40 = (std::mutex *)(v36 + 64);
  std::mutex::lock((std::mutex *)(v36 + 64));
  v41 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v36 + 40, EmptyString);
  v42 = v41;
  v43 = v36 + 48;
  if (v36 + 48 == v41)
  {
    std::operator+<char>();
    v45 = std::string::append(&v61, "\" does not exist in the builder outputs");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v63 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v64, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    v3 = *((_QWORD *)&v64 + 1);
    v44 = v64;
    EmptyString = (const void **)v65.__r_.__value_.__l.__size_;
    __s = (std::string::value_type *)v65.__r_.__value_.__r.__words[0];
    LODWORD(v56.__r_.__value_.__l.__data_) = v65.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v56.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v65.__r_.__value_.__r.__words[2] + 3);
    LODWORD(v36) = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
    memset(&v65, 0, sizeof(v65));
    if (SHIBYTE(v63) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    std::mutex::unlock(v40);
    *(_QWORD *)&v64 = v44;
    *((_QWORD *)&v64 + 1) = v3;
    if ((v36 & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v65, __s, (std::string::size_type)EmptyString);
      v3 = *((_QWORD *)&v64 + 1);
      v44 = v64;
      EmptyString = (const void **)v65.__r_.__value_.__l.__size_;
      v54 = v65.__r_.__value_.__r.__words[0];
      LOBYTE(v36) = *((_BYTE *)&v65.__r_.__value_.__s + 23);
      LODWORD(v66[0]) = v65.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v66 + 3) = *(_DWORD *)((char *)&v65.__r_.__value_.__r.__words[2] + 3);
      operator delete(__s);
      v40 = (std::mutex *)v54;
      if (!v35)
        goto LABEL_52;
    }
    else
    {
      LODWORD(v65.__r_.__value_.__r.__words[2]) = v56.__r_.__value_.__l.__data_;
      *(_DWORD *)((char *)&v65.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v56.__r_.__value_.__r.__words + 3);
      LODWORD(v66[0]) = v65.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v66 + 3) = *(_DWORD *)((char *)v56.__r_.__value_.__r.__words + 3);
      v40 = (std::mutex *)__s;
      if (!v35)
        goto LABEL_52;
    }
  }
  else
  {
    v44 = *(_QWORD *)(*(_QWORD *)(v41 + 56) + 8);
    std::mutex::unlock((std::mutex *)(v36 + 64));
    if (!v35)
      goto LABEL_52;
  }
  v47 = (unint64_t *)&v35->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
LABEL_52:
  if (v43 == v42)
  {
    *(_QWORD *)&v64 = v44;
    *((_QWORD *)&v64 + 1) = v3;
    if ((v36 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&v65, (const std::string::value_type *)v40, (std::string::size_type)EmptyString);
      *(_BYTE *)a1 = 0;
      *(_OWORD *)(a1 + 8) = v64;
      *(std::string *)(a1 + 24) = v65;
      v33 = v40;
      goto LABEL_30;
    }
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    v65.__r_.__value_.__l.__size_ = (std::string::size_type)EmptyString;
    LODWORD(v65.__r_.__value_.__r.__words[2]) = v66[0];
    *(_DWORD *)((char *)&v65.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v66 + 3);
    *((_BYTE *)&v65.__r_.__value_.__s + 23) = v36;
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v64;
    *(std::string *)(a1 + 24) = v65;
  }
  else
  {
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = v44;
  }
LABEL_56:
  if ((v60 & 7) != 0)
  {
    v49 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  v51 = v59;
  if (v59)
  {
    v52 = (unint64_t *)&v59->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_23015C9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  unsigned int *v34;
  unsigned int v35;

  operator delete(v32);
  if ((a26 & 7) != 0)
  {
    v34 = (unsigned int *)(a26 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  *(_QWORD *)a1 = off_24FDFB4B8;
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v2 = *(_QWORD *)(a1 + 96);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 88);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 16));
  return a1;
}

void std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  *(_QWORD *)a1 = off_24FDFB4B8;
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v2 = *(_QWORD *)(a1 + 96);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 88);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 16));
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 16);
  v2 = operator new(0xA0uLL);
  *v2 = off_24FDFB4B8;
  return v2;
}

void sub_23015CC0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24FDFB4B8;
}

_QWORD *std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0::~$_0(a1 + 16);
}

void std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0::~$_0((uint64_t)a1 + 16);
  operator delete(a1);
}

_QWORD *std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 16;
  RETransformComponentGetComponentType();
  v9[0] = &off_24FDFB528;
  v9[1] = v2;
  v10 = v9;
  v7[0] = REEntityGetOrAddComponentByClass();
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, _QWORD *))(*v10 + 48))(v10, v7);
  RENetworkMarkComponentDirty();
  result = v10;
  if (v10 == v9)
  {
    v4 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_7;
    v4 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
LABEL_7:
  if (!*(_BYTE *)(a1 + 84))
    return result;
  REAnchoringComponentGetComponentType();
  v7[0] = &off_24FDFB5A8;
  v7[1] = v2;
  v8 = v7;
  v6 = REEntityGetOrAddComponentByClass();
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v8 + 48))(v8, &v6);
  RENetworkMarkComponentDirty();
  result = v8;
  if (v8 == v7)
  {
    v5 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v5))(result);
}

void sub_23015CDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 16;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFB528;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFB528;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_()
{
  return RETransformComponentSetLocalSRT();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio25TransformComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio25TransformComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFB5A8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFB5A8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1)
{
  uint64_t v1;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *Data;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v3;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v4;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v8;
  int v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  Data = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
  if ((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    REAnchoringComponentSetDescriptorType();
    if (*(_QWORD *)(v1 + 80))
    {
      v8 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v8)
        v8 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
      if ((*(_QWORD *)(v1 + 80) & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v8 + 1) & 0xFFFFFFFFFFFFFFF8)
        && !atomic_load(&realityio::tokens::TransformBuilderTokens))
      {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
      }
      REAnchoringComponentSetDescriptorAlignment();
    }
  }
  else
  {
    v3 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
    if (!v3)
      v3 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
    if ((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFFFF8))
    {
      REAnchoringComponentSetDescriptorType();
      REAnchoringComponentSetDescriptorResourceGroup();
      REAnchoringComponentSetDescriptorResourceName();
    }
    else
    {
      v4 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v4)
        v4 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
      if ((*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8))
      {
        REAnchoringComponentSetDescriptorType();
      }
      else
      {
        v5 = *(NSObject **)(realityio::logObjects(v4) + 24);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          v6 = *(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFFFF8;
          if (v6)
          {
            v7 = (const char *)(v6 + 16);
            if (*(char *)(v6 + 39) < 0)
              v7 = *(const char **)v7;
          }
          else
          {
            v7 = "";
          }
          v11 = 136315138;
          v12 = v7;
          _os_log_impl(&dword_22FF26000, v5, OS_LOG_TYPE_DEFAULT, "Unknown anchor type %s", (uint8_t *)&v11, 0xCu);
        }
        REAnchoringComponentSetDescriptorType();
      }
    }
  }
  return REAnchoringComponentSetScaleFactor();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio25TransformComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio25TransformComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void std::__function::__func<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFB638;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFB638;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::EntityBuilder *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[8];
  uint64_t v6;

  v1 = *((_QWORD *)a1 + 1);
  v2 = realityio::EntityBuilder::kInputName(a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v1, v2, (uint64_t)v5);
  if (v5[0])
  {
    v4 = v6;
    if (v6)
    {
      RERetain();
      RETransformComponentGetComponentType();
      REEntityRemoveComponentByClass();
    }
  }
  else
  {
    v4 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v4);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v5);
}

void sub_23015D364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t *RIO_MTLX::EMPTY_STRING(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::EMPTY_STRING(void)::v = 0;
    unk_255E54150 = 0;
    qword_255E54158 = 0;
  }
  return &RIO_MTLX::EMPTY_STRING(void)::v;
}

BOOL RIO_MTLX::`anonymous namespace'::invalidNameChar(unsigned int this)
{
  int v2;

  if ((this & 0x80000000) != 0)
    v2 = __maskrune(this, 0x500uLL);
  else
    v2 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * this + 60) & 0x500;
  return this != 95 && v2 == 0 && this != 58;
}

BOOL RIO_MTLX::isValidName(char *a1)
{
  uint64_t v2;
  char v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v2 = a1[23];
  v3 = v2;
  v4 = *(char **)a1;
  v5 = *((_QWORD *)a1 + 1);
  if ((v2 & 0x80u) == 0)
    v6 = a1;
  else
    v6 = *(char **)a1;
  if ((v2 & 0x80u) == 0)
    v7 = a1[23];
  else
    v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = &v6[v7];
    {
      ++v6;
      if (!--v7)
      {
        v6 = v8;
        break;
      }
    }
    v2 = a1[23];
    v4 = *(char **)a1;
    v5 = *((_QWORD *)a1 + 1);
    v3 = a1[23];
  }
  if (v3 < 0)
    v2 = v5;
  else
    v4 = a1;
  return v6 == &v4[v2];
}

void RIO_MTLX::incrementName(std::string *__str@<X0>, _QWORD *a2@<X8>)
{
  char v4;
  size_t size;
  std::string *v6;
  char *v7;
  size_t v8;
  std::string::size_type v9;
  int v10;
  int v11;
  std::string::size_type v12;
  int v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string v19;
  std::string __stra;
  std::string v21;

  v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  if (v4 >= 0)
    v6 = __str;
  else
    v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v7 = (char *)&v6[-1].__r_.__value_.__r.__words[2] + 7;
  v8 = size;
  do
  {
    v9 = v8;
    if (!v8)
      break;
    v10 = v7[v8];
    if (v10 < 0)
      break;
    v11 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v10 + 60);
    v8 = v9 - 1;
  }
  while ((v11 & 0x400) != 0);
  if (v9 >= size)
  {
    std::string::basic_string[abi:ne180100]((uint64_t)a2, size + 1);
    if (*((char *)a2 + 23) < 0)
      a2 = (_QWORD *)*a2;
    if (size)
    {
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = __str;
      else
        v18 = (std::string *)__str->__r_.__value_.__r.__words[0];
      memmove(a2, v18, size);
    }
    *(_WORD *)((char *)a2 + size) = 50;
  }
  else
  {
    std::string::basic_string(&v21, __str, 0, v9, (std::allocator<char> *)&__stra);
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v12 = __str->__r_.__value_.__l.__size_;
    std::string::basic_string(&__stra, __str, v9, v12, (std::allocator<char> *)&v19);
    v13 = std::stoi(&__stra, 0, 10);
    std::to_string(&v19, v13 + 1);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v21;
    else
      v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    else
      v15 = v21.__r_.__value_.__l.__size_;
    v16 = std::string::insert(&v19, 0, (const std::string::value_type *)v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__stra.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_23015D6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::splitString(std::string *__str@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  std::string *v7;
  std::string::size_type size;
  int v9;
  unsigned __int8 *v10;
  size_t v11;
  std::string::size_type v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;
  std::string *v28;
  std::string::size_type v29;
  int v30;
  unsigned __int8 *v31;
  size_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  size_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  size_t v40;
  unsigned __int8 *v41;
  std::string __p;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = __str;
  else
    v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = (unsigned __int8 *)a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  if (!size)
  {
LABEL_18:
    v12 = -1;
LABEL_19:
    v14 = -1;
    goto LABEL_20;
  }
  v12 = 0;
  if (!v11)
    goto LABEL_19;
  v13 = (unsigned __int8 *)v7 + size;
  while (memchr(v10, v7->__r_.__value_.__s.__data_[v12], v11))
  {
    if (size == ++v12)
      goto LABEL_18;
  }
  if (size <= v12)
    goto LABEL_19;
  v39 = (unsigned __int8 *)v7 + v12;
LABEL_69:
  v40 = v11;
  v41 = v10;
  while (*v39 != *v41)
  {
    ++v41;
    if (!--v40)
    {
      if (++v39 != v13)
        goto LABEL_69;
      v39 = (unsigned __int8 *)v7 + size;
      break;
    }
  }
  if (v39 == v13)
    v14 = -1;
  else
    v14 = v39 - (unsigned __int8 *)v7;
LABEL_20:
  if ((v14 & v12) != 0xFFFFFFFFFFFFFFFFLL)
  {
    do
    {
      std::string::basic_string(&__p, __str, v12, v14 - v12, (std::allocator<char> *)&__v);
      v16 = *(_QWORD *)(a3 + 8);
      v15 = *(_QWORD *)(a3 + 16);
      if (v16 >= v15)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a3) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a3) >> 3);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v19;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v21)
          v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(a3 + 16, v21);
        else
          v22 = 0;
        v23 = v22 + v18;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        v25 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a3 + 8) = v25;
        if (v26 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v16 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v16 = v17;
        *(_QWORD *)(a3 + 8) = v16 + 24;
      }
      v27 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
      if (v27 >= 0)
        v28 = __str;
      else
        v28 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if (v27 >= 0)
        v29 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      else
        v29 = __str->__r_.__value_.__l.__size_;
      v30 = *((char *)a2 + 23);
      if (v30 >= 0)
        v31 = (unsigned __int8 *)a2;
      else
        v31 = *a2;
      if (v30 >= 0)
        v32 = *((unsigned __int8 *)a2 + 23);
      else
        v32 = (size_t)a2[1];
      if (v29 <= v14)
      {
        v14 = -1;
      }
      else if (v32)
      {
        v33 = (unsigned __int8 *)v28 + v29;
        while (memchr(v31, v28->__r_.__value_.__s.__data_[v14], v32))
        {
          if (v29 == ++v14)
          {
            v14 = -1;
LABEL_64:
            v34 = -1;
            goto LABEL_65;
          }
        }
        if (v29 <= v14)
          goto LABEL_64;
        v35 = (unsigned __int8 *)v28 + v14;
LABEL_56:
        v36 = v32;
        v37 = v31;
        while (*v35 != *v37)
        {
          ++v37;
          if (!--v36)
          {
            if (++v35 != v33)
              goto LABEL_56;
            v35 = (unsigned __int8 *)v28 + v29;
            break;
          }
        }
        if (v35 == v33)
          v34 = -1;
        else
          v34 = v35 - (unsigned __int8 *)v28;
        goto LABEL_65;
      }
      v34 = -1;
LABEL_65:
      v12 = v14;
      v38 = v34 & v14;
      v14 = v34;
    }
    while (v38 != -1);
  }
}

void sub_23015DA10(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

__n128 RIO_MTLX::replaceSubstrings@<Q0>(std::string *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *i;
  std::string::size_type j;
  std::string::size_type size;
  std::string *v7;
  int v8;
  char *v9;
  int64_t v10;
  char *v11;
  char *v12;
  int64_t v13;
  int v14;
  int64_t v15;
  char *v16;
  char *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  uint64_t v21;
  __n128 result;

  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      if (i[3])
      {
LABEL_6:
        for (j = 0; ; j += v21)
        {
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          {
            v7 = (std::string *)this->__r_.__value_.__r.__words[0];
            size = this->__r_.__value_.__l.__size_;
          }
          else
          {
            size = HIBYTE(this->__r_.__value_.__r.__words[2]);
            v7 = this;
          }
          v8 = *((char *)i + 39);
          v9 = v8 >= 0 ? (char *)(i + 2) : (char *)i[2];
          v10 = v8 >= 0 ? *((unsigned __int8 *)i + 39) : i[3];
          if (size < j)
            break;
          if (v10)
          {
            v11 = (char *)v7 + j;
            v12 = (char *)v7 + size;
            v13 = size - j;
            if (v13 >= v10)
            {
              v14 = *v9;
              while (1)
              {
                v15 = v13 - v10;
                if (v15 == -1)
                  break;
                v16 = (char *)memchr(v11, v14, v15 + 1);
                if (!v16)
                  break;
                v17 = v16;
                if (!memcmp(v16, v9, v10))
                {
                  if (v17 == v12)
                    goto LABEL_38;
                  j = v17 - (char *)v7;
                  goto LABEL_27;
                }
                v11 = v17 + 1;
                v13 = v12 - (v17 + 1);
                if (v13 < v10)
                  goto LABEL_38;
              }
            }
            break;
          }
LABEL_27:
          if (j == -1)
            break;
          v18 = *((char *)i + 63);
          if (v18 >= 0)
            v19 = (const std::string::value_type *)(i + 5);
          else
            v19 = (const std::string::value_type *)i[5];
          if (v18 >= 0)
            v20 = *((unsigned __int8 *)i + 63);
          else
            v20 = i[6];
          std::string::replace(this, j, v10, v19, v20);
          if (*((char *)i + 63) < 0)
            v21 = i[6];
          else
            v21 = *((unsigned __int8 *)i + 63);
        }
      }
    }
    else if (*((_BYTE *)i + 39))
    {
      goto LABEL_6;
    }
LABEL_38:
    ;
  }
  result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a3 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

_QWORD *realityio::SkeletalPoseDefinitionAssetAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  uint64_t ServiceLocator;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  v13 = 0;
  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v8));
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)v14)
        && (v15 & 4) != 0)
      {
        (*(void (**)(_BYTE *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v14);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      ++v9;
      v8 += 16;
    }
    while (v9 < (uint64_t)(a2[1] - *a2) >> 3);
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>(a4))
  {
    if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>(a4) & 1) != 0)
    {
      v10 = *((_QWORD *)a4 + 1);
      if ((v10 & 4) != 0)
        v11 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v10 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 168))(a4);
      else
        v11 = *(uint64_t **)a4;
    }
    else
    {
      v11 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
    }
    realityio::WrappedRERef<REAsset *>::operator=(&v13, v11);
  }
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v13);
}

void sub_23015DD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v9;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<realityio::WrappedRERef<REAsset *>>::Invoke@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<realityio::WrappedRERef<REAsset *>>;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<realityio::WrappedRERef<REAsset *>>(_QWORD *result)
{
  if (result)
  {
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

realityio::tokens::TextBuilderTokens_StaticTokenType *realityio::tokens::TextBuilderTokens_StaticTokenType::TextBuilderTokens_StaticTokenType(realityio::tokens::TextBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v76 = (uint64_t *)(MEMORY[0x2348B2758](this, "baseline", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 96, "middle", 0);
  MEMORY[0x2348B2758]((char *)this + 104, "pointSize", 0);
  MEMORY[0x2348B2758]((char *)this + 112, "Preliminary_Text", 0);
  MEMORY[0x2348B2758]((char *)this + 120, "right", 0);
  MEMORY[0x2348B2758]((char *)this + 128, "singleLine", 0);
  MEMORY[0x2348B2758]((char *)this + 136, "top", 0);
  MEMORY[0x2348B2758]((char *)this + 144, "verticalAlignment", 0);
  MEMORY[0x2348B2758]((char *)this + 152, "width", 0);
  MEMORY[0x2348B2758]((char *)this + 160, "wrapMode", 0);
  v2 = *(_QWORD *)this;
  v77 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v76;
  v78 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v79 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v80 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v81 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v82 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v83 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v84 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v85 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v86 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v87 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v88 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v89 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v90 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v90 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v91 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v91 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v92 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v93 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v93 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v94 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v94 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v95 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v95 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v96 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v96 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v97 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v97 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  v65 = operator new(0xA8uLL);
  v66 = 0;
  *((_QWORD *)this + 21) = v65;
  *((_QWORD *)this + 22) = v65;
  *((_QWORD *)this + 23) = v65 + 21;
  do
  {
    v67 = *(&v77 + v66);
    *v65 = v67;
    if ((v67 & 7) != 0)
    {
      v68 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 2, v68));
      if ((v69 & 1) == 0)
        *v65 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v66;
    ++v65;
  }
  while (v66 != 21);
  v70 = &v98;
  *((_QWORD *)this + 22) = v65;
  do
  {
    v72 = *--v70;
    v71 = v72;
    if ((v72 & 7) != 0)
    {
      v73 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
      do
        v74 = __ldxr(v73);
      while (__stlxr(v74 - 2, v73));
    }
  }
  while (v70 != &v77);
  return this;
}

void sub_23015E570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,void **a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a22);
  v55 = (char *)&a45;
  while (1)
  {
    v57 = *((_QWORD *)v55 - 1);
    v55 -= 8;
    v56 = v57;
    if ((v57 & 7) != 0)
    {
      v58 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
    if (v55 == &a24)
    {
      if ((*v47 & 7) != 0)
      {
        v60 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v46 & 7) != 0)
      {
        v62 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v54 & 7) != 0)
      {
        v64 = (unsigned int *)(*v54 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v53 & 7) != 0)
      {
        v66 = (unsigned int *)(*v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v52 & 7) != 0)
      {
        v68 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*v51 & 7) != 0)
      {
        v70 = (unsigned int *)(*v51 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v50 & 7) != 0)
      {
        v72 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*v49 & 7) != 0)
      {
        v74 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*v48 & 7) != 0)
      {
        v76 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a11 & 7) != 0)
      {
        v78 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*a12 & 7) != 0)
      {
        v80 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*a13 & 7) != 0)
      {
        v82 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*a14 & 7) != 0)
      {
        v84 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*a15 & 7) != 0)
      {
        v86 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*a16 & 7) != 0)
      {
        v88 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a17 & 7) != 0)
      {
        v90 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*a18 & 7) != 0)
      {
        v92 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      if ((*a19 & 7) != 0)
      {
        v94 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      if ((*a20 & 7) != 0)
      {
        v96 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      if ((*a21 & 7) != 0)
      {
        v98 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
      if ((*v45 & 7) != 0)
      {
        v100 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23015E8C0()
{
  JUMPOUT(0x23015E70CLL);
}

void sub_23015E8C8()
{
  JUMPOUT(0x23015E730);
}

void sub_23015E8D0()
{
  JUMPOUT(0x23015E754);
}

void sub_23015E8D8()
{
  JUMPOUT(0x23015E778);
}

void sub_23015E8E0()
{
  JUMPOUT(0x23015E79CLL);
}

void sub_23015E8E8()
{
  JUMPOUT(0x23015E7C0);
}

void sub_23015E8F0()
{
  JUMPOUT(0x23015E7E4);
}

void sub_23015E8F8()
{
  JUMPOUT(0x23015E808);
}

void sub_23015E900()
{
  JUMPOUT(0x23015E82CLL);
}

void sub_23015E908()
{
  JUMPOUT(0x23015E850);
}

void sub_23015E910()
{
  JUMPOUT(0x23015E874);
}

void sub_23015E918()
{
  JUMPOUT(0x23015E898);
}

void realityio::generateTextPrimDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v11;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v12;
  realityio::AnyValueDirtyPropertyDescriptor *v13;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v14;
  realityio::AnyValueDirtyPropertyDescriptor *v15;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v16;
  realityio::AnyValueDirtyPropertyDescriptor *v17;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v18;
  realityio::AnyValueDirtyPropertyDescriptor *v19;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v20;
  realityio::AnyValueDirtyPropertyDescriptor *v21;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v22;
  realityio::AnyValueDirtyPropertyDescriptor *v23;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v24;
  realityio::AnyValueDirtyPropertyDescriptor *v25;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v26;
  realityio::AnyValueDirtyPropertyDescriptor *v27;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v28;
  uint64_t i;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39[3];
  _QWORD *v40[3];
  __int128 v41;
  _QWORD *v42[3];
  _QWORD *v43[3];
  __int128 v44;
  _QWORD *v45[3];
  uint64_t v46;
  uint64_t v47;
  void **v48;
  _OWORD v49[9];
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54D70);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54D70))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v43, 0, sizeof(v43));
    v9 = (_BYTE *)operator new();
    Data = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
    memset(v40, 0, sizeof(v40));
    v11 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v12 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v12)
      v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v11, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v12 + 24));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v38, (uint64_t)v11);
    v49[0] = v38;
    v38 = 0uLL;
    v13 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v14 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v14)
      v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v13, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v14 + 48));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v37, (uint64_t)v13);
    v49[1] = v37;
    v37 = 0uLL;
    v15 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v16 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v15, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v16 + 104));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v36, (uint64_t)v15);
    v49[2] = v36;
    v36 = 0uLL;
    v17 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v18 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v18)
      v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v17, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v18 + 152));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v35, (uint64_t)v17);
    v49[3] = v35;
    v35 = 0uLL;
    v19 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v20 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v20)
      v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v19, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v20 + 56));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v34, (uint64_t)v19);
    v49[4] = v34;
    v34 = 0uLL;
    v21 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v22 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v22)
      v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v21, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v22 + 32));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v33, (uint64_t)v21);
    v49[5] = v33;
    v33 = 0uLL;
    v23 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v24 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v24)
      v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v23, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v24 + 160));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v32, (uint64_t)v23);
    v49[6] = v32;
    v32 = 0uLL;
    v25 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v26 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v26)
      v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v25, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v26 + 64));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v31, (uint64_t)v25);
    v49[7] = v31;
    v31 = 0uLL;
    v27 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v28 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
    if (!v28)
      v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v27, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v28 + 144));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v30, (uint64_t)v27);
    v49[8] = v30;
    v30 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v39, v49, 9uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v9, (uint64_t *)Data + 14, v40, v39);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v41, (uint64_t)v9);
    v50 = v41;
    v41 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v42, &v50, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v43, v42);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v44, v8);
    v51 = v44;
    v44 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v45, &v51, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v45);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v46, v7);
    _MergedGlobals_51 = v46;
    *(_QWORD *)algn_255E54D68 = v47;
    v46 = 0;
    v47 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
    v48 = (void **)v45;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v48);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v51);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v44);
    v48 = (void **)v42;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v48);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v50);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v41);
    v48 = (void **)v39;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v48);
    for (i = 8; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v49[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v30);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v31);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v32);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v34);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v35);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v37);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
    *(_QWORD *)&v49[0] = v40;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
    *(_QWORD *)&v49[0] = v43;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
    __cxa_guard_release(&qword_255E54D70);
  }
  v4 = *(_QWORD *)algn_255E54D68;
  *a1 = _MergedGlobals_51;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_23015EF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49)
{
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  MEMORY[0x2348B4E1C](v50, 0x10A1C40F82F910ELL);
  a49 = (void **)&a38;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a49);
  MEMORY[0x2348B4E1C](v49, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v51, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54D70);
  _Unwind_Resume(a1);
}

void realityio::textInformationFromPrim(realityio *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *Data;
  __int128 *v6;
  unint64_t *v7;
  unint64_t v8;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v9;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v16;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v23;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v30;
  int v31;
  std::string::value_type **v32;
  void **v33;
  const std::string::value_type *v34;
  std::string::size_type *v35;
  __int128 v36;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v37;
  double v38;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v39;
  uint64_t v40;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v41;
  uint64_t v42;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  NSObject *v54;
  _BOOL4 v55;
  unint64_t v56;
  const char *v57;
  char v58;
  int v59;
  char v60;
  uint64_t v61;
  NSObject *v62;
  unint64_t v63;
  const char *v64;
  char v65;
  uint64_t v66;
  NSObject *v67;
  _BOOL4 v68;
  unint64_t v69;
  const char *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  const char *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  std::string::value_type *__s[2];
  __int128 v85;
  __int128 *v86;
  __int128 v87;
  __int128 v88;
  __int128 *v89;
  void *__p[2];
  char v91;
  uint8_t buf[4];
  _BYTE v93[20];
  __int128 v94;
  __int128 *v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  Data = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  std::string::basic_string[abi:ne180100]<0>(__p, "Helvetica");
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::VtArray((uint64_t)__s, (uint64_t)__p, 1);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)Data + 48), (uint64_t)buf);
  if (buf[0])
  {
    v87 = *(_OWORD *)&v93[4];
    v88 = v94;
    v6 = v95;
  }
  else
  {
    v87 = *(_OWORD *)__s;
    v88 = v85;
    v6 = v86;
  }
  v89 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 1);
    if (*((_QWORD *)&v88 + 1))
      v7 = (unint64_t *)*((_QWORD *)&v88 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result((uint64_t)buf);
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(__s);
  if (v91 < 0)
    operator delete(__p[0]);
  v9 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v9)
    v9 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  v10 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v9 + 160), (uint64_t)buf);
  if (buf[0])
  {
    __p[0] = *(void **)&v93[4];
    if ((v93[4] & 7) == 0)
      goto LABEL_26;
    v11 = (unsigned int *)(*(_QWORD *)&v93[4] & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
  }
  else
  {
    v13 = *((_QWORD *)v10 + 5);
    __p[0] = (void *)v13;
    if ((v13 & 7) == 0)
      goto LABEL_26;
    v11 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
  }
  if ((v12 & 1) == 0)
    __p[0] = v11;
LABEL_26:
  if (buf[0])
  {
    if ((v93[4] & 7) != 0)
    {
      v14 = (unsigned int *)(*(_QWORD *)&v93[4] & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
  }
  else if (SHIBYTE(v95) < 0)
  {
    operator delete((void *)v94);
  }
  v16 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v16)
    v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  v17 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v17)
    v17 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v16 + 64), (uint64_t)buf);
  if (buf[0])
  {
    v83 = *(unsigned int **)&v93[4];
    if ((v93[4] & 7) == 0)
      goto LABEL_47;
    v18 = (unsigned int *)(*(_QWORD *)&v93[4] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
  }
  else
  {
    v20 = (unsigned int *)*((_QWORD *)v17 + 5);
    v83 = v20;
    if ((v20 & 7) == 0)
      goto LABEL_47;
    v18 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
  }
  if ((v19 & 1) == 0)
    v83 = v18;
LABEL_47:
  if (buf[0])
  {
    if ((v93[4] & 7) != 0)
    {
      v21 = (unsigned int *)(*(_QWORD *)&v93[4] & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
  }
  else if (SHIBYTE(v95) < 0)
  {
    operator delete((void *)v94);
  }
  v23 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v23)
    v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  v24 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v24)
    v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v23 + 144), (uint64_t)buf);
  if (buf[0])
  {
    v82 = *(unsigned int **)&v93[4];
    if ((v93[4] & 7) == 0)
      goto LABEL_68;
    v25 = (unsigned int *)(*(_QWORD *)&v93[4] & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 2, v25));
  }
  else
  {
    v27 = (unsigned int *)*((_QWORD *)v24 + 5);
    v82 = v27;
    if ((v27 & 7) == 0)
      goto LABEL_68;
    v25 = (unsigned int *)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 2, v25));
  }
  if ((v26 & 1) == 0)
    v82 = v25;
LABEL_68:
  if (buf[0])
  {
    if ((v93[4] & 7) != 0)
    {
      v28 = (unsigned int *)(*(_QWORD *)&v93[4] & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
  }
  else if (SHIBYTE(v95) < 0)
  {
    operator delete((void *)v94);
  }
  v30 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v30)
    v30 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  std::string::basic_string[abi:ne180100]<0>(__s, "");
  realityio::getAttributeValue<std::string>(this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v30 + 24), (uint64_t)buf);
  v31 = buf[0];
  if (buf[0])
  {
    if ((SBYTE7(v94) & 0x80000000) == 0)
    {
      v32 = (std::string::value_type **)&v93[4];
      goto LABEL_81;
    }
    v34 = *(const std::string::value_type **)&v93[4];
    v35 = (std::string::size_type *)&v93[12];
LABEL_86:
    std::string::__init_copy_ctor_external((std::string *)a2, v34, *v35);
    if (buf[0])
      goto LABEL_82;
    goto LABEL_87;
  }
  v32 = __s;
  if (SBYTE7(v85) < 0)
  {
    v34 = __s[0];
    v35 = (std::string::size_type *)&__s[1];
    goto LABEL_86;
  }
LABEL_81:
  *(_OWORD *)a2 = *(_OWORD *)v32;
  *(_QWORD *)(a2 + 16) = v32[2];
  if (v31)
  {
LABEL_82:
    if ((SBYTE7(v94) & 0x80000000) == 0)
      goto LABEL_90;
    v33 = (void **)&v93[4];
    goto LABEL_89;
  }
LABEL_87:
  if ((SHIBYTE(v95) & 0x80000000) == 0)
    goto LABEL_90;
  v33 = (void **)&v94;
LABEL_89:
  operator delete(*v33);
LABEL_90:
  if ((_QWORD)v87)
  {
    if (*((char *)v89 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a2 + 24), *(const std::string::value_type **)v89, *((_QWORD *)v89 + 1));
    }
    else
    {
      v36 = *v89;
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v89 + 2);
      *(_OWORD *)(a2 + 24) = v36;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a2 + 24), "Helvetica");
  }
  v37 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v37)
    v37 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  realityio::getAttributeValue<double>(this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v37 + 104), (uint64_t)buf);
  if (buf[0])
  {
    v38 = *(double *)&v93[4];
  }
  else
  {
    if (SHIBYTE(v95) < 0)
      operator delete((void *)v94);
    v38 = 144.0;
  }
  *(double *)(a2 + 48) = v38 * 0.00035277723;
  v39 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v39)
    v39 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  realityio::getAttributeValue<double>(this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v39 + 152), (uint64_t)buf);
  if (buf[0])
  {
    v40 = *(_QWORD *)&v93[4];
  }
  else
  {
    v40 = 0x3FE3333333333333;
    if (SHIBYTE(v95) < 0)
      operator delete((void *)v94);
  }
  *(_QWORD *)(a2 + 56) = v40;
  v41 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v41)
    v41 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  realityio::getAttributeValue<double>(this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v41 + 56), (uint64_t)buf);
  if (buf[0])
  {
    v42 = *(_QWORD *)&v93[4];
  }
  else
  {
    v42 = 0x3FC3333333333333;
    if (SHIBYTE(v95) < 0)
      operator delete((void *)v94);
  }
  *(_QWORD *)(a2 + 64) = v42;
  v43 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v43)
    v43 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  realityio::getAttributeValue<double>(this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v43 + 32), (uint64_t)buf);
  if (buf[0])
  {
    v44 = *(_QWORD *)&v93[4];
  }
  else
  {
    v44 = 0x3FC999999999999ALL;
    if (SHIBYTE(v95) < 0)
      operator delete((void *)v94);
  }
  *(_QWORD *)(a2 + 72) = v44;
  v45 = (unint64_t)__p[0];
  *(void **)(a2 + 80) = __p[0];
  if ((v45 & 7) != 0)
  {
    v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 2, v46));
    if ((v47 & 1) == 0)
      *(_QWORD *)(a2 + 80) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a2 + 88) = v83;
  if ((v83 & 7) != 0)
  {
    v48 = (unsigned int *)((unint64_t)v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      *(_QWORD *)(a2 + 88) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a2 + 96) = v82;
  if ((v82 & 7) != 0)
  {
    v50 = (unsigned int *)((unint64_t)v82 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 2, v50));
    if ((v51 & 1) == 0)
      *(_QWORD *)(a2 + 96) &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) == 0)
  {
    if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0)
    {
      v52 = 1;
      goto LABEL_147;
    }
    if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0)
    {
      v52 = 2;
      goto LABEL_147;
    }
    v53 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
    if ((v53 & 1) != 0)
    {
      v52 = 3;
      goto LABEL_147;
    }
    v54 = *(NSObject **)(realityio::logObjects((realityio *)v53) + 24);
    v55 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
    v52 = 0;
    if (!v55)
      goto LABEL_147;
    v56 = (unint64_t)v83 & 0xFFFFFFFFFFFFFFF8;
    if (((unint64_t)v83 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v57 = (const char *)(v56 + 16);
      if (*(char *)(v56 + 39) < 0)
        v57 = *(const char **)v57;
    }
    else
    {
      v57 = "";
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v93 = v57;
    _os_log_impl(&dword_22FF26000, v54, OS_LOG_TYPE_DEFAULT, "Unknown text horizontal alignment value \"%s\" defaulting to \"left\"", buf, 0xCu);
  }
  v52 = 0;
LABEL_147:
  *(_BYTE *)(a2 + 104) = v52;
  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0
    || (pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0)
  {
    v58 = 2;
    goto LABEL_150;
  }
  v66 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
  if ((v66 & 1) == 0)
  {
    v67 = *(NSObject **)(realityio::logObjects((realityio *)v66) + 24);
    v68 = os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
    v58 = 0;
    if (!v68)
      goto LABEL_150;
    v69 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
    if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v70 = (const char *)(v69 + 16);
      if (*(char *)(v69 + 39) < 0)
        v70 = *(const char **)v70;
    }
    else
    {
      v70 = "";
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v93 = v70;
    _os_log_impl(&dword_22FF26000, v67, OS_LOG_TYPE_DEFAULT, "Unknown wrap mode value \"%s\" defaulting to \"flowing\"", buf, 0xCu);
  }
  v58 = 0;
LABEL_150:
  *(_BYTE *)(a2 + 105) = v58;
  v59 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
  v60 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
  if (!v59)
  {
    if ((v60 & 1) == 0)
    {
      if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) == 0)
      {
        v71 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if ((v71 & 1) != 0)
          goto LABEL_185;
        v62 = *(NSObject **)(realityio::logObjects((realityio *)v71) + 24);
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          goto LABEL_185;
        v72 = (unint64_t)v82 & 0xFFFFFFFFFFFFFFF8;
        if (((unint64_t)v82 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v64 = (const char *)(v72 + 16);
          if (*(char *)(v72 + 39) < 0)
            v64 = *(const char **)v64;
        }
        else
        {
          v64 = "";
        }
        v73 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
        if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v74 = (const char *)(v73 + 16);
          if (*(char *)(v73 + 39) < 0)
            v74 = *(const char **)v74;
        }
        else
        {
          v74 = "";
        }
        goto LABEL_184;
      }
LABEL_168:
      v65 = 2;
      goto LABEL_186;
    }
LABEL_161:
    v65 = 0;
    goto LABEL_186;
  }
  if ((v60 & 1) != 0)
    goto LABEL_161;
  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0)
    goto LABEL_168;
  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0)
    goto LABEL_185;
  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0)
    goto LABEL_185;
  v61 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
  if ((v61 & 1) != 0)
    goto LABEL_185;
  v62 = *(NSObject **)(realityio::logObjects((realityio *)v61) + 24);
  if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    goto LABEL_185;
  v63 = (unint64_t)v82 & 0xFFFFFFFFFFFFFFF8;
  if (((unint64_t)v82 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v64 = (const char *)(v63 + 16);
    if (*(char *)(v63 + 39) < 0)
      v64 = *(const char **)v64;
  }
  else
  {
    v64 = "";
  }
  v81 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
  if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v74 = (const char *)(v81 + 16);
    if (*(char *)(v81 + 39) < 0)
      v74 = *(const char **)v74;
  }
  else
  {
    v74 = "";
  }
LABEL_184:
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)v93 = v64;
  *(_WORD *)&v93[8] = 2080;
  *(_QWORD *)&v93[10] = v74;
  _os_log_impl(&dword_22FF26000, v62, OS_LOG_TYPE_DEFAULT, "Unknown text vertical alignment value \"%s\" for wrap mode \"%s\"; defaulting to \"bottom\"",
    buf,
    0x16u);
LABEL_185:
  v65 = 1;
LABEL_186:
  *(_BYTE *)(a2 + 106) = v65;
  if (SBYTE7(v85) < 0)
    operator delete(__s[0]);
  if ((v82 & 7) != 0)
  {
    v75 = (unsigned int *)((unint64_t)v82 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  if ((v83 & 7) != 0)
  {
    v77 = (unsigned int *)((unint64_t)v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v78 = __ldxr(v77);
    while (__stlxr(v78 - 2, v77));
  }
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v79 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v80 = __ldxr(v79);
    while (__stlxr(v80 - 2, v79));
  }
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v87);
}

void sub_23015FEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void **v43;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;

  if (*(char *)(v42 + 47) < 0)
    operator delete(*v43);
  if (*(char *)(v42 + 23) < 0)
    operator delete(*(void **)v42);
  if (a17 < 0)
    operator delete(__p);
  if ((a10 & 7) != 0)
  {
    v45 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  if ((a11 & 7) != 0)
  {
    v47 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  if ((a25 & 7) != 0)
  {
    v49 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&a20);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  __int128 __p;
  _BYTE v20[8];
  uint64_t v21;
  _BYTE buf[24];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(_BYTE *)a3)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v16 = *(_QWORD *)(a3 + 24);
          v15 = a3 + 24;
          v14 = v16;
          if (*(char *)(v15 + 23) >= 0)
            v14 = v15;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v14;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v17);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      v11 = v23;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
      *(_QWORD *)(a3 + 32) = v11;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
      LOBYTE(v11) = HIBYTE(v23);
      v23 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v11;
      if (v18 < 0)
        operator delete(v17[0]);
    }
    if ((v21 & 7) != 0)
    {
      v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    v10 = v23;
    *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
    *(_QWORD *)(a3 + 32) = v10;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
    LOBYTE(v10) = HIBYTE(v23);
    v23 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v10;
    if ((v20[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_2301602D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result(v5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_230160490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v16;
  std::type_info *v17;
  pxrInternal__aapl__pxrReserved__::VtValue *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v35;
  std::string v36;
  std::string v37;
  void *__p[2];
  std::string::size_type v39;
  __int128 v40;
  _OWORD v41[2];
  std::string v42;
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v44 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43))
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v7 = *(_OWORD *)(v6 + 16);
        v40 = *(_OWORD *)v6;
        v41[0] = v7;
        v8 = *(_QWORD *)(v6 + 32);
        if (v8)
        {
          v9 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
          if (!*((_QWORD *)&v41[0] + 1))
            v9 = (unint64_t *)(v8 - 16);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        *(_BYTE *)a3 = 1;
        v11 = v41[0];
        *(_OWORD *)(a3 + 8) = v40;
        *(_OWORD *)(a3 + 24) = v11;
        v40 = 0u;
        v41[0] = 0u;
        *(_QWORD *)(a3 + 40) = v8;
        *(_QWORD *)&v41[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v40);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
      {
        v17 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        v18 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, (const pxrInternal__aapl__pxrReserved__::VtValue *)v17);
        if (v42.__r_.__value_.__l.__size_)
        {
          v19 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(v18);
          v20 = *(_OWORD *)(v19 + 16);
          v40 = *(_OWORD *)v19;
          v41[0] = v20;
          v21 = *(_QWORD *)(v19 + 32);
          if (v21)
          {
            v22 = (unint64_t *)*((_QWORD *)&v41[0] + 1);
            if (!*((_QWORD *)&v41[0] + 1))
              v22 = (unint64_t *)(v21 - 16);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          *(_BYTE *)a3 = 1;
          v24 = v41[0];
          *(_OWORD *)(a3 + 8) = v40;
          *(_OWORD *)(a3 + 24) = v24;
          v40 = 0u;
          v41[0] = 0u;
          *(_QWORD *)(a3 + 40) = v21;
          *(_QWORD *)&v41[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v40);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v40;
          v35 = *((_QWORD *)&v41[0] + 1);
          *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
          *(_QWORD *)(a3 + 32) = v35;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
          LOBYTE(v35) = BYTE7(v41[1]);
          memset(v41, 0, 24);
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v35;
          if (SHIBYTE(v39) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v33 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v33;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v33) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v33;
      if ((SHIBYTE(v39) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v43);
        return;
      }
      v32 = __p[0];
    }
    else
    {
      v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      std::operator+<char>();
      v25 = std::string::append(&v37, ") at the given time: ");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v36, *a2);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v36;
      else
        v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v42, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v39 = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v40;
      v31 = *((_QWORD *)&v41[0] + 1);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
      *(_QWORD *)(a3 + 32) = v31;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
      LOBYTE(v31) = BYTE7(v41[1]);
      memset(v41, 0, 24);
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v31;
      if (SHIBYTE(v39) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      v32 = (void *)v37.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_46;
  }
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v40, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v40;
  v14 = *((_QWORD *)&v41[0] + 1);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)&v41[0];
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)v41 + 15);
  LOBYTE(v14) = BYTE7(v41[1]);
  memset(v41, 0, 24);
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v14;
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
}

void sub_230160934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(_QWORD *result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef((_QWORD *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<std::string>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  __int128 __p;
  _BYTE v20[8];
  uint64_t v21;
  _BYTE buf[24];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<std::string>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(_BYTE *)a3)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v16 = *(_QWORD *)(a3 + 24);
          v15 = a3 + 24;
          v14 = v16;
          if (*(char *)(v15 + 23) >= 0)
            v14 = v15;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v14;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v17);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      v11 = v23;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
      *(_QWORD *)(a3 + 32) = v11;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
      LOBYTE(v11) = HIBYTE(v23);
      v23 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v11;
      if (v18 < 0)
        operator delete(v17[0]);
    }
    if ((v21 & 7) != 0)
    {
      v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    v10 = v23;
    *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
    *(_QWORD *)(a3 + 32) = v10;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
    LOBYTE(v10) = HIBYTE(v23);
    v23 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v10;
    if ((v20[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_230160DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _BYTE *v5;
  va_list va;

  va_start(va, a5);
  realityio::Result<std::string,realityio::DetailedError>::~Result(v5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

_BYTE *realityio::Result<std::string,realityio::DetailedError>::~Result(_BYTE *a1)
{
  void **v2;

  if (*a1)
  {
    if ((char)a1[31] < 0)
    {
      v2 = (void **)(a1 + 8);
LABEL_6:
      operator delete(*v2);
    }
  }
  else if ((char)a1[47] < 0)
  {
    v2 = (void **)(a1 + 24);
    goto LABEL_6;
  }
  return a1;
}

void realityio::ImportSessionInit(realityio *this)
{
  if (!REComponentClassFromName())
  {
      && REStructBuilderCreate())
    {
      if (REStructBuilderInit())
      {
        REStructBuilderAddMemberDataTypeWithTag();
      }
      REStructBuilderDestroy();
    }
    REComponentClassFromName();
  }
}

void sub_230160F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::RIOPrimPathComponent::primPathComponentCreate()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  return result;
}

void `anonymous namespace'::RIOPrimPathComponent::primPathComponentDestroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    if (*a2)
    {
      RECIntrospectionFree();
      *a2 = 0;
    }
    JUMPOUT(0x2348B4E1CLL);
  }
}

void realityio::ImportSessionDeinit(realityio *this)
{
  {
    RECustomComponentTypeDestroy();
  }
}

void sub_230161058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void realityio::ImportSession::SessionMeshAssetCacheDeleter::operator()(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>>>::destroy(a2 + 24, *(_QWORD **)(a2 + 32));
    std::__tree<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<realityio::SessionMeshAssetCache::CryptographicHash,std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::less<realityio::SessionMeshAssetCache::CryptographicHash>,true>,std::allocator<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>>>::destroy(a2, *(_QWORD **)(a2 + 8));
    JUMPOUT(0x2348B4E1CLL);
  }
}

void ___Z26shouldImportSubdsByDefaultv_block_invoke()
{
  id v0;

  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _MergedGlobals_52 = objc_msgSend(v0, "BOOLForKey:", CFSTR("com.apple.RealityIO.disableSubd")) ^ 1;

}

void sub_230161110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSession::ImportSession(uint64_t a1, unsigned int **a2, uint64_t a3, const void **a4, int a5, uint64_t a6, int a7, char a8)
{
  realityio *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  char v19;
  unsigned int *v21[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24FDFB710;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 60) = a7;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 850045863;
  *(_QWORD *)(a1 + 160) = 850045863;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = a8;
  *(_BYTE *)(a1 + 273) = 1;
  v13 = (realityio *)_os_feature_enabled_impl();
  if ((_DWORD)v13)
  {
    v14 = *(NSObject **)realityio::logObjects(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21[0]) = 0;
      _os_log_impl(&dword_22FF26000, v14, OS_LOG_TYPE_DEFAULT, "ImportSession forced to TargetBasedBuilderDirtying mode due to \"RealityIO/TargetBasedBuilderDirtying\" FeatureFlag", (uint8_t *)v21, 2u);
    }
    goto LABEL_8;
  }
  if (a5 == 2)
  {
LABEL_8:
    v17 = operator new();
    v21[0] = *a2;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v21);
    realityio::ImportSessionV1::ImportSessionV1(v17, v21, a3, a1, a4, 2);
    goto LABEL_10;
  }
  if (a5 == 1)
  {
    v15 = operator new();
    v21[0] = *a2;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v21);
    realityio::ImportSessionV2::ImportSessionV2(v15, v21, a3, a1, a4);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v21);
    v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v15;
    if (!v16)
      goto LABEL_12;
    goto LABEL_11;
  }
  v17 = operator new();
  v21[0] = *a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v21);
  realityio::ImportSessionV1::ImportSessionV1(v17, v21, a3, a1, a4, a5);
LABEL_10:
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v21);
  v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  if (v16)
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
LABEL_12:
  v18 = atomic_load((unsigned __int8 *)qword_255E54D88);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(qword_255E54D88))
  {
    _MergedGlobals_52 = RELinkedOnOrAfterFall2024OSVersions();
    __cxa_guard_release(qword_255E54D88);
  }
  v19 = _MergedGlobals_52;
  if (_MergedGlobals_52)
  {
    if (qword_255E54D80 != -1)
      dispatch_once(&qword_255E54D80, &__block_literal_global_33);
    v19 = _MergedGlobals_52 != 0;
  }
  *(_BYTE *)(a1 + 273) = v19;
  return a1;
}

void sub_230161418(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::mutex *v3;
  std::mutex *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  __cxa_guard_abort(qword_255E54D88);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *(_QWORD **)(v1 + 256));
  std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::destroy(*(_QWORD **)(v1 + 232));
  std::mutex::~mutex(v4);
  v8 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 152) = 0;
  if (v8)
    realityio::ImportSession::SessionMeshAssetCacheDeleter::operator()(v7, v8);
  std::mutex::~mutex(v3);
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(v2, *(_QWORD **)(v1 + 72));
  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  v9 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

uint64_t *realityio::ImportSession::deduplicateMeshAsset(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, int a4)
{
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v8 = (std::mutex *)(a1 + 160);
  std::mutex::lock((std::mutex *)(a1 + 160));
  v9 = *(_QWORD *)(a1 + 152);
  if (!v9)
  {
    v9 = operator new();
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_QWORD *)v9 = v9 + 8;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 24) = v9 + 32;
    v10 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v9;
    if (v10)
    {
      realityio::ImportSession::SessionMeshAssetCacheDeleter::operator()(v9, v10);
      v9 = *(_QWORD *)(a1 + 152);
    }
  }
  v11 = realityio::SessionMeshAssetCache::deduplicateMeshAsset((uint64_t **)v9, a2, a3, a4);
  std::mutex::unlock(v8);
  return v11;
}

void sub_2301615CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *realityio::SessionMeshAssetCache::deduplicateMeshAsset(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, int a4)
{
  const void *CompiledStreamAndRemap;
  const UInt8 *BytePtr;
  CC_LONG Length;
  uint64_t *v11;
  void **v12;
  void **v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t **v20;
  unsigned int v21;
  uint64_t **v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t **v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  CFTypeRef cf;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  CompiledStreamAndRemap = (const void *)REAssetCreateCompiledStreamAndRemap();
  cf = CompiledStreamAndRemap;
  if (!CompiledStreamAndRemap)
    goto LABEL_54;
  bzero(&c, 0x68uLL);
  CC_SHA256_Init(&c);
  BytePtr = CFDataGetBytePtr((CFDataRef)CompiledStreamAndRemap);
  Length = CFDataGetLength((CFDataRef)CompiledStreamAndRemap);
  CC_SHA256_Update(&c, BytePtr, Length);
  CC_SHA256_Final(md, &c);
  CFRelease(cf);
  cf = 0;
  v12 = (void **)(a1 + 4);
  v11 = a1[4];
  if (v11)
  {
    while (1)
    {
      while (1)
      {
        v13 = (void **)v11;
        v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 28);
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 28)))break;
        v11 = (uint64_t *)*v13;
        v12 = v13;
        if (!*v13)
          goto LABEL_10;
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v14, a2))
        break;
      v12 = v13 + 1;
      v11 = (uint64_t *)v13[1];
      if (!v11)
        goto LABEL_10;
    }
    v15 = (char *)*v12;
    if (*v12)
      goto LABEL_13;
  }
  else
  {
    v13 = (void **)(a1 + 4);
  }
LABEL_10:
  v15 = (char *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 7, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 8, (_DWORD *)a2 + 1);
  bzero(v15 + 36, 0x20uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = v13;
  *v12 = v15;
  v16 = (uint64_t *)*a1[3];
  v17 = (uint64_t *)v15;
  if (v16)
  {
    a1[3] = v16;
    v17 = (uint64_t *)*v12;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[4], v17);
  a1[5] = (uint64_t *)((char *)a1[5] + 1);
LABEL_13:
  v18 = v45;
  *(_OWORD *)(v15 + 36) = *(_OWORD *)md;
  *(_OWORD *)(v15 + 52) = v18;
  v20 = a1 + 1;
  v19 = a1[1];
  if (v19)
  {
    v21 = md[0];
    v22 = a1 + 1;
    v23 = a1[1];
    do
    {
      v24 = *((unsigned __int8 *)v23 + 32);
      v25 = md[0];
      if (v24 == md[0])
      {
        v26 = 0;
        while (v26 != 31)
        {
          v24 = *((unsigned __int8 *)v23 + v26 + 33);
          v25 = md[++v26];
          if (v24 != v25)
            goto LABEL_19;
        }
        v22 = (uint64_t **)v23;
      }
      else
      {
LABEL_19:
        if (v24 > v25)
          ++v23;
        else
          v22 = (uint64_t **)v23;
      }
      v23 = (uint64_t *)*v23;
    }
    while (v23);
    if (v22 != v20)
    {
      v27 = *((unsigned __int8 *)v22 + 32);
      if (md[0] == v27)
      {
        v28 = 0;
        while (v28 != 31)
        {
          v21 = md[v28 + 1];
          v27 = *((unsigned __int8 *)v22 + v28++ + 33);
          if (v21 != v27)
            goto LABEL_29;
        }
LABEL_55:
        if (a4)
        {
          RERelease();
          a3 = v22[8];
          RERetain();
        }
        else
        {
          a3 = v22[8];
        }
        goto LABEL_54;
      }
LABEL_29:
      if (v21 <= v27)
        goto LABEL_55;
    }
  }
  *(_QWORD *)c.count = a3;
  if (a3)
  {
    RERetain();
    v19 = *v20;
  }
  v29 = a1 + 1;
  if (!v19)
  {
LABEL_47:
    v36 = operator new(0x48uLL);
    v37 = v45;
    v36[2] = *(_OWORD *)md;
    v36[3] = v37;
    *((_QWORD *)v36 + 8) = 0;
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0;
    *((_QWORD *)v36 + 2) = v29;
    *v20 = (uint64_t *)v36;
    v38 = (uint64_t *)**a1;
    v39 = (uint64_t *)v36;
    if (v38)
    {
      *a1 = v38;
      v39 = *v20;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v39);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    goto LABEL_51;
  }
  while (1)
  {
    while (1)
    {
      v29 = (uint64_t **)v19;
      v30 = *((unsigned __int8 *)v19 + 32);
      v31 = md[0];
      v32 = v30;
      if (md[0] == v30)
        break;
LABEL_37:
      if (v31 <= v32)
        goto LABEL_40;
      v19 = *v29;
      v20 = v29;
      if (!*v29)
        goto LABEL_47;
    }
    v33 = 0;
    while (v33 != 31)
    {
      v31 = md[v33 + 1];
      v32 = *((unsigned __int8 *)v29 + v33++ + 33);
      if (v31 != v32)
        goto LABEL_37;
    }
LABEL_40:
    v34 = md[0];
    if (md[0] == v30)
      break;
LABEL_44:
    if (v30 <= v34)
      goto LABEL_50;
    v19 = v29[1];
    if (!v19)
    {
      v20 = v29 + 1;
      goto LABEL_47;
    }
  }
  v35 = 0;
  while (v35 != 31)
  {
    v30 = *((unsigned __int8 *)v29 + v35 + 33);
    v34 = md[++v35];
    if (v30 != v34)
      goto LABEL_44;
  }
LABEL_50:
  v36 = v29;
LABEL_51:
  v40 = *((_QWORD *)v36 + 8);
  if (v40 != *(_QWORD *)c.count)
  {
    *((_QWORD *)v36 + 8) = *(_QWORD *)c.count;
    *(_QWORD *)c.count = v40;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&c);
LABEL_54:
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&cf);
  return a3;
}

void sub_2301619E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

void realityio::ImportSession::clearMeshAsset(realityio::ImportSession *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)((char *)this + 160);
  std::mutex::lock((std::mutex *)((char *)this + 160));
  v5 = *((_QWORD *)this + 19);
  if (v5)
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>>>::__erase_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t **)(v5 + 24), a2);
  std::mutex::unlock(v4);
}

void sub_230161A64(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

float realityio::ImportSession::getWorldScaleAtPrim(realityio::ImportSession *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  double v2;
  double v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  float v8;
  float v9;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[4];
  _BYTE v14[48];

  *(_QWORD *)&v13[0] = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v13);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v11, (uint64_t *)v13);
  pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
  v3 = v2;
  v4 = v12;
  if (v12)
  {
    v5 = (unsigned int *)(v12 + 8);
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)v13);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)v14);
  memset(v13, 0, sizeof(v13));
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform();
  MEMORY[0x2348B199C](v13, &v11);
  LODWORD(v12) = 0;
  v11 = 0;
  REDecomposeMatrix();
  v8 = v3;
  v9 = *((float *)&v11 + 1) * v8;
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::~__hash_table((uint64_t)v14);
  return v9;
}

void sub_230161B7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::~__hash_table(v1 - 80);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSessionImpl::ImportSessionImpl(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const void **a5)
{
  const void *v9;
  pxrInternal__aapl__pxrReserved__::UsdStage *v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  const std::string *Identifier;
  std::string::size_type size;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  realityio *v17;
  void *v18;
  void *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string *v22;
  size_t v23;
  std::string *p_s1;
  std::string *v25;
  std::string::size_type v26;
  pxrInternal__aapl__pxrReserved__::UsdStage *v27;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v28;
  uint64_t v29;
  __int128 v30;
  std::string::size_type v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string *v39;
  std::string *v40;
  void *v41;
  pxrInternal__aapl__pxrReserved__::UsdStage *v42;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v43;
  const std::string *v44;
  std::string::size_type v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  realityio::BuilderRegistry *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  void **v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string __s1;
  std::string v72;
  char v73;
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24FDFB738;
  v9 = *a5;
  *(_QWORD *)(a1 + 8) = *a5;
  if (v9)
    CFRetain(v9);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  v62 = (void **)(a1 + 136);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 184) = 850045863;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 264) = a4;
  *(_BYTE *)(a1 + 272) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 280), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 304), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 328), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 352), "");
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v10);
  v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v72);
  Identifier = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
  std::string::operator=((std::string *)(a1 + 280), Identifier);
  size = v72.__r_.__value_.__l.__size_;
  if (v72.__r_.__value_.__l.__size_)
  {
    v14 = (unsigned int *)(v72.__r_.__value_.__l.__size_ + 8);
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
  }
  *(_OWORD *)&v72.__r_.__value_.__r.__words[1] = 0uLL;
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72.__r_.__value_.__l.__size_;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v72, (char *)v72.__r_.__value_.__l.__size_);
  realityio::ImportSessionInit(v17);
  objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "resourcePath");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19)
  {
    std::string::basic_string[abi:ne180100]<0>(&v72, (char *)objc_msgSend(objc_retainAutorelease(v19), "UTF8String"));
    LOBYTE(v20) = *((_BYTE *)&v72.__r_.__value_.__s + 23);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = v72.__r_.__value_.__l.__size_;
      if (!v72.__r_.__value_.__l.__size_)
      {
        v26 = 0;
        goto LABEL_33;
      }
    }
    else
    {
      if (!*((_BYTE *)&v72.__r_.__value_.__s + 23))
      {
LABEL_30:
        v70 = v72;
        goto LABEL_34;
      }
      v21 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    }
    v22 = (std::string *)v72.__r_.__value_.__r.__words[0];
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v72;
    if (v22->__r_.__value_.__s.__data_[v21 - 1] != 47)
    {
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      else
        v23 = v72.__r_.__value_.__l.__size_;
      p_s1 = &__s1;
      std::string::basic_string[abi:ne180100]((uint64_t)&__s1, v23 + 1);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      if (v23)
      {
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v72;
        else
          v25 = (std::string *)v72.__r_.__value_.__r.__words[0];
        memmove(p_s1, v25, v23);
      }
      *(_WORD *)((char *)&p_s1->__r_.__value_.__l.__data_ + v23) = 47;
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      v72 = __s1;
      v20 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    if ((v20 & 0x80) == 0)
      goto LABEL_30;
    v26 = v72.__r_.__value_.__l.__size_;
LABEL_33:
    std::string::__init_copy_ctor_external(&v70, v72.__r_.__value_.__l.__data_, v26);
LABEL_34:
    v27 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v27);
    v28 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v68);
    v29 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v28);
    if (*(char *)(v29 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)v29, *(_QWORD *)(v29 + 8));
    }
    else
    {
      v30 = *(_OWORD *)v29;
      v69.__r_.__value_.__r.__words[2] = *(_QWORD *)(v29 + 16);
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v30;
    }
    pxrInternal__aapl__pxrReserved__::TfStringGetCommonPrefix();
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    v31 = v68.__r_.__value_.__l.__size_;
    if (v68.__r_.__value_.__l.__size_)
    {
      v32 = (unsigned int *)(v68.__r_.__value_.__l.__size_ + 8);
      do
      {
        v33 = __ldxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v31 + 8))(v31);
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    v35 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    v36 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v37 = __s1.__r_.__value_.__l.__size_;
    v38 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = v72.__r_.__value_.__l.__size_;
    if (v37 == v38)
    {
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v72;
      else
        v39 = (std::string *)v72.__r_.__value_.__r.__words[0];
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        v41 = (void *)__s1.__r_.__value_.__r.__words[0];
        if (memcmp(__s1.__r_.__value_.__l.__data_, v39, __s1.__r_.__value_.__l.__size_))
          goto LABEL_75;
      }
      else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      {
        v40 = &__s1;
        while (v40->__r_.__value_.__s.__data_[0] == v39->__r_.__value_.__s.__data_[0])
        {
          v40 = (std::string *)((char *)v40 + 1);
          v39 = (std::string *)((char *)v39 + 1);
          if (!--v35)
            goto LABEL_62;
        }
        goto LABEL_73;
      }
LABEL_62:
      v42 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v42);
      v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v66);
      v44 = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v43);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v45 = __s1.__r_.__value_.__l.__size_;
      std::string::basic_string(&v68, v44, v45, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v73);
      if (*(char *)(a1 + 159) < 0)
        operator delete(*v62);
      *(_OWORD *)v62 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 152) = *((_QWORD *)&v68.__r_.__value_.__l + 2);
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = 0;
      v68.__r_.__value_.__s.__data_[0] = 0;
      v46 = v67;
      if (v67)
      {
        v47 = (unsigned int *)(v67 + 8);
        do
        {
          v48 = __ldxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      }
      v36 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
LABEL_73:
    if ((v36 & 0x80) == 0)
      goto LABEL_76;
    v41 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_75:
    operator delete(v41);
LABEL_76:
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)(a1 + 16) = a3;
  RERetain();
  v50 = operator new();
  v65 = (unsigned int *)*a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v65);
  realityio::UsdStageStateTracker::UsdStageStateTracker(v50, &v65);
  *(_QWORD *)(a1 + 32) = v50;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v65);
  v51 = *(_QWORD *)(a1 + 32);
  v52 = (_QWORD *)operator new();
  v64 = (unsigned int *)*a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v64);
  v75 = 0;
  v53 = operator new(0x20uLL);
  *v53 = &off_24FDFB878;
  v53[1] = realityio::UsdStageStateTracker::updateWithStageDelta;
  v53[2] = 0;
  v53[3] = v51;
  v75 = v53;
  realityio::UsdStageObserver::UsdStageObserver(v52, (uint64_t *)&v64, (uint64_t)v74);
  *(_QWORD *)(a1 + 24) = v52;
  v54 = v75;
  if (v75 == v74)
  {
    v55 = 4;
    v54 = v74;
  }
  else
  {
    if (!v75)
      goto LABEL_83;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_83:
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v64);
  v56 = (realityio::BuilderRegistry *)operator new();
  realityio::BuilderRegistry::BuilderRegistry(v56);
  *(_QWORD *)(a1 + 56) = v56;
  v57 = operator new();
  v58 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)v57 = 0u;
  *(_OWORD *)(v57 + 16) = 0u;
  *(_DWORD *)(v57 + 32) = 1065353216;
  *(_OWORD *)(v57 + 40) = 0u;
  *(_OWORD *)(v57 + 56) = 0u;
  *(_DWORD *)(v57 + 72) = 1065353216;
  *(_OWORD *)(v57 + 80) = 0u;
  *(_OWORD *)(v57 + 96) = 0u;
  *(_DWORD *)(v57 + 112) = 1065353216;
  *(_QWORD *)(v57 + 120) = v58;
  if (v58)
    RERetain();
  *(_QWORD *)(v57 + 128) = a4;
  v59 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v57;
  if (v59)
    std::default_delete<realityio::BuilderDependencyDAG>::operator()[abi:ne180100](v59);
  v63 = 0;
  realityio::ImportSessionImpl::setMissingMaterial(a1, &v63);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v63);
  do

  return a1;
}

void sub_23016229C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, const void **a9, void **a10, void **a11, void **a12, std::mutex *a13, uint64_t a14, _QWORD **a15, void **a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void **v52;
  void *v53;
  uint64_t v54;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;

  if (*(char *)(v54 - 137) < 0)
    operator delete(*(void **)(v54 - 160));

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>>>::destroy(*(_QWORD **)(v49 + 384));
  if (*(char *)(v49 + 375) < 0)
    operator delete(*a10);
  if (*(char *)(v49 + 351) < 0)
    operator delete(*a11);
  if (*(char *)(v49 + 327) < 0)
    operator delete(*a12);
  if (*(char *)(v49 + 303) < 0)
    operator delete(*v52);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v51);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(v50 + 208));
  std::mutex::~mutex(a13);
  std::__tree<std::string>::destroy(a14, *(char **)(v49 + 168));
  if (*(char *)(v49 + 159) < 0)
    operator delete(*a16);
  v56 = *a15;
  if (*a15 == (_QWORD *)(v50 + 64))
  {
    v57 = 4;
    v56 = (_QWORD *)(v50 + 64);
  }
  else
  {
    if (!v56)
      goto LABEL_18;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_18:
  v58 = *(_QWORD **)(v49 + 96);
  if (v58 == (_QWORD *)(v50 + 32))
  {
    v59 = 4;
    v58 = (_QWORD *)(v50 + 32);
  }
  else
  {
    if (!v58)
      goto LABEL_23;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_23:
  v60 = *(_QWORD *)(v49 + 64);
  *(_QWORD *)(v49 + 64) = 0;
  if (v60)
    std::default_delete<realityio::BuilderDependencyDAG>::operator()[abi:ne180100](v60);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v50);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(a9);
  _Unwind_Resume(a1);
}

uint64_t *realityio::ImportSessionImpl::setMissingMaterial(uint64_t a1, uint64_t *a2)
{
  uint64_t ServiceLocator;
  uint64_t AssetHandle;
  uint64_t v6;
  uint64_t v7;

  if (*a2)
    return realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)(a1 + 248), a2);
  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  AssetHandle = REAssetManagerCreateAssetHandle();
  v7 = AssetHandle;
  if (AssetHandle)
    RERetain();
  v6 = *(_QWORD *)(a1 + 248);
  if (v6 != AssetHandle)
  {
    *(_QWORD *)(a1 + 248) = AssetHandle;
    v7 = v6;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v7);
  return (uint64_t *)RERelease();
}

void realityio::ImportSessionImpl::~ImportSessionImpl(realityio::ImportSessionImpl *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  realityio::ImportSessionImpl *v10;
  uint64_t v11;
  realityio::ImportSessionImpl *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)this = off_24FDFB738;
  v2 = (char *)this + 40;
  v15 = 0uLL;
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)this + 40, &v15);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *((_QWORD *)this + 3);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 7);
  if (v8)
  {
    *(_QWORD *)&v15 = v8 + 136;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(v8 + 112, *(_QWORD **)(v8 + 120));
    *(_QWORD *)&v15 = v8 + 88;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(v8 + 64, *(_QWORD **)(v8 + 72));
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::~__hash_table(v8 + 24);
    *(_QWORD *)&v15 = v8;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    MEMORY[0x2348B4E1C](v8, 0x10A0C409217B224);
  }
  RERelease();
  do
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>>>::destroy(*((_QWORD **)this + 48));
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  if (*((char *)this + 327) < 0)
    operator delete(*((void **)this + 38));
  if (*((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)this + 32);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)this + 31);
  std::mutex::~mutex((std::mutex *)((char *)this + 184));
  std::__tree<std::string>::destroy((uint64_t)this + 160, *((char **)this + 21));
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  v10 = (realityio::ImportSessionImpl *)*((_QWORD *)this + 16);
  if (v10 == (realityio::ImportSessionImpl *)((char *)this + 104))
  {
    v11 = 4;
    v10 = (realityio::ImportSessionImpl *)((char *)this + 104);
  }
  else
  {
    if (!v10)
      goto LABEL_29;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_29:
  v12 = (realityio::ImportSessionImpl *)*((_QWORD *)this + 12);
  if (v12 == (realityio::ImportSessionImpl *)((char *)this + 72))
  {
    v13 = 4;
    v12 = (realityio::ImportSessionImpl *)((char *)this + 72);
  }
  else
  {
    if (!v12)
      goto LABEL_34;
    v13 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_34:
  v14 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
    std::default_delete<realityio::BuilderDependencyDAG>::operator()[abi:ne180100](v14);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef((const void **)this + 1);
}

void realityio::ImportSessionImpl::queueDedupingAssetForDeferredLoad(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 16) + 40) + 488);
    v3 = a2[1];
    *(_QWORD *)&v9 = *a2;
    *((_QWORD *)&v9 + 1) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    realityio::AssetLoadTracker::add(v2, &v9);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2301629AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSession::registerAssetDescriptorHandler()
{
  uint64_t ServiceLocator;
  char **v2;
  char *v3[2];

  v3[0] = 0;
  v3[1] = 0;
  v2 = v3;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v2, v3[0]);
  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  REAssetProviderBuilderCreate();
  REAssetProviderBuilderSetUserData();
  REAssetProviderBuilderSetREAssetRefLoadCallback();
  REAssetManagerRegisterAssetProviderBuilder();
  RERelease();
  return 1;
}

void sub_230162A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15)
{
  std::__tree<std::string>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9realityio13ImportSession30registerAssetDescriptorHandlerEP8REEngine_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  void *v4;
  int v5;
  void **v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  BOOL v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  BOOL v27;
  void *v28;
  void *v29;
  id v30;
  realityio *v31;
  NSObject *v32;
  uint64_t v33;
  void *v35;
  void *v36;
  id v37;
  std::string *p_p;
  void **v39;
  size_t v40;
  std::string *p_buf;
  void **v42;
  std::string *v43;
  std::string::size_type size;
  std::string *v45;
  std::string::size_type v46;
  char v47;
  std::string *v48;
  _anonymous_namespace_ *v49;
  _anonymous_namespace_ *v50;
  uint64_t v51;
  const void *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  const void *v60;
  unint64_t *v61;
  unint64_t v62;
  NSObject *v63;
  std::string *v64;
  _anonymous_namespace_ *v65;
  _anonymous_namespace_ *v66;
  realityio *v67;
  uint64_t ServiceLocator;
  NSObject *v69;
  void **v70;
  std::string *data;
  id v72;
  uint64_t v74;
  id v75;
  int v76;
  int v77;
  int v78;
  int v79;
  std::string __p;
  std::string v81;
  void *v82[2];
  char v83;
  std::string v84;
  void *v85[2];
  unsigned __int8 v86;
  int v87;
  int v88;
  const void *v89;
  std::string v90;
  uint64_t v91;
  unsigned int *v92;
  int v93;
  int v94;
  std::string *v95;
  std::string buf;
  std::string v97;
  _BYTE v98[80];
  std::string v99[2];
  __int128 v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v74 = *(_QWORD *)(a1 + 32);
  REAssetProviderCompiledDataLoadContextGetDescriptor();
  v75 = objc_retainAutorelease((id)REAssetDescriptorCopyData());
  std::string::basic_string[abi:ne180100]<0>(v82, (char *)objc_msgSend(v75, "bytes"));
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v4 = (void *)MEMORY[0x24BDD17C8];
  v5 = v83;
  v6 = (void **)v82[0];
  v7 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v5 >= 0)
    v8 = v82;
  else
    v8 = v6;
  objc_msgSend(v4, "stringWithCString:encoding:", v8, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "URLWithString:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
  {
    objc_msgSend(v10, "scheme");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      objc_msgSend(v11, "host");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13)
      {
        objc_msgSend(v11, "path");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v14 == 0;

        if (!v15)
        {
          objc_msgSend(v11, "scheme");
          v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(&v90, (char *)objc_msgSend(v16, "UTF8String"));

          objc_msgSend(v11, "host");
          v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(v85, (char *)objc_msgSend(v17, "UTF8String"));

          objc_msgSend(v11, "path");
          v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(&v84, (char *)objc_msgSend(v18, "UTF8String"));

          MEMORY[0x2348B26F8](&buf, &v84);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v78, (int *)&buf);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v79);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf);
          objc_msgSend(MEMORY[0x24BDD1808], "componentsWithURL:resolvingAgainstBaseURL:", v11, 0);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = (void *)objc_opt_new();
          v100 = 0u;
          memset(v99, 0, sizeof(v99));
          objc_msgSend(v19, "queryItems");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", v99, &buf, 16);
          if (v22)
          {
            v23 = *(_QWORD *)v99[0].__r_.__value_.__r.__words[2];
            do
            {
              for (i = 0; i != v22; ++i)
              {
                if (*(_QWORD *)v99[0].__r_.__value_.__r.__words[2] != v23)
                  objc_enumerationMutation(v21);
                v25 = *(void **)(v99[0].__r_.__value_.__l.__size_ + 8 * i);
                objc_msgSend(v25, "value");
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                v27 = v26 == 0;

                if (!v27)
                {
                  objc_msgSend(v25, "value");
                  v28 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v25, "name");
                  v29 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v20, "setObject:forKey:", v28, v29);

                }
              }
              v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", v99, &buf, 16);
            }
            while (v22);
          }

          objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("bundlepath"));
          v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(v99, (char *)objc_msgSend(v30, "UTF8String"));

          MEMORY[0x2348B1B64](&buf, v99);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = buf;
          *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
          buf.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v81.__r_.__value_.__l.__data_);
            v81 = v97;
            *((_BYTE *)&v97.__r_.__value_.__s + 23) = 0;
            v97.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
          }
          else
          {
            v81 = v97;
          }
          if (SHIBYTE(v99[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99[0].__r_.__value_.__l.__data_);

          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v84.__r_.__value_.__l.__data_);
          if ((char)v86 < 0)
            operator delete(v85[0]);
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v90.__r_.__value_.__l.__data_);

          objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "resourcePath");
          v36 = (void *)objc_claimAutoreleasedReturnValue();

          v37 = objc_retainAutorelease(v36);
          std::string::basic_string[abi:ne180100]<0>(v85, (char *)objc_msgSend(v37, "UTF8String"));
          memset(&v84, 0, sizeof(v84));
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!__p.__r_.__value_.__l.__size_)
              goto LABEL_129;
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
              goto LABEL_129;
            p_p = &__p;
          }
          if (p_p->__r_.__value_.__s.__data_[0] == 47)
          {
            std::string::operator=(&v84, &__p);
          }
          else
          {
            if ((v86 & 0x80u) == 0)
              v40 = v86;
            else
              v40 = (size_t)v85[1];
            std::string::basic_string[abi:ne180100]((uint64_t)&buf, v40 + 1);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_buf = &buf;
            else
              p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            if (v40)
            {
              if ((v86 & 0x80u) == 0)
                v42 = v85;
              else
                v42 = (void **)v85[0];
              memmove(p_buf, v42, v40);
            }
            *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v40) = 47;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43 = &__p;
            else
              v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
            v45 = std::string::append(&buf, (const std::string::value_type *)v43, size);
            v46 = v45->__r_.__value_.__r.__words[0];
            v99[0].__r_.__value_.__r.__words[0] = v45->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v99[0].__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
            v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
            v45->__r_.__value_.__l.__size_ = 0;
            v45->__r_.__value_.__r.__words[2] = 0;
            v45->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v84.__r_.__value_.__l.__data_);
            v84.__r_.__value_.__r.__words[0] = v46;
            v84.__r_.__value_.__l.__size_ = v99[0].__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v84.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v99[0].__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v84.__r_.__value_.__s + 23) = v47;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
          }
          MEMORY[0x2348B1B70](&buf, &__p, &v84);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = buf;
          *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
          buf.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v81.__r_.__value_.__l.__data_);
            v81 = v97;
            *((_BYTE *)&v97.__r_.__value_.__s + 23) = 0;
            v97.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
          }
          else
          {
            v81 = v97;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(v99, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v99[0] = __p;
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v99[1], v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
          else
            v99[1] = v81;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v76, &v78);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v77, &v79);
          v91 = v74;
          realityio::ImportSession::registerAssetDescriptorHandler();
          v48 = std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>(&buf, (__int128 *)v99, &v76);
          if (v49 != (_anonymous_namespace_ *)&qword_255E54190)
          {
            v20 = (void *)*((_QWORD *)v49 + 11);
            std::__destroy_at[abi:ne180100]<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath> const,REAsset *>,0>((uint64_t)v49 + 32);
            operator delete(v49);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v98);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (v49 == (_anonymous_namespace_ *)&qword_255E54190)
          {
            memset(&v90, 0, sizeof(v90));
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v76);
            pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::GetUnion((pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)&v90, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v93);
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vdeallocate((void **)&v90.__r_.__value_.__l.__data_);
            v90 = buf;
            v95 = &buf;
            memset(&buf, 0, sizeof(buf));
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v93);
            v51 = pxrInternal__aapl__pxrReserved__::TfPathExists();
            if ((v51 & 1) != 0)
            {
              v72 = v37;
              pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked();
              v52 = (const void *)RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &>(&v92);
              v89 = v52;
              if (v52)
                CFRetain(v52);
              LODWORD(buf.__r_.__value_.__l.__data_) = 0;
              LODWORD(v95) = 0;
              v53 = (_QWORD *)RIOImportSessionCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &,REEngine *&,realityio::WrappedCFRef<RIOPxrUsdStage *> &,realityio::ImportSessionImpl::PipelineVersion,realityio::ImportSessionImpl::Threading>(&v92, &v91, &v89, (int *)&buf, (unsigned int *)&v95);
              v54 = v53[4];
              *(_BYTE *)(*(_QWORD *)(v54 + 40) + 224) = 1;
              std::string::operator=((std::string *)(v54 + 136), &v99[1]);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v87, &v76);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v88, &v77);
              v55 = v53[4];
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v93, &v87);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v94, &v88);
              v56 = *(_QWORD *)(v55 + 40);
              v57 = *(std::__shared_weak_count **)(v55 + 48);
              buf.__r_.__value_.__r.__words[0] = v56;
              buf.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
              if (v57)
              {
                p_shared_owners = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldxr(p_shared_owners);
                while (__stxr(v59 + 1, p_shared_owners));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v95, &v93);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v95 + 1, &v94);
              realityio::LiveSceneManager::updateAsset(v56, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v95, 0);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              v60 = v53;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v95);
              if (v57)
              {
                v61 = (unint64_t *)&v57->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v93);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              v37 = v72;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87);
              MEMORY[0x2348B1B64](&buf, v53[4] + 136);
              if (SHIBYTE(v99[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v99[0].__r_.__value_.__l.__data_);
              v99[0] = buf;
              *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
              buf.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v99[1].__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v99[1].__r_.__value_.__l.__data_);
                v99[1] = v97;
                *((_BYTE *)&v97.__r_.__value_.__s + 23) = 0;
                v97.__r_.__value_.__s.__data_[0] = 0;
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf.__r_.__value_.__l.__data_);
              }
              else
              {
                v99[1] = v97;
              }
              v64 = std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>(&buf, (__int128 *)v99, &v76);
              if (v65 != (_anonymous_namespace_ *)&qword_255E54190)
              {
                v20 = (void *)*((_QWORD *)v65 + 11);
                v60 = v53;
                std::__destroy_at[abi:ne180100]<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath> const,REAsset *>,0>((uint64_t)v65 + 32);
                operator delete(v65);
                CFRelease(v53);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v98);
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v97.__r_.__value_.__l.__data_);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              if (v65 == (_anonymous_namespace_ *)&qword_255E54190)
              {
                CFRelease(v60);
                v20 = 0;
              }
              realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&v89);
              pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v92);
            }
            else
            {
              v63 = *(NSObject **)realityio::logObjects((realityio *)v51);
              if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
              {
                if ((v99[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  data = &v99[1];
                else
                  data = (std::string *)v99[1].__r_.__value_.__l.__data_;
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)data;
                _os_log_error_impl(&dword_22FF26000, v63, OS_LOG_TYPE_ERROR, "AssetFile (\"%s\") does not exist", (uint8_t *)&buf, 0xCu);
              }
              v20 = 0;
            }
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v67 = (realityio *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v76);
          if (SHIBYTE(v99[1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99[1].__r_.__value_.__l.__data_);
          if (SHIBYTE(v99[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99[0].__r_.__value_.__l.__data_);
          if (v20)
          {
            ServiceLocator = REEngineGetServiceLocator();
            MEMORY[0x2348B1264](ServiceLocator);
            REAssetManagerReplaceAssetRefDataWith();
            v33 = 1;
LABEL_130:
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v84.__r_.__value_.__l.__data_);
            if ((char)v86 < 0)
              operator delete(v85[0]);

            goto LABEL_24;
          }
          v69 = *(NSObject **)realityio::logObjects(v67);
          if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            v70 = v82;
            if (v83 < 0)
              v70 = (void **)v82[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v70;
            _os_log_error_impl(&dword_22FF26000, v69, OS_LOG_TYPE_ERROR, "Invalid Asset from (\"%s\") in USD AssetDescriptor.", (uint8_t *)&buf, 0xCu);
          }
          if (a4)
          {
            v33 = 0;
            *a4 = CFErrorCreate(0, CFSTR("REAssetRefErrorDomain"), 0, 0);
            goto LABEL_130;
          }
LABEL_129:
          v33 = 0;
          goto LABEL_130;
        }
      }
      else
      {

      }
    }
  }

  v32 = *(NSObject **)realityio::logObjects(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    v39 = v82;
    if (v83 < 0)
      v39 = (void **)v82[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v39;
    _os_log_error_impl(&dword_22FF26000, v32, OS_LOG_TYPE_ERROR, "Invalid URL (\"%s\") in USD AssetDescriptor.", (uint8_t *)&buf, 0xCu);
  }
  v33 = 0;
LABEL_24:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v78);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v83 < 0)
    operator delete(v82[0]);

  return v33;
}

void sub_2301637C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, int a18, __int16 a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,const void *a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;

  std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair((uint64_t)&a61);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&a52);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&a58);
  a58 = (uint64_t)&a53;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a17);
  if (*(char *)(v61 - 129) < 0)
    operator delete(*(void **)(v61 - 152));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a44 < 0)
    operator delete(__p);
  if (a50 < 0)
    operator delete(a45);

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a19);
  if (a31 < 0)
    operator delete(a26);
  if (a25 < 0)
    operator delete(a20);
  if (a38 < 0)
    operator delete(a33);

  _Unwind_Resume(a1);
}

void realityio::ImportSession::assetDescriptorCacheEject(__int128 *a1, _DWORD *a2)
{
  _anonymous_namespace_ *v4;
  std::string v5;
  void *__p;
  char v7;
  uint64_t v8;

  std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>(&v5, a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7 < 0)
    operator delete(__p);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_230163BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::assetDescriptorCache(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      qword_255E54198 = 0;
      qword_255E54190 = 0;
    }
  }
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 48);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

unsigned int **realityio::ImportSession::gatherTextureInfo(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)(a1 + 16);
  v12 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v12);
  v8 = *v7;
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v13, a4);
  realityio::TextureBuilder::gatherTextureInfo((uint64_t *)&v12, a2, a3, v8 + 328, (uint64_t)v13);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v12);
}

void sub_230163D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a9);
  _Unwind_Resume(a1);
}

BOOL realityio::ImportSession::allowUnsupportedTextures(realityio::ImportSession *this)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t Identifier;
  __int128 v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  std::string::size_type size;
  char v16;
  std::string *p_str;
  unsigned __int8 *v18;
  unint64_t v19;
  char *p_p;
  char v21;
  _BYTE *v22;
  _DWORD *v23;
  _BOOL8 v24;
  double v26;
  void *__p;
  unint64_t v28;
  unsigned __int8 v29;
  unsigned int *v30;
  std::string __str;

  v2 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v2 + 272))
  {
    if (*(char *)(v2 + 303) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v2 + 280), *(_QWORD *)(v2 + 288));
    else
      __str = *(std::string *)(v2 + 280);
  }
  else
  {
    v30 = *(unsigned int **)(*(_QWORD *)(v2 + 8) + 16);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v30);
    v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v30);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v3);
    v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v4);
    if (*(char *)(Identifier + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)Identifier, *(_QWORD *)(Identifier + 8));
    }
    else
    {
      v6 = *(_OWORD *)Identifier;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(Identifier + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
    }
    v7 = v28;
    if (v28)
    {
      v8 = (unsigned int *)(v28 + 8);
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(unint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v30);
  }
  v11 = *((unsigned __int8 *)this + 55);
  if (*((char *)this + 55) < 0)
    v12 = *((_QWORD *)this + 5);
  else
    v12 = *((unsigned __int8 *)this + 55);
  v13 = (const void **)((char *)this + 32);
  if (v12)
  {
    if ((v11 & 0x80u) == 0)
      v14 = *((unsigned __int8 *)this + 55);
    else
      v14 = *((_QWORD *)this + 5);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (v14 == size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v11 & 0x80) == 0)
      {
        if (*((_BYTE *)this + 55))
        {
          v18 = (unsigned __int8 *)this + 32;
          while (*v18 == p_str->__r_.__value_.__s.__data_[0])
          {
            ++v18;
            p_str = (std::string *)((char *)p_str + 1);
            if (!--v11)
              goto LABEL_57;
          }
          goto LABEL_34;
        }
LABEL_57:
        v24 = *((_BYTE *)this + 56) != 0;
        if (v16 < 0)
          goto LABEL_55;
        return v24;
      }
      if (!memcmp(*v13, p_str, *((_QWORD *)this + 5)))
        goto LABEL_57;
    }
  }
LABEL_34:
  std::string::operator=((std::string *)((char *)this + 32), &__str);
  pxrInternal__aapl__pxrReserved__::TfGetExtension();
  v19 = 0;
  while ((char)v29 < 0)
  {
    if (v28 <= v19)
    {
      if (v28 == 4)
      {
        v23 = __p;
        goto LABEL_50;
      }
LABEL_51:
      v24 = 1;
      goto LABEL_52;
    }
LABEL_39:
    if ((v29 & 0x80u) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    v21 = __tolower(p_p[v19]);
    if ((v29 & 0x80u) == 0)
      v22 = &__p;
    else
      v22 = __p;
    v22[v19++] = v21;
  }
  if (v19 < v29)
    goto LABEL_39;
  if (v29 != 4)
    goto LABEL_51;
  v23 = &__p;
LABEL_50:
  if (*v23 != 2053403509)
    goto LABEL_51;
  if (*((char *)this + 55) < 0)
    v13 = (const void **)*v13;
  v26 = MEMORY[0x2348B17D4](v13, 0);
  if (v26 < 1688194860.0 || v26 == 520844460.0)
    goto LABEL_51;
  v24 = 0;
LABEL_52:
  *((_BYTE *)this + 56) = v24;
  if ((char)v29 < 0)
    operator delete(__p);
  if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_55:
    operator delete(__str.__r_.__value_.__l.__data_);
  return v24;
}

void sub_230164088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL realityio::ImportSession::reloadAsset(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  std::string *v5;
  __int128 v6;
  _BOOL8 v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  uint64_t v9;
  uint64_t i;
  pxrInternal__aapl__pxrReserved__ *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t *v15;
  char v16;
  uint64_t ServiceLocator;
  uint64_t v18;
  std::string::__raw *v19;
  uint64_t v20;
  const __CFAllocator *v21;
  pxrInternal__aapl__pxrReserved__ *v22;
  const UInt8 *v23;
  CFIndex v24;
  CFDataRef v25;
  int v26;
  std::string *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::string *v35;
  std::string *v36;
  BOOL v37;
  const UInt8 *v38;
  CFIndex v39;
  CFDataRef v40;
  uint64_t v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  __int128 v50;
  uint64_t *v51;
  std::string::size_type v52;
  std::string::size_type *p_size;
  std::string::size_type *v54;
  _QWORD *v55;
  _QWORD *v56;
  std::string *v57;
  __int128 v58;
  std::__shared_weak_count *size;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::string::size_type v66;
  std::string::size_type *v67;
  std::string::size_type *v68;
  uint64_t v69;
  uint64_t *v70;
  _QWORD *v71;
  _QWORD *v72;
  char **v73;
  char *v74[2];
  char **v75;
  char *v76[2];
  void *v77;
  char v78;
  std::string v79;
  CFTypeRef cf;
  const UInt8 *v81;
  std::__shared_weak_count *v82;
  std::string v83;
  std::string *v84;
  std::__shared_weak_count *v85;
  std::string v86;
  uint64_t v87;
  std::string v88;
  std::string v89;
  std::string __p;
  uint64_t v91[3];
  uint64_t v92[3];
  uint64_t v93[3];
  uint64_t v94[3];
  uint64_t v95[3];
  _QWORD v96[6];

  v96[4] = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16)))
  {
    if (a3)
    {
      std::operator+<char>();
      v5 = std::string::append(&v89, " while update is in progress");
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      *a3 = realityio::createError((uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  v8 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArchNormPath();
  pxrInternal__aapl__pxrReserved__::ArGetResolver(v8);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
  std::string::basic_string[abi:ne180100]<0>(&__p, "m4a");
  std::string::basic_string[abi:ne180100]<0>(v91, "caf");
  std::string::basic_string[abi:ne180100]<0>(v92, "ac3");
  std::string::basic_string[abi:ne180100]<0>(v93, "flac");
  std::string::basic_string[abi:ne180100]<0>(v94, "wav");
  std::string::basic_string[abi:ne180100]<0>(v95, "aiff");
  std::string::basic_string[abi:ne180100]<0>(v96, "mp3");
  v9 = 0;
  v76[0] = 0;
  v76[1] = 0;
  v75 = v76;
  do
  {
    std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)&v75, (uint64_t *)v76, (const void **)((char *)&__p.__r_.__value_.__l.__data_ + v9), (uint64_t)&__p + v9);
    v9 += 24;
  }
  while (v9 != 168);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v96[i + 2]) < 0)
      operator delete((void *)v96[i]);
  }
  v74[0] = 0;
  v74[1] = 0;
  v73 = v74;
  v11 = (pxrInternal__aapl__pxrReserved__ *)std::__tree<std::string>::__count_unique<std::string>((uint64_t)&v75, (const void **)&v77);
  if (v11)
  {
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    else
      __p = v79;
    pxrInternal__aapl__pxrReserved__::ArGetResolver(v11);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v89, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    else
      v89 = v79;
    pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    if (!v86.__r_.__value_.__r.__words[0])
    {
      std::operator+<char>();
      v42 = std::string::append(&v88, " could not be opened for reading.");
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      *a3 = realityio::createError((uint64_t)&v89);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      v7 = 0;
      goto LABEL_149;
    }
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v86.__r_.__value_.__l.__data_ + 24))(&v83);
    v38 = (const UInt8 *)v83.__r_.__value_.__r.__words[0];
    if (v83.__r_.__value_.__r.__words[0]
      && (v39 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v86.__r_.__value_.__l.__data_ + 16))(v86.__r_.__value_.__r.__words[0]),
          (v40 = CFDataCreateWithBytesNoCopy(0, v38, v39, (CFAllocatorRef)*MEMORY[0x24BDBD258])) != 0))
    {
      v41 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1 + 248, (const void **)&v79.__r_.__value_.__l.__data_);
      if (a1 + 256 != v41)
      {
        if (*(char *)(v41 + 79) < 0)
          std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)(v41 + 56), *(_QWORD *)(v41 + 64));
        else
          v89 = *(std::string *)(v41 + 56);
        realityio::ImportSession::extraAssets((realityio::ImportSession *)a1, (uint64_t *)&v88);
        v84 = &v89;
        std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v88, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v84);
        std::__tree<std::string>::destroy((uint64_t)&v88, (char *)v88.__r_.__value_.__l.__size_);
        REAudioFileAssetMakeMutableAndReplaceWithData();
        CFRelease(v40);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        v7 = 1;
        goto LABEL_144;
      }
      std::operator+<char>();
      v57 = std::string::append(&v88, " is not in use as an asset.");
      v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      *a3 = realityio::createError((uint64_t)&v89);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      CFRelease(v40);
    }
    else
    {
      std::operator+<char>();
      *a3 = realityio::createError((uint64_t)&v89);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
    }
    v7 = 0;
LABEL_144:
    size = (std::__shared_weak_count *)v83.__r_.__value_.__l.__size_;
    if (v83.__r_.__value_.__l.__size_)
    {
      v60 = (unint64_t *)(v83.__r_.__value_.__l.__size_ + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
LABEL_149:
    v62 = (std::__shared_weak_count *)v86.__r_.__value_.__l.__size_;
    if (v86.__r_.__value_.__l.__size_)
    {
      v63 = (unint64_t *)(v86.__r_.__value_.__l.__size_ + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_156;
  }
  *(_OWORD *)&v88.__r_.__value_.__r.__words[1] = 0uLL;
  v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88.__r_.__value_.__l.__size_;
  pxrInternal__aapl__pxrReserved__::ArchNormPath();
  v12 = *(_QWORD *)(a1 + 232);
  if (!v12)
    goto LABEL_24;
  v13 = a1 + 232;
  do
  {
    v14 = std::less<std::string>::operator()[abi:ne180100](a1 + 240, (const void **)(v12 + 32), (const void **)&v89.__r_.__value_.__l.__data_);
    v15 = (uint64_t *)(v12 + 8);
    if (!v14)
    {
      v15 = (uint64_t *)v12;
      v13 = v12;
    }
    v12 = *v15;
  }
  while (*v15);
  if (v13 == a1 + 232
    || std::less<std::string>::operator()[abi:ne180100](a1 + 240, (const void **)&v89.__r_.__value_.__l.__data_, (const void **)(v13 + 32)))
  {
LABEL_24:
    v16 = 0;
  }
  else
  {
    if ((std::string *)(v13 + 56) != &v88)
    {
      v46 = *(_QWORD **)(v13 + 56);
      v47 = (_QWORD *)(v13 + 64);
      if (v88.__r_.__value_.__r.__words[2])
      {
        v48 = v88.__r_.__value_.__r.__words[0];
        v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88.__r_.__value_.__l.__size_;
        *(_QWORD *)(v88.__r_.__value_.__l.__size_ + 16) = 0;
        *(_OWORD *)&v88.__r_.__value_.__r.__words[1] = 0uLL;
        if (*(_QWORD *)(v48 + 8))
          v49 = *(_QWORD *)(v48 + 8);
        else
          v49 = v48;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
        __p.__r_.__value_.__l.__size_ = v49;
        __p.__r_.__value_.__r.__words[2] = v49;
        if (!v49
          || (__p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next(v49),
              v46 == v47))
        {
          v56 = v46;
        }
        else
        {
          do
          {
            std::string::operator=((std::string *)(v49 + 32), (const std::string *)(v46 + 4));
            std::string::operator=((std::string *)(v49 + 56), (const std::string *)(v46 + 7));
            std::string::operator=((std::string *)(v49 + 80), (const std::string *)(v46 + 10));
            v50 = *(_OWORD *)(v46 + 13);
            *(_WORD *)(v49 + 120) = *((_WORD *)v46 + 60);
            *(_OWORD *)(v49 + 104) = v50;
            std::string::operator=((std::string *)(v49 + 128), (const std::string *)(v46 + 16));
            v51 = (uint64_t *)__p.__r_.__value_.__r.__words[2];
            v52 = v88.__r_.__value_.__l.__size_;
            p_size = &v88.__r_.__value_.__l.__size_;
            v54 = &v88.__r_.__value_.__l.__size_;
            if (v88.__r_.__value_.__l.__size_)
            {
              do
              {
                while (1)
                {
                  p_size = (std::string::size_type *)v52;
                  if (!realityio::TextureImportOperationSettings::operator<((uint64_t)(v51 + 4), v52 + 32))
                    break;
                  v52 = *p_size;
                  v54 = p_size;
                  if (!*p_size)
                    goto LABEL_120;
                }
                v52 = p_size[1];
              }
              while (v52);
              v54 = p_size + 1;
            }
LABEL_120:
            *v51 = 0;
            v51[1] = 0;
            v51[2] = (uint64_t)p_size;
            *v54 = (std::string::size_type)v51;
            if (*(_QWORD *)v88.__r_.__value_.__l.__data_)
            {
              v88.__r_.__value_.__r.__words[0] = *(_QWORD *)v88.__r_.__value_.__l.__data_;
              v51 = (uint64_t *)*v54;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v88.__r_.__value_.__l.__size_, v51);
            ++v88.__r_.__value_.__r.__words[2];
            v49 = __p.__r_.__value_.__l.__size_;
            __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next(__p.__r_.__value_.__l.__size_);
            v55 = (_QWORD *)v46[1];
            if (v55)
            {
              do
              {
                v56 = v55;
                v55 = (_QWORD *)*v55;
              }
              while (v55);
            }
            else
            {
              do
              {
                v56 = (_QWORD *)v46[2];
                v37 = *v56 == (_QWORD)v46;
                v46 = v56;
              }
              while (!v37);
            }
            if (!v49)
              break;
            v46 = v56;
          }
          while (v56 != v47);
        }
        std::__tree<realityio::TextureImportOperationSettings>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&__p);
        v46 = v56;
      }
      if (v46 != v47)
      {
        do
        {
          std::__tree<realityio::TextureImportOperationSettings>::__construct_node<realityio::TextureImportOperationSettings const&>((uint64_t)&v88, (const realityio::TextureImportOperationSettings *)(v46 + 4), (uint64_t)&__p);
          v66 = v88.__r_.__value_.__l.__size_;
          v67 = &v88.__r_.__value_.__l.__size_;
          v68 = &v88.__r_.__value_.__l.__size_;
          if (v88.__r_.__value_.__l.__size_)
          {
            v69 = __p.__r_.__value_.__r.__words[0] + 32;
            do
            {
              while (1)
              {
                v67 = (std::string::size_type *)v66;
                if (!realityio::TextureImportOperationSettings::operator<(v69, v66 + 32))
                  break;
                v66 = *v67;
                v68 = v67;
                if (!*v67)
                  goto LABEL_171;
              }
              v66 = v67[1];
            }
            while (v66);
            v68 = v67 + 1;
          }
LABEL_171:
          v70 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          *(_QWORD *)__p.__r_.__value_.__l.__data_ = 0;
          v70[1] = 0;
          v70[2] = (uint64_t)v67;
          *v68 = (std::string::size_type)v70;
          if (*(_QWORD *)v88.__r_.__value_.__l.__data_)
          {
            v88.__r_.__value_.__r.__words[0] = *(_QWORD *)v88.__r_.__value_.__l.__data_;
            v70 = (uint64_t *)*v68;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v88.__r_.__value_.__l.__size_, v70);
          ++v88.__r_.__value_.__r.__words[2];
          __p.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<realityio::TextureImportOperationSettings,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TextureImportOperationSettings,void *>>>>::reset[abi:ne180100]((uint64_t)&__p, 0);
          v71 = (_QWORD *)v46[1];
          if (v71)
          {
            do
            {
              v72 = v71;
              v71 = (_QWORD *)*v71;
            }
            while (v71);
          }
          else
          {
            do
            {
              v72 = (_QWORD *)v46[2];
              v37 = *v72 == (_QWORD)v46;
              v46 = v72;
            }
            while (!v37);
          }
          v46 = v72;
        }
        while (v72 != v47);
      }
    }
    v16 = 1;
  }
  if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v16 & 1) != 0)
      goto LABEL_27;
LABEL_99:
    if (a3)
    {
      std::operator+<char>();
      v44 = std::string::append(&v89, "is not in use as an asset");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      *a3 = realityio::createError((uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
    }
    v7 = 0;
    goto LABEL_133;
  }
  operator delete(v89.__r_.__value_.__l.__data_);
  if ((v16 & 1) == 0)
    goto LABEL_99;
LABEL_27:
  ServiceLocator = REEngineGetServiceLocator();
  v18 = MEMORY[0x2348B1288](ServiceLocator);
  v19 = (std::string::__raw *)v88.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v88.__r_.__value_.__l.__data_ == &v88.__r_.__value_.__r.__words[1])
  {
    v7 = 1;
  }
  else
  {
    v20 = v18;
    v21 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
    do
    {
      realityio::TextureImportOperationSettings::makeTextureResourceKey((realityio::TextureImportOperationSettings *)&v19[1].__words[1], &v89);
      realityio::ImportSession::getTextureAssetWithKey(a1, (const void **)&v89.__r_.__value_.__l.__data_, &v87);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v86, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
      else
        v86 = v79;
      pxrInternal__aapl__pxrReserved__::ArGetResolver(v22);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
      else
        __p = v79;
      pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v84)
      {
        (*(void (**)(const UInt8 **__return_ptr))(v84->__r_.__value_.__r.__words[0] + 24))(&v81);
        v23 = v81;
        if (v81)
        {
          cf = 0;
          v24 = (*(uint64_t (**)(std::string *))(v84->__r_.__value_.__r.__words[0] + 16))(v84);
          v25 = CFDataCreateWithBytesNoCopy(0, v23, v24, v21);
          if (cf)
            CFRelease(cf);
          cf = v25;
          realityio::TextureBuilder::createStandaloneTextureAssetData(&cf, (realityio::TextureImportOperationSettings *)&v19[1].__words[1], (uint64_t)&__p);
          if (__p.__r_.__value_.__s.__data_[0])
          {
            v26 = MEMORY[0x2348B1420](v20, v87, __p.__r_.__value_.__l.__size_, a3) ^ 1;
          }
          else
          {
            if (a3)
            {
              std::error_code::message(&v83, (const std::error_code *)&__p.__r_.__value_.__r.__words[1]);
              *a3 = realityio::createError((uint64_t)&v83);
              if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v83.__r_.__value_.__l.__data_);
            }
            v26 = 1;
          }
          realityio::Result<realityio::WrappedRERef<RETextureAssetData *>,realityio::DetailedError>::~Result((uint64_t)&__p);
          realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&cf);
        }
        else
        {
          if (a3)
          {
            std::operator+<char>();
            *a3 = realityio::createError((uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          v26 = 1;
        }
        v29 = v82;
        if (v82)
        {
          p_shared_owners = (unint64_t *)&v82->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      else
      {
        if (a3)
        {
          std::operator+<char>();
          v27 = std::string::append(&v83, "could not be opened for reading");
          v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          *a3 = realityio::createError((uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v83.__r_.__value_.__l.__data_);
        }
        v26 = 1;
      }
      v32 = v85;
      if (v85)
      {
        v33 = (unint64_t *)&v85->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v87);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      v7 = v26 == 0;
      if (v26)
        break;
      v35 = (std::string *)v19->__words[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (std::string *)v35->__r_.__value_.__r.__words[0];
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (std::string *)v19->__words[2];
          v37 = v36->__r_.__value_.__r.__words[0] == (_QWORD)v19;
          v19 = (std::string::__raw *)v36;
        }
        while (!v37);
      }
      v19 = (std::string::__raw *)v36;
    }
    while (v36 != (std::string *)&v88.__r_.__value_.__r.__words[1]);
  }
LABEL_133:
  std::__tree<realityio::TextureImportOperationSettings>::destroy((uint64_t)&v88, (_QWORD *)v88.__r_.__value_.__l.__size_);
LABEL_156:
  std::__tree<std::string>::destroy((uint64_t)&v73, v74[0]);
  std::__tree<std::string>::destroy((uint64_t)&v75, v76[0]);
  if (v78 < 0)
    operator delete(v77);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  return v7;
}

void sub_230164D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (a52 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy((uint64_t)&a9, (char *)a10);
  std::__tree<std::string>::destroy((uint64_t)&a12, (char *)a13);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void realityio::ImportSession::insertTextureImportSettingsIntoCache(uint64_t a1, uint64_t a2, const realityio::TextureImportOperationSettings *a3)
{
  uint64_t *v5;
  void *__p[2];
  char v7;
  void **v8;

  pxrInternal__aapl__pxrReserved__::ArchNormPath();
  v8 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 224), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v8);
  std::__tree<realityio::TextureImportOperationSettings>::__emplace_unique_key_args<realityio::TextureImportOperationSettings,realityio::TextureImportOperationSettings const&>((uint64_t **)v5 + 7, (uint64_t)a3, a3);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_230165160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::ImportSession::registerAudioAsset(uint64_t a1, __int128 *a2, std::string *a3, uint64_t a4)
{
  uint64_t *v8;
  void *__p;
  char v10;
  __int128 *v11;

  pxrInternal__aapl__pxrReserved__::ArchNormPath();
  v11 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 248), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  std::string::operator=((std::string *)(v8 + 7), a3);
  realityio::ImportSessionImpl::addOrReplaceExtraAsset(*(_QWORD *)(a1 + 16), (__int128 *)a3, a4);
  if (v10 < 0)
    operator delete(__p);
}

void sub_230165210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t realityio::ImportSessionImpl::getAssetURLFromBundle(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4)
{
  __CFString *Type;
  uint64_t String;
  __int128 v9;
  uint64_t AssetURLFromBundle;
  uint64_t v11;
  __CFString *v12;
  std::string *v13;
  std::string::size_type v14;
  char v15;
  std::string __p;
  _BYTE v18[8];
  void *v19;
  char v20;
  CFTypeRef cf;
  std::string v22;
  _BYTE v23[8];
  void *v24;
  char v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  Type = (__CFString *)REAssetGetType();
  realityio::CFStringCopyUTF8String(Type, (uint64_t)v23);
  if (!v23[0])
    return 0;
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a3);
  if (*(char *)(String + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
  }
  else
  {
    v9 = *(_OWORD *)String;
    v22.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v9;
  }
  v12 = (__CFString *)REAssetCopyMetadataString();
  cf = v12;
  if (v12)
  {
    realityio::CFStringCopyUTF8String(v12, (uint64_t)v18);
    if (!v18[0])
    {
      AssetURLFromBundle = 0;
      goto LABEL_18;
    }
    pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier();
    v13 = std::string::insert(&__p, 0, "/");
    v14 = v13->__r_.__value_.__r.__words[0];
    v26[0] = v13->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    v22.__r_.__value_.__r.__words[0] = v14;
    v22.__r_.__value_.__l.__size_ = v26[0];
    *(std::string::size_type *)((char *)&v22.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v26 + 7);
    *((_BYTE *)&v22.__r_.__value_.__s + 23) = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v18[0] && v20 < 0)
      operator delete(v19);
  }
  AssetURLFromBundle = realityio::ImportSessionImpl::getAssetURLFromBundle(a1, (uint64_t *)&v22, (uint64_t *)&v24, v11, a4);
LABEL_18:
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v23[0] && v25 < 0)
    operator delete(v24);
  return AssetURLFromBundle;
}

void sub_230165408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15 && a21 < 0)
    operator delete(a16);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&a22);
  if (a28 < 0)
    operator delete(a23);
  if (a29)
  {
    if (a35 < 0)
      operator delete(a30);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSessionImpl::getAssetURLFromBundle(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  void *__p[2];
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[11];
  char v30;
  uint64_t v31;

  if (*(char *)(a1 + 327) < 0)
  {
    if (!*(_QWORD *)(a1 + 312))
      return 0;
  }
  else if (!*(_BYTE *)(a1 + 327))
  {
    return 0;
  }
  if (*(char *)(a1 + 375) < 0)
  {
    if (*(_QWORD *)(a1 + 360))
      goto LABEL_7;
    return 0;
  }
  if (!*(_BYTE *)(a1 + 375))
    return 0;
LABEL_7:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"asset://", 8);
  realityio::urlSafeString(a2, __p);
  if (v27 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v27 >= 0)
    v11 = HIBYTE(v27);
  else
    v11 = (uint64_t)__p[1];
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"?", 1);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"bundleId=", 9);
  realityio::urlSafeString((uint64_t *)(a1 + 304), __p);
  if (v27 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if (v27 >= 0)
    v15 = HIBYTE(v27);
  else
    v15 = (uint64_t)__p[1];
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"&", 1);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"bundleName=", 11);
  realityio::urlSafeString((uint64_t *)(a1 + 352), __p);
  if (v27 >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (v27 >= 0)
    v19 = HIBYTE(v27);
  else
    v19 = (uint64_t)__p[1];
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"&", 1);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"assetType=", 10);
  realityio::urlSafeString(a3, __p);
  if (v27 >= 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if (v27 >= 0)
    v23 = HIBYTE(v27);
  else
    v23 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  if (*(char *)(a5 + 23) < 0)
    operator delete(*(void **)a5);
  *(_OWORD *)a5 = *(_OWORD *)__p;
  *(_QWORD *)(a5 + 16) = v27;
  v28[0] = *MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v29[0] = v24;
  v29[1] = MEMORY[0x24BEDB848] + 16;
  if (v30 < 0)
    operator delete((void *)v29[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](&v31);
  return 1;
}

void sub_23016574C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL realityio::ImportSessionImpl::addExtraAsset(uint64_t a1, const void **a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  const void **v11;

  v6 = (std::mutex *)(a1 + 184);
  std::mutex::lock((std::mutex *)(a1 + 184));
  v7 = (uint64_t **)(a1 + 160);
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1 + 160, a2);
  v9 = a1 + 168;
  if (v9 == v8)
  {
    v11 = a2;
    std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v11)[7] = a3;
  }
  std::mutex::unlock(v6);
  return v9 == v8;
}

void sub_230165838(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionImpl::removeExtraAsset(uint64_t a1, const void **a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 184);
  std::mutex::lock((std::mutex *)(a1 + 184));
  std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__erase_unique<std::string>((uint64_t **)(a1 + 160), a2);
  std::mutex::unlock(v4);
}

void sub_230165894(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionImpl::addOrReplaceExtraAsset(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::mutex *v6;
  __int128 *v7;

  v6 = (std::mutex *)(a1 + 184);
  std::mutex::lock((std::mutex *)(a1 + 184));
  v7 = a2;
  std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 160), (const void **)a2, (uint64_t)&std::piecewise_construct, &v7)[7] = a3;
  std::mutex::unlock(v6);
}

void sub_230165914(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *realityio::ImportSessionImpl::setSceneUpdatePassCompletion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _BYTE v5[24];
  _BYTE *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  realityio::LiveSceneManager::setSceneUpdatePassCompletion(v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_2301659BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t realityio::ImportSessionV1::ImportSessionV1(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, const void **a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  __int128 v37;
  __int128 *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v35 = *a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v35);
  realityio::ImportSessionImpl::ImportSessionImpl(a1, (uint64_t *)&v35, a3, a4, a5);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v35);
  *(_QWORD *)a1 = &off_24FDFB7D0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 408) = 1;
  v12 = *(_QWORD *)(a1 + 264);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *a2;
  v15 = (std::__shared_weak_count *)operator new(0x228uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFB938;
  v36 = v14;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v36);
  v17 = v15 + 1;
  realityio::LiveSceneManager::LiveSceneManager((uint64_t)&v15[1], v12, v18, &v36, v13, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), a6 == 2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v36);
  *(_QWORD *)&v37 = v15 + 1;
  *((_QWORD *)&v37 + 1) = v15;
  shared_weak_owners = (std::__shared_weak_count *)v15[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v15[1].__shared_owners_ = (uint64_t)v17;
    v15[1].__shared_weak_owners_ = (uint64_t)v15;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v15[1].__shared_owners_ = (uint64_t)v17;
    v15[1].__shared_weak_owners_ = (uint64_t)v15;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_14:
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](a1 + 40, &v37);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 168) = 0;
  if (a6 == 2)
    *(_BYTE *)(a1 + 409) = 1;
  v30 = REEntityCreate();
  RENetworkComponentGetComponentType();
  *(_QWORD *)&v37 = &off_24FDEEC60;
  v38 = &v37;
  v36 = (unsigned int *)REEntityGetOrAddComponentByClass();
  if (!v38)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(__int128 *, unsigned int **))(*(_QWORD *)v38 + 48))(v38, &v36);
  RENetworkMarkComponentDirty();
  v31 = v38;
  if (v38 == &v37)
  {
    v32 = 4;
    v31 = &v37;
    goto LABEL_26;
  }
  if (v38)
  {
    v32 = 5;
LABEL_26:
    (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
  }
  v34 = v30;
  realityio::WrappedRERef<REAsset *>::operator=((_QWORD *)(a1 + 400), &v34);
  RERelease();
  return a1;
}

void sub_230165CDC(_Unwind_Exception *a1)
{
  realityio::ImportSessionImpl *v1;
  _QWORD *v2;

  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v2);
  realityio::ImportSessionImpl::~ImportSessionImpl(v1);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionV1::~ImportSessionV1(realityio::ImportSessionV1 *this)
{
  *(_QWORD *)this = &off_24FDFB7D0;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)this + 50);
  realityio::ImportSessionImpl::~ImportSessionImpl(this);
}

{
  *(_QWORD *)this = &off_24FDFB7D0;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)this + 50);
  realityio::ImportSessionImpl::~ImportSessionImpl(this);
  JUMPOUT(0x2348B4E1CLL);
}

realityio::LiveSceneManager *realityio::ImportSessionV1::updateLiveScene(realityio::ImportSessionV1 *this, unsigned __int8 a2)
{
  pxrInternal__aapl__pxrReserved__::TraceCollector *Instance;
  pxrInternal__aapl__pxrReserved__::TraceCollector *v5;
  realityio::LiveSceneManager *result;

  Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load((unint64_t *)off_24FDDF010);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
  pxrInternal__aapl__pxrReserved__::TraceCollector::Clear(Instance);
  v5 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load((unint64_t *)off_24FDDF010);
  if (!v5)
    v5 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
  pxrInternal__aapl__pxrReserved__::TraceCollector::SetEnabled(v5);
  result = (realityio::LiveSceneManager *)*((_QWORD *)this + 5);
  if (result)
  {
    if (*((_BYTE *)this + 408))
    {
      *(_BYTE *)(*((_QWORD *)this + 4) + 168) = 1;
      *((_BYTE *)this + 408) = 0;
    }
    return (realityio::LiveSceneManager *)realityio::LiveSceneManager::updateLiveScene(result, a2);
  }
  return result;
}

uint64_t realityio::ImportSessionV1::rootEntity(realityio::ImportSessionV1 *this)
{
  return *((_QWORD *)this + 50);
}

uint64_t realityio::ImportSessionV1::version(realityio::ImportSessionV1 *this)
{
  return 1;
}

uint64_t realityio::ImportSessionV1::gatherFaultRecords(uint64_t result, uint64_t a2)
{
  if (atomic_load((unsigned int *)(*(_QWORD *)(result + 264) + 28)))
    return std::function<void ()(char const*,ExecFault::Type,char const*)>::operator()(a2, (uint64_t)"status", 5, (uint64_t)"session cancelled");
  return result;
}

uint64_t realityio::ImportSessionV1::getEntityAtPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  realityio::BuilderDependencyDAG *v9;
  uint64_t v10;
  std::string::size_type EntityRefFromBuilderPtr;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdStage *v17;
  realityio::BuilderDependencyDAG *v18;
  std::string::size_type v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[4];
  int v41;
  uint64_t v42;
  const void *v43;
  std::__shared_weak_count *v44;

  if (*(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1))
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)a1 + 16))(a1);
  v5 = (_QWORD *)*((_QWORD *)a1 + 48);
  if (!v5)
    goto LABEL_10;
  v6 = (_QWORD *)((char *)a1 + 384);
  do
  {
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4), a2);
    v8 = v5 + 1;
    if (!v7)
    {
      v8 = v5;
      v6 = v5;
    }
    v5 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 != (_QWORD *)((char *)a1 + 384)
    && (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 4)) & 1) == 0)
  {
    return v6[5];
  }
LABEL_10:
  v9 = (realityio::BuilderDependencyDAG *)*((_QWORD *)a1 + 8);
  v10 = realityio::kEntityBuilderIdentifier;
  MEMORY[0x2348B274C](&v38, realityio::kEntityBuilderIdentifier);
  realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(v9, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v38, &v43);
  EntityRefFromBuilderPtr = getEntityRefFromBuilderPtr(v43);
  v12 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if ((v38 & 7) != 0)
  {
    v15 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if (!EntityRefFromBuilderPtr)
  {
    v31 = *(unsigned int **)(*((_QWORD *)a1 + 1) + 16);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v31);
    v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v31);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v17, a2);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v31);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v38))
    {
      while ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v38) & 1) == 0)
      {
        v18 = (realityio::BuilderDependencyDAG *)*((_QWORD *)a1 + 8);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v38, &v31);
        MEMORY[0x2348B274C](&v35, v10);
        realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v35, &v36);
        v19 = getEntityRefFromBuilderPtr(v36);
        v20 = v37;
        if (v37)
        {
          v21 = (unint64_t *)&v37->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        if ((v35 & 7) != 0)
        {
          v23 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
        if (v19)
        {
          EntityRefFromBuilderPtr = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)a1 + 16))(a1);
          goto LABEL_40;
        }
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v38, (uint64_t)&v31);
        LODWORD(v38) = (_DWORD)v31;
        v25 = v32;
        v32 = 0;
        v26 = v39;
        v39 = v25;
        if (v26)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v40, &v33);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v41);
        if ((v42 & 7) != 0)
        {
          v27 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v28 = __ldxr(v27);
          while (__stlxr(v28 - 2, v27));
        }
        v42 = v34;
        v34 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
        if (v32)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
      }
    }
    EntityRefFromBuilderPtr = 0;
LABEL_40:
    if ((v42 & 7) != 0)
    {
      v29 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v40);
    if (v39)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
  }
  return EntityRefFromBuilderPtr;
}

void sub_230166234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

std::string::size_type getEntityRefFromBuilderPtr(const void *a1)
{
  realityio::EntityBuilder *v1;
  std::__shared_weak_count *v2;
  std::mutex *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  const void **v6;
  std::string::size_type size;
  unint64_t *v8;
  unint64_t v9;
  std::string v11[2];
  std::mutex *v12;
  std::__shared_weak_count *v13;

  if (!a1)
    return 0;
  if (!v1)
    return 0;
  v3 = (std::mutex *)*((_QWORD *)v1 + 2);
  v2 = (std::__shared_weak_count *)*((_QWORD *)v1 + 3);
  v12 = v3;
  v13 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = (const void **)realityio::EntityBuilder::kOutputName(v1);
  realityio::Outputs::getValue<realityio::WrappedRERef<REEntity *>>(v3, v6, v11);
  if (v11[0].__r_.__value_.__s.__data_[0])
    size = v11[0].__r_.__value_.__l.__size_;
  else
    size = 0;
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v11);
  if (v2)
  {
    v8 = (unint64_t *)&v2->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return size;
}

void sub_2301663C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSessionV1::dumpDiagnostics(_QWORD *a1, const void **a2)
{
  uint64_t v4;
  unsigned int *v6;

  v6 = *(unsigned int **)(a1[1] + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v6);
  (*(void (**)(_QWORD *))(*a1 + 16))(a1);
  v4 = realityio::internal::dumpDiagnostics(a2, &v6);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v6);
  return v4;
}

void sub_230166450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionV1::gatherStatistics(realityio::ImportSessionV1 *this, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  pxrInternal__aapl__pxrReserved__::TraceCollector *Instance;
  pxrInternal__aapl__pxrReserved__::TraceReporter *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::TraceReporter *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::TraceReporter *v10;
  uint64_t Counters;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *i;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  void *__p;
  unsigned int *v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load((unint64_t *)off_24FDDF010);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::TraceCollector *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
  v4 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)pxrInternal__aapl__pxrReserved__::TraceCollector::SetEnabled(Instance);
  pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter(v4);
  v5 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TraceReporter>::operator->((uint64_t *)&__p);
  MEMORY[0x2348B1CCC](v5);
  v6 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)v26;
  if (v26)
  {
    v7 = v26 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      v6 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TraceReporter *))(*(_QWORD *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter(v6);
  v10 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TraceReporter>::operator->((uint64_t *)&__p);
  Counters = pxrInternal__aapl__pxrReserved__::TraceReporter::GetCounters(v10);
  v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)v26;
  if (v26)
  {
    v13 = v26 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v12 + 8))(v12);
  }
  for (i = *(_QWORD **)(Counters + 16); i; i = (_QWORD *)*i)
  {
    v17 = i[2];
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    v20 = (void *)i[3];
    v21 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    if ((v17 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    v26 = (unsigned int *)&unk_24FDE5B2B;
    __p = v20;
    pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
    if ((v17 & 7) != 0)
    {
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "importSessionVersion");
  v23 = 0x3FF0000000000000;
  v24 = &unk_24FDE5B2B;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v23);
  if (v27 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "importSession:Version");
  v23 = 0x3FF0000000000000;
  v24 = &unk_24FDE5B2B;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v23);
  if (v27 < 0)
    operator delete(__p);
  if (*((_BYTE *)this + 409))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "importSession:TargetDirtying");
    v24 = &unk_24FDE59C3;
    LOBYTE(v23) = 1;
    pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v23);
    if (v27 < 0)
      operator delete(__p);
  }
}

void sub_230166720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL realityio::ImportSessionV1::dumpDependencies(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  const char *v5;
  FILE *v6;
  unint64_t *v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *i;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  void **v36;
  void *j;
  unint64_t v38;
  _QWORD *v39;
  std::string::size_type v40;
  float v41;
  _BOOL8 v42;
  unint64_t v43;
  unint64_t v44;
  int8x8_t prime;
  void *v46;
  void *v47;
  uint64_t v48;
  _QWORD **v49;
  unint64_t v50;
  uint8x8_t v51;
  unint64_t v52;
  uint8x8_t v53;
  uint64_t v54;
  _QWORD *k;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  pxrInternal__aapl__pxrReserved__::TfToken *v64;
  unsigned int *v65;
  unsigned int v66;
  const char *Text;
  std::string *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  unint64_t *v73;
  unint64_t *m;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_weak_owners;
  unint64_t v83;
  _QWORD *v84;
  std::string *v85;
  std::string *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v91;
  unint64_t *v92;
  std::string *v93;
  std::__shared_weak_count *v94;
  void *v95;
  __int128 *v96;
  uint64_t v97;
  std::string v98;
  __int128 v99;
  void *__p[2];
  __int128 v101;
  float v102[4];
  __int128 v103;
  __int128 v104;
  float v105;
  unint64_t *v106;
  unint64_t *v107;
  uint64_t v108;
  std::string v109;
  std::string **v110;
  char __str[8];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 64);
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v91 = (_QWORD *)v4;
  realityio::BuilderDependencyDAG::getAllBuilders(v4, (uint64_t *)&v106);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (const char *)a2;
  else
    v5 = *(const char **)a2;
  v6 = fopen(v5, "w");
  if (!v6)
    goto LABEL_202;
  fwrite("digraph G {\n", 0xCuLL, 1uLL, v6);
  fwrite("node [shape=record];\n", 0x15uLL, 1uLL, v6);
  v103 = 0u;
  v104 = 0u;
  v105 = 1.0;
  *(_OWORD *)__p = 0u;
  v101 = 0u;
  v102[0] = 1.0;
  v7 = v106;
  v92 = v107;
  if (v106 == v107)
    goto LABEL_201;
  v8 = 0;
  do
  {
    v99 = 0uLL;
    v9 = (std::__shared_weak_count *)v7[1];
    if (v9 && (*((_QWORD *)&v99 + 1) = std::__shared_weak_count::lock(v9)) != 0)
    {
      v10 = *v7;
      *(_QWORD *)&v99 = *v7;
    }
    else
    {
      v10 = 0;
    }
    snprintf(__str, 0x400uLL, "node_%i", v8);
    v11 = realityio::WeakBuilderPtrHash::operator()((uint64_t)&v104 + 8, v7);
    v12 = v11;
    v13 = *((_QWORD *)&v103 + 1);
    if (*((_QWORD *)&v103 + 1))
    {
      v14 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v103 + 8));
      v14.i16[0] = vaddlv_u8(v14);
      v15 = v14.u32[0];
      if (v14.u32[0] > 1uLL)
      {
        v2 = v11;
        if (v11 >= *((_QWORD *)&v103 + 1))
          v2 = v11 % *((_QWORD *)&v103 + 1);
      }
      else
      {
        v2 = (*((_QWORD *)&v103 + 1) - 1) & v11;
      }
      v16 = *(uint64_t ***)(v103 + 8 * v2);
      if (v16)
      {
        for (i = *v16; i; i = (uint64_t *)*i)
        {
          v18 = i[1];
          if (v18 == v12)
          {
            if (realityio::WeakBuilderPtrEqual::operator()((uint64_t)&v105, i + 2, v7))
              goto LABEL_52;
          }
          else
          {
            if (v15 > 1)
            {
              if (v18 >= v13)
                v18 %= v13;
            }
            else
            {
              v18 &= v13 - 1;
            }
            if (v18 != v2)
              break;
          }
        }
      }
    }
    v19 = (uint64_t *)operator new(0x38uLL);
    i = v19;
    v95 = v19;
    v96 = &v104;
    *v19 = 0;
    v19[1] = v12;
    v19[2] = *v7;
    v20 = v7[1];
    v19[3] = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 16);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v19[4] = 0;
    v19[5] = 0;
    v19[6] = 0;
    LOBYTE(v97) = 1;
    v23 = (float)(unint64_t)(*((_QWORD *)&v104 + 1) + 1);
    if (!v13 || (float)(v105 * (float)v13) < v23)
    {
      v24 = (v13 & (v13 - 1)) != 0;
      if (v13 < 3)
        v24 = 1;
      v25 = v24 | (2 * v13);
      v26 = vcvtps_u32_f32(v23 / v105);
      if (v25 <= v26)
        v27 = v26;
      else
        v27 = v25;
      std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>((uint64_t)&v103, v27);
      v13 = *((_QWORD *)&v103 + 1);
      if ((*((_QWORD *)&v103 + 1) & (*((_QWORD *)&v103 + 1) - 1)) != 0)
      {
        if (v12 >= *((_QWORD *)&v103 + 1))
          v2 = v12 % *((_QWORD *)&v103 + 1);
        else
          v2 = v12;
      }
      else
      {
        v2 = (*((_QWORD *)&v103 + 1) - 1) & v12;
      }
    }
    v28 = v103;
    v29 = *(uint64_t **)(v103 + 8 * v2);
    if (v29)
    {
      *i = *v29;
LABEL_50:
      *v29 = (uint64_t)i;
      goto LABEL_51;
    }
    *i = v104;
    *(_QWORD *)&v104 = i;
    *(_QWORD *)(v28 + 8 * v2) = &v104;
    if (*i)
    {
      v30 = *(_QWORD *)(*i + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v30 >= v13)
          v30 %= v13;
      }
      else
      {
        v30 &= v13 - 1;
      }
      v29 = (uint64_t *)(v103 + 8 * v30);
      goto LABEL_50;
    }
LABEL_51:
    v95 = 0;
    ++*((_QWORD *)&v104 + 1);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v95);
LABEL_52:
    MEMORY[0x2348B4AD4](i + 4, __str);
    std::string::basic_string[abi:ne180100]<0>(&v109, __str);
    v31 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v101 + 8, (uint64_t)&v109);
    v32 = v31;
    v33 = (unint64_t)__p[1];
    if (__p[1])
    {
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v34.i16[0] = vaddlv_u8(v34);
      v35 = v34.u32[0];
      if (v34.u32[0] > 1uLL)
      {
        v2 = v31;
        if ((void *)v31 >= __p[1])
          v2 = v31 % (unint64_t)__p[1];
      }
      else
      {
        v2 = ((unint64_t)__p[1] - 1) & v31;
      }
      v36 = (void **)*((_QWORD *)__p[0] + v2);
      if (v36)
      {
        for (j = *v36; j; j = *(void **)j)
        {
          v38 = *((_QWORD *)j + 1);
          if (v38 == v32)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v102, (unsigned __int8 *)j + 16, (unsigned __int8 *)&v109) & 1) != 0)goto LABEL_124;
          }
          else
          {
            if (v35 > 1)
            {
              if (v38 >= v33)
                v38 %= v33;
            }
            else
            {
              v38 &= v33 - 1;
            }
            if (v38 != v2)
              break;
          }
        }
      }
    }
    v39 = operator new(0x38uLL);
    v95 = v39;
    v96 = &v101;
    *v39 = 0;
    v39[1] = v32;
    *((_OWORD *)v39 + 1) = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
    v40 = v109.__r_.__value_.__r.__words[2];
    memset(&v109, 0, sizeof(v109));
    v39[5] = 0;
    v39[6] = 0;
    v39[4] = v40;
    LOBYTE(v97) = 1;
    v41 = (float)(unint64_t)(*((_QWORD *)&v101 + 1) + 1);
    if (!v33 || (float)(v102[0] * (float)v33) < v41)
    {
      v42 = (v33 & (v33 - 1)) != 0;
      if (v33 < 3)
        v42 = 1;
      v43 = v42 | (2 * v33);
      v44 = vcvtps_u32_f32(v41 / v102[0]);
      if (v43 <= v44)
        prime = (int8x8_t)v44;
      else
        prime = (int8x8_t)v43;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v33 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_80;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v52 = vcvtps_u32_f32((float)*((unint64_t *)&v101 + 1) / v102[0]);
        if (__p[1] < (void *)3
          || (v53 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v53.i16[0] = vaddlv_u8(v53), v53.u32[0] > 1uLL))
        {
          v52 = std::__next_prime(v52);
        }
        else
        {
          v54 = 1 << -(char)__clz(v52 - 1);
          if (v52 >= 2)
            v52 = v54;
        }
        if (*(_QWORD *)&prime <= v52)
          prime = (int8x8_t)v52;
        if (*(_QWORD *)&prime >= v33)
        {
          v33 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_80:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v46 = operator new(8 * *(_QWORD *)&prime);
            v47 = __p[0];
            __p[0] = v46;
            if (v47)
              operator delete(v47);
            v48 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v48++) = 0;
            while (*(_QWORD *)&prime != v48);
            v49 = (_QWORD **)v101;
            if ((_QWORD)v101)
            {
              v50 = *(_QWORD *)(v101 + 8);
              v51 = (uint8x8_t)vcnt_s8(prime);
              v51.i16[0] = vaddlv_u8(v51);
              if (v51.u32[0] > 1uLL)
              {
                if (v50 >= *(_QWORD *)&prime)
                  v50 %= *(_QWORD *)&prime;
              }
              else
              {
                v50 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v50) = &v101;
              for (k = *v49; k; v50 = v56)
              {
                v56 = k[1];
                if (v51.u32[0] > 1uLL)
                {
                  if (v56 >= *(_QWORD *)&prime)
                    v56 %= *(_QWORD *)&prime;
                }
                else
                {
                  v56 &= *(_QWORD *)&prime - 1;
                }
                if (v56 != v50)
                {
                  if (!*((_QWORD *)__p[0] + v56))
                  {
                    *((_QWORD *)__p[0] + v56) = v49;
                    goto LABEL_105;
                  }
                  *v49 = (_QWORD *)*k;
                  *k = **((_QWORD **)__p[0] + v56);
                  **((_QWORD **)__p[0] + v56) = k;
                  k = v49;
                }
                v56 = v50;
LABEL_105:
                v49 = (_QWORD **)k;
                k = (_QWORD *)*k;
              }
            }
            v33 = (unint64_t)prime;
            goto LABEL_109;
          }
          v72 = __p[0];
          __p[0] = 0;
          if (v72)
            operator delete(v72);
          v33 = 0;
          __p[1] = 0;
        }
      }
LABEL_109:
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v32 >= v33)
          v2 = v32 % v33;
        else
          v2 = v32;
      }
      else
      {
        v2 = (v33 - 1) & v32;
      }
    }
    v57 = (_QWORD *)*((_QWORD *)__p[0] + v2);
    j = v95;
    if (v57)
    {
      *(_QWORD *)v95 = *v57;
LABEL_122:
      *v57 = j;
      goto LABEL_123;
    }
    *(_QWORD *)v95 = v101;
    *(_QWORD *)&v101 = j;
    *((_QWORD *)__p[0] + v2) = &v101;
    if (*(_QWORD *)j)
    {
      v58 = *(_QWORD *)(*(_QWORD *)j + 8);
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v58 >= v33)
          v58 %= v33;
      }
      else
      {
        v58 &= v33 - 1;
      }
      v57 = (char *)__p[0] + 8 * v58;
      goto LABEL_122;
    }
LABEL_123:
    v95 = 0;
    ++*((_QWORD *)&v101 + 1);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v95);
LABEL_124:
    v60 = *v7;
    v59 = v7[1];
    if (v59)
    {
      v61 = (unint64_t *)(v59 + 16);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)j + 6);
    *((_QWORD *)j + 5) = v60;
    *((_QWORD *)j + 6) = v59;
    if (v63)
      std::__shared_weak_count::__release_weak(v63);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
    v64 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(_QWORD *(**)(std::string **__return_ptr, unint64_t))(*(_QWORD *)v10 + 24))(&v93, v10);
    if (((unint64_t)v93 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v64);
    std::string::basic_string[abi:ne180100]<0>(&v95, "com.apple.");
    std::string::basic_string[abi:ne180100]<0>(&v109, "");
    pxrInternal__aapl__pxrReserved__::TfStringReplace();
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97) < 0)
      operator delete(v95);
    if ((v93 & 7) != 0)
    {
      v65 = (unsigned int *)((unint64_t)v93 & 0xFFFFFFFFFFFFFFF8);
      do
        v66 = __ldxr(v65);
      while (__stlxr(v66 - 2, v65));
      v10 = v99;
    }
    Text = (const char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 8));
    v68 = &v98;
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v68 = (std::string *)v98.__r_.__value_.__r.__words[0];
    fprintf(v6, "%s [label=\"%s:%s\" ];\n", __str, Text, (const char *)v68);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    v69 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
    if (*((_QWORD *)&v99 + 1))
    {
      v70 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    ++v8;
    v7 += 2;
  }
  while (v7 != v92);
  v73 = v106;
  for (m = v107; v73 != m; v73 += 2)
  {
    v99 = 0uLL;
    v75 = (std::__shared_weak_count *)v73[1];
    if (v75)
    {
      *((_QWORD *)&v99 + 1) = std::__shared_weak_count::lock(v75);
      if (*((_QWORD *)&v99 + 1))
        *(_QWORD *)&v99 = *v73;
    }
    *(_QWORD *)__str = 0;
    v112 = 0;
    v113 = 0;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert((uint64_t)&v95, &v99);
    realityio::BuilderDependencyDAG::findDownstreamDependencies(v91, (__int128 **)&v95, (uint64_t)__str);
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v99;
    if (*((_QWORD *)&v99 + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 16);
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v93 = &v98;
    v78 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>>>::__emplace_unique_key_args<std::weak_ptr<realityio::Builder>,std::piecewise_construct_t const&,std::tuple<std::weak_ptr<realityio::Builder>&&>,std::tuple<>>((uint64_t)&v103, (unint64_t *)&v98, (_OWORD **)&v93);
    if (*((char *)v78 + 55) < 0)
      std::string::__init_copy_ctor_external(&v109, (const std::string::value_type *)v78[4], v78[5]);
    else
      v109 = *(std::string *)(v78 + 4);
    if (v98.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v98.__r_.__value_.__l.__size_);
    v79 = *(_QWORD *)__str;
    v80 = v112;
    while (v79 != v80)
    {
      if (*(_QWORD *)v79 != (_QWORD)v99)
      {
        v81 = *(std::__shared_weak_count **)(v79 + 8);
        v93 = *(std::string **)v79;
        v94 = v81;
        if (v81)
        {
          p_shared_weak_owners = (unint64_t *)&v81->__shared_weak_owners_;
          do
            v83 = __ldxr(p_shared_weak_owners);
          while (__stxr(v83 + 1, p_shared_weak_owners));
        }
        v110 = &v93;
        v84 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>>>::__emplace_unique_key_args<std::weak_ptr<realityio::Builder>,std::piecewise_construct_t const&,std::tuple<std::weak_ptr<realityio::Builder>&&>,std::tuple<>>((uint64_t)&v103, (unint64_t *)&v93, (_OWORD **)&v110);
        if (*((char *)v84 + 55) < 0)
          std::string::__init_copy_ctor_external(&v98, (const std::string::value_type *)v84[4], v84[5]);
        else
          v98 = *(std::string *)(v84 + 4);
        if (v94)
          std::__shared_weak_count::__release_weak(v94);
        if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v85 = &v109;
        else
          v85 = (std::string *)v109.__r_.__value_.__r.__words[0];
        if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v86 = &v98;
        else
          v86 = (std::string *)v98.__r_.__value_.__r.__words[0];
        fprintf(v6, "%s -> %s \n", (const char *)v85, (const char *)v86);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
      }
      v79 += 16;
    }
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
    v109.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
    v95 = __str;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    v87 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
    if (*((_QWORD *)&v99 + 1))
    {
      v88 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
  }
LABEL_201:
  fwrite("}\n", 2uLL, 1uLL, v6);
  fclose(v6);
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>>>::~__hash_table((uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>>>::~__hash_table((uint64_t)&v103);
LABEL_202:
  *(_QWORD *)__str = &v106;
  std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  return v6 != 0;
}

void sub_230167354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,char *a60)
{
  a60 = &a50;
  std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
  _Unwind_Resume(a1);
}

uint64_t *realityio::ImportSessionImpl::getPrototypeEntityRoot(realityio::ImportSessionImpl *this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)((char *)this + 256);
  if (*((_QWORD *)this + 32))
    return v1;
  v2 = REEntityCreate();
  RENetworkComponentGetComponentType();
  v8[0] = &off_24FDEEC60;
  v9 = v8;
  v7 = REEntityGetOrAddComponentByClass();
  if (!v9)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v9 + 48))(v9, &v7);
  RENetworkMarkComponentDirty();
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
    goto LABEL_7;
  }
  if (v9)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(_QWORD *))(*v3 + 8 * v4))(v3);
  }
  v8[0] = v2;
  if (v2)
    RERetain();
  v5 = *v1;
  if (*v1 != v2)
  {
    *v1 = v2;
    v8[0] = v5;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v8);
  RERelease();
  return v1;
}

void sub_2301675C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t realityio::ImportSessionImpl::generateOverridePrimPathToEntityForActiveSceneAssets(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  uint64_t ChildCount;
  uint64_t j;
  char **Object;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  _DWORD v19[2];
  int v20;
  int v21;
  uint64_t v22;
  _OWORD v23[2];
  __int128 v24;
  uint64_t v25;

  v25 = a2;
  v3 = a1 + 48;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>>>::destroy((_QWORD *)a1[48]);
  a1[48] = 0;
  a1[49] = 0;
  a1[47] = v3;
  result = REComponentClassFromName();
  if (result)
  {
    v24 = 0u;
    memset(v23, 0, sizeof(v23));
    std::deque<REEntity *>::push_back(v23, &v25);
    for (i = *((_QWORD *)&v24 + 1); *((_QWORD *)&v24 + 1); i = *((_QWORD *)&v24 + 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v23[0] + 1) + (((unint64_t)v24 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v24 & 0x1FF));
      *(_QWORD *)&v24 = v24 + 1;
      *((_QWORD *)&v24 + 1) = i - 1;
      if ((unint64_t)v24 >= 0x400)
      {
        operator delete(**((void ***)&v23[0] + 1));
        *((_QWORD *)&v23[0] + 1) += 8;
        *(_QWORD *)&v24 = v24 - 512;
      }
      ChildCount = REEntityGetChildCount();
      if (ChildCount)
      {
        for (j = 0; j != ChildCount; ++j)
        {
          __p[0] = (void *)REEntityGetChild();
          std::deque<REEntity *>::push_back(v23, __p);
        }
      }
      if (REEntityGetCustomComponent())
      {
        Object = (char **)RECustomComponentGetObject();
        std::string::basic_string[abi:ne180100]<0>(__p, *Object);
        MEMORY[0x2348B26F8](v19, __p);
        v16 = v6;
        if (v6)
          RERetain();
        v20 = v19[0];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
        v21 = v19[1];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
        v22 = v16;
        v16 = 0;
        v10 = (_QWORD *)*v3;
        v11 = v3;
        v12 = v3;
        if (!*v3)
          goto LABEL_20;
        v11 = v3;
        while (1)
        {
          while (1)
          {
            v12 = v10;
            v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 4);
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 4)))break;
            v10 = (_QWORD *)*v12;
            v11 = v12;
            if (!*v12)
              goto LABEL_20;
          }
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v20))break;
          v11 = v12 + 1;
          v10 = (_QWORD *)v12[1];
          if (!v10)
            goto LABEL_20;
        }
        if (!*v11)
        {
LABEL_20:
          v14 = operator new(0x30uLL);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v14 + 8, &v20);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v14 + 9, &v21);
          *((_QWORD *)v14 + 5) = v22;
          v22 = 0;
          *(_QWORD *)v14 = 0;
          *((_QWORD *)v14 + 1) = 0;
          *((_QWORD *)v14 + 2) = v12;
          *v11 = v14;
          v15 = *(_QWORD *)a1[47];
          if (v15)
          {
            a1[47] = v15;
            v14 = (_DWORD *)*v11;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[48], (uint64_t *)v14);
          ++a1[49];
        }
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v22);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v19);
        if (v18 < 0)
          operator delete(__p[0]);
      }
    }
    return std::deque<unsigned long>::~deque[abi:ne180100](v23);
  }
  return result;
}

void sub_2301678C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  std::deque<unsigned long>::~deque[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>::~pair(uint64_t a1)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

BOOL realityio::ImportSessionV1::updateInProgress(realityio::ImportSessionV1 *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 5) + 40) != 0;
}

void realityio::ImportSession::~ImportSession(realityio::ImportSession *this)
{
  realityio::ImportSession::~ImportSession(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24FDFB710;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 248, *((_QWORD **)this + 32));
  std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::destroy(*((_QWORD **)this + 29));
  std::mutex::~mutex((std::mutex *)((char *)this + 160));
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    realityio::ImportSession::SessionMeshAssetCacheDeleter::operator()(v2, v3);
  std::mutex::~mutex((std::mutex *)((char *)this + 88));
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

unsigned int **realityio::ImportSession::description@<X0>(realityio::ImportSession *this@<X0>, CFStringRef *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;

  v3 = (_QWORD *)*((_QWORD *)this + 2);
  *a2 = 0;
  v8 = *(unsigned int **)(v3[1] + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v8);
  v4 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v8);
  v5 = v3[2];
  v6 = (*(uint64_t (**)(_QWORD *))(*v3 + 72))(v3);
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<ImportSession: %p { stage: %p, engine: %p, version: %d }>"), v3, v4, v5, v6);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v8);
}

void sub_230167A40(_Unwind_Exception *a1)
{
  const void **v1;

  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::SessionMeshAssetCache::CryptographicHash>,0>((uint64_t)a2 + 28);
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::SessionMeshAssetCache::CryptographicHash>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__tree<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<realityio::SessionMeshAssetCache::CryptographicHash,std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::less<realityio::SessionMeshAssetCache::CryptographicHash>,true>,std::allocator<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<realityio::SessionMeshAssetCache::CryptographicHash,std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::less<realityio::SessionMeshAssetCache::CryptographicHash>,true>,std::allocator<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<realityio::SessionMeshAssetCache::CryptographicHash,std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::less<realityio::SessionMeshAssetCache::CryptographicHash>,true>,std::allocator<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>>>::destroy(a1, a2[1]);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(a2 + 8);
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>>>::__erase_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::SessionMeshAssetCache::CryptographicHash>,0>((uint64_t)v4 + 28);
  operator delete(v4);
  return 1;
}

std::string *std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>(std::string *this, __int128 *a2, _DWORD *a3)
{
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&this[2], a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this[2].__r_.__value_.__r.__words + 1, a3 + 1);
  return this;
}

void sub_230167C14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<() & 1) != 0)
    return 1;
  if ((pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<() & 1) != 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 48), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 48));
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath> const,REAsset *>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 48);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<realityio::TextureImportOperationSettings>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<realityio::TextureImportOperationSettings>>,0>(uint64_t a1)
{
  std::__tree<realityio::TextureImportOperationSettings>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::default_delete<realityio::BuilderDependencyDAG>::operator()[abi:ne180100](uint64_t a1)
{
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((_QWORD *)(a1 + 120));
  std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::~__hash_table(a1 + 80);
  std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::~__hash_table(a1 + 40);
  std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::~__hash_table(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::WrappedRERef<REEntity *>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::WrappedRERef<REEntity *>>,0>(uint64_t a1)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__function::__func<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>>,void ()(realityio::UsdStageDelta const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>>,void ()(realityio::UsdStageDelta const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDFB878;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>>,void ()(realityio::UsdStageDelta const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDFB878;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>>,void ()(realityio::UsdStageDelta const&)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t std::__function::__func<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>>,void ()(realityio::UsdStageDelta const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>>,void ()(realityio::UsdStageDelta const&)>::target_type()
{
}

uint64_t std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>>>::__erase_unique<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>>>::find<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath> const,REAsset *>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

_QWORD *std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>>>::find<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4)))
  {
    return v2;
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_2301681B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<realityio::TextureImportOperationSettings>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<realityio::TextureImportOperationSettings>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<realityio::TextureImportOperationSettings>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_230168348(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<realityio::TextureImportOperationSettings>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t v3;

  v3 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::erase(a1, v3);
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

void std::__shared_ptr_emplace<realityio::LiveSceneManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFB938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::LiveSceneManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFB938;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::LiveSceneManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::weak_ptr<realityio::Builder> const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::weak_ptr<realityio::Builder> const,std::string>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<realityio::Builder>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<realityio::Builder>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::weak_ptr<realityio::Builder> const,std::string>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<realityio::Builder>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>>>::__emplace_unique_key_args<std::weak_ptr<realityio::Builder>,std::piecewise_construct_t const&,std::tuple<std::weak_ptr<realityio::Builder>&&>,std::tuple<>>(uint64_t a1, unint64_t *a2, _OWORD **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD **v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v7 = (_QWORD *)(a1 + 24);
  v8 = realityio::WeakBuilderPtrHash::operator()(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (realityio::WeakBuilderPtrEqual::operator()(a1 + 32, i + 2, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *i = 0;
  i[1] = v9;
  v17 = *a3;
  *((_OWORD *)i + 1) = **a3;
  *v17 = 0;
  v17[1] = 0;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  v29 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *i = *v16;
  *v16 = i;
  *(_QWORD *)(v24 + 8 * v3) = v16;
  if (*i)
  {
    v26 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_230168894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

realityio::tokens::AnimationBuilderTokens_StaticTokenType *realityio::tokens::AnimationBuilderTokens_StaticTokenType::AnimationBuilderTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(MEMORY[0x2348B2758](this, "primvars:realitykit:stageTimeLine", 0) + 8);
  MEMORY[0x2348B2758](v2, "primvars:realitykit:animationLibrary:timelines", 0);
  MEMORY[0x2348B2758](this + 2, "primvars:realitykit:animationLibrary:times", 0);
  MEMORY[0x2348B2758](this + 3, "autoPlay", 0);
  v3 = *this;
  v26 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v26 = v4;
  }
  v6 = *v2;
  v27 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v27 = v7;
  }
  v9 = this[2];
  v28 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v28 = v10;
  }
  v12 = this[3];
  v29 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v29 = v13;
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  v15 = (unsigned int *)operator new(0x20uLL);
  v16 = 0;
  this[4] = v15;
  this[5] = v15;
  this[6] = v15 + 8;
  do
  {
    v17 = (&v26)[v16];
    *(_QWORD *)v15 = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        *(_QWORD *)v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v16;
    v15 += 2;
  }
  while (v16 != 4);
  v20 = (unsigned int **)&v30;
  this[5] = v15;
  do
  {
    v22 = (uint64_t)*--v20;
    v21 = v22;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
  }
  while (v20 != &v26);
  return (realityio::tokens::AnimationBuilderTokens_StaticTokenType *)this;
}

void sub_230168B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  v21 = &a16;
  while (1)
  {
    v23 = *--v21;
    v22 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    if (v21 == (uint64_t *)&a12)
    {
      if ((*v19 & 7) != 0)
      {
        v26 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      if ((*v18 & 7) != 0)
      {
        v28 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      if ((*v17 & 7) != 0)
      {
        v30 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v16 & 7) != 0)
      {
        v32 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t realityio::PhysicsMaterialAssetBuilder::kOutputName(realityio::PhysicsMaterialAssetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "physics_material_asset");
    realityio::PhysicsMaterialAssetBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::PhysicsMaterialAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_230168CA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::PhysicsMaterialAssetBuilder *realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(realityio::PhysicsMaterialAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "PhysicsMaterialAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kPhysicsMaterialAssetBuilderIdentifier);
  realityio::generatePhysicsMaterialsDirtyStageSubscription(&v12);
  v20[0] = &off_24FDFBA10;
  v21 = v20;
  v18[0] = &off_24FDFBA90;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDFB998;
  *((_QWORD *)this + 35) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::PhysicsMaterialAssetBuilder *)((char *)this + 288));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_230168E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  realityio::DynamicBuilder *v27;
  _QWORD *v28;
  _QWORD *v29;

  v29 = v28;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v29);
  realityio::DynamicBuilder::~DynamicBuilder(v27);
  _Unwind_Resume(a1);
}

uint64_t realityio::PhysicsMaterialAssetBuilder::run(realityio::PhysicsMaterialAssetBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  double *v6;
  unint64_t *v7;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *Data;
  realityio *UsdPhysicsAttributeDoubleValue;
  unsigned int *v10;
  unsigned int v11;
  NSObject *v12;
  uint64_t Text;
  double *v14;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v15;
  realityio *v16;
  unsigned int *v17;
  unsigned int v18;
  NSObject *v19;
  uint64_t v20;
  double *v21;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v22;
  realityio *v23;
  unsigned int *v24;
  unsigned int v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t ServiceLocator;
  uint64_t v31;
  __int128 *v32;
  __int128 *p_buf;
  uint64_t v34;
  realityio::PhysicsMaterialAssetBuilder *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  __int128 *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[8];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 buf;
  __int128 *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  v50 = 0;
  v51 = 0;
  v49 = 0;
  MEMORY[0x2348B274C](&buf, "physics:restitution");
  v7 = (unint64_t *)MEMORY[0x24BEE83A0];
  Data = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(MEMORY[0x24BEE83A0]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
  UsdPhysicsAttributeDoubleValue = (realityio *)realityio::getUsdPhysicsAttributeDoubleValue((realityio *)v52, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&buf, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)Data + 48), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v51, v6);
  if ((buf & 7) != 0)
  {
    v10 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if ((UsdPhysicsAttributeDoubleValue & 1) == 0)
  {
    v12 = *(id *)(realityio::logObjects(UsdPhysicsAttributeDoubleValue) + 24);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v52, &v48);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = Text;
      _os_log_impl(&dword_22FF26000, v12, OS_LOG_TYPE_DEFAULT, "Unable to get restitution attribute value for %s", (uint8_t *)&buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    }

  }
  MEMORY[0x2348B274C](&buf, "physics:staticFriction");
  v15 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(v7);
  if (!v15)
    v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
  v16 = (realityio *)realityio::getUsdPhysicsAttributeDoubleValue((realityio *)v52, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&buf, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v15 + 40), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50, v14);
  if ((buf & 7) != 0)
  {
    v17 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if ((v16 & 1) == 0)
  {
    v19 = *(id *)(realityio::logObjects(v16) + 24);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v52, &v48);
      v20 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v20;
      _os_log_impl(&dword_22FF26000, v19, OS_LOG_TYPE_DEFAULT, "Unable to get static friction attribute value for %s", (uint8_t *)&buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    }

  }
  MEMORY[0x2348B274C](&buf, "physics:dynamicFriction");
  v22 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(v7);
  if (!v22)
    v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
  v23 = (realityio *)realityio::getUsdPhysicsAttributeDoubleValue((realityio *)v52, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&buf, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v22 + 32), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v49, v21);
  if ((buf & 7) != 0)
  {
    v24 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if ((v23 & 1) == 0)
  {
    v26 = *(id *)(realityio::logObjects(v23) + 24);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v52, &v48);
      v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v27;
      _os_log_impl(&dword_22FF26000, v26, OS_LOG_TYPE_DEFAULT, "Unable to get dynamic friction attribute value for %s", (uint8_t *)&buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    }

  }
  v28 = *(NSObject **)(realityio::logObjects(v23) + 24);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_22FF26000, v28, OS_LOG_TYPE_INFO, "Creating and Saving physics material reference", (uint8_t *)&buf, 2u);
  }
  *(_QWORD *)&buf = 0;
  v29 = *((_QWORD *)this + 35);
  if (v29)
  {
    *((_QWORD *)this + 35) = 0;
    *(_QWORD *)&buf = v29;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&buf);
  ServiceLocator = REEngineGetServiceLocator();
  v48 = 0;
  v48 = MEMORY[0x2348B1264](ServiceLocator);
  v31 = *((_QWORD *)a2 + 6);
  v32 = (__int128 *)operator new(0x30uLL);
  *(_QWORD *)v32 = &off_24FDFBB10;
  *((_QWORD *)v32 + 1) = &v48;
  *((_QWORD *)v32 + 2) = &v51;
  *((_QWORD *)v32 + 3) = &v50;
  *((_QWORD *)v32 + 4) = &v49;
  *((_QWORD *)v32 + 5) = this;
  v57 = v32;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v31 + 16))(v31, &buf);
  p_buf = v57;
  if (v57 == &buf)
  {
    v34 = 4;
    p_buf = &buf;
  }
  else
  {
    if (!v57)
      goto LABEL_37;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)p_buf + 8 * v34))();
LABEL_37:
  v47 = *((_QWORD *)this + 35);
  if (v47)
    RERetain();
  realityio::Builder::addAsset((uint64_t *)this, &v47, 0);
  v35 = (realityio::PhysicsMaterialAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v47);
  v37 = *((_QWORD *)this + 2);
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *(_QWORD *)&buf = v37;
  *((_QWORD *)&buf + 1) = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
  }
  v40 = (__int128 *)realityio::PhysicsMaterialAssetBuilder::kOutputName(v35);
  v46 = *((_QWORD *)this + 35);
  realityio::Outputs::storeValue<REAsset *>(v37, v40, &v46);
  if (v36)
  {
    v41 = (unint64_t *)&v36->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if ((v55 & 7) != 0)
  {
    v43 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  result = v53;
  if (v53)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
  return result;
}

void sub_230169444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2301695BC()
{
  JUMPOUT(0x2301695B4);
}

void realityio::PhysicsMaterialAssetBuilder::clear(realityio::PhysicsMaterialAssetBuilder *this, realityio::Inputs *a2)
{
  char v2;
  std::__shared_weak_count *v4;
  std::mutex *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void **v8;
  realityio::PhysicsMaterialAssetBuilder *v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  const void **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::string v21;
  _QWORD v22[3];
  std::string __p;

  v5 = (std::mutex *)*((_QWORD *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (const void **)realityio::PhysicsMaterialAssetBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<REAsset *>(v5, v8, (uint64_t)v22);
  v10 = LOBYTE(v22[0]);
  if (!LOBYTE(v22[0]))
  {
    v9 = (realityio::PhysicsMaterialAssetBuilder *)&v21;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v5 = (std::mutex *)v21.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      if (!LOBYTE(v22[0]) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v21 = __p;
      v5 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (!v4)
    goto LABEL_14;
  v11 = (unint64_t *)&v4->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v10)
      goto LABEL_15;
  }
  else
  {
LABEL_14:
    if (v10)
    {
LABEL_15:
      v14 = *((_QWORD *)this + 2);
      v13 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
      v22[0] = v14;
      v22[1] = v13;
      if (v13)
      {
        v15 = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = (const void **)realityio::PhysicsMaterialAssetBuilder::kOutputName(v9);
      std::mutex::lock((std::mutex *)(v14 + 64));
      if (v14 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v14 + 40, v17))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v14 + 40), v17);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v14, (unsigned __int8 *)v17);
      std::mutex::unlock((std::mutex *)(v14 + 64));
      if (v13)
      {
        v18 = (unint64_t *)&v13->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v22[0] = 0;
      v20 = *((_QWORD *)this + 35);
      if (v20)
      {
        *((_QWORD *)this + 35) = 0;
        v22[0] = v20;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(v22);
      return;
    }
  }
  if (v2 < 0)
    operator delete(v5);
}

void sub_2301697A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a17 && a25 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void realityio::PhysicsMaterialAssetBuilder::~PhysicsMaterialAssetBuilder(void **this)
{
  realityio::PhysicsMaterialAssetBuilder::~PhysicsMaterialAssetBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::PhysicsMaterialAssetBuilder *v2;
  uint64_t v3;
  realityio::PhysicsMaterialAssetBuilder *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *this = &off_24FDFB998;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 42));
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this + 35);
  *this = off_24FDE1CA0;
  v2 = (realityio::PhysicsMaterialAssetBuilder *)this[34];
  if (v2 == (realityio::PhysicsMaterialAssetBuilder *)(this + 31))
  {
    v3 = 4;
    v2 = (realityio::PhysicsMaterialAssetBuilder *)(this + 31);
  }
  else
  {
    if (!v2)
      goto LABEL_10;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_10:
  v4 = (realityio::PhysicsMaterialAssetBuilder *)this[30];
  if (v4 == (realityio::PhysicsMaterialAssetBuilder *)(this + 27))
  {
    v5 = 4;
    v4 = (realityio::PhysicsMaterialAssetBuilder *)(this + 27);
  }
  else
  {
    if (!v4)
      goto LABEL_15;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_15:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  v6 = (unint64_t)this[24];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = (unint64_t)this[23];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder((realityio::Builder *)this);
}

void std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFBA10;
  return result;
}

void std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFBA10;
}

char *std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFBA90;
  return result;
}

void std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFBA90;
}

void std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::PhysicsMaterialAssetBuilder::kOutputName((realityio::PhysicsMaterialAssetBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 16, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_230169BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24FDFBB10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDFBB10;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = REAssetManagerPhysicsMaterialAssetCreate2();
  v5 = v2;
  if (v2)
    RERetain();
  v3 = *(_QWORD *)(v1 + 280);
  if (v3 != v2)
  {
    *(_QWORD *)(v1 + 280) = v2;
    v5 = v3;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
  return RERelease();
}

uint64_t std::__function::__func<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType *realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType::ArbitraryComponentBuilderTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(MEMORY[0x2348B2758](this, "__realitykit_offset", 0) + 8);
  MEMORY[0x2348B2758](v2, "__realitykit_type", 0);
  MEMORY[0x2348B2758](this + 2, "info:id", 0);
  v3 = *this;
  v23 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v23 = v4;
  }
  v6 = *v2;
  v24 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v24 = v7;
  }
  v9 = this[2];
  v25 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v25 = v10;
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  v12 = (unsigned int *)operator new(0x18uLL);
  v13 = 0;
  this[3] = v12;
  this[4] = v12;
  this[5] = v12 + 6;
  do
  {
    v14 = (&v23)[v13];
    *(_QWORD *)v12 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *(_QWORD *)v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v13;
    v12 += 2;
  }
  while (v13 != 3);
  v17 = (unsigned int **)&v26;
  this[4] = v12;
  do
  {
    v19 = (uint64_t)*--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
  }
  while (v17 != &v23);
  return (realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType *)this;
}

void sub_23016A000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t realityio::internal::assertHandler(unsigned int a1, const char *a2, const char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  os_log_type_t v15;
  size_t v17;
  int v18[2];
  int v19;
  pid_t v20;
  _BYTE buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (a1 > 1)
  {
    v14 = 0;
    v15 = OS_LOG_TYPE_DEFAULT;
  }
  else
  {
    v26 = 0;
    *(_QWORD *)v18 = 0xE00000001;
    v19 = 1;
    v20 = getpid();
    v17 = 648;
    sysctl(v18, 4u, buf, &v17, 0, 0);
    if ((v26 & 0x800) != 0)
      v14 = 1;
    else
      v14 = 2;
    v15 = OS_LOG_TYPE_ERROR;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], v15))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = a3;
    v22 = 1024;
    v23 = a4;
    v24 = 2080;
    v25 = a2;
    _os_log_impl(&dword_22FF26000, MEMORY[0x24BDACB70], v15, "Assertion failed (%s:%i). Condition: %s", buf, 0x1Cu);
  }
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Assertion failed (%s:%i). Condition: %s\nCheck os_log for additional details!\n", a3, a4, a2);
  if (a5 >= 1)
  {
    *(_QWORD *)buf = &a10;
    os_log_with_args();
  }
  return v14;
}

uint64_t realityio::TextureAssetAction::ImportOperationSettings::idString(realityio::TextureAssetAction::ImportOperationSettings *this)
{
  _QWORD *v2;
  int v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  realityio::TextureAssetAction::ImportOperationSettings *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  _QWORD v28[11];
  char v29;
  uint64_t v30;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v27);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"swizzle_", 8);
  v3 = *((char *)this + 71);
  if (v3 >= 0)
    v4 = (char *)this + 48;
  else
    v4 = (char *)*((_QWORD *)this + 6);
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)this + 71);
  else
    v5 = *((_QWORD *)this + 7);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"_", 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"textureSemantic_", 16);
  v9 = *((char *)this + 47);
  if (v9 >= 0)
    v10 = (char *)this + 24;
  else
    v10 = (char *)*((_QWORD *)this + 3);
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)this + 47);
  else
    v11 = *((_QWORD *)this + 4);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"_", 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"colorSpace_", 11);
  v15 = *((char *)this + 23);
  if (v15 >= 0)
    v16 = this;
  else
    v16 = *(realityio::TextureAssetAction::ImportOperationSettings **)this;
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)this + 23);
  else
    v17 = *((_QWORD *)this + 1);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"downSample_", 11);
  v20 = (_QWORD *)std::ostream::operator<<();
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"_", 1);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"restictTo8_", 11);
  if (*((_BYTE *)this + 76))
    v23 = "true";
  else
    v23 = "false";
  if (*((_BYTE *)this + 76))
    v24 = 4;
  else
    v24 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  std::stringbuf::str();
  v27[0] = *MEMORY[0x24BEDB7F0];
  v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v28[0] = v25;
  v28[1] = MEMORY[0x24BEDB848] + 16;
  if (v29 < 0)
    operator delete((void *)v28[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2348B4DA4](&v30);
}

void sub_23016A41C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void realityio::TextureAssetAction::operator()(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X8>)
{
  void *v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  uint64_t IsImpl;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  uint64_t Text;
  uint64_t v22;
  __int128 v23;
  const UInt8 *v24;
  CFIndex v25;
  CFDataRef v26;
  const std::error_category *v28;
  char v29;
  const std::error_category *v30;
  char v31;
  std::string::size_type v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  int v40;
  std::string *v44;
  CFStringRef v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v50;
  std::string::size_type v51;
  uint64_t TextureAssetFromDataAsync;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  std::string *v56;
  std::string::size_type size;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  uint64_t ServiceLocator;
  std::string *v68;
  std::string *p_p;
  CFTypeRef v71;
  CFTypeRef cf;
  const UInt8 *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::string v77;
  std::string v78;
  std::string __p;
  int v80;
  char v81;
  std::string v82;
  std::string::size_type v83;
  std::string v84;
  std::string buf;
  std::string v86;
  _QWORD v87[2];
  __int128 v88;
  _BYTE v89[24];
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  ServiceLocator = REEngineGetServiceLocator();
  if (MEMORY[0x2348B1288]())
  {
    RERenderManagerGetRenderDevice();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "supportsTextureSwizzle");

  }
  v87[1] = 0;
  memset(&v82, 0, sizeof(v82));
  std::string::basic_string[abi:ne180100]<0>(&v77, "");
  v68 = &v78;
  std::string::basic_string[abi:ne180100]<0>(&v78, "");
  p_p = &__p;
  v8 = (pxrInternal__aapl__pxrReserved__ *)std::string::basic_string[abi:ne180100]<0>(&__p, "rgba");
  v80 = 0;
  v81 = 0;
  v9 = *a3;
  if (a3[1] != *a3)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v88, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a4 + v11));
      IsImpl = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(v13);
      if ((_DWORD)IsImpl)
      {
        if ((BYTE8(v88) & 4) != 0)
          v15 = (*(uint64_t (**)(__int128 *))((*((_QWORD *)&v88 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v88);
        else
          v15 = v88;
        if (*(char *)(v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
        }
        else
        {
          v16 = *(_OWORD *)v15;
          buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 16);
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v16;
        }
        if (*(char *)(v15 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v15 + 24), *(_QWORD *)(v15 + 32));
        }
        else
        {
          v23 = *(_OWORD *)(v15 + 24);
          v86.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 40);
          *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v23;
        }
        std::string::operator=(&v82, &v86);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      else
      {
        v17 = *((_QWORD *)&v88 + 1);
        if (!*((_QWORD *)&v88 + 1))
          goto LABEL_18;
        IsImpl = strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v88 + 1) & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio18TextureAssetAction23ImportOperationSettingsE" & 0x7FFFFFFFFFFFFFFFLL));
        if ((_DWORD)IsImpl)
        {
          if ((v17 & 4) == 0
          {
LABEL_18:
            v20 = *(id *)(realityio::logObjects((realityio *)IsImpl) + 24);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
              v22 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + v10));
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = Text;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v22;
              _os_log_impl(&dword_22FF26000, v20, OS_LOG_TYPE_DEFAULT, "\"%s\" TextureAssetAction::Unused input \"%s\"\n", (uint8_t *)&buf, 0x16u);
            }

            goto LABEL_29;
          }
          v17 = *((_QWORD *)&v88 + 1);
        }
        if ((v17 & 4) != 0)
          v18 = (*(uint64_t (**)(__int128 *))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(&v88);
        else
          v18 = v88;
        std::string::operator=(&v77, (const std::string *)v18);
        std::string::operator=(&v78, (const std::string *)(v18 + 24));
        std::string::operator=(&__p, (const std::string *)(v18 + 48));
        v19 = *(_DWORD *)(v18 + 72);
        v81 = *(_BYTE *)(v18 + 76);
        v80 = v19;
      }
LABEL_29:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v88);
      ++v12;
      v9 = *a3;
      v11 += 16;
      v10 += 8;
    }
    while (v12 < (a3[1] - *a3) >> 3);
  }
  pxrInternal__aapl__pxrReserved__::ArGetResolver(v8);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&buf, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  else
    buf = v82;
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (v75)
  {
    (*(void (**)(const UInt8 **__return_ptr))(*(_QWORD *)v75 + 24))(&v73);
    v24 = v73;
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 16))(v75);
    v26 = CFDataCreateWithBytesNoCopy(0, v24, v25, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
    cf = v26;
    if (!v26)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "Could not retrieve texture data");
      ExecFault::errorValue(2, &buf, 0, a5);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      goto LABEL_158;
    }
    CFRetain(v26);
    CFRelease(cf);
    v71 = cf;
    CFRetain(cf);
    if (!ServiceLocator)
    {
      v28 = std::system_category();
      std::string::basic_string[abi:ne180100]<0>(&v84, "Could not find service locator");
      realityio::DetailedError::DetailedError(&v88, 0, (uint64_t)v28, (__int128 *)&v84);
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v88;
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = *(_OWORD *)v89;
      *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v89[15];
      v29 = v89[23];
      memset(v89, 0, sizeof(v89));
      buf.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v86.__r_.__value_.__s + 23) = v29;
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      goto LABEL_139;
    }
    v83 = RETextureImportOperationCreateWithData();
    if (!v83)
    {
      v30 = std::system_category();
      std::string::basic_string[abi:ne180100]<0>(&v84, "Failed to create import operation");
      realityio::DetailedError::DetailedError(&v88, 0, (uint64_t)v30, (__int128 *)&v84);
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v88;
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = *(_OWORD *)v89;
      *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v89[15];
      v31 = v89[23];
      memset(v89, 0, sizeof(v89));
      buf.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v86.__r_.__value_.__s + 23) = v31;
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      goto LABEL_138;
    }
    RERetain();
    RERelease();
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      switch(v78.__r_.__value_.__l.__size_)
      {
        case 3uLL:
          if (*(_WORD *)v78.__r_.__value_.__l.__data_ == 24946
            && *(_BYTE *)(v78.__r_.__value_.__r.__words[0] + 2) == 119)
          {
            goto LABEL_106;
          }
          break;
        case 4uLL:
          v68 = (std::string *)v78.__r_.__value_.__r.__words[0];
LABEL_83:
          v37 = bswap32(v68->__r_.__value_.__l.__data_);
          v38 = v37 >= 0x6E6F6E65;
          v39 = v37 > 0x6E6F6E65;
          v40 = !v38;
          if (v39 == v40)
            goto LABEL_106;
          break;
        case 5uLL:
          if (*(_DWORD *)v78.__r_.__value_.__l.__data_ == 1869377379
            && *(_BYTE *)(v78.__r_.__value_.__r.__words[0] + 4) == 114)
          {
            goto LABEL_106;
          }
          break;
        case 6uLL:
          if (*(_DWORD *)v78.__r_.__value_.__l.__data_ == 1818321779
            && *(_WORD *)(v78.__r_.__value_.__r.__words[0] + 4) == 29281)
          {
            goto LABEL_106;
          }
          if (*(_DWORD *)v78.__r_.__value_.__l.__data_ == 1836216174
            && *(_WORD *)(v78.__r_.__value_.__r.__words[0] + 4) == 27745)
          {
            goto LABEL_106;
          }
          break;
        case 8uLL:
          v36 = *(_QWORD *)v78.__r_.__value_.__l.__data_;
LABEL_105:
          if (v36 == 0x726F6C6F43726468)
LABEL_106:
            RETextureImportOperationSetSemantic();
          break;
        default:
          break;
      }
    }
    else
    {
      switch(*((_BYTE *)&v78.__r_.__value_.__s + 23))
      {
        case 3:
          if (LOWORD(v78.__r_.__value_.__l.__data_) == 24946 && v78.__r_.__value_.__s.__data_[2] == 119)
            goto LABEL_106;
          break;
        case 4:
          goto LABEL_83;
        case 5:
          if (LODWORD(v78.__r_.__value_.__l.__data_) == 1869377379 && v78.__r_.__value_.__s.__data_[4] == 114)
            goto LABEL_106;
          break;
        case 6:
          if (LODWORD(v78.__r_.__value_.__l.__data_) == 1818321779 && WORD2(v78.__r_.__value_.__r.__words[0]) == 29281)
            goto LABEL_106;
          if (LODWORD(v78.__r_.__value_.__l.__data_) == 1836216174 && WORD2(v78.__r_.__value_.__r.__words[0]) == 27745)
            goto LABEL_106;
          break;
        case 8:
          v36 = v78.__r_.__value_.__r.__words[0];
          goto LABEL_105;
        default:
          break;
      }
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v77.__r_.__value_.__l.__size_)
        goto LABEL_121;
      *(_QWORD *)&v88 = 0;
      v44 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&v77.__r_.__value_.__s + 23))
        goto LABEL_121;
      *(_QWORD *)&v88 = 0;
      v44 = &v77;
    }
    v45 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)v44, 0x8000100u);
    if ((_QWORD)v88)
      CFRelease((CFTypeRef)v88);
    *(_QWORD *)&v88 = v45;
    if (v45)
    {
      v84.__r_.__value_.__r.__words[0] = 0;
      v46 = MEMORY[0x2348B142C](v45);
      if (v84.__r_.__value_.__r.__words[0])
        CFRelease(v84.__r_.__value_.__l.__data_);
      v84.__r_.__value_.__r.__words[0] = v46;
      if (v46)
        RETextureImportOperationSetColorSpaceName();
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v84.__r_.__value_.__l.__data_);
    }
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v88);
LABEL_121:
    if (v80)
    {
      RETextureImportOperationSetDimensionsMode();
      RETextureImportOperationSetDownsampleFactor();
    }
    RETextureImportOperationCopyTextureDescriptorTemplate();
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = v47;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 1)
      {
        if (__p.__r_.__value_.__l.__size_ == 3)
        {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_130;
        }
LABEL_134:
        v50 = 84148994;
LABEL_135:
        objc_msgSend(v47, "setSwizzle:", v50);
        if (v81)
        {
          RETextureImportOperationSetPixelFormatMode();
          objc_msgSend(v48, "setPixelFormat:", 10);
        }
        RETextureImportOperationSetTextureDescriptorTemplate();
        v51 = v83;
        v83 = 0;
        buf.__r_.__value_.__s.__data_[0] = 1;
        buf.__r_.__value_.__l.__size_ = v51;
        *(_QWORD *)&v88 = 0;
        realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef(&v88);

LABEL_138:
        realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef(&v83);
LABEL_139:
        realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v71);
        if (buf.__r_.__value_.__s.__data_[0])
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
          RETextureImportOperationSetAssetResourceName();
          v84.__r_.__value_.__r.__words[0] = 0;
          v83 = 0;
          if (RETextureImportOperationCreateAssetData())
          {
            MEMORY[0x2348B1264](ServiceLocator);
            TextureAssetFromDataAsync = REAssetManagerCreateTextureAssetFromDataAsync();
            if (v83)
              RERelease();
            v83 = TextureAssetFromDataAsync;
            realityio::ECSAction::queueForDeferredAssetLoad(a1);
            RERelease();
            *((_QWORD *)&v88 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAsset *>>(void)::ti;
            pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_PlaceCopy((uint64_t *)&v88, (uint64_t *)&v83);
            pxrInternal__aapl__pxrReserved__::VtValue::operator=(v87, &v88);
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v88);
            pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a5, v87);
          }
          else
          {
            v55 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v88, "Error importing texture ");
            if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v56 = &v82;
            else
              v56 = (std::string *)v82.__r_.__value_.__r.__words[0];
            if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
            else
              size = v82.__r_.__value_.__l.__size_;
            std::string::append(v55, (const std::string::value_type *)v56, size);
            ExecFault::errorValue(2, (const std::string *)&v88, (__CFError *)v84.__r_.__value_.__l.__data_, a5);
            if ((v89[7] & 0x80000000) != 0)
              operator delete((void *)v88);
          }
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v83);
        }
        else
        {
          std::error_code::message(&v84, (const std::error_code *)&buf.__r_.__value_.__r.__words[1]);
          v53 = std::string::insert(&v84, 0, "Could not instantiate import operation");
          v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          *(_QWORD *)v89 = *((_QWORD *)&v53->__r_.__value_.__l + 2);
          v88 = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          ExecFault::errorValue(2, (const std::string *)&v88, 0, a5);
          if ((v89[7] & 0x80000000) != 0)
            operator delete((void *)v88);
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v84.__r_.__value_.__l.__data_);
        }
        realityio::Result<realityio::WrappedRERef<RETextureImportOperation0 *>,realityio::DetailedError>::~Result((uint64_t)&buf);
LABEL_158:
        realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&cf);
        v58 = v74;
        if (v74)
        {
          p_shared_owners = (unint64_t *)&v74->__shared_owners_;
          do
            v60 = __ldaxr(p_shared_owners);
          while (__stlxr(v60 - 1, p_shared_owners));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        goto LABEL_163;
      }
      v64 = *__p.__r_.__value_.__l.__data_;
    }
    else
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 1)
      {
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 3)
          goto LABEL_134;
LABEL_130:
        if (LOWORD(p_p->__r_.__value_.__l.__data_) == 26482 && p_p->__r_.__value_.__s.__data_[2] == 98)
        {
          v50 = 17040130;
          goto LABEL_135;
        }
        goto LABEL_134;
      }
      v64 = __p.__r_.__value_.__s.__data_[0];
    }
    if (v64 > 102)
    {
      if (v64 == 103)
      {
        v50 = 16974595;
        goto LABEL_135;
      }
      if (v64 == 114)
      {
        v50 = 16908802;
        goto LABEL_135;
      }
    }
    else
    {
      if (v64 == 97)
      {
        v50 = 17106181;
        goto LABEL_135;
      }
      if (v64 == 98)
      {
        v50 = 17040388;
        goto LABEL_135;
      }
    }
    goto LABEL_134;
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "Could not retrieve asset path");
  ExecFault::errorValue(2, &buf, 0, a5);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_163:
  v61 = v76;
  if (v76)
  {
    v62 = (unint64_t *)&v76->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v87);
}

void sub_23016AFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, const void *a20,const void *a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50)
{
  uint64_t v50;

  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v50 - 232));
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v50 - 144));
  realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef(&a50);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&a20);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&a21);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (a49 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v50 - 160));
  _Unwind_Resume(a1);
}

void realityio::tokens::MaterialBuilderTokens_StaticTokenType::~MaterialBuilderTokens_StaticTokenType(realityio::tokens::MaterialBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  void **v124;

  v124 = (void **)((char *)this + 328);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v124);
  v2 = *((_QWORD *)this + 40);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 39);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 38);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 37);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 36);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 35);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 34);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 33);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 32);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 31);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 30);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 29);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 28);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 27);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 26);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 25);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 24);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 23);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 22);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 21);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *((_QWORD *)this + 20);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *((_QWORD *)this + 19);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *((_QWORD *)this + 18);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *((_QWORD *)this + 17);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *((_QWORD *)this + 16);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *((_QWORD *)this + 15);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *((_QWORD *)this + 14);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *((_QWORD *)this + 13);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *((_QWORD *)this + 12);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *((_QWORD *)this + 11);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *((_QWORD *)this + 10);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *((_QWORD *)this + 9);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *((_QWORD *)this + 8);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *((_QWORD *)this + 7);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *((_QWORD *)this + 6);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *((_QWORD *)this + 5);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *((_QWORD *)this + 4);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = *((_QWORD *)this + 3);
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  v116 = *((_QWORD *)this + 2);
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = *((_QWORD *)this + 1);
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v122 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v123 = __ldxr(v122);
    while (__stlxr(v123 - 2, v122));
  }
}

realityio::tokens::MaterialBuilderTokens_StaticTokenType *realityio::tokens::MaterialBuilderTokens_StaticTokenType::MaterialBuilderTokens_StaticTokenType(realityio::tokens::MaterialBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;

  v178 = *MEMORY[0x24BDAC8D0];
  v136 = (uint64_t *)(MEMORY[0x2348B2758](this, "Material", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 256, "UV0", 0);
  MEMORY[0x2348B2758]((char *)this + 264, "UV1", 0);
  MEMORY[0x2348B2758]((char *)this + 272, "cullMode", 0);
  MEMORY[0x2348B2758]((char *)this + 280, "front", 0);
  MEMORY[0x2348B2758]((char *)this + 288, "back", 0);
  MEMORY[0x2348B2758]((char *)this + 296, "none", 0);
  MEMORY[0x2348B2758]((char *)this + 304, "unspecified", 0);
  MEMORY[0x2348B2758]((char *)this + 312, "displayColor", 0);
  MEMORY[0x2348B2758]((char *)this + 320, "displayOpacity", 0);
  v2 = *(_QWORD *)this;
  v137 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v137 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v136;
  v138 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v138 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v139 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v139 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v140 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v140 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v141 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v141 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v142 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v142 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v143 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v143 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v144 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v144 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v145 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v145 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v146 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v146 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v147 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v147 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v148 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v148 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v149 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v149 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v150 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v150 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v151 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v151 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v152 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v152 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v153 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v153 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v154 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v154 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v155 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v155 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v156 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v156 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v157 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v157 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v158 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v158 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v159 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v159 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v160 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v160 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v161 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v161 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v162 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v162 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v163 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v163 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v164 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v164 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v165 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v165 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v166 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v166 &= 0xFFFFFFFFFFFFFFF8;
  }
  v92 = *((_QWORD *)this + 30);
  v167 = v92;
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 2, v93));
    if ((v94 & 1) == 0)
      v167 &= 0xFFFFFFFFFFFFFFF8;
  }
  v95 = *((_QWORD *)this + 31);
  v168 = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      v168 &= 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *((_QWORD *)this + 32);
  v169 = v98;
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 2, v99));
    if ((v100 & 1) == 0)
      v169 &= 0xFFFFFFFFFFFFFFF8;
  }
  v101 = *((_QWORD *)this + 33);
  v170 = v101;
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 2, v102));
    if ((v103 & 1) == 0)
      v170 &= 0xFFFFFFFFFFFFFFF8;
  }
  v104 = *((_QWORD *)this + 34);
  v171 = v104;
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 2, v105));
    if ((v106 & 1) == 0)
      v171 &= 0xFFFFFFFFFFFFFFF8;
  }
  v107 = *((_QWORD *)this + 35);
  v172 = v107;
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 2, v108));
    if ((v109 & 1) == 0)
      v172 &= 0xFFFFFFFFFFFFFFF8;
  }
  v110 = *((_QWORD *)this + 36);
  v173 = v110;
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 2, v111));
    if ((v112 & 1) == 0)
      v173 &= 0xFFFFFFFFFFFFFFF8;
  }
  v113 = *((_QWORD *)this + 37);
  v174 = v113;
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 2, v114));
    if ((v115 & 1) == 0)
      v174 &= 0xFFFFFFFFFFFFFFF8;
  }
  v116 = *((_QWORD *)this + 38);
  v175 = v116;
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 2, v117));
    if ((v118 & 1) == 0)
      v175 &= 0xFFFFFFFFFFFFFFF8;
  }
  v119 = *((_QWORD *)this + 39);
  v176 = v119;
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 2, v120));
    if ((v121 & 1) == 0)
      v176 &= 0xFFFFFFFFFFFFFFF8;
  }
  v122 = *((_QWORD *)this + 40);
  v177 = v122;
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 2, v123));
    if ((v124 & 1) == 0)
      v177 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  v125 = operator new(0x148uLL);
  v126 = 0;
  *((_QWORD *)this + 41) = v125;
  *((_QWORD *)this + 42) = v125;
  *((_QWORD *)this + 43) = v125 + 41;
  do
  {
    v127 = *(&v137 + v126);
    *v125 = v127;
    if ((v127 & 7) != 0)
    {
      v128 = (unsigned int *)(v127 & 0xFFFFFFFFFFFFFFF8);
      do
        v129 = __ldxr(v128);
      while (__stxr(v129 + 2, v128));
      if ((v129 & 1) == 0)
        *v125 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v126;
    ++v125;
  }
  while (v126 != 41);
  v130 = &v178;
  *((_QWORD *)this + 42) = v125;
  do
  {
    v132 = *--v130;
    v131 = v132;
    if ((v132 & 7) != 0)
    {
      v133 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
      do
        v134 = __ldxr(v133);
      while (__stlxr(v134 - 2, v133));
    }
  }
  while (v130 != &v137);
  return this;
}

void sub_23016C53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,_QWORD *a39,_QWORD *a40,_QWORD *a41,void **a42,uint64_t a43,char a44)
{
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a42);
  v54 = (char *)&STACK[0x260];
  while (1)
  {
    v56 = *((_QWORD *)v54 - 1);
    v54 -= 8;
    v55 = v56;
    if ((v56 & 7) != 0)
    {
      v57 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
    if (v54 == &a44)
    {
      if ((*v48 & 7) != 0)
      {
        v59 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      if ((*v47 & 7) != 0)
      {
        v61 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v62 = __ldxr(v61);
        while (__stlxr(v62 - 2, v61));
      }
      if ((*v46 & 7) != 0)
      {
        v63 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v64 = __ldxr(v63);
        while (__stlxr(v64 - 2, v63));
      }
      if ((*v45 & 7) != 0)
      {
        v65 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v66 = __ldxr(v65);
        while (__stlxr(v66 - 2, v65));
      }
      if ((*v53 & 7) != 0)
      {
        v67 = (unsigned int *)(*v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v68 = __ldxr(v67);
        while (__stlxr(v68 - 2, v67));
      }
      if ((*v52 & 7) != 0)
      {
        v69 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v70 = __ldxr(v69);
        while (__stlxr(v70 - 2, v69));
      }
      if ((*v51 & 7) != 0)
      {
        v71 = (unsigned int *)(*v51 & 0xFFFFFFFFFFFFFFF8);
        do
          v72 = __ldxr(v71);
        while (__stlxr(v72 - 2, v71));
      }
      if ((*v50 & 7) != 0)
      {
        v73 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v74 = __ldxr(v73);
        while (__stlxr(v74 - 2, v73));
      }
      if ((*v49 & 7) != 0)
      {
        v75 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v76 = __ldxr(v75);
        while (__stlxr(v76 - 2, v75));
      }
      if ((*a11 & 7) != 0)
      {
        v77 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v78 = __ldxr(v77);
        while (__stlxr(v78 - 2, v77));
      }
      if ((*a12 & 7) != 0)
      {
        v79 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v80 = __ldxr(v79);
        while (__stlxr(v80 - 2, v79));
      }
      if ((*a13 & 7) != 0)
      {
        v81 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v82 = __ldxr(v81);
        while (__stlxr(v82 - 2, v81));
      }
      if ((*a14 & 7) != 0)
      {
        v83 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v84 = __ldxr(v83);
        while (__stlxr(v84 - 2, v83));
      }
      if ((*a15 & 7) != 0)
      {
        v85 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v86 = __ldxr(v85);
        while (__stlxr(v86 - 2, v85));
      }
      if ((*a16 & 7) != 0)
      {
        v87 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v88 = __ldxr(v87);
        while (__stlxr(v88 - 2, v87));
      }
      if ((*a17 & 7) != 0)
      {
        v89 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v90 = __ldxr(v89);
        while (__stlxr(v90 - 2, v89));
      }
      if ((*a18 & 7) != 0)
      {
        v91 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v92 = __ldxr(v91);
        while (__stlxr(v92 - 2, v91));
      }
      if ((*a19 & 7) != 0)
      {
        v93 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v94 = __ldxr(v93);
        while (__stlxr(v94 - 2, v93));
      }
      if ((*a20 & 7) != 0)
      {
        v95 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v96 = __ldxr(v95);
        while (__stlxr(v96 - 2, v95));
      }
      if ((*a21 & 7) != 0)
      {
        v97 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v98 = __ldxr(v97);
        while (__stlxr(v98 - 2, v97));
      }
      if ((*a22 & 7) != 0)
      {
        v99 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v100 = __ldxr(v99);
        while (__stlxr(v100 - 2, v99));
      }
      if ((*a23 & 7) != 0)
      {
        v101 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v102 = __ldxr(v101);
        while (__stlxr(v102 - 2, v101));
      }
      if ((*a24 & 7) != 0)
      {
        v103 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v104 = __ldxr(v103);
        while (__stlxr(v104 - 2, v103));
      }
      if ((*a25 & 7) != 0)
      {
        v105 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v106 = __ldxr(v105);
        while (__stlxr(v106 - 2, v105));
      }
      if ((*a26 & 7) != 0)
      {
        v107 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v108 = __ldxr(v107);
        while (__stlxr(v108 - 2, v107));
      }
      if ((*a27 & 7) != 0)
      {
        v109 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v110 = __ldxr(v109);
        while (__stlxr(v110 - 2, v109));
      }
      if ((*a28 & 7) != 0)
      {
        v111 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v112 = __ldxr(v111);
        while (__stlxr(v112 - 2, v111));
      }
      if ((*a29 & 7) != 0)
      {
        v113 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v114 = __ldxr(v113);
        while (__stlxr(v114 - 2, v113));
      }
      if ((*a30 & 7) != 0)
      {
        v115 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v116 = __ldxr(v115);
        while (__stlxr(v116 - 2, v115));
      }
      if ((*a31 & 7) != 0)
      {
        v117 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v118 = __ldxr(v117);
        while (__stlxr(v118 - 2, v117));
      }
      if ((*a32 & 7) != 0)
      {
        v119 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v120 = __ldxr(v119);
        while (__stlxr(v120 - 2, v119));
      }
      if ((*a33 & 7) != 0)
      {
        v121 = (unsigned int *)(*a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v122 = __ldxr(v121);
        while (__stlxr(v122 - 2, v121));
      }
      if ((*a34 & 7) != 0)
      {
        v123 = (unsigned int *)(*a34 & 0xFFFFFFFFFFFFFFF8);
        do
          v124 = __ldxr(v123);
        while (__stlxr(v124 - 2, v123));
      }
      if ((*a35 & 7) != 0)
      {
        v125 = (unsigned int *)(*a35 & 0xFFFFFFFFFFFFFFF8);
        do
          v126 = __ldxr(v125);
        while (__stlxr(v126 - 2, v125));
      }
      if ((*a36 & 7) != 0)
      {
        v127 = (unsigned int *)(*a36 & 0xFFFFFFFFFFFFFFF8);
        do
          v128 = __ldxr(v127);
        while (__stlxr(v128 - 2, v127));
      }
      if ((*a37 & 7) != 0)
      {
        v129 = (unsigned int *)(*a37 & 0xFFFFFFFFFFFFFFF8);
        do
          v130 = __ldxr(v129);
        while (__stlxr(v130 - 2, v129));
      }
      if ((*a38 & 7) != 0)
      {
        v131 = (unsigned int *)(*a38 & 0xFFFFFFFFFFFFFFF8);
        do
          v132 = __ldxr(v131);
        while (__stlxr(v132 - 2, v131));
      }
      if ((*a39 & 7) != 0)
      {
        v133 = (unsigned int *)(*a39 & 0xFFFFFFFFFFFFFFF8);
        do
          v134 = __ldxr(v133);
        while (__stlxr(v134 - 2, v133));
      }
      if ((*a40 & 7) != 0)
      {
        v135 = (unsigned int *)(*a40 & 0xFFFFFFFFFFFFFFF8);
        do
          v136 = __ldxr(v135);
        while (__stlxr(v136 - 2, v135));
      }
      if ((*a41 & 7) != 0)
      {
        v137 = (unsigned int *)(*a41 & 0xFFFFFFFFFFFFFFF8);
        do
          v138 = __ldxr(v137);
        while (__stlxr(v138 - 2, v137));
      }
      if ((*v44 & 7) != 0)
      {
        v139 = (unsigned int *)(*v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v140 = __ldxr(v139);
        while (__stlxr(v140 - 2, v139));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23016CB5C()
{
  JUMPOUT(0x23016C6D8);
}

void sub_23016CB64()
{
  JUMPOUT(0x23016C6FCLL);
}

void sub_23016CB6C()
{
  JUMPOUT(0x23016C720);
}

void sub_23016CB74()
{
  JUMPOUT(0x23016C744);
}

void sub_23016CB7C()
{
  JUMPOUT(0x23016C768);
}

void sub_23016CB84()
{
  JUMPOUT(0x23016C78CLL);
}

void sub_23016CB8C()
{
  JUMPOUT(0x23016C7B0);
}

void sub_23016CB94()
{
  JUMPOUT(0x23016C7D4);
}

void sub_23016CB9C()
{
  JUMPOUT(0x23016C7F8);
}

void sub_23016CBA4()
{
  JUMPOUT(0x23016C81CLL);
}

void sub_23016CBAC()
{
  JUMPOUT(0x23016C840);
}

void sub_23016CBB4()
{
  JUMPOUT(0x23016C864);
}

void sub_23016CBBC()
{
  JUMPOUT(0x23016C888);
}

void sub_23016CBC4()
{
  JUMPOUT(0x23016C8ACLL);
}

void sub_23016CBCC()
{
  JUMPOUT(0x23016C8D0);
}

void sub_23016CBD4()
{
  JUMPOUT(0x23016C8F4);
}

void sub_23016CBDC()
{
  JUMPOUT(0x23016C918);
}

void sub_23016CBE4()
{
  JUMPOUT(0x23016C93CLL);
}

void sub_23016CBEC()
{
  JUMPOUT(0x23016C960);
}

void sub_23016CBF4()
{
  JUMPOUT(0x23016C984);
}

void sub_23016CBFC()
{
  JUMPOUT(0x23016C9A8);
}

void sub_23016CC04()
{
  JUMPOUT(0x23016C9CCLL);
}

void sub_23016CC0C()
{
  JUMPOUT(0x23016C9F0);
}

void sub_23016CC14()
{
  JUMPOUT(0x23016CA14);
}

void sub_23016CC1C()
{
  JUMPOUT(0x23016CA38);
}

void sub_23016CC24()
{
  JUMPOUT(0x23016CA5CLL);
}

void sub_23016CC2C()
{
  JUMPOUT(0x23016CA80);
}

void sub_23016CC34()
{
  JUMPOUT(0x23016CAA4);
}

void sub_23016CC3C()
{
  JUMPOUT(0x23016CAC8);
}

void sub_23016CC44()
{
  JUMPOUT(0x23016CAECLL);
}

void sub_23016CC4C()
{
  JUMPOUT(0x23016CB10);
}

void sub_23016CC54()
{
  JUMPOUT(0x23016CB34);
}

void realityio::generateMaterialAssetsDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t *Data;
  _QWORD *v11;
  _QWORD *v12;
  void **v13[3];
  _QWORD *v14[3];
  __int128 v15;
  _QWORD *v16[3];
  _QWORD *v17[3];
  __int128 v18;
  _QWORD *v19[3];
  uint64_t v20;
  uint64_t v21;
  void ***v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54DE0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54DE0))
  {
    v12 = a1;
    v7 = operator new();
    v8 = operator new();
    memset(v17, 0, sizeof(v17));
    v9 = (_BYTE *)operator new();
    Data = (uint64_t *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!Data)
      Data = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    memset(v14, 0, sizeof(v14));
    memset(v13, 0, sizeof(v13));
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v9, Data, v14, v13);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v15, (uint64_t)v9);
    v23 = v15;
    v15 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v16, &v23, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v17, v16);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v18, v8);
    v24 = v18;
    v18 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v19, &v24, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v19);
    v11 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v20, v7);
    _MergedGlobals_53 = v20;
    *(_QWORD *)algn_255E54DD8 = v21;
    v20 = 0;
    v21 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v11);
    v22 = (void ***)v19;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v24);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v18);
    v22 = (void ***)v16;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v23);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v15);
    v22 = v13;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    v13[0] = (void **)v14;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v13);
    v16[0] = v17;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
    __cxa_guard_release(&qword_255E54DE0);
    a1 = v12;
  }
  v4 = *(_QWORD *)algn_255E54DD8;
  *a1 = _MergedGlobals_53;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_23016CED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  MEMORY[0x2348B4E1C](v24, 0x10A1C40F82F910ELL);
  a19 = (void **)&a22;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  MEMORY[0x2348B4E1C](v23, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v22, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54DE0);
  _Unwind_Resume(a1);
}

uint64_t realityio::isMaterialX(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a2)
{
  uint64_t v2;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v5;
  uint64_t v6;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  pxrInternal__aapl__pxrReserved__ *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  char **v15;
  pxrInternal__aapl__pxrReserved__ *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *((_QWORD *)this + 1);
  if (!v2
    || (*(_BYTE *)(v2 + 57) & 8) != 0
    || !(*(unsigned int (**)(realityio *, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *))(*(_QWORD *)this + 32))(this, a2))
  {
    return 0;
  }
  Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput(this, (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)((char *)Data + 24));
  if ((pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput() & 1) != 0)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v5 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v5)
      v5 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    v23 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v22, (uint64_t *)v5 + 3);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
    if (!v20 || (*(_BYTE *)(v20 + 57) & 8) != 0 || ((*(uint64_t (**)(uint64_t *))(v19 + 32))(&v19) & 1) == 0)
      goto LABEL_25;
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v15, &v20, &v21);
    v9 = v16;
    if (!v16 || (v10 = *((_QWORD *)v16 + 7), (v10 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v16, v8);
      v10 = *((_QWORD *)v9 + 7);
    }
    if ((v18 & 7) != 0)
    {
      v11 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    if (v16)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v16);
    if ((v10 & 1) != 0)
      v6 = MEMORY[0x2348B3904](v25);
    else
LABEL_25:
      v6 = 0;
    MEMORY[0x2348B1EC4](&v19);
    v15 = &v22;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
  else
  {
    v6 = 0;
  }
  if ((v28 & 7) != 0)
  {
    v13 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  if (v26)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
  return v6;
}

void sub_23016D284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  MEMORY[0x2348B1EC4](&a13);
  a9 = &a16;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)(v16 - 48));
  _Unwind_Resume(a1);
}

uint64_t realityio::hasMaterialXSurface(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *v2;
  uint64_t isMaterialX;
  _QWORD v5[3];

  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v5[0] = MEMORY[0x24BEE9D88] + 16;
  isMaterialX = realityio::isMaterialX((realityio *)v5, v2);
  MEMORY[0x2348B20B0](v5);
  return isMaterialX;
}

uint64_t realityio::getFileResolvedPath@<X0>(std::string *a1@<X8>)
{
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  unsigned int *v5;
  unsigned int v6;
  void *v8;
  char v9;
  __int128 __p;
  std::string::size_type v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v16[0] = MEMORY[0x24BEE9D38] + 16;
  Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v16, (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)((char *)Data + 48));
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v8);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v12)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
  }
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    if (SHIBYTE(v11) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = __p;
    a1->__r_.__value_.__r.__words[2] = v11;
  }
  if (v9 < 0)
    operator delete(v8);
  if ((v15 & 7) != 0)
  {
    v5 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  if (v13)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
  return MEMORY[0x2348B1EC4](v16);
}

void sub_23016D484(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B1EC4](v1 - 40);
  _Unwind_Resume(a1);
}

uint64_t realityio::createMaterialInputs@<X0>(const pxrInternal__aapl__pxrReserved__::UsdPrim *a1@<X1>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  std::string::size_type size;
  std::string::size_type v27;
  std::string *v28;
  uint64_t v29;
  std::string *p_s1;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v36;
  _BOOL4 v37;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  _QWORD *v43;
  pxrInternal__aapl__pxrReserved__::UsdObject *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t BaseName;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  char *v55;
  uint64_t EmptyString;
  __int128 v57;
  std::vector<std::pair<std::string, std::string>> *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t *v65;
  std::string *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  int v71;
  int v72;
  int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  void **v82;
  int v83;
  __int128 v84;
  _QWORD *v85;
  std::string __p;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[3];
  uint64_t v90;
  uint64_t v91;
  std::string v92;
  std::string __s1;
  std::vector<std::pair<std::string, std::string>> v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  pxrInternal__aapl__pxrReserved__::UsdObject *v99;
  pxrInternal__aapl__pxrReserved__::UsdObject *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  std::string v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v89[0] = MEMORY[0x24BEE9D88] + 16;
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  v7 = *((_QWORD *)Data + 27);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v7 &= 0xFFFFFFFFFFFFFFF8;
  }
  v84 = 0uLL;
  v85 = 0;
  v109 = (unint64_t)&v84;
  LOBYTE(v110) = 0;
  v10 = operator new(8uLL);
  *(_QWORD *)&v84 = v10;
  *((_QWORD *)&v84 + 1) = v10;
  *v10 = v7;
  v85 = v10 + 1;
  if ((v7 & 7) != 0)
  {
    v11 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)&v84 + 1) = v10 + 1;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
  v109 = (unint64_t)&v84;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
  if ((v7 & 7) != 0)
  {
    v13 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  if (v88 && (*(_BYTE *)(v88 + 57) & 8) == 0 && ((*(uint64_t (**)(uint64_t *))(v87 + 32))(&v87) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v87, &v84);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a1, (int *)&v84);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a1 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v84);
    MEMORY[0x2348B274C](&v109, "diffuseColor");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v87, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v109);
    if ((v109 & 7) != 0)
    {
      v15 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    MEMORY[0x2348B274C](&v105, "opacity");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v87, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v105);
    if ((v105 & 7) != 0)
    {
      v17 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v84)
      && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
      && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v109)
      && (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) != 0
      && MEMORY[0x2348B37CC](&v84)
      && MEMORY[0x2348B37CC](&v109))
    {
      LODWORD(v103) = 1;
      v104.__r_.__value_.__r.__words[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v104.__r_.__value_.__r.__words[2] = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v19 = MEMORY[0x24BEE9DC0];
      v108 = 0;
      v105 = MEMORY[0x24BEE9DC0] + 16;
      if ((v104.__r_.__value_.__s.__data_[16] & 7) != 0)
      {
        v20 = (unsigned int *)(v104.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v104.__r_.__value_.__l.__size_);
      if (v104.__r_.__value_.__r.__words[0])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v104.__r_.__value_.__l.__data_);
      LODWORD(v99) = 1;
      v100 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v102 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v104.__r_.__value_.__r.__words[2] = 0;
      v103 = (char *)(v19 + 16);
      if ((v102 & 7) != 0)
      {
        v22 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
      if (v100)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v100);
      v97 = 0;
      v98 = 0;
      v96 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v99, &v106, &v107);
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v94, (uint64_t *)&v104, &v104.__r_.__value_.__r.__words[1]);
      realityio::getFileResolvedPath(&__s1);
      realityio::getFileResolvedPath(&v92);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v99, &v91);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v94, &v90);
      v25 = v90;
      v24 = v91;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v90);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v91);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        size = __s1.__r_.__value_.__l.__size_;
      v27 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
      if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = v92.__r_.__value_.__l.__size_;
      if (size == v27)
      {
        if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = &v92;
        else
          v28 = (std::string *)v92.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v37 = memcmp(__s1.__r_.__value_.__l.__data_, v28, __s1.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v29 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
          p_s1 = &__s1;
          do
          {
            v32 = p_s1->__r_.__value_.__s.__data_[0];
            p_s1 = (std::string *)((char *)p_s1 + 1);
            v31 = v32;
            v34 = v28->__r_.__value_.__s.__data_[0];
            v28 = (std::string *)((char *)v28 + 1);
            v33 = v34;
            v36 = v29-- != 0;
            v37 = v31 == v33;
          }
          while (v31 == v33 && v36);
        }
        else
        {
          v37 = 1;
        }
      }
      else
      {
        v37 = 0;
      }
      if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0)
        v71 = 1;
      else
        v71 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
      v72 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
      v73 = v24 == v25 || v37;
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if ((v95 & 7) != 0)
      {
        v74 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94.__end_cap_);
      if (v94.__end_)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v94.__end_);
      if ((v102 & 7) != 0)
      {
        v76 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
      if (v100)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v100);
      if ((v97 & 7) != 0)
      {
        v78 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      v83 = v73 & v71 & v72;
      if ((v98 & 7) != 0)
      {
        v80 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      MEMORY[0x2348B2350](&v103);
      MEMORY[0x2348B2350](&v105);
    }
    else
    {
      v83 = 0;
    }
    if ((v112 & 7) != 0)
    {
      v39 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stlxr(v40 - 2, v39));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v111);
    if (v110)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v110);
    if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v41 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v85);
    if (*((_QWORD *)&v84 + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v84 + 1));
    *(_QWORD *)(a2 + 8) = 0;
    v43 = (_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = a2 + 8;
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v87);
    v44 = v99;
    v45 = (uint64_t)v100;
    if (v99 != v100)
    {
      v82 = (void **)(MEMORY[0x24BEE9DC0] + 16);
      while (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v44)
           || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
           || !MEMORY[0x2348B37CC](v44))
      {
LABEL_128:
        v44 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v44 + 32);
        if (v44 == (pxrInternal__aapl__pxrReserved__::UsdObject *)v45)
          goto LABEL_148;
      }
      LODWORD(v84) = 1;
      *((_QWORD *)&v84 + 1) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      __p.__r_.__value_.__r.__words[0] = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v112 = 0;
      v109 = (unint64_t)v82;
      if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v46 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v85);
      if (*((_QWORD *)&v84 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v84 + 1));
      __s1.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v97) = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v105, &v110, &v111);
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v84, &v110, &v111);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v84, &v92);
      if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v48 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v85);
      if (*((_QWORD *)&v84 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v84 + 1));
      BaseName = pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(v44);
      if (v83)
      {
        BaseName = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if ((_DWORD)BaseName)
        {
          BaseName = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
          if ((BaseName & 1) != 0)
          {
LABEL_116:
            if ((v98 & 7) != 0)
            {
              v59 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
              do
                v60 = __ldxr(v59);
              while (__stlxr(v60 - 2, v59));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v92);
            if ((v108 & 7) != 0)
            {
              v61 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
              do
                v62 = __ldxr(v61);
              while (__stlxr(v62 - 2, v61));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107);
            if (v106)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v106);
            if ((__s1.__r_.__value_.__s.__data_[0] & 7) != 0)
            {
              v63 = (unsigned int *)(__s1.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v64 = __ldxr(v63);
              while (__stlxr(v64 - 2, v63));
            }
            MEMORY[0x2348B2350](&v109);
            goto LABEL_128;
          }
        }
      }
      v51 = (_QWORD *)*v43;
      if (!*v43)
        goto LABEL_97;
      v52 = (_QWORD *)(a2 + 8);
      do
      {
        BaseName = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v51 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v92);
        v53 = v51 + 1;
        if (!(_DWORD)BaseName)
        {
          v53 = v51;
          v52 = v51;
        }
        v51 = (_QWORD *)*v53;
      }
      while (*v53);
      if (v52 == v43
        || (BaseName = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v92, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v52 + 4)), (_DWORD)BaseName))
      {
LABEL_97:
        memset(&v94, 0, sizeof(v94));
        v54 = v98 & 0xFFFFFFFFFFFFFFF8;
        if ((v98 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v55 = (char *)(v54 + 16);
          if (*(char *)(v54 + 39) < 0)
            v55 = *(char **)v55;
        }
        else
        {
          v55 = "";
        }
        if ((__s1.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (__s1.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)BaseName);
        v103 = v55;
        if (*(char *)(EmptyString + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
          v55 = v103;
        }
        else
        {
          v57 = *(_OWORD *)EmptyString;
          v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
          *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v57;
        }
        std::string::basic_string[abi:ne180100]<0>(&v84, v55);
        __p = v104;
        memset(&v104, 0, sizeof(v104));
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v94, &v84);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v85) < 0)
          operator delete((void *)v84);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        *(_QWORD *)&v84 = &v92;
        v58 = (std::vector<std::pair<std::string, std::string>> *)(std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t **)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v92, (_DWORD **)&v84)+ 5);
        if (v58 == &v94)
          goto LABEL_115;
      }
      else
      {
        *(_QWORD *)&v84 = &v92;
        v65 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t **)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v92, (_DWORD **)&v84);
        memset(&v94, 0, sizeof(v94));
        v66 = std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((std::string *)&v94, (__int128 *)v65[5], (__int128 *)v65[6], 0xAAAAAAAAAAAAAAABLL * ((v65[6] - v65[5]) >> 4));
        v67 = v98 & 0xFFFFFFFFFFFFFFF8;
        if ((v98 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v68 = (char *)(v67 + 16);
          if (*(char *)(v67 + 39) < 0)
            v68 = *(char **)v68;
        }
        else
        {
          v68 = "";
        }
        if ((__s1.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          v69 = (__s1.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v69 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v66);
        v103 = v68;
        if (*(char *)(v69 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v69, *(_QWORD *)(v69 + 8));
          v68 = v103;
        }
        else
        {
          v70 = *(_OWORD *)v69;
          v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(v69 + 16);
          *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v70;
        }
        std::string::basic_string[abi:ne180100]<0>(&v84, v68);
        __p = v104;
        memset(&v104, 0, sizeof(v104));
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v94, &v84);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v85) < 0)
          operator delete((void *)v84);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        *(_QWORD *)&v84 = &v92;
        v58 = (std::vector<std::pair<std::string, std::string>> *)(std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t **)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v92, (_DWORD **)&v84)+ 5);
        if (v58 == &v94)
          goto LABEL_115;
      }
      std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v58, &v94.__begin_->first, (__int128 *)v94.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v94.__end_ - (char *)v94.__begin_) >> 4));
LABEL_115:
      *(_QWORD *)&v84 = &v94;
      std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
      goto LABEL_116;
    }
LABEL_148:
    *(_QWORD *)&v84 = &v99;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = a2 + 8;
  }
  MEMORY[0x2348B1EC4](&v87);
  return MEMORY[0x2348B20B0](v89);
}

void sub_23016E0F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;

  if (a36 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a43);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v43 - 216));
  v45 = *(_QWORD *)(v43 - 232);
  if ((v45 & 7) != 0)
  {
    v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v47 = __ldxr(v46);
    while (__stlxr(v47 - 2, v46));
  }
  v48 = *(_QWORD *)(v43 - 224);
  if ((v48 & 7) != 0)
  {
    v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  MEMORY[0x2348B2350](v43 - 184);
  MEMORY[0x2348B2350](v43 - 152);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v43 - 120));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a17);
  __clang_call_terminate(a1);
}

void realityio::TexcoordID::computeNormalizedName(realityio::TexcoordID *this)
{
  uint64_t v2;
  std::string *v3;
  std::string::size_type v4;
  char v5;
  std::string::size_type v6;
  void **v7;
  std::string *v8;
  _BOOL4 v11;
  unint64_t v12;
  std::string::size_type size;
  std::string *v14;
  NSObject *v15;
  unint64_t v16;
  const char *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  std::string v23;
  std::string v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    std::to_string(&v24, *((_DWORD *)this + 1));
    v3 = std::string::insert(&v24, 0, "UV");
    v4 = v3->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v3->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
    v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)this + 39) < 0)
      operator delete(*((void **)this + 2));
    v6 = v23.__r_.__value_.__r.__words[0];
    *((_QWORD *)this + 2) = v4;
    *((_QWORD *)this + 3) = v6;
    *(_QWORD *)((char *)this + 31) = *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7);
    *((_BYTE *)this + 39) = v5;
    goto LABEL_70;
  }
  if ((v2 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  pxrInternal__aapl__pxrReserved__::TfStringToUpper();
  v7 = (void **)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 4) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
  v8 = std::string::basic_string(&v24, (const std::string *)((char *)this + 16), 0, 9uLL, (std::allocator<char> *)&v23);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) != 9)
      goto LABEL_30;
    if (v24.__r_.__value_.__r.__words[0] != 0x535241564D495250 || v24.__r_.__value_.__s.__data_[8] != 58)
      goto LABEL_30;
    goto LABEL_26;
  }
  if (v24.__r_.__value_.__l.__size_ != 9)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    goto LABEL_30;
  }
  v11 = *(_QWORD *)v24.__r_.__value_.__l.__data_ != 0x535241564D495250
     || *(_BYTE *)(v24.__r_.__value_.__r.__words[0] + 8) != 58;
  operator delete(v24.__r_.__value_.__l.__data_);
  if (!v11)
  {
LABEL_26:
    v8 = std::string::basic_string(&v24, (const std::string *)((char *)this + 16), 9uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
    if (*((char *)this + 39) < 0)
      operator delete(*v7);
    *(_OWORD *)v7 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 4) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
  }
LABEL_30:
  if (*((char *)this + 39) < 0)
    v12 = *((_QWORD *)this + 3);
  else
    v12 = *((unsigned __int8 *)this + 39);
  if (v12 >= 2)
  {
    std::string::basic_string(&v24, (const std::string *)((char *)this + 16), 0, 2uLL, (std::allocator<char> *)&v23);
    std::string::basic_string(&v23, (const std::string *)((char *)this + 16), 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v21);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    if (!size)
    {
      if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (v24.__r_.__value_.__l.__size_ != 2)
          goto LABEL_68;
        v18 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(v24.__r_.__value_.__r.__words[2]) != 2)
          goto LABEL_68;
        v18 = &v24;
      }
      if (LOWORD(v18->__r_.__value_.__l.__data_) == 21587)
        MEMORY[0x2348B4AD4]((char *)this + 16, "UV0");
      goto LABEL_68;
    }
    if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v24.__r_.__value_.__l.__size_ != 2)
        goto LABEL_68;
      v14 = (std::string *)v24.__r_.__value_.__r.__words[0];
      if (*(_WORD *)v24.__r_.__value_.__l.__data_ != 22101)
        goto LABEL_51;
    }
    else
    {
      if (HIBYTE(v24.__r_.__value_.__r.__words[2]) != 2)
        goto LABEL_68;
      if (LOWORD(v24.__r_.__value_.__l.__data_) != 22101)
      {
        v14 = &v24;
LABEL_51:
        if (LOWORD(v14->__r_.__value_.__l.__data_) == 21587)
          goto LABEL_52;
LABEL_68:
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
LABEL_70:
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        return;
      }
    }
LABEL_52:
    v19 = 0;
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v23;
    else
      v20 = (std::string *)v23.__r_.__value_.__r.__words[0];
    while (memchr("0123456789", v20->__r_.__value_.__s.__data_[v19], 0xAuLL))
    {
      if (size == ++v19)
        goto LABEL_65;
    }
    if (v19 != -1)
      goto LABEL_68;
LABEL_65:
    std::operator+<char>();
    if (*((char *)this + 39) < 0)
      operator delete(*v7);
    *(_OWORD *)v7 = v21;
    *((_QWORD *)this + 4) = v22;
    goto LABEL_68;
  }
  v15 = *(NSObject **)(realityio::logObjects((realityio *)v8) + 24);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      v17 = (const char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0)
        v17 = *(const char **)v17;
    }
    else
    {
      v17 = "";
    }
    LODWORD(v24.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    _os_log_impl(&dword_22FF26000, v15, OS_LOG_TYPE_DEFAULT, "Invalid Primvar Name '%s'", (uint8_t *)&v24, 0xCu);
  }
}

void sub_23016E688(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void realityio::TexcoordID::getIndexFromName(realityio::TexcoordID *this)
{
  unint64_t v2;
  char v3;
  std::string::size_type size;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string::size_type v8;
  uint64_t v9;
  int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t EmptyString;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  std::string v25;
  void *__p[2];
  std::string::size_type v27;
  uint64_t v28;
  std::string v29;
  std::string v30;

  if (*((char *)this + 39) < 0)
    v2 = *((_QWORD *)this + 3);
  else
    v2 = *((unsigned __int8 *)this + 39);
  if (v2 <= 1)
  {
    *((_DWORD *)this + 1) = -1;
    return;
  }
  std::string::basic_string(&v30, (const std::string *)((char *)this + 16), 0, 2uLL, (std::allocator<char> *)&v29);
  std::string::basic_string(&v29, (const std::string *)((char *)this + 16), 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
  v3 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v29.__r_.__value_.__l.__size_;
    if (v29.__r_.__value_.__l.__size_)
    {
LABEL_10:
      if (size >= 3)
        goto LABEL_37;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v30.__r_.__value_.__l.__size_ != 2)
          goto LABEL_37;
        v5 = (std::string *)v30.__r_.__value_.__r.__words[0];
        if (*(_WORD *)v30.__r_.__value_.__l.__data_ != 22101)
          goto LABEL_24;
      }
      else
      {
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) != 2)
          goto LABEL_37;
        if (LOWORD(v30.__r_.__value_.__l.__data_) != 22101)
        {
          v5 = &v30;
LABEL_24:
          if (LOWORD(v5->__r_.__value_.__l.__data_) == 21587)
            goto LABEL_25;
LABEL_37:
          *((_DWORD *)this + 1) = -1;
          goto LABEL_38;
        }
      }
LABEL_25:
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v29;
      else
        v7 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      else
        v8 = v29.__r_.__value_.__l.__size_;
      if (!v8)
        goto LABEL_43;
      v9 = 0;
      while (memchr("0123456789", v7->__r_.__value_.__s.__data_[v9], 0xAuLL))
      {
        if (v8 == ++v9)
          goto LABEL_43;
      }
      if (v9 == -1)
      {
LABEL_43:
        v10 = atoi((const char *)v7);
        *((_DWORD *)this + 1) = v10;
        if (v10 >= 8)
        {
          *((_DWORD *)this + 1) = -1;
          v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::string::basic_string[abi:ne180100]<0>(&v25, "error:");
          v13 = *((_QWORD *)this + 1);
          v12 = (uint64_t *)((char *)this + 8);
          v14 = v13 & 0xFFFFFFFFFFFFFFF8;
          if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = v14 + 16;
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
          v16 = *(char *)(EmptyString + 23);
          if (v16 >= 0)
            v17 = (const std::string::value_type *)EmptyString;
          else
            v17 = *(const std::string::value_type **)EmptyString;
          if (v16 >= 0)
            v18 = *(unsigned __int8 *)(EmptyString + 23);
          else
            v18 = *(_QWORD *)(EmptyString + 8);
          v19 = std::string::append(&v25, v17, v18);
          v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v27 = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x2348B2764](&v28, __p);
          if (&v28 == v12)
          {
            if ((v28 & 7) != 0)
            {
              v23 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
              do
                v24 = __ldxr(v23);
              while (__stlxr(v24 - 2, v23));
            }
          }
          else
          {
            if ((*v12 & 7) != 0)
            {
              v21 = (unsigned int *)(*v12 & 0xFFFFFFFFFFFFFFF8);
              do
                v22 = __ldxr(v21);
              while (__stlxr(v22 - 2, v21));
            }
            *v12 = v28;
            v28 = 0;
          }
          if (SHIBYTE(v27) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v25.__r_.__value_.__l.__data_);
          v3 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        }
        goto LABEL_38;
      }
      goto LABEL_37;
    }
  }
  else if (*((_BYTE *)&v29.__r_.__value_.__s + 23))
  {
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    goto LABEL_10;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v30.__r_.__value_.__l.__size_ != 2)
      goto LABEL_37;
    v6 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) != 2)
      goto LABEL_37;
    v6 = &v30;
  }
  if (LOWORD(v6->__r_.__value_.__l.__data_) != 21587)
    goto LABEL_37;
  *((_DWORD *)this + 1) = 0;
LABEL_38:
  if (v3 < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

uint64_t realityio::TexcoordID::operator<(realityio::TexcoordID *a1, realityio::TexcoordID *a2)
{
  uint64_t v4;
  uint64_t EmptyString;
  uint64_t v6;
  size_t size;
  std::string::size_type v8;
  uint64_t v9;
  size_t v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_s1;
  uint64_t v14;
  int v15;
  std::string::size_type v16;
  void **v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  BOOL v26;
  unsigned int *v27;
  unsigned int v28;
  void **v29;
  std::string *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  const void **v38;
  int v39;
  std::string::size_type v40;
  void **v41;
  std::string *v42;
  void **v43;
  std::string *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  int v51;
  size_t v52;
  const void *v53;
  size_t v54;
  const void *v55;
  size_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  std::string *v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  const std::string::value_type *v67;
  std::string::size_type v68;
  std::string *v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  std::string *v72;
  uint64_t v73;
  size_t v74;
  std::string::size_type v75;
  int v76;
  std::string::size_type v77;
  std::string *p_p;
  std::string *v79;
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  std::string::size_type v83;
  std::string *v84;
  std::string *v85;
  uint64_t v86;
  std::string::size_type v87;
  int v88;
  int v89;
  std::string::size_type v90;
  std::string *v91;
  std::string *v92;
  uint64_t v93;
  size_t v94;
  int v95;
  std::string::size_type v96;
  int v97;
  std::string *v98;
  std::string *v99;
  uint64_t v100;
  std::string::size_type v101;
  int v102;
  int v103;
  std::string::size_type v104;
  std::string *v105;
  std::string *v106;
  uint64_t v107;
  BOOL v108;
  std::string::size_type v109;
  int v110;
  std::string *v111;
  std::string *v112;
  uint64_t v113;
  std::string::size_type v114;
  int v115;
  int v116;
  std::string::size_type v117;
  std::string *v118;
  std::string *v119;
  size_t v120;
  std::string::size_type v121;
  int v122;
  std::string *v123;
  uint64_t v124;
  std::string *v125;
  int v126;
  int v127;
  int v128;
  int v129;
  BOOL v131;
  BOOL v132;
  _BOOL4 v133;
  std::string::size_type v134;
  std::string *v135;
  std::string::size_type v136;
  std::string *v137;
  size_t v138;
  int v139;
  size_t v141;
  size_t v142;
  unsigned int v143;
  std::string v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string __p;
  std::string v149;
  std::string __s1;
  void *v151[2];
  unsigned __int8 v152;
  void **v153;
  std::string::size_type v154;
  unsigned __int8 v155;
  void *v156[2];
  unsigned __int8 v157;
  void **v158;
  std::string::size_type v159;
  unsigned __int8 v160;

  std::string::basic_string[abi:ne180100]<0>(&v158, "ST");
  std::string::basic_string[abi:ne180100]<0>(v156, "UV");
  std::string::basic_string[abi:ne180100]<0>(&v153, "PRIMVARS:ST");
  std::string::basic_string[abi:ne180100]<0>(v151, "PRIMVARS:UV");
  v4 = *(_BYTE *)a1 != 0;
  if ((*(_BYTE *)a1 != 0) == (*(_BYTE *)a2 != 0))
  {
    realityio::TexcoordID::getNormalizedName(a1, &__s1);
    realityio::TexcoordID::getNormalizedName(a2, &v149);
    v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    size = __s1.__r_.__value_.__l.__size_;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v8 = __s1.__r_.__value_.__l.__size_;
    v9 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
    v10 = v149.__r_.__value_.__l.__size_;
    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
    else
      v11 = v149.__r_.__value_.__l.__size_;
    if (v8 != v11)
      goto LABEL_19;
    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v149;
    else
      v12 = (std::string *)v149.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      EmptyString = memcmp(__s1.__r_.__value_.__l.__data_, v12, __s1.__r_.__value_.__l.__size_);
      if ((_DWORD)EmptyString)
        goto LABEL_19;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      v14 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == v12->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v12 = (std::string *)((char *)v12 + 1);
        if (!--v14)
          goto LABEL_32;
      }
LABEL_19:
      v15 = (char)v160;
      if ((v160 & 0x80u) == 0)
        v16 = v160;
      else
        v16 = v159;
      if (v8 == v16)
      {
        if ((v160 & 0x80u) == 0)
          v17 = (void **)&v158;
        else
          v17 = v158;
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v17, size))
            goto LABEL_95;
        }
        else
        {
          if (!(_DWORD)v6)
            goto LABEL_95;
          v18 = &__s1;
          v19 = v6;
          while (v18->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v17)
          {
            v18 = (std::string *)((char *)v18 + 1);
            v17 = (void **)((char *)v17 + 1);
            if (!--v19)
              goto LABEL_95;
          }
        }
      }
      if (v11 == v16)
      {
        if (v15 >= 0)
          v29 = (void **)&v158;
        else
          v29 = v158;
        if ((v9 & 0x80) != 0)
        {
          if (!memcmp(v149.__r_.__value_.__l.__data_, v29, v10))
            goto LABEL_288;
        }
        else
        {
          if (!(_DWORD)v9)
            goto LABEL_288;
          v30 = &v149;
          v31 = v9;
          while (v30->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v29)
          {
            v30 = (std::string *)((char *)v30 + 1);
            v29 = (void **)((char *)v29 + 1);
            if (!--v31)
              goto LABEL_288;
          }
        }
      }
      v39 = (char)v155;
      if ((v155 & 0x80u) == 0)
        v40 = v155;
      else
        v40 = v154;
      if (v8 != v40)
      {
LABEL_85:
        if (v11 == v40)
        {
          if (v39 >= 0)
            v43 = (void **)&v153;
          else
            v43 = v153;
          if ((v9 & 0x80) == 0)
          {
            if ((_DWORD)v9)
            {
              v44 = &v149;
              while (v44->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v43)
              {
                v4 = 0;
                v44 = (std::string *)((char *)v44 + 1);
                v43 = (void **)((char *)v43 + 1);
                if (!--v9)
                  goto LABEL_307;
              }
              goto LABEL_129;
            }
LABEL_288:
            v4 = 0;
            goto LABEL_307;
          }
          if (!memcmp(v149.__r_.__value_.__l.__data_, v43, v10))
            goto LABEL_288;
        }
LABEL_129:
        v60 = 0;
        while (1)
        {
          std::to_string(&v147, v60);
          if ((v160 & 0x80u) == 0)
            v61 = (const std::string::value_type *)&v158;
          else
            v61 = (const std::string::value_type *)v158;
          if ((v160 & 0x80u) == 0)
            v62 = v160;
          else
            v62 = v159;
          v63 = std::string::insert(&v147, 0, v61, v62);
          __p = *v63;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v147.__r_.__value_.__l.__data_);
          std::to_string(&v146, v60);
          if ((v157 & 0x80u) == 0)
            v64 = (const std::string::value_type *)v156;
          else
            v64 = (const std::string::value_type *)v156[0];
          if ((v157 & 0x80u) == 0)
            v65 = v157;
          else
            v65 = (std::string::size_type)v156[1];
          v66 = std::string::insert(&v146, 0, v64, v65);
          v147 = *v66;
          v66->__r_.__value_.__l.__size_ = 0;
          v66->__r_.__value_.__r.__words[2] = 0;
          v66->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v146.__r_.__value_.__l.__data_);
          std::to_string(&v145, v60);
          if ((v155 & 0x80u) == 0)
            v67 = (const std::string::value_type *)&v153;
          else
            v67 = (const std::string::value_type *)v153;
          if ((v155 & 0x80u) == 0)
            v68 = v155;
          else
            v68 = v154;
          v69 = std::string::insert(&v145, 0, v67, v68);
          v146 = *v69;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v145.__r_.__value_.__l.__data_);
          std::to_string(&v144, v60);
          if ((v152 & 0x80u) == 0)
            v70 = (const std::string::value_type *)v151;
          else
            v70 = (const std::string::value_type *)v151[0];
          if ((v152 & 0x80u) == 0)
            v71 = v152;
          else
            v71 = (std::string::size_type)v151[1];
          v72 = std::string::insert(&v144, 0, v70, v71);
          v145 = *v72;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v144.__r_.__value_.__l.__data_);
          v73 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          v74 = __s1.__r_.__value_.__l.__size_;
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            v75 = __s1.__r_.__value_.__l.__size_;
          v76 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v77 = __p.__r_.__value_.__l.__size_;
          if (v75 == v77)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (!memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_))
                goto LABEL_272;
            }
            else
            {
              if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
                goto LABEL_272;
              v79 = &__s1;
              v80 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
              while (v79->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
              {
                v79 = (std::string *)((char *)v79 + 1);
                p_p = (std::string *)((char *)p_p + 1);
                if (!--v80)
                  goto LABEL_272;
              }
            }
          }
          v81 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
          v82 = v149.__r_.__value_.__l.__size_;
          if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v83 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
          else
            v83 = v149.__r_.__value_.__l.__size_;
          if (v83 == v77)
          {
            if (v76 >= 0)
              v84 = &__p;
            else
              v84 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((*((_BYTE *)&v149.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v87 = v83;
              v88 = memcmp(v149.__r_.__value_.__l.__data_, v84, v149.__r_.__value_.__l.__size_);
              v83 = v87;
              if (!v88)
                goto LABEL_256;
            }
            else
            {
              if (!*((_BYTE *)&v149.__r_.__value_.__s + 23))
                goto LABEL_256;
              v85 = &v149;
              v86 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
              while (v85->__r_.__value_.__s.__data_[0] == v84->__r_.__value_.__s.__data_[0])
              {
                v85 = (std::string *)((char *)v85 + 1);
                v84 = (std::string *)((char *)v84 + 1);
                if (!--v86)
                  goto LABEL_256;
              }
            }
          }
          v89 = SHIBYTE(v147.__r_.__value_.__r.__words[2]);
          if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v90 = HIBYTE(v147.__r_.__value_.__r.__words[2]);
          else
            v90 = v147.__r_.__value_.__l.__size_;
          if (v75 == v90)
          {
            if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v91 = &v147;
            else
              v91 = (std::string *)v147.__r_.__value_.__r.__words[0];
            if ((v73 & 0x80) != 0)
            {
              v94 = v74;
              v142 = v74;
              v95 = v76;
              v96 = v83;
              v97 = memcmp(__s1.__r_.__value_.__l.__data_, v91, v94);
              v83 = v96;
              v76 = v95;
              v74 = v142;
              if (!v97)
                goto LABEL_272;
            }
            else
            {
              if (!(_DWORD)v73)
                goto LABEL_272;
              v92 = &__s1;
              v93 = v73;
              while (v92->__r_.__value_.__s.__data_[0] == v91->__r_.__value_.__s.__data_[0])
              {
                v92 = (std::string *)((char *)v92 + 1);
                v91 = (std::string *)((char *)v91 + 1);
                if (!--v93)
                  goto LABEL_272;
              }
            }
          }
          if (v83 == v90)
          {
            if (v89 >= 0)
              v98 = &v147;
            else
              v98 = (std::string *)v147.__r_.__value_.__r.__words[0];
            if ((v81 & 0x80) != 0)
            {
              v101 = v83;
              v102 = memcmp(v149.__r_.__value_.__l.__data_, v98, v82);
              v83 = v101;
              if (!v102)
                goto LABEL_256;
            }
            else
            {
              if (!(_DWORD)v81)
                goto LABEL_256;
              v99 = &v149;
              v100 = v81;
              while (v99->__r_.__value_.__s.__data_[0] == v98->__r_.__value_.__s.__data_[0])
              {
                v99 = (std::string *)((char *)v99 + 1);
                v98 = (std::string *)((char *)v98 + 1);
                if (!--v100)
                  goto LABEL_256;
              }
            }
          }
          v141 = v82;
          v143 = v9;
          v103 = SHIBYTE(v146.__r_.__value_.__r.__words[2]);
          if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v104 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
          else
            v104 = v146.__r_.__value_.__l.__size_;
          if (v75 == v104)
          {
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v105 = &v146;
            else
              v105 = (std::string *)v146.__r_.__value_.__r.__words[0];
            if ((v73 & 0x80) != 0)
            {
              v109 = v83;
              v110 = memcmp(__s1.__r_.__value_.__l.__data_, v105, v74);
              v83 = v109;
              if (!v110)
                goto LABEL_272;
            }
            else
            {
              if (!(_DWORD)v73)
                goto LABEL_272;
              v106 = &__s1;
              v107 = v73;
              while (v106->__r_.__value_.__s.__data_[0] == v105->__r_.__value_.__s.__data_[0])
              {
                v108 = 0;
                v106 = (std::string *)((char *)v106 + 1);
                v105 = (std::string *)((char *)v105 + 1);
                v4 = 1;
                if (!--v107)
                  goto LABEL_273;
              }
            }
          }
          if (v83 == v104)
          {
            if (v103 >= 0)
              v111 = &v146;
            else
              v111 = (std::string *)v146.__r_.__value_.__r.__words[0];
            if ((v81 & 0x80) != 0)
            {
              v114 = v83;
              v115 = memcmp(v149.__r_.__value_.__l.__data_, v111, v141);
              v83 = v114;
              if (!v115)
              {
LABEL_256:
                v4 = 0;
                v108 = 0;
                goto LABEL_273;
              }
            }
            else
            {
              if (!(_DWORD)v81)
                goto LABEL_256;
              v112 = &v149;
              v113 = v81;
              while (v112->__r_.__value_.__s.__data_[0] == v111->__r_.__value_.__s.__data_[0])
              {
                v4 = 0;
                v108 = 0;
                v112 = (std::string *)((char *)v112 + 1);
                v111 = (std::string *)((char *)v111 + 1);
                if (!--v113)
                  goto LABEL_273;
              }
            }
          }
          v116 = SHIBYTE(v145.__r_.__value_.__r.__words[2]);
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v117 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          else
            v117 = v145.__r_.__value_.__l.__size_;
          if (v75 == v117)
          {
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v118 = &v145;
            else
              v118 = (std::string *)v145.__r_.__value_.__r.__words[0];
            if ((v73 & 0x80) != 0)
            {
              v120 = v74;
              v121 = v83;
              v122 = memcmp(__s1.__r_.__value_.__l.__data_, v118, v120);
              v83 = v121;
              if (!v122)
              {
LABEL_272:
                v108 = 0;
                v4 = 1;
                goto LABEL_273;
              }
            }
            else
            {
              if (!(_DWORD)v73)
                goto LABEL_272;
              v119 = &__s1;
              while (v119->__r_.__value_.__s.__data_[0] == v118->__r_.__value_.__s.__data_[0])
              {
                v108 = 0;
                v119 = (std::string *)((char *)v119 + 1);
                v118 = (std::string *)((char *)v118 + 1);
                v4 = 1;
                if (!--v73)
                  goto LABEL_273;
              }
            }
          }
          if (v83 == v117)
          {
            if (v116 >= 0)
              v123 = &v145;
            else
              v123 = (std::string *)v145.__r_.__value_.__r.__words[0];
            if ((v81 & 0x80) != 0)
            {
              v133 = memcmp(v149.__r_.__value_.__l.__data_, v123, v141) == 0;
            }
            else if ((_DWORD)v81)
            {
              v124 = v81 - 1;
              v125 = &v149;
              do
              {
                v127 = v125->__r_.__value_.__s.__data_[0];
                v125 = (std::string *)((char *)v125 + 1);
                v126 = v127;
                v129 = v123->__r_.__value_.__s.__data_[0];
                v123 = (std::string *)((char *)v123 + 1);
                v128 = v129;
                v131 = v124-- != 0;
                v132 = v126 == v128;
                v133 = v126 == v128;
              }
              while (v132 && v131);
            }
            else
            {
              v133 = 1;
            }
          }
          else
          {
            v133 = 0;
          }
          v108 = !v133;
          v4 = !v133 & v143;
LABEL_273:
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v145.__r_.__value_.__l.__data_);
          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v146.__r_.__value_.__l.__data_);
          if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v147.__r_.__value_.__l.__data_);
            if (v76 < 0)
LABEL_283:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else if (v76 < 0)
          {
            goto LABEL_283;
          }
          if (!v108)
            goto LABEL_307;
          ++v60;
          LODWORD(v9) = v4;
          if (v60 == 8)
          {
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v134 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            else
              v134 = __s1.__r_.__value_.__l.__size_;
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v135 = &__s1;
            else
              v135 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v136 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
            else
              v136 = v149.__r_.__value_.__l.__size_;
            if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v137 = &v149;
            else
              v137 = (std::string *)v149.__r_.__value_.__r.__words[0];
            if (v136 >= v134)
              v138 = v134;
            else
              v138 = v136;
            v139 = memcmp(v135, v137, v138);
            if (v139)
              v4 = v139 < 0;
            else
              v4 = v134 < v136;
            goto LABEL_307;
          }
        }
      }
      if ((v155 & 0x80u) == 0)
        v41 = (void **)&v153;
      else
        v41 = v153;
      if ((v6 & 0x80) != 0)
      {
        if (memcmp(__s1.__r_.__value_.__l.__data_, v41, size))
          goto LABEL_85;
      }
      else if ((_DWORD)v6)
      {
        v42 = &__s1;
        while (v42->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v41)
        {
          v42 = (std::string *)((char *)v42 + 1);
          v41 = (void **)((char *)v41 + 1);
          if (!--v6)
            goto LABEL_95;
        }
        goto LABEL_85;
      }
LABEL_95:
      v4 = 1;
      goto LABEL_307;
    }
LABEL_32:
    v20 = *((_QWORD *)a1 + 1);
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 2, v21));
      if ((v22 & 1) == 0)
        v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    if (v20)
    {
      v23 = *((_QWORD *)a2 + 1);
      if ((v23 & 7) != 0)
      {
        v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 2, v24));
        if ((v25 & 1) == 0)
          v23 &= 0xFFFFFFFFFFFFFFF8;
      }
      v26 = v23 == 0;
      if ((v23 & 7) != 0)
      {
        v27 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
    }
    else
    {
      v26 = 1;
    }
    if ((v20 & 7) != 0)
    {
      v32 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if (v26)
      goto LABEL_288;
    v34 = *((_QWORD *)a1 + 1);
    if ((v34 & 7) != 0)
    {
      v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 2, v35));
      if ((v36 & 1) == 0)
        v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    v37 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v38 = (const void **)(v37 + 4);
    }
    else
    {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      v38 = (const void **)EmptyString;
    }
    v45 = *((_QWORD *)a2 + 1);
    if ((v45 & 7) != 0)
    {
      v46 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 2, v46));
      if ((v47 & 1) == 0)
        v45 &= 0xFFFFFFFFFFFFFFF8;
    }
    v48 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    if ((v45 & 0xFFFFFFFFFFFFFFF8) != 0)
      v49 = (uint64_t)(v48 + 4);
    else
      v49 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
    v50 = *(char *)(v49 + 23);
    v51 = *((char *)v38 + 23);
    if (v51 >= 0)
      v52 = *((unsigned __int8 *)v38 + 23);
    else
      v52 = (size_t)v38[1];
    if (v51 >= 0)
      v53 = v38;
    else
      v53 = *v38;
    if (v50 >= 0)
      v54 = *(unsigned __int8 *)(v49 + 23);
    else
      v54 = *(_QWORD *)(v49 + 8);
    if (v50 >= 0)
      v55 = (const void *)v49;
    else
      v55 = *(const void **)v49;
    if (v54 >= v52)
      v56 = v52;
    else
      v56 = v54;
    v57 = memcmp(v53, v55, v56);
    if (v57)
      v4 = v57 < 0;
    else
      v4 = v52 < v54;
    if ((v45 & 7) != 0)
    {
      do
        v58 = __ldxr(v48);
      while (__stlxr(v58 - 2, v48));
    }
    if ((v34 & 7) != 0)
    {
      do
        v59 = __ldxr(v37);
      while (__stlxr(v59 - 2, v37));
    }
LABEL_307:
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v149.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
  }
  if ((char)v152 < 0)
    operator delete(v151[0]);
  if ((char)v155 < 0)
    operator delete(v153);
  if ((char)v157 < 0)
    operator delete(v156[0]);
  if ((char)v160 < 0)
    operator delete(v158);
  return v4;
}

uint64_t realityio::getCullMode(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *Data;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v4;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v5;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v6;
  realityio::tokens::MaterialBuilderTokens_StaticTokenType *v7;
  NSObject *v8;
  uint64_t Text;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  int v16;
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  Data = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)((char *)Data + 272));
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v17) & 1) != 0
    && pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>())
  {
    v4 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v4)
      v4 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
    if ((v21 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 36) & 0xFFFFFFFFFFFFFFF8))
    {
      v10 = 2;
    }
    else
    {
      v5 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v5)
        v5 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
      if ((v21 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 35) & 0xFFFFFFFFFFFFFFF8))
      {
        v10 = 1;
      }
      else
      {
        v6 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v6)
          v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
        if ((v21 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v6 + 37) & 0xFFFFFFFFFFFFFFF8))
        {
          v10 = 0;
        }
        else
        {
          v7 = (realityio::tokens::MaterialBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
          if (!v7)
            v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MaterialBuilderTokens);
          if ((v21 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v7 + 38) & 0xFFFFFFFFFFFFFFF8))
          {
            v8 = *(id *)(realityio::logObjects(v7) + 24);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, &v16);
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16);
              *(_DWORD *)buf = 136315138;
              v23 = Text;
              _os_log_impl(&dword_22FF26000, v8, OS_LOG_TYPE_DEFAULT, "Invalid culling token in '%s'. The available choices are \"front\", \"back\", \"none\" and \"unspecified\".", buf, 0xCu);
              pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16);
            }

          }
          v10 = 2;
        }
      }
    }
  }
  else
  {
    v10 = 2;
  }
  if ((v20 & 7) != 0)
  {
    v11 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  if (v18)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
  if ((v21 & 7) != 0)
  {
    v13 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  return v10;
}

void sub_23016F708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  unsigned int *v16;
  unsigned int v17;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);

  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a10);
  if ((a14 & 7) != 0)
  {
    v16 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::vector<std::pair<std::string, std::string>> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::pair<std::string, std::string> *, std::allocator<std::pair<std::string, std::string>>> *p_end_cap;
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  unint64_t v10;
  unint64_t v11;
  std::pair<std::string, std::string> *v12;
  std::string *v13;
  std::pair<std::string, std::string> *v14;
  std::vector<std::pair<std::string, std::string>>::pointer i;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) < a4)
  {
    std::vector<std::pair<std::string,std::string>>::__vdeallocate(this);
    if (a4 > 0x555555555555555)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](this, v11);
    v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (__int128 *)__str, a3, &this->__end_->first);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 4) < a4)
  {
    v13 = (std::string *)((char *)__str + 16 * (((char *)this->__end_ - (char *)begin) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(__str, v13, &begin->first);
    v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (__int128 *)v13, a3, &this->__end_->first);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  v14 = (std::pair<std::string, std::string> *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(__str, (std::string *)a3, &begin->first);
  for (i = this->__end_;
        i != v14;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)p_end_cap, (uint64_t)i))
  {
    --i;
  }
  this->__end_ = v14;
}

void sub_23016F8DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23016F8E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__vdeallocate(std::vector<std::pair<std::string, std::string>> *this)
{
  std::pair<std::string, std::string> *begin;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  std::vector<std::pair<std::string, std::string>>::pointer v4;

  begin = this->__begin_;
  if (this->__begin_)
  {
    end = this->__end_;
    v4 = this->__begin_;
    if (end != begin)
    {
      do
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&this->__end_cap_, (uint64_t)--end);
      while (end != begin);
      v4 = this->__begin_;
    }
    this->__end_ = begin;
    operator delete(v4);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      this += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t RIODependencyDescriptorGetTypeID()
{
  if (qword_255E54DF0 != -1)
    dispatch_once(&qword_255E54DF0, &__block_literal_global_34);
  return _MergedGlobals_54;
}

uint64_t RIOPxrUsdUtilsCopyAllDependencies()
{
  void ***v0;
  uint64_t v1;
  unsigned int **v2;
  unsigned int **v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int **v14;
  uint64_t Instance;
  uint64_t v16;
  __int128 v18;
  _QWORD v19[2];
  _OWORD v20[3];
  __int128 v21;
  uint64_t v22;
  unsigned int *v23;
  void **v24;
  void **v25;
  void **v26;
  void ***v27;
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)&v20[0] + 1) = 0;
  *(_QWORD *)&v20[1] = 0;
  *(_QWORD *)&v20[0] = (char *)v20 + 8;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)v20, *((char **)&v20[0] + 1));
  v22 = 0;
  v21 = 0u;
  memset(v20, 0, sizeof(v20));
  v27 = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtilsComputeAllDependencies();
  v0 = v27;
  if (v27 == &v24)
  {
    v1 = 4;
    v0 = &v24;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v1 = 5;
  }
  ((void (*)(void))(*v0)[v1])();
LABEL_6:
  v18 = 0uLL;
  v19[0] = 0;
  v2 = (unsigned int **)*((_QWORD *)&v20[0] + 1);
  v3 = *(unsigned int ***)&v20[0];
  v4 = *((_QWORD *)&v20[0] + 1) - *(_QWORD *)&v20[0];
  if (*((_QWORD *)&v20[0] + 1) != *(_QWORD *)&v20[0])
  {
    if (v4 < 0)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v28 = v19;
    v24 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v4 >> 3);
    v25 = v24;
    v26 = v24;
    v27 = (void ***)&v24[v5];
    std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__swap_out_circular_buffer((uint64_t *)&v18, &v24);
    std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((uint64_t)&v24);
    v2 = (unsigned int **)*((_QWORD *)&v20[0] + 1);
    v3 = *(unsigned int ***)&v20[0];
  }
  if (v3 != v2)
  {
    do
    {
      v23 = *v3;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v23);
      v6 = v23;
      if (v23)
      {
        v7 = (uint64_t *)*((_QWORD *)&v18 + 1);
        if (*((_QWORD *)&v18 + 1) >= v19[0])
        {
          v9 = (uint64_t)(*((_QWORD *)&v18 + 1) - v18) >> 3;
          if ((unint64_t)(v9 + 1) >> 61)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v10 = (uint64_t)(v19[0] - v18) >> 2;
          if (v10 <= v9 + 1)
            v10 = v9 + 1;
          if (v19[0] - (_QWORD)v18 >= 0x7FFFFFFFFFFFFFF8uLL)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v10;
          v28 = v19;
          if (v11)
          {
            v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v11);
            v6 = v23;
          }
          else
          {
            v12 = 0;
          }
          v24 = (void **)v11;
          v25 = (void **)(v11 + 8 * v9);
          v26 = v25;
          v27 = (void ***)(v11 + 8 * v12);
          *v25 = v6;
          pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(v11 + 8 * v9));
          ++v26;
          std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__swap_out_circular_buffer((uint64_t *)&v18, &v24);
          v8 = (uint64_t *)*((_QWORD *)&v18 + 1);
          std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((uint64_t)&v24);
        }
        else
        {
          **((_QWORD **)&v18 + 1) = v23;
          pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(v7);
          v8 = v7 + 1;
        }
        *((_QWORD *)&v18 + 1) = v8;
      }
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v23);
      ++v3;
    }
    while (v3 != v2);
    v2 = *(unsigned int ***)&v20[0];
  }
  if (v2)
  {
    v13 = (unsigned int **)*((_QWORD *)&v20[0] + 1);
    v14 = v2;
    if (*((unsigned int ***)&v20[0] + 1) != v2)
    {
      do
        v13 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(v13 - 1);
      while (v13 != v2);
      v14 = *(unsigned int ***)&v20[0];
    }
    *((_QWORD *)&v20[0] + 1) = v2;
    operator delete(v14);
  }
  v20[0] = v18;
  *(_QWORD *)&v20[1] = v19[0];
  v19[0] = 0;
  v18 = 0uLL;
  if (qword_255E54DF0 != -1)
    dispatch_once(&qword_255E54DF0, &__block_literal_global_34);
  Instance = _CFRuntimeCreateInstance();
  v16 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = v20[0];
    *(_QWORD *)(Instance + 32) = *(_QWORD *)&v20[1];
    memset(v20, 0, 24);
    *(_OWORD *)(Instance + 40) = *(_OWORD *)((char *)&v20[1] + 8);
    *(_QWORD *)(Instance + 56) = *((_QWORD *)&v20[2] + 1);
    memset((char *)&v20[1] + 8, 0, 24);
    *(_QWORD *)(Instance + 80) = 0;
    *(_OWORD *)(Instance + 64) = v21;
    *(_QWORD *)(Instance + 80) = v22;
    v21 = 0uLL;
    v22 = 0;
  }
  v24 = (void **)&v18;
  std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v24);
  v24 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
  v24 = (void **)&v20[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
  v24 = (void **)v20;
  std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v24);
  return v16;
}

void sub_23016FD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,char a23)
{
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((uint64_t)&a23);
  a22 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&a22);
  realityio::DependencyDescriptor::~DependencyDescriptor(&a13);
  _Unwind_Resume(a1);
}

void realityio::DependencyDescriptor::~DependencyDescriptor(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

__CFArray *RIODependencyDescriptorCopyLayers(uint64_t a1)
{
  __CFArray *Mutable;
  _QWORD *v3;
  _QWORD *i;
  uint64_t Instance;
  const void *v6;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v3 = *(_QWORD **)(a1 + 16);
  for (i = *(_QWORD **)(a1 + 24); v3 != i; ++v3)
  {
    if (RIOPxrSdfLayerGetTypeID::onceToken != -1)
      dispatch_once(&RIOPxrSdfLayerGetTypeID::onceToken, &__block_literal_global_11);
    Instance = _CFRuntimeCreateInstance();
    v6 = (const void *)Instance;
    if (Instance)
    {
      *(_QWORD *)(Instance + 16) = *v3;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(Instance + 16));
    }
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v6);
  }
  return Mutable;
}

__CFArray *RIODependencyDescriptorCopyAssets(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  CFStringRef v6;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  while (v3 != v4)
  {
    v5 = (const char *)v3;
    if (*(char *)(v3 + 23) < 0)
      v5 = *(const char **)v3;
    v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v6);
    v3 += 24;
  }
  return Mutable;
}

__CFArray *RIODependencyDescriptorCopyUnresolvedPaths(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  CFStringRef v6;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  while (v3 != v4)
  {
    v5 = (const char *)v3;
    if (*(char *)(v3 + 23) < 0)
      v5 = *(const char **)v3;
    v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v6);
    v3 += 24;
  }
  return Mutable;
}

pxrInternal__aapl__pxrReserved__::SdfLayer *RIOGetLoadedLayerIdentifiers()
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *Mutable;
  _QWORD *v1;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  uint64_t Identifier;
  const char *v4;
  CFStringRef v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  _QWORD **v10;
  _QWORD *v11[2];

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetLoadedLayers(Mutable);
  v1 = v10;
  if (v10 != v11)
  {
    do
    {
      v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v1 + 4);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v2);
      if (*(char *)(Identifier + 23) >= 0)
        v4 = (const char *)Identifier;
      else
        v4 = *(const char **)Identifier;
      v5 = CFStringCreateWithCString(0, v4, 0x8000100u);
      CFArrayAppendValue(Mutable, v5);
      CFRelease(v5);
      v6 = (_QWORD *)v1[1];
      if (v6)
      {
        do
        {
          v7 = (_QWORD **)v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD **)v1[2];
          v8 = *v7 == v1;
          v1 = v7;
        }
        while (!v8);
      }
      v1 = v7;
    }
    while (v7 != v11);
  }
  std::__tree<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::destroy(v11[0]);
  return Mutable;
}

void sub_230170188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::destroy(a11);
  _Unwind_Resume(a1);
}

void _RIODependencyDescriptorCFFinalize(void **a1)
{
  void **v2;
  void **v3;

  v2 = a1 + 2;
  v3 = a1 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1 + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

BOOL _RIODependencyDescriptorCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIODependencyDescriptorCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIODependencyDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIODependencyDescriptor %p>"), a1);
}

CFStringRef _RIODependencyDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIODependencyDescriptor %p>"), a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  unsigned int **v2;
  unsigned int **v4;
  void *v5;

  v1 = *a1;
  v2 = (unsigned int **)**a1;
  if (v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  for (i = -8; v4 + i + 8 != v5; i -= 8)
  {
    v8 = (uint64_t *)(v6 + i);
    *v8 = *(_QWORD *)(v4 + i);
    result = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(v8);
  }
  v9 = v6 + i + 8;
  a2[1] = v9;
  v10 = *v3;
  *v3 = v9;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr((unsigned int **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::destroy(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (a1)
  {
    std::__tree<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::destroy(*a1);
    std::__tree<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::destroy(a1[1]);
    v2 = (unsigned int *)a1[5];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
    operator delete(a1);
  }
}

realityio::ArbitraryComponentBuilder *realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(realityio::ArbitraryComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void ***v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  void **v29[3];
  _QWORD *v30[3];
  _BYTE v31[8];
  _QWORD *v32;
  __int128 v33;
  _QWORD *v34[3];
  _QWORD *v35[3];
  __int128 v36;
  _QWORD *v37[3];
  uint64_t v38;
  uint64_t v39;
  void ***v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v27, "ArbitraryComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kArbitraryComponentBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54E70);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54E70))
  {
    v15 = operator new();
    v16 = operator new();
    memset(v35, 0, sizeof(v35));
    v17 = (_BYTE *)operator new();
    MEMORY[0x2348B274C](&v45, "RealityKitComponent");
    MEMORY[0x2348B274C](&v46, "RealityKitCustomComponent");
    MEMORY[0x2348B274C](&v47, "Component");
    MEMORY[0x2348B274C](&v48, "CustomComponent");
    std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100]((uint64_t)v31, (uint64_t *)&v45, 4);
    memset(v30, 0, sizeof(v30));
    memset(v29, 0, sizeof(v29));
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v17, (uint64_t)v31, v30, v29);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v33, (uint64_t)v17);
    v49 = v33;
    v33 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v34, &v49, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v35, v34);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v36, v16);
    v50 = v36;
    v36 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v37, &v50, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v37);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v38, v15);
    _MergedGlobals_55 = v38;
    *(_QWORD *)algn_255E54E68 = v39;
    v38 = 0;
    v39 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
    v40 = (void ***)v37;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v50);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
    v40 = (void ***)v34;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v49);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
    v40 = v29;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    v29[0] = (void **)v30;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v29);
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)v31, v32);
    v18 = (void ***)&v49;
    do
    {
      v20 = (uint64_t)*--v18;
      v19 = v20;
      if ((v20 & 7) != 0)
      {
        v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
    }
    while (v18 != &v45);
    v45 = (void **)v35;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v45);
    __cxa_guard_release(&qword_255E54E70);
  }
  v23 = _MergedGlobals_55;
  v24 = *(std::__shared_weak_count **)algn_255E54E68;
  if (*(_QWORD *)algn_255E54E68)
  {
    v5 = (unint64_t *)(*(_QWORD *)algn_255E54E68 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v44 = v43;
  v41[0] = &off_24FDFC128;
  v42 = v41;
  v43[0] = &off_24FDFC028;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v27, (uint64_t)__p, &v23, (uint64_t)v43, (uint64_t)v41);
  v7 = v42;
  if (v42 == v41)
  {
    v8 = 4;
    v7 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
LABEL_10:
  v9 = v44;
  if (v44 == v43)
  {
    v10 = 4;
    v9 = v43;
    goto LABEL_14;
  }
  if (v44)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  v11 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  *(_QWORD *)this = &off_24FDFBC58;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = (char *)this + 288;
  return this;
}

void sub_23017089C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,_QWORD *a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v42 - 112);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  *(_QWORD *)(v42 - 232) = &a35;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 232));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v42 - 128);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  *(_QWORD *)(v42 - 232) = &a23;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 232));
  a23 = &a26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&a30, a31);
  v44 = v42 - 128;
  while (1)
  {
    v46 = *(_QWORD *)(v44 - 8);
    v44 -= 8;
    v45 = v46;
    if ((v46 & 7) != 0)
    {
      v47 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stlxr(v48 - 2, v47));
    }
    if (v44 == v42 - 160)
    {
      *(_QWORD *)(v42 - 160) = &a38;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 160));
      MEMORY[0x2348B4E1C](v41, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_255E54E70);
      if (a16 < 0)
        operator delete(__p);
      if (a22 < 0)
        operator delete(a17);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t MockREComponentClassGetComponentTypeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    REComponentClassGetName();
    return REGlobalTypeRegistryWithReadLock();
  }
  return result;
}

double ___Z40MockREComponentClassGetComponentTypeInfoP16REComponentClass_block_invoke(uint64_t a1)
{
  double result;
  uint64_t SubClassCount;
  uint64_t v4;
  uint64_t v5;
  const char *Name;
  _OWORD *v7;

  if (RETypeRegistryGetTypeInfoByTypeName())
  {
    SubClassCount = RETypeInfoGetSubClassCount();
    if (SubClassCount)
    {
      v4 = SubClassCount;
      v5 = 0;
      while (1)
      {
        RETypeInfoGetSubClass();
        if (REComponentClassFromTypeInfo())
        {
          Name = (const char *)REComponentClassGetName();
          if (!strcmp(**(const char ***)(a1 + 32), Name))
            break;
        }
        if (v4 == ++v5)
          return result;
      }
      v7 = *(_OWORD **)(a1 + 40);
      result = 0.0;
      *v7 = 0u;
      v7[1] = 0u;
    }
  }
  return result;
}

__n128 __copy_helper_block_ea8_32c72_ZTSKZ40MockREComponentClassGetComponentTypeInfoP16REComponentClassE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

void buildValueType(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t *a2, __int128 *a3, uint64_t *a4, const void **a5, realityio::ImportSession **a6, _BYTE *a7, int a8)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v11;
  realityio *IsValid;
  pxrInternal__aapl__pxrReserved__::UsdObject *v13;
  pxrInternal__aapl__pxrReserved__::UsdObject *v14;
  _QWORD *Name;
  unint64_t Data;
  pxrInternal__aapl__pxrReserved__::TfToken *v17;
  uint64_t EmptyString;
  __int128 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::TfToken *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  size_t v30;
  _BYTE *v31;
  const void *v32;
  char HasAttribute;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  pxrInternal__aapl__pxrReserved__::TfToken *Namespace;
  const std::string *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  _BOOL8 MemberInfo;
  _BOOL4 v55;
  unint64_t *v56;
  unint64_t v57;
  _BOOL4 v58;
  uint64_t EnumConstantCount;
  pxrInternal__aapl__pxrReserved__::TfToken *v60;
  unint64_t v61;
  NSObject *v62;
  uint64_t *v63;
  uint64_t Text;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  const char *EnumConstantName;
  size_t v70;
  std::string *v71;
  NSObject *v72;
  uint64_t v73;
  std::string *v74;
  unsigned int *v75;
  unsigned int v76;
  std::string *v77;
  std::string::size_type v78;
  uint64_t v79;
  unsigned int *v81;
  unsigned int v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  size_t Size;
  NSObject *v87;
  uint64_t v88;
  uint64_t *v89;
  pxrInternal__aapl__pxrReserved__::UsdObject *v90;
  pxrInternal__aapl__pxrReserved__::UsdObject *v91;
  pxrInternal__aapl__pxrReserved__::UsdStage *v92;
  pxrInternal__aapl__pxrReserved__::TfToken *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  pxrInternal__aapl__pxrReserved__::TfToken *v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  size_t v111;
  _BYTE *v112;
  const void *v113;
  char v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  _BOOL8 v125;
  _BOOL4 v126;
  unint64_t *v127;
  unint64_t v128;
  __int128 v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  std::string *v144;
  NSObject *v145;
  uint64_t *v146;
  _BYTE *v147;
  int HasCustomDataKey;
  unsigned int *v149;
  unsigned int v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  realityio *Targets;
  uint64_t v154;
  pxrInternal__aapl__pxrReserved__::UsdStage *v155;
  realityio *v156;
  uint64_t v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  NSObject *v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  NSObject *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  pxrInternal__aapl__pxrReserved__ *v191;
  uint64_t *UsdPrimDefaultPredicate;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v196;
  std::string::size_type v197;
  _QWORD *v198;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v199;
  uint64_t v200;
  std::string::size_type v201;
  _QWORD *v202;
  unsigned int *v203;
  _BOOL4 v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  pxrInternal__aapl__pxrReserved__::TfToken *v208;
  uint64_t v209;
  pxrInternal__aapl__pxrReserved__::TfToken *v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  _BOOL4 v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  __int128 v224;
  unint64_t *v225;
  unint64_t v226;
  void *v227;
  int v228;
  unsigned int *v229;
  unsigned int v230;
  unsigned int *v231;
  unsigned int v232;
  uint64_t (**v233)();
  unsigned int *v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t *v237;
  int v238;
  uint64_t *v239;
  unsigned int *v240;
  unsigned int v241;
  realityio *v242;
  uint64_t *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t *v246;
  _QWORD *v247;
  unsigned int *v248;
  unsigned int v249;
  std::string *v250;
  pxrInternal__aapl__pxrReserved__::UsdStage *v251;
  unsigned int *v252;
  unsigned int v253;
  int v254;
  unsigned int *v255;
  unsigned int v256;
  int v257;
  unsigned int *v258;
  unsigned int v259;
  char *v260;
  realityio *v261;
  unsigned int *v262;
  unsigned int v263;
  unint64_t v264;
  pxrInternal__aapl__pxrReserved__::UsdStage *v265;
  __int128 v266;
  uint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  unsigned int *v272;
  unsigned int v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  unsigned int *v277;
  unsigned int v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  unsigned int *v282;
  unsigned int v283;
  unsigned int *v284;
  unsigned int v285;
  char IsArray;
  char v287;
  void **v288;
  NSObject *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  NSObject *v297;
  std::string *v298;
  unint64_t v299;
  const char *v300;
  uint64_t v301;
  std::string *v302;
  uint64_t v303;
  unsigned int *v304;
  unsigned int v305;
  unsigned int *v306;
  unsigned int v307;
  void *v308;
  uint64_t v309;
  unint64_t i;
  __int128 v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  unsigned int *v320;
  unsigned int v321;
  unsigned int *v322;
  unsigned int v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  unsigned int *v327;
  unsigned int v328;
  unint64_t v329;
  uint64_t String;
  __int128 v331;
  uint64_t v332;
  __int128 v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  unsigned int *v340;
  unsigned int v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  pxrInternal__aapl__pxrReserved__::UsdObject *v345;
  unint64_t v346;
  uint64_t v347;
  __int128 v348;
  __int128 v349;
  _QWORD v354[2];
  __int128 v355;
  uint64_t v356;
  __int128 v357;
  uint64_t v358;
  __int128 v359;
  std::string v360;
  uint64_t v361;
  uint64_t v362[2];
  std::string v363;
  std::string v364;
  std::string v365;
  uint64_t v366;
  uint64_t v367;
  std::__shared_weak_count *v368;
  __int128 v369;
  uint64_t v370;
  std::__shared_weak_count *v371;
  uint64_t v372;
  std::__shared_weak_count *v373;
  __int128 v374;
  uint64_t v375[2];
  uint64_t v376[2];
  uint64_t v377[2];
  _QWORD v378[3];
  std::string v379;
  _OWORD v380[4];
  _OWORD v381[2];
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  _BYTE v388[32];
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401[2];
  _BYTE buf[32];
  __int128 v403;
  __int128 v404;
  _BYTE v405[32];
  uint64_t v406;
  _BYTE v407[32];
  uint64_t v408;
  _BYTE __p[32];
  __int128 v410;
  _BYTE v411[24];
  uint64_t v412;
  _OWORD v413[2];
  _OWORD v414[4];
  __int128 v415[12];
  __int128 v416[4];
  __int128 v417[2];
  pxrInternal__aapl__pxrReserved__::UsdObject *v418[2];
  __int128 v419;
  std::string v420;
  std::string *v421;
  _BYTE v422[32];
  _BYTE v423[32];
  __int128 v424;
  __int128 v425;
  void *__src[2];
  char v427;
  uint64_t v428;

  v11 = a1;
  v428 = *MEMORY[0x24BDAC8D0];
  IsValid = (realityio *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1);
  if ((IsValid & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes(v11);
    v13 = v418[0];
    v14 = v418[1];
    v347 = (uint64_t)v11;
    if (v418[0] != v418[1])
    {
      while (1)
      {
        Name = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v13);
        Data = atomic_load(&realityio::tokens::ArbitraryComponentBuilderTokens);
        if (!Data)
          Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType>>::_TryToCreateData();
        if ((*Name & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(Data + 16) & 0xFFFFFFFFFFFFFFF8)
          || (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue(v13) | a8) != 1)
        {
          goto LABEL_147;
        }
        v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v13);
        if ((*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
        if (*(char *)(EmptyString + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v365, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
        }
        else
        {
          v19 = *(_OWORD *)EmptyString;
          v365.__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
          *(_OWORD *)&v365.__r_.__value_.__l.__data_ = v19;
        }
        pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace(v13);
        MEMORY[0x2348B274C](buf, "");
        v20 = *(_QWORD *)__p;
        v21 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
        if ((buf[0] & 7) != 0)
        {
          do
            v22 = __ldxr(v21);
          while (__stlxr(v22 - 2, v21));
          v23 = *(_QWORD *)__p;
        }
        else
        {
          v23 = *(_QWORD *)__p;
        }
        if ((v23 & 7) != 0)
        {
          v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
        if ((unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8) == v21)
          goto LABEL_68;
        pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace(v13);
        pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(v13);
        v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](v407, "values");
        v27 = *(_QWORD *)v407;
        if ((*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v407 & 0xFFFFFFFFFFFFFFF8))
        {
          if ((*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8) != 0)
            v29 = (*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v29 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
          if (*(char *)(v29 + 23) >= 0)
            v30 = *(unsigned __int8 *)(v29 + 23);
          else
            v30 = *(_QWORD *)(v29 + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v30 + 7);
          if (__p[23] >= 0)
            v31 = __p;
          else
            v31 = *(_BYTE **)__p;
          if (v30)
          {
            if (*(char *)(v29 + 23) >= 0)
              v32 = (const void *)v29;
            else
              v32 = *(const void **)v29;
            memmove(v31, v32, v30);
          }
          strcpy(&v31[v30], ":counts");
          MEMORY[0x2348B2764](v405, __p);
          HasAttribute = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(v11, (const pxrInternal__aapl__pxrReserved__::TfToken *)v405);
          if ((v405[0] & 7) != 0)
          {
            v34 = (unsigned int *)(*(_QWORD *)v405 & 0xFFFFFFFFFFFFFFF8);
            do
              v35 = __ldxr(v34);
            while (__stlxr(v35 - 2, v34));
          }
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v28 = HasAttribute ^ 1;
          v27 = *(_QWORD *)v407;
        }
        else
        {
          v28 = 1;
        }
        if ((v27 & 7) != 0)
        {
          v36 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
          do
            v37 = __ldxr(v36);
          while (__stlxr(v37 - 2, v36));
        }
        if ((v28 & 1) == 0)
          break;
        if ((v388[0] & 7) != 0)
        {
          v38 = (unsigned int *)(*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
          do
            v39 = __ldxr(v38);
          while (__stlxr(v39 - 2, v38));
        }
        if ((buf[0] & 7) != 0)
        {
          v40 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
LABEL_143:
        if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v360.__r_.__value_.__l.__data_);
        if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v365.__r_.__value_.__l.__data_);
LABEL_147:
        v13 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v13 + 32);
        if (v13 == v14)
          goto LABEL_158;
      }
      Namespace = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace(v13);
      if ((*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8) != 0)
        v43 = (const std::string *)((*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v43 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Namespace);
      std::string::operator=(&v365, v43);
      if ((__p[0] & 7) != 0)
      {
        v44 = (unsigned int *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v360.__r_.__value_.__l.__data_);
      v360 = *(std::string *)__p;
      if ((v388[0] & 7) != 0)
      {
        v46 = (unsigned int *)(*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((buf[0] & 7) != 0)
      {
        v48 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
LABEL_68:
      v50 = a3[1];
      v417[0] = *a3;
      v417[1] = v50;
      std::string::basic_string[abi:ne180100]<0>(buf, "");
      v51 = (std::__shared_weak_count *)a2[1];
      v377[0] = *a2;
      v377[1] = (uint64_t)v51;
      if (v51)
      {
        p_shared_owners = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldxr(p_shared_owners);
        while (__stxr(v53 + 1, p_shared_owners));
      }
      v55 = MemberInfo;
      if (v51)
      {
        v56 = (unint64_t *)&v51->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (*(_QWORD *)__p)
        v58 = v55;
      else
        v58 = 0;
      if (!v58)
      {
        v62 = *(id *)(realityio::logObjects((realityio *)MemberInfo) + 24);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a4 + 23) >= 0)
            v63 = a4;
          else
            v63 = (uint64_t *)*a4;
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v13, v388);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v388);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v63;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = Text;
          _os_log_impl(&dword_22FF26000, v62, OS_LOG_TYPE_DEFAULT, "Unknown component detail for \"%s\" from attribute: \"%s\"", buf, 0x16u);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v388);
          v11 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)v347;
        }

        goto LABEL_135;
      }
      v416[2] = v410;
      v416[3] = *(_OWORD *)v411;
      if (RETypeInfoGetCategory() == 2)
      {
        *(_OWORD *)v388 = v410;
        *(_OWORD *)&v388[16] = *(_OWORD *)v411;
        EnumConstantCount = RETypeInfoGetEnumConstantCount();
        realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(v13, (uint64_t)buf);
        if (!buf[0])
          goto LABEL_121;
        if ((*(_QWORD *)&buf[8] & 0xFFFFFFFFFFFFFFF8) != 0)
          v61 = (*(_QWORD *)&buf[8] & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v61 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v60);
        if (*(char *)(v61 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v420, *(const std::string::value_type **)v61, *(_QWORD *)(v61 + 8));
        }
        else
        {
          v67 = *(_OWORD *)v61;
          v420.__r_.__value_.__r.__words[2] = *(_QWORD *)(v61 + 16);
          *(_OWORD *)&v420.__r_.__value_.__l.__data_ = v67;
        }
        if (EnumConstantCount)
        {
          v68 = 0;
          do
          {
            *(_OWORD *)v407 = v410;
            *(_OWORD *)&v407[16] = *(_OWORD *)v411;
            EnumConstantName = (const char *)RETypeInfoGetEnumConstantName();
            v61 = strlen(EnumConstantName);
            v70 = v61;
            if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v61 != v420.__r_.__value_.__l.__size_)
                continue;
              if (v61 == -1)
                std::string::__throw_out_of_range[abi:ne180100]();
              v71 = (std::string *)v420.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (v61 != HIBYTE(v420.__r_.__value_.__r.__words[2]))
                continue;
              v71 = &v420;
            }
            v61 = memcmp(v71, EnumConstantName, v70);
            if (!(_DWORD)v61)
            {
              *(_OWORD *)v405 = v410;
              *(_OWORD *)&v405[16] = *(_OWORD *)v411;
              Size = RETypeInfoGetSize();
              v424 = v410;
              v425 = *(_OWORD *)v411;
              __src[0] = (void *)RETypeInfoGetEnumConstantValue();
              *(_OWORD *)v423 = v410;
              *(_OWORD *)&v423[16] = *(_OWORD *)v411;
              if (RETypeInfoIsOptional())
              {
                *(_OWORD *)v422 = v410;
                *(_OWORD *)&v422[16] = *(_OWORD *)v411;
                REOptionalAccessorSetValue();
              }
              else
              {
                memcpy(*(void **)&__p[16], __src, Size);
              }
              goto LABEL_114;
            }
          }
          while (EnumConstantCount != ++v68);
        }
        v72 = *(id *)(realityio::logObjects((realityio *)v61) + 24);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v13, &v424);
          v73 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v424);
          v74 = &v420;
          if ((v420.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v74 = (std::string *)v420.__r_.__value_.__r.__words[0];
          *(_DWORD *)v405 = 136315394;
          *(_QWORD *)&v405[4] = v73;
          *(_WORD *)&v405[12] = 2080;
          *(_QWORD *)&v405[14] = v74;
          _os_log_impl(&dword_22FF26000, v72, OS_LOG_TYPE_DEFAULT, "Component data (\"%s\") has no associated enum name for (\"%s\")", v405, 0x16u);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v424);
        }

LABEL_114:
        if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v420.__r_.__value_.__l.__data_);
        if (buf[0])
        {
          if ((buf[8] & 7) != 0)
          {
            v75 = (unsigned int *)(*(_QWORD *)&buf[8] & 0xFFFFFFFFFFFFFFF8);
            do
              v76 = __ldxr(v75);
            while (__stlxr(v76 - 2, v75));
          }
        }
        else
        {
LABEL_121:
          if (SHIBYTE(v403) < 0)
            operator delete(*(void **)&buf[24]);
        }
      }
      else
      {
        if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0
          || pxrInternal__aapl__pxrReserved__::TfToken::operator==())
        {
          v65 = REComponentClassFromName();
          MockREComponentClassGetComponentTypeInfo((uint64_t)buf, v65);
          v66 = *(_OWORD *)&buf[16];
          *a3 = *(_OWORD *)buf;
          a3[1] = v66;
        }
      }
      if (a7)
      {
        if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v365.__r_.__value_.__l.__size_ == 11)
          {
            v77 = (std::string *)v365.__r_.__value_.__r.__words[0];
LABEL_129:
            v78 = v77->__r_.__value_.__r.__words[0];
            v79 = *(std::string::size_type *)((char *)v77->__r_.__value_.__r.__words + 3);
            if (v78 == 0x636146656C616373 && v79 == 0x726F74636146656CLL)
              *a7 = 1;
          }
        }
        else if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) == 11)
        {
          v77 = &v365;
          goto LABEL_129;
        }
      }
LABEL_135:
      if ((__p[24] & 7) != 0)
      {
        v81 = (unsigned int *)(*(_QWORD *)&__p[24] & 0xFFFFFFFFFFFFFFF8);
        do
          v82 = __ldxr(v81);
        while (__stlxr(v82 - 2, v81));
      }
      v83 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v84 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      goto LABEL_143;
    }
LABEL_158:
    *(_QWORD *)__p = v418;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships(v11);
    v90 = *(pxrInternal__aapl__pxrReserved__::UsdObject **)v405;
    v91 = *(pxrInternal__aapl__pxrReserved__::UsdObject **)&v405[8];
    if (*(_QWORD *)v405 != *(_QWORD *)&v405[8])
    {
      v345 = *(pxrInternal__aapl__pxrReserved__::UsdObject **)&v405[8];
      while (1)
      {
        v424 = 0uLL;
        *(_QWORD *)&v425 = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets())
          break;
LABEL_312:
        *(_QWORD *)__p = &v424;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v90 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v90 + 32);
        if (v90 == v91)
          goto LABEL_334;
      }
      v92 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a6 + 1);
      v93 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v90);
      if ((*(_QWORD *)v93 & 0xFFFFFFFFFFFFFFF8) != 0)
        v94 = (*(_QWORD *)v93 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v94 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v93);
      if (*(char *)(v94 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v423, *(const std::string::value_type **)v94, *(_QWORD *)(v94 + 8));
      }
      else
      {
        v95 = *(_OWORD *)v94;
        *(_QWORD *)&v423[16] = *(_QWORD *)(v94 + 16);
        *(_OWORD *)v423 = v95;
      }
      pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace(v90);
      MEMORY[0x2348B274C](buf, "");
      v96 = *(_QWORD *)__p;
      v97 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
      if ((buf[0] & 7) != 0)
      {
        do
          v98 = __ldxr(v97);
        while (__stlxr(v98 - 2, v97));
        v99 = *(_QWORD *)__p;
      }
      else
      {
        v99 = *(_QWORD *)__p;
      }
      if ((v99 & 7) != 0)
      {
        v100 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      if ((unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8) != v97)
      {
        pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace(v90);
        pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(v90);
        v102 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](__p, "values");
        v103 = *(_QWORD *)v388;
        v104 = (unsigned int *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8);
        if ((__p[0] & 7) != 0)
        {
          do
            v105 = __ldxr(v104);
          while (__stlxr(v105 - 2, v104));
        }
        if ((unsigned int *)(v103 & 0xFFFFFFFFFFFFFFF8) != v104)
        {
          if ((v388[0] & 7) != 0)
          {
            v106 = (unsigned int *)(*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
            do
              v107 = __ldxr(v106);
            while (__stlxr(v107 - 2, v106));
          }
          if ((buf[0] & 7) != 0)
          {
            v108 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
            do
              v109 = __ldxr(v108);
            while (__stlxr(v109 - 2, v108));
          }
LABEL_310:
          if ((v423[23] & 0x80000000) != 0)
            operator delete(*(void **)v423);
          goto LABEL_312;
        }
        if ((*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8) != 0)
          v110 = (*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v110 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v102);
        if (*(char *)(v110 + 23) >= 0)
          v111 = *(unsigned __int8 *)(v110 + 23);
        else
          v111 = *(_QWORD *)(v110 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v111 + 7);
        if (__p[23] >= 0)
          v112 = __p;
        else
          v112 = *(_BYTE **)__p;
        if (v111)
        {
          if (*(char *)(v110 + 23) >= 0)
            v113 = (const void *)v110;
          else
            v113 = *(const void **)v110;
          memmove(v112, v113, v111);
        }
        strcpy(&v112[v111], ":counts");
        MEMORY[0x2348B2764](v407, __p);
        v114 = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(v11, (const pxrInternal__aapl__pxrReserved__::TfToken *)v407);
        if ((v407[0] & 7) != 0)
        {
          v115 = (unsigned int *)(*(_QWORD *)v407 & 0xFFFFFFFFFFFFFFF8);
          do
            v116 = __ldxr(v115);
          while (__stlxr(v116 - 2, v115));
        }
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if ((v388[0] & 7) != 0)
        {
          v117 = (unsigned int *)(*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
          do
            v118 = __ldxr(v117);
          while (__stlxr(v118 - 2, v117));
        }
        if ((buf[0] & 7) != 0)
        {
          v119 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
          do
            v120 = __ldxr(v119);
          while (__stlxr(v120 - 2, v119));
        }
        if ((v114 & 1) == 0)
          goto LABEL_310;
      }
      v121 = a3[1];
      v416[0] = *a3;
      v416[1] = v121;
      std::string::basic_string[abi:ne180100]<0>(buf, "");
      v122 = (std::__shared_weak_count *)a2[1];
      v376[0] = *a2;
      v376[1] = (uint64_t)v122;
      if (v122)
      {
        v123 = (unint64_t *)&v122->__shared_owners_;
        do
          v124 = __ldxr(v123);
        while (__stxr(v124 + 1, v123));
      }
      v126 = v125;
      if (v122)
      {
        v127 = (unint64_t *)&v122->__shared_owners_;
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (v126)
          goto LABEL_221;
      }
      else if (v126)
      {
LABEL_221:
        v415[10] = v410;
        v415[11] = *(_OWORD *)v411;
        if ((RETypeInfoIsList() & 1) != 0
          || (v415[8] = v410, v415[9] = *(_OWORD *)v411, RETypeInfoIsArray()))
        {
          memset(buf, 0, sizeof(buf));
          v415[6] = *(_OWORD *)buf;
          v415[7] = *(_OWORD *)&buf[16];
          RETypeInfoGetSize();
          v129 = v424;
          v415[4] = *(_OWORD *)buf;
          v415[5] = *(_OWORD *)&buf[16];
          v346 = (uint64_t)(*((_QWORD *)&v424 + 1) - v424) >> 3;
          if ((RETypeInfoIsList() & 1) != 0
            || (v415[2] = *(_OWORD *)buf, v415[3] = *(_OWORD *)&buf[16], RETypeInfoIsArray()))
          {
            memset(&v420, 0, sizeof(v420));
            v130 = *(std::__shared_weak_count_vtbl **)&__p[16];
            v375[0] = *(_QWORD *)&__p[16];
            v131 = (std::__shared_weak_count *)operator new();
            v131->__shared_owners_ = 0;
            v132 = (unint64_t *)&v131->__shared_owners_;
            v131->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
            v131->__shared_weak_owners_ = 0;
            v131[1].__vftable = v130;
            v375[1] = (uint64_t)v131;
            v415[0] = v410;
            v415[1] = *(_OWORD *)v411;
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
            memset(v388, 0, sizeof(v388));
            v414[2] = *(_OWORD *)v388;
            v414[3] = *(_OWORD *)&v388[16];
            RETypeInfoGetSize();
            v91 = v345;
            if (*((_QWORD *)&v129 + 1) != (_QWORD)v129)
            {
              v134 = 0;
              if (v346 <= 1)
                v135 = 1;
              else
                v135 = v346;
              do
              {
                pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v92, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v424 + 8 * v134));
                v136 = *(_OWORD *)(v420.__r_.__value_.__r.__words[0] + 16 * v134);
                v374 = v136;
                v137 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
                if (*((_QWORD *)&v136 + 1))
                {
                  v138 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
                  do
                    v139 = __ldxr(v138);
                  while (__stxr(v139 + 1, v138));
                }
                v414[0] = *(_OWORD *)v388;
                v414[1] = *(_OWORD *)&v388[16];
                std::string::basic_string[abi:ne180100]<0>(v418, "");
                buildValueType(v407, &v374, v414, a4, v418, a6, 0, 1);
                if (SBYTE7(v419) < 0)
                {
                  operator delete(v418[0]);
                  if (v137)
                  {
LABEL_240:
                    v140 = (unint64_t *)&v137->__shared_owners_;
                    do
                      v141 = __ldaxr(v140);
                    while (__stlxr(v141 - 1, v140));
                    if (!v141)
                    {
                      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                      std::__shared_weak_count::__release_weak(v137);
                    }
                  }
                }
                else if (v137)
                {
                  goto LABEL_240;
                }
                if ((v407[24] & 7) != 0)
                {
                  v142 = (unsigned int *)(*(_QWORD *)&v407[24] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v143 = __ldxr(v142);
                  while (__stlxr(v143 - 2, v142));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v407[16]);
                if (*(_QWORD *)&v407[8])
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v407[8]);
                ++v134;
              }
              while (v134 != v135);
            }
            v144 = &v420;
            goto LABEL_299;
          }
          v158 = *(std::__shared_weak_count_vtbl **)&__p[16];
          v372 = *(_QWORD *)&__p[16];
          v159 = (std::__shared_weak_count *)operator new();
          v159->__shared_owners_ = 0;
          v160 = (unint64_t *)&v159->__shared_owners_;
          v159->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
          v159->__shared_weak_owners_ = 0;
          v159[1].__vftable = v158;
          v373 = v159;
          do
            v161 = __ldaxr(v160);
          while (__stlxr(v161 - 1, v160));
          if (!v161)
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
          memset(v407, 0, 24);
          v162 = *(_QWORD *)&__p[16];
          v370 = *(_QWORD *)&__p[16];
          v163 = (std::__shared_weak_count *)operator new();
          v163->__shared_owners_ = 0;
          v164 = (unint64_t *)&v163->__shared_owners_;
          v163->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
          v163->__shared_weak_owners_ = 0;
          v163[1].__vftable = (std::__shared_weak_count_vtbl *)v162;
          v371 = v163;
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
          v91 = v345;
          if (*((_QWORD *)&v129 + 1) == (_QWORD)v129)
          {
LABEL_298:
            v144 = (std::string *)v407;
LABEL_299:
            *(_QWORD *)v388 = v144;
            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v388);
            v11 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)v347;
LABEL_300:
            if ((v422[23] & 0x80000000) != 0)
              operator delete(*(void **)v422);
            if ((__p[24] & 7) != 0)
            {
              v176 = (unsigned int *)(*(_QWORD *)&__p[24] & 0xFFFFFFFFFFFFFFF8);
              do
                v177 = __ldxr(v176);
              while (__stlxr(v177 - 2, v176));
            }
            v178 = *(std::__shared_weak_count **)&__p[8];
            if (*(_QWORD *)&__p[8])
            {
              v179 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
              do
                v180 = __ldaxr(v179);
              while (__stlxr(v180 - 1, v179));
              if (!v180)
              {
                ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                std::__shared_weak_count::__release_weak(v178);
              }
            }
            goto LABEL_310;
          }
          v166 = 0;
          if (v346 <= 1)
            v167 = 1;
          else
            v167 = v346;
          while (1)
          {
            pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v92, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v424 + 8 * v166));
            v168 = *(_OWORD *)(*(_QWORD *)v407 + 16 * v166);
            v369 = v168;
            v169 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
            if (*((_QWORD *)&v168 + 1))
            {
              v170 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
              do
                v171 = __ldxr(v170);
              while (__stxr(v171 + 1, v170));
            }
            v413[0] = *(_OWORD *)buf;
            v413[1] = *(_OWORD *)&buf[16];
            std::string::basic_string[abi:ne180100]<0>(&v420, "");
            buildValueType(v388, &v369, v413, a4, &v420, a6, 0, 1);
            if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v420.__r_.__value_.__l.__data_);
              if (v169)
              {
LABEL_288:
                v172 = (unint64_t *)&v169->__shared_owners_;
                do
                  v173 = __ldaxr(v172);
                while (__stlxr(v173 - 1, v172));
                if (!v173)
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                }
              }
            }
            else if (v169)
            {
              goto LABEL_288;
            }
            if ((v388[24] & 7) != 0)
            {
              v174 = (unsigned int *)(*(_QWORD *)&v388[24] & 0xFFFFFFFFFFFFFFF8);
              do
                v175 = __ldxr(v174);
              while (__stlxr(v175 - 2, v174));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v388[16]);
            if (*(_QWORD *)&v388[8])
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v388[8]);
            if (++v166 == v167)
              goto LABEL_298;
          }
        }
        MEMORY[0x2348B274C](buf, "isEntityHandle");
        HasCustomDataKey = pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomDataKey(v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
        if ((buf[0] & 7) != 0)
        {
          v149 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
          do
            v150 = __ldxr(v149);
          while (__stlxr(v150 - 2, v149));
        }
        if (!HasCustomDataKey)
          goto LABEL_300;
        v151 = *(std::__shared_weak_count_vtbl **)&__p[16];
        v367 = *(_QWORD *)&__p[16];
        v152 = (std::__shared_weak_count *)operator new();
        v152->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v152->__shared_owners_ = 0;
        v152->__shared_weak_owners_ = 0;
        v152[1].__vftable = v151;
        v368 = v152;
        memset(v388, 0, 24);
        Targets = (realityio *)pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
        if (!(_DWORD)Targets || (v154 = *(_QWORD *)v388, *(_QWORD *)&v388[8] - *(_QWORD *)v388 != 8))
        {
          v181 = *(id *)(realityio::logObjects(Targets) + 24);
          if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v90, v407);
            v182 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v407);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v182;
            _os_log_impl(&dword_22FF26000, v181, OS_LOG_TYPE_DEFAULT, "EntityHandle should only contain a value for \"%s\"", buf, 0xCu);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v407);
          }

          *(_QWORD *)buf = v388;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_317:
          v183 = (unint64_t *)&v152->__shared_owners_;
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
          }
          goto LABEL_300;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v420, *(_DWORD **)v388);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v420.__r_.__value_.__r.__words + 1, (_DWORD *)(v154 + 4));
        v155 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a6 + 1);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v155, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v420);
        v156 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)buf);
        if ((v156 & 1) != 0)
        {
          v157 = (uint64_t)a6[5];
          if (v157)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v365, &v420);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v365.__r_.__value_.__r.__words + 1, (_DWORD *)v420.__r_.__value_.__r.__words + 1);
            realityio::ImportSession::getEntityAtPrimPath(v157, &v365);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v365);
            REEntityHandleSet();
            goto LABEL_327;
          }
          v185 = *(id *)(realityio::logObjects(v156) + 24);
          if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v90, v418);
            v188 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v418);
            *(_DWORD *)v407 = 136315138;
            *(_QWORD *)&v407[4] = v188;
            _os_log_impl(&dword_22FF26000, v185, OS_LOG_TYPE_DEFAULT, "EntityHandle: Missing import session for \"%s\"", v407, 0xCu);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            goto LABEL_325;
          }
        }
        else
        {
          v185 = *(id *)(realityio::logObjects(v156) + 24);
          if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
          {
            v186 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v420);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v90, v418);
            v187 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v418);
            *(_DWORD *)v407 = 136315394;
            *(_QWORD *)&v407[4] = v186;
            *(_WORD *)&v407[12] = 2080;
            *(_QWORD *)&v407[14] = v187;
            _os_log_impl(&dword_22FF26000, v185, OS_LOG_TYPE_DEFAULT, "EntityHandle: Prim does not exist at \"%s\" for \"%s\"", v407, 0x16u);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
LABEL_325:
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v418);
          }
        }

LABEL_327:
        if ((buf[24] & 7) != 0)
        {
          v189 = (unsigned int *)(*(_QWORD *)&buf[24] & 0xFFFFFFFFFFFFFFF8);
          do
            v190 = __ldxr(v189);
          while (__stlxr(v190 - 2, v189));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf[16]);
        if (*(_QWORD *)&buf[8])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&buf[8]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v420);
        v152 = v368;
        *(_QWORD *)buf = v388;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (!v152)
          goto LABEL_300;
        goto LABEL_317;
      }
      v145 = *(id *)(realityio::logObjects((realityio *)v125) + 24);
      if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a4 + 23) >= 0)
          v146 = a4;
        else
          v146 = (uint64_t *)*a4;
        v147 = v423;
        if (v423[23] < 0)
          v147 = *(_BYTE **)v423;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v146;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v147;
        _os_log_impl(&dword_22FF26000, v145, OS_LOG_TYPE_DEFAULT, "Unknown component detail for \"%s\" from relationship: \"%s\"", buf, 0x16u);
      }

      goto LABEL_300;
    }
LABEL_334:
    *(_QWORD *)__p = v405;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v191);
    v194 = *UsdPrimDefaultPredicate;
    v193 = UsdPrimDefaultPredicate[1];
    v195 = UsdPrimDefaultPredicate[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v194 & 0x2000) != 0 || (v193 & 0x2000) == 0))
    {
      v194 |= 0x2000uLL;
      v193 &= ~0x2000uLL;
    }
    *(_QWORD *)buf = v194;
    *(_QWORD *)&buf[8] = v193;
    *(_QWORD *)&buf[16] = v195;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(v347, (uint64_t *)buf, (uint64_t)__p);
    *(_QWORD *)v407 = *(_QWORD *)__p;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v407[8], &__p[8]);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v407[12], &__p[12]);
    *(_OWORD *)&v407[16] = *(_OWORD *)&__p[16];
    *(_QWORD *)v405 = *((_QWORD *)&v410 + 1);
    v408 = v410;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v405[8], v411);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v405[12], &v411[4]);
    *(_OWORD *)&v405[16] = *(_OWORD *)&v411[8];
    v406 = v412;
    while (*(_QWORD *)v407 != *(_QWORD *)v405
         || *(_QWORD *)&v407[8] != *(_QWORD *)&v405[8]
         || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v407[16], (uint64_t)&v405[16]))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)v407, (uint64_t)&v365);
      if ((pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v365) & 1) != 0)
        goto LABEL_593;
      v197 = v365.__r_.__value_.__l.__size_;
      if (!v365.__r_.__value_.__l.__size_ || (*(_BYTE *)(v365.__r_.__value_.__l.__size_ + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v365.__r_.__value_.__l.__size_, v196);
      v198 = *(_QWORD **)(v197 + 24);
      MEMORY[0x2348B274C](buf, "RealityKitDict");
      v200 = *(_QWORD *)buf;
      if ((*v198 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8))
      {
        v204 = 1;
      }
      else
      {
        v201 = v365.__r_.__value_.__l.__size_;
        if (!v365.__r_.__value_.__l.__size_ || (*(_BYTE *)(v365.__r_.__value_.__l.__size_ + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v365.__r_.__value_.__l.__size_, v199);
        v202 = *(_QWORD **)(v201 + 24);
        MEMORY[0x2348B274C](v388, "Dict");
        v203 = (unsigned int *)(*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
        v204 = (*v202 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
        if ((v388[0] & 7) != 0)
        {
          do
            v205 = __ldxr(v203);
          while (__stlxr(v205 - 2, v203));
        }
        v200 = *(_QWORD *)buf;
      }
      if ((v200 & 7) != 0)
      {
        v206 = (unsigned int *)(v200 & 0xFFFFFFFFFFFFFFF8);
        do
          v207 = __ldxr(v206);
        while (__stlxr(v207 - 2, v206));
      }
      if (v204)
      {
        v208 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v365);
        if ((*(_QWORD *)v208 & 0xFFFFFFFFFFFFFFF8) != 0)
          v209 = (*(_QWORD *)v208 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v209 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v208);
        if (*(char *)(v209 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v364, *(const std::string::value_type **)v209, *(_QWORD *)(v209 + 8));
        }
        else
        {
          v212 = *(_OWORD *)v209;
          v364.__r_.__value_.__r.__words[2] = *(_QWORD *)(v209 + 16);
          *(_OWORD *)&v364.__r_.__value_.__l.__data_ = v212;
        }
        v214 = a3[1];
        v401[0] = *a3;
        v401[1] = v214;
        std::string::basic_string[abi:ne180100]<0>(v388, "");
        v215 = (std::__shared_weak_count *)a2[1];
        v362[0] = *a2;
        v362[1] = (uint64_t)v215;
        if (v215)
        {
          v216 = (unint64_t *)&v215->__shared_owners_;
          do
            v217 = __ldxr(v216);
          while (__stxr(v217 + 1, v216));
        }
        if (v215)
        {
          v219 = (unint64_t *)&v215->__shared_owners_;
          do
            v220 = __ldaxr(v219);
          while (__stlxr(v220 - 1, v219));
          if (!v220)
          {
            ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
            std::__shared_weak_count::__release_weak(v215);
          }
        }
        if ((v388[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v388);
          if (!v218)
            goto LABEL_580;
        }
        else if (!v218)
        {
          goto LABEL_580;
        }
        v399 = v403;
        v400 = v404;
        if (!RETypeInfoIsDictionary())
          goto LABEL_580;
        MEMORY[0x2348B274C](v388, "values");
        v228 = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v365, (const pxrInternal__aapl__pxrReserved__::TfToken *)v388);
        if ((v388[0] & 7) != 0)
        {
          v229 = (unsigned int *)(*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
          do
            v230 = __ldxr(v229);
          while (__stlxr(v230 - 2, v229));
        }
        if (v228)
        {
          MEMORY[0x2348B274C](v388, "values");
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v365, (const pxrInternal__aapl__pxrReserved__::TfToken *)v388);
          if ((v388[0] & 7) != 0)
          {
            v231 = (unsigned int *)(*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
            do
              v232 = __ldxr(v231);
            while (__stlxr(v232 - 2, v231));
          }
          memset(v378, 0, sizeof(v378));
          MEMORY[0x2348B274C](v388, "values");
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v365, (const pxrInternal__aapl__pxrReserved__::TfToken *)v388);
          if ((v388[0] & 7) != 0)
          {
            v234 = (unsigned int *)(*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
            do
              v235 = __ldxr(v234);
            while (__stlxr(v235 - 2, v234));
          }
          *(_QWORD *)v423 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v424);
          pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v423);
          v236 = qword_255E54E40;
          if (!qword_255E54E40)
            goto LABEL_412;
          v237 = &qword_255E54E40;
          do
          {
            v238 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54E48, (uint64_t *)(v236 + 32), (uint64_t *)v388);
            v239 = (uint64_t *)(v236 + 8);
            if (!v238)
            {
              v239 = (uint64_t *)v236;
              v237 = (uint64_t *)v236;
            }
            v236 = *v239;
          }
          while (*v239);
          if (v237 == &qword_255E54E40
            || std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54E48, (uint64_t *)v388, v237 + 4))
          {
LABEL_412:
            v237 = &qword_255E54E40;
          }
          if ((v388[0] & 7) != 0)
          {
            v240 = (unsigned int *)(*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
            do
              v241 = __ldxr(v240);
            while (__stlxr(v241 - 2, v240));
          }
          memset(v423, 0, sizeof(v423));
          *(_OWORD *)v422 = v403;
          *(_OWORD *)&v422[16] = v404;
          RETypeInfoGetDictionaryValueType();
          v421 = 0;
          *(_OWORD *)v418 = *(_OWORD *)v423;
          v419 = *(_OWORD *)&v423[16];
          if (v237 != &qword_255E54E40)
          {
            v242 = (realityio *)MEMORY[0x2348B2764](v388, &v379);
            v243 = v237 + 6;
            v244 = (_QWORD *)v237[6];
            if (!v244)
              goto LABEL_424;
            v245 = (uint64_t)(v237 + 7);
            v246 = v237 + 6;
            do
            {
              v242 = (realityio *)std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v245, v244 + 4, (uint64_t *)v388);
              v247 = v244 + 1;
              if (!(_DWORD)v242)
              {
                v247 = v244;
                v246 = v244;
              }
              v244 = (_QWORD *)*v247;
            }
            while (*v247);
            if (v246 == v243
              || (v242 = (realityio *)std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v245, (uint64_t *)v388, v246 + 4), (_DWORD)v242))
            {
LABEL_424:
              v246 = v243;
            }
            if ((v388[0] & 7) != 0)
            {
              v248 = (unsigned int *)(*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
              do
                v249 = __ldxr(v248);
              while (__stlxr(v249 - 2, v248));
            }
            if (v243 != v246)
            {
              std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v388, (uint64_t)(v246 + 5));
              v250 = *(std::string **)&v388[24];
              v242 = (realityio *)v421;
              if (*(_BYTE **)&v388[24] == v388)
              {
                if (v421 == &v420)
                {
                  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v388 + 24))(v388, __src);
                  (*(void (**)(_QWORD))(**(_QWORD **)&v388[24] + 32))(*(_QWORD *)&v388[24]);
                  *(_QWORD *)&v388[24] = 0;
                  (*(void (**)(std::string *, _BYTE *))(v421->__r_.__value_.__r.__words[0] + 24))(v421, v388);
                  (*(void (**)(std::string *))(v421->__r_.__value_.__r.__words[0] + 32))(v421);
                  v421 = 0;
                  *(_QWORD *)&v388[24] = v388;
                  (*((void (**)(void **, std::string *))__src[0] + 3))(__src, &v420);
                  (*((void (**)(void **))__src[0] + 4))(__src);
                  v421 = &v420;
                  v242 = *(realityio **)&v388[24];
                }
                else
                {
                  (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v388 + 24))(v388, &v420);
                  (*(void (**)(_QWORD))(**(_QWORD **)&v388[24] + 32))(*(_QWORD *)&v388[24]);
                  v242 = (realityio *)v421;
                  *(_QWORD *)&v388[24] = v421;
                  v250 = &v420;
LABEL_503:
                  v421 = v250;
                }
                if (v242 == (realityio *)v388)
                {
                  v242 = (realityio *)v388;
                  goto LABEL_509;
                }
                if (v242)
                {
                  v291 = 5;
                  goto LABEL_510;
                }
              }
              else
              {
                if (v421 != &v420)
                {
                  *(_QWORD *)&v388[24] = v421;
                  goto LABEL_503;
                }
                (*(void (**)(std::string *, _BYTE *))(v420.__r_.__value_.__r.__words[0] + 24))(&v420, v388);
                (*(void (**)(std::string *))(v421->__r_.__value_.__r.__words[0] + 32))(v421);
                v421 = *(std::string **)&v388[24];
                v242 = (realityio *)v388;
                *(_QWORD *)&v388[24] = v388;
LABEL_509:
                v291 = 4;
LABEL_510:
                v242 = (realityio *)(*(uint64_t (**)(void))(*(_QWORD *)v242 + 8 * v291))();
              }
            }
          }
          if (v421)
          {
            v292 = *(_QWORD *)&buf[16];
            *(_QWORD *)v388 = *(_QWORD *)&buf[16];
            v293 = (_QWORD *)operator new();
            *v293 = &off_24FDFBE68;
            v293[1] = 0;
            v293[2] = 0;
            v293[3] = v292;
            *(_QWORD *)&v388[8] = v293;
            __src[0] = a6;
            if (!v421)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(std::string *, std::string *, _BYTE *, void **, __int128 *, _QWORD *))(v421->__r_.__value_.__r.__words[0] + 48))(v421, &v365, v388, __src, &v403, v378);
            v294 = *(std::__shared_weak_count **)&v388[8];
            if (*(_QWORD *)&v388[8])
            {
              v295 = (unint64_t *)(*(_QWORD *)&v388[8] + 8);
              do
                v296 = __ldaxr(v295);
              while (__stlxr(v296 - 1, v295));
              if (!v296)
              {
                ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                std::__shared_weak_count::__release_weak(v294);
              }
            }
          }
          else
          {
            v297 = *(id *)(realityio::logObjects(v242) + 24);
            if (os_log_type_enabled(v297, OS_LOG_TYPE_DEFAULT))
            {
              if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v298 = &v379;
              else
                v298 = (std::string *)v379.__r_.__value_.__r.__words[0];
              v299 = *(_QWORD *)&buf[24] & 0xFFFFFFFFFFFFFFF8;
              if ((*(_QWORD *)&buf[24] & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v300 = (const char *)(v299 + 16);
                if (*(char *)(v299 + 39) < 0)
                  v300 = *(const char **)v300;
              }
              else
              {
                v300 = "";
              }
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v424, __src);
              v301 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__src);
              *(_DWORD *)v388 = 136315650;
              *(_QWORD *)&v388[4] = v298;
              *(_WORD *)&v388[12] = 2080;
              *(_QWORD *)&v388[14] = v300;
              *(_WORD *)&v388[22] = 2080;
              *(_QWORD *)&v388[24] = v301;
              _os_log_impl(&dword_22FF26000, v297, OS_LOG_TYPE_DEFAULT, "Unsupported hashtable type conversion USD values (\"%s\") to RE (\"%s\") for \"%s\" ", v388, 0x20u);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__src);
            }

          }
          if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v379.__r_.__value_.__l.__data_);
          v302 = v421;
          if (v421 == &v420)
          {
            v302 = &v420;
            v303 = 4;
LABEL_534:
            (*(void (**)(void))(v302->__r_.__value_.__r.__words[0] + 8 * v303))();
          }
          else if (v421)
          {
            v303 = 5;
            goto LABEL_534;
          }
          if ((BYTE8(v425) & 7) != 0)
          {
            v304 = (unsigned int *)(*((_QWORD *)&v425 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v305 = __ldxr(v304);
            while (__stlxr(v305 - 2, v304));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v425);
          if (*((_QWORD *)&v424 + 1))
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v424 + 1));
          *(_QWORD *)v388 = v378;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v388);
          if ((v361 & 7) != 0)
          {
            v306 = (unsigned int *)(v361 & 0xFFFFFFFFFFFFFFF8);
            do
              v307 = __ldxr(v306);
            while (__stlxr(v307 - 2, v306));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v360.__r_.__value_.__r.__words[2]);
          if (v360.__r_.__value_.__l.__size_)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v360.__r_.__value_.__l.__size_);
LABEL_580:
          if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v363.__r_.__value_.__l.__data_);
          if ((buf[24] & 7) != 0)
          {
            v322 = (unsigned int *)(*(_QWORD *)&buf[24] & 0xFFFFFFFFFFFFFFF8);
            do
              v323 = __ldxr(v322);
            while (__stlxr(v323 - 2, v322));
          }
          v324 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v325 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v326 = __ldaxr(v325);
            while (__stlxr(v326 - 1, v325));
            if (!v326)
            {
              ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
              std::__shared_weak_count::__release_weak(v324);
            }
          }
          if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
          {
            v227 = (void *)v364.__r_.__value_.__r.__words[0];
            goto LABEL_592;
          }
          goto LABEL_593;
        }
        v418[1] = 0;
        v418[0] = 0;
        *(_QWORD *)&v419 = 0;
        v251 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a6 + 1);
        memset(&v360, 0, sizeof(v360));
        MEMORY[0x2348B274C](v388, "values");
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v365, (const pxrInternal__aapl__pxrReserved__::TfToken *)v388);
        if ((v388[0] & 7) != 0)
        {
          v252 = (unsigned int *)(*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
          do
            v253 = __ldxr(v252);
          while (__stlxr(v253 - 2, v252));
        }
        pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
        memset(v423, 0, sizeof(v423));
        v397 = v403;
        v398 = v404;
        RETypeInfoGetDictionaryValueType();
        if (v360.__r_.__value_.__l.__size_ != v360.__r_.__value_.__r.__words[0])
        {
          pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v251, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v360.__r_.__value_.__l.__data_);
          v254 = *(_DWORD *)v388;
          if ((v388[24] & 7) != 0)
          {
            v255 = (unsigned int *)(*(_QWORD *)&v388[24] & 0xFFFFFFFFFFFFFFF8);
            do
              v256 = __ldxr(v255);
            while (__stlxr(v256 - 2, v255));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v388[16]);
          if (*(_QWORD *)&v388[8])
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v388[8]);
          pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v251, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v360.__r_.__value_.__l.__data_);
          v257 = *(_DWORD *)v388;
          if ((v388[24] & 7) != 0)
          {
            v258 = (unsigned int *)(*(_QWORD *)&v388[24] & 0xFFFFFFFFFFFFFFF8);
            do
              v259 = __ldxr(v258);
            while (__stlxr(v259 - 2, v258));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v388[16]);
          if (*(_QWORD *)&v388[8])
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v388[8]);
          v395 = *(_OWORD *)v423;
          v396 = *(_OWORD *)&v423[16];
          v260 = (char *)RETypeInfoGetName();
          std::string::basic_string[abi:ne180100]<0>(__src, v260);
          v393 = *(_OWORD *)v423;
          v394 = *(_OWORD *)&v423[16];
          if ((RETypeInfoIsList() & 1) != 0)
          {
            if (v254 == 3)
              goto LABEL_448;
LABEL_493:
            if (v257 != 1)
              goto LABEL_552;
            v384 = *(_OWORD *)v423;
            v385 = *(_OWORD *)&v423[16];
            if (!RETypeInfoIsObject())
              goto LABEL_552;
            if ((v427 & 0x80000000) == 0)
            {
              if (v427 == 11)
              {
                v288 = __src;
                goto LABEL_548;
              }
              goto LABEL_552;
            }
            if (__src[1] != (void *)11)
              goto LABEL_552;
            v288 = (void **)__src[0];
LABEL_548:
            v308 = *v288;
            v309 = *(uint64_t *)((char *)v288 + 3);
            if (v308 == (void *)0x6E61487465737341 && v309 == 0x656C646E61487465)
            {
              if (v418[1] != v418[0])
              {
                v329 = 0;
                do
                {
                  if (((uint64_t)(v360.__r_.__value_.__l.__size_ - v360.__r_.__value_.__r.__words[0]) >> 3) - 1 < v329)
                    break;
                  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v360.__r_.__value_.__r.__words[0] + 8 * v329));
                  if (*(char *)(String + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v422, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
                  }
                  else
                  {
                    v331 = *(_OWORD *)String;
                    *(_QWORD *)&v422[16] = *(_QWORD *)(String + 16);
                    *(_OWORD *)v422 = v331;
                  }
                  realityio::ImportSession::extraAssets(a6[5], (uint64_t *)v388);
                  v420.__r_.__value_.__r.__words[0] = (std::string::size_type)v422;
                  v332 = std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v388, (const void **)v422, (uint64_t)&std::piecewise_construct, (__int128 **)&v420)[7];
                  std::__tree<std::string>::destroy((uint64_t)v388, *(char **)&v388[8]);
                  if (v332)
                  {
                    v333 = *((_OWORD *)v418[0] + v329);
                    v357 = v333;
                    v349 = v333;
                    v334 = (std::__shared_weak_count *)*((_QWORD *)&v333 + 1);
                    if (*((_QWORD *)&v333 + 1))
                    {
                      v335 = (unint64_t *)(*((_QWORD *)&v333 + 1) + 8);
                      do
                        v336 = __ldxr(v335);
                      while (__stxr(v336 + 1, v335));
                    }
                    MEMORY[0x2348B274C](&v356, "AssetHandle");
                    v382 = *(_OWORD *)v423;
                    v383 = *(_OWORD *)&v423[16];
                    *(_OWORD *)v388 = v349;
                    if (v334)
                    {
                      v337 = (unint64_t *)&v334->__shared_owners_;
                      do
                        v338 = __ldxr(v337);
                      while (__stxr(v338 + 1, v337));
                      *(_QWORD *)&v388[16] = v349;
                      *(_QWORD *)&v388[24] = v356;
                      v356 = 0;
                      v389 = v382;
                      v390 = v383;
                      do
                        v339 = __ldaxr(v337);
                      while (__stlxr(v339 - 1, v337));
                      if (!v339)
                      {
                        ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                        std::__shared_weak_count::__release_weak(v334);
                      }
                    }
                    else
                    {
                      *(_QWORD *)&v388[16] = v349;
                      *(_QWORD *)&v388[24] = v356;
                      v356 = 0;
                      v389 = *(_OWORD *)v423;
                      v390 = *(_OWORD *)&v423[16];
                    }
                    REAssetHandleSet();
                    if ((v388[24] & 7) != 0)
                    {
                      v340 = (unsigned int *)(*(_QWORD *)&v388[24] & 0xFFFFFFFFFFFFFFF8);
                      do
                        v341 = __ldxr(v340);
                      while (__stlxr(v341 - 2, v340));
                    }
                    v342 = *(std::__shared_weak_count **)&v388[8];
                    if (*(_QWORD *)&v388[8])
                    {
                      v343 = (unint64_t *)(*(_QWORD *)&v388[8] + 8);
                      do
                        v344 = __ldaxr(v343);
                      while (__stlxr(v344 - 1, v343));
                      if (!v344)
                      {
                        ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                        std::__shared_weak_count::__release_weak(v342);
                      }
                    }
                  }
                  if ((v422[23] & 0x80000000) != 0)
                    operator delete(*(void **)v422);
                  ++v329;
                }
                while (v329 < (v418[1] - v418[0]) >> 4);
              }
            }
            else
            {
LABEL_552:
              if (v418[1] != v418[0])
              {
                for (i = 0; i < (v418[1] - v418[0]) >> 4; ++i)
                {
                  if (((uint64_t)(v360.__r_.__value_.__l.__size_ - v360.__r_.__value_.__r.__words[0]) >> 3) - 1 < i)
                    break;
                  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v251, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v360.__r_.__value_.__r.__words[0] + 8 * i));
                  v312 = *((_OWORD *)v418[0] + i);
                  v355 = v312;
                  v313 = (std::__shared_weak_count *)*((_QWORD *)&v312 + 1);
                  if (*((_QWORD *)&v312 + 1))
                  {
                    v314 = (unint64_t *)(*((_QWORD *)&v312 + 1) + 8);
                    do
                      v315 = __ldxr(v314);
                    while (__stxr(v315 + 1, v314));
                  }
                  v381[0] = *(_OWORD *)v423;
                  v381[1] = *(_OWORD *)&v423[16];
                  v380[2] = *(_OWORD *)v423;
                  v380[3] = *(_OWORD *)&v423[16];
                  RETypeInfoGetSize();
                  std::string::basic_string[abi:ne180100]<0>(v422, "");
                  buildValueType(v388, &v355, v381, a4, v422, a6, 0, 1);
                  if ((v422[23] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)v422);
                    if (v313)
                    {
LABEL_562:
                      v316 = (unint64_t *)&v313->__shared_owners_;
                      do
                        v317 = __ldaxr(v316);
                      while (__stlxr(v317 - 1, v316));
                      if (!v317)
                      {
                        ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                        std::__shared_weak_count::__release_weak(v313);
                      }
                    }
                  }
                  else if (v313)
                  {
                    goto LABEL_562;
                  }
                  if ((v388[24] & 7) != 0)
                  {
                    v318 = (unsigned int *)(*(_QWORD *)&v388[24] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v319 = __ldxr(v318);
                    while (__stlxr(v319 - 2, v318));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v388[16]);
                  if (*(_QWORD *)&v388[8])
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v388[8]);
                }
              }
            }
          }
          else
          {
            v391 = *(_OWORD *)v423;
            v392 = *(_OWORD *)&v423[16];
            IsArray = RETypeInfoIsArray();
            if (v254 == 3)
              v287 = IsArray;
            else
              v287 = 0;
            if ((v287 & 1) == 0)
              goto LABEL_493;
LABEL_448:
            MEMORY[0x2348B274C](v388, "counts");
            v261 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v365, (const pxrInternal__aapl__pxrReserved__::TfToken *)v388);
            if ((v388[0] & 7) != 0)
            {
              v262 = (unsigned int *)(*(_QWORD *)v388 & 0xFFFFFFFFFFFFFFF8);
              do
                v263 = __ldxr(v262);
              while (__stlxr(v263 - 2, v262));
            }
            if ((_DWORD)v261)
            {
              if (v418[1] != v418[0])
              {
                v264 = 0;
                do
                {
                  if (((uint64_t)(v360.__r_.__value_.__l.__size_ - v360.__r_.__value_.__r.__words[0]) >> 3) - 1 < v264)
                    break;
                  v265 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a6 + 1);
                  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v265, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v360.__r_.__value_.__r.__words[0] + 8 * v264));
                  pxrInternal__aapl__pxrReserved__::UsdObject::As<pxrInternal__aapl__pxrReserved__::UsdAttribute>((uint64_t)v422, (uint64_t)&v420);
                  v266 = *((_OWORD *)v418[0] + v264);
                  v359 = v266;
                  v348 = v266;
                  v267 = *((_QWORD *)&v266 + 1);
                  if (*((_QWORD *)&v266 + 1))
                  {
                    v268 = (unint64_t *)(*((_QWORD *)&v266 + 1) + 8);
                    do
                      v269 = __ldxr(v268);
                    while (__stxr(v269 + 1, v268));
                  }
                  v379.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v420);
                  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v379);
                  v386 = *(_OWORD *)v423;
                  v387 = *(_OWORD *)&v423[16];
                  *(_OWORD *)v388 = v348;
                  if (v267)
                  {
                    v270 = (unint64_t *)(v267 + 8);
                    do
                      v271 = __ldxr(v270);
                    while (__stxr(v271 + 1, v270));
                  }
                  *(_QWORD *)&v388[16] = v348;
                  *(_QWORD *)&v388[24] = v358;
                  v358 = 0;
                  v389 = v386;
                  v390 = v387;
                  if ((v388[24] & 7) != 0)
                  {
                    v272 = (unsigned int *)(*(_QWORD *)&v388[24] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v273 = __ldxr(v272);
                    while (__stlxr(v273 - 2, v272));
                  }
                  v274 = *(std::__shared_weak_count **)&v388[8];
                  if (*(_QWORD *)&v388[8])
                  {
                    v275 = (unint64_t *)(*(_QWORD *)&v388[8] + 8);
                    do
                      v276 = __ldaxr(v275);
                    while (__stlxr(v276 - 1, v275));
                    if (!v276)
                    {
                      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                      std::__shared_weak_count::__release_weak(v274);
                    }
                  }
                  if ((v358 & 7) != 0)
                  {
                    v277 = (unsigned int *)(v358 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v278 = __ldxr(v277);
                    while (__stlxr(v278 - 2, v277));
                  }
                  v279 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
                  if (*((_QWORD *)&v359 + 1))
                  {
                    v280 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
                    do
                      v281 = __ldaxr(v280);
                    while (__stlxr(v281 - 1, v280));
                    if (!v281)
                    {
                      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                      std::__shared_weak_count::__release_weak(v279);
                    }
                  }
                  if ((v421 & 7) != 0)
                  {
                    v282 = (unsigned int *)((unint64_t)v421 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v283 = __ldxr(v282);
                    while (__stlxr(v283 - 2, v282));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v420.__r_.__value_.__r.__words[2]);
                  if (v420.__r_.__value_.__l.__size_)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v420.__r_.__value_.__l.__size_);
                  if ((v422[24] & 7) != 0)
                  {
                    v284 = (unsigned int *)(*(_QWORD *)&v422[24] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v285 = __ldxr(v284);
                    while (__stlxr(v285 - 2, v284));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v422[16]);
                  if (*(_QWORD *)&v422[8])
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v422[8]);
                  ++v264;
                }
                while (v264 < (v418[1] - v418[0]) >> 4);
              }
            }
            else
            {
              v289 = *(id *)(realityio::logObjects(v261) + 24);
              if (os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT))
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v365, v422);
                v290 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v422);
                *(_DWORD *)v388 = 136315138;
                *(_QWORD *)&v388[4] = v290;
                _os_log_impl(&dword_22FF26000, v289, OS_LOG_TYPE_DEFAULT, "Missing \"counts\" at prim path: \"%s\"", v388, 0xCu);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v422);
              }

            }
          }
          if (v427 < 0)
            operator delete(__src[0]);
        }
        if ((BYTE8(v425) & 7) != 0)
        {
          v320 = (unsigned int *)(*((_QWORD *)&v425 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v321 = __ldxr(v320);
          while (__stlxr(v321 - 2, v320));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v425);
        if (*((_QWORD *)&v424 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v424 + 1));
        *(_QWORD *)v388 = &v360;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v388);
        *(_QWORD *)v388 = v418;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v388);
        goto LABEL_580;
      }
      v210 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v365);
      if ((*(_QWORD *)v210 & 0xFFFFFFFFFFFFFFF8) != 0)
        v211 = (*(_QWORD *)v210 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v211 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v210);
      if (*(char *)(v211 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)v211, *(_QWORD *)(v211 + 8));
      }
      else
      {
        v213 = *(_OWORD *)v211;
        *(_QWORD *)&buf[16] = *(_QWORD *)(v211 + 16);
        *(_OWORD *)buf = v213;
      }
      v221 = (std::__shared_weak_count *)a2[1];
      v354[0] = *a2;
      v354[1] = v221;
      if (v221)
      {
        v222 = (unint64_t *)&v221->__shared_owners_;
        do
          v223 = __ldxr(v222);
        while (__stxr(v223 + 1, v222));
      }
      v224 = a3[1];
      v380[0] = *a3;
      v380[1] = v224;
      buildValueType(&v365, v354, v380, a4, v388, a6, 0, 0);
      if (v221)
      {
        v225 = (unint64_t *)&v221->__shared_owners_;
        do
          v226 = __ldaxr(v225);
        while (__stlxr(v226 - 1, v225));
        if (!v226)
        {
          ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
          std::__shared_weak_count::__release_weak(v221);
        }
      }
      if ((v388[23] & 0x80000000) != 0)
        operator delete(*(void **)v388);
      if ((buf[23] & 0x80000000) != 0)
      {
        v227 = *(void **)buf;
LABEL_592:
        operator delete(v227);
      }
LABEL_593:
      if ((v366 & 7) != 0)
      {
        v327 = (unsigned int *)(v366 & 0xFFFFFFFFFFFFFFF8);
        do
          v328 = __ldxr(v327);
        while (__stlxr(v328 - 2, v327));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v365.__r_.__value_.__r.__words[2]);
      if (v365.__r_.__value_.__l.__size_)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v365.__r_.__value_.__l.__size_);
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)v407);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v405[8]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v407[8]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v411);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[8]);
  }
  else
  {
    v87 = *(id *)(realityio::logObjects(IsValid) + 24);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v11, buf);
      v88 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
      if (*((char *)a4 + 23) >= 0)
        v89 = a4;
      else
        v89 = (uint64_t *)*a4;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = v88;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v89;
      _os_log_impl(&dword_22FF26000, v87, OS_LOG_TYPE_DEFAULT, "Unknown Prim \"%s\" for \"%s\" from attribute: ", __p, 0x16u);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
    }

  }
}

void sub_2301738E4()
{
  void *v0;
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x6F0]);

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x480]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v1 - 256));
  STACK[0x480] = (unint64_t)&STACK[0x380];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x480]);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x210]);
  if (*(char *)(v1 - 201) < 0)
    operator delete(*(void **)(v1 - 224));
  if ((STACK[0x538] & 7) != 0)
  {
    v2 = (unsigned int *)(STACK[0x538] & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x520]);
  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  STACK[0x520] = v1 - 160;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x520]);
  STACK[0x520] = (unint64_t)&STACK[0x4C0];
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x520]);
  JUMPOUT(0x230174458);
}

void sub_230173A68(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x230174458);
}

void sub_230173A80()
{
  __cxa_end_catch();
  JUMPOUT(0x2301741F8);
}

void sub_230173A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;

  if ((STACK[0x398] & 7) != 0)
  {
    v58 = (unsigned int *)(STACK[0x398] & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x380]);
  if (*(char *)(v57 - 201) < 0)
    operator delete(*(void **)(v57 - 224));
  if (*(char *)(v57 - 105) < 0)
    operator delete(*(void **)(v57 - 128));
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)(v57 - 160));
  STACK[0x380] = (unint64_t)&a57;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x380]);
  STACK[0x380] = (unint64_t)&STACK[0x6F0];
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x380]);
  JUMPOUT(0x2301743CCLL);
}

void sub_230173B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  void *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v58 - 128));

  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  v59 = *(_QWORD **)(v58 - 232);
  if (v59 == (_QWORD *)(v58 - 256))
  {
    v60 = 4;
    v59 = (_QWORD *)(v58 - 256);
  }
  else
  {
    if (!v59)
    {
LABEL_8:
      pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v58 - 160));
      *(_QWORD *)(v58 - 192) = &STACK[0x290];
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 192));
      pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a57);
      JUMPOUT(0x2301743CCLL);
    }
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
  goto LABEL_8;
}

void sub_230173B98()
{
  void *v0;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x380]);

  JUMPOUT(0x230173FFCLL);
}

void sub_230173BC0()
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  JUMPOUT(0x2301741E8);
}

void sub_230173BD0(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x230174458);
}

void sub_230173BE8()
{
  __cxa_end_catch();
  JUMPOUT(0x2301741E8);
}

void sub_230173BF8()
{
  unsigned int *v0;
  unsigned int v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;

  if ((STACK[0x4C0] & 7) != 0)
  {
    v0 = (unsigned int *)(STACK[0x4C0] & 0xFFFFFFFFFFFFFFF8);
    do
      v1 = __ldxr(v0);
    while (__stlxr(v1 - 2, v0));
  }
  if (SLOBYTE(STACK[0x537]) < 0)
    operator delete((void *)STACK[0x520]);
  if ((STACK[0x4F0] & 7) != 0)
  {
    v2 = (unsigned int *)(STACK[0x4F0] & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  if ((STACK[0x380] & 7) != 0)
  {
    v4 = (unsigned int *)(STACK[0x380] & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((STACK[0x480] & 7) != 0)
  {
    v6 = (unsigned int *)(STACK[0x480] & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  JUMPOUT(0x230174024);
}

void sub_230173CB4()
{
  unsigned int *v0;
  unsigned int v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;

  if ((STACK[0x4F0] & 7) != 0)
  {
    v0 = (unsigned int *)(STACK[0x4F0] & 0xFFFFFFFFFFFFFFF8);
    do
      v1 = __ldxr(v0);
    while (__stlxr(v1 - 2, v0));
  }
  if (SLOBYTE(STACK[0x537]) < 0)
    operator delete((void *)STACK[0x520]);
  if ((STACK[0x380] & 7) != 0)
  {
    v2 = (unsigned int *)(STACK[0x380] & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  if ((STACK[0x480] & 7) != 0)
  {
    v4 = (unsigned int *)(STACK[0x480] & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  JUMPOUT(0x230174230);
}

void sub_230173CF8()
{
  unsigned int *v0;
  unsigned int v1;

  if ((STACK[0x520] & 7) != 0)
  {
    v0 = (unsigned int *)(STACK[0x520] & 0xFFFFFFFFFFFFFFF8);
    do
      v1 = __ldxr(v0);
    while (__stlxr(v1 - 2, v0));
  }
  JUMPOUT(0x230173D84);
}

void sub_230173D28()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x380]);
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  v1 = *(_QWORD **)(v0 - 232);
  if (v1 == (_QWORD *)(v0 - 256))
  {
    v2 = 4;
    v1 = (_QWORD *)(v0 - 256);
  }
  else
  {
    if (!v1)
      goto LABEL_8;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_8:
  JUMPOUT(0x2301743ACLL);
}

void sub_230173D3C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x230174458);
}

void sub_230173D54()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  __cxa_end_catch();
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  v1 = *(_QWORD **)(v0 - 232);
  if (v1 == (_QWORD *)(v0 - 256))
  {
    v2 = 4;
    v1 = (_QWORD *)(v0 - 256);
  }
  else
  {
    if (!v1)
      goto LABEL_8;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_8:
  JUMPOUT(0x2301743ACLL);
}

void sub_230173D64()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  v1 = *(_QWORD **)(v0 - 232);
  if (v1 == (_QWORD *)(v0 - 256))
  {
    v2 = 4;
    v1 = (_QWORD *)(v0 - 256);
  }
  else
  {
    if (!v1)
      goto LABEL_8;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_8:
  JUMPOUT(0x2301743ACLL);
}

void sub_230173DD4()
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  JUMPOUT(0x230173FFCLL);
}

void sub_230173E00()
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x270]);
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  JUMPOUT(0x2301741F8);
}

void sub_230173E20()
{
  JUMPOUT(0x2301741F8);
}

void sub_230173E28()
{
  JUMPOUT(0x230174208);
}

void sub_230173E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a70;
  char a73;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;

  if ((STACK[0x380] & 7) != 0)
  {
    v73 = (unsigned int *)(STACK[0x380] & 0xFFFFFFFFFFFFFFF8);
    do
      v74 = __ldxr(v73);
    while (__stlxr(v74 - 2, v73));
  }
  if (a69 < 0)
    operator delete(a64);
  if ((STACK[0x498] & 7) != 0)
  {
    v75 = (unsigned int *)(STACK[0x498] & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](&STACK[0x480]);
  if (a73 < 0)
    operator delete(a70);
  JUMPOUT(0x230174438);
}

void sub_230173E68()
{
  unsigned int *v0;
  unsigned int v1;

  if ((STACK[0x380] & 7) != 0)
  {
    v0 = (unsigned int *)(STACK[0x380] & 0xFFFFFFFFFFFFFFF8);
    do
      v1 = __ldxr(v0);
    while (__stlxr(v1 - 2, v0));
  }
  JUMPOUT(0x230174174);
}

void sub_230173E90()
{
  JUMPOUT(0x230174174);
}

void sub_230173E98()
{
  JUMPOUT(0x230174184);
}

void sub_230173EAC()
{
  JUMPOUT(0x230174348);
}

void sub_230173EB8()
{
  unsigned int *v0;
  unsigned int v1;

  if ((STACK[0x380] & 7) != 0)
  {
    v0 = (unsigned int *)(STACK[0x380] & 0xFFFFFFFFFFFFFFF8);
    do
      v1 = __ldxr(v0);
    while (__stlxr(v1 - 2, v0));
  }
  JUMPOUT(0x2301743B4);
}

void sub_230173F38()
{
  JUMPOUT(0x230174034);
}

void sub_230173F40()
{
  unsigned int *v0;
  unsigned int v1;

  if ((STACK[0x520] & 7) != 0)
  {
    v0 = (unsigned int *)(STACK[0x520] & 0xFFFFFFFFFFFFFFF8);
    do
      v1 = __ldxr(v0);
    while (__stlxr(v1 - 2, v0));
  }
  JUMPOUT(0x230174024);
}

void sub_230173F68()
{
  JUMPOUT(0x230174024);
}

void sub_230173F70()
{
  JUMPOUT(0x23017416CLL);
}

void sub_230173F78()
{
  JUMPOUT(0x230173FFCLL);
}

void sub_230173F80()
{
  uint64_t v0;

  pxrInternal__aapl__pxrReserved__::UsdObject::~UsdObject((pxrInternal__aapl__pxrReserved__::UsdObject *)(v0 - 224));
  JUMPOUT(0x23017415CLL);
}

void sub_230173F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;

  if ((STACK[0x398] & 7) != 0)
  {
    v56 = (unsigned int *)(STACK[0x398] & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x380]);
  if ((a54 & 7) != 0)
  {
    v58 = (unsigned int *)(a54 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v55 - 256));
  JUMPOUT(0x230174154);
}

void sub_23017404C()
{
  JUMPOUT(0x2301741ECLL);
}

void sub_230174054()
{
  uint64_t v0;

  if (*(char *)(v0 - 233) < 0)
    operator delete(*(void **)(v0 - 256));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x380]);
  JUMPOUT(0x230174080);
}

void sub_230174088()
{
  JUMPOUT(0x230174230);
}

void sub_230174094()
{
  unsigned int *v0;
  unsigned int v1;

  if ((STACK[0x520] & 7) != 0)
  {
    v0 = (unsigned int *)(STACK[0x520] & 0xFFFFFFFFFFFFFFF8);
    do
      v1 = __ldxr(v0);
    while (__stlxr(v1 - 2, v0));
  }
  JUMPOUT(0x230174230);
}

void sub_2301740BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;

  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v57 - 160));
  *(_QWORD *)(v57 - 192) = &STACK[0x290];
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v57 - 192);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a57);
  JUMPOUT(0x2301743CCLL);
}

void sub_2301740C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a70;
  char a73;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;

  if ((STACK[0x380] & 7) != 0)
  {
    v73 = (unsigned int *)(STACK[0x380] & 0xFFFFFFFFFFFFFFF8);
    do
      v74 = __ldxr(v73);
    while (__stlxr(v74 - 2, v73));
  }
  if (a69 < 0)
    operator delete(a64);
  if ((STACK[0x498] & 7) != 0)
  {
    v75 = (unsigned int *)(STACK[0x498] & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](&STACK[0x480]);
  if (a73 < 0)
    operator delete(a70);
  JUMPOUT(0x230174438);
}

void sub_2301740F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x380]);
  if (*(char *)(v57 - 105) < 0)
    operator delete(*(void **)(v57 - 128));
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)(v57 - 160));
  STACK[0x380] = (unint64_t)&a57;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x380]);
  STACK[0x380] = (unint64_t)&STACK[0x6F0];
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x380]);
  JUMPOUT(0x2301743CCLL);
}

void sub_230174130()
{
  JUMPOUT(0x2301743B4);
}

void sub_230174138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;

  if (*(char *)(v57 - 105) < 0)
    operator delete(*(void **)(v57 - 128));
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)(v57 - 160));
  STACK[0x380] = (unint64_t)&a57;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&STACK[0x380]);
  STACK[0x380] = (unint64_t)&STACK[0x6F0];
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x380]);
  JUMPOUT(0x2301743CCLL);
}

void sub_230174198()
{
  JUMPOUT(0x230174458);
}

void sub_2301741A4()
{
  JUMPOUT(0x230174240);
}

void sub_2301741B0()
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x250]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x4F0]);
  JUMPOUT(0x2301741E8);
}

void sub_2301741E4()
{
  JUMPOUT(0x2301741ECLL);
}

void sub_230174280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a70;
  char a73;
  unsigned int *v73;
  unsigned int v74;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (a69 < 0)
    operator delete(a64);
  if ((STACK[0x498] & 7) != 0)
  {
    v73 = (unsigned int *)(STACK[0x498] & 0xFFFFFFFFFFFFFFF8);
    do
      v74 = __ldxr(v73);
    while (__stlxr(v74 - 2, v73));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x480]);
  if (a73 < 0)
    operator delete(a70);
  JUMPOUT(0x230174438);
}

void sub_2301742A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a70;
  char a73;
  unsigned int *v73;
  unsigned int v74;

  if (a69 < 0)
    operator delete(a64);
  if ((STACK[0x498] & 7) != 0)
  {
    v73 = (unsigned int *)(STACK[0x498] & 0xFFFFFFFFFFFFFFF8);
    do
      v74 = __ldxr(v73);
    while (__stlxr(v74 - 2, v73));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](&STACK[0x480]);
  if (a73 < 0)
    operator delete(a70);
  JUMPOUT(0x230174438);
}

void sub_2301742A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (SLOBYTE(STACK[0x497]) < 0)
    JUMPOUT(0x230174410);
  JUMPOUT(0x230174438);
}

void sub_2301742E4()
{
  JUMPOUT(0x2301743DCLL);
}

void sub_2301742EC()
{
  unsigned int *v0;
  unsigned int v1;

  if ((STACK[0x480] & 7) != 0)
  {
    v0 = (unsigned int *)(STACK[0x480] & 0xFFFFFFFFFFFFFFF8);
    do
      v1 = __ldxr(v0);
    while (__stlxr(v1 - 2, v0));
  }
  JUMPOUT(0x230174438);
}

void sub_230174314()
{
  uint64_t v0;
  unsigned int *v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;

  if ((STACK[0x380] & 7) != 0)
  {
    v1 = (unsigned int *)(STACK[0x380] & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stlxr(v2 - 2, v1));
  }
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  v3 = *(_QWORD **)(v0 - 232);
  if (v3 == (_QWORD *)(v0 - 256))
  {
    v4 = 4;
    v3 = (_QWORD *)(v0 - 256);
  }
  else
  {
    if (!v3)
      goto LABEL_11;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_11:
  JUMPOUT(0x2301743ACLL);
}

void sub_230174388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;

  if ((STACK[0x380] & 7) != 0)
  {
    v58 = (unsigned int *)(STACK[0x380] & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v57 - 160));
  *(_QWORD *)(v57 - 192) = &STACK[0x290];
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v57 - 192);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a57);
  JUMPOUT(0x2301743CCLL);
}

void sub_23017441C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::scrubAttrName(std::string *a1, const void **a2, uint64_t a3)
{
  size_t v5;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  unsigned __int8 v14;
  std::string::size_type size;
  std::string *v16;
  std::string *v17;
  int v18;
  std::string v19;
  std::string v20;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v5)
  {
    v7 = &v19;
    std::string::basic_string[abi:ne180100]((uint64_t)&v19, v5 + 1);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v5);
    *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v5) = 58;
    v9 = *(char *)(a3 + 23);
    if (v9 >= 0)
      v10 = (const std::string::value_type *)a3;
    else
      v10 = *(const std::string::value_type **)a3;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a3 + 23);
    else
      v11 = *(_QWORD *)(a3 + 8);
    v12 = std::string::append(&v19, v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v20 = *(std::string *)a3;
  }
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v14 = atomic_load((unsigned __int8 *)&qword_255E54E78);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_255E54E78))
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)&unk_255E54ED8, "[^A-Za-z0-9_]", 0);
    __cxa_guard_release(&qword_255E54E78);
  }
  size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v20;
  else
    v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v20.__r_.__value_.__l.__size_;
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char *>,std::regex_traits<char>,char>(a1, (char *)v16, (char *)v16 + size, (uint64_t)&unk_255E54ED8, "_", 0);
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = a1;
  else
    v17 = (std::string *)a1->__r_.__value_.__r.__words[0];
  v18 = v17->__r_.__value_.__s.__data_[0];
  if ((v18 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v18 + 60) & 0x400) != 0)
  {
    std::operator+<char>();
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
      operator delete(a1->__r_.__value_.__l.__data_);
    *a1 = v19;
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_230174670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  __cxa_guard_abort(&qword_255E54E78);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::MemberInfo *`anonymous namespace'::MemberInfo::MemberInfo(_anonymous_namespace_::MemberInfo *this)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[1] = 0;
  v4[2] = 0;
  MEMORY[0x2348B274C](v4, "");
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = v4[0];
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return this;
}

void sub_230174718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::allocateAndFindMemberInfo(uint64_t a1, unsigned __int8 *a2, __int128 *a3, int a4, const void **a5, uint64_t *a6)
{
  __int128 v6;
  uint64_t v7;
  BOOL v8;
  __int128 v9;
  char *Name;
  int Offset;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD *Instance;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  uint64_t *v33;
  _BOOL4 v34;
  uint64_t *v35;
  int Category;
  size_t v37;
  size_t v38;
  std::string::size_type v39;
  std::string::size_type size;
  uint64_t v41;
  std::string::size_type v42;
  std::string *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::string::size_type v48;
  std::string *v49;
  unsigned __int8 *v50;
  size_t v51;
  std::string::size_type v52;
  std::string *v53;
  unsigned __int8 *v54;
  unint64_t *v55;
  unint64_t v56;
  char MemberInfo;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  std::__shared_weak_count *v68;
  __int128 v69;
  unint64_t *v70;
  unint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  unint64_t *v87;
  unint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unint64_t *v91;
  char *v92;
  std::string *v93;
  __int128 v94;
  unint64_t *v95;
  unint64_t v96;
  void **v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  std::__shared_weak_count *v104;
  __int128 v105;
  unint64_t *v106;
  unint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  std::__shared_weak_count *v121;
  __int128 v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  unint64_t *v127;
  unint64_t *v128;
  unint64_t v129;
  __int128 *v131;
  unint64_t ObjectMemberCount;
  __int128 v139;
  std::string v140;
  void *v141[2];
  char v142;
  uint64_t v143;
  __int128 v144;
  void *__p[2];
  int64_t v146;
  std::string v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _OWORD v166[2];
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _OWORD v171[2];
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180[2];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;

  v196 = *MEMORY[0x24BDAC8D0];
  v6 = a3[1];
  v162 = *a3;
  v163 = v6;
  ObjectMemberCount = RETypeInfoGetObjectMemberCount();
  if (ObjectMemberCount)
  {
    v7 = 0;
    v131 = (__int128 *)(a1 + 32);
    v8 = 1;
    while (1)
    {
      v161 = 0;
      v159 = 0u;
      v160 = 0u;
      v9 = a3[1];
      v157 = *a3;
      v158 = v9;
      RETypeInfoGetObjectMemberByIndex();
      v154 = v159;
      v155 = v160;
      v156 = v161;
      Name = (char *)RETypeMemberInfoGetName();
      std::string::basic_string[abi:ne180100]<0>(v141, Name);
      v151 = v159;
      v152 = v160;
      v153 = v161;
      Offset = RETypeMemberInfoGetOffset();
      v148 = v159;
      v149 = v160;
      v150 = v161;
      v13 = *a6;
      v12 = (std::__shared_weak_count *)a6[1];
      *(_QWORD *)&v139 = *a6;
      *((_QWORD *)&v139 + 1) = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v194 = 0u;
      v195 = 0u;
      v193 = v150;
      v191 = v148;
      v192 = v149;
      RETypeMemberInfoGetMemberType();
      v189 = v194;
      v190 = v195;
      v16 = (Offset + a4);
      if (RETypeInfoIsPointer())
        break;
LABEL_23:
      v180[0] = v194;
      v180[1] = v195;
      v32 = qword_255E54E00;
      if (!qword_255E54E00)
        goto LABEL_30;
      v33 = &qword_255E54E00;
      do
      {
        v34 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_255E54E08, (const void **)(v32 + 32), (const void **)&v147.__r_.__value_.__l.__data_);
        v35 = (uint64_t *)(v32 + 8);
        if (!v34)
        {
          v35 = (uint64_t *)v32;
          v33 = (uint64_t *)v32;
        }
        v32 = *v35;
      }
      while (*v35);
      if (v33 == &qword_255E54E00
        || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_255E54E08, (const void **)&v147.__r_.__value_.__l.__data_, (const void **)v33 + 4))
      {
LABEL_30:
        v174 = v194;
        v175 = v195;
        Category = RETypeInfoGetCategory();
        v37 = a2[23];
        v38 = *((_QWORD *)a2 + 1);
        v39 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        size = v140.__r_.__value_.__l.__size_;
        if (Category == 2)
        {
          v41 = (v37 & 0x80u) == 0 ? a2[23] : *((_QWORD *)a2 + 1);
          v42 = (v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? HIBYTE(v140.__r_.__value_.__r.__words[2])
              : v140.__r_.__value_.__l.__size_;
          if (v41 == v42)
          {
            if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43 = &v140;
            else
              v43 = (std::string *)v140.__r_.__value_.__r.__words[0];
            if ((v37 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)a2, v43, *((_QWORD *)a2 + 1)))
              {
LABEL_112:
                v171[0] = v139;
                if (*((_QWORD *)&v139 + 1))
                {
                  v77 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
                  do
                    v78 = __ldxr(v77);
                  while (__stxr(v78 + 1, v77));
                }
                MEMORY[0x2348B2764](&v169, &v147);
                v172 = v194;
                v173 = v195;
                v176 = v139;
                if (*((_QWORD *)&v139 + 1))
                {
                  v79 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
                  do
                    v80 = __ldxr(v79);
                  while (__stxr(v80 + 1, v79));
                }
                *(_QWORD *)&v177 = v139 + v16;
                *((_QWORD *)&v177 + 1) = v169;
                *(_QWORD *)&v169 = 0;
                v178 = v172;
                v179 = v173;
                v81 = std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](a1, &v176);
                *(_QWORD *)(v81 + 16) = v177;
                v82 = *(_QWORD *)(v81 + 24);
                if ((v82 & 7) != 0)
                {
                  v83 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v84 = __ldxr(v83);
                  while (__stlxr(v84 - 2, v83));
                }
                v85 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
                *(_QWORD *)(a1 + 24) = *((_QWORD *)&v177 + 1);
                *((_QWORD *)&v177 + 1) = 0;
                v86 = v179;
                *v131 = v178;
                *(_OWORD *)(a1 + 48) = v86;
                if (v85)
                {
                  v87 = (unint64_t *)&v85->__shared_owners_;
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                }
                if ((v169 & 7) != 0)
                {
                  v89 = (unsigned int *)(v169 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v90 = __ldxr(v89);
                  while (__stlxr(v90 - 2, v89));
                }
                v74 = (std::__shared_weak_count *)*((_QWORD *)&v171[0] + 1);
                if (!*((_QWORD *)&v171[0] + 1))
                  goto LABEL_186;
                v91 = (unint64_t *)(*((_QWORD *)&v171[0] + 1) + 8);
                do
                  v76 = __ldaxr(v91);
                while (__stlxr(v76 - 1, v91));
                goto LABEL_184;
              }
            }
            else
            {
              if (!a2[23])
                goto LABEL_112;
              v44 = a2;
              v45 = a2[23];
              while (*v44 == v43->__r_.__value_.__s.__data_[0])
              {
                ++v44;
                v43 = (std::string *)((char *)v43 + 1);
                if (!--v45)
                  goto LABEL_112;
              }
            }
          }
        }
        if ((v37 & 0x80u) == 0)
          v51 = v37;
        else
          v51 = v38;
        if ((v39 & 0x80u) == 0)
          v52 = v39;
        else
          v52 = size;
        if (v51 == v52)
        {
          if ((v39 & 0x80u) == 0)
            v53 = &v140;
          else
            v53 = (std::string *)v140.__r_.__value_.__r.__words[0];
          if ((v37 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)a2, v53, v38))
            {
LABEL_89:
              v172 = v194;
              v173 = v195;
              if (RETypeInfoGetCategory() == 4)
              {
                v171[0] = v194;
                v171[1] = v195;
                if ((RETypeInfoIsFixedSizeArray() & 1) == 0)
                {
                  v169 = 0u;
                  v170 = 0u;
                  v167 = v194;
                  v168 = v195;
                  RETypeInfoGetArrayElementType();
                  v166[0] = v169;
                  v166[1] = v170;
                  v92 = (char *)RETypeInfoGetName();
                  std::string::basic_string[abi:ne180100]<0>(&v176, v92);
                  v93 = std::string::append((std::string *)&v176, "[]");
                  v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
                  v146 = v93->__r_.__value_.__r.__words[2];
                  *(_OWORD *)__p = v94;
                  v93->__r_.__value_.__l.__size_ = 0;
                  v93->__r_.__value_.__r.__words[2] = 0;
                  v93->__r_.__value_.__r.__words[0] = 0;
                  if (SBYTE7(v177) < 0)
                    operator delete((void *)v176);
                  v144 = v139;
                  if (*((_QWORD *)&v139 + 1))
                  {
                    v95 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
                    do
                      v96 = __ldxr(v95);
                    while (__stxr(v96 + 1, v95));
                  }
                  if (v146 >= 0)
                    v97 = __p;
                  else
                    v97 = (void **)__p[0];
                  MEMORY[0x2348B274C](&v143, v97);
                  v164 = v194;
                  v165 = v195;
                  v176 = v139;
                  if (*((_QWORD *)&v139 + 1))
                  {
                    v98 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
                    do
                      v99 = __ldxr(v98);
                    while (__stxr(v99 + 1, v98));
                  }
                  *(_QWORD *)&v177 = v139 + v16;
                  *((_QWORD *)&v177 + 1) = v143;
                  v143 = 0;
                  v178 = v164;
                  v179 = v165;
                  v100 = std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](a1, &v176);
                  *(_QWORD *)(v100 + 16) = v177;
                  v101 = *(_QWORD *)(v100 + 24);
                  if ((v101 & 7) != 0)
                  {
                    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v103 = __ldxr(v102);
                    while (__stlxr(v103 - 2, v102));
                  }
                  v104 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
                  *(_QWORD *)(a1 + 24) = *((_QWORD *)&v177 + 1);
                  *((_QWORD *)&v177 + 1) = 0;
                  v105 = v179;
                  *v131 = v178;
                  *(_OWORD *)(a1 + 48) = v105;
                  if (v104)
                  {
                    v106 = (unint64_t *)&v104->__shared_owners_;
                    do
                      v107 = __ldaxr(v106);
                    while (__stlxr(v107 - 1, v106));
                    if (!v107)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
                  if ((v143 & 7) != 0)
                  {
                    v108 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v109 = __ldxr(v108);
                    while (__stlxr(v109 - 2, v108));
                  }
                  v110 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
                  if (*((_QWORD *)&v144 + 1))
                  {
                    v111 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
                    do
                      v112 = __ldaxr(v111);
                    while (__stlxr(v112 - 1, v111));
                    if (!v112)
                    {
                      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                      std::__shared_weak_count::__release_weak(v110);
                    }
                  }
                  if (SHIBYTE(v146) < 0)
                    operator delete(__p[0]);
                  goto LABEL_186;
                }
              }
              v167 = v139;
              if (*((_QWORD *)&v139 + 1))
              {
                v60 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
                do
                  v61 = __ldxr(v60);
                while (__stxr(v61 + 1, v60));
              }
              MEMORY[0x2348B2764](v166, &v147);
              v169 = v194;
              v170 = v195;
              v176 = v139;
              if (*((_QWORD *)&v139 + 1))
              {
                v62 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
                do
                  v63 = __ldxr(v62);
                while (__stxr(v63 + 1, v62));
              }
              *(_QWORD *)&v177 = v139 + v16;
              *((_QWORD *)&v177 + 1) = *(_QWORD *)&v166[0];
              *(_QWORD *)&v166[0] = 0;
              v178 = v169;
              v179 = v170;
              v64 = std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](a1, &v176);
              *(_QWORD *)(v64 + 16) = v177;
              v65 = *(_QWORD *)(v64 + 24);
              if ((v65 & 7) != 0)
              {
                v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
                do
                  v67 = __ldxr(v66);
                while (__stlxr(v67 - 2, v66));
              }
              v68 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
              *(_QWORD *)(a1 + 24) = *((_QWORD *)&v177 + 1);
              *((_QWORD *)&v177 + 1) = 0;
              v69 = v179;
              *v131 = v178;
              *(_OWORD *)(a1 + 48) = v69;
              if (v68)
              {
                v70 = (unint64_t *)&v68->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              if ((v166[0] & 7) != 0)
              {
                v72 = (unsigned int *)(*(_QWORD *)&v166[0] & 0xFFFFFFFFFFFFFFF8);
                do
                  v73 = __ldxr(v72);
                while (__stlxr(v73 - 2, v72));
              }
              v74 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
              if (!*((_QWORD *)&v167 + 1))
              {
LABEL_186:
                MemberInfo = 1;
                goto LABEL_187;
              }
              v75 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
LABEL_184:
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
              goto LABEL_186;
            }
          }
          else
          {
            if (!(_DWORD)v37)
              goto LABEL_89;
            v54 = a2;
            while (*v54 == v53->__r_.__value_.__s.__data_[0])
            {
              ++v54;
              v53 = (std::string *)((char *)v53 + 1);
              if (!--v37)
                goto LABEL_89;
            }
          }
        }
        v176 = v194;
        v177 = v195;
        if (RETypeInfoGetCategory() == 8)
        {
          v172 = v194;
          v173 = v195;
          v171[0] = v139;
          if (*((_QWORD *)&v139 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          if (*((_QWORD *)&v139 + 1))
          {
            v58 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v139 + 1) + 16))(*((_QWORD *)&v139 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v139 + 1));
            }
          }
          goto LABEL_187;
        }
      }
      else
      {
        v46 = a2[23];
        if ((v46 & 0x80u) == 0)
          v47 = a2[23];
        else
          v47 = *((_QWORD *)a2 + 1);
        v48 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v48 = v140.__r_.__value_.__l.__size_;
        if (v47 == v48)
        {
          if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v49 = &v140;
          else
            v49 = (std::string *)v140.__r_.__value_.__r.__words[0];
          if ((v46 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)a2, v49, *((_QWORD *)a2 + 1)))
            {
LABEL_164:
              v172 = v139;
              if (*((_QWORD *)&v139 + 1))
              {
                v113 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
                do
                  v114 = __ldxr(v113);
                while (__stxr(v114 + 1, v113));
              }
              MEMORY[0x2348B2764](v171, &v147);
              v174 = v194;
              v175 = v195;
              v176 = v139;
              if (*((_QWORD *)&v139 + 1))
              {
                v115 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
                do
                  v116 = __ldxr(v115);
                while (__stxr(v116 + 1, v115));
              }
              *(_QWORD *)&v177 = v139 + v16;
              *((_QWORD *)&v177 + 1) = *(_QWORD *)&v171[0];
              *(_QWORD *)&v171[0] = 0;
              v178 = v174;
              v179 = v175;
              v117 = std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](a1, &v176);
              *(_QWORD *)(v117 + 16) = v177;
              v118 = *(_QWORD *)(v117 + 24);
              if ((v118 & 7) != 0)
              {
                v119 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFFFF8);
                do
                  v120 = __ldxr(v119);
                while (__stlxr(v120 - 2, v119));
              }
              v121 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
              *(_QWORD *)(a1 + 24) = *((_QWORD *)&v177 + 1);
              *((_QWORD *)&v177 + 1) = 0;
              v122 = v179;
              *v131 = v178;
              *(_OWORD *)(a1 + 48) = v122;
              if (v121)
              {
                v123 = (unint64_t *)&v121->__shared_owners_;
                do
                  v124 = __ldaxr(v123);
                while (__stlxr(v124 - 1, v123));
                if (!v124)
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                }
              }
              if ((v171[0] & 7) != 0)
              {
                v125 = (unsigned int *)(*(_QWORD *)&v171[0] & 0xFFFFFFFFFFFFFFF8);
                do
                  v126 = __ldxr(v125);
                while (__stlxr(v126 - 2, v125));
              }
              v74 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
              if (*((_QWORD *)&v172 + 1))
              {
                v127 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
                do
                  v76 = __ldaxr(v127);
                while (__stlxr(v76 - 1, v127));
                goto LABEL_184;
              }
              goto LABEL_186;
            }
          }
          else
          {
            if (!a2[23])
              goto LABEL_164;
            v50 = a2;
            while (*v50 == v49->__r_.__value_.__s.__data_[0])
            {
              ++v50;
              v49 = (std::string *)((char *)v49 + 1);
              if (!--v46)
                goto LABEL_164;
            }
          }
        }
      }
      MemberInfo = 0;
LABEL_187:
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
      if (*((_QWORD *)&v139 + 1))
      {
        v128 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v139 + 1) + 16))(*((_QWORD *)&v139 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v139 + 1));
        }
      }
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (v142 < 0)
        operator delete(v141[0]);
      if ((MemberInfo & 1) == 0)
      {
        v8 = ++v7 < ObjectMemberCount;
        if (v7 != ObjectMemberCount)
          continue;
      }
      return v8;
    }
    v17 = (_QWORD *)(v13 + v16);
    v187 = v194;
    v188 = v195;
    v18 = RETypeInfoDereferencePointer();
    v185 = v194;
    v186 = v195;
    RETypeInfoGetReferencedType();
    v194 = v176;
    v195 = v177;
    if (v18)
    {
      v19 = (_QWORD *)operator new();
      *v19 = &off_24FDFBE68;
      v19[1] = 0;
      v19[2] = 0;
      v19[3] = v18;
      *(_QWORD *)&v139 = v18;
      *((_QWORD *)&v139 + 1) = v19;
      if (!v12)
      {
LABEL_22:
        v16 = 0;
        goto LABEL_23;
      }
      v20 = (unint64_t *)&v12->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      v22 = v12;
    }
    else
    {
      v183 = v194;
      v184 = v195;
      Instance = (_QWORD *)RETypeInfoCreateInstance();
      v181 = v194;
      v182 = v195;
      v24 = operator new();
      v22 = (std::__shared_weak_count *)v24;
      v25 = v181;
      v26 = v182;
      *(_QWORD *)(v24 + 8) = 0;
      v27 = (unint64_t *)(v24 + 8);
      *(_OWORD *)(v24 + 32) = v25;
      *(_OWORD *)(v24 + 48) = v26;
      *(_QWORD *)v24 = &off_24FDFBD00;
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = Instance;
      *v17 = *Instance;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      *(_QWORD *)&v139 = Instance;
      *((_QWORD *)&v139 + 1) = v24;
      if (v12)
      {
        v29 = (unint64_t *)&v12->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      do
        v21 = __ldaxr(v27);
      while (__stlxr(v21 - 1, v27));
    }
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    goto LABEL_22;
  }
  return 0;
}

void sub_230175398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  if (a40 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::setComponentDataUsingInfo(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AsToken;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  __int128 v17;
  int IsOptional;
  __int128 *v19;
  __int128 v20;
  uint64_t Instance;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  NSObject *v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  const char *v34;
  uint64_t Text;
  unsigned int *v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE buf[12];
  __int16 v56;
  const char *v57;
  __int16 v58;
  _BYTE *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v53 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  AsToken = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v53);
  v7 = qword_255E54E20;
  if (!qword_255E54E20)
    goto LABEL_8;
  v8 = &qword_255E54E20;
  do
  {
    AsToken = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54E28, (uint64_t *)(v7 + 32), (uint64_t *)buf);
    v9 = (uint64_t *)(v7 + 8);
    if (!(_DWORD)AsToken)
    {
      v9 = (uint64_t *)v7;
      v8 = (uint64_t *)v7;
    }
    v7 = *v9;
  }
  while (*v9);
  if (v8 == &qword_255E54E20
    || (AsToken = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54E28, (uint64_t *)buf, v8 + 4), (_DWORD)AsToken))
  {
LABEL_8:
    v8 = &qword_255E54E20;
  }
  if ((buf[0] & 7) != 0)
  {
    v10 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if (v8 == &qword_255E54E20)
    goto LABEL_42;
  v12 = v8 + 6;
  v13 = (_QWORD *)v8[6];
  if (!v13)
    goto LABEL_42;
  v14 = (uint64_t)(v8 + 7);
  v15 = v12;
  do
  {
    AsToken = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v14, v13 + 4, (uint64_t *)(a2 + 24));
    v16 = v13 + 1;
    if (!(_DWORD)AsToken)
    {
      v16 = v13;
      v15 = v13;
    }
    v13 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v15 == v12)
    goto LABEL_42;
  AsToken = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v14, (uint64_t *)(a2 + 24), v15 + 4);
  if ((AsToken & 1) != 0)
    goto LABEL_42;
  AsToken = std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)(v15 + 5));
  if (!v59)
    goto LABEL_42;
  v17 = *(_OWORD *)(a2 + 48);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v17;
  v51 = v53;
  v52 = v17;
  IsOptional = RETypeInfoIsOptional();
  v19 = (__int128 *)(a2 + 32);
  if (IsOptional)
  {
    v49 = 0u;
    v50 = 0u;
    v20 = *(_OWORD *)(a2 + 48);
    v47 = *v19;
    v48 = v20;
    RETypeInfoGetOptionalValueType();
    v45 = 0u;
    v46 = 0u;
    Instance = RETypeInfoCreateInstance();
    v53 = 0u;
    v54 = 0u;
    if (!Instance)
      goto LABEL_23;
LABEL_27:
    v39 = Instance;
    v23 = (std::__shared_weak_count *)operator new();
    v23->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
    v23->__shared_owners_ = 0;
    v23->__shared_weak_owners_ = 0;
    v23[1].__vftable = (std::__shared_weak_count_vtbl *)Instance;
    v40 = v23;
    *(_QWORD *)&v49 = a3;
    if (!v59)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, _anonymous_namespace_ *, uint64_t *, __int128 *, __int128 *))(*(_QWORD *)v59 + 48))(v59, a1, &v39, &v49, &v53);
    v24 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (IsOptional)
    {
      v49 = v53;
      v50 = v54;
      v27 = *(_OWORD *)(a2 + 48);
      v43 = *v19;
      v44 = v27;
      REOptionalAccessorSetValue();
      v41 = v49;
      v42 = v50;
      RETypeInfoDestroyInstance();
    }
    v28 = v59;
    if (v59 == buf)
    {
      v29 = 4;
      v28 = buf;
    }
    else
    {
      if (!v59)
        return;
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
    return;
  }
  Instance = *(_QWORD *)(a2 + 16);
  if (Instance)
    goto LABEL_27;
LABEL_23:
  AsToken = (uint64_t)v59;
  if (v59 == buf)
  {
    v22 = 4;
    AsToken = (uint64_t)buf;
    goto LABEL_41;
  }
  if (v59)
  {
    v22 = 5;
LABEL_41:
    AsToken = (*(uint64_t (**)(void))(*(_QWORD *)AsToken + 8 * v22))();
  }
LABEL_42:
  v30 = *(id *)(realityio::logObjects((realityio *)AsToken) + 24);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&v49 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v49);
    v31 = v53 & 0xFFFFFFFFFFFFFFF8;
    if ((v53 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v32 = (const char *)(v31 + 16);
      if (*(char *)(v31 + 39) < 0)
        v32 = *(const char **)v32;
    }
    else
    {
      v32 = "";
    }
    v33 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8;
    if (v33)
    {
      v34 = (const char *)(v33 + 16);
      if (*(char *)(v33 + 39) < 0)
        v34 = *(const char **)v34;
    }
    else
    {
      v34 = "";
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, &v38);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v32;
    v56 = 2080;
    v57 = v34;
    v58 = 2080;
    v59 = (_BYTE *)Text;
    _os_log_impl(&dword_22FF26000, v30, OS_LOG_TYPE_DEFAULT, "Unsupported type conversion USD (\"%s\") to RE (\"%s\") for \"%s\" ", buf, 0x20u);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
    if ((v53 & 7) != 0)
    {
      v36 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
      do
        v37 = __ldxr(v36);
      while (__stlxr(v37 - 2, v36));
    }
  }

}

void sub_230175944()
{
  __break(1u);
}

void sub_23017596C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  __cxa_end_catch();
  v1 = *(_QWORD **)(v0 - 104);
  if (v1 == (_QWORD *)(v0 - 128))
  {
    v2 = 4;
    v1 = (_QWORD *)(v0 - 128);
  }
  else
  {
    if (!v1)
      goto LABEL_6;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_6:
  JUMPOUT(0x230175A48);
}

void sub_230175984(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x230175990);
}

void sub_2301759C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_2301759D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  v5 = *(_QWORD *)(v3 - 160);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }

  _Unwind_Resume(a1);
}

void sub_230175A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_230175A24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(v1 - 128);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  _Unwind_Resume(a1);
}

double `anonymous namespace'::getReArrayElementType(_OWORD *a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;
  realityio *IsList;
  __int128 v9;
  NSObject *v10;
  uint8_t buf[4];
  uint64_t Name;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v19 = *a2;
  v20 = v4;
  if (RETypeInfoIsArray())
  {
    v5 = a2[1];
    v17 = *a2;
    v18 = v5;
    RETypeInfoGetArrayElementType();
  }
  else
  {
    v7 = a2[1];
    v15 = *a2;
    v16 = v7;
    IsList = (realityio *)RETypeInfoIsList();
    if ((_DWORD)IsList)
    {
      v9 = a2[1];
      v13 = *a2;
      v14 = v9;
      RETypeInfoGetListElementType();
    }
    else
    {
      v10 = *(id *)(realityio::logObjects(IsList) + 24);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        Name = RETypeInfoGetName();
        _os_log_impl(&dword_22FF26000, v10, OS_LOG_TYPE_DEFAULT, "Component detail: \"%s\" is not an array.", buf, 0xCu);
      }

      result = 0.0;
      *a1 = 0u;
      a1[1] = 0u;
    }
  }
  return result;
}

void sub_230175B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::generateRe2DArray(uint64_t a1, uint64_t *a2, __int128 *a3, char **a4)
{
  __int128 v8;
  __int128 v9;
  realityio *v10;
  realityio *IsArray;
  pxrInternal__aapl__pxrReserved__::TfToken *Namespace;
  uint64_t EmptyString;
  NSObject *v14;
  __int128 v15;
  size_t v16;
  void **v17;
  const void *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  NSObject *v56;
  __int128 v57;
  uint64_t Name;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  void *__p[2];
  char v66;
  char v67[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76[6];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint8_t buf[24];
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v8 = a3[1];
  v81 = *a3;
  v82 = v8;
  if ((RETypeInfoIsList() & 1) != 0
    || (v9 = a3[1], v79 = *a3, v80 = v9, v10 = (realityio *)RETypeInfoIsArray(), (_DWORD)v10))
  {
    v77 = 0u;
    v78 = 0u;
    v76[4] = v77;
    v76[5] = v78;
    if ((RETypeInfoIsList() & 1) != 0
      || (v76[2] = v77, v76[3] = v78, IsArray = (realityio *)RETypeInfoIsArray(), (_DWORD)IsArray))
    {
      memset(v76, 0, 32);
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v67, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
      Namespace = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace((pxrInternal__aapl__pxrReserved__::UsdProperty *)a1);
      if ((*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Namespace);
      if (*(char *)(EmptyString + 23) >= 0)
        v16 = *(unsigned __int8 *)(EmptyString + 23);
      else
        v16 = *(_QWORD *)(EmptyString + 8);
      v17 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v16 + 7);
      if (v66 < 0)
        v17 = (void **)__p[0];
      if (v16)
      {
        if (*(char *)(EmptyString + 23) >= 0)
          v18 = (const void *)EmptyString;
        else
          v18 = *(const void **)EmptyString;
        memmove(v17, v18, v16);
      }
      strcpy((char *)v17 + v16, ":counts");
      if ((buf[0] & 7) != 0)
      {
        v19 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      v61 = 0;
      v59 = 0u;
      v60 = 0u;
      MEMORY[0x2348B2764](&v71, __p);
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v71, (pxrInternal__aapl__pxrReserved__::UsdObject *)v67);
      if (buf[0])
      {
        v62 = *(_OWORD *)&buf[8];
        v63 = v84;
        v21 = v85;
      }
      else
      {
        v62 = v59;
        v63 = v60;
        v21 = v61;
      }
      v64 = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 - 16);
        if (*((_QWORD *)&v63 + 1))
          v22 = (unint64_t *)*((_QWORD *)&v63 + 1);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)buf);
      if ((v71 & 7) != 0)
      {
        v24 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
      v26 = (std::__shared_weak_count *)a2[1];
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      if (v26)
      {
        v29 = (unint64_t *)&v26->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      memset(buf, 0, sizeof(buf));
      v31 = *a2;
      v32 = (std::__shared_weak_count *)a2[1];
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      if (v32)
      {
        v35 = (unint64_t *)&v32->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if ((_QWORD)v62)
      {
        v37 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v62);
          v38 = *(_QWORD *)(v64 + 8 * v37);
          v39 = *(_OWORD *)(*(_QWORD *)buf + 16 * v37);
          v59 = v39;
          v40 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
          if (*((_QWORD *)&v39 + 1))
          {
            v41 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
            do
              v43 = __ldxr(v41);
            while (__stxr(v43 + 1, v41));
          }
          if (v40)
          {
            v44 = (unint64_t *)&v40->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          v46 = v59;
          if (*((_QWORD *)&v59 + 1))
          {
            v47 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          if (*((_QWORD *)&v46 + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 16))(*((_QWORD *)&v46 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
            }
          }
          v51 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          if (*((_QWORD *)&v59 + 1))
          {
            v52 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          ++v37;
        }
        while (v37 < (unint64_t)v62);
      }
      *(_QWORD *)&v59 = buf;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v62);
      if (v66 < 0)
        operator delete(__p[0]);
      if ((v70 & 7) != 0)
      {
        v54 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
      if (v68)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v68);
    }
    else
    {
      v56 = *(id *)(realityio::logObjects(IsArray) + 24);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        v57 = a3[1];
        v74 = *a3;
        v75 = v57;
        Name = RETypeInfoGetName();
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = Name;
        _os_log_impl(&dword_22FF26000, v56, OS_LOG_TYPE_DEFAULT, "Component detail: \"%s\" is not a 2D array.", buf, 0xCu);
      }

    }
  }
  else
  {
    v14 = *(id *)(realityio::logObjects(v10) + 24);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = a3[1];
      v72 = *a3;
      v73 = v15;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = RETypeInfoGetName();
      _os_log_impl(&dword_22FF26000, v14, OS_LOG_TYPE_DEFAULT, "Component detail: \"%s\" is not a 2D array.", buf, 0xCu);
    }

  }
}

void sub_230176148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  void *v39;

  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::makeSharedNoDelete(_anonymous_namespace_ *this, void *a2)
{
  _QWORD *result;

  *(_QWORD *)this = a2;
  result = (_QWORD *)operator new();
  *result = &off_24FDFBE68;
  result[1] = 0;
  result[2] = 0;
  result[3] = a2;
  *((_QWORD *)this + 1) = result;
  return result;
}

void sub_2301762C0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_2301762CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void `anonymous namespace'::resetReArray(__int128 *a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  realityio *IsList;
  __int128 v6;
  NSObject *v7;
  uint8_t buf[4];
  uint64_t Name;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  v16 = *a1;
  v17 = v2;
  if (RETypeInfoIsArray())
  {
    v3 = a1[1];
    v14 = *a1;
    v15 = v3;
    REArrayAccessorReset();
  }
  else
  {
    v4 = a1[1];
    v12 = *a1;
    v13 = v4;
    IsList = (realityio *)RETypeInfoIsList();
    if ((_DWORD)IsList)
    {
      v6 = a1[1];
      v10 = *a1;
      v11 = v6;
      REListAccessorReset();
    }
    else
    {
      v7 = *(id *)(realityio::logObjects(IsList) + 24);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        Name = RETypeInfoGetName();
        _os_log_impl(&dword_22FF26000, v7, OS_LOG_TYPE_DEFAULT, "Component detail: \"%s\" is not an array.", buf, 0xCu);
      }

    }
  }
}

void sub_230176404(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::appendReArrayElements(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v6;
  uint64_t ElementAt;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int64x2_t v24;
  char *v25;
  realityio *IsList;
  uint64_t v27;
  uint64_t Element;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  int64x2_t v45;
  char *v46;
  NSObject *v47;
  _QWORD buf[3];
  char *v49;
  _QWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (RETypeInfoIsArray())
  {
    if (a3)
    {
      v6 = 0;
      do
      {
        ElementAt = REArrayAccessorGetElementAt();
        v8 = (_QWORD *)operator new();
        v9 = v8;
        *v8 = &off_24FDFBE68;
        v8[1] = 0;
        v8[2] = 0;
        v8[3] = ElementAt;
        v11 = (uint64_t *)a4[1];
        v10 = (unint64_t)a4[2];
        if ((unint64_t)v11 >= v10)
        {
          v13 = ((char *)v11 - *a4) >> 4;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 60)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v15 = v10 - (_QWORD)*a4;
          if (v15 >> 3 > v14)
            v14 = v15 >> 3;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
            v16 = 0xFFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          v50 = a4 + 2;
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v16);
          v19 = (uint64_t *)&v17[16 * v13];
          *v19 = ElementAt;
          v19[1] = (uint64_t)v9;
          v21 = *a4;
          v20 = a4[1];
          if (v20 == *a4)
          {
            v24 = vdupq_n_s64((unint64_t)v20);
            v22 = &v17[16 * v13];
          }
          else
          {
            v22 = &v17[16 * v13];
            do
            {
              v23 = *((_OWORD *)v20 - 1);
              v20 -= 16;
              *((_OWORD *)v22 - 1) = v23;
              v22 -= 16;
              *(_QWORD *)v20 = 0;
              *((_QWORD *)v20 + 1) = 0;
            }
            while (v20 != v21);
            v24 = *(int64x2_t *)a4;
          }
          v12 = (char *)(v19 + 2);
          *a4 = v22;
          a4[1] = (char *)(v19 + 2);
          *(int64x2_t *)&buf[1] = v24;
          v25 = a4[2];
          a4[2] = &v17[16 * v18];
          v49 = v25;
          buf[0] = v24.i64[0];
          std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          *v11 = ElementAt;
          v11[1] = (uint64_t)v8;
          v12 = (char *)(v11 + 2);
        }
        a4[1] = v12;
        ++v6;
      }
      while (v6 != a3);
    }
  }
  else
  {
    IsList = (realityio *)RETypeInfoIsList();
    if ((_DWORD)IsList)
    {
      REListIteratorCreate();
      if (a3)
      {
        v27 = 0;
        do
        {
          Element = REListIteratorNextElement();
          v29 = (_QWORD *)operator new();
          v30 = v29;
          *v29 = &off_24FDFBE68;
          v29[1] = 0;
          v29[2] = 0;
          v29[3] = Element;
          v32 = (uint64_t *)a4[1];
          v31 = (unint64_t)a4[2];
          if ((unint64_t)v32 >= v31)
          {
            v34 = ((char *)v32 - *a4) >> 4;
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 60)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v36 = v31 - (_QWORD)*a4;
            if (v36 >> 3 > v35)
              v35 = v36 >> 3;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
              v37 = 0xFFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            v50 = a4 + 2;
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v37);
            v40 = (uint64_t *)&v38[16 * v34];
            *v40 = Element;
            v40[1] = (uint64_t)v30;
            v42 = *a4;
            v41 = a4[1];
            if (v41 == *a4)
            {
              v45 = vdupq_n_s64((unint64_t)v41);
              v43 = &v38[16 * v34];
            }
            else
            {
              v43 = &v38[16 * v34];
              do
              {
                v44 = *((_OWORD *)v41 - 1);
                v41 -= 16;
                *((_OWORD *)v43 - 1) = v44;
                v43 -= 16;
                *(_QWORD *)v41 = 0;
                *((_QWORD *)v41 + 1) = 0;
              }
              while (v41 != v42);
              v45 = *(int64x2_t *)a4;
            }
            v33 = (char *)(v40 + 2);
            *a4 = v43;
            a4[1] = (char *)(v40 + 2);
            *(int64x2_t *)&buf[1] = v45;
            v46 = a4[2];
            a4[2] = &v38[16 * v39];
            v49 = v46;
            buf[0] = v45.i64[0];
            std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *v32 = Element;
            v32[1] = (uint64_t)v29;
            v33 = (char *)(v32 + 2);
          }
          a4[1] = v33;
          ++v27;
        }
        while (v27 != a3);
      }
      REListIteratorDestroy();
    }
    else
    {
      v47 = *(id *)(realityio::logObjects(IsList) + 24);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315138;
        *(_QWORD *)((char *)buf + 4) = RETypeInfoGetName();
        _os_log_impl(&dword_22FF26000, v47, OS_LOG_TYPE_DEFAULT, "Component detail: \"%s\" is not an array.", (uint8_t *)buf, 0xCu);
      }

    }
  }
}

void sub_2301767C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2301767CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_230176810(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_230176828(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildren(pxrInternal__aapl__pxrReserved__::UsdPrim *this, uint64_t a2)
{
  uint64_t *UsdPrimDefaultPredicate;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];

  UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(this);
  v6 = *UsdPrimDefaultPredicate;
  v5 = UsdPrimDefaultPredicate[1];
  v7 = UsdPrimDefaultPredicate[2];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  v9[0] = v6;
  v9[1] = v5;
  v9[2] = v7;
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(a2, v9, (uint64_t)this);
}

uint64_t (**`anonymous namespace'::setComponentDataUsingInfoHashTableKeys(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, uint64_t a3))()
{
  unsigned __int8 v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  realityio *DictionaryKeyType;
  uint64_t Name;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  NSObject *v33;
  unint64_t v34;
  const char *v35;
  unint64_t v36;
  const char *v37;
  uint64_t Text;
  unsigned int *v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t (**result)();
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int *v171;
  unsigned int v172;
  pxrInternal__aapl__pxrReserved__::UsdPrim *v173;
  _QWORD *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD v179[3];
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD v183[3];
  uint64_t v184;
  uint64_t v185;
  _QWORD v186[3];
  uint64_t v187;
  uint64_t v188;
  _QWORD v189[3];
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD v193[3];
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[3];
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD v203[3];
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD v207[3];
  uint64_t v208;
  uint64_t v209;
  _QWORD v210[3];
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  _QWORD v217[5];
  _QWORD v218[4];
  uint64_t TypeName;
  _QWORD v220[5];
  _QWORD v221[4];
  uint64_t v222;
  _QWORD v223[3];
  _QWORD *v224;
  uint64_t v225;
  _QWORD v226[3];
  _QWORD *v227;
  uint64_t v228;
  _QWORD v229[5];
  _QWORD v230[4];
  uint64_t v231;
  uint64_t (**v232)();
  void (*v233)(pxrInternal__aapl__pxrReserved__::UsdObject *, uint64_t, __int128 *, char **);
  uint64_t v234;
  uint64_t (***v235)();
  uint64_t v236;
  _QWORD v237[5];
  _QWORD v238[5];
  _QWORD v239[4];
  uint64_t v240;
  _QWORD v241[2];
  uint64_t *v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD v245[4];
  __int128 v246;
  __int128 v247;
  char *v248;
  uint64_t v249;
  _QWORD v250[4];
  uint64_t v251;
  uint64_t v252;
  _QWORD v253[3];
  _QWORD *v254;
  _BYTE buf[12];
  __int16 v256;
  const char *v257;
  __int16 v258;
  uint64_t *v259;
  uint64_t v260[4];
  uint64_t v261[4];
  uint64_t v262[4];
  uint64_t v263[4];
  uint64_t v264[4];
  uint64_t v265[4];
  uint64_t v266[4];
  uint64_t v267[4];
  _QWORD v268[4];

  v268[1] = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_255E54E80);
  if ((v6 & 1) != 0 || !__cxa_guard_acquire(&qword_255E54E80))
    goto LABEL_2;
  v173 = a1;
  MEMORY[0x2348B274C](&v211, "uchar[]");
  MEMORY[0x2348B274C](&v209, "uint8_t");
  v46 = v209;
  v209 = 0;
  v252 = v46;
  v253[0] = &off_24FDFBF78;
  v174 = v253;
  v254 = v253;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v210, &v252, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(buf, v211, v210);
  MEMORY[0x2348B274C](&v208, "uint[]");
  MEMORY[0x2348B274C](&v206, "uint16_t");
  v47 = v206;
  v206 = 0;
  *(_QWORD *)&v246 = v47;
  *((_QWORD *)&v246 + 1) = &off_24FDFBF78;
  v248 = (char *)&v246 + 8;
  MEMORY[0x2348B274C](&v205, "uint32_t");
  v48 = v205;
  v205 = 0;
  v249 = v48;
  v250[0] = &off_24FDFBF78;
  v250[3] = v250;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v207, (uint64_t *)&v246, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v260, v208, v207);
  MEMORY[0x2348B274C](&v204, "uint64[]");
  MEMORY[0x2348B274C](&v202, "uint64_t");
  v49 = v202;
  v202 = 0;
  v240 = v49;
  v241[0] = &off_24FDFBF78;
  v243 = v241;
  MEMORY[0x2348B274C](&v201, "size_t");
  v50 = v201;
  v201 = 0;
  v244 = v50;
  v245[0] = &off_24FDFBF78;
  v245[3] = v245;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v203, &v240, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v261, v204, v203);
  MEMORY[0x2348B274C](&v200, "int[]");
  MEMORY[0x2348B274C](&v198, "char");
  v51 = v198;
  v198 = 0;
  v231 = v51;
  v232 = &off_24FDFBF78;
  v235 = &v232;
  MEMORY[0x2348B274C](&v197, "int8_t");
  v52 = v197;
  v197 = 0;
  v236 = v52;
  v237[0] = &off_24FDFBF78;
  v237[3] = v237;
  MEMORY[0x2348B274C](&v196, "int16_t");
  v53 = v196;
  v196 = 0;
  v237[4] = v53;
  v238[0] = &off_24FDFBF78;
  v238[3] = v238;
  MEMORY[0x2348B274C](&v195, "int32_t");
  v54 = v195;
  v195 = 0;
  v238[4] = v54;
  v239[0] = &off_24FDFBF78;
  v239[3] = v239;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v199, &v231, 4);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v262, v200, v199);
  MEMORY[0x2348B274C](&v194, "int64[]");
  MEMORY[0x2348B274C](&v192, "int");
  v55 = v192;
  v192 = 0;
  v228 = v55;
  v229[0] = &off_24FDFBF78;
  v229[3] = v229;
  MEMORY[0x2348B274C](&v191, "int64_t");
  v56 = v191;
  v191 = 0;
  v229[4] = v56;
  v230[0] = &off_24FDFBF78;
  v230[3] = v230;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v193, &v228, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v263, v194, v193);
  MEMORY[0x2348B274C](&v190, "float[]");
  MEMORY[0x2348B274C](&v188, "float");
  v57 = v188;
  v188 = 0;
  v58 = v226;
  v225 = v57;
  v226[0] = &off_24FDFBF78;
  v227 = v226;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v189, &v225, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v264, v190, v189);
  MEMORY[0x2348B274C](&v187, "double[]");
  MEMORY[0x2348B274C](&v185, "double");
  v59 = v185;
  v185 = 0;
  v60 = v223;
  v222 = v59;
  v223[0] = &off_24FDFBF78;
  v224 = v223;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v186, &v222, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v265, v187, v186);
  MEMORY[0x2348B274C](&v184, "token[]");
  MEMORY[0x2348B274C](&v182, "DynamicString");
  v61 = v182;
  v182 = 0;
  TypeName = v61;
  v220[0] = &off_24FDFBF78;
  v220[3] = v220;
  MEMORY[0x2348B274C](&v181, "StringID");
  v62 = v181;
  v181 = 0;
  v220[4] = v62;
  v221[0] = &off_24FDFBF78;
  v221[3] = v221;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v183, &TypeName, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v266, v184, v183);
  MEMORY[0x2348B274C](&v180, "string[]");
  MEMORY[0x2348B274C](&v178, "DynamicString");
  v63 = v178;
  v178 = 0;
  v216 = v63;
  v217[0] = &off_24FDFBF78;
  v217[3] = v217;
  MEMORY[0x2348B274C](&v177, "StringID");
  v64 = v177;
  v177 = 0;
  v217[4] = v64;
  v218[0] = &off_24FDFBF78;
  v218[3] = v218;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v179, &v216, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v267, v180, v179);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::map[abi:ne180100]((uint64_t)buf, 9);
  v65 = v268;
  do
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*((_QWORD **)v65 - 2));
    v67 = *((_QWORD *)v65 - 4);
    v65 -= 32;
    v66 = v67;
    if ((v67 & 7) != 0)
    {
      v68 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stlxr(v69 - 2, v68));
    }
  }
  while (v65 != buf);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v179[1]);
  v70 = &TypeName;
  do
  {
    v71 = (uint64_t *)*(v70 - 1);
    if (v71 == v70 - 4)
    {
      v71 = v70 - 4;
      v72 = 4;
    }
    else
    {
      if (!v71)
        goto LABEL_84;
      v72 = 5;
    }
    (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_84:
    v74 = *(v70 - 5);
    v70 -= 5;
    v73 = v74;
    if ((v74 & 7) != 0)
    {
      v75 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
      do
        v76 = __ldxr(v75);
      while (__stlxr(v76 - 2, v75));
    }
  }
  while (v70 != &v216);
  if ((v177 & 7) != 0)
  {
    v77 = (unsigned int *)(v177 & 0xFFFFFFFFFFFFFFF8);
    do
      v78 = __ldxr(v77);
    while (__stlxr(v78 - 2, v77));
  }
  if ((v178 & 7) != 0)
  {
    v79 = (unsigned int *)(v178 & 0xFFFFFFFFFFFFFFF8);
    do
      v80 = __ldxr(v79);
    while (__stlxr(v80 - 2, v79));
  }
  if ((v180 & 7) != 0)
  {
    v81 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v183[1]);
  v83 = &v222;
  while (2)
  {
    v84 = (uint64_t *)*(v83 - 1);
    if (v84 == v83 - 4)
    {
      v84 = v83 - 4;
      v85 = 4;
LABEL_102:
      (*(void (**)(void))(*v84 + 8 * v85))();
    }
    else if (v84)
    {
      v85 = 5;
      goto LABEL_102;
    }
    v87 = *(v83 - 5);
    v83 -= 5;
    v86 = v87;
    if ((v87 & 7) != 0)
    {
      v88 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
      do
        v89 = __ldxr(v88);
      while (__stlxr(v89 - 2, v88));
    }
    if (v83 != &TypeName)
      continue;
    break;
  }
  if ((v181 & 7) != 0)
  {
    v90 = (unsigned int *)(v181 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  if ((v182 & 7) != 0)
  {
    v92 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v93 = __ldxr(v92);
    while (__stlxr(v93 - 2, v92));
  }
  if ((v184 & 7) != 0)
  {
    v94 = (unsigned int *)(v184 & 0xFFFFFFFFFFFFFFF8);
    do
      v95 = __ldxr(v94);
    while (__stlxr(v95 - 2, v94));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v186[1]);
  if (v224 == v223)
  {
    v96 = 4;
LABEL_121:
    (*(void (**)(_QWORD *))(*v60 + 8 * v96))(v60);
  }
  else if (v224)
  {
    v96 = 5;
    v60 = v224;
    goto LABEL_121;
  }
  if ((v222 & 7) != 0)
  {
    v97 = (unsigned int *)(v222 & 0xFFFFFFFFFFFFFFF8);
    do
      v98 = __ldxr(v97);
    while (__stlxr(v98 - 2, v97));
  }
  if ((v185 & 7) != 0)
  {
    v99 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  if ((v187 & 7) != 0)
  {
    v101 = (unsigned int *)(v187 & 0xFFFFFFFFFFFFFFF8);
    do
      v102 = __ldxr(v101);
    while (__stlxr(v102 - 2, v101));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v189[1]);
  if (v227 == v226)
  {
    v103 = 4;
LABEL_135:
    (*(void (**)(_QWORD *))(*v58 + 8 * v103))(v58);
  }
  else if (v227)
  {
    v103 = 5;
    v58 = v227;
    goto LABEL_135;
  }
  if ((v225 & 7) != 0)
  {
    v104 = (unsigned int *)(v225 & 0xFFFFFFFFFFFFFFF8);
    do
      v105 = __ldxr(v104);
    while (__stlxr(v105 - 2, v104));
  }
  if ((v188 & 7) != 0)
  {
    v106 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
    do
      v107 = __ldxr(v106);
    while (__stlxr(v107 - 2, v106));
  }
  if ((v190 & 7) != 0)
  {
    v108 = (unsigned int *)(v190 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v193[1]);
  v110 = &v231;
  while (2)
  {
    v111 = (uint64_t *)*(v110 - 1);
    if (v111 == v110 - 4)
    {
      v111 = v110 - 4;
      v112 = 4;
LABEL_150:
      (*(void (**)(void))(*v111 + 8 * v112))();
    }
    else if (v111)
    {
      v112 = 5;
      goto LABEL_150;
    }
    v114 = *(v110 - 5);
    v110 -= 5;
    v113 = v114;
    if ((v114 & 7) != 0)
    {
      v115 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
      do
        v116 = __ldxr(v115);
      while (__stlxr(v116 - 2, v115));
    }
    if (v110 != &v228)
      continue;
    break;
  }
  if ((v191 & 7) != 0)
  {
    v117 = (unsigned int *)(v191 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  if ((v192 & 7) != 0)
  {
    v119 = (unsigned int *)(v192 & 0xFFFFFFFFFFFFFFF8);
    do
      v120 = __ldxr(v119);
    while (__stlxr(v120 - 2, v119));
  }
  if ((v194 & 7) != 0)
  {
    v121 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFFFF8);
    do
      v122 = __ldxr(v121);
    while (__stlxr(v122 - 2, v121));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v199[1]);
  v123 = &v240;
  while (2)
  {
    v124 = (uint64_t *)*(v123 - 1);
    if (v124 == v123 - 4)
    {
      v124 = v123 - 4;
      v125 = 4;
LABEL_169:
      (*(void (**)(void))(*v124 + 8 * v125))();
    }
    else if (v124)
    {
      v125 = 5;
      goto LABEL_169;
    }
    v127 = *(v123 - 5);
    v123 -= 5;
    v126 = v127;
    if ((v127 & 7) != 0)
    {
      v128 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
      do
        v129 = __ldxr(v128);
      while (__stlxr(v129 - 2, v128));
    }
    if (v123 != &v231)
      continue;
    break;
  }
  if ((v195 & 7) != 0)
  {
    v130 = (unsigned int *)(v195 & 0xFFFFFFFFFFFFFFF8);
    do
      v131 = __ldxr(v130);
    while (__stlxr(v131 - 2, v130));
  }
  if ((v196 & 7) != 0)
  {
    v132 = (unsigned int *)(v196 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stlxr(v133 - 2, v132));
  }
  if ((v197 & 7) != 0)
  {
    v134 = (unsigned int *)(v197 & 0xFFFFFFFFFFFFFFF8);
    do
      v135 = __ldxr(v134);
    while (__stlxr(v135 - 2, v134));
  }
  if ((v198 & 7) != 0)
  {
    v136 = (unsigned int *)(v198 & 0xFFFFFFFFFFFFFFF8);
    do
      v137 = __ldxr(v136);
    while (__stlxr(v137 - 2, v136));
  }
  if ((v200 & 7) != 0)
  {
    v138 = (unsigned int *)(v200 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v203[1]);
  v140 = (uint64_t *)&v246;
  while (2)
  {
    v141 = (uint64_t *)*(v140 - 1);
    if (v141 == v140 - 4)
    {
      v141 = v140 - 4;
      v142 = 4;
LABEL_194:
      (*(void (**)(void))(*v141 + 8 * v142))();
    }
    else if (v141)
    {
      v142 = 5;
      goto LABEL_194;
    }
    v144 = *(v140 - 5);
    v140 -= 5;
    v143 = v144;
    if ((v144 & 7) != 0)
    {
      v145 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
      do
        v146 = __ldxr(v145);
      while (__stlxr(v146 - 2, v145));
    }
    if (v140 != &v240)
      continue;
    break;
  }
  if ((v201 & 7) != 0)
  {
    v147 = (unsigned int *)(v201 & 0xFFFFFFFFFFFFFFF8);
    do
      v148 = __ldxr(v147);
    while (__stlxr(v148 - 2, v147));
  }
  if ((v202 & 7) != 0)
  {
    v149 = (unsigned int *)(v202 & 0xFFFFFFFFFFFFFFF8);
    do
      v150 = __ldxr(v149);
    while (__stlxr(v150 - 2, v149));
  }
  if ((v204 & 7) != 0)
  {
    v151 = (unsigned int *)(v204 & 0xFFFFFFFFFFFFFFF8);
    do
      v152 = __ldxr(v151);
    while (__stlxr(v152 - 2, v151));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v207[1]);
  v153 = &v251;
  while (2)
  {
    v154 = (uint64_t *)*(v153 - 1);
    if (v154 == v153 - 4)
    {
      v154 = v153 - 4;
      v155 = 4;
LABEL_213:
      (*(void (**)(void))(*v154 + 8 * v155))();
    }
    else if (v154)
    {
      v155 = 5;
      goto LABEL_213;
    }
    v157 = *(v153 - 5);
    v153 -= 5;
    v156 = v157;
    if ((v157 & 7) != 0)
    {
      v158 = (unsigned int *)(v156 & 0xFFFFFFFFFFFFFFF8);
      do
        v159 = __ldxr(v158);
      while (__stlxr(v159 - 2, v158));
    }
    if (v153 != (uint64_t *)&v246)
      continue;
    break;
  }
  if ((v205 & 7) != 0)
  {
    v160 = (unsigned int *)(v205 & 0xFFFFFFFFFFFFFFF8);
    do
      v161 = __ldxr(v160);
    while (__stlxr(v161 - 2, v160));
  }
  if ((v206 & 7) != 0)
  {
    v162 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFF8);
    do
      v163 = __ldxr(v162);
    while (__stlxr(v163 - 2, v162));
  }
  if ((v208 & 7) != 0)
  {
    v164 = (unsigned int *)(v208 & 0xFFFFFFFFFFFFFFF8);
    do
      v165 = __ldxr(v164);
    while (__stlxr(v165 - 2, v164));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v210[1]);
  if (v254 == v253)
  {
    v166 = 4;
LABEL_231:
    (*(void (**)(void))(*v174 + 8 * v166))();
  }
  else if (v254)
  {
    v166 = 5;
    v174 = v254;
    goto LABEL_231;
  }
  if ((v252 & 7) != 0)
  {
    v167 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFFFF8);
    do
      v168 = __ldxr(v167);
    while (__stlxr(v168 - 2, v167));
  }
  if ((v209 & 7) != 0)
  {
    v169 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFFFF8);
    do
      v170 = __ldxr(v169);
    while (__stlxr(v170 - 2, v169));
  }
  if ((v211 & 7) != 0)
  {
    v171 = (unsigned int *)(v211 & 0xFFFFFFFFFFFFFFF8);
    do
      v172 = __ldxr(v171);
    while (__stlxr(v172 - 2, v171));
  }
  __cxa_guard_release(&qword_255E54E80);
  a1 = v173;
LABEL_2:
  MEMORY[0x2348B274C](buf, "keys");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
  if ((buf[0] & 7) != 0)
  {
    v7 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  *(_QWORD *)&v246 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v231);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v246);
  v9 = qword_255E54E98;
  if (!qword_255E54E98)
    goto LABEL_12;
  v10 = &qword_255E54E98;
  do
  {
    v11 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54EA0, (uint64_t *)(v9 + 32), (uint64_t *)buf);
    v12 = (uint64_t *)(v9 + 8);
    if (!v11)
    {
      v12 = (uint64_t *)v9;
      v10 = (uint64_t *)v9;
    }
    v9 = *v12;
  }
  while (*v12);
  if (v10 == &qword_255E54E98
    || std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54EA0, (uint64_t *)buf, v10 + 4))
  {
LABEL_12:
    v10 = &qword_255E54E98;
  }
  if ((buf[0] & 7) != 0)
  {
    v13 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v246 = 0u;
  v247 = 0u;
  v15 = *(_OWORD *)(a2 + 48);
  v214 = *(_OWORD *)(a2 + 32);
  v215 = v15;
  DictionaryKeyType = (realityio *)RETypeInfoGetDictionaryKeyType();
  v242 = 0;
  if (v10 == &qword_255E54E98)
    goto LABEL_48;
  v212 = v246;
  v213 = v247;
  Name = RETypeInfoGetName();
  DictionaryKeyType = (realityio *)MEMORY[0x2348B274C](buf, Name);
  v18 = v10 + 6;
  v19 = (_QWORD *)v10[6];
  if (!v19)
    goto LABEL_24;
  v20 = (uint64_t)(v10 + 7);
  v21 = v10 + 6;
  do
  {
    DictionaryKeyType = (realityio *)std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v20, v19 + 4, (uint64_t *)buf);
    v22 = v19 + 1;
    if (!(_DWORD)DictionaryKeyType)
    {
      v22 = v19;
      v21 = v19;
    }
    v19 = (_QWORD *)*v22;
  }
  while (*v22);
  if (v21 == v18
    || (DictionaryKeyType = (realityio *)std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v20, (uint64_t *)buf, v21 + 4), (_DWORD)DictionaryKeyType))
  {
LABEL_24:
    v21 = v18;
  }
  if ((buf[0] & 7) != 0)
  {
    v23 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  if (v18 != v21)
  {
    DictionaryKeyType = (realityio *)std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)(v21 + 5));
    v25 = v259;
    v26 = v242;
    if (v259 == (uint64_t *)buf)
    {
      if (v242 == &v240)
      {
        (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)buf + 24))(buf, &v228);
        (*(void (**)(uint64_t *))(*v259 + 32))(v259);
        v259 = 0;
        (*(void (**)(uint64_t *, _BYTE *))(*v242 + 24))(v242, buf);
        (*(void (**)(uint64_t *))(*v242 + 32))(v242);
        v242 = 0;
        v259 = (uint64_t *)buf;
        (*(void (**)(uint64_t *, uint64_t *))(v228 + 24))(&v228, &v240);
        DictionaryKeyType = (realityio *)(*(uint64_t (**)(uint64_t *))(v228 + 32))(&v228);
        v242 = &v240;
        v26 = v259;
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)buf + 24))(buf, &v240);
        DictionaryKeyType = (realityio *)(*(uint64_t (**)(uint64_t *))(*v259 + 32))(v259);
        v26 = v242;
        v259 = v242;
        v242 = &v240;
      }
LABEL_36:
      if (v26 == (uint64_t *)buf)
      {
        v27 = 4;
        v26 = (uint64_t *)buf;
        goto LABEL_40;
      }
      if (v26)
      {
        v27 = 5;
        goto LABEL_40;
      }
    }
    else
    {
      if (v242 != &v240)
      {
        v259 = v242;
        v242 = v25;
        goto LABEL_36;
      }
      v26 = (uint64_t *)buf;
      (*(void (**)(uint64_t *, _BYTE *))(v240 + 24))(&v240, buf);
      (*(void (**)(uint64_t *))(*v242 + 32))(v242);
      v242 = v259;
      v259 = (uint64_t *)buf;
      v27 = 4;
LABEL_40:
      DictionaryKeyType = (realityio *)(*(uint64_t (**)(uint64_t *))(*v26 + 8 * v27))(v26);
    }
  }
  if (!v242)
  {
LABEL_48:
    v33 = *(id *)(realityio::logObjects(DictionaryKeyType) + 24);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v231);
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
      v34 = v228 & 0xFFFFFFFFFFFFFFF8;
      if ((v228 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v35 = (const char *)(v34 + 16);
        if (*(char *)(v34 + 39) < 0)
          v35 = *(const char **)v35;
      }
      else
      {
        v35 = "";
      }
      v36 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8;
      if (v36)
      {
        v37 = (const char *)(v36 + 16);
        if (*(char *)(v36 + 39) < 0)
          v37 = *(const char **)v37;
      }
      else
      {
        v37 = "";
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v231, &v216);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v216);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v35;
      v256 = 2080;
      v257 = v37;
      v258 = 2080;
      v259 = (uint64_t *)Text;
      _os_log_impl(&dword_22FF26000, v33, OS_LOG_TYPE_DEFAULT, "Unsupported hashtable type conversion USD keys (\"%s\") to RE (\"%s\") for \"%s\" ", buf, 0x20u);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v216);
      if ((v228 & 7) != 0)
      {
        v39 = (unsigned int *)(v228 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
    }

  }
  else
  {
    v175 = *(std::__shared_weak_count_vtbl **)(a2 + 16);
    v28 = v175;
    v29 = (std::__shared_weak_count *)operator new();
    v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
    v29->__shared_owners_ = 0;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = v28;
    v176 = v29;
    if (!v242)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t *, pxrInternal__aapl__pxrReserved__::UsdPrim *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*v242 + 48))(v242, a1, &v175, a2 + 32, a3);
    v30 = v176;
    if (v176)
    {
      p_shared_owners = (unint64_t *)&v176->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  v41 = v242;
  if (v242 == &v240)
  {
    v42 = 4;
    v41 = &v240;
LABEL_65:
    (*(void (**)(void))(*v41 + 8 * v42))();
  }
  else if (v242)
  {
    v42 = 5;
    goto LABEL_65;
  }
  if ((v234 & 7) != 0)
  {
    v43 = (unsigned int *)(v234 & 0xFFFFFFFFFFFFFFF8);
    do
      v44 = __ldxr(v43);
    while (__stlxr(v44 - 2, v43));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v233);
  result = v232;
  if (v232)
    return (uint64_t (**)())pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v232);
  return result;
}

void sub_230177B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_QWORD *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,_QWORD *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,_QWORD *a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  _QWORD *a66;
  uint64_t a68;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unint64_t *v77;
  unint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unint64_t *v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unint64_t *v117;
  unint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unint64_t *v130;
  unint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int v146;
  unint64_t *v147;
  unint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unint64_t *v160;
  unint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int *v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;

  v72 = v70 + 288;
  do
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*(_QWORD **)(v72 - 16));
    v74 = *(_QWORD *)(v72 - 32);
    v72 -= 32;
    v73 = v74;
    if ((v74 & 7) != 0)
    {
      v75 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
      do
        v76 = __ldxr(v75);
      while (__stlxr(v76 - 2, v75));
    }
  }
  while (v72 != v70);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a19);
  v77 = &STACK[0x270];
  while (1)
  {
    v78 = (unint64_t *)*(v77 - 1);
    if (v78 == v77 - 4)
      break;
    if (v78)
    {
      v79 = 5;
LABEL_11:
      (*(void (**)(void))(*v78 + 8 * v79))();
    }
    v81 = *(v77 - 5);
    v77 -= 5;
    v80 = v81;
    if ((v81 & 7) != 0)
    {
      v82 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
      do
        v83 = __ldxr(v82);
      while (__stlxr(v83 - 2, v82));
    }
    if (v77 == &STACK[0x220])
    {
      if ((a16 & 7) != 0)
      {
        v84 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((a17 & 7) != 0)
      {
        v86 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((a21 & 7) != 0)
      {
        v88 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a25);
      v90 = &STACK[0x2C0];
      while (1)
      {
        v91 = (unint64_t *)*(v90 - 1);
        if (v91 == v90 - 4)
          break;
        if (v91)
        {
          v92 = 5;
LABEL_30:
          (*(void (**)(void))(*v91 + 8 * v92))();
        }
        v94 = *(v90 - 5);
        v90 -= 5;
        v93 = v94;
        if ((v94 & 7) != 0)
        {
          v95 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
          do
            v96 = __ldxr(v95);
          while (__stlxr(v96 - 2, v95));
        }
        if (v90 == &STACK[0x270])
        {
          if ((a22 & 7) != 0)
          {
            v97 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
            do
              v98 = __ldxr(v97);
            while (__stlxr(v98 - 2, v97));
          }
          if ((a23 & 7) != 0)
          {
            v99 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFFFF8);
            do
              v100 = __ldxr(v99);
            while (__stlxr(v100 - 2, v99));
          }
          if ((a27 & 7) != 0)
          {
            v101 = (unsigned int *)(a27 & 0xFFFFFFFFFFFFFFF8);
            do
              v102 = __ldxr(v101);
            while (__stlxr(v102 - 2, v101));
          }
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a30);
          if ((_QWORD *)STACK[0x2E0] == v69)
          {
            v103 = 4;
            goto LABEL_48;
          }
          if (STACK[0x2E0])
          {
            v103 = 5;
            v69 = (_QWORD *)STACK[0x2E0];
LABEL_48:
            (*(void (**)(_QWORD *))(*v69 + 8 * v103))(v69);
          }
          if ((STACK[0x2C0] & 7) != 0)
          {
            v104 = (unsigned int *)(STACK[0x2C0] & 0xFFFFFFFFFFFFFFF8);
            do
              v105 = __ldxr(v104);
            while (__stlxr(v105 - 2, v104));
          }
          if ((a28 & 7) != 0)
          {
            v106 = (unsigned int *)(a28 & 0xFFFFFFFFFFFFFFF8);
            do
              v107 = __ldxr(v106);
            while (__stlxr(v107 - 2, v106));
          }
          if ((a32 & 7) != 0)
          {
            v108 = (unsigned int *)(a32 & 0xFFFFFFFFFFFFFFF8);
            do
              v109 = __ldxr(v108);
            while (__stlxr(v109 - 2, v108));
          }
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a35);
          if ((_QWORD *)STACK[0x308] == v68)
          {
            v110 = 4;
            goto LABEL_62;
          }
          if (STACK[0x308])
          {
            v110 = 5;
            v68 = (_QWORD *)STACK[0x308];
LABEL_62:
            (*(void (**)(_QWORD *))(*v68 + 8 * v110))(v68);
          }
          if ((STACK[0x2E8] & 7) != 0)
          {
            v111 = (unsigned int *)(STACK[0x2E8] & 0xFFFFFFFFFFFFFFF8);
            do
              v112 = __ldxr(v111);
            while (__stlxr(v112 - 2, v111));
          }
          if ((a33 & 7) != 0)
          {
            v113 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
            do
              v114 = __ldxr(v113);
            while (__stlxr(v114 - 2, v113));
          }
          if ((a37 & 7) != 0)
          {
            v115 = (unsigned int *)(a37 & 0xFFFFFFFFFFFFFFF8);
            do
              v116 = __ldxr(v115);
            while (__stlxr(v116 - 2, v115));
          }
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a41);
          v117 = &STACK[0x360];
          while (2)
          {
            v118 = (unint64_t *)*(v117 - 1);
            if (v118 == v117 - 4)
            {
              v118 = v117 - 4;
              v119 = 4;
LABEL_77:
              (*(void (**)(void))(*v118 + 8 * v119))();
            }
            else if (v118)
            {
              v119 = 5;
              goto LABEL_77;
            }
            v121 = *(v117 - 5);
            v117 -= 5;
            v120 = v121;
            if ((v121 & 7) != 0)
            {
              v122 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
              do
                v123 = __ldxr(v122);
              while (__stlxr(v123 - 2, v122));
            }
            if (v117 != &STACK[0x310])
              continue;
            break;
          }
          if ((a38 & 7) != 0)
          {
            v124 = (unsigned int *)(a38 & 0xFFFFFFFFFFFFFFF8);
            do
              v125 = __ldxr(v124);
            while (__stlxr(v125 - 2, v124));
          }
          if ((a39 & 7) != 0)
          {
            v126 = (unsigned int *)(a39 & 0xFFFFFFFFFFFFFFF8);
            do
              v127 = __ldxr(v126);
            while (__stlxr(v127 - 2, v126));
          }
          if ((a43 & 7) != 0)
          {
            v128 = (unsigned int *)(a43 & 0xFFFFFFFFFFFFFFF8);
            do
              v129 = __ldxr(v128);
            while (__stlxr(v129 - 2, v128));
          }
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a49);
          v130 = &STACK[0x400];
          while (2)
          {
            v131 = (unint64_t *)*(v130 - 1);
            if (v131 == v130 - 4)
            {
              v131 = v130 - 4;
              v132 = 4;
LABEL_96:
              (*(void (**)(void))(*v131 + 8 * v132))();
            }
            else if (v131)
            {
              v132 = 5;
              goto LABEL_96;
            }
            v134 = *(v130 - 5);
            v130 -= 5;
            v133 = v134;
            if ((v134 & 7) != 0)
            {
              v135 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFF8);
              do
                v136 = __ldxr(v135);
              while (__stlxr(v136 - 2, v135));
            }
            if (v130 == &STACK[0x360])
            {
              if ((a44 & 7) != 0)
              {
                v137 = (unsigned int *)(a44 & 0xFFFFFFFFFFFFFFF8);
                do
                  v138 = __ldxr(v137);
                while (__stlxr(v138 - 2, v137));
              }
              if ((a45 & 7) != 0)
              {
                v139 = (unsigned int *)(a45 & 0xFFFFFFFFFFFFFFF8);
                do
                  v140 = __ldxr(v139);
                while (__stlxr(v140 - 2, v139));
              }
              if ((a46 & 7) != 0)
              {
                v141 = (unsigned int *)(a46 & 0xFFFFFFFFFFFFFFF8);
                do
                  v142 = __ldxr(v141);
                while (__stlxr(v142 - 2, v141));
              }
              if ((a47 & 7) != 0)
              {
                v143 = (unsigned int *)(a47 & 0xFFFFFFFFFFFFFFF8);
                do
                  v144 = __ldxr(v143);
                while (__stlxr(v144 - 2, v143));
              }
              if ((a51 & 7) != 0)
              {
                v145 = (unsigned int *)(a51 & 0xFFFFFFFFFFFFFFF8);
                do
                  v146 = __ldxr(v145);
                while (__stlxr(v146 - 2, v145));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a55);
              v147 = &STACK[0x450];
              while (2)
              {
                v148 = (unint64_t *)*(v147 - 1);
                if (v148 == v147 - 4)
                {
                  v148 = v147 - 4;
                  v149 = 4;
LABEL_121:
                  (*(void (**)(void))(*v148 + 8 * v149))();
                }
                else if (v148)
                {
                  v149 = 5;
                  goto LABEL_121;
                }
                v151 = *(v147 - 5);
                v147 -= 5;
                v150 = v151;
                if ((v151 & 7) != 0)
                {
                  v152 = (unsigned int *)(v150 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v153 = __ldxr(v152);
                  while (__stlxr(v153 - 2, v152));
                }
                if (v147 != &STACK[0x400])
                  continue;
                break;
              }
              if ((a52 & 7) != 0)
              {
                v154 = (unsigned int *)(a52 & 0xFFFFFFFFFFFFFFF8);
                do
                  v155 = __ldxr(v154);
                while (__stlxr(v155 - 2, v154));
              }
              if ((a53 & 7) != 0)
              {
                v156 = (unsigned int *)(a53 & 0xFFFFFFFFFFFFFFF8);
                do
                  v157 = __ldxr(v156);
                while (__stlxr(v157 - 2, v156));
              }
              if ((a57 & 7) != 0)
              {
                v158 = (unsigned int *)(a57 & 0xFFFFFFFFFFFFFFF8);
                do
                  v159 = __ldxr(v158);
                while (__stlxr(v159 - 2, v158));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a61);
              v160 = &STACK[0x4A0];
              while (2)
              {
                v161 = (unint64_t *)*(v160 - 1);
                if (v161 == v160 - 4)
                {
                  v161 = v160 - 4;
                  v162 = 4;
LABEL_140:
                  (*(void (**)(void))(*v161 + 8 * v162))();
                }
                else if (v161)
                {
                  v162 = 5;
                  goto LABEL_140;
                }
                v164 = *(v160 - 5);
                v160 -= 5;
                v163 = v164;
                if ((v164 & 7) != 0)
                {
                  v165 = (unsigned int *)(v163 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v166 = __ldxr(v165);
                  while (__stlxr(v166 - 2, v165));
                }
                if (v160 == &STACK[0x450])
                {
                  if ((a58 & 7) != 0)
                  {
                    v167 = (unsigned int *)(a58 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v168 = __ldxr(v167);
                    while (__stlxr(v168 - 2, v167));
                  }
                  if ((a59 & 7) != 0)
                  {
                    v169 = (unsigned int *)(a59 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v170 = __ldxr(v169);
                    while (__stlxr(v170 - 2, v169));
                  }
                  if ((a63 & 7) != 0)
                  {
                    v171 = (unsigned int *)(a63 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v172 = __ldxr(v171);
                    while (__stlxr(v172 - 2, v171));
                  }
                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a66);
                  if ((_QWORD *)STACK[0x4C8] == a13)
                  {
                    v173 = 4;
                    goto LABEL_158;
                  }
                  if (STACK[0x4C8])
                  {
                    v173 = 5;
                    a13 = (_QWORD *)STACK[0x4C8];
LABEL_158:
                    (*(void (**)(void))(*a13 + 8 * v173))();
                  }
                  if ((STACK[0x4A8] & 7) != 0)
                  {
                    v174 = (unsigned int *)(STACK[0x4A8] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v175 = __ldxr(v174);
                    while (__stlxr(v175 - 2, v174));
                  }
                  if ((a64 & 7) != 0)
                  {
                    v176 = (unsigned int *)(a64 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v177 = __ldxr(v176);
                    while (__stlxr(v177 - 2, v176));
                  }
                  if ((a68 & 7) != 0)
                  {
                    v178 = (unsigned int *)(a68 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v179 = __ldxr(v178);
                    while (__stlxr(v179 - 2, v178));
                  }
                  __cxa_guard_abort(&qword_255E54E80);
                  _Unwind_Resume(a1);
                }
                continue;
              }
            }
            continue;
          }
        }
      }
      v91 = v90 - 4;
      v92 = 4;
      goto LABEL_30;
    }
  }
  v78 = v77 - 4;
  v79 = 4;
  goto LABEL_11;
}

void sub_23017857C()
{
  JUMPOUT(0x230177F28);
}

void sub_23017858C()
{
  JUMPOUT(0x230177F98);
}

void sub_23017859C()
{
  JUMPOUT(0x230177FB8);
}

void sub_2301785B0()
{
  JUMPOUT(0x230177FC0);
}

void sub_2301785C0()
{
  JUMPOUT(0x230178044);
}

void sub_2301785D4()
{
  JUMPOUT(0x2301780B4);
}

void sub_2301785E4()
{
  JUMPOUT(0x2301780D4);
}

void sub_2301785F8()
{
  JUMPOUT(0x2301780DCLL);
}

void sub_230178608()
{
  JUMPOUT(0x230178160);
}

void sub_23017861C()
{
  JUMPOUT(0x230178188);
}

void sub_230178630()
{
  JUMPOUT(0x2301781A8);
}

void sub_230178644()
{
  JUMPOUT(0x230178228);
}

void sub_230178654()
{
  JUMPOUT(0x230178248);
}

void sub_230178668()
{
  JUMPOUT(0x230178250);
}

void sub_230178678()
{
  JUMPOUT(0x2301782D4);
}

void sub_23017868C()
{
  JUMPOUT(0x230178348);
}

void sub_23017869C()
{
  JUMPOUT(0x230178368);
}

void sub_2301786B0()
{
  JUMPOUT(0x230178370);
}

void sub_2301786C0()
{
  JUMPOUT(0x2301783F4);
}

void sub_2301786D4()
{
  JUMPOUT(0x230178468);
}

void sub_2301786E4()
{
  JUMPOUT(0x230178488);
}

void sub_2301786F4()
{
  JUMPOUT(0x230178488);
}

void sub_230178708()
{
  JUMPOUT(0x230178490);
}

void sub_23017871C()
{
  JUMPOUT(0x230178504);
}

void sub_230178730()
{
  JUMPOUT(0x23017856CLL);
}

void sub_230178740()
{
  void *v0;
  unsigned int *v1;
  unsigned int v2;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x220]);
  if ((STACK[0x310] & 7) != 0)
  {
    v1 = (unsigned int *)(STACK[0x310] & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stlxr(v2 - 2, v1));
  }

  JUMPOUT(0x230178844);
}

void sub_23017877C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_230178794()
{
  __cxa_end_catch();
  JUMPOUT(0x230178844);
}

void sub_2301787BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x230178844);
}

void sub_2301787CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_2301787E0(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  if ((STACK[0x4D0] & 7) != 0)
  {
    v1 = (unsigned int *)(STACK[0x4D0] & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stlxr(v2 - 2, v1));
  }
  _Unwind_Resume(a1);
}

void sub_230178808()
{
  JUMPOUT(0x230178844);
}

void sub_230178810()
{
  JUMPOUT(0x23017889CLL);
}

void sub_230178818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_230178820()
{
  unsigned int *v0;
  unsigned int v1;
  unint64_t *v2;
  uint64_t v3;

  if ((STACK[0x4D0] & 7) != 0)
  {
    v0 = (unsigned int *)(STACK[0x4D0] & 0xFFFFFFFFFFFFFFF8);
    do
      v1 = __ldxr(v0);
    while (__stlxr(v1 - 2, v0));
  }
  v2 = (unint64_t *)STACK[0x418];
  if ((unint64_t *)STACK[0x418] == &STACK[0x400])
  {
    v3 = 4;
    v2 = &STACK[0x400];
  }
  else
  {
    if (!v2)
    {
LABEL_9:
      pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&STACK[0x360]);
      JUMPOUT(0x2301788A4);
    }
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
  goto LABEL_9;
}

_QWORD *realityio::ArbitraryComponentBuilder::updateComponentOnEntityFromProtoPrim(uint64_t a1, realityio::ImportSession **a2, pxrInternal__aapl__pxrReserved__::UsdObject *this, std::string::size_type a4, uint64_t *a5)
{
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  realityio *v12;
  realityio *ComponentType;
  uint64_t *v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t Text;
  uint64_t v18;
  uint64_t *v20;
  uint64_t ECSService;
  pxrInternal__aapl__pxrReserved__::UsdStage *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::TfToken *v27;
  char v28;
  unsigned int *v29;
  uint64_t EmptyString;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  _BOOL4 v39;
  __n128 *v40;
  _BOOL4 v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  unsigned int *v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  _BOOL8 v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  pxrInternal__aapl__pxrReserved__::TfToken *v79;
  unsigned __int8 v80;
  unsigned int *v81;
  uint64_t v82;
  __int128 v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  _BOOL8 v87;
  NSObject *v88;
  std::string *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t Entity;
  const char *Name;
  uint64_t ChildCount;
  uint64_t v97;
  uint64_t Child;
  const char *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t i;
  _BOOL8 v110;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v111;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  double v117;
  unsigned int *v118;
  unsigned int v119;
  double v120;
  unsigned int *v121;
  unsigned int v122;
  char v123;
  unsigned int *v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  void **v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  std::string::size_type v133;
  unint64_t *v134;
  unint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  std::string::size_type v138;
  unint64_t *v139;
  unint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  std::string::value_type **p_s;
  std::string::value_type *v144;
  std::string::size_type *v145;
  void **v146;
  unsigned int *v147;
  unsigned int v148;
  std::string::size_type v149;
  std::string::size_type v150;
  unint64_t v151;
  double v152;
  double v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  uint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  NSObject *v164;
  uint64_t v165;
  uint64_t v166;
  NSObject *v167;
  _BYTE *v168;
  _BYTE v170[32];
  std::string::size_type v171;
  std::string v172;
  _OWORD v173[2];
  std::string::size_type v174;
  char v175;
  __n128 v176;
  __int128 v177;
  std::string v178;
  std::string::value_type *__s;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  std::string v183;
  uint64_t v184;
  __n128 v185;
  uint64_t v186;
  __n128 v187;
  __int128 v188;
  std::string::size_type v189;
  int64x2_t v190;
  unint64_t v191;
  void *__p[2];
  __int128 v193;
  std::string::size_type v194;
  uint64_t v195[2];
  realityio *v196;
  void *v197;
  std::string::size_type v198;
  _BYTE buf[40];
  std::string::size_type v200;
  std::string v201;
  double v202;
  double v203;
  char v204;
  __n128 v205;
  uint64_t v206;
  __int128 v207[4];
  uint64_t v208;

  v208 = *MEMORY[0x24BDAC8D0];
  v198 = a4;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, buf);
  v8 = *(_QWORD **)(a1 + 288);
  if (!v8)
    goto LABEL_8;
  v9 = (_QWORD *)(a1 + 288);
  do
  {
    v10 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
    v11 = v8 + 1;
    if (!v10)
    {
      v11 = v8;
      v9 = v8;
    }
    v8 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v9 == (_QWORD *)(a1 + 288)
    || pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)buf, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 4)))
  {
LABEL_8:
    v197 = 0;
  }
  else
  {
    v197 = (void *)v9[5];
    if (v197)
      RERetain();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
  v12 = (realityio *)REComponentClassFromName();
  v196 = v12;
  if (!v12)
  {
    v15 = *(id *)(realityio::logObjects(0) + 24);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a5 + 23) >= 0)
        v16 = a5;
      else
        v16 = (uint64_t *)*a5;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, __p);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v16;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = Text;
      _os_log_impl(&dword_22FF26000, v15, OS_LOG_TYPE_DEFAULT, "Unknown component type for info:id \"%s\" from \"%s\"", buf, 0x16u);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      goto LABEL_30;
    }
LABEL_31:

    return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v197);
  }
  ComponentType = (realityio *)REMeshComponentGetComponentType();
  if (v12 == ComponentType)
  {
    v15 = *(id *)(realityio::logObjects(ComponentType) + 24);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, __p);
      v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl(&dword_22FF26000, v15, OS_LOG_TYPE_DEFAULT, "Mesh components cannot be explicitly created at \"%s\"", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
LABEL_30:
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      goto LABEL_31;
    }
    goto LABEL_31;
  }
  if (v12 == (realityio *)REImageBasedLightReceiverComponentGetComponentType()
    || v12 == (realityio *)REImageBasedLightComponentGetComponentType()
    || v12 == (realityio *)REVirtualEnvironmentProbeComponentGetComponentType()
    || v12 == (realityio *)REMeshSortingComponentGetComponentType()
    || v12 == (realityio *)RESpotLightComponentGetComponentType()
    || v12 == (realityio *)RESpotLightShadowMapComponentGetComponentType()
    || v12 == (realityio *)REDirectionalLightComponentGetComponentType()
    || v12 == (realityio *)REDirectionalLightShadowMapComponentGetComponentType()
    || v12 == (realityio *)REAnchoringComponentGetComponentType())
  {
    return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v197);
  }
  if (!v197)
  {
    *(_QWORD *)buf = REComponentCreateByClass();
    realityio::WrappedRERef<REAsset *>::operator=(&v197, (uint64_t *)buf);
    RERelease();
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, __p);
    *(_QWORD *)buf = __p;
    v20 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath&&>,std::tuple<>>((uint64_t **)(a1 + 280), (pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (_DWORD **)buf);
    realityio::WrappedRERef<REAsset *>::operator=(v20 + 5, (uint64_t *)&v197);
    goto LABEL_36;
  }
  if ((realityio *)REComponentGetClass() != v12)
  {
    REComponentGetClass();
    REEntityRemoveComponentByClass();
    *(_QWORD *)buf = REComponentCreateByClass();
    realityio::WrappedRERef<REAsset *>::operator=(&v197, (uint64_t *)buf);
    RERelease();
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, __p);
    *(_QWORD *)buf = __p;
    v14 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath&&>,std::tuple<>>((uint64_t **)(a1 + 280), (pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (_DWORD **)buf);
    realityio::WrappedRERef<REAsset *>::operator=(v14 + 5, (uint64_t *)&v197);
LABEL_36:
    pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    goto LABEL_38;
  }
  REEngineGetServiceLocator();
  ECSService = REServiceLocatorGetECSService();
  reinitIntrospectableData(ECSService, (uint64_t *)&v197);
LABEL_38:
  v22 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a2 + 1);
  realityio::Inputs::assetManager((realityio::Inputs *)a2);
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "Collider"))
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "RigidBody"))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, &v187);
      MEMORY[0x2348B274C](&v176, "material");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v187, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v176);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      if ((v176.n128_u8[0] & 7) != 0)
      {
        v31 = (unsigned int *)(v176.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v187);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)buf))
      {
        MEMORY[0x2348B274C](&v187, "restitution");
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v187);
        if ((v187.n128_u8[0] & 7) != 0)
        {
          v33 = (unsigned int *)(v187.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v34 = __ldxr(v33);
          while (__stlxr(v34 - 2, v33));
        }
        v187.n128_u32[0] = 0;
        realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)__p, (float *)&v187);
        MEMORY[0x2348B274C](&v176, "staticFriction");
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v176);
        if ((v176.n128_u8[0] & 7) != 0)
        {
          v35 = (unsigned int *)(v176.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        v176.n128_u32[0] = 0;
        realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v187, (float *)&v176);
        MEMORY[0x2348B274C](v173, "dynamicFriction");
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)v173);
        if ((v173[0] & 7) != 0)
        {
          v37 = (unsigned int *)(*(_QWORD *)&v173[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
        LODWORD(v173[0]) = 0;
        realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v176, (float *)v173);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v176);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v187);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)__p);
      }
      REAssetManagerPhysicsMaterialAssetCreate2();
      RERigidBodyComponentSetMaterial();
      RERelease();
      pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)buf);
      v12 = v196;
    }
    memset(buf, 0, 32);
    MockREComponentClassGetComponentTypeInfo((uint64_t)buf, (uint64_t)v12);
    v207[2] = *(_OWORD *)buf;
    v207[3] = *(_OWORD *)&buf[16];
    RETypeInfoGetSize();
    v176.n128_u8[0] = 0;
    v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "Anchoring");
    if (v39)
      v40 = &v176;
    else
      v40 = 0;
    v207[0] = *(_OWORD *)buf;
    v207[1] = *(_OWORD *)&buf[16];
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    buildValueType(this, v195, v207, a5, (const void **)__p, a2, v40, 0);
    if (SBYTE7(v193) < 0)
      operator delete(__p[0]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v195);
    if (v176.n128_u8[0])
      v41 = 0;
    else
      v41 = v39;
    if (v41)
    {
      realityio::ImportSession::getWorldScaleAtPrim(a2[5], this);
      REAnchoringComponentSetScaleFactor();
    }
    __p[0] = v12;
    std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(a1 + 40), (unint64_t *)__p, (uint64_t *)__p);
    v43 = *(_QWORD *)(a1 + 16);
    v42 = *(_QWORD *)(a1 + 24);
    v187.n128_u64[0] = v43;
    v187.n128_u64[1] = v42;
    if (v42)
    {
      v44 = (unint64_t *)(v42 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentClass");
    realityio::Outputs::storeValue<REComponentClass *&>(v43, (__int128 *)__p, &v196);
    if (SBYTE7(v193) < 0)
      operator delete(__p[0]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v187);
    goto LABEL_152;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, &v187);
  MEMORY[0x2348B274C](&v176, "Shape");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v187, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v176);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
  if ((v176.n128_u8[0] & 7) != 0)
  {
    v23 = (unsigned int *)(v176.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v187);
  MEMORY[0x2348B274C](buf, "shapeType");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
  if ((buf[0] & 7) != 0)
  {
    v25 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  v176.n128_u64[0] = 0;
  realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::TfToken>((unsigned int **)buf, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v187, (unsigned int **)&v176);
  v28 = buf[0];
  v29 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
  if ((*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t)(v29 + 4);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v27);
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v170, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
  }
  else
  {
    v46 = *(_OWORD *)EmptyString;
    *(_QWORD *)&v170[16] = *(_QWORD *)(EmptyString + 16);
    *(_OWORD *)v170 = v46;
  }
  if ((v28 & 7) != 0)
  {
    do
      v47 = __ldxr(v29);
    while (__stlxr(v47 - 2, v29));
    v48 = v176.n128_u64[0];
  }
  else
  {
    v48 = 0;
  }
  if ((v48 & 7) != 0)
  {
    v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)__p, v173);
  MEMORY[0x2348B274C](&v205, "pose");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v173, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v205);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
  if ((v205.n128_u8[0] & 7) != 0)
  {
    v51 = (unsigned int *)(v205.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v173);
  memset(v173, 0, sizeof(v173));
  REPoseIdentity();
  DWORD2(v173[0]) = v53;
  *(_QWORD *)&v173[0] = v54;
  v173[1] = v55;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v176))
  {
    MEMORY[0x2348B274C](buf, "position");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v176, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
    if ((buf[0] & 7) != 0)
    {
      v56 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
      do
        v57 = __ldxr(v56);
      while (__stlxr(v57 - 2, v56));
    }
    LODWORD(v180) = 0;
    __s = 0;
    *(_QWORD *)buf = 0;
    *(_DWORD *)&buf[8] = 0;
    LODWORD(__s) = realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v205, (float *)buf);
    HIDWORD(__s) = v58;
    LODWORD(v180) = v59;
    MEMORY[0x2348B274C](buf, "orientation");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v176, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
    if ((buf[0] & 7) != 0)
    {
      v60 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stlxr(v61 - 2, v60));
    }
    *(_OWORD *)buf = xmmword_230204CF0;
    LODWORD(v183.__r_.__value_.__l.__data_) = realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v185, (float *)buf);
    *(std::string::size_type *)((char *)v183.__r_.__value_.__r.__words + 4) = __PAIR64__(v63, v62);
    HIDWORD(v183.__r_.__value_.__r.__words[1]) = v64;
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)buf, 1.0);
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslateOnly();
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly();
    REMakePose();
    DWORD2(v173[0]) = v65;
    *(_QWORD *)&v173[0] = v66;
    v173[1] = v67;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v185);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v205);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v170, "Box"))
  {
    MEMORY[0x2348B274C](&v205, "extent");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v205);
    if ((v205.n128_u8[0] & 7) != 0)
    {
      v68 = (unsigned int *)(v205.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v69 = __ldxr(v68);
      while (__stlxr(v69 - 2, v68));
    }
    v205.n128_u64[0] = 0;
    v205.n128_u32[2] = 0;
    realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, (float *)&v205);
    v205.n128_u64[0] = 0;
    v205.n128_u64[0] = REAssetManagerCollisionShapeAssetCreateBox();
    REAssetManagerCollisionShapeAssetCreateCompound();
    RERelease();
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v170, "Capsule"))
  {
    MEMORY[0x2348B274C](&v205, "height");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v205);
    if ((v205.n128_u8[0] & 7) != 0)
    {
      v70 = (unsigned int *)(v205.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v71 = __ldxr(v70);
      while (__stlxr(v71 - 2, v70));
    }
    MEMORY[0x2348B274C](&v185, "radius");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v185);
    if ((v185.n128_u8[0] & 7) != 0)
    {
      v72 = (unsigned int *)(v185.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v73 = __ldxr(v72);
      while (__stlxr(v73 - 2, v72));
    }
    v185.n128_u32[0] = 0;
    realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, (float *)&v185);
    v185.n128_u32[0] = 0;
    realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v205, (float *)&v185);
    v185.n128_u64[0] = 0;
    v185.n128_u64[0] = REAssetManagerCollisionShapeAssetCreateCapsule();
    REAssetManagerCollisionShapeAssetCreateCompound();
    RERelease();
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v205);
  }
  else
  {
    v74 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v170, "Sphere");
    if (!v74)
    {
      v167 = *(id *)(realityio::logObjects((realityio *)v74) + 24);
      if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
      {
        v168 = v170;
        if (v170[23] < 0)
          v168 = *(_BYTE **)v170;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v168;
        _os_log_impl(&dword_22FF26000, v167, OS_LOG_TYPE_DEFAULT, "Shape type for \"%s\" does not exist. Creating an empty shape.", buf, 0xCu);
      }

      REAssetManagerCollisionShapeAssetCreateEmpty();
      goto LABEL_120;
    }
    MEMORY[0x2348B274C](&v205, "radius");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v205);
    if ((v205.n128_u8[0] & 7) != 0)
    {
      v75 = (unsigned int *)(v205.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v76 = __ldxr(v75);
      while (__stlxr(v76 - 2, v75));
    }
    v205.n128_u32[0] = 0;
    realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, (float *)&v205);
    v205.n128_u64[0] = 0;
    v205.n128_u64[0] = REAssetManagerCollisionShapeAssetCreateSphere();
    REAssetManagerCollisionShapeAssetCreateCompound();
    RERelease();
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)buf);
LABEL_120:
  REColliderComponentSetShape();
  MEMORY[0x2348B274C](&v205, "interactionType");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v205);
  if ((v205.n128_u8[0] & 7) != 0)
  {
    v77 = (unsigned int *)(v205.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v78 = __ldxr(v77);
    while (__stlxr(v78 - 2, v77));
  }
  MEMORY[0x2348B274C](&v185, "Default");
  realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::TfToken>((unsigned int **)&v205, (pxrInternal__aapl__pxrReserved__::UsdObject *)buf, (unsigned int **)&v185);
  v80 = v205.n128_u8[0];
  v81 = (unsigned int *)(v205.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
  if ((v205.n128_u64[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    v82 = (uint64_t)(v81 + 4);
  else
    v82 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v79);
  if (*(char *)(v82 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v183, *(const std::string::value_type **)v82, *(_QWORD *)(v82 + 8));
  }
  else
  {
    v83 = *(_OWORD *)v82;
    v183.__r_.__value_.__r.__words[2] = *(_QWORD *)(v82 + 16);
    *(_OWORD *)&v183.__r_.__value_.__l.__data_ = v83;
  }
  if ((v80 & 7) != 0)
  {
    do
      v84 = __ldxr(v81);
    while (__stlxr(v84 - 2, v81));
  }
  if ((v185.n128_u8[0] & 7) != 0)
  {
    v85 = (unsigned int *)(v185.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v86 = __ldxr(v85);
    while (__stlxr(v86 - 2, v85));
  }
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v183, "Trigger"))
  {
    v87 = std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v183, "Default");
    if (v87)
    {
      v88 = *(id *)(realityio::logObjects((realityio *)v87) + 24);
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
      {
        v89 = &v183;
        if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v89 = (std::string *)v183.__r_.__value_.__r.__words[0];
        v205.n128_u32[0] = 136315138;
        *(unint64_t *)((char *)v205.n128_u64 + 4) = (unint64_t)v89;
        _os_log_impl(&dword_22FF26000, v88, OS_LOG_TYPE_DEFAULT, "Interaction type for \"%s\" does not exist. Setting to \"Default\"", (uint8_t *)&v205, 0xCu);
      }

    }
  }
  REColliderComponentSetInteractionType();
  MEMORY[0x2348B274C](&v185, "mask");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v185);
  if ((v185.n128_u8[0] & 7) != 0)
  {
    v90 = (unsigned int *)(v185.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  MEMORY[0x2348B274C](&__s, "group");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__s);
  if ((__s & 7) != 0)
  {
    v92 = (unsigned int *)((unint64_t)__s & 0xFFFFFFFFFFFFFFF8);
    do
      v93 = __ldxr(v92);
    while (__stlxr(v93 - 2, v92));
  }
  LODWORD(__s) = 0;
  realityio::getAttributeValueWithDefaultValue<unsigned int>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v205, (unsigned int *)&__s);
  LODWORD(__s) = 0;
  realityio::getAttributeValueWithDefaultValue<unsigned int>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v185, (unsigned int *)&__s);
  REColliderComponentSetMask();
  REColliderComponentSetGroup();
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v185);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v205);
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v183.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)buf);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v176);
  if ((v170[23] & 0x80000000) != 0)
    operator delete(*(void **)v170);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v187);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
LABEL_152:
  Entity = REComponentGetEntity();
  if (Entity)
    v198 = Entity;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "GroundingShadow"))
  {
    Name = (const char *)REEntityGetName();
    if (strncmp(Name, "usdPrimitiveAxis", 0x10uLL))
    {
      ChildCount = REEntityGetChildCount();
      if (ChildCount)
      {
        v97 = 0;
        while (1)
        {
          Child = REEntityGetChild();
          v99 = (const char *)REEntityGetName();
          if (!strncmp(v99, "usdPrimitiveAxis", 0x10uLL))
            break;
          if (ChildCount == ++v97)
            goto LABEL_162;
        }
        v198 = Child;
      }
    }
  }
LABEL_162:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "BlendShapeWeights"))
  {
    memset(buf, 0, sizeof(buf));
    MEMORY[0x2348B274C](__p, "blendWeights:keys");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
    if (((uint64_t)__p[0] & 7) != 0)
    {
      v100 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v101 = __ldxr(v100);
      while (__stlxr(v101 - 2, v100));
    }
    realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)__p, (pxrInternal__aapl__pxrReserved__::UsdObject *)v173, (uint64_t)buf);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(buf);
    *(_OWORD *)buf = *(_OWORD *)__p;
    *(_OWORD *)&buf[16] = v193;
    *(_OWORD *)__p = 0u;
    v193 = 0u;
    *(_QWORD *)&buf[32] = v194;
    v194 = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(__p);
    v194 = 0;
    *(_OWORD *)__p = 0u;
    v193 = 0u;
    MEMORY[0x2348B274C](&v187, "blendWeights:counts");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v187);
    if ((v187.n128_u8[0] & 7) != 0)
    {
      v102 = (unsigned int *)(v187.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v103 = __ldxr(v102);
      while (__stlxr(v103 - 2, v102));
    }
    realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)&v187, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v205, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__p);
    *(__n128 *)__p = v187;
    v193 = v188;
    v187 = 0u;
    v188 = 0u;
    v194 = v189;
    v189 = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v187);
    v189 = 0;
    v187 = 0u;
    v188 = 0u;
    MEMORY[0x2348B274C](&v176, "blendWeights:values");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v176);
    if ((v176.n128_u8[0] & 7) != 0)
    {
      v104 = (unsigned int *)(v176.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v105 = __ldxr(v104);
      while (__stlxr(v105 - 2, v104));
    }
    realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((uint64_t)&v176, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v185, (uint64_t)&v187);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v187);
    v187 = v176;
    v188 = v177;
    v176 = 0u;
    v177 = 0u;
    v189 = v178.__r_.__value_.__r.__words[0];
    v178.__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v176);
    REBlendShapeWeightsComponentSetBlendShapeWeightsCount();
    if (__p[0])
    {
      v106 = 0;
      v107 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
        v108 = *(_QWORD *)(v194 + 8 * (_QWORD)v106);
        REBlendShapeWeightsComponentSetBlendWeightCount();
        if (v108)
        {
          for (i = 0; i != v108; ++i)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v187);
            REBlendShapeWeightsComponentSetBlendWeight();
          }
          v107 += i;
        }
        v106 = (char *)v106 + 1;
      }
      while (v106 < __p[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v185);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v187);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v205);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v173);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(buf);
  }
  v110 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "AnimationLibrary");
  if (v110)
  {
    if (*((_BYTE *)a2[5] + 272))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildren((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (uint64_t)this);
      v190 = 0uLL;
      v191 = 0;
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildren((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v187, (uint64_t)this);
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::begin(&v187, &v205);
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::end((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *)&v187, &v185);
      while (1)
      {
        if (*(_OWORD *)&v205 == *(_OWORD *)&v185
          && pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v206, (uint64_t)&v186))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v185);
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v205);
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::~UsdPrimSiblingRange((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *)&v187);
          if (v190.i64[1] != v190.i64[0])
          {
            v159 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
            std::allocate_shared[abi:ne180100]<realityio::ArbitraryComponentBuilder::AnimationLibrary,std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary>,pxrInternal__aapl__pxrReserved__::TfToken const&,REEntity *&,std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry> &,void>((std::string **)&v187, *v159, &v198, v190.i64);
            v161 = *(_QWORD *)(a1 + 16);
            v160 = *(_QWORD *)(a1 + 24);
            v176.n128_u64[0] = v161;
            v176.n128_u64[1] = v160;
            if (v160)
            {
              v162 = (unint64_t *)(v160 + 8);
              do
                v163 = __ldxr(v162);
              while (__stxr(v163 + 1, v162));
            }
            std::string::basic_string[abi:ne180100]<0>(buf, "arbitraryComponentAnimationLibrary");
            realityio::Outputs::storeValue<std::shared_ptr<realityio::ArbitraryComponentBuilder::AnimationLibrary> &>(v161, (__int128 *)buf, (uint64_t *)&v187);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v176);
            std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v187);
          }
          *(_QWORD *)buf = &v190;
          std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::~UsdPrimSiblingRange((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *)__p);
          goto LABEL_344;
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v205, (uint64_t)&v183);
        if (!v183.__r_.__value_.__l.__size_ || (*(_BYTE *)(v183.__r_.__value_.__l.__size_ + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v183.__r_.__value_.__l.__size_, v111);
        if (pxrInternal__aapl__pxrReserved__::TfToken::operator==())
          break;
LABEL_256:
        if (!v183.__r_.__value_.__l.__size_ || (*(_BYTE *)(v183.__r_.__value_.__l.__size_ + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v183.__r_.__value_.__l.__size_, v112);
        if (pxrInternal__aapl__pxrReserved__::TfToken::operator==())
        {
          MEMORY[0x2348B274C](v170, "clipNames");
          v174 = 0;
          memset(v173, 0, sizeof(v173));
          realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v183, (const pxrInternal__aapl__pxrReserved__::TfToken *)v170, (uint64_t)buf);
          if (buf[0])
          {
            v176 = *(__n128 *)&buf[8];
            v177 = *(_OWORD *)&buf[24];
            v133 = v200;
          }
          else
          {
            v176 = (__n128)v173[0];
            v177 = v173[1];
            v133 = v174;
          }
          v178.__r_.__value_.__r.__words[0] = v133;
          if (v133)
          {
            v134 = (unint64_t *)(v133 - 16);
            if (*((_QWORD *)&v177 + 1))
              v134 = (unint64_t *)*((_QWORD *)&v177 + 1);
            do
              v135 = __ldxr(v134);
            while (__stxr(v135 + 1, v134));
          }
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result((uint64_t)buf);
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(v173);
          if ((v170[0] & 7) != 0)
          {
            v136 = (unsigned int *)(*(_QWORD *)v170 & 0xFFFFFFFFFFFFFFF8);
            do
              v137 = __ldxr(v136);
            while (__stlxr(v137 - 2, v136));
          }
          MEMORY[0x2348B274C](&__s, "startTimes");
          v171 = 0;
          memset(v170, 0, sizeof(v170));
          realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>((uint64_t)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__s, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v183);
          if (buf[0])
          {
            v173[0] = *(_OWORD *)&buf[8];
            v173[1] = *(_OWORD *)&buf[24];
            v138 = v200;
          }
          else
          {
            v173[0] = *(_OWORD *)v170;
            v173[1] = *(_OWORD *)&v170[16];
            v138 = v171;
          }
          v174 = v138;
          if (v138)
          {
            v139 = (unint64_t *)(v138 - 16);
            if (*((_QWORD *)&v173[1] + 1))
              v139 = (unint64_t *)*((_QWORD *)&v173[1] + 1);
            do
              v140 = __ldxr(v139);
            while (__stxr(v140 + 1, v139));
          }
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result((uint64_t)buf);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v170);
          if ((__s & 7) != 0)
          {
            v141 = (unsigned int *)((unint64_t)__s & 0xFFFFFFFFFFFFFFF8);
            do
              v142 = __ldxr(v141);
            while (__stlxr(v142 - 2, v141));
          }
          MEMORY[0x2348B274C](&v172, "sourceAnimationName");
          std::string::basic_string[abi:ne180100]<0>(&__s, "");
          realityio::getAttributeValue<std::string>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v183, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v172, (uint64_t)buf);
          if (buf[0])
          {
            p_s = (std::string::value_type **)&buf[8];
            if ((buf[31] & 0x80000000) != 0)
            {
              v144 = *(std::string::value_type **)&buf[8];
              v145 = (std::string::size_type *)&buf[16];
              goto LABEL_326;
            }
LABEL_285:
            *(_OWORD *)v170 = *(_OWORD *)p_s;
            *(_QWORD *)&v170[16] = p_s[2];
            if (buf[0])
              goto LABEL_286;
LABEL_327:
            v146 = (void **)&buf[24];
            if (SHIBYTE(v200) < 0)
              goto LABEL_287;
          }
          else
          {
            if ((SHIBYTE(v181) & 0x80000000) == 0)
            {
              p_s = &__s;
              goto LABEL_285;
            }
            v144 = __s;
            v145 = (std::string::size_type *)&v180;
LABEL_326:
            std::string::__init_copy_ctor_external((std::string *)v170, v144, *v145);
            if (!buf[0])
              goto LABEL_327;
LABEL_286:
            v146 = (void **)&buf[8];
            if ((buf[31] & 0x80000000) != 0)
LABEL_287:
              operator delete(*v146);
          }
          if (SHIBYTE(v181) < 0)
            operator delete(__s);
          if ((v172.__r_.__value_.__s.__data_[0] & 7) != 0)
          {
            v147 = (unsigned int *)(v172.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v148 = __ldxr(v147);
            while (__stlxr(v148 - 2, v147));
          }
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v176);
          v149 = v178.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v176);
          v150 = v178.__r_.__value_.__r.__words[0] + 24 * v176.n128_u64[0];
          if (v149 != v150)
          {
            v151 = 0;
            do
            {
              if (*(_QWORD *)&v173[0] <= v151)
                break;
              pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v173);
              v152 = *(double *)(v174 + 8 * v151);
              v153 = 0.0;
              if (*(_QWORD *)&v173[0] > v151 + 1)
              {
                pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v173);
                v153 = *(double *)(v174 + 8 * v151 + 8);
              }
              if (*(char *)(v149 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)v149, *(_QWORD *)(v149 + 8));
              }
              else
              {
                v154 = *(_OWORD *)v149;
                *(_QWORD *)&buf[16] = *(_QWORD *)(v149 + 16);
                *(_OWORD *)buf = v154;
              }
              if ((v170[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&buf[24], *(const std::string::value_type **)v170, *(std::string::size_type *)&v170[8]);
              }
              else
              {
                *(_OWORD *)&buf[24] = *(_OWORD *)v170;
                v200 = *(_QWORD *)&v170[16];
              }
              std::string::basic_string[abi:ne180100]<0>(&v201, "");
              v202 = v152;
              v203 = v153;
              v204 = 1;
              v155 = v190.i64[1];
              if (v190.i64[1] >= v191)
              {
                v156 = std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__push_back_slow_path<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>(&v190, (__int128 *)buf);
              }
              else
              {
                std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::construct[abi:ne180100]<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry,realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>((std::string *)v190.i64[1], (__int128 *)buf);
                v156 = v155 + 96;
              }
              v190.i64[1] = v156;
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v201.__r_.__value_.__l.__data_);
              if (SHIBYTE(v200) < 0)
                operator delete(*(void **)&buf[24]);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
              v149 += 24;
              ++v151;
            }
            while (v149 != v150);
          }
          if ((v170[23] & 0x80000000) != 0)
            operator delete(*(void **)v170);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v173);
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v176);
        }
        if ((v184 & 7) != 0)
        {
          v157 = (unsigned int *)(v184 & 0xFFFFFFFFFFFFFFF8);
          do
            v158 = __ldxr(v157);
          while (__stlxr(v158 - 2, v157));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v183.__r_.__value_.__r.__words[2]);
        if (v183.__r_.__value_.__l.__size_)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v183.__r_.__value_.__l.__size_);
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v205);
      }
      MEMORY[0x2348B274C](buf, "file");
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v183, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
      if ((buf[0] & 7) != 0)
      {
        v113 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
        do
          v114 = __ldxr(v113);
        while (__stlxr(v114 - 2, v113));
      }
      MEMORY[0x2348B274C](buf, "name");
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v183, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
      if ((buf[0] & 7) != 0)
      {
        v115 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
        do
          v116 = __ldxr(v115);
        while (__stlxr(v116 - 2, v115));
      }
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__s))
      {
LABEL_246:
        if ((v182 & 7) != 0)
        {
          v129 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFFFF8);
          do
            v130 = __ldxr(v129);
          while (__stlxr(v130 - 2, v129));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v181);
        if (v180)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v180);
        if ((v170[24] & 7) != 0)
        {
          v131 = (unsigned int *)(*(_QWORD *)&v170[24] & 0xFFFFFFFFFFFFFFF8);
          do
            v132 = __ldxr(v131);
          while (__stlxr(v132 - 2, v131));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v170[16]);
        if (*(_QWORD *)&v170[8])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v170[8]);
        goto LABEL_256;
      }
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::UsdObject *)v170, (uint64_t)&v176);
      realityio::getAttributeValue<std::string>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__s, (uint64_t)v173);
      MEMORY[0x2348B274C](&v172, "startTime");
      realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v183, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v172, (uint64_t)buf);
      if (buf[0])
      {
        v117 = *(double *)&buf[8];
      }
      else
      {
        v117 = -1.0;
        if (SHIBYTE(v200) < 0)
          operator delete(*(void **)&buf[24]);
      }
      if ((v172.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v118 = (unsigned int *)(v172.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      MEMORY[0x2348B274C](&v172, "endTime");
      realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v183, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v172, (uint64_t)buf);
      if (buf[0])
      {
        v120 = *(double *)&buf[8];
      }
      else
      {
        v120 = -1.0;
        if (SHIBYTE(v200) < 0)
          operator delete(*(void **)&buf[24]);
      }
      if ((v172.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v121 = (unsigned int *)(v172.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v122 = __ldxr(v121);
        while (__stlxr(v122 - 2, v121));
      }
      MEMORY[0x2348B274C](&v172, "looping");
      realityio::getAttributeValue<BOOL>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v183, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v172, (uint64_t)buf);
      if (buf[0])
      {
        v123 = buf[8];
      }
      else
      {
        if (SHIBYTE(v200) < 0)
          operator delete(*(void **)&buf[24]);
        v123 = 0;
      }
      if ((v172.__r_.__value_.__s.__data_[0] & 7) != 0)
      {
        v124 = (unsigned int *)(v172.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      if (v176.n128_u8[0])
      {
        if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v172, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
        else
          v172 = v178;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v172, "");
      }
      if (!LOBYTE(v173[0]))
      {
LABEL_240:
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v172.__r_.__value_.__l.__data_);
        if (LOBYTE(v173[0]))
        {
          v128 = (void **)v173 + 1;
          if ((SHIBYTE(v173[1]) & 0x80000000) == 0)
          {
LABEL_245:
            realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&v176);
            goto LABEL_246;
          }
        }
        else
        {
          v128 = (void **)&v173[1] + 1;
          if ((v175 & 0x80000000) == 0)
            goto LABEL_245;
        }
        operator delete(*v128);
        goto LABEL_245;
      }
      if (SHIBYTE(v173[1]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, *((const std::string::value_type **)&v173[0] + 1), *(std::string::size_type *)&v173[1]);
        if (SHIBYTE(v173[1]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&buf[24], *((const std::string::value_type **)&v173[0] + 1), *(std::string::size_type *)&v173[1]);
          goto LABEL_228;
        }
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)((char *)v173 + 8);
        *(_QWORD *)&buf[16] = *((_QWORD *)&v173[1] + 1);
      }
      *(_OWORD *)&buf[24] = *(_OWORD *)((char *)v173 + 8);
      v200 = *((_QWORD *)&v173[1] + 1);
LABEL_228:
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v201, v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_);
      else
        v201 = v172;
      v202 = v117;
      v203 = v120;
      v204 = v123;
      v126 = v190.i64[1];
      if (v190.i64[1] >= v191)
      {
        v127 = std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__push_back_slow_path<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>(&v190, (__int128 *)buf);
      }
      else
      {
        std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::construct[abi:ne180100]<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry,realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>((std::string *)v190.i64[1], (__int128 *)buf);
        v127 = v126 + 96;
      }
      v190.i64[1] = v127;
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v201.__r_.__value_.__l.__data_);
      if (SHIBYTE(v200) < 0)
        operator delete(*(void **)&buf[24]);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      goto LABEL_240;
    }
    v164 = *(id *)(realityio::logObjects((realityio *)v110) + 24);
    if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, __p);
      v165 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      if (*(char *)(v165 + 23) >= 0)
        v166 = v165;
      else
        v166 = *(_QWORD *)v165;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v166;
      _os_log_impl(&dword_22FF26000, v164, OS_LOG_TYPE_DEFAULT, "Recursive realitykit animation library components are disallowed. Ignoring one at: \"%s\".", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    }

  }
LABEL_344:
  if ((void *)REEntityGetComponentByClass() != v197
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "CharacterController"))
  {
    REEntityRemoveComponentByClass();
    REEntityAddExistingComponent();
  }
  MEMORY[0x2348B0808](v197);
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v197);
}

void sub_23017A5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;

  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&STACK[0x2A0]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a44);
  if (a30 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a66);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x220]);
  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&STACK[0x290]);
  _Unwind_Resume(a1);
}

uint64_t reinitIntrospectableData(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  const void *v3;

  result = *a2;
  if (*a2)
  {
    REComponentGetClass();
    REComponentCreateByClass();
    REECSOPACKSerializerCreate();
    result = REComponentSerializeCopyToOPACKData();
    if (result)
    {
      v3 = (const void *)result;
      REECSOPACKDeserializerCreate();
      REComponentDeserializeFromOPACKData();
      RERelease();
      CFRelease(v3);
      RERelease();
      return RERelease();
    }
  }
  return result;
}

void realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::TfToken>(unsigned int **a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, unsigned int **a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  char v11[8];
  unsigned int *v12;
  void *__p;
  char v14;

  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(a2, (uint64_t)v11);
  if (v11[0])
  {
    v5 = v12;
    *a1 = v12;
    if ((v5 & 7) == 0)
      goto LABEL_11;
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
  }
  else
  {
    v8 = *a3;
    *a1 = *a3;
    if ((v8 & 7) == 0)
      goto LABEL_11;
    v6 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
  }
  if ((v7 & 1) == 0)
    *a1 = v6;
LABEL_11:
  if (v11[0])
  {
    if ((v12 & 7) != 0)
    {
      v9 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else if (v14 < 0)
  {
    operator delete(__p);
  }
}

float realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, float *a2)
{
  float v3;
  _BYTE v5[8];
  float v6;
  void *__p;
  char v8;

  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1, (uint64_t)v5);
  if (v5[0])
    return v6;
  v3 = *a2;
  if (v8 < 0)
    operator delete(__p);
  return v3;
}

float realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::UsdObject *this, float *a2)
{
  float v3;
  _BYTE v5[8];
  float v6;
  void *__p;
  char v8;

  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfQuatf>((uint64_t)v5, this);
  if (v5[0])
    return v6;
  v3 = *a2;
  if (v8 < 0)
    operator delete(__p);
  return v3;
}

float realityio::getAttributeValueWithDefaultValue<float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, float *a2)
{
  float v3;
  _BYTE v5[8];
  float v6;
  void *__p;
  char v8;

  realityio::getAttributeValue<float>(a1, (uint64_t)v5);
  if (v5[0])
    return v6;
  v3 = *a2;
  if (v8 < 0)
    operator delete(__p);
  return v3;
}

uint64_t realityio::getAttributeValueWithDefaultValue<unsigned int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, unsigned int *a2)
{
  uint64_t v3;
  _BYTE v5[8];
  unsigned int v6;
  void *__p;
  char v8;

  realityio::getAttributeValue<unsigned int>(a1, (uint64_t)v5);
  if (v5[0])
    return v6;
  v3 = *a2;
  if (v8 < 0)
    operator delete(__p);
  return v3;
}

void realityio::Outputs::storeValue<REComponentClass *&>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 *v12;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDFC1A8;
  v7[3] = &off_24FDFC1F8;
  v7[4] = *a3;
  v12 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
  v9 = (std::__shared_weak_count *)v8[8];
  v8[7] = (uint64_t)(v7 + 3);
  v8[8] = (uint64_t)v7;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23017B540(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  _BYTE v11[8];
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)v11, a2);
  if (v11[0])
  {
    v5 = v13;
    *(_OWORD *)a1 = v12;
    *(_OWORD *)(a1 + 16) = v5;
    v6 = v14;
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16) = v7;
    v6 = *(_QWORD *)(a3 + 32);
  }
  *(_QWORD *)(a1 + 32) = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(a1 + 24))
      v8 = *(unint64_t **)(a1 + 24);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,realityio::DetailedError>::~Result((uint64_t)v11);
}

uint64_t realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  _BYTE v11[8];
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v11, a2);
  if (v11[0])
  {
    v5 = v13;
    *(_OWORD *)a1 = v12;
    *(_OWORD *)(a1 + 16) = v5;
    v6 = v14;
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16) = v7;
    v6 = *(_QWORD *)(a3 + 32);
  }
  *(_QWORD *)(a1 + 32) = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(a1 + 24))
      v8 = *(unint64_t **)(a1 + 24);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v11);
}

uint64_t realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  _BYTE v11[8];
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a2, (uint64_t)v11);
  if (v11[0])
  {
    v5 = v13;
    *(_OWORD *)a1 = v12;
    *(_OWORD *)(a1 + 16) = v5;
    v6 = v14;
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16) = v7;
    v6 = *(_QWORD *)(a3 + 32);
  }
  *(_QWORD *)(a1 + 32) = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(a1 + 24))
      v8 = *(unint64_t **)(a1 + 24);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)v11);
}

void realityio::Outputs::storeValue<std::shared_ptr<realityio::ArbitraryComponentBuilder::AnimationLibrary> &>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  std::mutex *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 *v20;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v8 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  v9 = operator new(0x30uLL);
  v10 = v9;
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_24FDFC278;
  v11 = v9 + 3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v9[3] = &off_24FDFC2C8;
    v9[4] = v8;
    v9[5] = v7;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    v9[3] = &off_24FDFC2C8;
    v9[4] = v8;
    v9[5] = 0;
  }
  v20 = a2;
  v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v20);
  v17 = (std::__shared_weak_count *)v16[8];
  v16[7] = (uint64_t)v11;
  v16[8] = (uint64_t)v10;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23017B8A4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__ *realityio::ArbitraryComponentBuilder::run(uint64_t (**this)(), realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  realityio::EntityBuilder *PrimAtPath;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  pxrInternal__aapl__pxrReserved__ *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  unint64_t Data;
  realityio::ArbitraryComponentBuilder *v15;
  realityio::ArbitraryComponentBuilder *v16;
  unsigned int *v17;
  unsigned int v18;
  int IsValid;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t (***v23)();
  int *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  pxrInternal__aapl__pxrReserved__ *result;
  char v35[8];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40[8];
  uint64_t v41;
  char v42[8];
  pxrInternal__aapl__pxrReserved__ *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  realityio::Inputs *v48;
  int v49;
  realityio::ArbitraryComponentBuilder *v50;
  int v51;
  uint64_t (***v52)();
  uint64_t (**v53)();
  realityio::ArbitraryComponentBuilder *v54;
  _BYTE v55[4];
  int v56;
  uint64_t (***v57)();
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  PrimAtPath = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  v7 = realityio::EntityBuilder::kInputName(PrimAtPath);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v7, (uint64_t)v40);
  if (v40[0])
  {
    v39 = v41;
    if (v41)
      RERetain();
  }
  else
  {
    v39 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)v42, (uint64_t)v35);
  if (!v39)
    goto LABEL_41;
  v9 = v43;
  if (!v43 || (v10 = *((_QWORD *)v43 + 7), (v10 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v43, v8);
    v10 = *((_QWORD *)v9 + 7);
  }
  if ((v10 & 1) != 0)
  {
    v47 = v39;
    v48 = a2;
    LODWORD(v53) = 3;
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v57 = 0;
    Data = atomic_load(&realityio::tokens::ArbitraryComponentBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v42, (const pxrInternal__aapl__pxrReserved__::TfToken *)(Data + 16));
    LODWORD(v53) = v49;
    v15 = v50;
    v50 = 0;
    v16 = v54;
    v54 = v15;
    if (v16)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v16);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v55, &v51);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v56);
    if ((v57 & 7) != 0)
    {
      v17 = (unsigned int *)((unint64_t)v57 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    v57 = v52;
    v52 = 0;
    IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53);
    if ((v52 & 7) != 0)
    {
      v20 = (unsigned int *)((unint64_t)v52 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
    if (v50)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v50);
    if (!IsValid)
      goto LABEL_36;
    v46 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
    v22 = *((_QWORD *)v48 + 6);
    v23 = (uint64_t (***)())operator new(0x30uLL);
    *v23 = &off_24FDFC2F8;
    v23[1] = (uint64_t (**)())&v46;
    v23[2] = this;
    v23[3] = (uint64_t (**)())&v48;
    v23[4] = (uint64_t (**)())v42;
    v23[5] = (uint64_t (**)())&v47;
    v52 = v23;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v22 + 16))(v22, &v49);
    v24 = (int *)v52;
    if (v52 == (uint64_t (***)())&v49)
    {
      v25 = 4;
      v24 = &v49;
    }
    else
    {
      if (!v52)
        goto LABEL_33;
      v25 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_33:
    if ((v46 & 7) != 0)
    {
      v26 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
LABEL_36:
    if ((v57 & 7) != 0)
    {
      v28 = (unsigned int *)((unint64_t)v57 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v55);
    if (v54)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v54);
    goto LABEL_41;
  }
  v11 = *((_QWORD *)a2 + 6);
  v53 = &off_24FDFC378;
  v54 = (realityio::ArbitraryComponentBuilder *)this;
  v57 = &v53;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v11 + 16))(v11, &v53);
  v12 = v57;
  if (v57 == &v53)
  {
    v13 = 4;
    v12 = &v53;
  }
  else
  {
    if (!v57)
      goto LABEL_41;
    v13 = 5;
  }
  (*v12)[v13]();
LABEL_41:
  if ((v38 & 7) != 0)
  {
    v30 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
  if (v36)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v39);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v40);
  if ((v45 & 7) != 0)
  {
    v32 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44);
  result = v43;
  if (v43)
    return (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v43);
  return result;
}

void sub_23017BCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;

  v28 = *(_QWORD **)(v26 - 112);
  if (v28 == v25)
  {
    v29 = 4;
    v28 = (_QWORD *)(v26 - 136);
  }
  else
  {
    if (!v28)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_6:
  if ((a25 & 7) != 0)
  {
    v30 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v26 - 104));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a10);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a14);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a15);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a21);
  _Unwind_Resume(a1);
}

void realityio::ArbitraryComponentBuilder::removeComponentFromEntity(realityio::ArbitraryComponentBuilder *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  int v7;
  int v8;
  uint64_t v9;

  v2 = (char *)*((_QWORD *)this + 35);
  v3 = (char *)this + 288;
  if (v2 != (char *)this + 288)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, (_DWORD *)v2 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, (_DWORD *)v2 + 9);
      v9 = *((_QWORD *)v2 + 5);
      if (v9)
        RERetain();
      if (REComponentGetEntity())
      {
        REComponentGetClass();
        REEntityRemoveComponentByClass();
      }
      realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::destroy(*((_QWORD **)this + 36));
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = v3;
}

void sub_23017BEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::WrappedRERef<REComponent *>>::~pair(uint64_t a1)
{
  realityio::WrappedRERef<REComponent *>::~WrappedRERef((_QWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void realityio::ArbitraryComponentBuilder::clear(realityio::ArbitraryComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::mutex *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::mutex *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p[2];
  char v33;
  void **v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a2 + 6);
  __p[0] = &off_24FDFC3F8;
  __p[1] = this;
  v34 = __p;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 16))(v3, __p);
  v4 = v34;
  if (v34 == __p)
  {
    v5 = 4;
    v4 = __p;
  }
  else
  {
    if (!v34)
      goto LABEL_6;
    v5 = 5;
  }
  (*((void (**)(void))*v4 + v5))();
LABEL_6:
  v7 = (std::mutex *)*((_QWORD *)this + 2);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentClass");
  std::mutex::lock(v7 + 1);
  v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v7->__m_.__opaque[32], (const void **)__p);
  std::mutex::unlock(v7 + 1);
  if (v33 < 0)
    operator delete(__p[0]);
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (&v7->__m_.__opaque[40] != (char *)v10)
  {
    v14 = *((_QWORD *)this + 2);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentClass");
    std::mutex::lock((std::mutex *)(v14 + 64));
    if (v14 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v14 + 40, (const void **)__p))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v14 + 40), (const void **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v14, (unsigned __int8 *)__p);
    std::mutex::unlock((std::mutex *)(v14 + 64));
    if (v33 < 0)
      operator delete(__p[0]);
    if (v13)
    {
      v17 = (unint64_t *)&v13->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v20 = (std::mutex *)*((_QWORD *)this + 2);
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentAnimationLibrary");
  std::mutex::lock(v20 + 1);
  v23 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v20->__m_.__opaque[32], (const void **)__p);
  std::mutex::unlock(v20 + 1);
  if (v33 < 0)
    operator delete(__p[0]);
  if (v19)
  {
    v24 = (unint64_t *)&v19->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (&v20->__m_.__opaque[40] != (char *)v23)
  {
    v27 = *((_QWORD *)this + 2);
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (v26)
    {
      v28 = (unint64_t *)&v26->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentAnimationLibrary");
    std::mutex::lock((std::mutex *)(v27 + 64));
    if (v27 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v27 + 40, (const void **)__p))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v27 + 40), (const void **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v27, (unsigned __int8 *)__p);
    std::mutex::unlock((std::mutex *)(v27 + 64));
    if (v33 < 0)
      operator delete(__p[0]);
    if (v26)
    {
      v30 = (unint64_t *)&v26->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

void sub_23017C2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::mutex *v17;

  std::mutex::unlock(v17);
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_23017C320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == v15)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  JUMPOUT(0x23017C318);
}

void realityio::ArbitraryComponentBuilder::~ArbitraryComponentBuilder(realityio::ArbitraryComponentBuilder *this)
{
  realityio::ArbitraryComponentBuilder::~ArbitraryComponentBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::ArbitraryComponentBuilder *v2;
  uint64_t v3;
  realityio::ArbitraryComponentBuilder *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_QWORD *)this = &off_24FDFBC58;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::destroy(*((_QWORD **)this + 36));
  *(_QWORD *)this = off_24FDE1CA0;
  v2 = (realityio::ArbitraryComponentBuilder *)*((_QWORD *)this + 34);
  if (v2 == (realityio::ArbitraryComponentBuilder *)((char *)this + 248))
  {
    v3 = 4;
    v2 = (realityio::ArbitraryComponentBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (realityio::ArbitraryComponentBuilder *)*((_QWORD *)this + 30);
  if (v4 == (realityio::ArbitraryComponentBuilder *)((char *)this + 216))
  {
    v5 = 4;
    v4 = (realityio::ArbitraryComponentBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v6 = *((_QWORD *)this + 24);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = *((_QWORD *)this + 23);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder(this);
}

void `anonymous namespace'::getArrayName(std::string *a1, __int128 *a2)
{
  __int128 v4;
  char *Name;
  __int128 v6;
  __int128 v7;
  char *v8;
  std::string *v9;
  __int128 v10;
  void *v11;
  std::string::size_type size;
  std::string *p_str;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  std::string::size_type v21;
  const std::string::value_type *p_p;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string v30;
  std::string __str;
  void *__p;
  std::string::size_type v33;
  unsigned __int8 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[32];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "[]");
  v4 = a2[1];
  v50 = *a2;
  v51 = v4;
  Name = (char *)RETypeInfoGetName();
  std::string::basic_string[abi:ne180100]<0>(&__str, Name);
  v6 = a2[1];
  v48 = *a2;
  v49 = v6;
  if ((RETypeInfoIsArray() & 1) == 0)
  {
    v7 = a2[1];
    v46 = *a2;
    v47 = v7;
    if (!RETypeInfoIsList())
    {
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        size = __str.__r_.__value_.__l.__size_;
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (size >= 9)
        size = 9;
      if (size)
      {
        v14 = (std::string *)((char *)p_str + size);
        v15 = p_str;
        v16 = v14;
        do
        {
          if (v15->__r_.__value_.__s.__data_[0] == 79)
          {
            v17 = 1u;
            while (v17 != 9)
            {
              if ((std::string *)((char *)v15 + v17) == v14)
                goto LABEL_30;
              v18 = v15->__r_.__value_.__s.__data_[v17];
              v19 = aOptional[v17++];
              if (v18 != v19)
                goto LABEL_14;
            }
            v16 = v15;
          }
LABEL_14:
          v15 = (std::string *)((char *)v15 + 1);
        }
        while (v15 != v14);
LABEL_30:
        if (v16 != v14 && v16 == p_str)
        {
          v24 = std::string::find(&__str, 60, 0) + 1;
          v25 = std::string::find(&__str, 62, 0);
          std::string::basic_string(a1, &__str, v24, v25 - v24, (std::allocator<char> *)&v44);
          goto LABEL_43;
        }
      }
      goto LABEL_33;
    }
  }
  v44 = 0u;
  v45 = 0u;
  v42 = v44;
  v43 = v45;
  if ((RETypeInfoIsArray() & 1) != 0 || (v40 = v44, v41 = v45, RETypeInfoIsList()))
  {
    memset(v39, 0, sizeof(v39));
    v37 = *(_OWORD *)v39;
    v38 = *(_OWORD *)&v39[16];
    v8 = (char *)RETypeInfoGetName();
    std::string::basic_string[abi:ne180100]<0>(&v30, v8);
    v9 = std::string::append(&v30, "[]");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    a1->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
    v11 = (void *)v30.__r_.__value_.__r.__words[0];
    goto LABEL_42;
  }
  v20 = a2[1];
  v35 = *a2;
  v36 = v20;
  if (!RETypeInfoIsArray())
  {
    v26 = std::string::find(&__str, 60, 0) + 1;
    v27 = std::string::find(&__str, 62, 0);
    std::string::basic_string((std::string *)v39, &__str, v26, v27 - v26, (std::allocator<char> *)&v30);
    if ((v34 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v34 & 0x80u) == 0)
      v23 = v34;
    else
      v23 = v33;
    goto LABEL_40;
  }
  v21 = std::string::find(&__str, 91, 0);
  if (v21 == -1)
  {
LABEL_33:
    *a1 = __str;
    memset(&__str, 0, sizeof(__str));
    goto LABEL_43;
  }
  std::string::basic_string((std::string *)v39, &__str, 0, v21, (std::allocator<char> *)&v30);
  if ((v34 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v34 & 0x80u) == 0)
    v23 = v34;
  else
    v23 = v33;
LABEL_40:
  v28 = std::string::append((std::string *)v39, p_p, v23);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  a1->__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if ((v39[23] & 0x80000000) == 0)
    goto LABEL_43;
  v11 = *(void **)v39;
LABEL_42:
  operator delete(v11);
LABEL_43:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((char)v34 < 0)
    operator delete(__p);
}

void sub_23017C6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::getTypeMap(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  unint64_t *v2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v8;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v11;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v12;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v14;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v15;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v17;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v20;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v21;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v25;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v26;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v28;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v30;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v31;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v33;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v34;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v35;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v36;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v37;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v38;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v39;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v41;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v43;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v44;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v45;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v46;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v47;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v48;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v49;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v50;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v51;
  uint64_t v52;
  std::string __p;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string __s;
  std::string v102;
  uint64_t v103;
  std::string v104;
  uint64_t v105;
  std::string v106;
  uint64_t v107;
  std::string v108;
  uint64_t v109;
  std::string v110;
  uint64_t v111;
  std::string v112;
  uint64_t v113;
  std::string v114;
  uint64_t v115;
  std::string v116;
  uint64_t v117;
  std::string v118;
  uint64_t v119;
  std::string v120;
  uint64_t v121;
  std::string v122;
  uint64_t v123;
  std::string v124;
  uint64_t v125;
  std::string v126;
  uint64_t v127;
  std::string v128;
  uint64_t v129;
  std::string v130;
  uint64_t v131;
  std::string v132;
  uint64_t v133;
  std::string v134;
  uint64_t v135;
  std::string v136;
  uint64_t v137;
  std::string v138;
  uint64_t v139;
  std::string v140;
  uint64_t v141;
  std::string v142;
  uint64_t v143;
  std::string v144;
  uint64_t v145;
  std::string v146;
  uint64_t v147;
  std::string v148;
  uint64_t v149;
  std::string v150;
  uint64_t v151;
  std::string v152;
  uint64_t v153;
  std::string v154;
  uint64_t v155;
  std::string v156;
  uint64_t v157;
  std::string v158;
  uint64_t v159;
  std::string v160;
  uint64_t v161;
  std::string v162;
  uint64_t v163;
  std::string v164;
  uint64_t v165;
  std::string v166;
  uint64_t v167;
  std::string v168;
  uint64_t v169;
  std::string v170;
  uint64_t v171;
  std::string v172;
  uint64_t v173;
  std::string v174;
  uint64_t v175;
  std::string v176;
  uint64_t v177;
  std::string v178;
  uint64_t v179;
  std::string v180;
  uint64_t v181;
  std::string v182;
  uint64_t v183;
  std::string v184;
  uint64_t v185;
  std::string v186;
  uint64_t v187;
  std::string v188;
  uint64_t v189;
  std::string v190;
  uint64_t v191;
  std::string v192;
  uint64_t v193;
  std::string v194;
  uint64_t v195;
  std::string v196;
  uint64_t v197;
  std::string v198;
  uint64_t v199;
  uint64_t v200;

  v200 = *MEMORY[0x24BDAC8D0];
  {
    std::string::basic_string[abi:ne180100]<0>(&__s, "Vector2F");
    v2 = (unint64_t *)MEMORY[0x24BEE82A0];
    Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v102, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v102 = __s;
    v103 = *((_QWORD *)Data + 19);
    std::string::basic_string[abi:ne180100]<0>(&v100, "Vector3F");
    v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v4)
      v4 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v104, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
    else
      v104 = v100;
    v105 = *((_QWORD *)v4 + 20);
    std::string::basic_string[abi:ne180100]<0>(&v99, "Vector4F");
    v5 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v5)
      v5 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v106, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
    else
      v106 = v99;
    v107 = *((_QWORD *)v5 + 21);
    std::string::basic_string[abi:ne180100]<0>(&v98, "float[2]");
    v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v6)
      v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v108, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
    else
      v108 = v98;
    v109 = *((_QWORD *)v6 + 19);
    std::string::basic_string[abi:ne180100]<0>(&v97, "float[3]");
    v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v7)
      v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v110, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
    else
      v110 = v97;
    v111 = *((_QWORD *)v7 + 20);
    std::string::basic_string[abi:ne180100]<0>(&v96, "float[4]");
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v8)
      v8 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v112, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
    else
      v112 = v96;
    v113 = *((_QWORD *)v8 + 21);
    std::string::basic_string[abi:ne180100]<0>(&v95, "QuaternionF");
    v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v9)
      v9 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v114, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
    else
      v114 = v95;
    v115 = *((_QWORD *)v9 + 41);
    std::string::basic_string[abi:ne180100]<0>(&v94, "Matrix2x2F");
    v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v10)
      v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v116, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
    else
      v116 = v94;
    v117 = *((_QWORD *)v10 + 43);
    std::string::basic_string[abi:ne180100]<0>(&v93, "Matrix3x3F");
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v11)
      v11 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v118, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
    else
      v118 = v93;
    v119 = *((_QWORD *)v11 + 44);
    std::string::basic_string[abi:ne180100]<0>(&v92, "Matrix4x4F");
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v12)
      v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v120, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
    else
      v120 = v92;
    v121 = *((_QWORD *)v12 + 45);
    std::string::basic_string[abi:ne180100]<0>(&v91, "uint8_t");
    v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v13)
      v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v122, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
    else
      v122 = v91;
    v123 = *((_QWORD *)v13 + 1);
    std::string::basic_string[abi:ne180100]<0>(&v90, "uint16_t");
    v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v14)
      v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v124, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
    else
      v124 = v90;
    v125 = *((_QWORD *)v14 + 3);
    std::string::basic_string[abi:ne180100]<0>(&v89, "uint32_t");
    v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v15)
      v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v126, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
    else
      v126 = v89;
    v127 = *((_QWORD *)v15 + 3);
    std::string::basic_string[abi:ne180100]<0>(&v88, "uint64_t");
    v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v128, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
    else
      v128 = v88;
    v129 = *((_QWORD *)v16 + 5);
    std::string::basic_string[abi:ne180100]<0>(&v87, "size_t");
    v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v17)
      v17 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v130, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
    else
      v130 = v87;
    v131 = *((_QWORD *)v17 + 5);
    std::string::basic_string[abi:ne180100]<0>(&v86, "char");
    v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v18)
      v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v132, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
    else
      v132 = v86;
    v133 = *((_QWORD *)v18 + 2);
    std::string::basic_string[abi:ne180100]<0>(&v85, "int8_t");
    v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v19)
      v19 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v134, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
    else
      v134 = v85;
    v135 = *((_QWORD *)v19 + 2);
    std::string::basic_string[abi:ne180100]<0>(&v84, "int16_t");
    v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v20)
      v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v136, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
    else
      v136 = v84;
    v137 = *((_QWORD *)v20 + 2);
    std::string::basic_string[abi:ne180100]<0>(&v83, "int32_t");
    v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v21)
      v21 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v138, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
    else
      v138 = v83;
    v139 = *((_QWORD *)v21 + 2);
    std::string::basic_string[abi:ne180100]<0>(&v82, "int");
    v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v22)
      v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v140, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
    else
      v140 = v82;
    v141 = *((_QWORD *)v22 + 4);
    std::string::basic_string[abi:ne180100]<0>(&v81, "int64_t");
    v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v23)
      v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v142, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
    else
      v142 = v81;
    v143 = *((_QWORD *)v23 + 4);
    std::string::basic_string[abi:ne180100]<0>(&v80, "BOOL");
    v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v24)
      v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v144, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
    else
      v144 = v80;
    v145 = *(_QWORD *)v24;
    std::string::basic_string[abi:ne180100]<0>(&v79, "double");
    v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v25)
      v25 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v146, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    else
      v146 = v79;
    v147 = *((_QWORD *)v25 + 8);
    std::string::basic_string[abi:ne180100]<0>(&v78, "float");
    v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v26)
      v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v148, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
    else
      v148 = v78;
    v149 = *((_QWORD *)v26 + 7);
    std::string::basic_string[abi:ne180100]<0>(&v77, "Vector2F[]");
    v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v27)
      v27 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v150, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
    else
      v150 = v77;
    v151 = *((_QWORD *)v27 + 76);
    std::string::basic_string[abi:ne180100]<0>(&v76, "Vector3F[]");
    v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v28)
      v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v152, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
    else
      v152 = v76;
    v153 = *((_QWORD *)v28 + 77);
    std::string::basic_string[abi:ne180100]<0>(&v75, "Vector4F[]");
    v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v29)
      v29 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v154, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
    else
      v154 = v75;
    v155 = *((_QWORD *)v29 + 78);
    std::string::basic_string[abi:ne180100]<0>(&v74, "QuaternionF[]");
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v30)
      v30 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v156, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
    else
      v156 = v74;
    v157 = *((_QWORD *)v30 + 98);
    std::string::basic_string[abi:ne180100]<0>(&v73, "Matrix4x4F[]");
    v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v31)
      v31 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v158, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
    else
      v158 = v73;
    v159 = *((_QWORD *)v31 + 102);
    std::string::basic_string[abi:ne180100]<0>(&v72, "uint8_t[]");
    v32 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v32)
      v32 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v160, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
    else
      v160 = v72;
    v161 = *((_QWORD *)v32 + 57);
    std::string::basic_string[abi:ne180100]<0>(&v71, "uint16_t[]");
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v33)
      v33 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v162, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
    else
      v162 = v71;
    v163 = *((_QWORD *)v33 + 60);
    std::string::basic_string[abi:ne180100]<0>(&v70, "uint32_t[]");
    v34 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v34)
      v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v164, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
    else
      v164 = v70;
    v165 = *((_QWORD *)v34 + 60);
    std::string::basic_string[abi:ne180100]<0>(&v69, "uint64_t[]");
    v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v35)
      v35 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v166, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
    else
      v166 = v69;
    v167 = *((_QWORD *)v35 + 62);
    std::string::basic_string[abi:ne180100]<0>(&v68, "size_t[]");
    v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v36)
      v36 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v168, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
    else
      v168 = v68;
    v169 = *((_QWORD *)v36 + 62);
    std::string::basic_string[abi:ne180100]<0>(&v67, "char[]");
    v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v37)
      v37 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v170, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    else
      v170 = v67;
    v171 = *((_QWORD *)v37 + 58);
    std::string::basic_string[abi:ne180100]<0>(&v66, "int[]");
    v38 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v38)
      v38 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v172, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    else
      v172 = v66;
    v173 = *((_QWORD *)v38 + 58);
    std::string::basic_string[abi:ne180100]<0>(&v65, "int32_t[]");
    v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v39)
      v39 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v174, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
    else
      v174 = v65;
    v175 = *((_QWORD *)v39 + 58);
    std::string::basic_string[abi:ne180100]<0>(&v64, "int64_t[]");
    v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v40)
      v40 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v176, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
    else
      v176 = v64;
    v177 = *((_QWORD *)v40 + 61);
    std::string::basic_string[abi:ne180100]<0>(&v63, "BOOL[]");
    v41 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v41)
      v41 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v178, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
    else
      v178 = v63;
    v179 = *((_QWORD *)v41 + 56);
    std::string::basic_string[abi:ne180100]<0>(&v62, "double[]");
    v42 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v42)
      v42 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v180, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    else
      v180 = v62;
    v181 = *((_QWORD *)v42 + 65);
    std::string::basic_string[abi:ne180100]<0>(&v61, "float[]");
    v43 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v43)
      v43 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v182, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
    else
      v182 = v61;
    v183 = *((_QWORD *)v43 + 64);
    std::string::basic_string[abi:ne180100]<0>(&v60, "AssetLoadDescriptor[]");
    v44 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v44)
      v44 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v184, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
    else
      v184 = v60;
    v185 = *((_QWORD *)v44 + 69);
    std::string::basic_string[abi:ne180100]<0>(&v59, "char*");
    v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v45)
      v45 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v186, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
    else
      v186 = v59;
    v187 = *((_QWORD *)v45 + 10);
    std::string::basic_string[abi:ne180100]<0>(&v58, "DynamicString");
    v46 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v46)
      v46 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v188, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
    else
      v188 = v58;
    v189 = *((_QWORD *)v46 + 10);
    std::string::basic_string[abi:ne180100]<0>(&v57, "StringID");
    v47 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v47)
      v47 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v190, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
    else
      v190 = v57;
    v191 = *((_QWORD *)v47 + 10);
    std::string::basic_string[abi:ne180100]<0>(&v56, "DynamicString[]");
    v48 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v48)
      v48 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v192, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
    else
      v192 = v56;
    v193 = *((_QWORD *)v48 + 67);
    std::string::basic_string[abi:ne180100]<0>(&v55, "StringID[]");
    v49 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v49)
      v49 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v194, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
    else
      v194 = v55;
    v195 = *((_QWORD *)v49 + 67);
    std::string::basic_string[abi:ne180100]<0>(&v54, "AssetHandle");
    v50 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v50)
      v50 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v196, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
    else
      v196 = v54;
    v197 = *((_QWORD *)v50 + 12);
    std::string::basic_string[abi:ne180100]<0>(&__p, "AssetHandle[]");
    v51 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v2);
    if (!v51)
      v51 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v198, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v198 = __p;
    v199 = *((_QWORD *)v51 + 69);
    std::map<std::string,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>::map[abi:ne180100]((uint64_t *)&v102, 49);
    v52 = 196;
    do
    {
      if (SHIBYTE(__s.__r_.__value_.__r.__words[v52 + 1]) < 0)
        operator delete((void *)v100.__r_.__value_.__r.__words[v52 + 2]);
      v52 -= 4;
    }
    while (v52 * 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_23017DF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a64;
  char a69;
  void *a70;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  void *a87;
  char a88;
  void *a89;
  char a90;
  void *a91;
  char a92;
  unint64_t *v92;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  if (a57 < 0)
    operator delete(a52);
  if (a63 < 0)
    operator delete(a58);
  if (a69 < 0)
    operator delete(a64);
  if (a72 < 0)
    operator delete(a70);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  if (a78 < 0)
    operator delete(a77);
  if (a80 < 0)
    operator delete(a79);
  if (a82 < 0)
    operator delete(a81);
  if (a84 < 0)
    operator delete(a83);
  if (a86 < 0)
    operator delete(a85);
  if (a88 < 0)
    operator delete(a87);
  if (a90 < 0)
    operator delete(a89);
  if (a92 < 0)
    operator delete(a91);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x2EF]) < 0)
    operator delete((void *)STACK[0x2D8]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  if (SLOBYTE(STACK[0x31F]) < 0)
    operator delete((void *)STACK[0x308]);
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  if (SLOBYTE(STACK[0x34F]) < 0)
    operator delete((void *)STACK[0x338]);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  if (SLOBYTE(STACK[0x37F]) < 0)
    operator delete((void *)STACK[0x368]);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  if (SLOBYTE(STACK[0x40F]) < 0)
    operator delete((void *)STACK[0x3F8]);
  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  if (SLOBYTE(STACK[0x43F]) < 0)
    operator delete((void *)STACK[0x428]);
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  if (SLOBYTE(STACK[0x46F]) < 0)
    operator delete((void *)STACK[0x458]);
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  if (SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  for (; v92 != &STACK[0x4A0]; v92 -= 4)
  {
    if (*((char *)v92 - 9) < 0)
      operator delete((void *)*(v92 - 4));
  }
  _Unwind_Resume(a1);
}

void sub_23017E5A4()
{
  JUMPOUT(0x23017E37CLL);
}

void sub_23017E5B0()
{
  JUMPOUT(0x23017E3BCLL);
}

void std::__shared_ptr_pointer<unsigned char *,`anonymous namespace'::buildInfoForComponent(`anonymous namespace'::MemberInfo &,std::string const&,unsigned int,std::string const&,RETypeMemberInfo,std::shared_ptr<unsigned char>)::$_0,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,`anonymous namespace'::buildInfoForComponent(`anonymous namespace'::MemberInfo &,std::string const&,unsigned int,std::string const&,RETypeMemberInfo,std::shared_ptr<unsigned char>)::$_0,std::allocator<unsigned char>>::__on_zero_shared()
{
  return RETypeInfoDestroyInstance();
}

void sub_23017E640(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,`anonymous namespace'::buildInfoForComponent(`anonymous namespace'::MemberInfo &,std::string const&,unsigned int,std::string const&,RETypeMemberInfo,std::shared_ptr<unsigned char>)::$_0,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::map<std::string,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  const void **v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;

  qword_255E54E08 = 0;
  qword_255E54E00 = 0;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = &result[4 * a2];
    v5 = &qword_255E54E00;
    while (v5 != &qword_255E54E00)
    {
      if (v3)
      {
        do
        {
          v6 = (uint64_t *)v3;
          v3 = *(_QWORD *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        v7 = &qword_255E54E00;
        do
        {
          v6 = (uint64_t *)v7[2];
          v8 = *v6 == (_QWORD)v7;
          v7 = v6;
        }
        while (v8);
      }
      result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_255E54E08, (const void **)v6 + 4, (const void **)v2);
      v3 = qword_255E54E00;
      if ((_DWORD)result)
        goto LABEL_11;
      if (qword_255E54E00)
      {
        v9 = &qword_255E54E00;
        while (1)
        {
          while (1)
          {
            v6 = (uint64_t *)v3;
            v10 = (const void **)(v3 + 32);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_255E54E08, (const void **)v2, (const void **)(v3 + 32)))break;
            v3 = *v6;
            v9 = v6;
            if (!*v6)
              goto LABEL_24;
          }
          result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_255E54E08, v10, (const void **)v2);
          if (!(_DWORD)result)
            break;
          v9 = v6 + 1;
          v3 = v6[1];
          if (!v3)
            goto LABEL_24;
        }
LABEL_13:
        if (*v9)
          goto LABEL_30;
        goto LABEL_24;
      }
LABEL_23:
      v9 = &qword_255E54E00;
      v6 = &qword_255E54E00;
LABEL_24:
      v11 = (uint64_t *)operator new(0x40uLL);
      v12 = (std::string *)(v11 + 4);
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)*v2, v2[1]);
      }
      else
      {
        v13 = *(_OWORD *)v2;
        v11[6] = v2[2];
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v11[7] = v2[3];
      *v11 = 0;
      v11[1] = 0;
      v11[2] = (uint64_t)v6;
      *v9 = (uint64_t)v11;
      {
        v11 = (uint64_t *)*v9;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_255E54E00, v11);
      ++qword_255E54E08;
LABEL_30:
      v2 += 4;
      if (v2 == v4)
        return result;
      v3 = qword_255E54E00;
    }
    v6 = &qword_255E54E00;
LABEL_11:
    if (v3)
    {
      v9 = v6 + 1;
      goto LABEL_13;
    }
    goto LABEL_23;
  }
  return result;
}

void sub_23017E854(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy((char *)qword_255E54E00);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::getFuncTable(_anonymous_namespace_ *this, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int *v175;
  unsigned int v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int *v183;
  unsigned int v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int *v196;
  unsigned int v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int *v207;
  unsigned int v208;
  unsigned int *v209;
  unsigned int v210;
  uint64_t v211;
  unsigned int *v212;
  unsigned int v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int *v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int *v234;
  unsigned int v235;
  unsigned int *v236;
  unsigned int v237;
  unsigned int *v238;
  unsigned int v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int *v245;
  unsigned int v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int *v249;
  unsigned int v250;
  unsigned int *v251;
  unsigned int v252;
  unsigned int *v253;
  unsigned int v254;
  uint64_t v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int *v258;
  unsigned int v259;
  unsigned int *v260;
  unsigned int v261;
  uint64_t v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int *v265;
  unsigned int v266;
  unsigned int *v267;
  unsigned int v268;
  uint64_t v269;
  unsigned int *v270;
  unsigned int v271;
  unsigned int *v272;
  unsigned int v273;
  unsigned int *v274;
  unsigned int v275;
  uint64_t v276;
  unsigned int *v277;
  unsigned int v278;
  unsigned int *v279;
  unsigned int v280;
  unsigned int *v281;
  unsigned int v282;
  uint64_t v283;
  unsigned int *v284;
  unsigned int v285;
  unsigned int *v286;
  unsigned int v287;
  unsigned int *v288;
  unsigned int v289;
  uint64_t v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int *v293;
  unsigned int v294;
  unsigned int *v295;
  unsigned int v296;
  uint64_t *v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  unsigned int *v304;
  unsigned int v305;
  unsigned int *v306;
  unsigned int v307;
  unsigned int *v308;
  unsigned int v309;
  uint64_t *v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int *v315;
  unsigned int v316;
  unsigned int *v317;
  unsigned int v318;
  unsigned int *v319;
  unsigned int v320;
  unsigned int *v321;
  unsigned int v322;
  uint64_t *v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  unsigned int *v330;
  unsigned int v331;
  unsigned int *v332;
  unsigned int v333;
  unsigned int *v334;
  unsigned int v335;
  uint64_t v336;
  unsigned int *v337;
  unsigned int v338;
  unsigned int *v339;
  unsigned int v340;
  unsigned int *v341;
  unsigned int v342;
  uint64_t *v343;
  uint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unsigned int *v348;
  unsigned int v349;
  unsigned int *v350;
  unsigned int v351;
  unsigned int *v352;
  unsigned int v353;
  unsigned int *v354;
  unsigned int v355;
  uint64_t *v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int *v361;
  unsigned int v362;
  unsigned int *v363;
  unsigned int v364;
  unsigned int *v365;
  unsigned int v366;
  unsigned int *v367;
  unsigned int v368;
  unsigned int *v369;
  unsigned int v370;
  unsigned int *v371;
  unsigned int v372;
  uint64_t *v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int *v378;
  unsigned int v379;
  unsigned int *v380;
  unsigned int v381;
  unsigned int *v382;
  unsigned int v383;
  unsigned int *v384;
  unsigned int v385;
  uint64_t *v386;
  uint64_t *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unsigned int *v391;
  unsigned int v392;
  unsigned int *v393;
  unsigned int v394;
  unsigned int *v395;
  unsigned int v396;
  unsigned int *v397;
  unsigned int v398;
  uint64_t v399;
  unsigned int *v400;
  unsigned int v401;
  unsigned int *v402;
  unsigned int v403;
  unsigned int *v404;
  unsigned int v405;
  _QWORD *v406;
  _QWORD *v407;
  _QWORD *v408;
  _QWORD *v409;
  _QWORD *v410;
  _QWORD *v411;
  _QWORD *v412;
  _QWORD *v413;
  _QWORD *v414;
  _QWORD *v415;
  _QWORD *v416;
  _QWORD *v417;
  _QWORD *v418;
  uint64_t v419;
  _QWORD v420[3];
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD v425[3];
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD v430[3];
  uint64_t v431;
  uint64_t v432;
  _QWORD v433[3];
  uint64_t v434;
  uint64_t v435;
  _QWORD v436[3];
  uint64_t v437;
  uint64_t v438;
  _QWORD v439[3];
  uint64_t v440;
  uint64_t v441;
  _QWORD v442[3];
  uint64_t v443;
  uint64_t v444;
  _QWORD v445[3];
  uint64_t v446;
  uint64_t v447;
  _QWORD v448[3];
  uint64_t v449;
  uint64_t v450;
  _QWORD v451[3];
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  _QWORD v455[3];
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  _QWORD v461[3];
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  _QWORD v465[3];
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  _QWORD v469[3];
  uint64_t v470;
  uint64_t v471;
  _QWORD v472[3];
  uint64_t v473;
  uint64_t v474;
  _QWORD v475[3];
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  _QWORD v480[3];
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  _QWORD v485[3];
  uint64_t v486;
  uint64_t v487;
  _QWORD v488[3];
  uint64_t v489;
  uint64_t v490;
  _QWORD v491[3];
  uint64_t v492;
  uint64_t v493;
  _QWORD v494[3];
  uint64_t v495;
  uint64_t v496;
  _QWORD v497[3];
  uint64_t v498;
  uint64_t v499;
  _QWORD v500[3];
  uint64_t v501;
  uint64_t v502;
  _QWORD v503[3];
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  _QWORD v507[3];
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  _QWORD v511[3];
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  _QWORD v515[3];
  uint64_t v516;
  uint64_t v517;
  _QWORD v518[3];
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  _QWORD v522[3];
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  _QWORD v528[3];
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  _QWORD v532[3];
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  _QWORD v536[3];
  uint64_t v537;
  uint64_t v538;
  _QWORD v539[3];
  uint64_t v540;
  uint64_t v541;
  _QWORD v542[3];
  _QWORD *v543;
  uint64_t v544;
  _QWORD v545[5];
  _QWORD v546[5];
  _QWORD v547[4];
  uint64_t v548;
  _QWORD v549[5];
  _QWORD v550[5];
  _QWORD v551[4];
  uint64_t v552;
  _QWORD v553[3];
  _QWORD *v554;
  uint64_t v555;
  _QWORD v556[3];
  _QWORD *v557;
  uint64_t v558;
  _QWORD v559[3];
  _QWORD *v560;
  uint64_t v561;
  _QWORD v562[3];
  _QWORD *v563;
  uint64_t v564;
  _QWORD v565[3];
  _QWORD *v566;
  uint64_t v567;
  _QWORD v568[3];
  _QWORD *v569;
  uint64_t v570;
  _QWORD v571[3];
  _QWORD *v572;
  uint64_t v573;
  _QWORD v574[5];
  _QWORD v575[4];
  uint64_t v576;
  _QWORD v577[5];
  _QWORD v578[5];
  _QWORD v579[5];
  _QWORD v580[4];
  uint64_t v581;
  _QWORD v582[5];
  _QWORD v583[4];
  uint64_t v584;
  _QWORD v585[5];
  _QWORD v586[4];
  uint64_t v587;
  _QWORD v588[3];
  _QWORD *v589;
  uint64_t v590;
  _QWORD v591[3];
  _QWORD *v592;
  uint64_t v593;
  _QWORD v594[5];
  _QWORD v595[5];
  _QWORD v596[4];
  uint64_t v597;
  _QWORD v598[5];
  _QWORD v599[5];
  _QWORD v600[4];
  uint64_t v601;
  _QWORD v602[3];
  _QWORD *v603;
  uint64_t v604;
  _QWORD v605[3];
  _QWORD *v606;
  uint64_t v607;
  _QWORD v608[3];
  _QWORD *v609;
  uint64_t v610;
  _QWORD v611[3];
  _QWORD *v612;
  uint64_t v613;
  _QWORD v614[3];
  _QWORD *v615;
  uint64_t v616;
  _QWORD v617[3];
  _QWORD *v618;
  uint64_t v619;
  _QWORD v620[5];
  _QWORD v621[4];
  uint64_t v622;
  _QWORD v623[5];
  _QWORD v624[4];
  uint64_t v625;
  _QWORD v626[5];
  _QWORD v627[4];
  uint64_t v628;
  _QWORD v629[3];
  _QWORD *v630;
  uint64_t v631;
  _QWORD v632[5];
  _QWORD v633[4];
  uint64_t v634;
  _QWORD v635[5];
  _QWORD v636[5];
  _QWORD v637[5];
  _QWORD v638[4];
  uint64_t v639;
  _QWORD v640[5];
  _QWORD v641[4];
  uint64_t v642;
  _QWORD v643[5];
  _QWORD v644[4];
  uint64_t v645;
  _QWORD v646[3];
  _QWORD *v647;
  _QWORD v648[4];
  _QWORD v649[4];
  _QWORD v650[4];
  _QWORD v651[4];
  _QWORD v652[4];
  _QWORD v653[4];
  _QWORD v654[4];
  _QWORD v655[4];
  _QWORD v656[4];
  _QWORD v657[4];
  _QWORD v658[4];
  _QWORD v659[4];
  _QWORD v660[4];
  _QWORD v661[4];
  _QWORD v662[4];
  _QWORD v663[4];
  _QWORD v664[4];
  _QWORD v665[4];
  _QWORD v666[4];
  _QWORD v667[4];
  _QWORD v668[4];
  _QWORD v669[4];
  _QWORD v670[4];
  _QWORD v671[4];
  _QWORD v672[4];
  _QWORD v673[4];
  _QWORD v674[4];
  _QWORD v675[4];
  _QWORD v676[4];
  _QWORD v677[4];
  _QWORD v678[4];
  _QWORD v679[4];
  _QWORD v680[4];
  uint64_t v681;

  MEMORY[0x24BDAC7A8](this, a2);
  v681 = *MEMORY[0x24BDAC8D0];
    return;
  MEMORY[0x2348B274C](&v540, "uchar");
  MEMORY[0x2348B274C](&v538, "uint8_t");
  v3 = v538;
  v538 = 0;
  v645 = v3;
  v646[0] = &off_24FDFBD60;
  v418 = v646;
  v647 = v646;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v539, &v645, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v648, v540, v539);
  MEMORY[0x2348B274C](&v537, "uint");
  MEMORY[0x2348B274C](&v535, "uint16_t");
  v4 = v535;
  v535 = 0;
  v642 = v4;
  v643[0] = &off_24FDFBD60;
  v643[3] = v643;
  MEMORY[0x2348B274C](&v534, "uint32_t");
  v5 = v534;
  v534 = 0;
  v643[4] = v5;
  v644[0] = &off_24FDFBD60;
  v644[3] = v644;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v536, &v642, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v649, v537, v536);
  MEMORY[0x2348B274C](&v533, "uint64");
  MEMORY[0x2348B274C](&v531, "uint64_t");
  v6 = v531;
  v531 = 0;
  v639 = v6;
  v640[0] = &off_24FDFBD60;
  v640[3] = v640;
  MEMORY[0x2348B274C](&v530, "size_t");
  v7 = v530;
  v530 = 0;
  v640[4] = v7;
  v641[0] = &off_24FDFBD60;
  v641[3] = v641;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v532, &v639, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v650, v533, v532);
  MEMORY[0x2348B274C](&v529, "int");
  MEMORY[0x2348B274C](&v527, "char");
  v8 = v527;
  v527 = 0;
  v634 = v8;
  v635[0] = &off_24FDFBD60;
  v635[3] = v635;
  MEMORY[0x2348B274C](&v526, "int8_t");
  v9 = v526;
  v526 = 0;
  v635[4] = v9;
  v636[0] = &off_24FDFBD60;
  v636[3] = v636;
  MEMORY[0x2348B274C](&v525, "int16_t");
  v10 = v525;
  v525 = 0;
  v636[4] = v10;
  v637[0] = &off_24FDFBD60;
  v637[3] = v637;
  MEMORY[0x2348B274C](&v524, "int32_t");
  v11 = v524;
  v524 = 0;
  v637[4] = v11;
  v638[0] = &off_24FDFBD60;
  v638[3] = v638;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v528, &v634, 4);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v651, v529, v528);
  MEMORY[0x2348B274C](&v523, "int64");
  MEMORY[0x2348B274C](&v521, "int");
  v12 = v521;
  v521 = 0;
  v631 = v12;
  v632[0] = &off_24FDFBD60;
  v632[3] = v632;
  MEMORY[0x2348B274C](&v520, "int64_t");
  v13 = v520;
  v520 = 0;
  v632[4] = v13;
  v633[0] = &off_24FDFBD60;
  v633[3] = v633;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v522, &v631, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v652, v523, v522);
  MEMORY[0x2348B274C](&v519, "float");
  MEMORY[0x2348B274C](&v517, "float");
  v14 = v517;
  v517 = 0;
  v628 = v14;
  v629[0] = &off_24FDFBD60;
  v417 = v629;
  v630 = v629;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v518, &v628, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v653, v519, v518);
  MEMORY[0x2348B274C](&v516, "float2");
  MEMORY[0x2348B274C](&v514, "float[]");
  v15 = v514;
  v514 = 0;
  v625 = v15;
  v626[0] = &off_24FDFBD60;
  v626[3] = v626;
  MEMORY[0x2348B274C](&v513, "Vector2F");
  v16 = v513;
  v513 = 0;
  v626[4] = v16;
  v627[0] = &off_24FDFBD60;
  v627[3] = v627;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v515, &v625, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v654, v516, v515);
  MEMORY[0x2348B274C](&v512, "float3");
  MEMORY[0x2348B274C](&v510, "float[]");
  v17 = v510;
  v510 = 0;
  v622 = v17;
  v623[0] = &off_24FDFBD60;
  v623[3] = v623;
  MEMORY[0x2348B274C](&v509, "Vector3F");
  v18 = v509;
  v509 = 0;
  v623[4] = v18;
  v624[0] = &off_24FDFBD60;
  v624[3] = v624;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v511, &v622, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v655, v512, v511);
  MEMORY[0x2348B274C](&v508, "float4");
  MEMORY[0x2348B274C](&v506, "float[]");
  v19 = v506;
  v506 = 0;
  v619 = v19;
  v620[0] = &off_24FDFBD60;
  v620[3] = v620;
  MEMORY[0x2348B274C](&v505, "Vector4F");
  v20 = v505;
  v505 = 0;
  v620[4] = v20;
  v621[0] = &off_24FDFBD60;
  v621[3] = v621;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v507, &v619, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v656, v508, v507);
  MEMORY[0x2348B274C](&v504, "quatf");
  MEMORY[0x2348B274C](&v502, "QuaternionF");
  v21 = v502;
  v502 = 0;
  v616 = v21;
  v617[0] = &off_24FDFBD60;
  v416 = v617;
  v618 = v617;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v503, &v616, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v657, v504, v503);
  MEMORY[0x2348B274C](&v501, "double");
  MEMORY[0x2348B274C](&v499, "double");
  v22 = v499;
  v499 = 0;
  v613 = v22;
  v614[0] = &off_24FDFBD60;
  v415 = v614;
  v615 = v614;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v500, &v613, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v658, v501, v500);
  MEMORY[0x2348B274C](&v498, "BOOL");
  MEMORY[0x2348B274C](&v496, "BOOL");
  v23 = v496;
  v496 = 0;
  v610 = v23;
  v611[0] = &off_24FDFBD60;
  v414 = v611;
  v612 = v611;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v497, &v610, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v659, v498, v497);
  MEMORY[0x2348B274C](&v495, "matrix2d");
  MEMORY[0x2348B274C](&v493, "Matrix2x2F");
  v24 = v493;
  v493 = 0;
  v607 = v24;
  v608[0] = &off_24FDFBD60;
  v608[1] = _ZN12_GLOBAL__N_114usdToRe_matrixIN32pxrInternal__aapl__pxrReserved__10GfMatrix2dENS1_7GfVec2dE13simd_float2x2Dv2_fLm2EfEEvRKNS1_12UsdAttributeENSt3__110shared_ptrIhEEPN9realityio6InputsE10RETypeInfo;
  v413 = v608;
  v609 = v608;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v494, &v607, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v660, v495, v494);
  MEMORY[0x2348B274C](&v492, "matrix3d");
  MEMORY[0x2348B274C](&v490, "Matrix3x3F");
  v25 = v490;
  v490 = 0;
  v604 = v25;
  v605[0] = &off_24FDFBD60;
  v605[1] = _ZN12_GLOBAL__N_114usdToRe_matrixIN32pxrInternal__aapl__pxrReserved__10GfMatrix3dENS1_7GfVec3dE13simd_float3x3Dv3_fLm3EfEEvRKNS1_12UsdAttributeENSt3__110shared_ptrIhEEPN9realityio6InputsE10RETypeInfo;
  v412 = v605;
  v606 = v605;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v491, &v604, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v661, v492, v491);
  MEMORY[0x2348B274C](&v489, "matrix4d");
  MEMORY[0x2348B274C](&v487, "Matrix4x4F");
  v26 = v487;
  v487 = 0;
  v601 = v26;
  v602[0] = &off_24FDFBD60;
  v602[1] = _ZN12_GLOBAL__N_114usdToRe_matrixIN32pxrInternal__aapl__pxrReserved__10GfMatrix4dENS1_7GfVec4dE13simd_float4x4Dv4_fLm4EfEEvRKNS1_12UsdAttributeENSt3__110shared_ptrIhEEPN9realityio6InputsE10RETypeInfo;
  v411 = v602;
  v603 = v602;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v488, &v601, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v662, v489, v488);
  MEMORY[0x2348B274C](&v486, "token");
  MEMORY[0x2348B274C](&v484, "char*");
  v27 = v484;
  v484 = 0;
  v597 = v27;
  v598[0] = &off_24FDFBD60;
  v598[3] = v598;
  MEMORY[0x2348B274C](&v483, "DynamicString");
  v28 = v483;
  v483 = 0;
  v598[4] = v28;
  v599[0] = &off_24FDFBD60;
  v599[3] = v599;
  MEMORY[0x2348B274C](&v482, "StringID");
  v29 = v482;
  v482 = 0;
  v599[4] = v29;
  v600[0] = &off_24FDFBD60;
  v600[3] = v600;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v485, &v597, 3);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v663, v486, v485);
  MEMORY[0x2348B274C](&v481, "string");
  MEMORY[0x2348B274C](&v479, "char*");
  v30 = v479;
  v479 = 0;
  v593 = v30;
  v594[0] = &off_24FDFBD60;
  v594[3] = v594;
  MEMORY[0x2348B274C](&v478, "DynamicString");
  v31 = v478;
  v478 = 0;
  v594[4] = v31;
  v595[0] = &off_24FDFBD60;
  v595[3] = v595;
  MEMORY[0x2348B274C](&v477, "StringID");
  v32 = v477;
  v477 = 0;
  v595[4] = v32;
  v596[0] = &off_24FDFBD60;
  v596[3] = v596;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v480, &v593, 3);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v664, v481, v480);
  MEMORY[0x2348B274C](&v476, "asset");
  MEMORY[0x2348B274C](&v474, "AssetHandle");
  v33 = v474;
  v474 = 0;
  v590 = v33;
  v591[0] = &off_24FDFBD60;
  v410 = v591;
  v592 = v591;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v475, &v590, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v665, v476, v475);
  MEMORY[0x2348B274C](&v473, "uchar[]");
  MEMORY[0x2348B274C](&v471, "uint8_t[]");
  v34 = v471;
  v471 = 0;
  v587 = v34;
  v588[0] = &off_24FDFBD60;
  v409 = v588;
  v589 = v588;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v472, &v587, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v666, v473, v472);
  MEMORY[0x2348B274C](&v470, "uint[]");
  MEMORY[0x2348B274C](&v468, "uint16_t[]");
  v35 = v468;
  v468 = 0;
  v584 = v35;
  v585[0] = &off_24FDFBD60;
  v585[3] = v585;
  MEMORY[0x2348B274C](&v467, "uint32_t[]");
  v36 = v467;
  v467 = 0;
  v585[4] = v36;
  v586[0] = &off_24FDFBD60;
  v586[3] = v586;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v469, &v584, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v667, v470, v469);
  MEMORY[0x2348B274C](&v466, "uint64[]");
  MEMORY[0x2348B274C](&v464, "uint64_t[]");
  v37 = v464;
  v464 = 0;
  v581 = v37;
  v582[0] = &off_24FDFBD60;
  v582[3] = v582;
  MEMORY[0x2348B274C](&v463, "size_t[]");
  v38 = v463;
  v463 = 0;
  v582[4] = v38;
  v583[0] = &off_24FDFBD60;
  v583[3] = v583;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v465, &v581, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v668, v466, v465);
  MEMORY[0x2348B274C](&v462, "int[]");
  MEMORY[0x2348B274C](&v460, "char[]");
  v39 = v460;
  v460 = 0;
  v576 = v39;
  v577[0] = &off_24FDFBD60;
  v577[3] = v577;
  MEMORY[0x2348B274C](&v459, "int8_t[]");
  v40 = v459;
  v459 = 0;
  v577[4] = v40;
  v578[0] = &off_24FDFBD60;
  v578[3] = v578;
  MEMORY[0x2348B274C](&v458, "int16_t[]");
  v41 = v458;
  v458 = 0;
  v578[4] = v41;
  v579[0] = &off_24FDFBD60;
  v579[3] = v579;
  MEMORY[0x2348B274C](&v457, "int32_t[]");
  v42 = v457;
  v457 = 0;
  v579[4] = v42;
  v580[0] = &off_24FDFBD60;
  v580[3] = v580;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v461, &v576, 4);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v669, v462, v461);
  MEMORY[0x2348B274C](&v456, "int64[]");
  MEMORY[0x2348B274C](&v454, "int[]");
  v43 = v454;
  v454 = 0;
  v573 = v43;
  v574[0] = &off_24FDFBD60;
  v574[3] = v574;
  MEMORY[0x2348B274C](&v453, "int64_t[]");
  v44 = v453;
  v453 = 0;
  v574[4] = v44;
  v575[0] = &off_24FDFBD60;
  v575[3] = v575;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v455, &v573, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v670, v456, v455);
  MEMORY[0x2348B274C](&v452, "float[]");
  MEMORY[0x2348B274C](&v450, "float[]");
  v45 = v450;
  v450 = 0;
  v570 = v45;
  v571[0] = &off_24FDFBD60;
  v408 = v571;
  v572 = v571;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v451, &v570, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v671, v452, v451);
  MEMORY[0x2348B274C](&v449, "float2[]");
  MEMORY[0x2348B274C](&v447, "Vector2F[]");
  v46 = v447;
  v447 = 0;
  v567 = v46;
  v568[0] = &off_24FDFBD60;
  v407 = v568;
  v569 = v568;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v448, &v567, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v672, v449, v448);
  MEMORY[0x2348B274C](&v446, "float3[]");
  MEMORY[0x2348B274C](&v444, "Vector3F[]");
  v47 = v444;
  v444 = 0;
  v564 = v47;
  v565[0] = &off_24FDFBD60;
  v406 = v565;
  v566 = v565;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v445, &v564, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v673, v446, v445);
  MEMORY[0x2348B274C](&v443, "float4[]");
  MEMORY[0x2348B274C](&v441, "Vector4F[]");
  v48 = v441;
  v441 = 0;
  v49 = v562;
  v561 = v48;
  v562[0] = &off_24FDFBD60;
  v563 = v562;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v442, &v561, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v674, v443, v442);
  MEMORY[0x2348B274C](&v440, "quatf[]");
  MEMORY[0x2348B274C](&v438, "QuaternionF[]");
  v50 = v438;
  v438 = 0;
  v51 = v559;
  v558 = v50;
  v559[0] = &off_24FDFBD60;
  v560 = v559;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v439, &v558, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v675, v440, v439);
  MEMORY[0x2348B274C](&v437, "double[]");
  MEMORY[0x2348B274C](&v435, "double[]");
  v52 = v435;
  v435 = 0;
  v53 = v556;
  v555 = v52;
  v556[0] = &off_24FDFBD60;
  v557 = v556;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v436, &v555, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v676, v437, v436);
  MEMORY[0x2348B274C](&v434, "BOOL[]");
  MEMORY[0x2348B274C](&v432, "BOOL[]");
  v54 = v432;
  v432 = 0;
  v55 = v553;
  v552 = v54;
  v553[0] = &off_24FDFBD60;
  v554 = v553;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v433, &v552, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v677, v434, v433);
  MEMORY[0x2348B274C](&v431, "token[]");
  MEMORY[0x2348B274C](&v429, "char*[]");
  v56 = v429;
  v429 = 0;
  v548 = v56;
  v549[0] = &off_24FDFBD60;
  v549[3] = v549;
  MEMORY[0x2348B274C](&v428, "DynamicString[]");
  v57 = v428;
  v428 = 0;
  v549[4] = v57;
  v550[0] = &off_24FDFBD60;
  v550[3] = v550;
  MEMORY[0x2348B274C](&v427, "StringID[]");
  v58 = v427;
  v427 = 0;
  v550[4] = v58;
  v551[0] = &off_24FDFBD60;
  v551[3] = v551;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v430, &v548, 3);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v678, v431, v430);
  MEMORY[0x2348B274C](&v426, "string[]");
  MEMORY[0x2348B274C](&v424, "char*[]");
  v59 = v424;
  v424 = 0;
  v544 = v59;
  v545[0] = &off_24FDFBD60;
  v545[3] = v545;
  MEMORY[0x2348B274C](&v423, "DynamicString[]");
  v60 = v423;
  v423 = 0;
  v545[4] = v60;
  v546[0] = &off_24FDFBD60;
  v546[3] = v546;
  MEMORY[0x2348B274C](&v422, "StringID[]");
  v61 = v422;
  v422 = 0;
  v546[4] = v61;
  v547[0] = &off_24FDFBD60;
  v547[3] = v547;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v425, &v544, 3);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v679, v426, v425);
  MEMORY[0x2348B274C](&v421, "asset[]");
  MEMORY[0x2348B274C](&v419, "AssetHandle[]");
  v62 = v419;
  v419 = 0;
  v63 = v542;
  v541 = v62;
  v542[0] = &off_24FDFBD60;
  v543 = v542;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v420, &v541, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v680, v421, v420);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::map[abi:ne180100]((uint64_t)v648, 33);
  v64 = &v681;
  do
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)*(v64 - 2));
    v66 = *(v64 - 4);
    v64 -= 4;
    v65 = v66;
    if ((v66 & 7) != 0)
    {
      v67 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
      do
        v68 = __ldxr(v67);
      while (__stlxr(v68 - 2, v67));
    }
  }
  while (v64 != v648);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v420[1]);
  if (v543 == v542)
  {
    v69 = 4;
    goto LABEL_13;
  }
  if (v543)
  {
    v69 = 5;
    v63 = v543;
LABEL_13:
    (*(void (**)(_QWORD *))(*v63 + 8 * v69))(v63);
  }
  if ((v541 & 7) != 0)
  {
    v70 = (unsigned int *)(v541 & 0xFFFFFFFFFFFFFFF8);
    do
      v71 = __ldxr(v70);
    while (__stlxr(v71 - 2, v70));
  }
  if ((v419 & 7) != 0)
  {
    v72 = (unsigned int *)(v419 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  if ((v421 & 7) != 0)
  {
    v74 = (unsigned int *)(v421 & 0xFFFFFFFFFFFFFFF8);
    do
      v75 = __ldxr(v74);
    while (__stlxr(v75 - 2, v74));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v425[1]);
  v76 = &v548;
  do
  {
    v77 = (uint64_t *)*(v76 - 1);
    if (v77 == v76 - 4)
    {
      v77 = v76 - 4;
      v78 = 4;
    }
    else
    {
      if (!v77)
        goto LABEL_29;
      v78 = 5;
    }
    (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_29:
    v80 = *(v76 - 5);
    v76 -= 5;
    v79 = v80;
    if ((v80 & 7) != 0)
    {
      v81 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
      do
        v82 = __ldxr(v81);
      while (__stlxr(v82 - 2, v81));
    }
  }
  while (v76 != &v544);
  if ((v422 & 7) != 0)
  {
    v83 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
    do
      v84 = __ldxr(v83);
    while (__stlxr(v84 - 2, v83));
  }
  if ((v423 & 7) != 0)
  {
    v85 = (unsigned int *)(v423 & 0xFFFFFFFFFFFFFFF8);
    do
      v86 = __ldxr(v85);
    while (__stlxr(v86 - 2, v85));
  }
  if ((v424 & 7) != 0)
  {
    v87 = (unsigned int *)(v424 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  if ((v426 & 7) != 0)
  {
    v89 = (unsigned int *)(v426 & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stlxr(v90 - 2, v89));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v430[1]);
  v91 = &v552;
  while (2)
  {
    v92 = (uint64_t *)*(v91 - 1);
    if (v92 == v91 - 4)
    {
      v92 = v91 - 4;
      v93 = 4;
LABEL_50:
      (*(void (**)(void))(*v92 + 8 * v93))();
    }
    else if (v92)
    {
      v93 = 5;
      goto LABEL_50;
    }
    v95 = *(v91 - 5);
    v91 -= 5;
    v94 = v95;
    if ((v95 & 7) != 0)
    {
      v96 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
      do
        v97 = __ldxr(v96);
      while (__stlxr(v97 - 2, v96));
    }
    if (v91 != &v548)
      continue;
    break;
  }
  if ((v427 & 7) != 0)
  {
    v98 = (unsigned int *)(v427 & 0xFFFFFFFFFFFFFFF8);
    do
      v99 = __ldxr(v98);
    while (__stlxr(v99 - 2, v98));
  }
  if ((v428 & 7) != 0)
  {
    v100 = (unsigned int *)(v428 & 0xFFFFFFFFFFFFFFF8);
    do
      v101 = __ldxr(v100);
    while (__stlxr(v101 - 2, v100));
  }
  if ((v429 & 7) != 0)
  {
    v102 = (unsigned int *)(v429 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  if ((v431 & 7) != 0)
  {
    v104 = (unsigned int *)(v431 & 0xFFFFFFFFFFFFFFF8);
    do
      v105 = __ldxr(v104);
    while (__stlxr(v105 - 2, v104));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v433[1]);
  if (v554 == v553)
  {
    v106 = 4;
LABEL_71:
    (*(void (**)(_QWORD *))(*v55 + 8 * v106))(v55);
  }
  else if (v554)
  {
    v106 = 5;
    v55 = v554;
    goto LABEL_71;
  }
  if ((v552 & 7) != 0)
  {
    v107 = (unsigned int *)(v552 & 0xFFFFFFFFFFFFFFF8);
    do
      v108 = __ldxr(v107);
    while (__stlxr(v108 - 2, v107));
  }
  if ((v432 & 7) != 0)
  {
    v109 = (unsigned int *)(v432 & 0xFFFFFFFFFFFFFFF8);
    do
      v110 = __ldxr(v109);
    while (__stlxr(v110 - 2, v109));
  }
  if ((v434 & 7) != 0)
  {
    v111 = (unsigned int *)(v434 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v436[1]);
  if (v557 == v556)
  {
    v113 = 4;
LABEL_85:
    (*(void (**)(_QWORD *))(*v53 + 8 * v113))(v53);
  }
  else if (v557)
  {
    v113 = 5;
    v53 = v557;
    goto LABEL_85;
  }
  if ((v555 & 7) != 0)
  {
    v114 = (unsigned int *)(v555 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  if ((v435 & 7) != 0)
  {
    v116 = (unsigned int *)(v435 & 0xFFFFFFFFFFFFFFF8);
    do
      v117 = __ldxr(v116);
    while (__stlxr(v117 - 2, v116));
  }
  if ((v437 & 7) != 0)
  {
    v118 = (unsigned int *)(v437 & 0xFFFFFFFFFFFFFFF8);
    do
      v119 = __ldxr(v118);
    while (__stlxr(v119 - 2, v118));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v439[1]);
  if (v560 == v559)
  {
    v120 = 4;
LABEL_99:
    (*(void (**)(_QWORD *))(*v51 + 8 * v120))(v51);
  }
  else if (v560)
  {
    v120 = 5;
    v51 = v560;
    goto LABEL_99;
  }
  if ((v558 & 7) != 0)
  {
    v121 = (unsigned int *)(v558 & 0xFFFFFFFFFFFFFFF8);
    do
      v122 = __ldxr(v121);
    while (__stlxr(v122 - 2, v121));
  }
  if ((v438 & 7) != 0)
  {
    v123 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  if ((v440 & 7) != 0)
  {
    v125 = (unsigned int *)(v440 & 0xFFFFFFFFFFFFFFF8);
    do
      v126 = __ldxr(v125);
    while (__stlxr(v126 - 2, v125));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v442[1]);
  if (v563 == v562)
  {
    v127 = 4;
LABEL_113:
    (*(void (**)(_QWORD *))(*v49 + 8 * v127))(v49);
  }
  else if (v563)
  {
    v127 = 5;
    v49 = v563;
    goto LABEL_113;
  }
  if ((v561 & 7) != 0)
  {
    v128 = (unsigned int *)(v561 & 0xFFFFFFFFFFFFFFF8);
    do
      v129 = __ldxr(v128);
    while (__stlxr(v129 - 2, v128));
  }
  if ((v441 & 7) != 0)
  {
    v130 = (unsigned int *)(v441 & 0xFFFFFFFFFFFFFFF8);
    do
      v131 = __ldxr(v130);
    while (__stlxr(v131 - 2, v130));
  }
  if ((v443 & 7) != 0)
  {
    v132 = (unsigned int *)(v443 & 0xFFFFFFFFFFFFFFF8);
    do
      v133 = __ldxr(v132);
    while (__stlxr(v133 - 2, v132));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v445[1]);
  if (v566 == v565)
  {
    v134 = 4;
LABEL_127:
    (*(void (**)(void))(*v406 + 8 * v134))();
  }
  else if (v566)
  {
    v134 = 5;
    v406 = v566;
    goto LABEL_127;
  }
  if ((v564 & 7) != 0)
  {
    v135 = (unsigned int *)(v564 & 0xFFFFFFFFFFFFFFF8);
    do
      v136 = __ldxr(v135);
    while (__stlxr(v136 - 2, v135));
  }
  if ((v444 & 7) != 0)
  {
    v137 = (unsigned int *)(v444 & 0xFFFFFFFFFFFFFFF8);
    do
      v138 = __ldxr(v137);
    while (__stlxr(v138 - 2, v137));
  }
  if ((v446 & 7) != 0)
  {
    v139 = (unsigned int *)(v446 & 0xFFFFFFFFFFFFFFF8);
    do
      v140 = __ldxr(v139);
    while (__stlxr(v140 - 2, v139));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v448[1]);
  if (v569 == v568)
  {
    v141 = 4;
LABEL_141:
    (*(void (**)(void))(*v407 + 8 * v141))();
  }
  else if (v569)
  {
    v141 = 5;
    v407 = v569;
    goto LABEL_141;
  }
  if ((v567 & 7) != 0)
  {
    v142 = (unsigned int *)(v567 & 0xFFFFFFFFFFFFFFF8);
    do
      v143 = __ldxr(v142);
    while (__stlxr(v143 - 2, v142));
  }
  if ((v447 & 7) != 0)
  {
    v144 = (unsigned int *)(v447 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stlxr(v145 - 2, v144));
  }
  if ((v449 & 7) != 0)
  {
    v146 = (unsigned int *)(v449 & 0xFFFFFFFFFFFFFFF8);
    do
      v147 = __ldxr(v146);
    while (__stlxr(v147 - 2, v146));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v451[1]);
  if (v572 == v571)
  {
    v148 = 4;
LABEL_155:
    (*(void (**)(void))(*v408 + 8 * v148))();
  }
  else if (v572)
  {
    v148 = 5;
    v408 = v572;
    goto LABEL_155;
  }
  if ((v570 & 7) != 0)
  {
    v149 = (unsigned int *)(v570 & 0xFFFFFFFFFFFFFFF8);
    do
      v150 = __ldxr(v149);
    while (__stlxr(v150 - 2, v149));
  }
  if ((v450 & 7) != 0)
  {
    v151 = (unsigned int *)(v450 & 0xFFFFFFFFFFFFFFF8);
    do
      v152 = __ldxr(v151);
    while (__stlxr(v152 - 2, v151));
  }
  if ((v452 & 7) != 0)
  {
    v153 = (unsigned int *)(v452 & 0xFFFFFFFFFFFFFFF8);
    do
      v154 = __ldxr(v153);
    while (__stlxr(v154 - 2, v153));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v455[1]);
  v155 = &v576;
  while (2)
  {
    v156 = (uint64_t *)*(v155 - 1);
    if (v156 == v155 - 4)
    {
      v156 = v155 - 4;
      v157 = 4;
LABEL_170:
      (*(void (**)(void))(*v156 + 8 * v157))();
    }
    else if (v156)
    {
      v157 = 5;
      goto LABEL_170;
    }
    v159 = *(v155 - 5);
    v155 -= 5;
    v158 = v159;
    if ((v159 & 7) != 0)
    {
      v160 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
      do
        v161 = __ldxr(v160);
      while (__stlxr(v161 - 2, v160));
    }
    if (v155 != &v573)
      continue;
    break;
  }
  if ((v453 & 7) != 0)
  {
    v162 = (unsigned int *)(v453 & 0xFFFFFFFFFFFFFFF8);
    do
      v163 = __ldxr(v162);
    while (__stlxr(v163 - 2, v162));
  }
  if ((v454 & 7) != 0)
  {
    v164 = (unsigned int *)(v454 & 0xFFFFFFFFFFFFFFF8);
    do
      v165 = __ldxr(v164);
    while (__stlxr(v165 - 2, v164));
  }
  if ((v456 & 7) != 0)
  {
    v166 = (unsigned int *)(v456 & 0xFFFFFFFFFFFFFFF8);
    do
      v167 = __ldxr(v166);
    while (__stlxr(v167 - 2, v166));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v461[1]);
  v168 = &v581;
  while (2)
  {
    v169 = (uint64_t *)*(v168 - 1);
    if (v169 == v168 - 4)
    {
      v169 = v168 - 4;
      v170 = 4;
LABEL_189:
      (*(void (**)(void))(*v169 + 8 * v170))();
    }
    else if (v169)
    {
      v170 = 5;
      goto LABEL_189;
    }
    v172 = *(v168 - 5);
    v168 -= 5;
    v171 = v172;
    if ((v172 & 7) != 0)
    {
      v173 = (unsigned int *)(v171 & 0xFFFFFFFFFFFFFFF8);
      do
        v174 = __ldxr(v173);
      while (__stlxr(v174 - 2, v173));
    }
    if (v168 != &v576)
      continue;
    break;
  }
  if ((v457 & 7) != 0)
  {
    v175 = (unsigned int *)(v457 & 0xFFFFFFFFFFFFFFF8);
    do
      v176 = __ldxr(v175);
    while (__stlxr(v176 - 2, v175));
  }
  if ((v458 & 7) != 0)
  {
    v177 = (unsigned int *)(v458 & 0xFFFFFFFFFFFFFFF8);
    do
      v178 = __ldxr(v177);
    while (__stlxr(v178 - 2, v177));
  }
  if ((v459 & 7) != 0)
  {
    v179 = (unsigned int *)(v459 & 0xFFFFFFFFFFFFFFF8);
    do
      v180 = __ldxr(v179);
    while (__stlxr(v180 - 2, v179));
  }
  if ((v460 & 7) != 0)
  {
    v181 = (unsigned int *)(v460 & 0xFFFFFFFFFFFFFFF8);
    do
      v182 = __ldxr(v181);
    while (__stlxr(v182 - 2, v181));
  }
  if ((v462 & 7) != 0)
  {
    v183 = (unsigned int *)(v462 & 0xFFFFFFFFFFFFFFF8);
    do
      v184 = __ldxr(v183);
    while (__stlxr(v184 - 2, v183));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v465[1]);
  v185 = &v584;
  while (2)
  {
    v186 = (uint64_t *)*(v185 - 1);
    if (v186 == v185 - 4)
    {
      v186 = v185 - 4;
      v187 = 4;
LABEL_214:
      (*(void (**)(void))(*v186 + 8 * v187))();
    }
    else if (v186)
    {
      v187 = 5;
      goto LABEL_214;
    }
    v189 = *(v185 - 5);
    v185 -= 5;
    v188 = v189;
    if ((v189 & 7) != 0)
    {
      v190 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
      do
        v191 = __ldxr(v190);
      while (__stlxr(v191 - 2, v190));
    }
    if (v185 != &v581)
      continue;
    break;
  }
  if ((v463 & 7) != 0)
  {
    v192 = (unsigned int *)(v463 & 0xFFFFFFFFFFFFFFF8);
    do
      v193 = __ldxr(v192);
    while (__stlxr(v193 - 2, v192));
  }
  if ((v464 & 7) != 0)
  {
    v194 = (unsigned int *)(v464 & 0xFFFFFFFFFFFFFFF8);
    do
      v195 = __ldxr(v194);
    while (__stlxr(v195 - 2, v194));
  }
  if ((v466 & 7) != 0)
  {
    v196 = (unsigned int *)(v466 & 0xFFFFFFFFFFFFFFF8);
    do
      v197 = __ldxr(v196);
    while (__stlxr(v197 - 2, v196));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v469[1]);
  v198 = &v587;
  while (2)
  {
    v199 = (uint64_t *)*(v198 - 1);
    if (v199 == v198 - 4)
    {
      v199 = v198 - 4;
      v200 = 4;
LABEL_233:
      (*(void (**)(void))(*v199 + 8 * v200))();
    }
    else if (v199)
    {
      v200 = 5;
      goto LABEL_233;
    }
    v202 = *(v198 - 5);
    v198 -= 5;
    v201 = v202;
    if ((v202 & 7) != 0)
    {
      v203 = (unsigned int *)(v201 & 0xFFFFFFFFFFFFFFF8);
      do
        v204 = __ldxr(v203);
      while (__stlxr(v204 - 2, v203));
    }
    if (v198 != &v584)
      continue;
    break;
  }
  if ((v467 & 7) != 0)
  {
    v205 = (unsigned int *)(v467 & 0xFFFFFFFFFFFFFFF8);
    do
      v206 = __ldxr(v205);
    while (__stlxr(v206 - 2, v205));
  }
  if ((v468 & 7) != 0)
  {
    v207 = (unsigned int *)(v468 & 0xFFFFFFFFFFFFFFF8);
    do
      v208 = __ldxr(v207);
    while (__stlxr(v208 - 2, v207));
  }
  if ((v470 & 7) != 0)
  {
    v209 = (unsigned int *)(v470 & 0xFFFFFFFFFFFFFFF8);
    do
      v210 = __ldxr(v209);
    while (__stlxr(v210 - 2, v209));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v472[1]);
  if (v589 == v588)
  {
    v211 = 4;
LABEL_251:
    (*(void (**)(void))(*v409 + 8 * v211))();
  }
  else if (v589)
  {
    v211 = 5;
    v409 = v589;
    goto LABEL_251;
  }
  if ((v587 & 7) != 0)
  {
    v212 = (unsigned int *)(v587 & 0xFFFFFFFFFFFFFFF8);
    do
      v213 = __ldxr(v212);
    while (__stlxr(v213 - 2, v212));
  }
  if ((v471 & 7) != 0)
  {
    v214 = (unsigned int *)(v471 & 0xFFFFFFFFFFFFFFF8);
    do
      v215 = __ldxr(v214);
    while (__stlxr(v215 - 2, v214));
  }
  if ((v473 & 7) != 0)
  {
    v216 = (unsigned int *)(v473 & 0xFFFFFFFFFFFFFFF8);
    do
      v217 = __ldxr(v216);
    while (__stlxr(v217 - 2, v216));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v475[1]);
  if (v592 == v591)
  {
    v218 = 4;
LABEL_265:
    (*(void (**)(void))(*v410 + 8 * v218))();
  }
  else if (v592)
  {
    v218 = 5;
    v410 = v592;
    goto LABEL_265;
  }
  if ((v590 & 7) != 0)
  {
    v219 = (unsigned int *)(v590 & 0xFFFFFFFFFFFFFFF8);
    do
      v220 = __ldxr(v219);
    while (__stlxr(v220 - 2, v219));
  }
  if ((v474 & 7) != 0)
  {
    v221 = (unsigned int *)(v474 & 0xFFFFFFFFFFFFFFF8);
    do
      v222 = __ldxr(v221);
    while (__stlxr(v222 - 2, v221));
  }
  if ((v476 & 7) != 0)
  {
    v223 = (unsigned int *)(v476 & 0xFFFFFFFFFFFFFFF8);
    do
      v224 = __ldxr(v223);
    while (__stlxr(v224 - 2, v223));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v480[1]);
  v225 = &v597;
  while (2)
  {
    v226 = (uint64_t *)*(v225 - 1);
    if (v226 == v225 - 4)
    {
      v226 = v225 - 4;
      v227 = 4;
LABEL_280:
      (*(void (**)(void))(*v226 + 8 * v227))();
    }
    else if (v226)
    {
      v227 = 5;
      goto LABEL_280;
    }
    v229 = *(v225 - 5);
    v225 -= 5;
    v228 = v229;
    if ((v229 & 7) != 0)
    {
      v230 = (unsigned int *)(v228 & 0xFFFFFFFFFFFFFFF8);
      do
        v231 = __ldxr(v230);
      while (__stlxr(v231 - 2, v230));
    }
    if (v225 != &v593)
      continue;
    break;
  }
  if ((v477 & 7) != 0)
  {
    v232 = (unsigned int *)(v477 & 0xFFFFFFFFFFFFFFF8);
    do
      v233 = __ldxr(v232);
    while (__stlxr(v233 - 2, v232));
  }
  if ((v478 & 7) != 0)
  {
    v234 = (unsigned int *)(v478 & 0xFFFFFFFFFFFFFFF8);
    do
      v235 = __ldxr(v234);
    while (__stlxr(v235 - 2, v234));
  }
  if ((v479 & 7) != 0)
  {
    v236 = (unsigned int *)(v479 & 0xFFFFFFFFFFFFFFF8);
    do
      v237 = __ldxr(v236);
    while (__stlxr(v237 - 2, v236));
  }
  if ((v481 & 7) != 0)
  {
    v238 = (unsigned int *)(v481 & 0xFFFFFFFFFFFFFFF8);
    do
      v239 = __ldxr(v238);
    while (__stlxr(v239 - 2, v238));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v485[1]);
  v240 = &v601;
  while (2)
  {
    v241 = (uint64_t *)*(v240 - 1);
    if (v241 == v240 - 4)
    {
      v241 = v240 - 4;
      v242 = 4;
LABEL_302:
      (*(void (**)(void))(*v241 + 8 * v242))();
    }
    else if (v241)
    {
      v242 = 5;
      goto LABEL_302;
    }
    v244 = *(v240 - 5);
    v240 -= 5;
    v243 = v244;
    if ((v244 & 7) != 0)
    {
      v245 = (unsigned int *)(v243 & 0xFFFFFFFFFFFFFFF8);
      do
        v246 = __ldxr(v245);
      while (__stlxr(v246 - 2, v245));
    }
    if (v240 != &v597)
      continue;
    break;
  }
  if ((v482 & 7) != 0)
  {
    v247 = (unsigned int *)(v482 & 0xFFFFFFFFFFFFFFF8);
    do
      v248 = __ldxr(v247);
    while (__stlxr(v248 - 2, v247));
  }
  if ((v483 & 7) != 0)
  {
    v249 = (unsigned int *)(v483 & 0xFFFFFFFFFFFFFFF8);
    do
      v250 = __ldxr(v249);
    while (__stlxr(v250 - 2, v249));
  }
  if ((v484 & 7) != 0)
  {
    v251 = (unsigned int *)(v484 & 0xFFFFFFFFFFFFFFF8);
    do
      v252 = __ldxr(v251);
    while (__stlxr(v252 - 2, v251));
  }
  if ((v486 & 7) != 0)
  {
    v253 = (unsigned int *)(v486 & 0xFFFFFFFFFFFFFFF8);
    do
      v254 = __ldxr(v253);
    while (__stlxr(v254 - 2, v253));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v488[1]);
  if (v603 == v602)
  {
    v255 = 4;
LABEL_323:
    (*(void (**)(void))(*v411 + 8 * v255))();
  }
  else if (v603)
  {
    v255 = 5;
    v411 = v603;
    goto LABEL_323;
  }
  if ((v601 & 7) != 0)
  {
    v256 = (unsigned int *)(v601 & 0xFFFFFFFFFFFFFFF8);
    do
      v257 = __ldxr(v256);
    while (__stlxr(v257 - 2, v256));
  }
  if ((v487 & 7) != 0)
  {
    v258 = (unsigned int *)(v487 & 0xFFFFFFFFFFFFFFF8);
    do
      v259 = __ldxr(v258);
    while (__stlxr(v259 - 2, v258));
  }
  if ((v489 & 7) != 0)
  {
    v260 = (unsigned int *)(v489 & 0xFFFFFFFFFFFFFFF8);
    do
      v261 = __ldxr(v260);
    while (__stlxr(v261 - 2, v260));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v491[1]);
  if (v606 == v605)
  {
    v262 = 4;
LABEL_337:
    (*(void (**)(void))(*v412 + 8 * v262))();
  }
  else if (v606)
  {
    v262 = 5;
    v412 = v606;
    goto LABEL_337;
  }
  if ((v604 & 7) != 0)
  {
    v263 = (unsigned int *)(v604 & 0xFFFFFFFFFFFFFFF8);
    do
      v264 = __ldxr(v263);
    while (__stlxr(v264 - 2, v263));
  }
  if ((v490 & 7) != 0)
  {
    v265 = (unsigned int *)(v490 & 0xFFFFFFFFFFFFFFF8);
    do
      v266 = __ldxr(v265);
    while (__stlxr(v266 - 2, v265));
  }
  if ((v492 & 7) != 0)
  {
    v267 = (unsigned int *)(v492 & 0xFFFFFFFFFFFFFFF8);
    do
      v268 = __ldxr(v267);
    while (__stlxr(v268 - 2, v267));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v494[1]);
  if (v609 == v608)
  {
    v269 = 4;
LABEL_351:
    (*(void (**)(void))(*v413 + 8 * v269))();
  }
  else if (v609)
  {
    v269 = 5;
    v413 = v609;
    goto LABEL_351;
  }
  if ((v607 & 7) != 0)
  {
    v270 = (unsigned int *)(v607 & 0xFFFFFFFFFFFFFFF8);
    do
      v271 = __ldxr(v270);
    while (__stlxr(v271 - 2, v270));
  }
  if ((v493 & 7) != 0)
  {
    v272 = (unsigned int *)(v493 & 0xFFFFFFFFFFFFFFF8);
    do
      v273 = __ldxr(v272);
    while (__stlxr(v273 - 2, v272));
  }
  if ((v495 & 7) != 0)
  {
    v274 = (unsigned int *)(v495 & 0xFFFFFFFFFFFFFFF8);
    do
      v275 = __ldxr(v274);
    while (__stlxr(v275 - 2, v274));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v497[1]);
  if (v612 == v611)
  {
    v276 = 4;
LABEL_365:
    (*(void (**)(void))(*v414 + 8 * v276))();
  }
  else if (v612)
  {
    v276 = 5;
    v414 = v612;
    goto LABEL_365;
  }
  if ((v610 & 7) != 0)
  {
    v277 = (unsigned int *)(v610 & 0xFFFFFFFFFFFFFFF8);
    do
      v278 = __ldxr(v277);
    while (__stlxr(v278 - 2, v277));
  }
  if ((v496 & 7) != 0)
  {
    v279 = (unsigned int *)(v496 & 0xFFFFFFFFFFFFFFF8);
    do
      v280 = __ldxr(v279);
    while (__stlxr(v280 - 2, v279));
  }
  if ((v498 & 7) != 0)
  {
    v281 = (unsigned int *)(v498 & 0xFFFFFFFFFFFFFFF8);
    do
      v282 = __ldxr(v281);
    while (__stlxr(v282 - 2, v281));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v500[1]);
  if (v615 == v614)
  {
    v283 = 4;
LABEL_379:
    (*(void (**)(void))(*v415 + 8 * v283))();
  }
  else if (v615)
  {
    v283 = 5;
    v415 = v615;
    goto LABEL_379;
  }
  if ((v613 & 7) != 0)
  {
    v284 = (unsigned int *)(v613 & 0xFFFFFFFFFFFFFFF8);
    do
      v285 = __ldxr(v284);
    while (__stlxr(v285 - 2, v284));
  }
  if ((v499 & 7) != 0)
  {
    v286 = (unsigned int *)(v499 & 0xFFFFFFFFFFFFFFF8);
    do
      v287 = __ldxr(v286);
    while (__stlxr(v287 - 2, v286));
  }
  if ((v501 & 7) != 0)
  {
    v288 = (unsigned int *)(v501 & 0xFFFFFFFFFFFFFFF8);
    do
      v289 = __ldxr(v288);
    while (__stlxr(v289 - 2, v288));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v503[1]);
  if (v618 == v617)
  {
    v290 = 4;
LABEL_393:
    (*(void (**)(void))(*v416 + 8 * v290))();
  }
  else if (v618)
  {
    v290 = 5;
    v416 = v618;
    goto LABEL_393;
  }
  if ((v616 & 7) != 0)
  {
    v291 = (unsigned int *)(v616 & 0xFFFFFFFFFFFFFFF8);
    do
      v292 = __ldxr(v291);
    while (__stlxr(v292 - 2, v291));
  }
  if ((v502 & 7) != 0)
  {
    v293 = (unsigned int *)(v502 & 0xFFFFFFFFFFFFFFF8);
    do
      v294 = __ldxr(v293);
    while (__stlxr(v294 - 2, v293));
  }
  if ((v504 & 7) != 0)
  {
    v295 = (unsigned int *)(v504 & 0xFFFFFFFFFFFFFFF8);
    do
      v296 = __ldxr(v295);
    while (__stlxr(v296 - 2, v295));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v507[1]);
  v297 = &v622;
  while (2)
  {
    v298 = (uint64_t *)*(v297 - 1);
    if (v298 == v297 - 4)
    {
      v298 = v297 - 4;
      v299 = 4;
LABEL_408:
      (*(void (**)(void))(*v298 + 8 * v299))();
    }
    else if (v298)
    {
      v299 = 5;
      goto LABEL_408;
    }
    v301 = *(v297 - 5);
    v297 -= 5;
    v300 = v301;
    if ((v301 & 7) != 0)
    {
      v302 = (unsigned int *)(v300 & 0xFFFFFFFFFFFFFFF8);
      do
        v303 = __ldxr(v302);
      while (__stlxr(v303 - 2, v302));
    }
    if (v297 != &v619)
      continue;
    break;
  }
  if ((v505 & 7) != 0)
  {
    v304 = (unsigned int *)(v505 & 0xFFFFFFFFFFFFFFF8);
    do
      v305 = __ldxr(v304);
    while (__stlxr(v305 - 2, v304));
  }
  if ((v506 & 7) != 0)
  {
    v306 = (unsigned int *)(v506 & 0xFFFFFFFFFFFFFFF8);
    do
      v307 = __ldxr(v306);
    while (__stlxr(v307 - 2, v306));
  }
  if ((v508 & 7) != 0)
  {
    v308 = (unsigned int *)(v508 & 0xFFFFFFFFFFFFFFF8);
    do
      v309 = __ldxr(v308);
    while (__stlxr(v309 - 2, v308));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v511[1]);
  v310 = &v625;
  while (2)
  {
    v311 = (uint64_t *)*(v310 - 1);
    if (v311 == v310 - 4)
    {
      v311 = v310 - 4;
      v312 = 4;
LABEL_427:
      (*(void (**)(void))(*v311 + 8 * v312))();
    }
    else if (v311)
    {
      v312 = 5;
      goto LABEL_427;
    }
    v314 = *(v310 - 5);
    v310 -= 5;
    v313 = v314;
    if ((v314 & 7) != 0)
    {
      v315 = (unsigned int *)(v313 & 0xFFFFFFFFFFFFFFF8);
      do
        v316 = __ldxr(v315);
      while (__stlxr(v316 - 2, v315));
    }
    if (v310 != &v622)
      continue;
    break;
  }
  if ((v509 & 7) != 0)
  {
    v317 = (unsigned int *)(v509 & 0xFFFFFFFFFFFFFFF8);
    do
      v318 = __ldxr(v317);
    while (__stlxr(v318 - 2, v317));
  }
  if ((v510 & 7) != 0)
  {
    v319 = (unsigned int *)(v510 & 0xFFFFFFFFFFFFFFF8);
    do
      v320 = __ldxr(v319);
    while (__stlxr(v320 - 2, v319));
  }
  if ((v512 & 7) != 0)
  {
    v321 = (unsigned int *)(v512 & 0xFFFFFFFFFFFFFFF8);
    do
      v322 = __ldxr(v321);
    while (__stlxr(v322 - 2, v321));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v515[1]);
  v323 = &v628;
  while (2)
  {
    v324 = (uint64_t *)*(v323 - 1);
    if (v324 == v323 - 4)
    {
      v324 = v323 - 4;
      v325 = 4;
LABEL_446:
      (*(void (**)(void))(*v324 + 8 * v325))();
    }
    else if (v324)
    {
      v325 = 5;
      goto LABEL_446;
    }
    v327 = *(v323 - 5);
    v323 -= 5;
    v326 = v327;
    if ((v327 & 7) != 0)
    {
      v328 = (unsigned int *)(v326 & 0xFFFFFFFFFFFFFFF8);
      do
        v329 = __ldxr(v328);
      while (__stlxr(v329 - 2, v328));
    }
    if (v323 != &v625)
      continue;
    break;
  }
  if ((v513 & 7) != 0)
  {
    v330 = (unsigned int *)(v513 & 0xFFFFFFFFFFFFFFF8);
    do
      v331 = __ldxr(v330);
    while (__stlxr(v331 - 2, v330));
  }
  if ((v514 & 7) != 0)
  {
    v332 = (unsigned int *)(v514 & 0xFFFFFFFFFFFFFFF8);
    do
      v333 = __ldxr(v332);
    while (__stlxr(v333 - 2, v332));
  }
  if ((v516 & 7) != 0)
  {
    v334 = (unsigned int *)(v516 & 0xFFFFFFFFFFFFFFF8);
    do
      v335 = __ldxr(v334);
    while (__stlxr(v335 - 2, v334));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v518[1]);
  if (v630 == v629)
  {
    v336 = 4;
LABEL_464:
    (*(void (**)(void))(*v417 + 8 * v336))();
  }
  else if (v630)
  {
    v336 = 5;
    v417 = v630;
    goto LABEL_464;
  }
  if ((v628 & 7) != 0)
  {
    v337 = (unsigned int *)(v628 & 0xFFFFFFFFFFFFFFF8);
    do
      v338 = __ldxr(v337);
    while (__stlxr(v338 - 2, v337));
  }
  if ((v517 & 7) != 0)
  {
    v339 = (unsigned int *)(v517 & 0xFFFFFFFFFFFFFFF8);
    do
      v340 = __ldxr(v339);
    while (__stlxr(v340 - 2, v339));
  }
  if ((v519 & 7) != 0)
  {
    v341 = (unsigned int *)(v519 & 0xFFFFFFFFFFFFFFF8);
    do
      v342 = __ldxr(v341);
    while (__stlxr(v342 - 2, v341));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v522[1]);
  v343 = &v634;
  while (2)
  {
    v344 = (uint64_t *)*(v343 - 1);
    if (v344 == v343 - 4)
    {
      v344 = v343 - 4;
      v345 = 4;
LABEL_479:
      (*(void (**)(void))(*v344 + 8 * v345))();
    }
    else if (v344)
    {
      v345 = 5;
      goto LABEL_479;
    }
    v347 = *(v343 - 5);
    v343 -= 5;
    v346 = v347;
    if ((v347 & 7) != 0)
    {
      v348 = (unsigned int *)(v346 & 0xFFFFFFFFFFFFFFF8);
      do
        v349 = __ldxr(v348);
      while (__stlxr(v349 - 2, v348));
    }
    if (v343 != &v631)
      continue;
    break;
  }
  if ((v520 & 7) != 0)
  {
    v350 = (unsigned int *)(v520 & 0xFFFFFFFFFFFFFFF8);
    do
      v351 = __ldxr(v350);
    while (__stlxr(v351 - 2, v350));
  }
  if ((v521 & 7) != 0)
  {
    v352 = (unsigned int *)(v521 & 0xFFFFFFFFFFFFFFF8);
    do
      v353 = __ldxr(v352);
    while (__stlxr(v353 - 2, v352));
  }
  if ((v523 & 7) != 0)
  {
    v354 = (unsigned int *)(v523 & 0xFFFFFFFFFFFFFFF8);
    do
      v355 = __ldxr(v354);
    while (__stlxr(v355 - 2, v354));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v528[1]);
  v356 = &v639;
  while (2)
  {
    v357 = (uint64_t *)*(v356 - 1);
    if (v357 == v356 - 4)
    {
      v357 = v356 - 4;
      v358 = 4;
LABEL_498:
      (*(void (**)(void))(*v357 + 8 * v358))();
    }
    else if (v357)
    {
      v358 = 5;
      goto LABEL_498;
    }
    v360 = *(v356 - 5);
    v356 -= 5;
    v359 = v360;
    if ((v360 & 7) != 0)
    {
      v361 = (unsigned int *)(v359 & 0xFFFFFFFFFFFFFFF8);
      do
        v362 = __ldxr(v361);
      while (__stlxr(v362 - 2, v361));
    }
    if (v356 != &v634)
      continue;
    break;
  }
  if ((v524 & 7) != 0)
  {
    v363 = (unsigned int *)(v524 & 0xFFFFFFFFFFFFFFF8);
    do
      v364 = __ldxr(v363);
    while (__stlxr(v364 - 2, v363));
  }
  if ((v525 & 7) != 0)
  {
    v365 = (unsigned int *)(v525 & 0xFFFFFFFFFFFFFFF8);
    do
      v366 = __ldxr(v365);
    while (__stlxr(v366 - 2, v365));
  }
  if ((v526 & 7) != 0)
  {
    v367 = (unsigned int *)(v526 & 0xFFFFFFFFFFFFFFF8);
    do
      v368 = __ldxr(v367);
    while (__stlxr(v368 - 2, v367));
  }
  if ((v527 & 7) != 0)
  {
    v369 = (unsigned int *)(v527 & 0xFFFFFFFFFFFFFFF8);
    do
      v370 = __ldxr(v369);
    while (__stlxr(v370 - 2, v369));
  }
  if ((v529 & 7) != 0)
  {
    v371 = (unsigned int *)(v529 & 0xFFFFFFFFFFFFFFF8);
    do
      v372 = __ldxr(v371);
    while (__stlxr(v372 - 2, v371));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v532[1]);
  v373 = &v642;
  while (2)
  {
    v374 = (uint64_t *)*(v373 - 1);
    if (v374 == v373 - 4)
    {
      v374 = v373 - 4;
      v375 = 4;
LABEL_523:
      (*(void (**)(void))(*v374 + 8 * v375))();
    }
    else if (v374)
    {
      v375 = 5;
      goto LABEL_523;
    }
    v377 = *(v373 - 5);
    v373 -= 5;
    v376 = v377;
    if ((v377 & 7) != 0)
    {
      v378 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
      do
        v379 = __ldxr(v378);
      while (__stlxr(v379 - 2, v378));
    }
    if (v373 != &v639)
      continue;
    break;
  }
  if ((v530 & 7) != 0)
  {
    v380 = (unsigned int *)(v530 & 0xFFFFFFFFFFFFFFF8);
    do
      v381 = __ldxr(v380);
    while (__stlxr(v381 - 2, v380));
  }
  if ((v531 & 7) != 0)
  {
    v382 = (unsigned int *)(v531 & 0xFFFFFFFFFFFFFFF8);
    do
      v383 = __ldxr(v382);
    while (__stlxr(v383 - 2, v382));
  }
  if ((v533 & 7) != 0)
  {
    v384 = (unsigned int *)(v533 & 0xFFFFFFFFFFFFFFF8);
    do
      v385 = __ldxr(v384);
    while (__stlxr(v385 - 2, v384));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v536[1]);
  v386 = &v645;
  while (2)
  {
    v387 = (uint64_t *)*(v386 - 1);
    if (v387 == v386 - 4)
    {
      v387 = v386 - 4;
      v388 = 4;
LABEL_542:
      (*(void (**)(void))(*v387 + 8 * v388))();
    }
    else if (v387)
    {
      v388 = 5;
      goto LABEL_542;
    }
    v390 = *(v386 - 5);
    v386 -= 5;
    v389 = v390;
    if ((v390 & 7) != 0)
    {
      v391 = (unsigned int *)(v389 & 0xFFFFFFFFFFFFFFF8);
      do
        v392 = __ldxr(v391);
      while (__stlxr(v392 - 2, v391));
    }
    if (v386 != &v642)
      continue;
    break;
  }
  if ((v534 & 7) != 0)
  {
    v393 = (unsigned int *)(v534 & 0xFFFFFFFFFFFFFFF8);
    do
      v394 = __ldxr(v393);
    while (__stlxr(v394 - 2, v393));
  }
  if ((v535 & 7) != 0)
  {
    v395 = (unsigned int *)(v535 & 0xFFFFFFFFFFFFFFF8);
    do
      v396 = __ldxr(v395);
    while (__stlxr(v396 - 2, v395));
  }
  if ((v537 & 7) != 0)
  {
    v397 = (unsigned int *)(v537 & 0xFFFFFFFFFFFFFFF8);
    do
      v398 = __ldxr(v397);
    while (__stlxr(v398 - 2, v397));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v539[1]);
  if (v647 == v646)
  {
    v399 = 4;
LABEL_560:
    (*(void (**)(void))(*v418 + 8 * v399))();
  }
  else if (v647)
  {
    v399 = 5;
    v418 = v647;
    goto LABEL_560;
  }
  if ((v645 & 7) != 0)
  {
    v400 = (unsigned int *)(v645 & 0xFFFFFFFFFFFFFFF8);
    do
      v401 = __ldxr(v400);
    while (__stlxr(v401 - 2, v400));
  }
  if ((v538 & 7) != 0)
  {
    v402 = (unsigned int *)(v538 & 0xFFFFFFFFFFFFFFF8);
    do
      v403 = __ldxr(v402);
    while (__stlxr(v403 - 2, v402));
  }
  if ((v540 & 7) != 0)
  {
    v404 = (unsigned int *)(v540 & 0xFFFFFFFFFFFFFFF8);
    do
      v405 = __ldxr(v404);
    while (__stlxr(v405 - 2, v404));
  }
}

void sub_230181464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,uint64_t a33,uint64_t a34,_QWORD *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_QWORD *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,_QWORD *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,_QWORD *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,_QWORD *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a64;
  uint64_t a66;
  uint64_t a67;
  _QWORD *a69;
  uint64_t a71;
  uint64_t a72;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unint64_t *v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unint64_t *v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  unint64_t *v169;
  unint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int *v180;
  unsigned int v181;
  unint64_t *v182;
  unint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int *v197;
  unsigned int v198;
  unint64_t *v199;
  unint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int *v208;
  unsigned int v209;
  unsigned int *v210;
  unsigned int v211;
  unint64_t *v212;
  unint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  uint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int *v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int *v237;
  unsigned int v238;
  unint64_t *v239;
  unint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  unsigned int *v246;
  unsigned int v247;
  unsigned int *v248;
  unsigned int v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int *v252;
  unsigned int v253;
  unint64_t *v254;
  unint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int *v259;
  unsigned int v260;
  unsigned int *v261;
  unsigned int v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int *v265;
  unsigned int v266;
  unsigned int *v267;
  unsigned int v268;
  uint64_t v269;
  unsigned int *v270;
  unsigned int v271;
  unsigned int *v272;
  unsigned int v273;
  unsigned int *v274;
  unsigned int v275;
  uint64_t v276;
  unsigned int *v277;
  unsigned int v278;
  unsigned int *v279;
  unsigned int v280;
  unsigned int *v281;
  unsigned int v282;
  uint64_t v283;
  unsigned int *v284;
  unsigned int v285;
  unsigned int *v286;
  unsigned int v287;
  unsigned int *v288;
  unsigned int v289;
  uint64_t v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int *v293;
  unsigned int v294;
  unsigned int *v295;
  unsigned int v296;
  uint64_t v297;
  unsigned int *v298;
  unsigned int v299;
  unsigned int *v300;
  unsigned int v301;
  unsigned int *v302;
  unsigned int v303;
  uint64_t v304;
  unsigned int *v305;
  unsigned int v306;
  unsigned int *v307;
  unsigned int v308;
  unsigned int *v309;
  unsigned int v310;
  unint64_t *v311;
  unint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int *v316;
  unsigned int v317;
  unsigned int *v318;
  unsigned int v319;
  unsigned int *v320;
  unsigned int v321;
  unsigned int *v322;
  unsigned int v323;
  unint64_t *v324;
  unint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int *v329;
  unsigned int v330;
  unsigned int *v331;
  unsigned int v332;
  unsigned int *v333;
  unsigned int v334;
  unsigned int *v335;
  unsigned int v336;
  unint64_t *v337;
  unint64_t *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int *v342;
  unsigned int v343;
  unsigned int *v344;
  unsigned int v345;
  unsigned int *v346;
  unsigned int v347;
  unsigned int *v348;
  unsigned int v349;
  uint64_t v350;
  unsigned int *v351;
  unsigned int v352;
  unsigned int *v353;
  unsigned int v354;
  unsigned int *v355;
  unsigned int v356;
  unint64_t *v357;
  unint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int *v362;
  unsigned int v363;
  unsigned int *v364;
  unsigned int v365;
  unsigned int *v366;
  unsigned int v367;
  unsigned int *v368;
  unsigned int v369;
  unint64_t *v370;
  unint64_t *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int *v375;
  unsigned int v376;
  unsigned int *v377;
  unsigned int v378;
  unsigned int *v379;
  unsigned int v380;
  unsigned int *v381;
  unsigned int v382;
  unsigned int *v383;
  unsigned int v384;
  unsigned int *v385;
  unsigned int v386;
  unint64_t *v387;
  unint64_t *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unsigned int *v392;
  unsigned int v393;
  unsigned int *v394;
  unsigned int v395;
  unsigned int *v396;
  unsigned int v397;
  unsigned int *v398;
  unsigned int v399;
  unint64_t *v400;
  unint64_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unsigned int *v405;
  unsigned int v406;
  unsigned int *v407;
  unsigned int v408;
  unsigned int *v409;
  unsigned int v410;
  unsigned int *v411;
  unsigned int v412;
  uint64_t v413;
  unsigned int *v414;
  unsigned int v415;
  unsigned int *v416;
  unsigned int v417;
  unsigned int *v418;
  unsigned int v419;

  v78 = v72 + 1056;
  do
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*(_QWORD **)(v78 - 16));
    v80 = *(_QWORD *)(v78 - 32);
    v78 -= 32;
    v79 = v80;
    if ((v80 & 7) != 0)
    {
      v81 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
      do
        v82 = __ldxr(v81);
      while (__stlxr(v82 - 2, v81));
    }
  }
  while (v78 != v72);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a35);
  if ((_QWORD *)STACK[0x6C0] == v77)
  {
    v83 = 4;
  }
  else
  {
    if (!STACK[0x6C0])
    {
LABEL_11:
      if ((STACK[0x6A0] & 7) != 0)
      {
        v84 = (unsigned int *)(STACK[0x6A0] & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((a33 & 7) != 0)
      {
        v86 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((a37 & 7) != 0)
      {
        v88 = (unsigned int *)(a37 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a42);
      v90 = &STACK[0x740];
      while (1)
      {
        v91 = (unint64_t *)*(v90 - 1);
        if (v91 == v90 - 4)
          break;
        if (v91)
        {
          v92 = 5;
LABEL_25:
          (*(void (**)(void))(*v91 + 8 * v92))();
        }
        v94 = *(v90 - 5);
        v90 -= 5;
        v93 = v94;
        if ((v94 & 7) != 0)
        {
          v95 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
          do
            v96 = __ldxr(v95);
          while (__stlxr(v96 - 2, v95));
        }
        if (v90 == &STACK[0x6C8])
        {
          if ((a38 & 7) != 0)
          {
            v97 = (unsigned int *)(a38 & 0xFFFFFFFFFFFFFFF8);
            do
              v98 = __ldxr(v97);
            while (__stlxr(v98 - 2, v97));
          }
          if ((a39 & 7) != 0)
          {
            v99 = (unsigned int *)(a39 & 0xFFFFFFFFFFFFFFF8);
            do
              v100 = __ldxr(v99);
            while (__stlxr(v100 - 2, v99));
          }
          if ((a40 & 7) != 0)
          {
            v101 = (unsigned int *)(a40 & 0xFFFFFFFFFFFFFFF8);
            do
              v102 = __ldxr(v101);
            while (__stlxr(v102 - 2, v101));
          }
          if ((a44 & 7) != 0)
          {
            v103 = (unsigned int *)(a44 & 0xFFFFFFFFFFFFFFF8);
            do
              v104 = __ldxr(v103);
            while (__stlxr(v104 - 2, v103));
          }
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a49);
          v105 = &STACK[0x7B8];
          while (1)
          {
            v106 = (unint64_t *)*(v105 - 1);
            if (v106 == v105 - 4)
              break;
            if (v106)
            {
              v107 = 5;
LABEL_47:
              (*(void (**)(void))(*v106 + 8 * v107))();
            }
            v109 = *(v105 - 5);
            v105 -= 5;
            v108 = v109;
            if ((v109 & 7) != 0)
            {
              v110 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
              do
                v111 = __ldxr(v110);
              while (__stlxr(v111 - 2, v110));
            }
            if (v105 == &STACK[0x740])
            {
              if ((a45 & 7) != 0)
              {
                v112 = (unsigned int *)(a45 & 0xFFFFFFFFFFFFFFF8);
                do
                  v113 = __ldxr(v112);
                while (__stlxr(v113 - 2, v112));
              }
              if ((a46 & 7) != 0)
              {
                v114 = (unsigned int *)(a46 & 0xFFFFFFFFFFFFFFF8);
                do
                  v115 = __ldxr(v114);
                while (__stlxr(v115 - 2, v114));
              }
              if ((a47 & 7) != 0)
              {
                v116 = (unsigned int *)(a47 & 0xFFFFFFFFFFFFFFF8);
                do
                  v117 = __ldxr(v116);
                while (__stlxr(v117 - 2, v116));
              }
              if ((a51 & 7) != 0)
              {
                v118 = (unsigned int *)(a51 & 0xFFFFFFFFFFFFFFF8);
                do
                  v119 = __ldxr(v118);
                while (__stlxr(v119 - 2, v118));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a54);
              if ((_QWORD *)STACK[0x7D8] == v76)
              {
                v120 = 4;
                goto LABEL_68;
              }
              if (STACK[0x7D8])
              {
                v120 = 5;
                v76 = (_QWORD *)STACK[0x7D8];
LABEL_68:
                (*(void (**)(_QWORD *))(*v76 + 8 * v120))(v76);
              }
              if ((STACK[0x7B8] & 7) != 0)
              {
                v121 = (unsigned int *)(STACK[0x7B8] & 0xFFFFFFFFFFFFFFF8);
                do
                  v122 = __ldxr(v121);
                while (__stlxr(v122 - 2, v121));
              }
              if ((a52 & 7) != 0)
              {
                v123 = (unsigned int *)(a52 & 0xFFFFFFFFFFFFFFF8);
                do
                  v124 = __ldxr(v123);
                while (__stlxr(v124 - 2, v123));
              }
              if ((a56 & 7) != 0)
              {
                v125 = (unsigned int *)(a56 & 0xFFFFFFFFFFFFFFF8);
                do
                  v126 = __ldxr(v125);
                while (__stlxr(v126 - 2, v125));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a59);
              if ((_QWORD *)STACK[0x800] == v75)
              {
                v127 = 4;
                goto LABEL_82;
              }
              if (STACK[0x800])
              {
                v127 = 5;
                v75 = (_QWORD *)STACK[0x800];
LABEL_82:
                (*(void (**)(_QWORD *))(*v75 + 8 * v127))(v75);
              }
              if ((STACK[0x7E0] & 7) != 0)
              {
                v128 = (unsigned int *)(STACK[0x7E0] & 0xFFFFFFFFFFFFFFF8);
                do
                  v129 = __ldxr(v128);
                while (__stlxr(v129 - 2, v128));
              }
              if ((a57 & 7) != 0)
              {
                v130 = (unsigned int *)(a57 & 0xFFFFFFFFFFFFFFF8);
                do
                  v131 = __ldxr(v130);
                while (__stlxr(v131 - 2, v130));
              }
              if ((a61 & 7) != 0)
              {
                v132 = (unsigned int *)(a61 & 0xFFFFFFFFFFFFFFF8);
                do
                  v133 = __ldxr(v132);
                while (__stlxr(v133 - 2, v132));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a64);
              if ((_QWORD *)STACK[0x828] == v74)
              {
                v134 = 4;
                goto LABEL_96;
              }
              if (STACK[0x828])
              {
                v134 = 5;
                v74 = (_QWORD *)STACK[0x828];
LABEL_96:
                (*(void (**)(_QWORD *))(*v74 + 8 * v134))(v74);
              }
              if ((STACK[0x808] & 7) != 0)
              {
                v135 = (unsigned int *)(STACK[0x808] & 0xFFFFFFFFFFFFFFF8);
                do
                  v136 = __ldxr(v135);
                while (__stlxr(v136 - 2, v135));
              }
              if ((a62 & 7) != 0)
              {
                v137 = (unsigned int *)(a62 & 0xFFFFFFFFFFFFFFF8);
                do
                  v138 = __ldxr(v137);
                while (__stlxr(v138 - 2, v137));
              }
              if ((a66 & 7) != 0)
              {
                v139 = (unsigned int *)(a66 & 0xFFFFFFFFFFFFFFF8);
                do
                  v140 = __ldxr(v139);
                while (__stlxr(v140 - 2, v139));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a69);
              if ((_QWORD *)STACK[0x850] == v73)
              {
                v141 = 4;
                goto LABEL_110;
              }
              if (STACK[0x850])
              {
                v141 = 5;
                v73 = (_QWORD *)STACK[0x850];
LABEL_110:
                (*(void (**)(_QWORD *))(*v73 + 8 * v141))(v73);
              }
              if ((STACK[0x830] & 7) != 0)
              {
                v142 = (unsigned int *)(STACK[0x830] & 0xFFFFFFFFFFFFFFF8);
                do
                  v143 = __ldxr(v142);
                while (__stlxr(v143 - 2, v142));
              }
              if ((a67 & 7) != 0)
              {
                v144 = (unsigned int *)(a67 & 0xFFFFFFFFFFFFFFF8);
                do
                  v145 = __ldxr(v144);
                while (__stlxr(v145 - 2, v144));
              }
              if ((a71 & 7) != 0)
              {
                v146 = (unsigned int *)(a71 & 0xFFFFFFFFFFFFFFF8);
                do
                  v147 = __ldxr(v146);
                while (__stlxr(v147 - 2, v146));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x208]);
              if ((_QWORD *)STACK[0x878] == a20)
              {
                v148 = 4;
                goto LABEL_124;
              }
              if (STACK[0x878])
              {
                v148 = 5;
                a20 = (_QWORD *)STACK[0x878];
LABEL_124:
                (*(void (**)(void))(*a20 + 8 * v148))();
              }
              if ((STACK[0x858] & 7) != 0)
              {
                v149 = (unsigned int *)(STACK[0x858] & 0xFFFFFFFFFFFFFFF8);
                do
                  v150 = __ldxr(v149);
                while (__stlxr(v150 - 2, v149));
              }
              if ((a72 & 7) != 0)
              {
                v151 = (unsigned int *)(a72 & 0xFFFFFFFFFFFFFFF8);
                do
                  v152 = __ldxr(v151);
                while (__stlxr(v152 - 2, v151));
              }
              if ((STACK[0x218] & 7) != 0)
              {
                v153 = (unsigned int *)(STACK[0x218] & 0xFFFFFFFFFFFFFFF8);
                do
                  v154 = __ldxr(v153);
                while (__stlxr(v154 - 2, v153));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x230]);
              if ((_QWORD *)STACK[0x8A0] == a21)
              {
                v155 = 4;
                goto LABEL_138;
              }
              if (STACK[0x8A0])
              {
                v155 = 5;
                a21 = (_QWORD *)STACK[0x8A0];
LABEL_138:
                (*(void (**)(void))(*a21 + 8 * v155))();
              }
              if ((STACK[0x880] & 7) != 0)
              {
                v156 = (unsigned int *)(STACK[0x880] & 0xFFFFFFFFFFFFFFF8);
                do
                  v157 = __ldxr(v156);
                while (__stlxr(v157 - 2, v156));
              }
              if ((STACK[0x220] & 7) != 0)
              {
                v158 = (unsigned int *)(STACK[0x220] & 0xFFFFFFFFFFFFFFF8);
                do
                  v159 = __ldxr(v158);
                while (__stlxr(v159 - 2, v158));
              }
              if ((STACK[0x240] & 7) != 0)
              {
                v160 = (unsigned int *)(STACK[0x240] & 0xFFFFFFFFFFFFFFF8);
                do
                  v161 = __ldxr(v160);
                while (__stlxr(v161 - 2, v160));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x258]);
              if ((_QWORD *)STACK[0x8C8] == a22)
              {
                v162 = 4;
                goto LABEL_152;
              }
              if (STACK[0x8C8])
              {
                v162 = 5;
                a22 = (_QWORD *)STACK[0x8C8];
LABEL_152:
                (*(void (**)(void))(*a22 + 8 * v162))();
              }
              if ((STACK[0x8A8] & 7) != 0)
              {
                v163 = (unsigned int *)(STACK[0x8A8] & 0xFFFFFFFFFFFFFFF8);
                do
                  v164 = __ldxr(v163);
                while (__stlxr(v164 - 2, v163));
              }
              if ((STACK[0x248] & 7) != 0)
              {
                v165 = (unsigned int *)(STACK[0x248] & 0xFFFFFFFFFFFFFFF8);
                do
                  v166 = __ldxr(v165);
                while (__stlxr(v166 - 2, v165));
              }
              if ((STACK[0x268] & 7) != 0)
              {
                v167 = (unsigned int *)(STACK[0x268] & 0xFFFFFFFFFFFFFFF8);
                do
                  v168 = __ldxr(v167);
                while (__stlxr(v168 - 2, v167));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x288]);
              v169 = &STACK[0x920];
              while (2)
              {
                v170 = (unint64_t *)*(v169 - 1);
                if (v170 == v169 - 4)
                {
                  v170 = v169 - 4;
                  v171 = 4;
LABEL_167:
                  (*(void (**)(void))(*v170 + 8 * v171))();
                }
                else if (v170)
                {
                  v171 = 5;
                  goto LABEL_167;
                }
                v173 = *(v169 - 5);
                v169 -= 5;
                v172 = v173;
                if ((v173 & 7) != 0)
                {
                  v174 = (unsigned int *)(v172 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v175 = __ldxr(v174);
                  while (__stlxr(v175 - 2, v174));
                }
                if (v169 != &STACK[0x8D0])
                  continue;
                break;
              }
              if ((STACK[0x270] & 7) != 0)
              {
                v176 = (unsigned int *)(STACK[0x270] & 0xFFFFFFFFFFFFFFF8);
                do
                  v177 = __ldxr(v176);
                while (__stlxr(v177 - 2, v176));
              }
              if ((STACK[0x278] & 7) != 0)
              {
                v178 = (unsigned int *)(STACK[0x278] & 0xFFFFFFFFFFFFFFF8);
                do
                  v179 = __ldxr(v178);
                while (__stlxr(v179 - 2, v178));
              }
              if ((STACK[0x298] & 7) != 0)
              {
                v180 = (unsigned int *)(STACK[0x298] & 0xFFFFFFFFFFFFFFF8);
                do
                  v181 = __ldxr(v180);
                while (__stlxr(v181 - 2, v180));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x2C8]);
              v182 = &STACK[0x9C0];
              while (2)
              {
                v183 = (unint64_t *)*(v182 - 1);
                if (v183 == v182 - 4)
                {
                  v183 = v182 - 4;
                  v184 = 4;
LABEL_186:
                  (*(void (**)(void))(*v183 + 8 * v184))();
                }
                else if (v183)
                {
                  v184 = 5;
                  goto LABEL_186;
                }
                v186 = *(v182 - 5);
                v182 -= 5;
                v185 = v186;
                if ((v186 & 7) != 0)
                {
                  v187 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v188 = __ldxr(v187);
                  while (__stlxr(v188 - 2, v187));
                }
                if (v182 == &STACK[0x920])
                {
                  if ((STACK[0x2A0] & 7) != 0)
                  {
                    v189 = (unsigned int *)(STACK[0x2A0] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v190 = __ldxr(v189);
                    while (__stlxr(v190 - 2, v189));
                  }
                  if ((STACK[0x2A8] & 7) != 0)
                  {
                    v191 = (unsigned int *)(STACK[0x2A8] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v192 = __ldxr(v191);
                    while (__stlxr(v192 - 2, v191));
                  }
                  if ((STACK[0x2B0] & 7) != 0)
                  {
                    v193 = (unsigned int *)(STACK[0x2B0] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v194 = __ldxr(v193);
                    while (__stlxr(v194 - 2, v193));
                  }
                  if ((STACK[0x2B8] & 7) != 0)
                  {
                    v195 = (unsigned int *)(STACK[0x2B8] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v196 = __ldxr(v195);
                    while (__stlxr(v196 - 2, v195));
                  }
                  if ((STACK[0x2D8] & 7) != 0)
                  {
                    v197 = (unsigned int *)(STACK[0x2D8] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v198 = __ldxr(v197);
                    while (__stlxr(v198 - 2, v197));
                  }
                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x2F8]);
                  v199 = &STACK[0xA10];
                  while (2)
                  {
                    v200 = (unint64_t *)*(v199 - 1);
                    if (v200 == v199 - 4)
                    {
                      v200 = v199 - 4;
                      v201 = 4;
LABEL_211:
                      (*(void (**)(void))(*v200 + 8 * v201))();
                    }
                    else if (v200)
                    {
                      v201 = 5;
                      goto LABEL_211;
                    }
                    v203 = *(v199 - 5);
                    v199 -= 5;
                    v202 = v203;
                    if ((v203 & 7) != 0)
                    {
                      v204 = (unsigned int *)(v202 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v205 = __ldxr(v204);
                      while (__stlxr(v205 - 2, v204));
                    }
                    if (v199 != &STACK[0x9C0])
                      continue;
                    break;
                  }
                  if ((STACK[0x2E0] & 7) != 0)
                  {
                    v206 = (unsigned int *)(STACK[0x2E0] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v207 = __ldxr(v206);
                    while (__stlxr(v207 - 2, v206));
                  }
                  if ((STACK[0x2E8] & 7) != 0)
                  {
                    v208 = (unsigned int *)(STACK[0x2E8] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v209 = __ldxr(v208);
                    while (__stlxr(v209 - 2, v208));
                  }
                  if ((STACK[0x308] & 7) != 0)
                  {
                    v210 = (unsigned int *)(STACK[0x308] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v211 = __ldxr(v210);
                    while (__stlxr(v211 - 2, v210));
                  }
                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x328]);
                  v212 = &STACK[0xA60];
                  while (2)
                  {
                    v213 = (unint64_t *)*(v212 - 1);
                    if (v213 == v212 - 4)
                    {
                      v213 = v212 - 4;
                      v214 = 4;
LABEL_230:
                      (*(void (**)(void))(*v213 + 8 * v214))();
                    }
                    else if (v213)
                    {
                      v214 = 5;
                      goto LABEL_230;
                    }
                    v216 = *(v212 - 5);
                    v212 -= 5;
                    v215 = v216;
                    if ((v216 & 7) != 0)
                    {
                      v217 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v218 = __ldxr(v217);
                      while (__stlxr(v218 - 2, v217));
                    }
                    if (v212 == &STACK[0xA10])
                    {
                      if ((STACK[0x310] & 7) != 0)
                      {
                        v219 = (unsigned int *)(STACK[0x310] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v220 = __ldxr(v219);
                        while (__stlxr(v220 - 2, v219));
                      }
                      if ((STACK[0x318] & 7) != 0)
                      {
                        v221 = (unsigned int *)(STACK[0x318] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v222 = __ldxr(v221);
                        while (__stlxr(v222 - 2, v221));
                      }
                      if ((STACK[0x338] & 7) != 0)
                      {
                        v223 = (unsigned int *)(STACK[0x338] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v224 = __ldxr(v223);
                        while (__stlxr(v224 - 2, v223));
                      }
                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x350]);
                      if ((_QWORD *)STACK[0xA80] == a23)
                      {
                        v225 = 4;
                        goto LABEL_248;
                      }
                      if (STACK[0xA80])
                      {
                        v225 = 5;
                        a23 = (_QWORD *)STACK[0xA80];
LABEL_248:
                        (*(void (**)(void))(*a23 + 8 * v225))();
                      }
                      if ((STACK[0xA60] & 7) != 0)
                      {
                        v226 = (unsigned int *)(STACK[0xA60] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v227 = __ldxr(v226);
                        while (__stlxr(v227 - 2, v226));
                      }
                      if ((STACK[0x340] & 7) != 0)
                      {
                        v228 = (unsigned int *)(STACK[0x340] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v229 = __ldxr(v228);
                        while (__stlxr(v229 - 2, v228));
                      }
                      if ((STACK[0x360] & 7) != 0)
                      {
                        v230 = (unsigned int *)(STACK[0x360] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v231 = __ldxr(v230);
                        while (__stlxr(v231 - 2, v230));
                      }
                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x378]);
                      if ((_QWORD *)STACK[0xAA8] == a24)
                      {
                        v232 = 4;
                        goto LABEL_262;
                      }
                      if (STACK[0xAA8])
                      {
                        v232 = 5;
                        a24 = (_QWORD *)STACK[0xAA8];
LABEL_262:
                        (*(void (**)(void))(*a24 + 8 * v232))();
                      }
                      if ((STACK[0xA88] & 7) != 0)
                      {
                        v233 = (unsigned int *)(STACK[0xA88] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v234 = __ldxr(v233);
                        while (__stlxr(v234 - 2, v233));
                      }
                      if ((STACK[0x368] & 7) != 0)
                      {
                        v235 = (unsigned int *)(STACK[0x368] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v236 = __ldxr(v235);
                        while (__stlxr(v236 - 2, v235));
                      }
                      if ((STACK[0x388] & 7) != 0)
                      {
                        v237 = (unsigned int *)(STACK[0x388] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v238 = __ldxr(v237);
                        while (__stlxr(v238 - 2, v237));
                      }
                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x3B0]);
                      v239 = &STACK[0xB28];
                      while (2)
                      {
                        v240 = (unint64_t *)*(v239 - 1);
                        if (v240 == v239 - 4)
                        {
                          v240 = v239 - 4;
                          v241 = 4;
LABEL_277:
                          (*(void (**)(void))(*v240 + 8 * v241))();
                        }
                        else if (v240)
                        {
                          v241 = 5;
                          goto LABEL_277;
                        }
                        v243 = *(v239 - 5);
                        v239 -= 5;
                        v242 = v243;
                        if ((v243 & 7) != 0)
                        {
                          v244 = (unsigned int *)(v242 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v245 = __ldxr(v244);
                          while (__stlxr(v245 - 2, v244));
                        }
                        if (v239 != &STACK[0xAB0])
                          continue;
                        break;
                      }
                      if ((STACK[0x390] & 7) != 0)
                      {
                        v246 = (unsigned int *)(STACK[0x390] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v247 = __ldxr(v246);
                        while (__stlxr(v247 - 2, v246));
                      }
                      if ((STACK[0x398] & 7) != 0)
                      {
                        v248 = (unsigned int *)(STACK[0x398] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v249 = __ldxr(v248);
                        while (__stlxr(v249 - 2, v248));
                      }
                      if ((STACK[0x3A0] & 7) != 0)
                      {
                        v250 = (unsigned int *)(STACK[0x3A0] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v251 = __ldxr(v250);
                        while (__stlxr(v251 - 2, v250));
                      }
                      if ((STACK[0x3C0] & 7) != 0)
                      {
                        v252 = (unsigned int *)(STACK[0x3C0] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v253 = __ldxr(v252);
                        while (__stlxr(v253 - 2, v252));
                      }
                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x3E8]);
                      v254 = &STACK[0xBA0];
                      while (2)
                      {
                        v255 = (unint64_t *)*(v254 - 1);
                        if (v255 == v254 - 4)
                        {
                          v255 = v254 - 4;
                          v256 = 4;
LABEL_299:
                          (*(void (**)(void))(*v255 + 8 * v256))();
                        }
                        else if (v255)
                        {
                          v256 = 5;
                          goto LABEL_299;
                        }
                        v258 = *(v254 - 5);
                        v254 -= 5;
                        v257 = v258;
                        if ((v258 & 7) != 0)
                        {
                          v259 = (unsigned int *)(v257 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v260 = __ldxr(v259);
                          while (__stlxr(v260 - 2, v259));
                        }
                        if (v254 == &STACK[0xB28])
                        {
                          if ((STACK[0x3C8] & 7) != 0)
                          {
                            v261 = (unsigned int *)(STACK[0x3C8] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v262 = __ldxr(v261);
                            while (__stlxr(v262 - 2, v261));
                          }
                          if ((STACK[0x3D0] & 7) != 0)
                          {
                            v263 = (unsigned int *)(STACK[0x3D0] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v264 = __ldxr(v263);
                            while (__stlxr(v264 - 2, v263));
                          }
                          if ((STACK[0x3D8] & 7) != 0)
                          {
                            v265 = (unsigned int *)(STACK[0x3D8] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v266 = __ldxr(v265);
                            while (__stlxr(v266 - 2, v265));
                          }
                          if ((STACK[0x3F8] & 7) != 0)
                          {
                            v267 = (unsigned int *)(STACK[0x3F8] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v268 = __ldxr(v267);
                            while (__stlxr(v268 - 2, v267));
                          }
                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x410]);
                          if ((_QWORD *)STACK[0xBC0] == a25)
                          {
                            v269 = 4;
                            goto LABEL_320;
                          }
                          if (STACK[0xBC0])
                          {
                            v269 = 5;
                            a25 = (_QWORD *)STACK[0xBC0];
LABEL_320:
                            (*(void (**)(void))(*a25 + 8 * v269))();
                          }
                          if ((STACK[0xBA0] & 7) != 0)
                          {
                            v270 = (unsigned int *)(STACK[0xBA0] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v271 = __ldxr(v270);
                            while (__stlxr(v271 - 2, v270));
                          }
                          if ((STACK[0x400] & 7) != 0)
                          {
                            v272 = (unsigned int *)(STACK[0x400] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v273 = __ldxr(v272);
                            while (__stlxr(v273 - 2, v272));
                          }
                          if ((STACK[0x420] & 7) != 0)
                          {
                            v274 = (unsigned int *)(STACK[0x420] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v275 = __ldxr(v274);
                            while (__stlxr(v275 - 2, v274));
                          }
                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x438]);
                          if ((_QWORD *)STACK[0xBE8] == a26)
                          {
                            v276 = 4;
                            goto LABEL_334;
                          }
                          if (STACK[0xBE8])
                          {
                            v276 = 5;
                            a26 = (_QWORD *)STACK[0xBE8];
LABEL_334:
                            (*(void (**)(void))(*a26 + 8 * v276))();
                          }
                          if ((STACK[0xBC8] & 7) != 0)
                          {
                            v277 = (unsigned int *)(STACK[0xBC8] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v278 = __ldxr(v277);
                            while (__stlxr(v278 - 2, v277));
                          }
                          if ((STACK[0x428] & 7) != 0)
                          {
                            v279 = (unsigned int *)(STACK[0x428] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v280 = __ldxr(v279);
                            while (__stlxr(v280 - 2, v279));
                          }
                          if ((STACK[0x448] & 7) != 0)
                          {
                            v281 = (unsigned int *)(STACK[0x448] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v282 = __ldxr(v281);
                            while (__stlxr(v282 - 2, v281));
                          }
                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x460]);
                          if ((_QWORD *)STACK[0xC10] == a27)
                          {
                            v283 = 4;
                            goto LABEL_348;
                          }
                          if (STACK[0xC10])
                          {
                            v283 = 5;
                            a27 = (_QWORD *)STACK[0xC10];
LABEL_348:
                            (*(void (**)(void))(*a27 + 8 * v283))();
                          }
                          if ((STACK[0xBF0] & 7) != 0)
                          {
                            v284 = (unsigned int *)(STACK[0xBF0] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v285 = __ldxr(v284);
                            while (__stlxr(v285 - 2, v284));
                          }
                          if ((STACK[0x450] & 7) != 0)
                          {
                            v286 = (unsigned int *)(STACK[0x450] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v287 = __ldxr(v286);
                            while (__stlxr(v287 - 2, v286));
                          }
                          if ((STACK[0x470] & 7) != 0)
                          {
                            v288 = (unsigned int *)(STACK[0x470] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v289 = __ldxr(v288);
                            while (__stlxr(v289 - 2, v288));
                          }
                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x488]);
                          if ((_QWORD *)STACK[0xC38] == a28)
                          {
                            v290 = 4;
                            goto LABEL_362;
                          }
                          if (STACK[0xC38])
                          {
                            v290 = 5;
                            a28 = (_QWORD *)STACK[0xC38];
LABEL_362:
                            (*(void (**)(void))(*a28 + 8 * v290))();
                          }
                          if ((STACK[0xC18] & 7) != 0)
                          {
                            v291 = (unsigned int *)(STACK[0xC18] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v292 = __ldxr(v291);
                            while (__stlxr(v292 - 2, v291));
                          }
                          if ((STACK[0x478] & 7) != 0)
                          {
                            v293 = (unsigned int *)(STACK[0x478] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v294 = __ldxr(v293);
                            while (__stlxr(v294 - 2, v293));
                          }
                          if ((STACK[0x498] & 7) != 0)
                          {
                            v295 = (unsigned int *)(STACK[0x498] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v296 = __ldxr(v295);
                            while (__stlxr(v296 - 2, v295));
                          }
                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x4B0]);
                          if ((_QWORD *)STACK[0xC60] == a29)
                          {
                            v297 = 4;
                            goto LABEL_376;
                          }
                          if (STACK[0xC60])
                          {
                            v297 = 5;
                            a29 = (_QWORD *)STACK[0xC60];
LABEL_376:
                            (*(void (**)(void))(*a29 + 8 * v297))();
                          }
                          if ((STACK[0xC40] & 7) != 0)
                          {
                            v298 = (unsigned int *)(STACK[0xC40] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v299 = __ldxr(v298);
                            while (__stlxr(v299 - 2, v298));
                          }
                          if ((STACK[0x4A0] & 7) != 0)
                          {
                            v300 = (unsigned int *)(STACK[0x4A0] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v301 = __ldxr(v300);
                            while (__stlxr(v301 - 2, v300));
                          }
                          if ((STACK[0x4C0] & 7) != 0)
                          {
                            v302 = (unsigned int *)(STACK[0x4C0] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v303 = __ldxr(v302);
                            while (__stlxr(v303 - 2, v302));
                          }
                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x4D8]);
                          if ((_QWORD *)STACK[0xC88] == a30)
                          {
                            v304 = 4;
                            goto LABEL_390;
                          }
                          if (STACK[0xC88])
                          {
                            v304 = 5;
                            a30 = (_QWORD *)STACK[0xC88];
LABEL_390:
                            (*(void (**)(void))(*a30 + 8 * v304))();
                          }
                          if ((STACK[0xC68] & 7) != 0)
                          {
                            v305 = (unsigned int *)(STACK[0xC68] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v306 = __ldxr(v305);
                            while (__stlxr(v306 - 2, v305));
                          }
                          if ((STACK[0x4C8] & 7) != 0)
                          {
                            v307 = (unsigned int *)(STACK[0x4C8] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v308 = __ldxr(v307);
                            while (__stlxr(v308 - 2, v307));
                          }
                          if ((STACK[0x4E8] & 7) != 0)
                          {
                            v309 = (unsigned int *)(STACK[0x4E8] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v310 = __ldxr(v309);
                            while (__stlxr(v310 - 2, v309));
                          }
                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x508]);
                          v311 = &STACK[0xCE0];
                          while (2)
                          {
                            v312 = (unint64_t *)*(v311 - 1);
                            if (v312 == v311 - 4)
                            {
                              v312 = v311 - 4;
                              v313 = 4;
LABEL_405:
                              (*(void (**)(void))(*v312 + 8 * v313))();
                            }
                            else if (v312)
                            {
                              v313 = 5;
                              goto LABEL_405;
                            }
                            v315 = *(v311 - 5);
                            v311 -= 5;
                            v314 = v315;
                            if ((v315 & 7) != 0)
                            {
                              v316 = (unsigned int *)(v314 & 0xFFFFFFFFFFFFFFF8);
                              do
                                v317 = __ldxr(v316);
                              while (__stlxr(v317 - 2, v316));
                            }
                            if (v311 == &STACK[0xC90])
                            {
                              if ((STACK[0x4F0] & 7) != 0)
                              {
                                v318 = (unsigned int *)(STACK[0x4F0] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v319 = __ldxr(v318);
                                while (__stlxr(v319 - 2, v318));
                              }
                              if ((STACK[0x4F8] & 7) != 0)
                              {
                                v320 = (unsigned int *)(STACK[0x4F8] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v321 = __ldxr(v320);
                                while (__stlxr(v321 - 2, v320));
                              }
                              if ((STACK[0x518] & 7) != 0)
                              {
                                v322 = (unsigned int *)(STACK[0x518] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v323 = __ldxr(v322);
                                while (__stlxr(v323 - 2, v322));
                              }
                              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x538]);
                              v324 = &STACK[0xD30];
                              while (2)
                              {
                                v325 = (unint64_t *)*(v324 - 1);
                                if (v325 == v324 - 4)
                                {
                                  v325 = v324 - 4;
                                  v326 = 4;
LABEL_424:
                                  (*(void (**)(void))(*v325 + 8 * v326))();
                                }
                                else if (v325)
                                {
                                  v326 = 5;
                                  goto LABEL_424;
                                }
                                v328 = *(v324 - 5);
                                v324 -= 5;
                                v327 = v328;
                                if ((v328 & 7) != 0)
                                {
                                  v329 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFFFF8);
                                  do
                                    v330 = __ldxr(v329);
                                  while (__stlxr(v330 - 2, v329));
                                }
                                if (v324 != &STACK[0xCE0])
                                  continue;
                                break;
                              }
                              if ((STACK[0x520] & 7) != 0)
                              {
                                v331 = (unsigned int *)(STACK[0x520] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v332 = __ldxr(v331);
                                while (__stlxr(v332 - 2, v331));
                              }
                              if ((STACK[0x528] & 7) != 0)
                              {
                                v333 = (unsigned int *)(STACK[0x528] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v334 = __ldxr(v333);
                                while (__stlxr(v334 - 2, v333));
                              }
                              if ((STACK[0x548] & 7) != 0)
                              {
                                v335 = (unsigned int *)(STACK[0x548] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v336 = __ldxr(v335);
                                while (__stlxr(v336 - 2, v335));
                              }
                              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x568]);
                              v337 = &STACK[0xD80];
                              while (2)
                              {
                                v338 = (unint64_t *)*(v337 - 1);
                                if (v338 == v337 - 4)
                                {
                                  v338 = v337 - 4;
                                  v339 = 4;
LABEL_443:
                                  (*(void (**)(void))(*v338 + 8 * v339))();
                                }
                                else if (v338)
                                {
                                  v339 = 5;
                                  goto LABEL_443;
                                }
                                v341 = *(v337 - 5);
                                v337 -= 5;
                                v340 = v341;
                                if ((v341 & 7) != 0)
                                {
                                  v342 = (unsigned int *)(v340 & 0xFFFFFFFFFFFFFFF8);
                                  do
                                    v343 = __ldxr(v342);
                                  while (__stlxr(v343 - 2, v342));
                                }
                                if (v337 == &STACK[0xD30])
                                {
                                  if ((STACK[0x550] & 7) != 0)
                                  {
                                    v344 = (unsigned int *)(STACK[0x550] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v345 = __ldxr(v344);
                                    while (__stlxr(v345 - 2, v344));
                                  }
                                  if ((STACK[0x558] & 7) != 0)
                                  {
                                    v346 = (unsigned int *)(STACK[0x558] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v347 = __ldxr(v346);
                                    while (__stlxr(v347 - 2, v346));
                                  }
                                  if ((STACK[0x578] & 7) != 0)
                                  {
                                    v348 = (unsigned int *)(STACK[0x578] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v349 = __ldxr(v348);
                                    while (__stlxr(v349 - 2, v348));
                                  }
                                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x590]);
                                  if ((_QWORD *)STACK[0xDA0] == a31)
                                  {
                                    v350 = 4;
                                    goto LABEL_461;
                                  }
                                  if (STACK[0xDA0])
                                  {
                                    v350 = 5;
                                    a31 = (_QWORD *)STACK[0xDA0];
LABEL_461:
                                    (*(void (**)(void))(*a31 + 8 * v350))();
                                  }
                                  if ((STACK[0xD80] & 7) != 0)
                                  {
                                    v351 = (unsigned int *)(STACK[0xD80] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v352 = __ldxr(v351);
                                    while (__stlxr(v352 - 2, v351));
                                  }
                                  if ((STACK[0x580] & 7) != 0)
                                  {
                                    v353 = (unsigned int *)(STACK[0x580] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v354 = __ldxr(v353);
                                    while (__stlxr(v354 - 2, v353));
                                  }
                                  if ((STACK[0x5A0] & 7) != 0)
                                  {
                                    v355 = (unsigned int *)(STACK[0x5A0] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v356 = __ldxr(v355);
                                    while (__stlxr(v356 - 2, v355));
                                  }
                                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x5C0]);
                                  v357 = &STACK[0xDF8];
                                  while (2)
                                  {
                                    v358 = (unint64_t *)*(v357 - 1);
                                    if (v358 == v357 - 4)
                                    {
                                      v358 = v357 - 4;
                                      v359 = 4;
LABEL_476:
                                      (*(void (**)(void))(*v358 + 8 * v359))();
                                    }
                                    else if (v358)
                                    {
                                      v359 = 5;
                                      goto LABEL_476;
                                    }
                                    v361 = *(v357 - 5);
                                    v357 -= 5;
                                    v360 = v361;
                                    if ((v361 & 7) != 0)
                                    {
                                      v362 = (unsigned int *)(v360 & 0xFFFFFFFFFFFFFFF8);
                                      do
                                        v363 = __ldxr(v362);
                                      while (__stlxr(v363 - 2, v362));
                                    }
                                    if (v357 != &STACK[0xDA8])
                                      continue;
                                    break;
                                  }
                                  if ((STACK[0x5A8] & 7) != 0)
                                  {
                                    v364 = (unsigned int *)(STACK[0x5A8] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v365 = __ldxr(v364);
                                    while (__stlxr(v365 - 2, v364));
                                  }
                                  if ((STACK[0x5B0] & 7) != 0)
                                  {
                                    v366 = (unsigned int *)(STACK[0x5B0] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v367 = __ldxr(v366);
                                    while (__stlxr(v367 - 2, v366));
                                  }
                                  if ((STACK[0x5D0] & 7) != 0)
                                  {
                                    v368 = (unsigned int *)(STACK[0x5D0] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v369 = __ldxr(v368);
                                    while (__stlxr(v369 - 2, v368));
                                  }
                                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x600]);
                                  v370 = &STACK[0xE98];
                                  while (2)
                                  {
                                    v371 = (unint64_t *)*(v370 - 1);
                                    if (v371 == v370 - 4)
                                    {
                                      v371 = v370 - 4;
                                      v372 = 4;
LABEL_495:
                                      (*(void (**)(void))(*v371 + 8 * v372))();
                                    }
                                    else if (v371)
                                    {
                                      v372 = 5;
                                      goto LABEL_495;
                                    }
                                    v374 = *(v370 - 5);
                                    v370 -= 5;
                                    v373 = v374;
                                    if ((v374 & 7) != 0)
                                    {
                                      v375 = (unsigned int *)(v373 & 0xFFFFFFFFFFFFFFF8);
                                      do
                                        v376 = __ldxr(v375);
                                      while (__stlxr(v376 - 2, v375));
                                    }
                                    if (v370 == &STACK[0xDF8])
                                    {
                                      if ((STACK[0x5D8] & 7) != 0)
                                      {
                                        v377 = (unsigned int *)(STACK[0x5D8] & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v378 = __ldxr(v377);
                                        while (__stlxr(v378 - 2, v377));
                                      }
                                      if ((STACK[0x5E0] & 7) != 0)
                                      {
                                        v379 = (unsigned int *)(STACK[0x5E0] & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v380 = __ldxr(v379);
                                        while (__stlxr(v380 - 2, v379));
                                      }
                                      if ((STACK[0x5E8] & 7) != 0)
                                      {
                                        v381 = (unsigned int *)(STACK[0x5E8] & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v382 = __ldxr(v381);
                                        while (__stlxr(v382 - 2, v381));
                                      }
                                      if ((STACK[0x5F0] & 7) != 0)
                                      {
                                        v383 = (unsigned int *)(STACK[0x5F0] & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v384 = __ldxr(v383);
                                        while (__stlxr(v384 - 2, v383));
                                      }
                                      if ((STACK[0x610] & 7) != 0)
                                      {
                                        v385 = (unsigned int *)(STACK[0x610] & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v386 = __ldxr(v385);
                                        while (__stlxr(v386 - 2, v385));
                                      }
                                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x630]);
                                      v387 = &STACK[0xEE8];
                                      while (2)
                                      {
                                        v388 = (unint64_t *)*(v387 - 1);
                                        if (v388 == v387 - 4)
                                        {
                                          v388 = v387 - 4;
                                          v389 = 4;
LABEL_520:
                                          (*(void (**)(void))(*v388 + 8 * v389))();
                                        }
                                        else if (v388)
                                        {
                                          v389 = 5;
                                          goto LABEL_520;
                                        }
                                        v391 = *(v387 - 5);
                                        v387 -= 5;
                                        v390 = v391;
                                        if ((v391 & 7) != 0)
                                        {
                                          v392 = (unsigned int *)(v390 & 0xFFFFFFFFFFFFFFF8);
                                          do
                                            v393 = __ldxr(v392);
                                          while (__stlxr(v393 - 2, v392));
                                        }
                                        if (v387 != &STACK[0xE98])
                                          continue;
                                        break;
                                      }
                                      if ((STACK[0x618] & 7) != 0)
                                      {
                                        v394 = (unsigned int *)(STACK[0x618] & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v395 = __ldxr(v394);
                                        while (__stlxr(v395 - 2, v394));
                                      }
                                      if ((STACK[0x620] & 7) != 0)
                                      {
                                        v396 = (unsigned int *)(STACK[0x620] & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v397 = __ldxr(v396);
                                        while (__stlxr(v397 - 2, v396));
                                      }
                                      if ((STACK[0x640] & 7) != 0)
                                      {
                                        v398 = (unsigned int *)(STACK[0x640] & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v399 = __ldxr(v398);
                                        while (__stlxr(v399 - 2, v398));
                                      }
                                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x660]);
                                      v400 = &STACK[0xF38];
                                      while (2)
                                      {
                                        v401 = (unint64_t *)*(v400 - 1);
                                        if (v401 == v400 - 4)
                                        {
                                          v401 = v400 - 4;
                                          v402 = 4;
LABEL_539:
                                          (*(void (**)(void))(*v401 + 8 * v402))();
                                        }
                                        else if (v401)
                                        {
                                          v402 = 5;
                                          goto LABEL_539;
                                        }
                                        v404 = *(v400 - 5);
                                        v400 -= 5;
                                        v403 = v404;
                                        if ((v404 & 7) != 0)
                                        {
                                          v405 = (unsigned int *)(v403 & 0xFFFFFFFFFFFFFFF8);
                                          do
                                            v406 = __ldxr(v405);
                                          while (__stlxr(v406 - 2, v405));
                                        }
                                        if (v400 == &STACK[0xEE8])
                                        {
                                          if ((STACK[0x648] & 7) != 0)
                                          {
                                            v407 = (unsigned int *)(STACK[0x648] & 0xFFFFFFFFFFFFFFF8);
                                            do
                                              v408 = __ldxr(v407);
                                            while (__stlxr(v408 - 2, v407));
                                          }
                                          if ((STACK[0x650] & 7) != 0)
                                          {
                                            v409 = (unsigned int *)(STACK[0x650] & 0xFFFFFFFFFFFFFFF8);
                                            do
                                              v410 = __ldxr(v409);
                                            while (__stlxr(v410 - 2, v409));
                                          }
                                          if ((STACK[0x670] & 7) != 0)
                                          {
                                            v411 = (unsigned int *)(STACK[0x670] & 0xFFFFFFFFFFFFFFF8);
                                            do
                                              v412 = __ldxr(v411);
                                            while (__stlxr(v412 - 2, v411));
                                          }
                                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x688]);
                                          if ((_QWORD *)STACK[0xF58] == a32)
                                          {
                                            v413 = 4;
                                            goto LABEL_557;
                                          }
                                          if (STACK[0xF58])
                                          {
                                            v413 = 5;
                                            a32 = (_QWORD *)STACK[0xF58];
LABEL_557:
                                            (*(void (**)(void))(*a32 + 8 * v413))();
                                          }
                                          if ((STACK[0xF38] & 7) != 0)
                                          {
                                            v414 = (unsigned int *)(STACK[0xF38] & 0xFFFFFFFFFFFFFFF8);
                                            do
                                              v415 = __ldxr(v414);
                                            while (__stlxr(v415 - 2, v414));
                                          }
                                          if ((STACK[0x678] & 7) != 0)
                                          {
                                            v416 = (unsigned int *)(STACK[0x678] & 0xFFFFFFFFFFFFFFF8);
                                            do
                                              v417 = __ldxr(v416);
                                            while (__stlxr(v417 - 2, v416));
                                          }
                                          if ((STACK[0x698] & 7) != 0)
                                          {
                                            v418 = (unsigned int *)(STACK[0x698] & 0xFFFFFFFFFFFFFFF8);
                                            do
                                              v419 = __ldxr(v418);
                                            while (__stlxr(v419 - 2, v418));
                                          }
                                          _Unwind_Resume(a1);
                                        }
                                        continue;
                                      }
                                    }
                                    continue;
                                  }
                                }
                                continue;
                              }
                            }
                            continue;
                          }
                        }
                        continue;
                      }
                    }
                    continue;
                  }
                }
                continue;
              }
            }
          }
          v106 = v105 - 4;
          v107 = 4;
          goto LABEL_47;
        }
      }
      v91 = v90 - 4;
      v92 = 4;
      goto LABEL_25;
    }
    v83 = 5;
    v77 = (_QWORD *)STACK[0x6C0];
  }
  (*(void (**)(_QWORD *))(*v77 + 8 * v83))(v77);
  goto LABEL_11;
}

void sub_2301832D0()
{
  JUMPOUT(0x230181730);
}

void sub_2301832E0()
{
  JUMPOUT(0x2301817B4);
}

void sub_2301832F4()
{
  JUMPOUT(0x2301817D8);
}

void sub_230183308()
{
  JUMPOUT(0x230181858);
}

void sub_230183318()
{
  JUMPOUT(0x230181878);
}

void sub_23018332C()
{
  JUMPOUT(0x230181880);
}

void sub_23018333C()
{
  JUMPOUT(0x2301818F0);
}

void sub_23018334C()
{
  JUMPOUT(0x230181910);
}

void sub_230183360()
{
  JUMPOUT(0x230181918);
}

void sub_230183370()
{
  JUMPOUT(0x230181988);
}

void sub_230183380()
{
  JUMPOUT(0x2301819A8);
}

void sub_230183394()
{
  JUMPOUT(0x2301819B0);
}

void sub_2301833A4()
{
  JUMPOUT(0x230181A20);
}

void sub_2301833B4()
{
  JUMPOUT(0x230181A40);
}

void sub_2301833C8()
{
  JUMPOUT(0x230181A48);
}

void sub_2301833D8()
{
  JUMPOUT(0x230181AB8);
}

void sub_2301833E8()
{
  JUMPOUT(0x230181AD8);
}

void sub_2301833FC()
{
  JUMPOUT(0x230181AE0);
}

void sub_23018340C()
{
  JUMPOUT(0x230181B54);
}

void sub_23018341C()
{
  JUMPOUT(0x230181B74);
}

void sub_230183430()
{
  JUMPOUT(0x230181B7CLL);
}

void sub_230183440()
{
  JUMPOUT(0x230181BF0);
}

void sub_230183450()
{
  JUMPOUT(0x230181C10);
}

void sub_230183464()
{
  JUMPOUT(0x230181C18);
}

void sub_230183474()
{
  JUMPOUT(0x230181C8CLL);
}

void sub_230183484()
{
  JUMPOUT(0x230181CACLL);
}

void sub_230183498()
{
  JUMPOUT(0x230181CB4);
}

void sub_2301834A8()
{
  JUMPOUT(0x230181D38);
}

void sub_2301834BC()
{
  JUMPOUT(0x230181DACLL);
}

void sub_2301834CC()
{
  JUMPOUT(0x230181DCCLL);
}

void sub_2301834E0()
{
  JUMPOUT(0x230181DD4);
}

void sub_2301834F0()
{
  JUMPOUT(0x230181E58);
}

void sub_230183504()
{
  JUMPOUT(0x230181E80);
}

void sub_230183518()
{
  JUMPOUT(0x230181EA0);
}

void sub_23018352C()
{
  JUMPOUT(0x230181F20);
}

void sub_23018353C()
{
  JUMPOUT(0x230181F40);
}

void sub_230183550()
{
  JUMPOUT(0x230181F48);
}

void sub_230183560()
{
  JUMPOUT(0x230181FCCLL);
}

void sub_230183574()
{
  JUMPOUT(0x230182040);
}

void sub_230183584()
{
  JUMPOUT(0x230182060);
}

void sub_230183598()
{
  JUMPOUT(0x230182068);
}

void sub_2301835A8()
{
  JUMPOUT(0x2301820ECLL);
}

void sub_2301835BC()
{
  JUMPOUT(0x230182160);
}

void sub_2301835CC()
{
  JUMPOUT(0x230182180);
}

void sub_2301835E0()
{
  JUMPOUT(0x230182188);
}

void sub_2301835F0()
{
  JUMPOUT(0x2301821FCLL);
}

void sub_230183600()
{
  JUMPOUT(0x23018221CLL);
}

void sub_230183614()
{
  JUMPOUT(0x230182224);
}

void sub_230183624()
{
  JUMPOUT(0x230182298);
}

void sub_230183634()
{
  JUMPOUT(0x2301822B8);
}

void sub_230183648()
{
  JUMPOUT(0x2301822C0);
}

void sub_230183658()
{
  JUMPOUT(0x230182344);
}

void sub_23018366C()
{
  JUMPOUT(0x23018236CLL);
}

void sub_230183680()
{
  JUMPOUT(0x2301823ECLL);
}

void sub_230183690()
{
  JUMPOUT(0x23018240CLL);
}

void sub_2301836A4()
{
  JUMPOUT(0x230182414);
}

void sub_2301836B4()
{
  JUMPOUT(0x230182498);
}

void sub_2301836C8()
{
  JUMPOUT(0x2301824C0);
}

void sub_2301836DC()
{
  JUMPOUT(0x230182540);
}

void sub_2301836EC()
{
  JUMPOUT(0x230182560);
}

void sub_230183700()
{
  JUMPOUT(0x230182568);
}

void sub_230183710()
{
  JUMPOUT(0x2301825DCLL);
}

void sub_230183720()
{
  JUMPOUT(0x2301825FCLL);
}

void sub_230183734()
{
  JUMPOUT(0x230182604);
}

void sub_230183744()
{
  JUMPOUT(0x230182678);
}

void sub_230183754()
{
  JUMPOUT(0x230182698);
}

void sub_230183768()
{
  JUMPOUT(0x2301826A0);
}

void sub_230183778()
{
  JUMPOUT(0x230182714);
}

void sub_230183788()
{
  JUMPOUT(0x230182734);
}

void sub_23018379C()
{
  JUMPOUT(0x23018273CLL);
}

void sub_2301837AC()
{
  JUMPOUT(0x2301827B0);
}

void sub_2301837BC()
{
  JUMPOUT(0x2301827D0);
}

void sub_2301837D0()
{
  JUMPOUT(0x2301827D8);
}

void sub_2301837E0()
{
  JUMPOUT(0x23018284CLL);
}

void sub_2301837F0()
{
  JUMPOUT(0x23018286CLL);
}

void sub_230183804()
{
  JUMPOUT(0x230182874);
}

void sub_230183814()
{
  JUMPOUT(0x2301828E8);
}

void sub_230183824()
{
  JUMPOUT(0x230182908);
}

void sub_230183838()
{
  JUMPOUT(0x230182910);
}

void sub_230183848()
{
  JUMPOUT(0x230182994);
}

void sub_23018385C()
{
  JUMPOUT(0x230182A08);
}

void sub_23018386C()
{
  JUMPOUT(0x230182A28);
}

void sub_230183880()
{
  JUMPOUT(0x230182A30);
}

void sub_230183890()
{
  JUMPOUT(0x230182AB4);
}

void sub_2301838A4()
{
  JUMPOUT(0x230182B28);
}

void sub_2301838B4()
{
  JUMPOUT(0x230182B48);
}

void sub_2301838C8()
{
  JUMPOUT(0x230182B50);
}

void sub_2301838D8()
{
  JUMPOUT(0x230182BD4);
}

void sub_2301838EC()
{
  JUMPOUT(0x230182C48);
}

void sub_2301838FC()
{
  JUMPOUT(0x230182C68);
}

void sub_230183910()
{
  JUMPOUT(0x230182C70);
}

void sub_230183920()
{
  JUMPOUT(0x230182CE4);
}

void sub_230183930()
{
  JUMPOUT(0x230182D04);
}

void sub_230183944()
{
  JUMPOUT(0x230182D0CLL);
}

void sub_230183954()
{
  JUMPOUT(0x230182D90);
}

void sub_230183968()
{
  JUMPOUT(0x230182E04);
}

void sub_230183978()
{
  JUMPOUT(0x230182E24);
}

void sub_23018398C()
{
  JUMPOUT(0x230182E2CLL);
}

void sub_23018399C()
{
  JUMPOUT(0x230182EB0);
}

void sub_2301839B0()
{
  JUMPOUT(0x230182ED8);
}

void sub_2301839C4()
{
  JUMPOUT(0x230182EF8);
}

void sub_2301839D8()
{
  JUMPOUT(0x230182F78);
}

void sub_2301839E8()
{
  JUMPOUT(0x230182F98);
}

void sub_2301839FC()
{
  JUMPOUT(0x230182FA0);
}

void sub_230183A0C()
{
  JUMPOUT(0x230183024);
}

void sub_230183A20()
{
  JUMPOUT(0x230183098);
}

void sub_230183A30()
{
  JUMPOUT(0x2301830B8);
}

void sub_230183A44()
{
  JUMPOUT(0x2301830C0);
}

void sub_230183A54()
{
  JUMPOUT(0x230183144);
}

void sub_230183A68()
{
  JUMPOUT(0x2301831B8);
}

void sub_230183A78()
{
  JUMPOUT(0x2301831D8);
}

void sub_230183A88()
{
  JUMPOUT(0x2301831D8);
}

void sub_230183A9C()
{
  JUMPOUT(0x2301831E0);
}

void sub_230183AB0()
{
  JUMPOUT(0x230183254);
}

void sub_230183AC4()
{
  JUMPOUT(0x2301832BCLL);
}

void `anonymous namespace'::usdToRe_scalar<unsigned char,unsigned char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _BYTE **a2)
{
  _BYTE *v2;
  char v3;
  _BYTE v4[24];
  void *__p;
  char v6;

  v2 = *a2;
  realityio::getAttributeValue<unsigned char>(a1, (uint64_t)v4);
  if (v4[0])
  {
    v3 = v4[8];
  }
  else
  {
    if (v6 < 0)
      operator delete(__p);
    v3 = 0;
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<unsigned int,unsigned short>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _WORD **a2)
{
  _WORD *v2;
  __int16 v3;
  _BYTE v4[8];
  int v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<unsigned int>(a1, (uint64_t)v4);
  if (v4[0])
  {
    v3 = v5;
  }
  else
  {
    if (v7 < 0)
      operator delete(__p);
    v3 = 0;
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<unsigned int,unsigned int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _DWORD **a2)
{
  _DWORD *v2;
  int v3;
  _BYTE v4[8];
  int v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<unsigned int>(a1, (uint64_t)v4);
  if (v4[0])
  {
    v3 = v5;
  }
  else
  {
    if (v7 < 0)
      operator delete(__p);
    v3 = 0;
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<unsigned long long,unsigned long long>(pxrInternal__aapl__pxrReserved__::UsdObject *this, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE v4[8];
  uint64_t v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<unsigned long long>((uint64_t)v4, this);
  if (v4[0])
  {
    v3 = v5;
  }
  else
  {
    if (v7 < 0)
      operator delete(__p);
    v3 = 0;
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<unsigned long long,unsigned long>(pxrInternal__aapl__pxrReserved__::UsdObject *this, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE v4[8];
  uint64_t v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<unsigned long long>((uint64_t)v4, this);
  if (v4[0])
  {
    v3 = v5;
  }
  else
  {
    if (v7 < 0)
      operator delete(__p);
    v3 = 0;
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<int,char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _BYTE **a2)
{
  _BYTE *v2;
  char v3;
  _BYTE v4[24];
  void *__p;
  char v6;

  v2 = *a2;
  realityio::getAttributeValue<int>(a1, (uint64_t)v4);
  if (v4[0])
  {
    v3 = v4[8];
  }
  else
  {
    if (v6 < 0)
      operator delete(__p);
    v3 = 0;
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<int,signed char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _BYTE **a2)
{
  _BYTE *v2;
  char v3;
  _BYTE v4[24];
  void *__p;
  char v6;

  v2 = *a2;
  realityio::getAttributeValue<int>(a1, (uint64_t)v4);
  if (v4[0])
  {
    v3 = v4[8];
  }
  else
  {
    if (v6 < 0)
      operator delete(__p);
    v3 = 0;
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<int,short>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _WORD **a2)
{
  _WORD *v2;
  __int16 v3;
  _BYTE v4[8];
  int v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<int>(a1, (uint64_t)v4);
  if (v4[0])
  {
    v3 = v5;
  }
  else
  {
    if (v7 < 0)
      operator delete(__p);
    v3 = 0;
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<int,int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _DWORD **a2)
{
  _DWORD *v2;
  int v3;
  _BYTE v4[8];
  int v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<int>(a1, (uint64_t)v4);
  if (v4[0])
  {
    v3 = v5;
  }
  else
  {
    if (v7 < 0)
      operator delete(__p);
    v3 = 0;
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<long long,int>(pxrInternal__aapl__pxrReserved__::UsdObject *this, _DWORD **a2)
{
  _DWORD *v2;
  int v3;
  _BYTE v4[8];
  int v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<long long>((uint64_t)v4, this);
  if (v4[0])
  {
    v3 = v5;
  }
  else
  {
    if (v7 < 0)
      operator delete(__p);
    v3 = 0;
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<long long,long long>(pxrInternal__aapl__pxrReserved__::UsdObject *this, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE v4[8];
  uint64_t v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<long long>((uint64_t)v4, this);
  if (v4[0])
  {
    v3 = v5;
  }
  else
  {
    if (v7 < 0)
      operator delete(__p);
    v3 = 0;
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<float,float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _DWORD **a2)
{
  _DWORD *v2;
  int v3;
  _BYTE v4[8];
  int v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<float>(a1, (uint64_t)v4);
  if (v4[0])
  {
    v3 = v5;
  }
  else
  {
    v3 = 0;
    if (v7 < 0)
      operator delete(__p);
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_vector<pxrInternal__aapl__pxrReserved__::GfVec2f,float,2>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE v4[8];
  uint64_t v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(a1, (uint64_t)v4);
  if (v4[0])
  {
    v3 = v5;
  }
  else
  {
    v3 = 0;
    if (v7 < 0)
      operator delete(__p);
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_vector<pxrInternal__aapl__pxrReserved__::GfVec3f,float,3>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BYTE v5[8];
  uint64_t v6;
  int v7;
  void *__p;
  char v9;

  v2 = *a2;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1, (uint64_t)v5);
  if (v5[0])
  {
    v3 = v7;
    v4 = v6;
  }
  else
  {
    v4 = 0;
    v3 = 0;
    if (v9 < 0)
      operator delete(__p);
  }
  *(_QWORD *)v2 = v4;
  *(_DWORD *)(v2 + 8) = v3;
}

void `anonymous namespace'::usdToRe_vector<pxrInternal__aapl__pxrReserved__::GfVec4f,float,4>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _OWORD **a2)
{
  _OWORD *v2;
  __int128 v3;
  _BYTE v4[8];
  __int128 v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1, (uint64_t)v4);
  if (v4[0])
  {
    v3 = v5;
  }
  else
  {
    v3 = 0uLL;
    if (v7 < 0)
    {
      operator delete(__p);
      v3 = 0uLL;
    }
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<pxrInternal__aapl__pxrReserved__::GfQuatf,pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::UsdObject *this, _OWORD **a2)
{
  _OWORD *v2;
  __int128 v3;
  _BYTE v4[8];
  __int128 v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfQuatf>((uint64_t)v4, this);
  if (v4[0])
  {
    v3 = v5;
  }
  else if (v7 < 0)
  {
    operator delete(__p);
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<double,double>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE v4[8];
  uint64_t v5;
  void *__p;
  char v7;

  v2 = *a2;
  realityio::getAttributeValue<double>(a1, (uint64_t)v4);
  if (v4[0])
  {
    v3 = v5;
  }
  else
  {
    v3 = 0;
    if (v7 < 0)
      operator delete(__p);
  }
  *v2 = v3;
}

void `anonymous namespace'::usdToRe_scalar<BOOL,BOOL>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, BOOL **a2)
{
  BOOL *v2;
  BOOL v3;
  _BYTE v4[24];
  void *__p;
  char v6;

  v2 = *a2;
  realityio::getAttributeValue<BOOL>(a1, (uint64_t)v4);
  if (v4[0])
  {
    v3 = v4[8] != 0;
  }
  else
  {
    if (v6 < 0)
      operator delete(__p);
    v3 = 0;
  }
  *v2 = v3;
}

void _ZN12_GLOBAL__N_114usdToRe_matrixIN32pxrInternal__aapl__pxrReserved__10GfMatrix2dENS1_7GfVec2dE13simd_float2x2Dv2_fLm2EfEEvRKNS1_12UsdAttributeENSt3__110shared_ptrIhEEPN9realityio6InputsE10RETypeInfo(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _QWORD **a2)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v2;
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  int v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  void *v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  void *v16;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v18;
  std::type_info *v19;
  pxrInternal__aapl__pxrReserved__::VtValue *v20;
  uint64_t v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  float64x2_t v35;
  uint64_t v36;
  float v37;
  float32x2_t v38;
  pxrInternal__aapl__pxrReserved__::TfToken *v39;
  void *v40;
  float64_t v41;
  void *v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  std::string v46;
  std::string v47;
  void *__p[2];
  std::string::size_type v49;
  double v50;
  double v51;
  void *v52;
  double v53;
  uint64_t v54;
  std::string v55;
  char v56[8];
  uint64_t v57;
  uint64_t v58;

  v2 = a1;
  v58 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) == 0)
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v2);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    v14 = v52;
    LOBYTE(v2) = HIBYTE(v54);
    v52 = 0;
    v53 = 0.0;
    v54 = 0;
    v42 = v14;
    if (SHIBYTE(v49) < 0)
      operator delete(__p[0]);
    goto LABEL_52;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v2);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v44);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v44);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
  }
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v44);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
  v43 = v8;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v2) & 1) != 0)
  {
    v57 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v56))
      {
        v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
        v10 = *(double *)v9;
        v11 = *(double *)(v9 + 8);
        v41 = *(double *)(v9 + 24);
        v42 = *(void **)(v9 + 16);
        v12 = 1;
LABEL_44:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
        goto LABEL_45;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
      {
        v19 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
        v20 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v55, (const pxrInternal__aapl__pxrReserved__::VtValue *)v19);
        if (v55.__r_.__value_.__l.__size_)
        {
          v21 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(v20);
          v10 = *(double *)v21;
          v11 = *(double *)(v21 + 8);
          v41 = *(double *)(v21 + 24);
          v42 = *(void **)(v21 + 16);
          v12 = 1;
        }
        else
        {
          v39 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v2);
          if ((*(_QWORD *)v39 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v39);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          v10 = v50;
          v11 = v51;
          v40 = v52;
          v41 = v53;
          LOBYTE(v2) = HIBYTE(v54);
          v53 = 0.0;
          v54 = 0;
          v52 = 0;
          v42 = v40;
          if (SHIBYTE(v49) < 0)
            operator delete(__p[0]);
          v12 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v55);
        goto LABEL_44;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      v10 = v50;
      v11 = v51;
      v30 = v52;
      v41 = v53;
      LOBYTE(v2) = HIBYTE(v54);
      v53 = 0.0;
      v54 = 0;
      v52 = 0;
      v42 = v30;
      if ((SHIBYTE(v49) & 0x80000000) == 0)
      {
LABEL_43:
        v12 = 0;
        goto LABEL_44;
      }
      v29 = __p[0];
    }
    else
    {
      v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v2);
      if ((*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      std::operator+<char>();
      v22 = std::string::append(&v47, ") at the given time: ");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v46, v43);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v46;
      else
        v24 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      else
        size = v46.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v55, (const std::string::value_type *)v24, size);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v49 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      v10 = v50;
      v11 = v51;
      v28 = v52;
      v41 = v53;
      LOBYTE(v2) = HIBYTE(v54);
      v53 = 0.0;
      v54 = 0;
      v52 = 0;
      v42 = v28;
      if (SHIBYTE(v49) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_43;
      v29 = (void *)v47.__r_.__value_.__r.__words[0];
    }
    operator delete(v29);
    goto LABEL_43;
  }
  v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v2);
  if ((*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  v10 = v50;
  v11 = v51;
  v16 = v52;
  v41 = v53;
  LOBYTE(v2) = HIBYTE(v54);
  v53 = 0.0;
  v54 = 0;
  v52 = 0;
  v42 = v16;
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
  v12 = 0;
LABEL_45:
  v31 = v45;
  if (v45)
  {
    v32 = (unsigned int *)(v45 + 8);
    do
    {
      v33 = __ldxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  if (v12)
  {
    *(_QWORD *)&v35.f64[0] = v42;
    *(float *)&v36 = v10;
    v37 = v11;
    v35.f64[1] = v41;
    v38 = vcvt_f32_f64(v35);
    goto LABEL_55;
  }
LABEL_52:
  v38 = 0;
  v37 = 0.0;
  if ((v2 & 0x80) != 0)
  {
    operator delete(v42);
    v37 = 0.0;
  }
  LODWORD(v36) = 0;
LABEL_55:
  *((float *)&v36 + 1) = v37;
  *v3 = v36;
  v3[1] = v38;
}

void sub_230184628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  if (a14)
  {
    v27 = a14 + 2;
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      (*(void (**)(unsigned int *))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void _ZN12_GLOBAL__N_114usdToRe_matrixIN32pxrInternal__aapl__pxrReserved__10GfMatrix3dENS1_7GfVec3dE13simd_float3x3Dv3_fLm3EfEEvRKNS1_12UsdAttributeENSt3__110shared_ptrIhEEPN9realityio6InputsE10RETypeInfo(pxrInternal__aapl__pxrReserved__::UsdObject *a1, int8x16_t **a2)
{
  int8x16_t *v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  double v10;
  int v11;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  void *v13;
  double v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  void *v16;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v18;
  std::type_info *v19;
  pxrInternal__aapl__pxrReserved__::VtValue *v20;
  uint64_t v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  float v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  int8x16_t v39;
  int8x16_t v40;
  double v41;
  int8x16_t v42;
  pxrInternal__aapl__pxrReserved__::TfToken *v43;
  void *v44;
  int64x2_t v45;
  int8x16_t v46;
  float64_t v47;
  float64_t v48;
  float64_t v49;
  void *v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  std::string v54;
  std::string v55;
  void *__p[2];
  std::string::size_type v57;
  double v58;
  double v59;
  void *v60;
  double v61;
  double v62;
  std::string v63;
  char v64[8];
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v52);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v52);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v52);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    v51 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v58, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      v10 = v58;
      v16 = v60;
      v47 = v61;
      v48 = v59;
      v49 = v62;
      v61 = 0.0;
      v62 = 0.0;
      v60 = 0;
      v50 = v16;
      if (SHIBYTE(v57) < 0)
        operator delete(__p[0]);
      v11 = 0;
LABEL_45:
      v31 = v53;
      if (v53)
      {
        v32 = (unsigned int *)(v53 + 8);
        do
        {
          v33 = __ldxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
      if (v11)
      {
        v35 = v10;
        v36 = (float64x2_t)vdupq_lane_s64(v46.i64[0], 0);
        *(_QWORD *)&v37.f64[0] = vdupq_laneq_s64(v45, 1).u64[0];
        v38.f64[0] = v48;
        v37.f64[1] = v47;
        v36.f64[0] = v49;
        *(_QWORD *)&v38.f64[1] = v50;
        v39 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v36), v38);
        v40 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vextq_s8(v46, (int8x16_t)v45, 8uLL)), v37);
        goto LABEL_56;
      }
      goto LABEL_52;
    }
    v65 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v64))
      {
        v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v64);
        v10 = *(double *)v9;
        v47 = *(double *)(v9 + 24);
        v48 = *(double *)(v9 + 8);
        v50 = *(void **)(v9 + 16);
        v49 = *(double *)(v9 + 32);
        v45 = *(int64x2_t *)(v9 + 56);
        v46 = *(int8x16_t *)(v9 + 40);
        v11 = 1;
LABEL_44:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v64);
        goto LABEL_45;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v64);
      {
        v19 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v64);
        v20 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v63, (const pxrInternal__aapl__pxrReserved__::VtValue *)v19);
        if (v63.__r_.__value_.__l.__size_)
        {
          v21 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(v20);
          v10 = *(double *)v21;
          v47 = *(double *)(v21 + 24);
          v48 = *(double *)(v21 + 8);
          v50 = *(void **)(v21 + 16);
          v49 = *(double *)(v21 + 32);
          v45 = *(int64x2_t *)(v21 + 56);
          v46 = *(int8x16_t *)(v21 + 40);
          v11 = 1;
        }
        else
        {
          v43 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)v43 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v43);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v58, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          v10 = v58;
          v44 = v60;
          v47 = v61;
          v48 = v59;
          v49 = v62;
          v61 = 0.0;
          v62 = 0.0;
          v60 = 0;
          v50 = v44;
          if (SHIBYTE(v57) < 0)
            operator delete(__p[0]);
          v11 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
        goto LABEL_44;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v58, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      v10 = v58;
      v30 = v60;
      v47 = v61;
      v48 = v59;
      v49 = v62;
      v61 = 0.0;
      v62 = 0.0;
      v60 = 0;
      v50 = v30;
      if ((SHIBYTE(v57) & 0x80000000) == 0)
      {
LABEL_43:
        v11 = 0;
        goto LABEL_44;
      }
      v29 = __p[0];
    }
    else
    {
      v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      std::operator+<char>();
      v22 = std::string::append(&v55, ") at the given time: ");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v54, v51);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v54;
      else
        v24 = (std::string *)v54.__r_.__value_.__r.__words[0];
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
      else
        size = v54.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v63, (const std::string::value_type *)v24, size);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v57 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v58, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      v10 = v58;
      v28 = v60;
      v47 = v61;
      v48 = v59;
      v49 = v62;
      v61 = 0.0;
      v62 = 0.0;
      v60 = 0;
      v50 = v28;
      if (SHIBYTE(v57) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_43;
      v29 = (void *)v55.__r_.__value_.__r.__words[0];
    }
    operator delete(v29);
    goto LABEL_43;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v58, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  v13 = v60;
  v60 = 0;
  v61 = 0.0;
  v14 = v62;
  v62 = 0.0;
  v50 = v13;
  if ((SHIBYTE(v57) & 0x80000000) == 0)
    goto LABEL_53;
  v49 = v14;
  operator delete(__p[0]);
LABEL_52:
  v14 = v49;
LABEL_53:
  v41 = v14;
  v40 = 0uLL;
  v35 = 0.0;
  if ((*(_QWORD *)&v41 & 0x8000000000000000) != 0)
  {
    operator delete(v50);
    v35 = 0.0;
    v40 = 0uLL;
  }
  v39 = 0uLL;
LABEL_56:
  v42 = vextq_s8(v39, v40, 4uLL);
  *(float *)v42.i32 = v35;
  *v3 = v42;
  v3[1] = vextq_s8(v40, v39, 0xCuLL);
  v3[2] = v40;
}

void sub_230184C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned int *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;

  if (a22)
  {
    v35 = a22 + 2;
    do
    {
      v36 = __ldxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      (*(void (**)(unsigned int *))(*(_QWORD *)a22 + 8))(a22);
  }
  _Unwind_Resume(exception_object);
}

void _ZN12_GLOBAL__N_114usdToRe_matrixIN32pxrInternal__aapl__pxrReserved__10GfMatrix4dENS1_7GfVec4dE13simd_float4x4Dv4_fLm4EfEEvRKNS1_12UsdAttributeENSt3__110shared_ptrIhEEPN9realityio6InputsE10RETypeInfo(pxrInternal__aapl__pxrReserved__::UsdObject *a1, float32x4_t **a2)
{
  float32x4_t *v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  void *v12;
  double v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  pxrInternal__aapl__pxrReserved__::TfToken *v18;
  float64x2_t v19;
  void *v20;
  float64_t v21;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v23;
  std::type_info *v24;
  pxrInternal__aapl__pxrReserved__::VtValue *v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  float64x2_t v33;
  void *v34;
  double v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  float64x2_t v42;
  float64x2_t v43;
  pxrInternal__aapl__pxrReserved__::TfToken *v44;
  float64x2_t v45;
  void *v46;
  double v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64_t v53;
  float64_t v54;
  float64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  void *__p;
  double v59;
  uint64_t v60;
  uint64_t v61;
  std::string v62;
  std::string v63;
  __int128 v64;
  std::string::size_type v65;
  double v66;
  double v67;
  void *v68;
  double v69;
  double v70;
  std::string v71;
  char v72[8];
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) == 0)
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v66, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v64);
    v12 = v68;
    v13 = v70;
    v68 = 0;
    v69 = 0.0;
    v70 = 0.0;
    __p = v12;
    if (SHIBYTE(v65) < 0)
      operator delete((void *)v64);
    if ((*(_QWORD *)&v13 & 0x8000000000000000) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v60);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v60);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
  }
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v60);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
  v59 = v8;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v73 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v72))
      {
        v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v72);
        v55 = *(double *)v9;
        v54 = *(double *)(v9 + 8);
        __p = *(void **)(v9 + 16);
        v56 = *(float64x2_t *)(v9 + 32);
        v52 = *(float64x2_t *)(v9 + 112);
        v53 = *(double *)(v9 + 24);
        v10 = 1;
        v48 = *(float64x2_t *)(v9 + 48);
        v49 = *(float64x2_t *)(v9 + 80);
        v50 = *(float64x2_t *)(v9 + 64);
        v51 = *(float64x2_t *)(v9 + 96);
LABEL_47:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v72);
        v19 = v56;
        goto LABEL_48;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v72);
      {
        v24 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v72);
        v25 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v71, (const pxrInternal__aapl__pxrReserved__::VtValue *)v24);
        if (v71.__r_.__value_.__l.__size_)
        {
          v26 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v25);
          v55 = *(double *)v26;
          v54 = *(double *)(v26 + 8);
          __p = *(void **)(v26 + 16);
          v56 = *(float64x2_t *)(v26 + 32);
          v52 = *(float64x2_t *)(v26 + 112);
          v53 = *(double *)(v26 + 24);
          v10 = 1;
          v48 = *(float64x2_t *)(v26 + 48);
          v49 = *(float64x2_t *)(v26 + 80);
          v50 = *(float64x2_t *)(v26 + 64);
          v51 = *(float64x2_t *)(v26 + 96);
        }
        else
        {
          v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v66, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v64);
          v55 = v66;
          v54 = v67;
          v46 = v68;
          v53 = v69;
          v47 = v70;
          v69 = 0.0;
          v70 = 0.0;
          v68 = 0;
          __p = v46;
          if (SHIBYTE(v65) < 0)
            operator delete((void *)v64);
          v10 = 0;
          v45.f64[0] = v47;
          v56 = v45;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v71);
        goto LABEL_47;
      }
      std::string::basic_string[abi:ne180100]<0>(&v64, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v66, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v64);
      v55 = v66;
      v54 = v67;
      v37 = v68;
      v53 = v69;
      v35 = v70;
      v69 = 0.0;
      v70 = 0.0;
      v68 = 0;
      __p = v37;
      if ((SHIBYTE(v65) & 0x80000000) == 0)
      {
LABEL_46:
        v10 = 0;
        v33.f64[0] = v35;
        v56 = v33;
        goto LABEL_47;
      }
      v36 = (void *)v64;
    }
    else
    {
      v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      std::operator+<char>();
      v27 = std::string::append(&v63, ") at the given time: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v62, v59);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v62;
      else
        v29 = (std::string *)v62.__r_.__value_.__r.__words[0];
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        size = v62.__r_.__value_.__l.__size_;
      v31 = std::string::append(&v71, (const std::string::value_type *)v29, size);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v65 = v31->__r_.__value_.__r.__words[2];
      v64 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v66, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v64);
      v55 = v66;
      v54 = v67;
      v34 = v68;
      v53 = v69;
      v35 = v70;
      v69 = 0.0;
      v70 = 0.0;
      v68 = 0;
      __p = v34;
      if (SHIBYTE(v65) < 0)
        operator delete((void *)v64);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      v36 = (void *)v63.__r_.__value_.__r.__words[0];
    }
    operator delete(v36);
    goto LABEL_46;
  }
  v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v66, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v64);
  v55 = v66;
  v54 = v67;
  v20 = v68;
  v53 = v69;
  v21 = v70;
  v69 = 0.0;
  v70 = 0.0;
  v68 = 0;
  __p = v20;
  if (SHIBYTE(v65) < 0)
    operator delete((void *)v64);
  v10 = 0;
  v19.f64[0] = v21;
LABEL_48:
  v38 = v61;
  if (v61)
  {
    v39 = (unsigned int *)(v61 + 8);
    do
    {
      v40 = __ldxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      v57 = v19;
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      v19 = v57;
    }
  }
  if (v10)
  {
    *(_QWORD *)&v42.f64[0] = __p;
    v43.f64[0] = v55;
    v43.f64[1] = v54;
    v42.f64[1] = v53;
    v17 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v43), v42);
    v16 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v19), v48);
    v15 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v50), v49);
    v14 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v51), v52);
    goto LABEL_55;
  }
  if ((*(_QWORD *)&v19.f64[0] & 0x8000000000000000) != 0)
LABEL_17:
    operator delete(__p);
LABEL_18:
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
LABEL_55:
  *v3 = v17;
  v3[1] = v16;
  v3[2] = v15;
  v3[3] = v14;
}

void sub_23018533C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned int *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;

  if (a30)
  {
    v37 = a30 + 2;
    do
    {
      v38 = __ldxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
      (*(void (**)(unsigned int *))(*(_QWORD *)a30 + 8))(a30);
  }
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::usdToRe_String(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unint64_t v12;
  std::string *v13;
  void **v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  const std::string *EmptyString;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  NSObject *v24;
  __int128 v25;
  uint64_t Name;
  uint64_t Text;
  std::string v28;
  _QWORD v29[3];
  std::string v30;
  std::string __p;
  __int128 v32;
  __int128 v33;
  __int128 v34[2];
  _BYTE buf[24];
  void *v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  memset(&__p, 0, sizeof(__p));
  *(_QWORD *)buf = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(a1, (uint64_t)buf);
    if (buf[0])
    {
      v9 = *(_QWORD *)&buf[8];
      if ((buf[8] & 7) == 0)
      {
        v12 = *(_QWORD *)&buf[8];
LABEL_30:
        if ((v9 & 7) != 0)
        {
          v15 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
LABEL_33:
        v17 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (const std::string *)(v17 + 4);
        else
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
        std::string::operator=(&__p, EmptyString);
        if ((v12 & 7) != 0)
        {
          do
            v19 = __ldxr(v17);
          while (__stlxr(v19 - 2, v17));
        }
        goto LABEL_38;
      }
      v10 = (unsigned int *)(*(_QWORD *)&buf[8] & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) != 0)
        v12 = v9;
      else
        v12 = v9 & 0xFFFFFFFFFFFFFFF8;
      if (buf[0])
      {
        v9 = *(_QWORD *)&buf[8];
        goto LABEL_30;
      }
    }
    else
    {
      v12 = 0;
    }
    if (v37 < 0)
      operator delete(v36);
    goto LABEL_33;
  }
  memset(v29, 0, sizeof(v29));
  realityio::getAttributeValue<std::string>(a1, (uint64_t)buf);
  if (buf[0])
  {
    v13 = (std::string *)&buf[8];
    if (SHIBYTE(v36) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)&buf[8], *(std::string::size_type *)&buf[16]);
      if (!buf[0])
        goto LABEL_16;
      goto LABEL_23;
    }
  }
  else
  {
    v13 = (std::string *)v29;
  }
  v30 = *v13;
  if (!buf[0])
  {
LABEL_16:
    if (v37 < 0)
    {
      v14 = &v36;
LABEL_25:
      operator delete(*v14);
      goto LABEL_26;
    }
    goto LABEL_26;
  }
LABEL_23:
  if (SHIBYTE(v36) < 0)
  {
    v14 = (void **)&buf[8];
    goto LABEL_25;
  }
LABEL_26:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v30;
LABEL_38:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v28 = __p;
  v20 = *a2;
  v21 = a4[1];
  v34[0] = *a4;
  v34[1] = v21;
  v23 = v22;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((v23 & 1) != 0)
      goto LABEL_48;
  }
  else if ((v22 & 1) != 0)
  {
    goto LABEL_48;
  }
  v24 = *(id *)(realityio::logObjects((realityio *)v22) + 24);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v25 = a4[1];
    v32 = *a4;
    v33 = v25;
    Name = RETypeInfoGetName();
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, &v30);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = Name;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = Text;
    _os_log_impl(&dword_22FF26000, v24, OS_LOG_TYPE_DEFAULT, "Unsupported string format for (\"%s\") at (\"%s\")", buf, 0x16u);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
  }

LABEL_48:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_230185728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void **v27;
  uint64_t v28;

  if (*(_BYTE *)(v28 - 112))
  {
    if ((*(char *)(v28 - 81) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else
  {
    if ((*(char *)(v28 - 65) & 0x80000000) == 0)
      goto LABEL_6;
    v27 = (void **)(v28 - 88);
  }
  operator delete(*v27);
LABEL_6:
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_AssetHandle(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__ *a3)
{
  std::string v6;
  std::string __p;
  _BYTE v8[8];
  std::string v9;
  std::string v10;

  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a1, (uint64_t)v8);
  if (v8[0])
  {
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v6, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    else
      v6 = v9;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
    else
      __p = v10;
    REAssetHandleSet();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)v8);
}

void sub_2301858E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<unsigned char,unsigned char>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v62);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_BYTE **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_BYTE *)(v58 + v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)a1;
    v24 = *(_QWORD *)(a1 + 8);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)(a1 + 20));
    v27 = *(_QWORD *)(a1 + 24);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_BYTE **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_BYTE *)(v58 + i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_230185D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<unsigned int,unsigned short>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _WORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _WORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v62);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_WORD **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_DWORD *)(v58 + 4 * v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)a1;
    v24 = *(_QWORD *)(a1 + 8);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)(a1 + 20));
    v27 = *(_QWORD *)(a1 + 24);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_WORD **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_DWORD *)(v58 + 4 * i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_2301861D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<unsigned int,unsigned int>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v62);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_DWORD **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_DWORD *)(v58 + 4 * v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)a1;
    v24 = *(_QWORD *)(a1 + 8);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)(a1 + 20));
    v27 = *(_QWORD *)(a1 + 24);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_DWORD **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_DWORD *)(v58 + 4 * i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_23018667C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<unsigned long long,unsigned long long>(pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((uint64_t)v62, this);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_QWORD **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_QWORD *)(v58 + 8 * v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)this;
    v24 = *((_QWORD *)this + 1);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)this + 5);
    v27 = *((_QWORD *)this + 3);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_QWORD **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_QWORD *)(v58 + 8 * i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_230186B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<unsigned long long,unsigned long>(pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((uint64_t)v62, this);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_QWORD **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_QWORD *)(v58 + 8 * v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)this;
    v24 = *((_QWORD *)this + 1);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)this + 5);
    v27 = *((_QWORD *)this + 3);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_QWORD **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_QWORD *)(v58 + 8 * i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_230186FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<int,char>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v62);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_BYTE **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_DWORD *)(v58 + 4 * v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)a1;
    v24 = *(_QWORD *)(a1 + 8);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)(a1 + 20));
    v27 = *(_QWORD *)(a1 + 24);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_BYTE **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_DWORD *)(v58 + 4 * i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_230187488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<int,signed char>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v62);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_BYTE **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_DWORD *)(v58 + 4 * v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)a1;
    v24 = *(_QWORD *)(a1 + 8);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)(a1 + 20));
    v27 = *(_QWORD *)(a1 + 24);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_BYTE **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_DWORD *)(v58 + 4 * i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_230187934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<int,short>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _WORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _WORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v62);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_WORD **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_DWORD *)(v58 + 4 * v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)a1;
    v24 = *(_QWORD *)(a1 + 8);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)(a1 + 20));
    v27 = *(_QWORD *)(a1 + 24);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_WORD **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_DWORD *)(v58 + 4 * i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_230187DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<int,int>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v62);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_DWORD **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_DWORD *)(v58 + 4 * v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)a1;
    v24 = *(_QWORD *)(a1 + 8);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)(a1 + 20));
    v27 = *(_QWORD *)(a1 + 24);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_DWORD **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_DWORD *)(v58 + 4 * i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_23018828C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<long long,int>(pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v62, this);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_DWORD **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_QWORD *)(v58 + 8 * v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)this;
    v24 = *((_QWORD *)this + 1);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)this + 5);
    v27 = *((_QWORD *)this + 3);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_DWORD **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_QWORD *)(v58 + 8 * i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_23018873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<long long,long long>(pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v62, this);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_QWORD **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_QWORD *)(v58 + 8 * v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)this;
    v24 = *((_QWORD *)this + 1);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)this + 5);
    v27 = *((_QWORD *)this + 3);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_QWORD **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_QWORD *)(v58 + 8 * i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_230188BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<float,float>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v62);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_DWORD **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_DWORD *)(v58 + 4 * v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)a1;
    v24 = *(_QWORD *)(a1 + 8);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)(a1 + 20));
    v27 = *(_QWORD *)(a1 + 24);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_DWORD **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_DWORD *)(v58 + 4 * i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_230189098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_ArrayOfArrays<pxrInternal__aapl__pxrReserved__::GfVec2f,float,2>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  char v29;
  unsigned int *v30;
  unsigned int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t i;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50[2];
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  void **v57;
  __int128 v58[2];
  __int128 v59[10];
  _BYTE v60[40];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v53 = 0;
  v51 = 0u;
  v52 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v60);
  if (v60[0])
  {
    v54 = *(_OWORD *)&v60[8];
    v55 = *(_OWORD *)&v60[24];
    v7 = v61;
  }
  else
  {
    v54 = v51;
    v55 = v52;
    v7 = v53;
  }
  v56 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v55 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v55 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,realityio::DetailedError>::~Result((uint64_t)v60);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v51);
  v10 = v54;
  v11 = a4[1];
  v59[8] = *a4;
  v59[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v59[6] = *a4, v59[7] = v12, RETypeInfoIsArray()))
  {
    memset(v60, 0, 32);
    v59[4] = *(_OWORD *)v60;
    v59[5] = *(_OWORD *)&v60[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v59[2] = *(_OWORD *)v60, v59[3] = *(_OWORD *)&v60[16], RETypeInfoIsArray()))
    {
      v51 = 0uLL;
      *(_QWORD *)&v52 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v50[0] = *a2;
      v50[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v59[0] = *a4;
      v59[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (*((_QWORD *)&v51 + 1) != (_QWORD)v51)
      {
        v19 = 0;
        v20 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v54);
          v21 = v51;
          **(_QWORD **)(v51 + v19) = *(_QWORD *)(v56 + 8 * v20++);
          v19 += 16;
        }
        while (v20 < (*((_QWORD *)&v51 + 1) - v21) >> 4);
      }
LABEL_23:
      v57 = (void **)&v51;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v57);
      goto LABEL_24;
    }
    v22 = a4[1];
    v58[0] = *a4;
    v58[1] = v22;
    v45 = *(_DWORD *)a1;
    v23 = *(_QWORD *)(a1 + 8);
    v46 = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 48);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v47, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v48, (_DWORD *)(a1 + 20));
    v26 = *(_QWORD *)(a1 + 24);
    v49 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v49 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v49 & 7) != 0)
    {
      v30 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
    if (v46)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
    if ((v29 & 1) != 0)
    {
      v32 = (std::__shared_weak_count *)a2[1];
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      if (v32)
      {
        v35 = (unint64_t *)&v32->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v51 = 0uLL;
      *(_QWORD *)&v52 = 0;
      v37 = *a2;
      v38 = (std::__shared_weak_count *)a2[1];
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      if (v38)
      {
        v41 = (unint64_t *)&v38->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      if (v10)
      {
        v43 = 0;
        for (i = 0; i != v10; ++i)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v54);
          **(_QWORD **)(v51 + v43) = *(_QWORD *)(v56 + 8 * i);
          v43 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v54);
}

void sub_230189548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_ArrayOfArrays<pxrInternal__aapl__pxrReserved__::GfVec3f,float,3>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  char v32;
  unsigned int *v33;
  unsigned int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55[2];
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  void **v62;
  __int128 v63[2];
  __int128 v64[10];
  _BYTE v65[40];
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v58 = 0;
  v56 = 0u;
  v57 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v65);
  if (v65[0])
  {
    v59 = *(_OWORD *)&v65[8];
    v60 = *(_OWORD *)&v65[24];
    v7 = v66;
  }
  else
  {
    v59 = v56;
    v60 = v57;
    v7 = v58;
  }
  v61 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v60 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v60 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)v65);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
  v10 = v59;
  v11 = a4[1];
  v64[8] = *a4;
  v64[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v64[6] = *a4, v64[7] = v12, RETypeInfoIsArray()))
  {
    memset(v65, 0, 32);
    v64[4] = *(_OWORD *)v65;
    v64[5] = *(_OWORD *)&v65[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v64[2] = *(_OWORD *)v65, v64[3] = *(_OWORD *)&v65[16], RETypeInfoIsArray()))
    {
      v56 = 0uLL;
      *(_QWORD *)&v57 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v55[0] = *a2;
      v55[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v64[0] = *a4;
      v64[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (*((_QWORD *)&v56 + 1) != (_QWORD)v56)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
          v22 = v56;
          v23 = *(_QWORD *)(v56 + v20);
          v24 = *(_QWORD *)(v61 + v19);
          *(_DWORD *)(v23 + 8) = *(_DWORD *)(v61 + v19 + 8);
          *(_QWORD *)v23 = v24;
          ++v21;
          v20 += 16;
          v19 += 12;
        }
        while (v21 < (*((_QWORD *)&v56 + 1) - v22) >> 4);
      }
LABEL_23:
      v62 = (void **)&v56;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v62);
      goto LABEL_24;
    }
    v25 = a4[1];
    v63[0] = *a4;
    v63[1] = v25;
    v50 = *(_DWORD *)a1;
    v26 = *(_QWORD *)(a1 + 8);
    v51 = v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 48);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v52, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v53, (_DWORD *)(a1 + 20));
    v29 = *(_QWORD *)(a1 + 24);
    v54 = v29;
    if ((v29 & 7) != 0)
    {
      v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 2, v30));
      if ((v31 & 1) == 0)
        v54 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v54 & 7) != 0)
    {
      v33 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
    if (v51)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v51);
    if ((v32 & 1) != 0)
    {
      v35 = (std::__shared_weak_count *)a2[1];
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      if (v35)
      {
        v38 = (unint64_t *)&v35->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v56 = 0uLL;
      *(_QWORD *)&v57 = 0;
      v40 = *a2;
      v41 = (std::__shared_weak_count *)a2[1];
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      if (v41)
      {
        v44 = (unint64_t *)&v41->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (v10)
      {
        v46 = 0;
        v47 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
          v48 = *(_QWORD *)(v56 + v47);
          v49 = *(_QWORD *)(v61 + v46);
          *(_DWORD *)(v48 + 8) = *(_DWORD *)(v61 + v46 + 8);
          *(_QWORD *)v48 = v49;
          v47 += 16;
          v46 += 12;
          --v10;
        }
        while (v10);
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
}

void sub_230189A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_ArrayOfArrays<pxrInternal__aapl__pxrReserved__::GfVec4f,float,4>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  char v29;
  unsigned int *v30;
  unsigned int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49[2];
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  void **v56;
  __int128 v57[2];
  __int128 v58[10];
  _BYTE v59[40];
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v52 = 0;
  v50 = 0u;
  v51 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v59);
  if (v59[0])
  {
    v53 = *(_OWORD *)&v59[8];
    v54 = *(_OWORD *)&v59[24];
    v7 = v60;
  }
  else
  {
    v53 = v50;
    v54 = v51;
    v7 = v52;
  }
  v55 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v54 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v54 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,realityio::DetailedError>::~Result((uint64_t)v59);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v50);
  v10 = v53;
  v11 = a4[1];
  v58[8] = *a4;
  v58[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v58[6] = *a4, v58[7] = v12, RETypeInfoIsArray()))
  {
    memset(v59, 0, 32);
    v58[4] = *(_OWORD *)v59;
    v58[5] = *(_OWORD *)&v59[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v58[2] = *(_OWORD *)v59, v58[3] = *(_OWORD *)&v59[16], RETypeInfoIsArray()))
    {
      v50 = 0uLL;
      *(_QWORD *)&v51 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v49[0] = *a2;
      v49[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v58[0] = *a4;
      v58[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (*((_QWORD *)&v50 + 1) != (_QWORD)v50)
      {
        v19 = 0;
        v20 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53);
          v21 = v50;
          *(_OWORD *)*(_QWORD *)(v50 + v19) = *(_OWORD *)(v55 + v19);
          ++v20;
          v19 += 16;
        }
        while (v20 < (*((_QWORD *)&v50 + 1) - v21) >> 4);
      }
LABEL_23:
      v56 = (void **)&v50;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v56);
      goto LABEL_24;
    }
    v22 = a4[1];
    v57[0] = *a4;
    v57[1] = v22;
    v44 = *(_DWORD *)a1;
    v23 = *(_QWORD *)(a1 + 8);
    v45 = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 48);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v46, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v47, (_DWORD *)(a1 + 20));
    v26 = *(_QWORD *)(a1 + 24);
    v48 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v48 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v48 & 7) != 0)
    {
      v30 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stlxr(v31 - 2, v30));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
    if (v45)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v45);
    if ((v29 & 1) != 0)
    {
      v32 = (std::__shared_weak_count *)a2[1];
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      if (v32)
      {
        v35 = (unint64_t *)&v32->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v50 = 0uLL;
      *(_QWORD *)&v51 = 0;
      v37 = *a2;
      v38 = (std::__shared_weak_count *)a2[1];
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      if (v38)
      {
        v41 = (unint64_t *)&v38->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      if (v10)
      {
        v43 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53);
          *(_OWORD *)*(_QWORD *)(v50 + v43) = *(_OWORD *)(v55 + v43);
          v43 += 16;
          --v10;
        }
        while (v10);
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
}

void sub_230189EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<pxrInternal__aapl__pxrReserved__::GfQuatf,pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51[2];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  void **v58;
  __int128 v59[2];
  __int128 v60[10];
  _BYTE v61[40];
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v54 = 0;
  v52 = 0u;
  v53 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((uint64_t)v61, this);
  if (v61[0])
  {
    v55 = *(_OWORD *)&v61[8];
    v56 = *(_OWORD *)&v61[24];
    v7 = v62;
  }
  else
  {
    v55 = v52;
    v56 = v53;
    v7 = v54;
  }
  v57 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v56 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v56 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,realityio::DetailedError>::~Result((uint64_t)v61);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v52);
  v10 = v55;
  v11 = a4[1];
  v60[8] = *a4;
  v60[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v60[6] = *a4, v60[7] = v12, RETypeInfoIsArray()))
  {
    memset(v61, 0, 32);
    v60[4] = *(_OWORD *)v61;
    v60[5] = *(_OWORD *)&v61[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v60[2] = *(_OWORD *)v61, v60[3] = *(_OWORD *)&v61[16], RETypeInfoIsArray()))
    {
      v52 = 0uLL;
      *(_QWORD *)&v53 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v51[0] = *a2;
      v51[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v60[0] = *a4;
      v60[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v52;
      if (*((_QWORD *)&v52 + 1) != (_QWORD)v52)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_OWORD **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v55);
          *v22 = *(_OWORD *)(v57 + v20);
          ++v21;
          v19 = v52;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v52 + 1) - v52) >> 4);
      }
LABEL_23:
      v58 = (void **)&v52;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v58);
      goto LABEL_24;
    }
    v23 = a4[1];
    v59[0] = *a4;
    v59[1] = v23;
    v46 = *(_DWORD *)this;
    v24 = *((_QWORD *)this + 1);
    v47 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v48, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)this + 5);
    v27 = *((_QWORD *)this + 3);
    v50 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v50 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v50 & 7) != 0)
    {
      v31 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    if (v47)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v47);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v52 = 0uLL;
      *(_QWORD *)&v53 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        do
        {
          v45 = *(_OWORD **)(v52 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v55);
          *v45 = *(_OWORD *)(v57 + v44);
          v44 += 16;
          --v10;
        }
        while (v10);
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v55);
}

void sub_23018A368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<double,double>(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v62);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_QWORD **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_QWORD *)(v58 + 8 * v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)a1;
    v24 = *(_QWORD *)(a1 + 8);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)(a1 + 20));
    v27 = *(_QWORD *)(a1 + 24);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_QWORD **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_QWORD *)(v58 + 8 * i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_23018A814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_Array<BOOL,BOOL>(pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;
  unsigned int *v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  __int128 v60[2];
  __int128 v61[10];
  _BYTE v62[40];
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((uint64_t)v62, this);
  if (v62[0])
  {
    v56 = *(_OWORD *)&v62[8];
    v57 = *(_OWORD *)&v62[24];
    v7 = v63;
  }
  else
  {
    v56 = v53;
    v57 = v54;
    v7 = v55;
  }
  v58 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v57 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v57 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
  v10 = v56;
  v11 = a4[1];
  v61[8] = *a4;
  v61[9] = v11;
  if ((RETypeInfoIsList() & 1) != 0 || (v12 = a4[1], v61[6] = *a4, v61[7] = v12, RETypeInfoIsArray()))
  {
    memset(v62, 0, 32);
    v61[4] = *(_OWORD *)v62;
    v61[5] = *(_OWORD *)&v62[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v61[2] = *(_OWORD *)v62, v61[3] = *(_OWORD *)&v62[16], RETypeInfoIsArray()))
    {
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v13 = (std::__shared_weak_count *)a2[1];
      v52[0] = *a2;
      v52[1] = (uint64_t)v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = a4[1];
      v61[0] = *a4;
      v61[1] = v16;
      if (v13)
      {
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v53;
      if (*((_QWORD *)&v53 + 1) != (_QWORD)v53)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          v22 = *(_BYTE **)(v19 + v20);
          pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v22 = *(_BYTE *)(v58 + v21++);
          v19 = v53;
          v20 += 16;
        }
        while (v21 < (uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 4);
      }
LABEL_23:
      v59 = (void **)&v53;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
      goto LABEL_24;
    }
    v23 = a4[1];
    v60[0] = *a4;
    v60[1] = v23;
    v47 = *(_DWORD *)this;
    v24 = *((_QWORD *)this + 1);
    v48 = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 48);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)this + 5);
    v27 = *((_QWORD *)this + 3);
    v51 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v51 & 7) != 0)
    {
      v31 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
    if (v48)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
    if ((v30 & 1) != 0)
    {
      v33 = (std::__shared_weak_count *)a2[1];
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      if (v33)
      {
        v36 = (unint64_t *)&v33->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v53 = 0uLL;
      *(_QWORD *)&v54 = 0;
      v38 = *a2;
      v39 = (std::__shared_weak_count *)a2[1];
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v10)
      {
        v44 = 0;
        for (i = 0; i != v10; ++i)
        {
          v46 = *(_BYTE **)(v53 + v44);
          pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56);
          *v46 = *(_BYTE *)(v58 + i);
          v44 += 16;
        }
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v56);
}

void sub_23018ACC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a30 = (void **)&a19;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a30);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_StringArray(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  __int128 *EmptyString;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  void ***v32;
  __int128 v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  char v40;
  unsigned int *v41;
  unsigned int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  __int128 v57;
  uint64_t v58;
  std::string __p;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  std::string v69;
  uint64_t v70[2];
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77[2];
  __int128 v78[2];
  __int128 v79[2];
  __int128 v80[10];
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _BYTE v84[40];
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v76 = 0;
  v74 = 0u;
  v75 = 0u;
  *(_QWORD *)v84 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)v84, (pxrInternal__aapl__pxrReserved__::UsdObject *)a1);
    v81 = *(_OWORD *)&v84[8];
    v82 = *(_OWORD *)&v84[24];
    v83 = v85;
    if (v85)
    {
      v8 = (unint64_t *)(v85 - 16);
      if (*((_QWORD *)&v82 + 1))
        v8 = (unint64_t *)*((_QWORD *)&v82 + 1);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,realityio::DetailedError>::~Result((uint64_t)v84);
    if ((_QWORD)v81)
    {
      v10 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v81);
        if ((*(_QWORD *)(v83 + 8 * v10) & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (__int128 *)((*(_QWORD *)(v83 + 8 * v10) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = (__int128 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::emplace_back<std::string const&>((uint64_t)&v74, EmptyString);
        ++v10;
      }
      while (v10 < (unint64_t)v81);
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v81);
  }
  else
  {
    v73 = 0;
    v71 = 0u;
    v72 = 0u;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v84);
    if (v84[0])
    {
      v81 = *(_OWORD *)&v84[8];
      v82 = *(_OWORD *)&v84[24];
      v13 = v85;
    }
    else
    {
      v81 = v71;
      v82 = v72;
      v13 = v73;
    }
    v83 = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 - 16);
      if (*((_QWORD *)&v82 + 1))
        v14 = (unint64_t *)*((_QWORD *)&v82 + 1);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result((uint64_t)v84);
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v74);
    v74 = v81;
    v75 = v82;
    v81 = 0u;
    v82 = 0u;
    v76 = v83;
    v83 = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v81);
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v71);
  }
  v16 = v74;
  v17 = a4[1];
  v80[8] = *a4;
  v80[9] = v17;
  if ((RETypeInfoIsList() & 1) != 0 || (v18 = a4[1], v80[6] = *a4, v80[7] = v18, RETypeInfoIsArray()))
  {
    memset(v84, 0, 32);
    v80[4] = *(_OWORD *)v84;
    v80[5] = *(_OWORD *)&v84[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v80[2] = *(_OWORD *)v84, v80[3] = *(_OWORD *)&v84[16], RETypeInfoIsArray()))
    {
      v71 = 0uLL;
      *(_QWORD *)&v72 = 0;
      v19 = *a2;
      v20 = (std::__shared_weak_count *)a2[1];
      v70[0] = v19;
      v70[1] = (uint64_t)v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      v23 = a4[1];
      v80[0] = *a4;
      v80[1] = v23;
      if (v20)
      {
        v24 = (unint64_t *)&v20->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v81 = 0u;
      v82 = 0u;
      if (*((_QWORD *)&v71 + 1) != (_QWORD)v71)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v74);
          v29 = (__int128 *)(v76 + v26);
          if (*(char *)(v76 + v26 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)v29, *((_QWORD *)v29 + 1));
          }
          else
          {
            v30 = *v29;
            v69.__r_.__value_.__r.__words[2] = *((_QWORD *)v29 + 2);
            *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v30;
          }
          v31 = *(_QWORD *)(v71 + v27);
          v79[0] = v81;
          v79[1] = v82;
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          ++v28;
          v27 += 16;
          v26 += 24;
        }
        while (v28 < (uint64_t)(*((_QWORD *)&v71 + 1) - v71) >> 4);
      }
      *(_QWORD *)&v81 = &v71;
      v32 = (void ***)&v81;
LABEL_44:
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v32);
      goto LABEL_45;
    }
    v33 = a4[1];
    v78[0] = *a4;
    v78[1] = v33;
    v64 = *(_DWORD *)a1;
    v34 = *(_QWORD *)(a1 + 8);
    v65 = v34;
    if (v34)
    {
      v35 = (unint64_t *)(v34 + 48);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v66, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v67, (_DWORD *)(a1 + 20));
    v37 = *(_QWORD *)(a1 + 24);
    v68 = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 2, v38));
      if ((v39 & 1) == 0)
        v68 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v68 & 7) != 0)
    {
      v41 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
      do
        v42 = __ldxr(v41);
      while (__stlxr(v42 - 2, v41));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
    if (v65)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v65);
    if ((v40 & 1) != 0)
    {
      v43 = (std::__shared_weak_count *)a2[1];
      v62 = *a2;
      v63 = v43;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      if (v43)
      {
        v46 = (unint64_t *)&v43->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v81 = 0uLL;
      *(_QWORD *)&v82 = 0;
      v48 = *a2;
      v49 = (std::__shared_weak_count *)a2[1];
      v60 = v48;
      v61 = v49;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      if (v49)
      {
        v52 = (unint64_t *)&v49->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (v16)
      {
        v54 = 0;
        v55 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v74);
          v56 = (__int128 *)(v76 + v54);
          if (*(char *)(v76 + v54 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v56, *((_QWORD *)v56 + 1));
          }
          else
          {
            v57 = *v56;
            __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v56 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v57;
          }
          v58 = *(_QWORD *)(v81 + v55);
          v77[0] = *(_OWORD *)v84;
          v77[1] = *(_OWORD *)&v84[16];
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v55 += 16;
          v54 += 24;
          --v16;
        }
        while (v16);
      }
      *(_QWORD *)&v71 = &v81;
      v32 = (void ***)&v71;
      goto LABEL_44;
    }
  }
LABEL_45:
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v74);
}

void sub_23018B344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  a33 = v39 - 176;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&a39);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_AssetHandleArray(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__ *a3, __int128 *a4)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  char v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;
  const std::string::value_type **v27;
  __int128 v28;
  std::string v29;
  std::string __p;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t TypeName;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46[2];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    v38 = 0;
    v36 = 0u;
    v37 = 0u;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((uint64_t)&TypeName, (pxrInternal__aapl__pxrReserved__::UsdObject *)a1);
    if ((_BYTE)TypeName)
    {
      v39 = v43;
      v40 = v44;
      v8 = v45;
    }
    else
    {
      v39 = v36;
      v40 = v37;
      v8 = v38;
    }
    v41 = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 - 16);
      if (*((_QWORD *)&v40 + 1))
        v9 = (unint64_t *)*((_QWORD *)&v40 + 1);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,realityio::DetailedError>::~Result((uint64_t)&TypeName);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v36);
    v11 = v39;
    v12 = a4[1];
    v46[0] = *a4;
    v46[1] = v12;
    v31 = *(_DWORD *)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v32 = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 48);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v33, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v34, (_DWORD *)(a1 + 20));
    v16 = *(_QWORD *)(a1 + 24);
    v35 = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 2, v17));
      if ((v18 & 1) == 0)
        v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v35 & 7) != 0)
    {
      v20 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
    if (v32)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
    if ((v19 & 1) != 0)
    {
      REAssetHandleArrayClear();
      if ((_QWORD)v39)
      {
        v22 = 0;
        v23 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v39);
          v24 = v41;
          v25 = (__int128 *)(v41 + v22);
          if (*(char *)(v41 + v22 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
          }
          else
          {
            v26 = *v25;
            v29.__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 2);
            *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v26;
          }
          v27 = (const std::string::value_type **)(v24 + v22 + 24);
          if (*(char *)(v24 + v22 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *v27, *(_QWORD *)(v24 + v22 + 32));
          }
          else
          {
            v28 = *(_OWORD *)v27;
            __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v24 + v22 + 40);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
          }
          REAssetHandleArrayAdd();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          ++v23;
          v22 += 48;
        }
        while ((unint64_t)v39 > v23);
      }
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v39);
  }
}

void sub_23018B760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&a28);
  _Unwind_Resume(a1);
}

void std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo)>,void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo)>,void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFBD60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo)>,void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFBD60;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo)>,void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::operator()(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4, __int128 *a5)
{
  void (*v5)(uint64_t, __int128 *, uint64_t, _OWORD *);
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = *(void (**)(uint64_t, __int128 *, uint64_t, _OWORD *))(a1 + 8);
  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *a4;
  v8 = *a5;
  v9 = a5[1];
  v13 = v6;
  v14[0] = v8;
  v14[1] = v9;
  v5(a2, &v13, v7, v14);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_23018B908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo)>,void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo)>,void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::target_type()
{
}

_QWORD *std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>> const&>((uint64_t)a1, v4, a2, a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_23018B9FC(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>> const&>(uint64_t result, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v7 = result;
  v8 = (_QWORD *)(result + 8);
  if ((_QWORD *)(result + 8) != a2)
  {
    result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](result + 16, a3, a2 + 4);
    if (!(_DWORD)result)
    {
      result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, a2 + 4, a3);
      if (!(_DWORD)result)
      {
        v25 = a2;
        v26 = a2;
        v12 = &v25;
        if (a2)
          return result;
        goto LABEL_31;
      }
      v12 = (uint64_t **)(a2 + 1);
      v11 = (uint64_t *)a2[1];
      if (v11)
      {
        v13 = (_QWORD *)a2[1];
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        v17 = a2;
        do
        {
          v14 = (_QWORD *)v17[2];
          v16 = *v14 == (_QWORD)v17;
          v17 = v14;
        }
        while (!v16);
      }
      if (v14 != v8)
      {
        result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, a3, v14 + 4);
        if (!(_DWORD)result)
        {
LABEL_29:
          result = (uint64_t)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(v7, &v26, a3);
          v12 = (uint64_t **)result;
          goto LABEL_30;
        }
        v11 = *v12;
      }
      if (v11)
      {
        v26 = v14;
        v12 = (uint64_t **)v14;
      }
      else
      {
        v26 = a2;
      }
LABEL_30:
      if (*v12)
        return result;
      goto LABEL_31;
    }
  }
  if (*(_QWORD **)v7 != a2)
  {
    v9 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (_QWORD *)v15[2];
        v16 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v16);
    }
    result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, v10 + 4, a3);
    if ((_DWORD)result)
      goto LABEL_16;
    goto LABEL_29;
  }
  v10 = a2;
LABEL_16:
  if (*a2)
  {
    v26 = v10;
    v12 = (uint64_t **)(v10 + 1);
    goto LABEL_30;
  }
  v26 = a2;
  v12 = (uint64_t **)a2;
LABEL_31:
  v18 = (uint64_t *)operator new(0x48uLL);
  v19 = v18;
  v20 = *a4;
  v18[4] = *a4;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v18[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)(v18 + 5), (uint64_t)(a4 + 1));
  v23 = (uint64_t)v26;
  *v19 = 0;
  v19[1] = 0;
  v19[2] = v23;
  *v12 = v19;
  v24 = **(_QWORD **)v7;
  if (v24)
  {
    *(_QWORD *)v7 = v24;
    v19 = *v12;
  }
  result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v19);
  ++*(_QWORD *)(v7 + 16);
  return result;
}

void sub_23018BC30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = v1[4];
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (!a1)
    return;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*a1);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a1[1]);
  v2 = (_QWORD *)a1[8];
  if (v2 == a1 + 5)
  {
    v3 = 4;
    v2 = a1 + 5;
    goto LABEL_7;
  }
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  v4 = a1[4];
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  operator delete(a1);
}

_QWORD *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  unsigned int *v4;
  unsigned int v5;

  *a1 = a2;
  if ((a2 & 7) != 0)
  {
    v4 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](a1 + 1, a3);
  return a1;
}

_QWORD *std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  a1[1] = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>> const&>((uint64_t)a1, v3, v5 + 4, v5 + 4);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_23018BE00(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<unsigned long long>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v11;
  char v12;
  std::string::size_type v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t v15;
  char v16;
  std::string::size_type v17;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v19;
  std::type_info *v20;
  pxrInternal__aapl__pxrReserved__::VtValue *v21;
  uint64_t v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char v34;
  std::string::size_type v35;
  pxrInternal__aapl__pxrReserved__::TfToken *v36;
  uint64_t v37;
  char v38;
  std::string::size_type v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  std::string v47;
  void *__p[2];
  std::string::size_type v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  std::string v53;
  std::string v54;
  _QWORD v55[2];
  _BYTE v56[8];
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v45);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v45);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v45);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    v44 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v50;
      v15 = v51;
      v54.__r_.__value_.__r.__words[0] = v52;
      *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v52 + 7);
      v16 = HIBYTE(v52);
      v52 = 0uLL;
      v51 = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7);
      v17 = v54.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v15;
      *(_QWORD *)(a1 + 32) = v17;
      *(_BYTE *)(a1 + 47) = v16;
      if (SHIBYTE(v49) < 0)
        operator delete(__p[0]);
      goto LABEL_48;
    }
    v57 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v56))
      {
        v9 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
        *(_BYTE *)a1 = 1;
        *(_QWORD *)(a1 + 8) = v9;
        goto LABEL_47;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
      if ((pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB7D8], v19) & 1) != 0)
      {
        v20 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
        v21 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v54, (const pxrInternal__aapl__pxrReserved__::VtValue *)v20);
        if (v54.__r_.__value_.__l.__size_)
        {
          v22 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long long>(v21);
          *(_BYTE *)a1 = 1;
          *(_QWORD *)(a1 + 8) = v22;
        }
        else
        {
          v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a1 + 8) = v50;
          v37 = v51;
          v53.__r_.__value_.__r.__words[0] = v52;
          *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v52 + 7);
          v38 = HIBYTE(v52);
          v52 = 0uLL;
          v51 = 0;
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 7);
          v39 = v53.__r_.__value_.__r.__words[0];
          *(_QWORD *)(a1 + 24) = v37;
          *(_QWORD *)(a1 + 32) = v39;
          *(_BYTE *)(a1 + 47) = v38;
          if (SHIBYTE(v49) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v54);
        goto LABEL_47;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v50;
      v33 = v51;
      v54.__r_.__value_.__r.__words[0] = v52;
      *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v52 + 7);
      v34 = HIBYTE(v52);
      v52 = 0uLL;
      v51 = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7);
      v35 = v54.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v35;
      *(_BYTE *)(a1 + 47) = v34;
      if ((SHIBYTE(v49) & 0x80000000) == 0)
      {
LABEL_47:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
LABEL_48:
        v40 = v46;
        if (v46)
        {
          v41 = (unsigned int *)(v46 + 8);
          do
          {
            v42 = __ldxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        }
        return;
      }
      v32 = __p[0];
    }
    else
    {
      v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      std::operator+<char>();
      v23 = std::string::append(&v53, ") at the given time: ");
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v47, v44);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v47;
      else
        v25 = (std::string *)v47.__r_.__value_.__r.__words[0];
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      else
        size = v47.__r_.__value_.__l.__size_;
      v27 = std::string::append(&v54, (const std::string::value_type *)v25, size);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v50;
      v29 = v51;
      v55[0] = v52;
      *(_QWORD *)((char *)v55 + 7) = *(_QWORD *)((char *)&v52 + 7);
      v30 = HIBYTE(v52);
      v52 = 0uLL;
      v51 = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v55 + 7);
      v31 = v55[0];
      *(_QWORD *)(a1 + 24) = v29;
      *(_QWORD *)(a1 + 32) = v31;
      *(_BYTE *)(a1 + 47) = v30;
      if (SHIBYTE(v49) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_47;
      v32 = (void *)v53.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_47;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a1 + 8) = v50;
  v11 = v51;
  v54.__r_.__value_.__r.__words[0] = v52;
  *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v52 + 7);
  v12 = HIBYTE(v52);
  v52 = 0uLL;
  v51 = 0;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7);
  v13 = v54.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 47) = v12;
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
}

void sub_23018C36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (a11)
  {
    v33 = a11 + 2;
    do
    {
      v34 = __ldxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<long long>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v11;
  char v12;
  std::string::size_type v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t v15;
  char v16;
  std::string::size_type v17;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v19;
  std::type_info *v20;
  pxrInternal__aapl__pxrReserved__::VtValue *v21;
  uint64_t v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char v34;
  std::string::size_type v35;
  pxrInternal__aapl__pxrReserved__::TfToken *v36;
  uint64_t v37;
  char v38;
  std::string::size_type v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  std::string v47;
  void *__p[2];
  std::string::size_type v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  std::string v53;
  std::string v54;
  _QWORD v55[2];
  _BYTE v56[8];
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v45);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v45);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v45);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    v44 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v50;
      v15 = v51;
      v54.__r_.__value_.__r.__words[0] = v52;
      *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v52 + 7);
      v16 = HIBYTE(v52);
      v52 = 0uLL;
      v51 = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7);
      v17 = v54.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v15;
      *(_QWORD *)(a1 + 32) = v17;
      *(_BYTE *)(a1 + 47) = v16;
      if (SHIBYTE(v49) < 0)
        operator delete(__p[0]);
      goto LABEL_48;
    }
    v57 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v56))
      {
        v9 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
        *(_BYTE *)a1 = 1;
        *(_QWORD *)(a1 + 8) = v9;
        goto LABEL_47;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
      if ((pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB7D0], v19) & 1) != 0)
      {
        v20 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
        v21 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v54, (const pxrInternal__aapl__pxrReserved__::VtValue *)v20);
        if (v54.__r_.__value_.__l.__size_)
        {
          v22 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<long long>(v21);
          *(_BYTE *)a1 = 1;
          *(_QWORD *)(a1 + 8) = v22;
        }
        else
        {
          v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a1 + 8) = v50;
          v37 = v51;
          v53.__r_.__value_.__r.__words[0] = v52;
          *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v52 + 7);
          v38 = HIBYTE(v52);
          v52 = 0uLL;
          v51 = 0;
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 7);
          v39 = v53.__r_.__value_.__r.__words[0];
          *(_QWORD *)(a1 + 24) = v37;
          *(_QWORD *)(a1 + 32) = v39;
          *(_BYTE *)(a1 + 47) = v38;
          if (SHIBYTE(v49) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v54);
        goto LABEL_47;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v50;
      v33 = v51;
      v54.__r_.__value_.__r.__words[0] = v52;
      *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v52 + 7);
      v34 = HIBYTE(v52);
      v52 = 0uLL;
      v51 = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7);
      v35 = v54.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v35;
      *(_BYTE *)(a1 + 47) = v34;
      if ((SHIBYTE(v49) & 0x80000000) == 0)
      {
LABEL_47:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
LABEL_48:
        v40 = v46;
        if (v46)
        {
          v41 = (unsigned int *)(v46 + 8);
          do
          {
            v42 = __ldxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        }
        return;
      }
      v32 = __p[0];
    }
    else
    {
      v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      std::operator+<char>();
      v23 = std::string::append(&v53, ") at the given time: ");
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v47, v44);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v47;
      else
        v25 = (std::string *)v47.__r_.__value_.__r.__words[0];
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      else
        size = v47.__r_.__value_.__l.__size_;
      v27 = std::string::append(&v54, (const std::string::value_type *)v25, size);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v50;
      v29 = v51;
      v55[0] = v52;
      *(_QWORD *)((char *)v55 + 7) = *(_QWORD *)((char *)&v52 + 7);
      v30 = HIBYTE(v52);
      v52 = 0uLL;
      v51 = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v55 + 7);
      v31 = v55[0];
      *(_QWORD *)(a1 + 24) = v29;
      *(_QWORD *)(a1 + 32) = v31;
      *(_BYTE *)(a1 + 47) = v30;
      if (SHIBYTE(v49) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_47;
      v32 = (void *)v53.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_47;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a1 + 8) = v50;
  v11 = v51;
  v54.__r_.__value_.__r.__words[0] = v52;
  *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v52 + 7);
  v12 = HIBYTE(v52);
  v52 = 0uLL;
  v51 = 0;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7);
  v13 = v54.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 47) = v12;
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
}

void sub_23018C994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (a11)
  {
    v33 = a11 + 2;
    do
    {
      v34 = __ldxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::setReString(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  char *Name;
  __int128 *p_p;
  uint64_t v9;
  __int128 __p;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a3[1];
  v14 = *a3;
  v15 = v3;
  Name = (char *)RETypeInfoGetName();
  std::string::basic_string[abi:ne180100]<0>(&__p, Name);
  if ((v13 & 0x80000000) == 0)
  {
    if (v13 != 5)
    {
      if (v13 != 8)
      {
        if (v13 != 13)
          return 0;
        if ((_QWORD)__p != 0x5363696D616E7944 || *(_QWORD *)((char *)&__p + 5) != 0x676E697274536369)
          goto LABEL_35;
        goto LABEL_19;
      }
      p_p = &__p;
      goto LABEL_29;
    }
    if ((_DWORD)__p != 1918986339 || BYTE4(__p) != 42)
      goto LABEL_35;
LABEL_37:
    RENullTerminatedStringSet();
    goto LABEL_38;
  }
  if (*((_QWORD *)&__p + 1) == 5)
  {
    if (*(_DWORD *)__p != 1918986339 || *(_BYTE *)(__p + 4) != 42)
      goto LABEL_35;
    goto LABEL_37;
  }
  if (*((_QWORD *)&__p + 1) == 8)
  {
    p_p = (__int128 *)__p;
LABEL_29:
    if (*(_QWORD *)p_p == 0x4449676E69727453)
    {
      REStringIDSet();
      goto LABEL_38;
    }
LABEL_35:
    v9 = 0;
    goto LABEL_39;
  }
  if (*((_QWORD *)&__p + 1) != 13)
  {
    v9 = 0;
LABEL_40:
    operator delete((void *)__p);
    return v9;
  }
  if (*(_QWORD *)__p != 0x5363696D616E7944 || *(_QWORD *)(__p + 5) != 0x676E697274536369)
    goto LABEL_35;
LABEL_19:
  REDynamicStringSet();
LABEL_38:
  v9 = 1;
LABEL_39:
  if (v13 < 0)
    goto LABEL_40;
  return v9;
}

void sub_23018CC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::generateAsset(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  uint64_t v6;
  void *v7;
  size_t v8;
  void **v9;
  uint64_t AssetHandle;
  void *v13[2];
  void *v14[2];
  __int128 v15;
  void *v16[2];
  __int128 v17;
  __int128 v18;
  void *__p[2];
  uint64_t v20;
  std::string v21;
  std::string v22;
  uint64_t v23;
  void *v24[2];
  unsigned __int8 v25;
  std::string v26;

  v5 = (_OWORD *)(a3 + 24);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *v5;
    v26.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 40);
  }
  pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
  v6 = 0;
  while (1)
  {
    v8 = (size_t)v7;
    if ((char)v25 < 0)
      break;
    if (v7 == (void *)v25)
    {
      v9 = v24;
      goto LABEL_11;
    }
LABEL_32:
    if (++v6 == 10)
    {
      realityio::Inputs::assetManager(a1);
      AssetHandle = REAssetManagerCreateAssetHandle();
      goto LABEL_34;
    }
  }
  if (v7 != v24[1])
    goto LABEL_32;
  if (v7 == (void *)-1)
    std::string::__throw_out_of_range[abi:ne180100]();
  v9 = (void **)v24[0];
LABEL_11:
  {
    goto LABEL_32;
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v21 = *(std::string *)a3;
  if (*(char *)(a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  else
    v22 = *(std::string *)v5;
  v20 = 0;
  v18 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v16 = 0u;
  v17 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  *(_OWORD *)v13 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v13);
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  DWORD2(v17) = 0;
  HIDWORD(v17) = realityio::TextureSwizzleChannels::kDefault;
  LOBYTE(v18) = 2;
  DWORD1(v18) = 0;
  WORD4(v18) = 512;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  realityio::TextureBuilder::createStandardTextureAsset((std::string::size_type)a1, a2, (uint64_t)&v21, (uint64_t)v13, (std::string::size_type *)&v23);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v17) < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[1]);
  if (SHIBYTE(v14[0]) < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  AssetHandle = v23;
  if (!v23)
  {
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v23);
    goto LABEL_32;
  }
  v23 = 0;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v23);
LABEL_34:
  if ((char)v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return AssetHandle;
}

void sub_23018CF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 113) < 0)
    operator delete(*(void **)(v41 - 136));
  if (*(char *)(v41 - 89) < 0)
    operator delete(*(void **)(v41 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::validateArraySize(__int128 *a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  realityio *Size;
  int v10;
  NSObject *v12;
  uint64_t Text;
  int v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = a1[1];
  v25 = *a1;
  v26 = v6;
  if (!RETypeInfoIsArray())
    return 1;
  v7 = a1[1];
  v23 = *a1;
  v24 = v7;
  if (!RETypeInfoIsFixedSizeArray())
    return 1;
  v8 = a1[1];
  v21 = *a1;
  v22 = v8;
  Size = (realityio *)REArrayAccessorGetSize();
  v10 = (int)Size;
  if (a3 == (int)Size)
    return 1;
  v12 = *(id *)(realityio::logObjects(Size) + 24);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v14);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14);
    *(_DWORD *)buf = 134218498;
    v16 = a3;
    v17 = 1024;
    v18 = v10;
    v19 = 2080;
    v20 = Text;
    _os_log_impl(&dword_22FF26000, v12, OS_LOG_TYPE_DEFAULT, "Property size, %zu, does not match expected size, %d, for (\"%s\")", buf, 0x1Cu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  }

  return 0;
}

void sub_23018D13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v16;
  char v17;
  std::string::size_type v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  uint64_t v20;
  char v21;
  std::string::size_type v22;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v24;
  const pxrInternal__aapl__pxrReserved__::VtValue *v25;
  std::type_info *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  std::string::size_type v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  pxrInternal__aapl__pxrReserved__::TfToken *v46;
  uint64_t v47;
  char v48;
  std::string::size_type v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  void *__p[2];
  std::string::size_type v59;
  std::string v60;
  std::string v61;
  _QWORD v62[2];
  std::type_info v63;
  __int128 v64;
  _BYTE v65[24];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    v54 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v20 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v21 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v22 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v22;
      *(_BYTE *)(a1 + 47) = v21;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      goto LABEL_59;
    }
    v63.__type_name = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63))
      {
        v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
        v10 = *(_OWORD *)(v9 + 16);
        v64 = *(_OWORD *)v9;
        *(_OWORD *)v65 = v10;
        v11 = *(_QWORD *)(v9 + 32);
        if (v11)
        {
          v12 = *(unint64_t **)&v65[8];
          if (!*(_QWORD *)&v65[8])
            v12 = (unint64_t *)(v11 - 16);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_BYTE *)a1 = 1;
        v14 = *(_OWORD *)v65;
        *(_OWORD *)(a1 + 8) = v64;
        *(_OWORD *)(a1 + 24) = v14;
        v64 = 0u;
        *(_OWORD *)v65 = 0u;
        *(_QWORD *)(a1 + 40) = v11;
        *(_QWORD *)&v65[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63) & 1) != 0)
        {
          v26 = &v63;
        }
        else
        {
          v26 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v63, &v64);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61, (const pxrInternal__aapl__pxrReserved__::VtValue *)v26);
        if (v61.__r_.__value_.__l.__size_)
        {
          v40 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
          v41 = *(_OWORD *)(v40 + 16);
          v64 = *(_OWORD *)v40;
          *(_OWORD *)v65 = v41;
          v42 = *(_QWORD *)(v40 + 32);
          if (v42)
          {
            v43 = *(unint64_t **)&v65[8];
            if (!*(_QWORD *)&v65[8])
              v43 = (unint64_t *)(v42 - 16);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          *(_BYTE *)a1 = 1;
          v45 = *(_OWORD *)v65;
          *(_OWORD *)(a1 + 8) = v64;
          *(_OWORD *)(a1 + 24) = v45;
          v64 = 0u;
          *(_OWORD *)v65 = 0u;
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)&v65[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64);
        }
        else
        {
          v46 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v46);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a1 + 8) = v64;
          v60.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
          v47 = *(_QWORD *)v65;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
          v48 = v65[23];
          memset(v65, 0, sizeof(v65));
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
          v49 = v60.__r_.__value_.__r.__words[0];
          *(_QWORD *)(a1 + 24) = v47;
          *(_QWORD *)(a1 + 32) = v49;
          *(_BYTE *)(a1 + 47) = v48;
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v37 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v38 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v39 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v37;
      *(_QWORD *)(a1 + 32) = v39;
      *(_BYTE *)(a1 + 47) = v38;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
LABEL_59:
        v50 = v56;
        if (v56)
        {
          v51 = (unsigned int *)(v56 + 8);
          do
          {
            v52 = __ldxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        }
        return;
      }
      v36 = __p[0];
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
      std::operator+<char>();
      v27 = std::string::append(&v60, ") at the given time: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v57, v54);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v57;
      else
        v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        size = v57.__r_.__value_.__l.__size_;
      v31 = std::string::append(&v61, (const std::string::value_type *)v29, size);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v59 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v62[0] = *(_QWORD *)&v65[8];
      v33 = *(_QWORD *)v65;
      *(_QWORD *)((char *)v62 + 7) = *(_QWORD *)&v65[15];
      v34 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v62 + 7);
      v35 = v62[0];
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v35;
      *(_BYTE *)(a1 + 47) = v34;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      v36 = (void *)v60.__r_.__value_.__r.__words[0];
    }
    operator delete(v36);
    goto LABEL_58;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a1 + 8) = v64;
  v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
  v16 = *(_QWORD *)v65;
  *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
  v17 = v65[23];
  memset(v65, 0, sizeof(v65));
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
  v18 = v61.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v18;
  *(_BYTE *)(a1 + 47) = v17;
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
}

void sub_23018D7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (a11)
  {
    v33 = a11 + 2;
    do
    {
      v34 = __ldxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v16;
  char v17;
  std::string::size_type v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  uint64_t v20;
  char v21;
  std::string::size_type v22;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v24;
  const pxrInternal__aapl__pxrReserved__::VtValue *v25;
  std::type_info *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  std::string::size_type v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  pxrInternal__aapl__pxrReserved__::TfToken *v46;
  uint64_t v47;
  char v48;
  std::string::size_type v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  void *__p[2];
  std::string::size_type v59;
  std::string v60;
  std::string v61;
  _QWORD v62[2];
  std::type_info v63;
  __int128 v64;
  _BYTE v65[24];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    v54 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v20 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v21 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v22 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v22;
      *(_BYTE *)(a1 + 47) = v21;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      goto LABEL_59;
    }
    v63.__type_name = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63))
      {
        v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
        v10 = *(_OWORD *)(v9 + 16);
        v64 = *(_OWORD *)v9;
        *(_OWORD *)v65 = v10;
        v11 = *(_QWORD *)(v9 + 32);
        if (v11)
        {
          v12 = *(unint64_t **)&v65[8];
          if (!*(_QWORD *)&v65[8])
            v12 = (unint64_t *)(v11 - 16);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_BYTE *)a1 = 1;
        v14 = *(_OWORD *)v65;
        *(_OWORD *)(a1 + 8) = v64;
        *(_OWORD *)(a1 + 24) = v14;
        v64 = 0u;
        *(_OWORD *)v65 = 0u;
        *(_QWORD *)(a1 + 40) = v11;
        *(_QWORD *)&v65[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63) & 1) != 0)
        {
          v26 = &v63;
        }
        else
        {
          v26 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v63, &v64);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61, (const pxrInternal__aapl__pxrReserved__::VtValue *)v26);
        if (v61.__r_.__value_.__l.__size_)
        {
          v40 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
          v41 = *(_OWORD *)(v40 + 16);
          v64 = *(_OWORD *)v40;
          *(_OWORD *)v65 = v41;
          v42 = *(_QWORD *)(v40 + 32);
          if (v42)
          {
            v43 = *(unint64_t **)&v65[8];
            if (!*(_QWORD *)&v65[8])
              v43 = (unint64_t *)(v42 - 16);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          *(_BYTE *)a1 = 1;
          v45 = *(_OWORD *)v65;
          *(_OWORD *)(a1 + 8) = v64;
          *(_OWORD *)(a1 + 24) = v45;
          v64 = 0u;
          *(_OWORD *)v65 = 0u;
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)&v65[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64);
        }
        else
        {
          v46 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v46);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a1 + 8) = v64;
          v60.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
          v47 = *(_QWORD *)v65;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
          v48 = v65[23];
          memset(v65, 0, sizeof(v65));
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
          v49 = v60.__r_.__value_.__r.__words[0];
          *(_QWORD *)(a1 + 24) = v47;
          *(_QWORD *)(a1 + 32) = v49;
          *(_BYTE *)(a1 + 47) = v48;
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v37 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v38 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v39 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v37;
      *(_QWORD *)(a1 + 32) = v39;
      *(_BYTE *)(a1 + 47) = v38;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
LABEL_59:
        v50 = v56;
        if (v56)
        {
          v51 = (unsigned int *)(v56 + 8);
          do
          {
            v52 = __ldxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        }
        return;
      }
      v36 = __p[0];
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
      std::operator+<char>();
      v27 = std::string::append(&v60, ") at the given time: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v57, v54);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v57;
      else
        v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        size = v57.__r_.__value_.__l.__size_;
      v31 = std::string::append(&v61, (const std::string::value_type *)v29, size);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v59 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v62[0] = *(_QWORD *)&v65[8];
      v33 = *(_QWORD *)v65;
      *(_QWORD *)((char *)v62 + 7) = *(_QWORD *)&v65[15];
      v34 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v62 + 7);
      v35 = v62[0];
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v35;
      *(_BYTE *)(a1 + 47) = v34;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      v36 = (void *)v60.__r_.__value_.__r.__words[0];
    }
    operator delete(v36);
    goto LABEL_58;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a1 + 8) = v64;
  v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
  v16 = *(_QWORD *)v65;
  *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
  v17 = v65[23];
  memset(v65, 0, sizeof(v65));
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
  v18 = v61.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v18;
  *(_BYTE *)(a1 + 47) = v17;
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
}

void sub_23018E010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (a11)
  {
    v33 = a11 + 2;
    do
    {
      v34 = __ldxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v16;
  char v17;
  std::string::size_type v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  uint64_t v20;
  char v21;
  std::string::size_type v22;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v24;
  const pxrInternal__aapl__pxrReserved__::VtValue *v25;
  std::type_info *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  std::string::size_type v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  pxrInternal__aapl__pxrReserved__::TfToken *v46;
  uint64_t v47;
  char v48;
  std::string::size_type v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  void *__p[2];
  std::string::size_type v59;
  std::string v60;
  std::string v61;
  _QWORD v62[2];
  std::type_info v63;
  __int128 v64;
  _BYTE v65[24];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    v54 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v20 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v21 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v22 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v22;
      *(_BYTE *)(a1 + 47) = v21;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      goto LABEL_59;
    }
    v63.__type_name = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63))
      {
        v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
        v10 = *(_OWORD *)(v9 + 16);
        v64 = *(_OWORD *)v9;
        *(_OWORD *)v65 = v10;
        v11 = *(_QWORD *)(v9 + 32);
        if (v11)
        {
          v12 = *(unint64_t **)&v65[8];
          if (!*(_QWORD *)&v65[8])
            v12 = (unint64_t *)(v11 - 16);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_BYTE *)a1 = 1;
        v14 = *(_OWORD *)v65;
        *(_OWORD *)(a1 + 8) = v64;
        *(_OWORD *)(a1 + 24) = v14;
        v64 = 0u;
        *(_OWORD *)v65 = 0u;
        *(_QWORD *)(a1 + 40) = v11;
        *(_QWORD *)&v65[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63) & 1) != 0)
        {
          v26 = &v63;
        }
        else
        {
          v26 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v63, &v64);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61, (const pxrInternal__aapl__pxrReserved__::VtValue *)v26);
        if (v61.__r_.__value_.__l.__size_)
        {
          v40 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
          v41 = *(_OWORD *)(v40 + 16);
          v64 = *(_OWORD *)v40;
          *(_OWORD *)v65 = v41;
          v42 = *(_QWORD *)(v40 + 32);
          if (v42)
          {
            v43 = *(unint64_t **)&v65[8];
            if (!*(_QWORD *)&v65[8])
              v43 = (unint64_t *)(v42 - 16);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          *(_BYTE *)a1 = 1;
          v45 = *(_OWORD *)v65;
          *(_OWORD *)(a1 + 8) = v64;
          *(_OWORD *)(a1 + 24) = v45;
          v64 = 0u;
          *(_OWORD *)v65 = 0u;
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)&v65[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64);
        }
        else
        {
          v46 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v46);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a1 + 8) = v64;
          v60.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
          v47 = *(_QWORD *)v65;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
          v48 = v65[23];
          memset(v65, 0, sizeof(v65));
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
          v49 = v60.__r_.__value_.__r.__words[0];
          *(_QWORD *)(a1 + 24) = v47;
          *(_QWORD *)(a1 + 32) = v49;
          *(_BYTE *)(a1 + 47) = v48;
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v37 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v38 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v39 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v37;
      *(_QWORD *)(a1 + 32) = v39;
      *(_BYTE *)(a1 + 47) = v38;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
LABEL_59:
        v50 = v56;
        if (v56)
        {
          v51 = (unsigned int *)(v56 + 8);
          do
          {
            v52 = __ldxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        }
        return;
      }
      v36 = __p[0];
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
      std::operator+<char>();
      v27 = std::string::append(&v60, ") at the given time: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v57, v54);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v57;
      else
        v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        size = v57.__r_.__value_.__l.__size_;
      v31 = std::string::append(&v61, (const std::string::value_type *)v29, size);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v59 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v62[0] = *(_QWORD *)&v65[8];
      v33 = *(_QWORD *)v65;
      *(_QWORD *)((char *)v62 + 7) = *(_QWORD *)&v65[15];
      v34 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v62 + 7);
      v35 = v62[0];
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v35;
      *(_BYTE *)(a1 + 47) = v34;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      v36 = (void *)v60.__r_.__value_.__r.__words[0];
    }
    operator delete(v36);
    goto LABEL_58;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a1 + 8) = v64;
  v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
  v16 = *(_QWORD *)v65;
  *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
  v17 = v65[23];
  memset(v65, 0, sizeof(v65));
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
  v18 = v61.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v18;
  *(_BYTE *)(a1 + 47) = v17;
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
}

void sub_23018E878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (a11)
  {
    v33 = a11 + 2;
    do
    {
      v34 = __ldxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v16;
  char v17;
  std::string::size_type v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  uint64_t v20;
  char v21;
  std::string::size_type v22;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v24;
  const pxrInternal__aapl__pxrReserved__::VtValue *v25;
  std::type_info *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  std::string::size_type v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  pxrInternal__aapl__pxrReserved__::TfToken *v46;
  uint64_t v47;
  char v48;
  std::string::size_type v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  void *__p[2];
  std::string::size_type v59;
  std::string v60;
  std::string v61;
  _QWORD v62[2];
  std::type_info v63;
  __int128 v64;
  _BYTE v65[24];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    v54 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v20 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v21 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v22 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v22;
      *(_BYTE *)(a1 + 47) = v21;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      goto LABEL_59;
    }
    v63.__type_name = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63))
      {
        v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
        v10 = *(_OWORD *)(v9 + 16);
        v64 = *(_OWORD *)v9;
        *(_OWORD *)v65 = v10;
        v11 = *(_QWORD *)(v9 + 32);
        if (v11)
        {
          v12 = *(unint64_t **)&v65[8];
          if (!*(_QWORD *)&v65[8])
            v12 = (unint64_t *)(v11 - 16);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_BYTE *)a1 = 1;
        v14 = *(_OWORD *)v65;
        *(_OWORD *)(a1 + 8) = v64;
        *(_OWORD *)(a1 + 24) = v14;
        v64 = 0u;
        *(_OWORD *)v65 = 0u;
        *(_QWORD *)(a1 + 40) = v11;
        *(_QWORD *)&v65[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v64);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63) & 1) != 0)
        {
          v26 = &v63;
        }
        else
        {
          v26 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v63, &v64);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61, (const pxrInternal__aapl__pxrReserved__::VtValue *)v26);
        if (v61.__r_.__value_.__l.__size_)
        {
          v40 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
          v41 = *(_OWORD *)(v40 + 16);
          v64 = *(_OWORD *)v40;
          *(_OWORD *)v65 = v41;
          v42 = *(_QWORD *)(v40 + 32);
          if (v42)
          {
            v43 = *(unint64_t **)&v65[8];
            if (!*(_QWORD *)&v65[8])
              v43 = (unint64_t *)(v42 - 16);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          *(_BYTE *)a1 = 1;
          v45 = *(_OWORD *)v65;
          *(_OWORD *)(a1 + 8) = v64;
          *(_OWORD *)(a1 + 24) = v45;
          v64 = 0u;
          *(_OWORD *)v65 = 0u;
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)&v65[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v64);
        }
        else
        {
          v46 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v46);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a1 + 8) = v64;
          v60.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
          v47 = *(_QWORD *)v65;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
          v48 = v65[23];
          memset(v65, 0, sizeof(v65));
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
          v49 = v60.__r_.__value_.__r.__words[0];
          *(_QWORD *)(a1 + 24) = v47;
          *(_QWORD *)(a1 + 32) = v49;
          *(_BYTE *)(a1 + 47) = v48;
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v37 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v38 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v39 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v37;
      *(_QWORD *)(a1 + 32) = v39;
      *(_BYTE *)(a1 + 47) = v38;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
LABEL_59:
        v50 = v56;
        if (v56)
        {
          v51 = (unsigned int *)(v56 + 8);
          do
          {
            v52 = __ldxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        }
        return;
      }
      v36 = __p[0];
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
      std::operator+<char>();
      v27 = std::string::append(&v60, ") at the given time: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v57, v54);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v57;
      else
        v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        size = v57.__r_.__value_.__l.__size_;
      v31 = std::string::append(&v61, (const std::string::value_type *)v29, size);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v59 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v62[0] = *(_QWORD *)&v65[8];
      v33 = *(_QWORD *)v65;
      *(_QWORD *)((char *)v62 + 7) = *(_QWORD *)&v65[15];
      v34 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v62 + 7);
      v35 = v62[0];
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v35;
      *(_BYTE *)(a1 + 47) = v34;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      v36 = (void *)v60.__r_.__value_.__r.__words[0];
    }
    operator delete(v36);
    goto LABEL_58;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a1 + 8) = v64;
  v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
  v16 = *(_QWORD *)v65;
  *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
  v17 = v65[23];
  memset(v65, 0, sizeof(v65));
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
  v18 = v61.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v18;
  *(_BYTE *)(a1 + 47) = v17;
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
}

void sub_23018F0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (a11)
  {
    v33 = a11 + 2;
    do
    {
      v34 = __ldxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((_QWORD *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::emplace_back<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *New;
  uint64_t v15;
  std::string *v16;
  __int128 v17;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_16;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_16;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      v9 = (std::string *)(v5 + 24 * v4);
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v10 = *a2;
        v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
LABEL_15:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_16:
    v11 = *(_QWORD *)(a1 + 32);
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew(a1, v13);
    v15 = 3 * v4;
    std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v11, v11 + 8 * v15, (uint64_t)New);
    v16 = (std::string *)&New[v15];
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v17 = *a2;
      v16->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
    }
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef((_QWORD *)a1);
    *(_QWORD *)(a1 + 32) = New;
    goto LABEL_15;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v16;
  char v17;
  std::string::size_type v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  uint64_t v20;
  char v21;
  std::string::size_type v22;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v24;
  const pxrInternal__aapl__pxrReserved__::VtValue *v25;
  std::type_info *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  std::string::size_type v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  pxrInternal__aapl__pxrReserved__::TfToken *v46;
  uint64_t v47;
  char v48;
  std::string::size_type v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  void *__p[2];
  std::string::size_type v59;
  std::string v60;
  std::string v61;
  _QWORD v62[2];
  std::type_info v63;
  __int128 v64;
  _BYTE v65[24];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    v54 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v20 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v21 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v22 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v22;
      *(_BYTE *)(a1 + 47) = v21;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      goto LABEL_59;
    }
    v63.__type_name = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63))
      {
        v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
        v10 = *(_OWORD *)(v9 + 16);
        v64 = *(_OWORD *)v9;
        *(_OWORD *)v65 = v10;
        v11 = *(_QWORD *)(v9 + 32);
        if (v11)
        {
          v12 = *(unint64_t **)&v65[8];
          if (!*(_QWORD *)&v65[8])
            v12 = (unint64_t *)(v11 - 16);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_BYTE *)a1 = 1;
        v14 = *(_OWORD *)v65;
        *(_OWORD *)(a1 + 8) = v64;
        *(_OWORD *)(a1 + 24) = v14;
        v64 = 0u;
        *(_OWORD *)v65 = 0u;
        *(_QWORD *)(a1 + 40) = v11;
        *(_QWORD *)&v65[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v64);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63) & 1) != 0)
        {
          v26 = &v63;
        }
        else
        {
          v26 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v63, &v64);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61, (const pxrInternal__aapl__pxrReserved__::VtValue *)v26);
        if (v61.__r_.__value_.__l.__size_)
        {
          v40 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
          v41 = *(_OWORD *)(v40 + 16);
          v64 = *(_OWORD *)v40;
          *(_OWORD *)v65 = v41;
          v42 = *(_QWORD *)(v40 + 32);
          if (v42)
          {
            v43 = *(unint64_t **)&v65[8];
            if (!*(_QWORD *)&v65[8])
              v43 = (unint64_t *)(v42 - 16);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          *(_BYTE *)a1 = 1;
          v45 = *(_OWORD *)v65;
          *(_OWORD *)(a1 + 8) = v64;
          *(_OWORD *)(a1 + 24) = v45;
          v64 = 0u;
          *(_OWORD *)v65 = 0u;
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)&v65[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v64);
        }
        else
        {
          v46 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v46);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a1 + 8) = v64;
          v60.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
          v47 = *(_QWORD *)v65;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
          v48 = v65[23];
          memset(v65, 0, sizeof(v65));
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
          v49 = v60.__r_.__value_.__r.__words[0];
          *(_QWORD *)(a1 + 24) = v47;
          *(_QWORD *)(a1 + 32) = v49;
          *(_BYTE *)(a1 + 47) = v48;
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v37 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v38 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v39 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v37;
      *(_QWORD *)(a1 + 32) = v39;
      *(_BYTE *)(a1 + 47) = v38;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
LABEL_59:
        v50 = v56;
        if (v56)
        {
          v51 = (unsigned int *)(v56 + 8);
          do
          {
            v52 = __ldxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        }
        return;
      }
      v36 = __p[0];
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
      std::operator+<char>();
      v27 = std::string::append(&v60, ") at the given time: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v57, v54);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v57;
      else
        v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        size = v57.__r_.__value_.__l.__size_;
      v31 = std::string::append(&v61, (const std::string::value_type *)v29, size);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v59 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v62[0] = *(_QWORD *)&v65[8];
      v33 = *(_QWORD *)v65;
      *(_QWORD *)((char *)v62 + 7) = *(_QWORD *)&v65[15];
      v34 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v62 + 7);
      v35 = v62[0];
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v35;
      *(_BYTE *)(a1 + 47) = v34;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      v36 = (void *)v60.__r_.__value_.__r.__words[0];
    }
    operator delete(v36);
    goto LABEL_58;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a1 + 8) = v64;
  v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
  v16 = *(_QWORD *)v65;
  *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
  v17 = v65[23];
  memset(v65, 0, sizeof(v65));
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
  v18 = v61.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v18;
  *(_BYTE *)(a1 + 47) = v17;
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
}

void sub_23018F9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (a11)
  {
    v33 = a11 + 2;
    do
    {
      v34 = __ldxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(_QWORD *result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef((_QWORD *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::map[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  qword_255E54E28 = 0;
  qword_255E54E20 = 0;
  if (a2)
  {
    v2 = (uint64_t *)result;
    v3 = 0;
    v4 = (uint64_t *)(result + 32 * a2);
    v5 = &qword_255E54E20;
    while (v5 != &qword_255E54E20)
    {
      if (v3)
      {
        do
        {
          v6 = (uint64_t *)v3;
          v3 = *(_QWORD *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        v7 = &qword_255E54E20;
        do
        {
          v6 = (uint64_t *)v7[2];
          v8 = *v6 == (_QWORD)v7;
          v7 = v6;
        }
        while (v8);
      }
      result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54E28, v6 + 4, v2);
      v3 = qword_255E54E20;
      if ((_DWORD)result)
        goto LABEL_11;
      if (qword_255E54E20)
      {
        v9 = &qword_255E54E20;
        while (1)
        {
          while (1)
          {
            v6 = (uint64_t *)v3;
            v10 = (uint64_t *)(v3 + 32);
            if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54E28, v2, (uint64_t *)(v3 + 32)))break;
            v3 = *v6;
            v9 = v6;
            if (!*v6)
              goto LABEL_24;
          }
          result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54E28, v10, v2);
          if (!(_DWORD)result)
            break;
          v9 = v6 + 1;
          v3 = v6[1];
          if (!v3)
            goto LABEL_24;
        }
LABEL_13:
        if (*v9)
          goto LABEL_32;
        goto LABEL_24;
      }
LABEL_23:
      v9 = &qword_255E54E20;
      v6 = &qword_255E54E20;
LABEL_24:
      v11 = (uint64_t *)operator new(0x40uLL);
      v12 = v11;
      v13 = *v2;
      v11[4] = *v2;
      if ((v13 & 7) != 0)
      {
        v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 2, v14));
        if ((v15 & 1) == 0)
          v11[4] &= 0xFFFFFFFFFFFFFFF8;
      }
      std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v11 + 5, v2 + 1);
      *v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v6;
      *v9 = (uint64_t)v12;
      {
        v12 = (uint64_t *)*v9;
      }
      result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_255E54E20, v12);
      ++qword_255E54E28;
LABEL_32:
      v2 += 4;
      if (v2 == v4)
        return result;
      v3 = qword_255E54E20;
    }
    v6 = &qword_255E54E20;
LABEL_11:
    if (v3)
    {
      v9 = v6 + 1;
      goto LABEL_13;
    }
    goto LABEL_23;
  }
  return result;
}

void sub_23018FDF0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = v1[4];
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  operator delete(v1);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>>::destroy(*(_QWORD **)(v2 + 3616));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)a1[6]);
    v2 = a1[4];
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    operator delete(a1);
  }
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 __p;
  _BYTE v22[8];
  uint64_t v23;
  void *v24[2];
  char v25;
  _QWORD v26[2];
  _BYTE buf[24];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(a1, (pxrInternal__aapl__pxrReserved__::UsdObject *)&__p);
      if (!*(_BYTE *)a1)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v20 = *(_QWORD *)(a1 + 24);
          v19 = a1 + 24;
          v18 = v20;
          if (*(char *)(v19 + 23) >= 0)
            v18 = v19;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v18;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      v13 = *(_QWORD *)&buf[16];
      v26[0] = v28;
      *(_QWORD *)((char *)v26 + 7) = *(_QWORD *)((char *)&v28 + 7);
      v14 = HIBYTE(v28);
      v28 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v26 + 7);
      v15 = v26[0];
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v15;
      *(_BYTE *)(a1 + 47) = v14;
      if (v25 < 0)
        operator delete(v24[0]);
    }
    if ((v23 & 7) != 0)
    {
      v16 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v22);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    v10 = *(_QWORD *)&buf[16];
    v24[0] = (void *)v28;
    *(void **)((char *)v24 + 7) = *(void **)((char *)&v28 + 7);
    v11 = HIBYTE(v28);
    v28 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v24 + 7);
    v12 = v24[0];
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v12;
    *(_BYTE *)(a1 + 47) = v11;
    if ((v22[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_230190100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v16;
  char v17;
  std::string::size_type v18;
  pxrInternal__aapl__pxrReserved__::TfToken *v19;
  uint64_t v20;
  char v21;
  std::string::size_type v22;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v24;
  const pxrInternal__aapl__pxrReserved__::VtValue *v25;
  std::type_info *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  std::string::size_type v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  pxrInternal__aapl__pxrReserved__::TfToken *v46;
  uint64_t v47;
  char v48;
  std::string::size_type v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  void *__p[2];
  std::string::size_type v59;
  std::string v60;
  std::string v61;
  _QWORD v62[2];
  std::type_info v63;
  __int128 v64;
  _BYTE v65[24];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v55);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    v54 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v20 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v21 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v22 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v22;
      *(_BYTE *)(a1 + 47) = v21;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      goto LABEL_59;
    }
    v63.__type_name = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63))
      {
        v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
        v10 = *(_OWORD *)(v9 + 16);
        v64 = *(_OWORD *)v9;
        *(_OWORD *)v65 = v10;
        v11 = *(_QWORD *)(v9 + 32);
        if (v11)
        {
          v12 = *(unint64_t **)&v65[8];
          if (!*(_QWORD *)&v65[8])
            v12 = (unint64_t *)(v11 - 16);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        *(_BYTE *)a1 = 1;
        v14 = *(_OWORD *)v65;
        *(_OWORD *)(a1 + 8) = v64;
        *(_OWORD *)(a1 + 24) = v14;
        v64 = 0u;
        *(_OWORD *)v65 = 0u;
        *(_QWORD *)(a1 + 40) = v11;
        *(_QWORD *)&v65[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
      {
        if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v63) & 1) != 0)
        {
          v26 = &v63;
        }
        else
        {
          v26 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v63, &v64);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v64);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61, (const pxrInternal__aapl__pxrReserved__::VtValue *)v26);
        if (v61.__r_.__value_.__l.__size_)
        {
          v40 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
          v41 = *(_OWORD *)(v40 + 16);
          v64 = *(_OWORD *)v40;
          *(_OWORD *)v65 = v41;
          v42 = *(_QWORD *)(v40 + 32);
          if (v42)
          {
            v43 = *(unint64_t **)&v65[8];
            if (!*(_QWORD *)&v65[8])
              v43 = (unint64_t *)(v42 - 16);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          *(_BYTE *)a1 = 1;
          v45 = *(_OWORD *)v65;
          *(_OWORD *)(a1 + 8) = v64;
          *(_OWORD *)(a1 + 24) = v45;
          v64 = 0u;
          *(_OWORD *)v65 = 0u;
          *(_QWORD *)(a1 + 40) = v42;
          *(_QWORD *)&v65[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v64);
        }
        else
        {
          v46 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v46);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a1 + 8) = v64;
          v60.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
          v47 = *(_QWORD *)v65;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
          v48 = v65[23];
          memset(v65, 0, sizeof(v65));
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
          v49 = v60.__r_.__value_.__r.__words[0];
          *(_QWORD *)(a1 + 24) = v47;
          *(_QWORD *)(a1 + 32) = v49;
          *(_BYTE *)(a1 + 47) = v48;
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
      v37 = *(_QWORD *)v65;
      *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
      v38 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
      v39 = v61.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v37;
      *(_QWORD *)(a1 + 32) = v39;
      *(_BYTE *)(a1 + 47) = v38;
      if ((SHIBYTE(v59) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v63);
LABEL_59:
        v50 = v56;
        if (v56)
        {
          v51 = (unsigned int *)(v56 + 8);
          do
          {
            v52 = __ldxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        }
        return;
      }
      v36 = __p[0];
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
      std::operator+<char>();
      v27 = std::string::append(&v60, ") at the given time: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v57, v54);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v57;
      else
        v29 = (std::string *)v57.__r_.__value_.__r.__words[0];
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        size = v57.__r_.__value_.__l.__size_;
      v31 = std::string::append(&v61, (const std::string::value_type *)v29, size);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v59 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v64;
      v62[0] = *(_QWORD *)&v65[8];
      v33 = *(_QWORD *)v65;
      *(_QWORD *)((char *)v62 + 7) = *(_QWORD *)&v65[15];
      v34 = v65[23];
      memset(v65, 0, sizeof(v65));
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v62 + 7);
      v35 = v62[0];
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v35;
      *(_BYTE *)(a1 + 47) = v34;
      if (SHIBYTE(v59) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      v36 = (void *)v60.__r_.__value_.__r.__words[0];
    }
    operator delete(v36);
    goto LABEL_58;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v64, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a1 + 8) = v64;
  v61.__r_.__value_.__r.__words[0] = *(_QWORD *)&v65[8];
  v16 = *(_QWORD *)v65;
  *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v65[15];
  v17 = v65[23];
  memset(v65, 0, sizeof(v65));
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
  v18 = v61.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v18;
  *(_BYTE *)(a1 + 47) = v17;
  if (SHIBYTE(v59) < 0)
    operator delete(__p[0]);
}

void sub_230190774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (a11)
  {
    v33 = a11 + 2;
    do
    {
      v34 = __ldxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

double pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<long long>>::Invoke@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<long long>>;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void std::__shared_ptr_pointer<unsigned char *,`anonymous namespace'::makeSharedNoDelete(void *)::{lambda(unsigned char *)#1},std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,`anonymous namespace'::makeSharedNoDelete(void *)::{lambda(unsigned char *)#1},std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN12_GLOBAL__N_118makeSharedNoDeleteEPvEUlT_E_))
    return a1 + 24;
  else
    return 0;
}

void `anonymous namespace'::getHashTableFuncTable(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int *v170;
  unsigned int v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int *v183;
  unsigned int v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int *v196;
  unsigned int v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int *v207;
  unsigned int v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int *v211;
  unsigned int v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int *v215;
  unsigned int v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int *v234;
  unsigned int v235;
  unsigned int *v236;
  unsigned int v237;
  unsigned int *v238;
  unsigned int v239;
  unsigned int *v240;
  unsigned int v241;
  unsigned int *v242;
  unsigned int v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  unsigned int *v251;
  unsigned int v252;
  unsigned int *v253;
  unsigned int v254;
  unsigned int *v255;
  unsigned int v256;
  unsigned int *v257;
  unsigned int v258;
  unsigned int *v259;
  unsigned int v260;
  uint64_t *v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int *v268;
  unsigned int v269;
  unsigned int *v270;
  unsigned int v271;
  unsigned int *v272;
  unsigned int v273;
  uint64_t v274;
  _QWORD v275[3];
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD v281[3];
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD v287[3];
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _QWORD v291[3];
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD v295[3];
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD v299[3];
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD v303[3];
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD v307[3];
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD v311[3];
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD v315[3];
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD v321[3];
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD v331[3];
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD v337[3];
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD v343[3];
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD v347[3];
  uint64_t v348;
  uint64_t v349;
  _QWORD v350[3];
  _QWORD *v351;
  uint64_t v352;
  _QWORD v353[5];
  _QWORD v354[5];
  _QWORD v355[5];
  _QWORD v356[4];
  uint64_t v357;
  _QWORD v358[5];
  _QWORD v359[5];
  _QWORD v360[5];
  _QWORD v361[4];
  uint64_t v362;
  _QWORD v363[5];
  _QWORD v364[4];
  uint64_t v365;
  _QWORD v366[5];
  _QWORD v367[4];
  uint64_t v368;
  _QWORD v369[5];
  _QWORD v370[4];
  uint64_t v371;
  _QWORD v372[5];
  _QWORD v373[4];
  uint64_t v374;
  _QWORD v375[5];
  _QWORD v376[4];
  uint64_t v377;
  _QWORD v378[5];
  _QWORD v379[4];
  uint64_t v380;
  _QWORD v381[5];
  _QWORD v382[4];
  uint64_t v383;
  _QWORD v384[5];
  _QWORD v385[5];
  _QWORD v386[5];
  _QWORD v387[4];
  uint64_t v388;
  _QWORD v389[5];
  _QWORD v390[5];
  _QWORD v391[5];
  _QWORD v392[5];
  _QWORD v393[5];
  _QWORD v394[5];
  _QWORD v395[5];
  _QWORD v396[4];
  uint64_t v397;
  _QWORD v398[5];
  _QWORD v399[5];
  _QWORD v400[5];
  _QWORD v401[4];
  uint64_t v402;
  _QWORD v403[5];
  _QWORD v404[5];
  _QWORD v405[5];
  _QWORD v406[4];
  uint64_t v407;
  _QWORD v408[5];
  _QWORD v409[4];
  _QWORD v410[4];
  _QWORD v411[4];
  _QWORD v412[4];
  _QWORD v413[4];
  _QWORD v414[4];
  _QWORD v415[4];
  _QWORD v416[4];
  _QWORD v417[4];
  _QWORD v418[4];
  _QWORD v419[4];
  _QWORD v420[4];
  _QWORD v421[4];
  _QWORD v422[4];
  _QWORD v423[4];
  _QWORD v424[4];
  uint64_t v425;

  v425 = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) != 0
  {
    return;
  }
  MEMORY[0x2348B274C](&v348, "uchar[]");
  MEMORY[0x2348B274C](&v346, "uint8_t");
  v2 = v346;
  v346 = 0;
  v407 = v2;
  v408[0] = &off_24FDFBEC8;
  v408[3] = v408;
  MEMORY[0x2348B274C](&v345, "uint8_t[]");
  v3 = v345;
  v345 = 0;
  v408[4] = v3;
  v409[0] = &off_24FDFBEC8;
  v409[3] = v409;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v347, &v407, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v410, v348, v347);
  MEMORY[0x2348B274C](&v344, "uint[]");
  MEMORY[0x2348B274C](&v342, "uint16_t");
  v4 = v342;
  v342 = 0;
  v402 = v4;
  v403[0] = &off_24FDFBEC8;
  v403[3] = v403;
  MEMORY[0x2348B274C](&v341, "uint32_t");
  v5 = v341;
  v341 = 0;
  v403[4] = v5;
  v404[0] = &off_24FDFBEC8;
  v404[3] = v404;
  MEMORY[0x2348B274C](&v340, "uint16_t[]");
  v6 = v340;
  v340 = 0;
  v404[4] = v6;
  v405[0] = &off_24FDFBEC8;
  v405[3] = v405;
  MEMORY[0x2348B274C](&v339, "uint32_t[]");
  v7 = v339;
  v339 = 0;
  v405[4] = v7;
  v406[0] = &off_24FDFBEC8;
  v406[3] = v406;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v343, &v402, 4);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v411, v344, v343);
  MEMORY[0x2348B274C](&v338, "uint64[]");
  MEMORY[0x2348B274C](&v336, "uint64_t");
  v8 = v336;
  v336 = 0;
  v397 = v8;
  v398[0] = &off_24FDFBEC8;
  v398[3] = v398;
  MEMORY[0x2348B274C](&v335, "size_t");
  v9 = v335;
  v335 = 0;
  v398[4] = v9;
  v399[0] = &off_24FDFBEC8;
  v399[3] = v399;
  MEMORY[0x2348B274C](&v334, "uint64_t[]");
  v10 = v334;
  v334 = 0;
  v399[4] = v10;
  v400[0] = &off_24FDFBEC8;
  v400[3] = v400;
  MEMORY[0x2348B274C](&v333, "size_t[]");
  v11 = v333;
  v333 = 0;
  v400[4] = v11;
  v401[0] = &off_24FDFBEC8;
  v401[3] = v401;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v337, &v397, 4);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v412, v338, v337);
  MEMORY[0x2348B274C](&v332, "int[]");
  MEMORY[0x2348B274C](&v330, "char");
  v12 = v330;
  v330 = 0;
  v388 = v12;
  v389[0] = &off_24FDFBEC8;
  v389[3] = v389;
  MEMORY[0x2348B274C](&v329, "int8_t");
  v13 = v329;
  v329 = 0;
  v389[4] = v13;
  v390[0] = &off_24FDFBEC8;
  v390[3] = v390;
  MEMORY[0x2348B274C](&v328, "int16_t");
  v14 = v328;
  v328 = 0;
  v390[4] = v14;
  v391[0] = &off_24FDFBEC8;
  v391[3] = v391;
  MEMORY[0x2348B274C](&v327, "int32_t");
  v15 = v327;
  v327 = 0;
  v391[4] = v15;
  v392[0] = &off_24FDFBEC8;
  v392[3] = v392;
  MEMORY[0x2348B274C](&v326, "char[]");
  v16 = v326;
  v326 = 0;
  v392[4] = v16;
  v393[0] = &off_24FDFBEC8;
  v393[3] = v393;
  MEMORY[0x2348B274C](&v325, "int8_t[]");
  v17 = v325;
  v325 = 0;
  v393[4] = v17;
  v394[0] = &off_24FDFBEC8;
  v394[3] = v394;
  MEMORY[0x2348B274C](&v324, "int16_t[]");
  v18 = v324;
  v324 = 0;
  v394[4] = v18;
  v395[0] = &off_24FDFBEC8;
  v395[3] = v395;
  MEMORY[0x2348B274C](&v323, "int32_t[]");
  v19 = v323;
  v323 = 0;
  v395[4] = v19;
  v396[0] = &off_24FDFBEC8;
  v396[3] = v396;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v331, &v388, 8);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v413, v332, v331);
  MEMORY[0x2348B274C](&v322, "int64[]");
  MEMORY[0x2348B274C](&v320, "int");
  v20 = v320;
  v320 = 0;
  v383 = v20;
  v384[0] = &off_24FDFBEC8;
  v384[3] = v384;
  MEMORY[0x2348B274C](&v319, "int64_t");
  v21 = v319;
  v319 = 0;
  v384[4] = v21;
  v385[0] = &off_24FDFBEC8;
  v385[3] = v385;
  MEMORY[0x2348B274C](&v318, "int[]");
  v22 = v318;
  v318 = 0;
  v385[4] = v22;
  v386[0] = &off_24FDFBEC8;
  v386[3] = v386;
  MEMORY[0x2348B274C](&v317, "int64_t[]");
  v23 = v317;
  v317 = 0;
  v386[4] = v23;
  v387[0] = &off_24FDFBEC8;
  v387[3] = v387;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v321, &v383, 4);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v414, v322, v321);
  MEMORY[0x2348B274C](&v316, "float[]");
  MEMORY[0x2348B274C](&v314, "float");
  v24 = v314;
  v314 = 0;
  v380 = v24;
  v381[0] = &off_24FDFBEC8;
  v381[3] = v381;
  MEMORY[0x2348B274C](&v313, "float[]");
  v25 = v313;
  v313 = 0;
  v381[4] = v25;
  v382[0] = &off_24FDFBEC8;
  v382[3] = v382;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v315, &v380, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v415, v316, v315);
  MEMORY[0x2348B274C](&v312, "float2[]");
  MEMORY[0x2348B274C](&v310, "Vector2F");
  v26 = v310;
  v310 = 0;
  v377 = v26;
  v378[0] = &off_24FDFBEC8;
  v378[3] = v378;
  MEMORY[0x2348B274C](&v309, "Vector2F[]");
  v27 = v309;
  v309 = 0;
  v378[4] = v27;
  v379[0] = &off_24FDFBEC8;
  v379[3] = v379;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v311, &v377, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v416, v312, v311);
  MEMORY[0x2348B274C](&v308, "float3[]");
  MEMORY[0x2348B274C](&v306, "Vector3F");
  v28 = v306;
  v306 = 0;
  v374 = v28;
  v375[0] = &off_24FDFBEC8;
  v375[3] = v375;
  MEMORY[0x2348B274C](&v305, "Vector3F[]");
  v29 = v305;
  v305 = 0;
  v375[4] = v29;
  v376[0] = &off_24FDFBEC8;
  v376[3] = v376;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v307, &v374, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v417, v308, v307);
  MEMORY[0x2348B274C](&v304, "float4[]");
  MEMORY[0x2348B274C](&v302, "Vector4F");
  v30 = v302;
  v302 = 0;
  v371 = v30;
  v372[0] = &off_24FDFBEC8;
  v372[3] = v372;
  MEMORY[0x2348B274C](&v301, "Vector4F[]");
  v31 = v301;
  v301 = 0;
  v372[4] = v31;
  v373[0] = &off_24FDFBEC8;
  v373[3] = v373;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v303, &v371, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v418, v304, v303);
  MEMORY[0x2348B274C](&v300, "quatf[]");
  MEMORY[0x2348B274C](&v298, "QuaternionF");
  v32 = v298;
  v298 = 0;
  v368 = v32;
  v369[0] = &off_24FDFBEC8;
  v369[3] = v369;
  MEMORY[0x2348B274C](&v297, "QuaternionF[]");
  v33 = v297;
  v297 = 0;
  v369[4] = v33;
  v370[0] = &off_24FDFBEC8;
  v370[3] = v370;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v299, &v368, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v419, v300, v299);
  MEMORY[0x2348B274C](&v296, "double[]");
  MEMORY[0x2348B274C](&v294, "double");
  v34 = v294;
  v294 = 0;
  v365 = v34;
  v366[0] = &off_24FDFBEC8;
  v366[3] = v366;
  MEMORY[0x2348B274C](&v293, "double[]");
  v35 = v293;
  v293 = 0;
  v366[4] = v35;
  v367[0] = &off_24FDFBEC8;
  v367[3] = v367;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v295, &v365, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v420, v296, v295);
  MEMORY[0x2348B274C](&v292, "BOOL[]");
  MEMORY[0x2348B274C](&v290, "BOOL");
  v36 = v290;
  v290 = 0;
  v362 = v36;
  v363[0] = &off_24FDFBEC8;
  v363[3] = v363;
  MEMORY[0x2348B274C](&v289, "BOOL[]");
  v37 = v289;
  v289 = 0;
  v363[4] = v37;
  v364[0] = &off_24FDFBEC8;
  v364[3] = v364;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v291, &v362, 2);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v421, v292, v291);
  MEMORY[0x2348B274C](&v288, "token[]");
  MEMORY[0x2348B274C](&v286, "DynamicString");
  v38 = v286;
  v286 = 0;
  v357 = v38;
  v358[0] = &off_24FDFBEC8;
  v358[3] = v358;
  MEMORY[0x2348B274C](&v285, "StringID");
  v39 = v285;
  v285 = 0;
  v358[4] = v39;
  v359[0] = &off_24FDFBEC8;
  v359[3] = v359;
  MEMORY[0x2348B274C](&v284, "DynamicString[]");
  v40 = v284;
  v284 = 0;
  v359[4] = v40;
  v360[0] = &off_24FDFBEC8;
  v360[3] = v360;
  MEMORY[0x2348B274C](&v283, "StringID[]");
  v41 = v283;
  v283 = 0;
  v360[4] = v41;
  v361[0] = &off_24FDFBEC8;
  v361[3] = v361;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v287, &v357, 4);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v422, v288, v287);
  MEMORY[0x2348B274C](&v282, "string[]");
  MEMORY[0x2348B274C](&v280, "DynamicString");
  v42 = v280;
  v280 = 0;
  v352 = v42;
  v353[0] = &off_24FDFBEC8;
  v353[3] = v353;
  MEMORY[0x2348B274C](&v279, "StringID");
  v43 = v279;
  v279 = 0;
  v353[4] = v43;
  v354[0] = &off_24FDFBEC8;
  v354[3] = v354;
  MEMORY[0x2348B274C](&v278, "DynamicString[]");
  v44 = v278;
  v278 = 0;
  v354[4] = v44;
  v355[0] = &off_24FDFBEC8;
  v355[3] = v355;
  MEMORY[0x2348B274C](&v277, "StringID[]");
  v45 = v277;
  v277 = 0;
  v355[4] = v45;
  v356[0] = &off_24FDFBEC8;
  v356[3] = v356;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v281, &v352, 4);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v423, v282, v281);
  MEMORY[0x2348B274C](&v276, "asset[]");
  MEMORY[0x2348B274C](&v274, "AssetHandle[]");
  v46 = v274;
  v274 = 0;
  v47 = v350;
  v349 = v46;
  v350[0] = &off_24FDFBEC8;
  v351 = v350;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v275, &v349, 1);
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v424, v276, v275);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::map[abi:ne180100]((uint64_t)v410, 15);
  v48 = &v425;
  do
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)*(v48 - 2));
    v50 = *(v48 - 4);
    v48 -= 4;
    v49 = v50;
    if ((v50 & 7) != 0)
    {
      v51 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v52 = __ldxr(v51);
      while (__stlxr(v52 - 2, v51));
    }
  }
  while (v48 != v410);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v275[1]);
  if (v351 == v350)
  {
    v53 = 4;
    goto LABEL_13;
  }
  if (v351)
  {
    v53 = 5;
    v47 = v351;
LABEL_13:
    (*(void (**)(_QWORD *))(*v47 + 8 * v53))(v47);
  }
  if ((v349 & 7) != 0)
  {
    v54 = (unsigned int *)(v349 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  if ((v274 & 7) != 0)
  {
    v56 = (unsigned int *)(v274 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  if ((v276 & 7) != 0)
  {
    v58 = (unsigned int *)(v276 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v281[1]);
  v60 = &v357;
  do
  {
    v61 = (uint64_t *)*(v60 - 1);
    if (v61 == v60 - 4)
    {
      v61 = v60 - 4;
      v62 = 4;
    }
    else
    {
      if (!v61)
        goto LABEL_29;
      v62 = 5;
    }
    (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_29:
    v64 = *(v60 - 5);
    v60 -= 5;
    v63 = v64;
    if ((v64 & 7) != 0)
    {
      v65 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
      do
        v66 = __ldxr(v65);
      while (__stlxr(v66 - 2, v65));
    }
  }
  while (v60 != &v352);
  if ((v277 & 7) != 0)
  {
    v67 = (unsigned int *)(v277 & 0xFFFFFFFFFFFFFFF8);
    do
      v68 = __ldxr(v67);
    while (__stlxr(v68 - 2, v67));
  }
  if ((v278 & 7) != 0)
  {
    v69 = (unsigned int *)(v278 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  if ((v279 & 7) != 0)
  {
    v71 = (unsigned int *)(v279 & 0xFFFFFFFFFFFFFFF8);
    do
      v72 = __ldxr(v71);
    while (__stlxr(v72 - 2, v71));
  }
  if ((v280 & 7) != 0)
  {
    v73 = (unsigned int *)(v280 & 0xFFFFFFFFFFFFFFF8);
    do
      v74 = __ldxr(v73);
    while (__stlxr(v74 - 2, v73));
  }
  if ((v282 & 7) != 0)
  {
    v75 = (unsigned int *)(v282 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v287[1]);
  v77 = &v362;
  while (2)
  {
    v78 = (uint64_t *)*(v77 - 1);
    if (v78 == v77 - 4)
    {
      v78 = v77 - 4;
      v79 = 4;
LABEL_53:
      (*(void (**)(void))(*v78 + 8 * v79))();
    }
    else if (v78)
    {
      v79 = 5;
      goto LABEL_53;
    }
    v81 = *(v77 - 5);
    v77 -= 5;
    v80 = v81;
    if ((v81 & 7) != 0)
    {
      v82 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
      do
        v83 = __ldxr(v82);
      while (__stlxr(v83 - 2, v82));
    }
    if (v77 != &v357)
      continue;
    break;
  }
  if ((v283 & 7) != 0)
  {
    v84 = (unsigned int *)(v283 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  if ((v284 & 7) != 0)
  {
    v86 = (unsigned int *)(v284 & 0xFFFFFFFFFFFFFFF8);
    do
      v87 = __ldxr(v86);
    while (__stlxr(v87 - 2, v86));
  }
  if ((v285 & 7) != 0)
  {
    v88 = (unsigned int *)(v285 & 0xFFFFFFFFFFFFFFF8);
    do
      v89 = __ldxr(v88);
    while (__stlxr(v89 - 2, v88));
  }
  if ((v286 & 7) != 0)
  {
    v90 = (unsigned int *)(v286 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  if ((v288 & 7) != 0)
  {
    v92 = (unsigned int *)(v288 & 0xFFFFFFFFFFFFFFF8);
    do
      v93 = __ldxr(v92);
    while (__stlxr(v93 - 2, v92));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v291[1]);
  v94 = &v365;
  while (2)
  {
    v95 = (uint64_t *)*(v94 - 1);
    if (v95 == v94 - 4)
    {
      v95 = v94 - 4;
      v96 = 4;
LABEL_78:
      (*(void (**)(void))(*v95 + 8 * v96))();
    }
    else if (v95)
    {
      v96 = 5;
      goto LABEL_78;
    }
    v98 = *(v94 - 5);
    v94 -= 5;
    v97 = v98;
    if ((v98 & 7) != 0)
    {
      v99 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
      do
        v100 = __ldxr(v99);
      while (__stlxr(v100 - 2, v99));
    }
    if (v94 != &v362)
      continue;
    break;
  }
  if ((v289 & 7) != 0)
  {
    v101 = (unsigned int *)(v289 & 0xFFFFFFFFFFFFFFF8);
    do
      v102 = __ldxr(v101);
    while (__stlxr(v102 - 2, v101));
  }
  if ((v290 & 7) != 0)
  {
    v103 = (unsigned int *)(v290 & 0xFFFFFFFFFFFFFFF8);
    do
      v104 = __ldxr(v103);
    while (__stlxr(v104 - 2, v103));
  }
  if ((v292 & 7) != 0)
  {
    v105 = (unsigned int *)(v292 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v295[1]);
  v107 = &v368;
  while (2)
  {
    v108 = (uint64_t *)*(v107 - 1);
    if (v108 == v107 - 4)
    {
      v108 = v107 - 4;
      v109 = 4;
LABEL_97:
      (*(void (**)(void))(*v108 + 8 * v109))();
    }
    else if (v108)
    {
      v109 = 5;
      goto LABEL_97;
    }
    v111 = *(v107 - 5);
    v107 -= 5;
    v110 = v111;
    if ((v111 & 7) != 0)
    {
      v112 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
      do
        v113 = __ldxr(v112);
      while (__stlxr(v113 - 2, v112));
    }
    if (v107 != &v365)
      continue;
    break;
  }
  if ((v293 & 7) != 0)
  {
    v114 = (unsigned int *)(v293 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  if ((v294 & 7) != 0)
  {
    v116 = (unsigned int *)(v294 & 0xFFFFFFFFFFFFFFF8);
    do
      v117 = __ldxr(v116);
    while (__stlxr(v117 - 2, v116));
  }
  if ((v296 & 7) != 0)
  {
    v118 = (unsigned int *)(v296 & 0xFFFFFFFFFFFFFFF8);
    do
      v119 = __ldxr(v118);
    while (__stlxr(v119 - 2, v118));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v299[1]);
  v120 = &v371;
  while (2)
  {
    v121 = (uint64_t *)*(v120 - 1);
    if (v121 == v120 - 4)
    {
      v121 = v120 - 4;
      v122 = 4;
LABEL_116:
      (*(void (**)(void))(*v121 + 8 * v122))();
    }
    else if (v121)
    {
      v122 = 5;
      goto LABEL_116;
    }
    v124 = *(v120 - 5);
    v120 -= 5;
    v123 = v124;
    if ((v124 & 7) != 0)
    {
      v125 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
      do
        v126 = __ldxr(v125);
      while (__stlxr(v126 - 2, v125));
    }
    if (v120 != &v368)
      continue;
    break;
  }
  if ((v297 & 7) != 0)
  {
    v127 = (unsigned int *)(v297 & 0xFFFFFFFFFFFFFFF8);
    do
      v128 = __ldxr(v127);
    while (__stlxr(v128 - 2, v127));
  }
  if ((v298 & 7) != 0)
  {
    v129 = (unsigned int *)(v298 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stlxr(v130 - 2, v129));
  }
  if ((v300 & 7) != 0)
  {
    v131 = (unsigned int *)(v300 & 0xFFFFFFFFFFFFFFF8);
    do
      v132 = __ldxr(v131);
    while (__stlxr(v132 - 2, v131));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v303[1]);
  v133 = &v374;
  while (2)
  {
    v134 = (uint64_t *)*(v133 - 1);
    if (v134 == v133 - 4)
    {
      v134 = v133 - 4;
      v135 = 4;
LABEL_135:
      (*(void (**)(void))(*v134 + 8 * v135))();
    }
    else if (v134)
    {
      v135 = 5;
      goto LABEL_135;
    }
    v137 = *(v133 - 5);
    v133 -= 5;
    v136 = v137;
    if ((v137 & 7) != 0)
    {
      v138 = (unsigned int *)(v136 & 0xFFFFFFFFFFFFFFF8);
      do
        v139 = __ldxr(v138);
      while (__stlxr(v139 - 2, v138));
    }
    if (v133 != &v371)
      continue;
    break;
  }
  if ((v301 & 7) != 0)
  {
    v140 = (unsigned int *)(v301 & 0xFFFFFFFFFFFFFFF8);
    do
      v141 = __ldxr(v140);
    while (__stlxr(v141 - 2, v140));
  }
  if ((v302 & 7) != 0)
  {
    v142 = (unsigned int *)(v302 & 0xFFFFFFFFFFFFFFF8);
    do
      v143 = __ldxr(v142);
    while (__stlxr(v143 - 2, v142));
  }
  if ((v304 & 7) != 0)
  {
    v144 = (unsigned int *)(v304 & 0xFFFFFFFFFFFFFFF8);
    do
      v145 = __ldxr(v144);
    while (__stlxr(v145 - 2, v144));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v307[1]);
  v146 = &v377;
  while (2)
  {
    v147 = (uint64_t *)*(v146 - 1);
    if (v147 == v146 - 4)
    {
      v147 = v146 - 4;
      v148 = 4;
LABEL_154:
      (*(void (**)(void))(*v147 + 8 * v148))();
    }
    else if (v147)
    {
      v148 = 5;
      goto LABEL_154;
    }
    v150 = *(v146 - 5);
    v146 -= 5;
    v149 = v150;
    if ((v150 & 7) != 0)
    {
      v151 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
      do
        v152 = __ldxr(v151);
      while (__stlxr(v152 - 2, v151));
    }
    if (v146 != &v374)
      continue;
    break;
  }
  if ((v305 & 7) != 0)
  {
    v153 = (unsigned int *)(v305 & 0xFFFFFFFFFFFFFFF8);
    do
      v154 = __ldxr(v153);
    while (__stlxr(v154 - 2, v153));
  }
  if ((v306 & 7) != 0)
  {
    v155 = (unsigned int *)(v306 & 0xFFFFFFFFFFFFFFF8);
    do
      v156 = __ldxr(v155);
    while (__stlxr(v156 - 2, v155));
  }
  if ((v308 & 7) != 0)
  {
    v157 = (unsigned int *)(v308 & 0xFFFFFFFFFFFFFFF8);
    do
      v158 = __ldxr(v157);
    while (__stlxr(v158 - 2, v157));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v311[1]);
  v159 = &v380;
  while (2)
  {
    v160 = (uint64_t *)*(v159 - 1);
    if (v160 == v159 - 4)
    {
      v160 = v159 - 4;
      v161 = 4;
LABEL_173:
      (*(void (**)(void))(*v160 + 8 * v161))();
    }
    else if (v160)
    {
      v161 = 5;
      goto LABEL_173;
    }
    v163 = *(v159 - 5);
    v159 -= 5;
    v162 = v163;
    if ((v163 & 7) != 0)
    {
      v164 = (unsigned int *)(v162 & 0xFFFFFFFFFFFFFFF8);
      do
        v165 = __ldxr(v164);
      while (__stlxr(v165 - 2, v164));
    }
    if (v159 != &v377)
      continue;
    break;
  }
  if ((v309 & 7) != 0)
  {
    v166 = (unsigned int *)(v309 & 0xFFFFFFFFFFFFFFF8);
    do
      v167 = __ldxr(v166);
    while (__stlxr(v167 - 2, v166));
  }
  if ((v310 & 7) != 0)
  {
    v168 = (unsigned int *)(v310 & 0xFFFFFFFFFFFFFFF8);
    do
      v169 = __ldxr(v168);
    while (__stlxr(v169 - 2, v168));
  }
  if ((v312 & 7) != 0)
  {
    v170 = (unsigned int *)(v312 & 0xFFFFFFFFFFFFFFF8);
    do
      v171 = __ldxr(v170);
    while (__stlxr(v171 - 2, v170));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v315[1]);
  v172 = &v383;
  while (2)
  {
    v173 = (uint64_t *)*(v172 - 1);
    if (v173 == v172 - 4)
    {
      v173 = v172 - 4;
      v174 = 4;
LABEL_192:
      (*(void (**)(void))(*v173 + 8 * v174))();
    }
    else if (v173)
    {
      v174 = 5;
      goto LABEL_192;
    }
    v176 = *(v172 - 5);
    v172 -= 5;
    v175 = v176;
    if ((v176 & 7) != 0)
    {
      v177 = (unsigned int *)(v175 & 0xFFFFFFFFFFFFFFF8);
      do
        v178 = __ldxr(v177);
      while (__stlxr(v178 - 2, v177));
    }
    if (v172 != &v380)
      continue;
    break;
  }
  if ((v313 & 7) != 0)
  {
    v179 = (unsigned int *)(v313 & 0xFFFFFFFFFFFFFFF8);
    do
      v180 = __ldxr(v179);
    while (__stlxr(v180 - 2, v179));
  }
  if ((v314 & 7) != 0)
  {
    v181 = (unsigned int *)(v314 & 0xFFFFFFFFFFFFFFF8);
    do
      v182 = __ldxr(v181);
    while (__stlxr(v182 - 2, v181));
  }
  if ((v316 & 7) != 0)
  {
    v183 = (unsigned int *)(v316 & 0xFFFFFFFFFFFFFFF8);
    do
      v184 = __ldxr(v183);
    while (__stlxr(v184 - 2, v183));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v321[1]);
  v185 = &v388;
  while (2)
  {
    v186 = (uint64_t *)*(v185 - 1);
    if (v186 == v185 - 4)
    {
      v186 = v185 - 4;
      v187 = 4;
LABEL_211:
      (*(void (**)(void))(*v186 + 8 * v187))();
    }
    else if (v186)
    {
      v187 = 5;
      goto LABEL_211;
    }
    v189 = *(v185 - 5);
    v185 -= 5;
    v188 = v189;
    if ((v189 & 7) != 0)
    {
      v190 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
      do
        v191 = __ldxr(v190);
      while (__stlxr(v191 - 2, v190));
    }
    if (v185 != &v383)
      continue;
    break;
  }
  if ((v317 & 7) != 0)
  {
    v192 = (unsigned int *)(v317 & 0xFFFFFFFFFFFFFFF8);
    do
      v193 = __ldxr(v192);
    while (__stlxr(v193 - 2, v192));
  }
  if ((v318 & 7) != 0)
  {
    v194 = (unsigned int *)(v318 & 0xFFFFFFFFFFFFFFF8);
    do
      v195 = __ldxr(v194);
    while (__stlxr(v195 - 2, v194));
  }
  if ((v319 & 7) != 0)
  {
    v196 = (unsigned int *)(v319 & 0xFFFFFFFFFFFFFFF8);
    do
      v197 = __ldxr(v196);
    while (__stlxr(v197 - 2, v196));
  }
  if ((v320 & 7) != 0)
  {
    v198 = (unsigned int *)(v320 & 0xFFFFFFFFFFFFFFF8);
    do
      v199 = __ldxr(v198);
    while (__stlxr(v199 - 2, v198));
  }
  if ((v322 & 7) != 0)
  {
    v200 = (unsigned int *)(v322 & 0xFFFFFFFFFFFFFFF8);
    do
      v201 = __ldxr(v200);
    while (__stlxr(v201 - 2, v200));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v331[1]);
  v202 = &v397;
  while (2)
  {
    v203 = (uint64_t *)*(v202 - 1);
    if (v203 == v202 - 4)
    {
      v203 = v202 - 4;
      v204 = 4;
LABEL_236:
      (*(void (**)(void))(*v203 + 8 * v204))();
    }
    else if (v203)
    {
      v204 = 5;
      goto LABEL_236;
    }
    v206 = *(v202 - 5);
    v202 -= 5;
    v205 = v206;
    if ((v206 & 7) != 0)
    {
      v207 = (unsigned int *)(v205 & 0xFFFFFFFFFFFFFFF8);
      do
        v208 = __ldxr(v207);
      while (__stlxr(v208 - 2, v207));
    }
    if (v202 != &v388)
      continue;
    break;
  }
  if ((v323 & 7) != 0)
  {
    v209 = (unsigned int *)(v323 & 0xFFFFFFFFFFFFFFF8);
    do
      v210 = __ldxr(v209);
    while (__stlxr(v210 - 2, v209));
  }
  if ((v324 & 7) != 0)
  {
    v211 = (unsigned int *)(v324 & 0xFFFFFFFFFFFFFFF8);
    do
      v212 = __ldxr(v211);
    while (__stlxr(v212 - 2, v211));
  }
  if ((v325 & 7) != 0)
  {
    v213 = (unsigned int *)(v325 & 0xFFFFFFFFFFFFFFF8);
    do
      v214 = __ldxr(v213);
    while (__stlxr(v214 - 2, v213));
  }
  if ((v326 & 7) != 0)
  {
    v215 = (unsigned int *)(v326 & 0xFFFFFFFFFFFFFFF8);
    do
      v216 = __ldxr(v215);
    while (__stlxr(v216 - 2, v215));
  }
  if ((v327 & 7) != 0)
  {
    v217 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFFFF8);
    do
      v218 = __ldxr(v217);
    while (__stlxr(v218 - 2, v217));
  }
  if ((v328 & 7) != 0)
  {
    v219 = (unsigned int *)(v328 & 0xFFFFFFFFFFFFFFF8);
    do
      v220 = __ldxr(v219);
    while (__stlxr(v220 - 2, v219));
  }
  if ((v329 & 7) != 0)
  {
    v221 = (unsigned int *)(v329 & 0xFFFFFFFFFFFFFFF8);
    do
      v222 = __ldxr(v221);
    while (__stlxr(v222 - 2, v221));
  }
  if ((v330 & 7) != 0)
  {
    v223 = (unsigned int *)(v330 & 0xFFFFFFFFFFFFFFF8);
    do
      v224 = __ldxr(v223);
    while (__stlxr(v224 - 2, v223));
  }
  if ((v332 & 7) != 0)
  {
    v225 = (unsigned int *)(v332 & 0xFFFFFFFFFFFFFFF8);
    do
      v226 = __ldxr(v225);
    while (__stlxr(v226 - 2, v225));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v337[1]);
  v227 = &v402;
  while (2)
  {
    v228 = (uint64_t *)*(v227 - 1);
    if (v228 == v227 - 4)
    {
      v228 = v227 - 4;
      v229 = 4;
LABEL_273:
      (*(void (**)(void))(*v228 + 8 * v229))();
    }
    else if (v228)
    {
      v229 = 5;
      goto LABEL_273;
    }
    v231 = *(v227 - 5);
    v227 -= 5;
    v230 = v231;
    if ((v231 & 7) != 0)
    {
      v232 = (unsigned int *)(v230 & 0xFFFFFFFFFFFFFFF8);
      do
        v233 = __ldxr(v232);
      while (__stlxr(v233 - 2, v232));
    }
    if (v227 != &v397)
      continue;
    break;
  }
  if ((v333 & 7) != 0)
  {
    v234 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFFFF8);
    do
      v235 = __ldxr(v234);
    while (__stlxr(v235 - 2, v234));
  }
  if ((v334 & 7) != 0)
  {
    v236 = (unsigned int *)(v334 & 0xFFFFFFFFFFFFFFF8);
    do
      v237 = __ldxr(v236);
    while (__stlxr(v237 - 2, v236));
  }
  if ((v335 & 7) != 0)
  {
    v238 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v239 = __ldxr(v238);
    while (__stlxr(v239 - 2, v238));
  }
  if ((v336 & 7) != 0)
  {
    v240 = (unsigned int *)(v336 & 0xFFFFFFFFFFFFFFF8);
    do
      v241 = __ldxr(v240);
    while (__stlxr(v241 - 2, v240));
  }
  if ((v338 & 7) != 0)
  {
    v242 = (unsigned int *)(v338 & 0xFFFFFFFFFFFFFFF8);
    do
      v243 = __ldxr(v242);
    while (__stlxr(v243 - 2, v242));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v343[1]);
  v244 = &v407;
  while (2)
  {
    v245 = (uint64_t *)*(v244 - 1);
    if (v245 == v244 - 4)
    {
      v245 = v244 - 4;
      v246 = 4;
LABEL_298:
      (*(void (**)(void))(*v245 + 8 * v246))();
    }
    else if (v245)
    {
      v246 = 5;
      goto LABEL_298;
    }
    v248 = *(v244 - 5);
    v244 -= 5;
    v247 = v248;
    if ((v248 & 7) != 0)
    {
      v249 = (unsigned int *)(v247 & 0xFFFFFFFFFFFFFFF8);
      do
        v250 = __ldxr(v249);
      while (__stlxr(v250 - 2, v249));
    }
    if (v244 != &v402)
      continue;
    break;
  }
  if ((v339 & 7) != 0)
  {
    v251 = (unsigned int *)(v339 & 0xFFFFFFFFFFFFFFF8);
    do
      v252 = __ldxr(v251);
    while (__stlxr(v252 - 2, v251));
  }
  if ((v340 & 7) != 0)
  {
    v253 = (unsigned int *)(v340 & 0xFFFFFFFFFFFFFFF8);
    do
      v254 = __ldxr(v253);
    while (__stlxr(v254 - 2, v253));
  }
  if ((v341 & 7) != 0)
  {
    v255 = (unsigned int *)(v341 & 0xFFFFFFFFFFFFFFF8);
    do
      v256 = __ldxr(v255);
    while (__stlxr(v256 - 2, v255));
  }
  if ((v342 & 7) != 0)
  {
    v257 = (unsigned int *)(v342 & 0xFFFFFFFFFFFFFFF8);
    do
      v258 = __ldxr(v257);
    while (__stlxr(v258 - 2, v257));
  }
  if ((v344 & 7) != 0)
  {
    v259 = (unsigned int *)(v344 & 0xFFFFFFFFFFFFFFF8);
    do
      v260 = __ldxr(v259);
    while (__stlxr(v260 - 2, v259));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)v347[1]);
  v261 = v410;
  while (2)
  {
    v262 = (uint64_t *)*(v261 - 1);
    if (v262 == v261 - 4)
    {
      v262 = v261 - 4;
      v263 = 4;
LABEL_323:
      (*(void (**)(void))(*v262 + 8 * v263))();
    }
    else if (v262)
    {
      v263 = 5;
      goto LABEL_323;
    }
    v265 = *(v261 - 5);
    v261 -= 5;
    v264 = v265;
    if ((v265 & 7) != 0)
    {
      v266 = (unsigned int *)(v264 & 0xFFFFFFFFFFFFFFF8);
      do
        v267 = __ldxr(v266);
      while (__stlxr(v267 - 2, v266));
    }
    if (v261 != &v407)
      continue;
    break;
  }
  if ((v345 & 7) != 0)
  {
    v268 = (unsigned int *)(v345 & 0xFFFFFFFFFFFFFFF8);
    do
      v269 = __ldxr(v268);
    while (__stlxr(v269 - 2, v268));
  }
  if ((v346 & 7) != 0)
  {
    v270 = (unsigned int *)(v346 & 0xFFFFFFFFFFFFFFF8);
    do
      v271 = __ldxr(v270);
    while (__stlxr(v271 - 2, v270));
  }
  if ((v348 & 7) != 0)
  {
    v272 = (unsigned int *)(v348 & 0xFFFFFFFFFFFFFFF8);
    do
      v273 = __ldxr(v272);
    while (__stlxr(v273 - 2, v272));
  }
}

void sub_2301924DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,_QWORD *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,_QWORD *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,_QWORD *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,_QWORD *a63)
{
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  _QWORD *a69;
  uint64_t a71;
  uint64_t a72;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unint64_t *v86;
  unint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unint64_t *v103;
  unint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unint64_t *v120;
  unint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unint64_t *v133;
  unint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unint64_t *v146;
  unint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  unint64_t *v159;
  unint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int *v170;
  unsigned int v171;
  unint64_t *v172;
  unint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int *v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int *v183;
  unsigned int v184;
  unint64_t *v185;
  unint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int *v196;
  unsigned int v197;
  unint64_t *v198;
  unint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int *v207;
  unsigned int v208;
  unsigned int *v209;
  unsigned int v210;
  unint64_t *v211;
  unint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int *v220;
  unsigned int v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int *v226;
  unsigned int v227;
  unint64_t *v228;
  unint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int *v241;
  unsigned int v242;
  unsigned int *v243;
  unsigned int v244;
  unsigned int *v245;
  unsigned int v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int *v249;
  unsigned int v250;
  unsigned int *v251;
  unsigned int v252;
  unint64_t *v253;
  unint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  unsigned int *v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int *v264;
  unsigned int v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int *v268;
  unsigned int v269;
  unint64_t *v270;
  unint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int *v275;
  unsigned int v276;
  unsigned int *v277;
  unsigned int v278;
  unsigned int *v279;
  unsigned int v280;
  unsigned int *v281;
  unsigned int v282;
  unsigned int *v283;
  unsigned int v284;
  unsigned int *v285;
  unsigned int v286;
  unint64_t *v287;
  unint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int *v292;
  unsigned int v293;
  unsigned int *v294;
  unsigned int v295;
  unsigned int *v296;
  unsigned int v297;
  unsigned int *v298;
  unsigned int v299;

  v74 = v73 + 480;
  do
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*(_QWORD **)(v74 - 16));
    v76 = *(_QWORD *)(v74 - 32);
    v74 -= 32;
    v75 = v76;
    if ((v76 & 7) != 0)
    {
      v77 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFF8);
      do
        v78 = __ldxr(v77);
      while (__stlxr(v78 - 2, v77));
    }
  }
  while (v74 != v73);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a17);
  if ((_QWORD *)STACK[0x398] == v72)
  {
    v79 = 4;
  }
  else
  {
    if (!STACK[0x398])
    {
LABEL_11:
      if ((STACK[0x378] & 7) != 0)
      {
        v80 = (unsigned int *)(STACK[0x378] & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((a15 & 7) != 0)
      {
        v82 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((a19 & 7) != 0)
      {
        v84 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a25);
      v86 = &STACK[0x440];
      while (1)
      {
        v87 = (unint64_t *)*(v86 - 1);
        if (v87 == v86 - 4)
          break;
        if (v87)
        {
          v88 = 5;
LABEL_25:
          (*(void (**)(void))(*v87 + 8 * v88))();
        }
        v90 = *(v86 - 5);
        v86 -= 5;
        v89 = v90;
        if ((v90 & 7) != 0)
        {
          v91 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
          do
            v92 = __ldxr(v91);
          while (__stlxr(v92 - 2, v91));
        }
        if (v86 == &STACK[0x3A0])
        {
          if ((a20 & 7) != 0)
          {
            v93 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
            do
              v94 = __ldxr(v93);
            while (__stlxr(v94 - 2, v93));
          }
          if ((a21 & 7) != 0)
          {
            v95 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFFFF8);
            do
              v96 = __ldxr(v95);
            while (__stlxr(v96 - 2, v95));
          }
          if ((a22 & 7) != 0)
          {
            v97 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
            do
              v98 = __ldxr(v97);
            while (__stlxr(v98 - 2, v97));
          }
          if ((a23 & 7) != 0)
          {
            v99 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFFFF8);
            do
              v100 = __ldxr(v99);
            while (__stlxr(v100 - 2, v99));
          }
          if ((a27 & 7) != 0)
          {
            v101 = (unsigned int *)(a27 & 0xFFFFFFFFFFFFFFF8);
            do
              v102 = __ldxr(v101);
            while (__stlxr(v102 - 2, v101));
          }
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a33);
          v103 = &STACK[0x4E0];
          while (2)
          {
            v104 = (unint64_t *)*(v103 - 1);
            if (v104 == v103 - 4)
            {
              v104 = v103 - 4;
              v105 = 4;
LABEL_50:
              (*(void (**)(void))(*v104 + 8 * v105))();
            }
            else if (v104)
            {
              v105 = 5;
              goto LABEL_50;
            }
            v107 = *(v103 - 5);
            v103 -= 5;
            v106 = v107;
            if ((v107 & 7) != 0)
            {
              v108 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFFFF8);
              do
                v109 = __ldxr(v108);
              while (__stlxr(v109 - 2, v108));
            }
            if (v103 != &STACK[0x440])
              continue;
            break;
          }
          if ((a28 & 7) != 0)
          {
            v110 = (unsigned int *)(a28 & 0xFFFFFFFFFFFFFFF8);
            do
              v111 = __ldxr(v110);
            while (__stlxr(v111 - 2, v110));
          }
          if ((a29 & 7) != 0)
          {
            v112 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFFFF8);
            do
              v113 = __ldxr(v112);
            while (__stlxr(v113 - 2, v112));
          }
          if ((a30 & 7) != 0)
          {
            v114 = (unsigned int *)(a30 & 0xFFFFFFFFFFFFFFF8);
            do
              v115 = __ldxr(v114);
            while (__stlxr(v115 - 2, v114));
          }
          if ((a31 & 7) != 0)
          {
            v116 = (unsigned int *)(a31 & 0xFFFFFFFFFFFFFFF8);
            do
              v117 = __ldxr(v116);
            while (__stlxr(v117 - 2, v116));
          }
          if ((a35 & 7) != 0)
          {
            v118 = (unsigned int *)(a35 & 0xFFFFFFFFFFFFFFF8);
            do
              v119 = __ldxr(v118);
            while (__stlxr(v119 - 2, v118));
          }
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a39);
          v120 = &STACK[0x530];
          while (2)
          {
            v121 = (unint64_t *)*(v120 - 1);
            if (v121 == v120 - 4)
            {
              v121 = v120 - 4;
              v122 = 4;
LABEL_75:
              (*(void (**)(void))(*v121 + 8 * v122))();
            }
            else if (v121)
            {
              v122 = 5;
              goto LABEL_75;
            }
            v124 = *(v120 - 5);
            v120 -= 5;
            v123 = v124;
            if ((v124 & 7) != 0)
            {
              v125 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
              do
                v126 = __ldxr(v125);
              while (__stlxr(v126 - 2, v125));
            }
            if (v120 == &STACK[0x4E0])
            {
              if ((a36 & 7) != 0)
              {
                v127 = (unsigned int *)(a36 & 0xFFFFFFFFFFFFFFF8);
                do
                  v128 = __ldxr(v127);
                while (__stlxr(v128 - 2, v127));
              }
              if ((a37 & 7) != 0)
              {
                v129 = (unsigned int *)(a37 & 0xFFFFFFFFFFFFFFF8);
                do
                  v130 = __ldxr(v129);
                while (__stlxr(v130 - 2, v129));
              }
              if ((a41 & 7) != 0)
              {
                v131 = (unsigned int *)(a41 & 0xFFFFFFFFFFFFFFF8);
                do
                  v132 = __ldxr(v131);
                while (__stlxr(v132 - 2, v131));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a45);
              v133 = &STACK[0x580];
              while (2)
              {
                v134 = (unint64_t *)*(v133 - 1);
                if (v134 == v133 - 4)
                {
                  v134 = v133 - 4;
                  v135 = 4;
LABEL_94:
                  (*(void (**)(void))(*v134 + 8 * v135))();
                }
                else if (v134)
                {
                  v135 = 5;
                  goto LABEL_94;
                }
                v137 = *(v133 - 5);
                v133 -= 5;
                v136 = v137;
                if ((v137 & 7) != 0)
                {
                  v138 = (unsigned int *)(v136 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v139 = __ldxr(v138);
                  while (__stlxr(v139 - 2, v138));
                }
                if (v133 != &STACK[0x530])
                  continue;
                break;
              }
              if ((a42 & 7) != 0)
              {
                v140 = (unsigned int *)(a42 & 0xFFFFFFFFFFFFFFF8);
                do
                  v141 = __ldxr(v140);
                while (__stlxr(v141 - 2, v140));
              }
              if ((a43 & 7) != 0)
              {
                v142 = (unsigned int *)(a43 & 0xFFFFFFFFFFFFFFF8);
                do
                  v143 = __ldxr(v142);
                while (__stlxr(v143 - 2, v142));
              }
              if ((a47 & 7) != 0)
              {
                v144 = (unsigned int *)(a47 & 0xFFFFFFFFFFFFFFF8);
                do
                  v145 = __ldxr(v144);
                while (__stlxr(v145 - 2, v144));
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a51);
              v146 = &STACK[0x5D0];
              while (2)
              {
                v147 = (unint64_t *)*(v146 - 1);
                if (v147 == v146 - 4)
                {
                  v147 = v146 - 4;
                  v148 = 4;
LABEL_113:
                  (*(void (**)(void))(*v147 + 8 * v148))();
                }
                else if (v147)
                {
                  v148 = 5;
                  goto LABEL_113;
                }
                v150 = *(v146 - 5);
                v146 -= 5;
                v149 = v150;
                if ((v150 & 7) != 0)
                {
                  v151 = (unsigned int *)(v149 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v152 = __ldxr(v151);
                  while (__stlxr(v152 - 2, v151));
                }
                if (v146 == &STACK[0x580])
                {
                  if ((a48 & 7) != 0)
                  {
                    v153 = (unsigned int *)(a48 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v154 = __ldxr(v153);
                    while (__stlxr(v154 - 2, v153));
                  }
                  if ((a49 & 7) != 0)
                  {
                    v155 = (unsigned int *)(a49 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v156 = __ldxr(v155);
                    while (__stlxr(v156 - 2, v155));
                  }
                  if ((a53 & 7) != 0)
                  {
                    v157 = (unsigned int *)(a53 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v158 = __ldxr(v157);
                    while (__stlxr(v158 - 2, v157));
                  }
                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a57);
                  v159 = &STACK[0x620];
                  while (2)
                  {
                    v160 = (unint64_t *)*(v159 - 1);
                    if (v160 == v159 - 4)
                    {
                      v160 = v159 - 4;
                      v161 = 4;
LABEL_132:
                      (*(void (**)(void))(*v160 + 8 * v161))();
                    }
                    else if (v160)
                    {
                      v161 = 5;
                      goto LABEL_132;
                    }
                    v163 = *(v159 - 5);
                    v159 -= 5;
                    v162 = v163;
                    if ((v163 & 7) != 0)
                    {
                      v164 = (unsigned int *)(v162 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v165 = __ldxr(v164);
                      while (__stlxr(v165 - 2, v164));
                    }
                    if (v159 != &STACK[0x5D0])
                      continue;
                    break;
                  }
                  if ((a54 & 7) != 0)
                  {
                    v166 = (unsigned int *)(a54 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v167 = __ldxr(v166);
                    while (__stlxr(v167 - 2, v166));
                  }
                  if ((a55 & 7) != 0)
                  {
                    v168 = (unsigned int *)(a55 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v169 = __ldxr(v168);
                    while (__stlxr(v169 - 2, v168));
                  }
                  if ((a59 & 7) != 0)
                  {
                    v170 = (unsigned int *)(a59 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v171 = __ldxr(v170);
                    while (__stlxr(v171 - 2, v170));
                  }
                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a63);
                  v172 = &STACK[0x670];
                  while (2)
                  {
                    v173 = (unint64_t *)*(v172 - 1);
                    if (v173 == v172 - 4)
                    {
                      v173 = v172 - 4;
                      v174 = 4;
LABEL_151:
                      (*(void (**)(void))(*v173 + 8 * v174))();
                    }
                    else if (v173)
                    {
                      v174 = 5;
                      goto LABEL_151;
                    }
                    v176 = *(v172 - 5);
                    v172 -= 5;
                    v175 = v176;
                    if ((v176 & 7) != 0)
                    {
                      v177 = (unsigned int *)(v175 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v178 = __ldxr(v177);
                      while (__stlxr(v178 - 2, v177));
                    }
                    if (v172 == &STACK[0x620])
                    {
                      if ((a60 & 7) != 0)
                      {
                        v179 = (unsigned int *)(a60 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v180 = __ldxr(v179);
                        while (__stlxr(v180 - 2, v179));
                      }
                      if ((a61 & 7) != 0)
                      {
                        v181 = (unsigned int *)(a61 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v182 = __ldxr(v181);
                        while (__stlxr(v182 - 2, v181));
                      }
                      if ((a65 & 7) != 0)
                      {
                        v183 = (unsigned int *)(a65 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v184 = __ldxr(v183);
                        while (__stlxr(v184 - 2, v183));
                      }
                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a69);
                      v185 = &STACK[0x6C0];
                      while (2)
                      {
                        v186 = (unint64_t *)*(v185 - 1);
                        if (v186 == v185 - 4)
                        {
                          v186 = v185 - 4;
                          v187 = 4;
LABEL_170:
                          (*(void (**)(void))(*v186 + 8 * v187))();
                        }
                        else if (v186)
                        {
                          v187 = 5;
                          goto LABEL_170;
                        }
                        v189 = *(v185 - 5);
                        v185 -= 5;
                        v188 = v189;
                        if ((v189 & 7) != 0)
                        {
                          v190 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v191 = __ldxr(v190);
                          while (__stlxr(v191 - 2, v190));
                        }
                        if (v185 != &STACK[0x670])
                          continue;
                        break;
                      }
                      if ((a66 & 7) != 0)
                      {
                        v192 = (unsigned int *)(a66 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v193 = __ldxr(v192);
                        while (__stlxr(v193 - 2, v192));
                      }
                      if ((a67 & 7) != 0)
                      {
                        v194 = (unsigned int *)(a67 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v195 = __ldxr(v194);
                        while (__stlxr(v195 - 2, v194));
                      }
                      if ((a71 & 7) != 0)
                      {
                        v196 = (unsigned int *)(a71 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v197 = __ldxr(v196);
                        while (__stlxr(v197 - 2, v196));
                      }
                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x210]);
                      v198 = &STACK[0x710];
                      while (2)
                      {
                        v199 = (unint64_t *)*(v198 - 1);
                        if (v199 == v198 - 4)
                        {
                          v199 = v198 - 4;
                          v200 = 4;
LABEL_189:
                          (*(void (**)(void))(*v199 + 8 * v200))();
                        }
                        else if (v199)
                        {
                          v200 = 5;
                          goto LABEL_189;
                        }
                        v202 = *(v198 - 5);
                        v198 -= 5;
                        v201 = v202;
                        if ((v202 & 7) != 0)
                        {
                          v203 = (unsigned int *)(v201 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v204 = __ldxr(v203);
                          while (__stlxr(v204 - 2, v203));
                        }
                        if (v198 == &STACK[0x6C0])
                        {
                          if ((a72 & 7) != 0)
                          {
                            v205 = (unsigned int *)(a72 & 0xFFFFFFFFFFFFFFF8);
                            do
                              v206 = __ldxr(v205);
                            while (__stlxr(v206 - 2, v205));
                          }
                          if ((STACK[0x200] & 7) != 0)
                          {
                            v207 = (unsigned int *)(STACK[0x200] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v208 = __ldxr(v207);
                            while (__stlxr(v208 - 2, v207));
                          }
                          if ((STACK[0x220] & 7) != 0)
                          {
                            v209 = (unsigned int *)(STACK[0x220] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v210 = __ldxr(v209);
                            while (__stlxr(v210 - 2, v209));
                          }
                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x250]);
                          v211 = &STACK[0x7B0];
                          while (2)
                          {
                            v212 = (unint64_t *)*(v211 - 1);
                            if (v212 == v211 - 4)
                            {
                              v212 = v211 - 4;
                              v213 = 4;
LABEL_208:
                              (*(void (**)(void))(*v212 + 8 * v213))();
                            }
                            else if (v212)
                            {
                              v213 = 5;
                              goto LABEL_208;
                            }
                            v215 = *(v211 - 5);
                            v211 -= 5;
                            v214 = v215;
                            if ((v215 & 7) != 0)
                            {
                              v216 = (unsigned int *)(v214 & 0xFFFFFFFFFFFFFFF8);
                              do
                                v217 = __ldxr(v216);
                              while (__stlxr(v217 - 2, v216));
                            }
                            if (v211 != &STACK[0x710])
                              continue;
                            break;
                          }
                          if ((STACK[0x228] & 7) != 0)
                          {
                            v218 = (unsigned int *)(STACK[0x228] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v219 = __ldxr(v218);
                            while (__stlxr(v219 - 2, v218));
                          }
                          if ((STACK[0x230] & 7) != 0)
                          {
                            v220 = (unsigned int *)(STACK[0x230] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v221 = __ldxr(v220);
                            while (__stlxr(v221 - 2, v220));
                          }
                          if ((STACK[0x238] & 7) != 0)
                          {
                            v222 = (unsigned int *)(STACK[0x238] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v223 = __ldxr(v222);
                            while (__stlxr(v223 - 2, v222));
                          }
                          if ((STACK[0x240] & 7) != 0)
                          {
                            v224 = (unsigned int *)(STACK[0x240] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v225 = __ldxr(v224);
                            while (__stlxr(v225 - 2, v224));
                          }
                          if ((STACK[0x260] & 7) != 0)
                          {
                            v226 = (unsigned int *)(STACK[0x260] & 0xFFFFFFFFFFFFFFF8);
                            do
                              v227 = __ldxr(v226);
                            while (__stlxr(v227 - 2, v226));
                          }
                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x2B0]);
                          v228 = &STACK[0x8F0];
                          while (2)
                          {
                            v229 = (unint64_t *)*(v228 - 1);
                            if (v229 == v228 - 4)
                            {
                              v229 = v228 - 4;
                              v230 = 4;
LABEL_233:
                              (*(void (**)(void))(*v229 + 8 * v230))();
                            }
                            else if (v229)
                            {
                              v230 = 5;
                              goto LABEL_233;
                            }
                            v232 = *(v228 - 5);
                            v228 -= 5;
                            v231 = v232;
                            if ((v232 & 7) != 0)
                            {
                              v233 = (unsigned int *)(v231 & 0xFFFFFFFFFFFFFFF8);
                              do
                                v234 = __ldxr(v233);
                              while (__stlxr(v234 - 2, v233));
                            }
                            if (v228 == &STACK[0x7B0])
                            {
                              if ((STACK[0x268] & 7) != 0)
                              {
                                v235 = (unsigned int *)(STACK[0x268] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v236 = __ldxr(v235);
                                while (__stlxr(v236 - 2, v235));
                              }
                              if ((STACK[0x270] & 7) != 0)
                              {
                                v237 = (unsigned int *)(STACK[0x270] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v238 = __ldxr(v237);
                                while (__stlxr(v238 - 2, v237));
                              }
                              if ((STACK[0x278] & 7) != 0)
                              {
                                v239 = (unsigned int *)(STACK[0x278] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v240 = __ldxr(v239);
                                while (__stlxr(v240 - 2, v239));
                              }
                              if ((STACK[0x280] & 7) != 0)
                              {
                                v241 = (unsigned int *)(STACK[0x280] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v242 = __ldxr(v241);
                                while (__stlxr(v242 - 2, v241));
                              }
                              if ((STACK[0x288] & 7) != 0)
                              {
                                v243 = (unsigned int *)(STACK[0x288] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v244 = __ldxr(v243);
                                while (__stlxr(v244 - 2, v243));
                              }
                              if ((STACK[0x290] & 7) != 0)
                              {
                                v245 = (unsigned int *)(STACK[0x290] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v246 = __ldxr(v245);
                                while (__stlxr(v246 - 2, v245));
                              }
                              if ((STACK[0x298] & 7) != 0)
                              {
                                v247 = (unsigned int *)(STACK[0x298] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v248 = __ldxr(v247);
                                while (__stlxr(v248 - 2, v247));
                              }
                              if ((STACK[0x2A0] & 7) != 0)
                              {
                                v249 = (unsigned int *)(STACK[0x2A0] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v250 = __ldxr(v249);
                                while (__stlxr(v250 - 2, v249));
                              }
                              if ((STACK[0x2C0] & 7) != 0)
                              {
                                v251 = (unsigned int *)(STACK[0x2C0] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v252 = __ldxr(v251);
                                while (__stlxr(v252 - 2, v251));
                              }
                              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x2F0]);
                              v253 = &STACK[0x990];
                              while (2)
                              {
                                v254 = (unint64_t *)*(v253 - 1);
                                if (v254 == v253 - 4)
                                {
                                  v254 = v253 - 4;
                                  v255 = 4;
LABEL_270:
                                  (*(void (**)(void))(*v254 + 8 * v255))();
                                }
                                else if (v254)
                                {
                                  v255 = 5;
                                  goto LABEL_270;
                                }
                                v257 = *(v253 - 5);
                                v253 -= 5;
                                v256 = v257;
                                if ((v257 & 7) != 0)
                                {
                                  v258 = (unsigned int *)(v256 & 0xFFFFFFFFFFFFFFF8);
                                  do
                                    v259 = __ldxr(v258);
                                  while (__stlxr(v259 - 2, v258));
                                }
                                if (v253 != &STACK[0x8F0])
                                  continue;
                                break;
                              }
                              if ((STACK[0x2C8] & 7) != 0)
                              {
                                v260 = (unsigned int *)(STACK[0x2C8] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v261 = __ldxr(v260);
                                while (__stlxr(v261 - 2, v260));
                              }
                              if ((STACK[0x2D0] & 7) != 0)
                              {
                                v262 = (unsigned int *)(STACK[0x2D0] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v263 = __ldxr(v262);
                                while (__stlxr(v263 - 2, v262));
                              }
                              if ((STACK[0x2D8] & 7) != 0)
                              {
                                v264 = (unsigned int *)(STACK[0x2D8] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v265 = __ldxr(v264);
                                while (__stlxr(v265 - 2, v264));
                              }
                              if ((STACK[0x2E0] & 7) != 0)
                              {
                                v266 = (unsigned int *)(STACK[0x2E0] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v267 = __ldxr(v266);
                                while (__stlxr(v267 - 2, v266));
                              }
                              if ((STACK[0x300] & 7) != 0)
                              {
                                v268 = (unsigned int *)(STACK[0x300] & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v269 = __ldxr(v268);
                                while (__stlxr(v269 - 2, v268));
                              }
                              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x330]);
                              v270 = &STACK[0xA30];
                              while (2)
                              {
                                v271 = (unint64_t *)*(v270 - 1);
                                if (v271 == v270 - 4)
                                {
                                  v271 = v270 - 4;
                                  v272 = 4;
LABEL_295:
                                  (*(void (**)(void))(*v271 + 8 * v272))();
                                }
                                else if (v271)
                                {
                                  v272 = 5;
                                  goto LABEL_295;
                                }
                                v274 = *(v270 - 5);
                                v270 -= 5;
                                v273 = v274;
                                if ((v274 & 7) != 0)
                                {
                                  v275 = (unsigned int *)(v273 & 0xFFFFFFFFFFFFFFF8);
                                  do
                                    v276 = __ldxr(v275);
                                  while (__stlxr(v276 - 2, v275));
                                }
                                if (v270 == &STACK[0x990])
                                {
                                  if ((STACK[0x308] & 7) != 0)
                                  {
                                    v277 = (unsigned int *)(STACK[0x308] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v278 = __ldxr(v277);
                                    while (__stlxr(v278 - 2, v277));
                                  }
                                  if ((STACK[0x310] & 7) != 0)
                                  {
                                    v279 = (unsigned int *)(STACK[0x310] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v280 = __ldxr(v279);
                                    while (__stlxr(v280 - 2, v279));
                                  }
                                  if ((STACK[0x318] & 7) != 0)
                                  {
                                    v281 = (unsigned int *)(STACK[0x318] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v282 = __ldxr(v281);
                                    while (__stlxr(v282 - 2, v281));
                                  }
                                  if ((STACK[0x320] & 7) != 0)
                                  {
                                    v283 = (unsigned int *)(STACK[0x320] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v284 = __ldxr(v283);
                                    while (__stlxr(v284 - 2, v283));
                                  }
                                  if ((STACK[0x340] & 7) != 0)
                                  {
                                    v285 = (unsigned int *)(STACK[0x340] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v286 = __ldxr(v285);
                                    while (__stlxr(v286 - 2, v285));
                                  }
                                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((_QWORD *)STACK[0x360]);
                                  v287 = &STACK[0xA80];
                                  while (2)
                                  {
                                    v288 = (unint64_t *)*(v287 - 1);
                                    if (v288 == v287 - 4)
                                    {
                                      v288 = v287 - 4;
                                      v289 = 4;
LABEL_320:
                                      (*(void (**)(void))(*v288 + 8 * v289))();
                                    }
                                    else if (v288)
                                    {
                                      v289 = 5;
                                      goto LABEL_320;
                                    }
                                    v291 = *(v287 - 5);
                                    v287 -= 5;
                                    v290 = v291;
                                    if ((v291 & 7) != 0)
                                    {
                                      v292 = (unsigned int *)(v290 & 0xFFFFFFFFFFFFFFF8);
                                      do
                                        v293 = __ldxr(v292);
                                      while (__stlxr(v293 - 2, v292));
                                    }
                                    if (v287 == &STACK[0xA30])
                                    {
                                      if ((STACK[0x348] & 7) != 0)
                                      {
                                        v294 = (unsigned int *)(STACK[0x348] & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v295 = __ldxr(v294);
                                        while (__stlxr(v295 - 2, v294));
                                      }
                                      if ((STACK[0x350] & 7) != 0)
                                      {
                                        v296 = (unsigned int *)(STACK[0x350] & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v297 = __ldxr(v296);
                                        while (__stlxr(v297 - 2, v296));
                                      }
                                      if ((STACK[0x370] & 7) != 0)
                                      {
                                        v298 = (unsigned int *)(STACK[0x370] & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v299 = __ldxr(v298);
                                        while (__stlxr(v299 - 2, v298));
                                      }
                                      _Unwind_Resume(a1);
                                    }
                                    continue;
                                  }
                                }
                                continue;
                              }
                            }
                            continue;
                          }
                        }
                        continue;
                      }
                    }
                    continue;
                  }
                }
                continue;
              }
            }
            continue;
          }
        }
      }
      v87 = v86 - 4;
      v88 = 4;
      goto LABEL_25;
    }
    v79 = 5;
    v72 = (_QWORD *)STACK[0x398];
  }
  (*(void (**)(_QWORD *))(*v72 + 8 * v79))(v72);
  goto LABEL_11;
}

void sub_2301938C0()
{
  JUMPOUT(0x2301927B4);
}

void sub_2301938CC()
{
  JUMPOUT(0x230192838);
}

void sub_2301938DC()
{
  JUMPOUT(0x23019285CLL);
}

void sub_2301938EC()
{
  JUMPOUT(0x23019287CLL);
}

void sub_2301938FC()
{
  JUMPOUT(0x2301928FCLL);
}

void sub_230193908()
{
  JUMPOUT(0x23019291CLL);
}

void sub_230193918()
{
  JUMPOUT(0x230192924);
}

void sub_230193924()
{
  JUMPOUT(0x2301929A8);
}

void sub_230193934()
{
  JUMPOUT(0x230192A18);
}

void sub_230193940()
{
  JUMPOUT(0x230192A38);
}

void sub_230193950()
{
  JUMPOUT(0x230192A40);
}

void sub_23019395C()
{
  JUMPOUT(0x230192AC4);
}

void sub_23019396C()
{
  JUMPOUT(0x230192B34);
}

void sub_230193978()
{
  JUMPOUT(0x230192B54);
}

void sub_230193988()
{
  JUMPOUT(0x230192B5CLL);
}

void sub_230193994()
{
  JUMPOUT(0x230192BE0);
}

void sub_2301939A4()
{
  JUMPOUT(0x230192C50);
}

void sub_2301939B0()
{
  JUMPOUT(0x230192C70);
}

void sub_2301939C0()
{
  JUMPOUT(0x230192C78);
}

void sub_2301939CC()
{
  JUMPOUT(0x230192CFCLL);
}

void sub_2301939DC()
{
  JUMPOUT(0x230192D6CLL);
}

void sub_2301939E8()
{
  JUMPOUT(0x230192D8CLL);
}

void sub_2301939F8()
{
  JUMPOUT(0x230192D94);
}

void sub_230193A04()
{
  JUMPOUT(0x230192E18);
}

void sub_230193A14()
{
  JUMPOUT(0x230192E8CLL);
}

void sub_230193A20()
{
  JUMPOUT(0x230192EACLL);
}

void sub_230193A30()
{
  JUMPOUT(0x230192EB4);
}

void sub_230193A3C()
{
  JUMPOUT(0x230192F38);
}

void sub_230193A4C()
{
  JUMPOUT(0x230192FACLL);
}

void sub_230193A58()
{
  JUMPOUT(0x230192FCCLL);
}

void sub_230193A68()
{
  JUMPOUT(0x230192FD4);
}

void sub_230193A74()
{
  JUMPOUT(0x230193058);
}

void sub_230193A84()
{
  JUMPOUT(0x2301930CCLL);
}

void sub_230193A90()
{
  JUMPOUT(0x2301930ECLL);
}

void sub_230193AA0()
{
  JUMPOUT(0x2301930F4);
}

void sub_230193AAC()
{
  JUMPOUT(0x230193178);
}

void sub_230193ABC()
{
  JUMPOUT(0x2301931A0);
}

void sub_230193ACC()
{
  JUMPOUT(0x2301931C0);
}

void sub_230193ADC()
{
  JUMPOUT(0x230193240);
}

void sub_230193AE8()
{
  JUMPOUT(0x230193260);
}

void sub_230193AF8()
{
  JUMPOUT(0x230193268);
}

void sub_230193B04()
{
  JUMPOUT(0x2301932ECLL);
}

void sub_230193B14()
{
  JUMPOUT(0x230193314);
}

void sub_230193B24()
{
  JUMPOUT(0x230193334);
}

void sub_230193B34()
{
  JUMPOUT(0x230193354);
}

void sub_230193B44()
{
  JUMPOUT(0x230193374);
}

void sub_230193B54()
{
  JUMPOUT(0x230193394);
}

void sub_230193B64()
{
  JUMPOUT(0x2301933B4);
}

void sub_230193B74()
{
  JUMPOUT(0x230193440);
}

void sub_230193B80()
{
  JUMPOUT(0x230193460);
}

void sub_230193B90()
{
  JUMPOUT(0x230193468);
}

void sub_230193B9C()
{
  JUMPOUT(0x2301934ECLL);
}

void sub_230193BAC()
{
  JUMPOUT(0x230193514);
}

void sub_230193BBC()
{
  JUMPOUT(0x230193534);
}

void sub_230193BCC()
{
  JUMPOUT(0x2301935B4);
}

void sub_230193BD8()
{
  JUMPOUT(0x2301935D4);
}

void sub_230193BE8()
{
  JUMPOUT(0x2301935DCLL);
}

void sub_230193BF4()
{
  JUMPOUT(0x230193660);
}

void sub_230193C04()
{
  JUMPOUT(0x230193688);
}

void sub_230193C14()
{
  JUMPOUT(0x2301936A8);
}

void sub_230193C24()
{
  JUMPOUT(0x230193728);
}

void sub_230193C30()
{
  JUMPOUT(0x230193748);
}

void sub_230193C3C()
{
  JUMPOUT(0x230193748);
}

void sub_230193C4C()
{
  JUMPOUT(0x230193750);
}

void sub_230193C5C()
{
  JUMPOUT(0x2301937D4);
}

void sub_230193C70()
{
  JUMPOUT(0x230193848);
}

void sub_230193C80()
{
  JUMPOUT(0x2301938ACLL);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<unsigned char,unsigned char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_BYTE **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_BYTE *)(v16[4] + v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_230193D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<unsigned int,unsigned short>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_WORD **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_DWORD *)(v16[4] + 4 * v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_230193E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<unsigned int,unsigned int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_DWORD **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_DWORD *)(v16[4] + 4 * v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_230193F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<unsigned long long,unsigned long long>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_QWORD **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_QWORD *)(v16[4] + 8 * v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_23019406C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<unsigned long long,unsigned long>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_QWORD **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_QWORD *)(v16[4] + 8 * v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_230194174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<int,char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_BYTE **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_DWORD *)(v16[4] + 4 * v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_23019427C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<int,signed char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_BYTE **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_DWORD *)(v16[4] + 4 * v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_230194384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<int,short>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_WORD **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_DWORD *)(v16[4] + 4 * v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_23019448C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<int,int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_DWORD **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_DWORD *)(v16[4] + 4 * v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_230194594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<long long,int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_DWORD **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_QWORD *)(v16[4] + 8 * v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_23019469C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<long long,long long>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_QWORD **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_QWORD *)(v16[4] + 8 * v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_2301947A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<float,float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_DWORD **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_DWORD *)(v16[4] + 4 * v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_2301948AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTableVector<pxrInternal__aapl__pxrReserved__::GfVec2f,float,2>(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  realityio *v7;
  NSObject *v8;
  unint64_t v9;
  const char *v10;
  char v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  _BYTE v24[8];
  __int128 v25;
  _QWORD *v26;
  __int128 v27;
  void *v28[2];
  char v29;
  __int128 __p;
  _BYTE v31[8];
  uint64_t v32;
  _BYTE buf[24];
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v23, "values");
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, (uint64_t)v24);
      if (!v24[0])
      {
        v8 = *(NSObject **)realityio::logObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v9 = v23 & 0xFFFFFFFFFFFFFFF8;
          if ((v23 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v10 = (const char *)(v9 + 16);
            if (*(char *)(v9 + 39) < 0)
              v10 = *(const char **)v10;
          }
          else
          {
            v10 = "";
          }
          v22 = &v26;
          if (v27 < 0)
            v22 = v26;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v10;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v22;
          _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v28);
      v25 = *(_OWORD *)buf;
      v26 = *(_QWORD **)&buf[16];
      *(_QWORD *)&v27 = v34;
      *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)((char *)&v34 + 7);
      v12 = HIBYTE(v34);
      v34 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      v24[0] = 0;
      HIBYTE(v27) = v12;
      if (v29 < 0)
        operator delete(v28[0]);
    }
    if ((v32 & 7) != 0)
    {
      v13 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v31);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    v25 = *(_OWORD *)buf;
    v26 = *(_QWORD **)&buf[16];
    *(_QWORD *)&v27 = v34;
    *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)((char *)&v34 + 7);
    v11 = HIBYTE(v34);
    v34 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    v24[0] = 0;
    HIBYTE(v27) = v11;
    if ((v31[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
  if ((v23 & 7) != 0)
  {
    v15 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if (v24[0])
  {
    v17 = v25;
    if ((_QWORD)v25)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = *(_QWORD **)(*a5 + v18);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v25);
        *v20 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * v19++);
        v18 += 16;
      }
      while (v17 != v19);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,realityio::DetailedError>::~Result((uint64_t)v24);
}

void sub_230194BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,realityio::DetailedError>::~Result((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  if ((a2 & 7) != 0)
  {
    v3 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::usdToRe_HashTableVector<pxrInternal__aapl__pxrReserved__::GfVec3f,float,3>(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  realityio *v7;
  NSObject *v8;
  unint64_t v9;
  const char *v10;
  char v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  _BYTE v25[8];
  __int128 v26;
  _QWORD *v27;
  __int128 v28;
  void *v29[2];
  char v30;
  __int128 __p;
  _BYTE v32[8];
  uint64_t v33;
  _BYTE buf[24];
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v24, "values");
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, (uint64_t)v25);
      if (!v25[0])
      {
        v8 = *(NSObject **)realityio::logObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v9 = v24 & 0xFFFFFFFFFFFFFFF8;
          if ((v24 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v10 = (const char *)(v9 + 16);
            if (*(char *)(v9 + 39) < 0)
              v10 = *(const char **)v10;
          }
          else
          {
            v10 = "";
          }
          v23 = &v27;
          if (v28 < 0)
            v23 = v27;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v10;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v23;
          _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v29, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v29);
      v26 = *(_OWORD *)buf;
      v27 = *(_QWORD **)&buf[16];
      *(_QWORD *)&v28 = v35;
      *(_QWORD *)((char *)&v28 + 7) = *(_QWORD *)((char *)&v35 + 7);
      v12 = HIBYTE(v35);
      v35 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      v25[0] = 0;
      HIBYTE(v28) = v12;
      if (v30 < 0)
        operator delete(v29[0]);
    }
    if ((v33 & 7) != 0)
    {
      v13 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v32);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    v26 = *(_OWORD *)buf;
    v27 = *(_QWORD **)&buf[16];
    *(_QWORD *)&v28 = v35;
    *(_QWORD *)((char *)&v28 + 7) = *(_QWORD *)((char *)&v35 + 7);
    v11 = HIBYTE(v35);
    v35 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    v25[0] = 0;
    HIBYTE(v28) = v11;
    if ((v32[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
  if ((v24 & 7) != 0)
  {
    v15 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if (v25[0])
  {
    v17 = v26;
    if ((_QWORD)v26)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = *(_QWORD *)(*a5 + v18);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v26);
        v21 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + v19);
        *(_DWORD *)(v20 + 8) = *(_DWORD *)(*((_QWORD *)&v28 + 1) + v19 + 8);
        *(_QWORD *)v20 = v21;
        v19 += 12;
        v18 += 16;
        --v17;
      }
      while (v17);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)v25);
}

void sub_230194F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  if ((a2 & 7) != 0)
  {
    v3 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::usdToRe_HashTableVector<pxrInternal__aapl__pxrReserved__::GfVec4f,float,4>(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  realityio *v7;
  NSObject *v8;
  unint64_t v9;
  const char *v10;
  char v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  _BYTE v23[8];
  __int128 v24;
  _QWORD *v25;
  __int128 v26;
  void *v27[2];
  char v28;
  __int128 __p;
  _BYTE v30[8];
  uint64_t v31;
  _BYTE buf[24];
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v22, "values");
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, (uint64_t)v23);
      if (!v23[0])
      {
        v8 = *(NSObject **)realityio::logObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v9 = v22 & 0xFFFFFFFFFFFFFFF8;
          if ((v22 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v10 = (const char *)(v9 + 16);
            if (*(char *)(v9 + 39) < 0)
              v10 = *(const char **)v10;
          }
          else
          {
            v10 = "";
          }
          v21 = &v25;
          if (v26 < 0)
            v21 = v25;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v10;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v21;
          _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v27);
      v24 = *(_OWORD *)buf;
      v25 = *(_QWORD **)&buf[16];
      *(_QWORD *)&v26 = v33;
      *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)((char *)&v33 + 7);
      v12 = HIBYTE(v33);
      v33 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      v23[0] = 0;
      HIBYTE(v26) = v12;
      if (v28 < 0)
        operator delete(v27[0]);
    }
    if ((v31 & 7) != 0)
    {
      v13 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v30);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    v24 = *(_OWORD *)buf;
    v25 = *(_QWORD **)&buf[16];
    *(_QWORD *)&v26 = v33;
    *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)((char *)&v33 + 7);
    v11 = HIBYTE(v33);
    v33 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    v23[0] = 0;
    HIBYTE(v26) = v11;
    if ((v30[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
  if ((v22 & 7) != 0)
  {
    v15 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if (v23[0])
  {
    v17 = v24;
    if ((_QWORD)v24)
    {
      v18 = 0;
      do
      {
        v19 = *(_OWORD **)(*a5 + v18);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v24);
        *v19 = *(_OWORD *)(*((_QWORD *)&v26 + 1) + v18);
        v18 += 16;
        --v17;
      }
      while (v17);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,realityio::DetailedError>::~Result((uint64_t)v23);
}

void sub_230195270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,realityio::DetailedError>::~Result((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  if ((a2 & 7) != 0)
  {
    v3 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<pxrInternal__aapl__pxrReserved__::GfQuatf,pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  realityio *v7;
  NSObject *v8;
  unint64_t v9;
  const char *v10;
  char v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  _BYTE v23[8];
  __int128 v24;
  _QWORD *v25;
  __int128 v26;
  void *v27[2];
  char v28;
  __int128 __p;
  _BYTE v30[8];
  uint64_t v31;
  _BYTE buf[24];
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v22, "values");
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((uint64_t)v23, (pxrInternal__aapl__pxrReserved__::UsdObject *)&__p);
      if (!v23[0])
      {
        v8 = *(NSObject **)realityio::logObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v9 = v22 & 0xFFFFFFFFFFFFFFF8;
          if ((v22 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v10 = (const char *)(v9 + 16);
            if (*(char *)(v9 + 39) < 0)
              v10 = *(const char **)v10;
          }
          else
          {
            v10 = "";
          }
          v21 = &v25;
          if (v26 < 0)
            v21 = v25;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v10;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v21;
          _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v27);
      v24 = *(_OWORD *)buf;
      v25 = *(_QWORD **)&buf[16];
      *(_QWORD *)&v26 = v33;
      *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)((char *)&v33 + 7);
      v12 = HIBYTE(v33);
      v33 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      v23[0] = 0;
      HIBYTE(v26) = v12;
      if (v28 < 0)
        operator delete(v27[0]);
    }
    if ((v31 & 7) != 0)
    {
      v13 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v30);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    v24 = *(_OWORD *)buf;
    v25 = *(_QWORD **)&buf[16];
    *(_QWORD *)&v26 = v33;
    *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)((char *)&v33 + 7);
    v11 = HIBYTE(v33);
    v33 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    v23[0] = 0;
    HIBYTE(v26) = v11;
    if ((v30[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
  if ((v22 & 7) != 0)
  {
    v15 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if (v23[0])
  {
    v17 = v24;
    if ((_QWORD)v24)
    {
      v18 = 0;
      do
      {
        v19 = *(_OWORD **)(*a5 + v18);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v24);
        *v19 = *(_OWORD *)(*((_QWORD *)&v26 + 1) + v18);
        v18 += 16;
        --v17;
      }
      while (v17);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,realityio::DetailedError>::~Result((uint64_t)v23);
}

void sub_2301955BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,realityio::DetailedError>::~Result((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  if ((a2 & 7) != 0)
  {
    v3 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<double,double>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[5];

  MEMORY[0x2348B274C](&v14, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a1);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if (v15[0])
  {
    v9 = v16[0];
    if (v16[0])
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_QWORD **)(*a5 + v10);
        pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16);
        *v12 = *(_QWORD *)(v16[4] + 8 * v11++);
        v10 += 16;
      }
      while (v9 != v11);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_230195700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  unsigned int *v11;
  unsigned int v12;

  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTable<BOOL,BOOL>(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  realityio *v7;
  NSObject *v8;
  unint64_t v9;
  const char *v10;
  char v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _QWORD *v22;
  uint64_t v23;
  _BYTE v24[8];
  __int128 v25;
  _QWORD *v26;
  __int128 v27;
  void *v28[2];
  char v29;
  __int128 __p;
  _BYTE v31[8];
  uint64_t v32;
  _BYTE buf[24];
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v23, "values");
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((uint64_t)v24, (pxrInternal__aapl__pxrReserved__::UsdObject *)&__p);
      if (!v24[0])
      {
        v8 = *(NSObject **)realityio::logObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v9 = v23 & 0xFFFFFFFFFFFFFFF8;
          if ((v23 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v10 = (const char *)(v9 + 16);
            if (*(char *)(v9 + 39) < 0)
              v10 = *(const char **)v10;
          }
          else
          {
            v10 = "";
          }
          v22 = &v26;
          if (v27 < 0)
            v22 = v26;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v10;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v22;
          _os_log_error_impl(&dword_22FF26000, v8, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v28);
      v25 = *(_OWORD *)buf;
      v26 = *(_QWORD **)&buf[16];
      *(_QWORD *)&v27 = v34;
      *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)((char *)&v34 + 7);
      v12 = HIBYTE(v34);
      v34 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      v24[0] = 0;
      HIBYTE(v27) = v12;
      if (v29 < 0)
        operator delete(v28[0]);
    }
    if ((v32 & 7) != 0)
    {
      v13 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v31);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    v25 = *(_OWORD *)buf;
    v26 = *(_QWORD **)&buf[16];
    *(_QWORD *)&v27 = v34;
    *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)((char *)&v34 + 7);
    v11 = HIBYTE(v34);
    v34 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    v24[0] = 0;
    HIBYTE(v27) = v11;
    if ((v31[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
  if ((v23 & 7) != 0)
  {
    v15 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if (v24[0])
  {
    v17 = v25;
    if ((_QWORD)v25)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = *(_BYTE **)(*a5 + v18);
        pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v25);
        *v20 = *(_BYTE *)(*((_QWORD *)&v27 + 1) + v19++);
        v18 += 16;
      }
      while (v17 != v19);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,realityio::DetailedError>::~Result((uint64_t)v24);
}

void sub_230195A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,realityio::DetailedError>::~Result((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  if ((a2 & 7) != 0)
  {
    v3 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::usdToRe_HashTableString(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  std::string __p;
  uint64_t v19;
  _BYTE v20[8];
  _QWORD v21[4];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v19, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19, (uint64_t)v20);
  if ((v19 & 7) != 0)
  {
    v8 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if (v20[0])
  {
    v10 = v21[0];
    if (v21[0])
    {
      v11 = 0;
      v12 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v21);
        v13 = (__int128 *)(v22 + v11);
        if (*(char *)(v22 + v11 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
        }
        else
        {
          v14 = *v13;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        }
        v15 = *(_QWORD *)(*a5 + v12);
        v16 = a4[1];
        v23 = *a4;
        v24 = v16;
        RETypeInfoGetDictionaryValueType();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v12 += 16;
        v11 += 24;
        --v10;
      }
      while (v10);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result((uint64_t)v20);
}

void sub_230195BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  unsigned int *v16;
  unsigned int v17;

  if ((a15 & 7) != 0)
  {
    v16 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::usdToRe_HashTableAssetHandle(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__ *a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  const std::string::value_type **v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t result;
  std::string v18;
  std::string __p;
  uint64_t v20;
  _QWORD v21[4];
  uint64_t v22;
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x2348B274C](&v20, "values");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20);
  if ((v20 & 7) != 0)
  {
    v5 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((uint64_t)&v20, (pxrInternal__aapl__pxrReserved__::UsdObject *)v23);
  if ((_BYTE)v20)
  {
    v7 = v21[0];
    if (v21[0])
    {
      v8 = 0;
      v9 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v21);
        v10 = v22;
        v11 = (__int128 *)(v22 + v9);
        if (*(char *)(v22 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
        }
        else
        {
          v12 = *v11;
          v18.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
          *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v12;
        }
        v13 = (const std::string::value_type **)(v10 + v9 + 24);
        if (*(char *)(v10 + v9 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *v13, *(_QWORD *)(v10 + v9 + 32));
        }
        else
        {
          v14 = *(_OWORD *)v13;
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + v9 + 40);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        }
        REAssetHandleSet();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        v9 += 48;
        v8 += 16;
        --v7;
      }
      while (v7);
    }
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,realityio::DetailedError>::~Result((uint64_t)&v20);
  if ((v26 & 7) != 0)
  {
    v15 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  result = v24;
  if (v24)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
  return result;
}

void sub_230195E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a24);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 __p;
  _BYTE v22[8];
  uint64_t v23;
  void *v24[2];
  char v25;
  _QWORD v26[2];
  _BYTE buf[24];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
      if (!*(_BYTE *)a1)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v20 = *(_QWORD *)(a1 + 24);
          v19 = a1 + 24;
          v18 = v20;
          if (*(char *)(v19 + 23) >= 0)
            v18 = v19;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v18;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      v13 = *(_QWORD *)&buf[16];
      v26[0] = v28;
      *(_QWORD *)((char *)v26 + 7) = *(_QWORD *)((char *)&v28 + 7);
      v14 = HIBYTE(v28);
      v28 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v26 + 7);
      v15 = v26[0];
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v15;
      *(_BYTE *)(a1 + 47) = v14;
      if (v25 < 0)
        operator delete(v24[0]);
    }
    if ((v23 & 7) != 0)
    {
      v16 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v22);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    v10 = *(_QWORD *)&buf[16];
    v24[0] = (void *)v28;
    *(void **)((char *)v24 + 7) = *(void **)((char *)&v28 + 7);
    v11 = HIBYTE(v28);
    v28 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v24 + 7);
    v12 = v24[0];
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v12;
    *(_BYTE *)(a1 + 47) = v11;
    if ((v22[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_2301960F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFBEC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFBEC8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::operator()(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  void (*v6)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t);
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v6 = *(void (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t))(a1 + 8);
  v10 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6(a2, &v10, *a4, a5, a6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_23019621C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::target_type()
{
}

_QWORD *std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>> const&>((uint64_t)a1, v4, a2, a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_230196310(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>> const&>(uint64_t result, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v7 = result;
  v8 = (_QWORD *)(result + 8);
  if ((_QWORD *)(result + 8) != a2)
  {
    result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](result + 16, a3, a2 + 4);
    if (!(_DWORD)result)
    {
      result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, a2 + 4, a3);
      if (!(_DWORD)result)
      {
        v25 = a2;
        v26 = a2;
        v12 = &v25;
        if (a2)
          return result;
        goto LABEL_31;
      }
      v12 = (uint64_t **)(a2 + 1);
      v11 = (uint64_t *)a2[1];
      if (v11)
      {
        v13 = (_QWORD *)a2[1];
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        v17 = a2;
        do
        {
          v14 = (_QWORD *)v17[2];
          v16 = *v14 == (_QWORD)v17;
          v17 = v14;
        }
        while (!v16);
      }
      if (v14 != v8)
      {
        result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, a3, v14 + 4);
        if (!(_DWORD)result)
        {
LABEL_29:
          result = (uint64_t)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(v7, &v26, a3);
          v12 = (uint64_t **)result;
          goto LABEL_30;
        }
        v11 = *v12;
      }
      if (v11)
      {
        v26 = v14;
        v12 = (uint64_t **)v14;
      }
      else
      {
        v26 = a2;
      }
LABEL_30:
      if (*v12)
        return result;
      goto LABEL_31;
    }
  }
  if (*(_QWORD **)v7 != a2)
  {
    v9 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (_QWORD *)v15[2];
        v16 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v16);
    }
    result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, v10 + 4, a3);
    if ((_DWORD)result)
      goto LABEL_16;
    goto LABEL_29;
  }
  v10 = a2;
LABEL_16:
  if (*a2)
  {
    v26 = v10;
    v12 = (uint64_t **)(v10 + 1);
    goto LABEL_30;
  }
  v26 = a2;
  v12 = (uint64_t **)a2;
LABEL_31:
  v18 = (uint64_t *)operator new(0x48uLL);
  v19 = v18;
  v20 = *a4;
  v18[4] = *a4;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v18[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)(v18 + 5), (uint64_t)(a4 + 1));
  v23 = (uint64_t)v26;
  *v19 = 0;
  v19[1] = 0;
  v19[2] = v23;
  *v12 = v19;
  v24 = **(_QWORD **)v7;
  if (v24)
  {
    *(_QWORD *)v7 = v24;
    v19 = *v12;
  }
  result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v19);
  ++*(_QWORD *)(v7 + 16);
  return result;
}

void sub_230196544(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = v1[4];
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  unsigned int *v4;
  unsigned int v5;

  *a1 = a2;
  if ((a2 & 7) != 0)
  {
    v4 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](a1 + 1, a3);
  return a1;
}

_QWORD *std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  a1[1] = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>> const&>((uint64_t)a1, v3, v5 + 4, v5 + 4);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_23019668C(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 __p;
  _BYTE v22[8];
  uint64_t v23;
  void *v24[2];
  char v25;
  _QWORD v26[2];
  _BYTE buf[24];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
      if (!*(_BYTE *)a1)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v20 = *(_QWORD *)(a1 + 24);
          v19 = a1 + 24;
          v18 = v20;
          if (*(char *)(v19 + 23) >= 0)
            v18 = v19;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v18;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      v13 = *(_QWORD *)&buf[16];
      v26[0] = v28;
      *(_QWORD *)((char *)v26 + 7) = *(_QWORD *)((char *)&v28 + 7);
      v14 = HIBYTE(v28);
      v28 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v26 + 7);
      v15 = v26[0];
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v15;
      *(_BYTE *)(a1 + 47) = v14;
      if (v25 < 0)
        operator delete(v24[0]);
    }
    if ((v23 & 7) != 0)
    {
      v16 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v22);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    v10 = *(_QWORD *)&buf[16];
    v24[0] = (void *)v28;
    *(void **)((char *)v24 + 7) = *(void **)((char *)&v28 + 7);
    v11 = HIBYTE(v28);
    v28 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v24 + 7);
    v12 = v24[0];
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v12;
    *(_BYTE *)(a1 + 47) = v11;
    if ((v22[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_230196908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 __p;
  _BYTE v22[8];
  uint64_t v23;
  void *v24[2];
  char v25;
  _QWORD v26[2];
  _BYTE buf[24];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(a1, (pxrInternal__aapl__pxrReserved__::UsdObject *)&__p);
      if (!*(_BYTE *)a1)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v20 = *(_QWORD *)(a1 + 24);
          v19 = a1 + 24;
          v18 = v20;
          if (*(char *)(v19 + 23) >= 0)
            v18 = v19;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v18;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      v13 = *(_QWORD *)&buf[16];
      v26[0] = v28;
      *(_QWORD *)((char *)v26 + 7) = *(_QWORD *)((char *)&v28 + 7);
      v14 = HIBYTE(v28);
      v28 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v26 + 7);
      v15 = v26[0];
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v15;
      *(_BYTE *)(a1 + 47) = v14;
      if (v25 < 0)
        operator delete(v24[0]);
    }
    if ((v23 & 7) != 0)
    {
      v16 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v22);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    v10 = *(_QWORD *)&buf[16];
    v24[0] = (void *)v28;
    *(void **)((char *)v24 + 7) = *(void **)((char *)&v28 + 7);
    v11 = HIBYTE(v28);
    v28 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v24 + 7);
    v12 = v24[0];
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v12;
    *(_BYTE *)(a1 + 47) = v11;
    if ((v22[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_230196BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 __p;
  _BYTE v22[8];
  uint64_t v23;
  void *v24[2];
  char v25;
  _QWORD v26[2];
  _BYTE buf[24];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
      if (!*(_BYTE *)a1)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v20 = *(_QWORD *)(a1 + 24);
          v19 = a1 + 24;
          v18 = v20;
          if (*(char *)(v19 + 23) >= 0)
            v18 = v19;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v18;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      v13 = *(_QWORD *)&buf[16];
      v26[0] = v28;
      *(_QWORD *)((char *)v26 + 7) = *(_QWORD *)((char *)&v28 + 7);
      v14 = HIBYTE(v28);
      v28 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v26 + 7);
      v15 = v26[0];
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v15;
      *(_BYTE *)(a1 + 47) = v14;
      if (v25 < 0)
        operator delete(v24[0]);
    }
    if ((v23 & 7) != 0)
    {
      v16 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v22);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    v10 = *(_QWORD *)&buf[16];
    v24[0] = (void *)v28;
    *(void **)((char *)v24 + 7) = *(void **)((char *)&v28 + 7);
    v11 = HIBYTE(v28);
    v28 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v24 + 7);
    v12 = v24[0];
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v12;
    *(_BYTE *)(a1 + 47) = v11;
    if ((v22[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_230196E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 __p;
  _BYTE v22[8];
  uint64_t v23;
  void *v24[2];
  char v25;
  _QWORD v26[2];
  _BYTE buf[24];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
      if (!*(_BYTE *)a1)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v20 = *(_QWORD *)(a1 + 24);
          v19 = a1 + 24;
          v18 = v20;
          if (*(char *)(v19 + 23) >= 0)
            v18 = v19;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v18;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      v13 = *(_QWORD *)&buf[16];
      v26[0] = v28;
      *(_QWORD *)((char *)v26 + 7) = *(_QWORD *)((char *)&v28 + 7);
      v14 = HIBYTE(v28);
      v28 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v26 + 7);
      v15 = v26[0];
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v15;
      *(_BYTE *)(a1 + 47) = v14;
      if (v25 < 0)
        operator delete(v24[0]);
    }
    if ((v23 & 7) != 0)
    {
      v16 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v22);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    v10 = *(_QWORD *)&buf[16];
    v24[0] = (void *)v28;
    *(void **)((char *)v24 + 7) = *(void **)((char *)&v28 + 7);
    v11 = HIBYTE(v28);
    v28 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v24 + 7);
    v12 = v24[0];
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v12;
    *(_BYTE *)(a1 + 47) = v11;
    if ((v22[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_230197100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 __p;
  _BYTE v22[8];
  uint64_t v23;
  void *v24[2];
  char v25;
  _QWORD v26[2];
  _BYTE buf[24];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
      if (!*(_BYTE *)a1)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v20 = *(_QWORD *)(a1 + 24);
          v19 = a1 + 24;
          v18 = v20;
          if (*(char *)(v19 + 23) >= 0)
            v18 = v19;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v18;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      v13 = *(_QWORD *)&buf[16];
      v26[0] = v28;
      *(_QWORD *)((char *)v26 + 7) = *(_QWORD *)((char *)&v28 + 7);
      v14 = HIBYTE(v28);
      v28 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v26 + 7);
      v15 = v26[0];
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v15;
      *(_BYTE *)(a1 + 47) = v14;
      if (v25 < 0)
        operator delete(v24[0]);
    }
    if ((v23 & 7) != 0)
    {
      v16 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v22);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    v10 = *(_QWORD *)&buf[16];
    v24[0] = (void *)v28;
    *(void **)((char *)v24 + 7) = *(void **)((char *)&v28 + 7);
    v11 = HIBYTE(v28);
    v28 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v24 + 7);
    v12 = v24[0];
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v12;
    *(_BYTE *)(a1 + 47) = v11;
    if ((v22[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_2301973A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

uint64_t std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::map[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  qword_255E54E48 = 0;
  qword_255E54E40 = 0;
  if (a2)
  {
    v2 = (uint64_t *)result;
    v3 = 0;
    v4 = (uint64_t *)(result + 32 * a2);
    v5 = &qword_255E54E40;
    while (v5 != &qword_255E54E40)
    {
      if (v3)
      {
        do
        {
          v6 = (uint64_t *)v3;
          v3 = *(_QWORD *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        v7 = &qword_255E54E40;
        do
        {
          v6 = (uint64_t *)v7[2];
          v8 = *v6 == (_QWORD)v7;
          v7 = v6;
        }
        while (v8);
      }
      result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54E48, v6 + 4, v2);
      v3 = qword_255E54E40;
      if ((_DWORD)result)
        goto LABEL_11;
      if (qword_255E54E40)
      {
        v9 = &qword_255E54E40;
        while (1)
        {
          while (1)
          {
            v6 = (uint64_t *)v3;
            v10 = (uint64_t *)(v3 + 32);
            if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54E48, v2, (uint64_t *)(v3 + 32)))break;
            v3 = *v6;
            v9 = v6;
            if (!*v6)
              goto LABEL_24;
          }
          result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54E48, v10, v2);
          if (!(_DWORD)result)
            break;
          v9 = v6 + 1;
          v3 = v6[1];
          if (!v3)
            goto LABEL_24;
        }
LABEL_13:
        if (*v9)
          goto LABEL_32;
        goto LABEL_24;
      }
LABEL_23:
      v9 = &qword_255E54E40;
      v6 = &qword_255E54E40;
LABEL_24:
      v11 = (uint64_t *)operator new(0x40uLL);
      v12 = v11;
      v13 = *v2;
      v11[4] = *v2;
      if ((v13 & 7) != 0)
      {
        v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 2, v14));
        if ((v15 & 1) == 0)
          v11[4] &= 0xFFFFFFFFFFFFFFF8;
      }
      std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v11 + 5, v2 + 1);
      *v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v6;
      *v9 = (uint64_t)v12;
      {
        v12 = (uint64_t *)*v9;
      }
      result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_255E54E40, v12);
      ++qword_255E54E48;
LABEL_32:
      v2 += 4;
      if (v2 == v4)
        return result;
      v3 = qword_255E54E40;
    }
    v6 = &qword_255E54E40;
LABEL_11:
    if (v3)
    {
      v9 = v6 + 1;
      goto LABEL_13;
    }
    goto LABEL_23;
  }
  return result;
}

void sub_2301975C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = v1[4];
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  operator delete(v1);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>>::destroy(*(_QWORD **)(v2 + 3648));
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_HashTableEntries<unsigned char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, __int128 *a3, char **a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  realityio *CurrentKey;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 *v43;
  __int128 *v44;
  NSObject *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t CurrentValue;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62[8];
  _OWORD v63[2];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v54, "keys");
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v54, a1);
  if (v62[0])
  {
    v59 = v63[0];
    v60 = v63[1];
    v7 = v64;
  }
  else
  {
    v59 = v81;
    v60 = v82;
    v7 = v83;
  }
  v61 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v60 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v60 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v81);
  if ((v54 & 7) != 0)
  {
    v10 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  MEMORY[0x2348B274C](&v81, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v81, a1);
  if ((v81 & 7) != 0)
  {
    v12 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (v62[0])
  {
    v81 = 0u;
    v82 = 0u;
    v14 = a3[1];
    v79 = *a3;
    v80 = v14;
    RETypeInfoGetDictionaryValueType();
    if (*(_QWORD *)&v63[0])
    {
      v15 = 0;
      do
      {
        v16 = a3[1];
        v77 = *a3;
        v78 = v16;
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v17 = REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v63);
        v18 = *(_QWORD *)(v64 + 8 * v15);
        v57 = v17;
        v19 = (std::__shared_weak_count *)operator new();
        v19->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v19->__shared_weak_owners_ = 0;
        v19[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v58 = v19;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v55 = v17;
        v22 = (std::__shared_weak_count *)operator new();
        v22->__shared_owners_ = 0;
        v23 = (unint64_t *)&v22->__shared_owners_;
        v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v22->__shared_weak_owners_ = 0;
        v22[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v56 = v22;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        ++v15;
      }
      while (v15 < *(_QWORD *)&v63[0]);
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize((int64x2_t *)a4, v59);
    *((_QWORD *)&v81 + 1) = 0;
    *(_QWORD *)&v82 = 0;
    *(_QWORD *)&v81 = (char *)&v81 + 8;
    if ((_QWORD)v59)
    {
      v25 = 0;
      do
      {
        v26 = a3[1];
        v75 = *a3;
        v76 = v26;
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v27 = v61 + v25;
        v28 = (uint64_t *)*((_QWORD *)&v81 + 1);
        v29 = (uint64_t **)&v81 + 1;
        v30 = (uint64_t **)&v81 + 1;
        if (*((_QWORD *)&v81 + 1))
        {
          while (1)
          {
            while (1)
            {
              v30 = (uint64_t **)v28;
              v31 = v28[4];
              if (v31 <= v27)
                break;
              v28 = *v30;
              v29 = v30;
              if (!*v30)
                goto LABEL_36;
            }
            if (v31 >= v27)
              break;
            v28 = v30[1];
            if (!v28)
            {
              v29 = v30 + 1;
              goto LABEL_36;
            }
          }
          v32 = (uint64_t *)v30;
        }
        else
        {
LABEL_36:
          v32 = (uint64_t *)operator new(0x30uLL);
          v32[4] = v27;
          v32[5] = 0;
          *v32 = 0;
          v32[1] = 0;
          v32[2] = (uint64_t)v30;
          *v29 = v32;
          v33 = v32;
          if (*(_QWORD *)v81)
          {
            *(_QWORD *)&v81 = *(_QWORD *)v81;
            v33 = *v29;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v81 + 1), v33);
          *(_QWORD *)&v82 = v82 + 1;
        }
        v32[5] = v25++;
      }
      while (v25 < (unint64_t)v59);
    }
    v34 = a3[1];
    v73 = *a3;
    v74 = v34;
    REDictionaryIteratorCreate();
    while (1)
    {
      v35 = a3[1];
      v71 = *a3;
      v72 = v35;
      if (!REDictionaryIteratorMoveNext())
        break;
      v36 = a3[1];
      v69 = *a3;
      v70 = v36;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      v38 = (__int128 *)*((_QWORD *)&v81 + 1);
      if (!*((_QWORD *)&v81 + 1))
        goto LABEL_53;
      v39 = (__int128 *)((char *)&v81 + 8);
      do
      {
        v40 = v38;
        v41 = v39;
        v42 = *((_QWORD *)v38 + 4);
        v43 = (__int128 *)((char *)v38 + 8);
        if (v42 >= (unint64_t)CurrentKey)
        {
          v43 = v40;
          v39 = v40;
        }
        v38 = *(__int128 **)v43;
      }
      while (v38);
      if (v39 != (__int128 *)((char *)&v81 + 8)
        && (v42 >= (unint64_t)CurrentKey ? (v44 = v40) : (v44 = v41),
            (unint64_t)CurrentKey >= *((_QWORD *)v44 + 4)))
      {
        if (v42 < (unint64_t)CurrentKey)
          v40 = v41;
        v46 = *((_QWORD *)v40 + 5);
        v47 = a3[1];
        v67 = *a3;
        v68 = v47;
        CurrentValue = REDictionaryIteratorGetCurrentValue();
        *(_QWORD *)&v54 = CurrentValue;
        v49 = (_QWORD *)operator new();
        *v49 = &off_24FDFBE68;
        v49[1] = 0;
        v49[2] = 0;
        v49[3] = CurrentValue;
        *((_QWORD *)&v54 + 1) = v49;
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)&(*a4)[16 * v46], &v54);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      else
      {
LABEL_53:
        v45 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v54) = 0;
          _os_log_impl(&dword_22FF26000, v45, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", (uint8_t *)&v54, 2u);
        }
      }
    }
    v53 = a3[1];
    v65 = *a3;
    v66 = v53;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((_QWORD **)&v81 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
}

void sub_230197B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_HashTableEntries<unsigned int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, __int128 *a3, char **a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  realityio *CurrentKey;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 *v43;
  __int128 *v44;
  NSObject *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t CurrentValue;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62[8];
  _OWORD v63[2];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v54, "keys");
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v54, a1);
  if (v62[0])
  {
    v59 = v63[0];
    v60 = v63[1];
    v7 = v64;
  }
  else
  {
    v59 = v81;
    v60 = v82;
    v7 = v83;
  }
  v61 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v60 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v60 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v81);
  if ((v54 & 7) != 0)
  {
    v10 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  MEMORY[0x2348B274C](&v81, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v81, a1);
  if ((v81 & 7) != 0)
  {
    v12 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (v62[0])
  {
    v81 = 0u;
    v82 = 0u;
    v14 = a3[1];
    v79 = *a3;
    v80 = v14;
    RETypeInfoGetDictionaryValueType();
    if (*(_QWORD *)&v63[0])
    {
      v15 = 0;
      do
      {
        v16 = a3[1];
        v77 = *a3;
        v78 = v16;
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v17 = REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v63);
        v18 = *(_QWORD *)(v64 + 8 * v15);
        v57 = v17;
        v19 = (std::__shared_weak_count *)operator new();
        v19->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v19->__shared_weak_owners_ = 0;
        v19[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v58 = v19;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v55 = v17;
        v22 = (std::__shared_weak_count *)operator new();
        v22->__shared_owners_ = 0;
        v23 = (unint64_t *)&v22->__shared_owners_;
        v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v22->__shared_weak_owners_ = 0;
        v22[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v56 = v22;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        ++v15;
      }
      while (v15 < *(_QWORD *)&v63[0]);
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize((int64x2_t *)a4, v59);
    *((_QWORD *)&v81 + 1) = 0;
    *(_QWORD *)&v82 = 0;
    *(_QWORD *)&v81 = (char *)&v81 + 8;
    if ((_QWORD)v59)
    {
      v25 = 0;
      do
      {
        v26 = a3[1];
        v75 = *a3;
        v76 = v26;
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v27 = v61 + 4 * v25;
        v28 = (uint64_t *)*((_QWORD *)&v81 + 1);
        v29 = (uint64_t **)&v81 + 1;
        v30 = (uint64_t **)&v81 + 1;
        if (*((_QWORD *)&v81 + 1))
        {
          while (1)
          {
            while (1)
            {
              v30 = (uint64_t **)v28;
              v31 = v28[4];
              if (v31 <= v27)
                break;
              v28 = *v30;
              v29 = v30;
              if (!*v30)
                goto LABEL_36;
            }
            if (v31 >= v27)
              break;
            v28 = v30[1];
            if (!v28)
            {
              v29 = v30 + 1;
              goto LABEL_36;
            }
          }
          v32 = (uint64_t *)v30;
        }
        else
        {
LABEL_36:
          v32 = (uint64_t *)operator new(0x30uLL);
          v32[4] = v27;
          v32[5] = 0;
          *v32 = 0;
          v32[1] = 0;
          v32[2] = (uint64_t)v30;
          *v29 = v32;
          v33 = v32;
          if (*(_QWORD *)v81)
          {
            *(_QWORD *)&v81 = *(_QWORD *)v81;
            v33 = *v29;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v81 + 1), v33);
          *(_QWORD *)&v82 = v82 + 1;
        }
        v32[5] = v25++;
      }
      while (v25 < (unint64_t)v59);
    }
    v34 = a3[1];
    v73 = *a3;
    v74 = v34;
    REDictionaryIteratorCreate();
    while (1)
    {
      v35 = a3[1];
      v71 = *a3;
      v72 = v35;
      if (!REDictionaryIteratorMoveNext())
        break;
      v36 = a3[1];
      v69 = *a3;
      v70 = v36;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      v38 = (__int128 *)*((_QWORD *)&v81 + 1);
      if (!*((_QWORD *)&v81 + 1))
        goto LABEL_53;
      v39 = (__int128 *)((char *)&v81 + 8);
      do
      {
        v40 = v38;
        v41 = v39;
        v42 = *((_QWORD *)v38 + 4);
        v43 = (__int128 *)((char *)v38 + 8);
        if (v42 >= (unint64_t)CurrentKey)
        {
          v43 = v40;
          v39 = v40;
        }
        v38 = *(__int128 **)v43;
      }
      while (v38);
      if (v39 != (__int128 *)((char *)&v81 + 8)
        && (v42 >= (unint64_t)CurrentKey ? (v44 = v40) : (v44 = v41),
            (unint64_t)CurrentKey >= *((_QWORD *)v44 + 4)))
      {
        if (v42 < (unint64_t)CurrentKey)
          v40 = v41;
        v46 = *((_QWORD *)v40 + 5);
        v47 = a3[1];
        v67 = *a3;
        v68 = v47;
        CurrentValue = REDictionaryIteratorGetCurrentValue();
        *(_QWORD *)&v54 = CurrentValue;
        v49 = (_QWORD *)operator new();
        *v49 = &off_24FDFBE68;
        v49[1] = 0;
        v49[2] = 0;
        v49[3] = CurrentValue;
        *((_QWORD *)&v54 + 1) = v49;
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)&(*a4)[16 * v46], &v54);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      else
      {
LABEL_53:
        v45 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v54) = 0;
          _os_log_impl(&dword_22FF26000, v45, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", (uint8_t *)&v54, 2u);
        }
      }
    }
    v53 = a3[1];
    v65 = *a3;
    v66 = v53;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((_QWORD **)&v81 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
}

void sub_230198288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_HashTableEntries<unsigned long long>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, __int128 *a3, char **a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  realityio *CurrentKey;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 *v43;
  __int128 *v44;
  NSObject *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t CurrentValue;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62[8];
  _OWORD v63[2];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v54, "keys");
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v54, a1);
  if (v62[0])
  {
    v59 = v63[0];
    v60 = v63[1];
    v7 = v64;
  }
  else
  {
    v59 = v81;
    v60 = v82;
    v7 = v83;
  }
  v61 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v60 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v60 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v81);
  if ((v54 & 7) != 0)
  {
    v10 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  MEMORY[0x2348B274C](&v81, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v81, a1);
  if ((v81 & 7) != 0)
  {
    v12 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (v62[0])
  {
    v81 = 0u;
    v82 = 0u;
    v14 = a3[1];
    v79 = *a3;
    v80 = v14;
    RETypeInfoGetDictionaryValueType();
    if (*(_QWORD *)&v63[0])
    {
      v15 = 0;
      do
      {
        v16 = a3[1];
        v77 = *a3;
        v78 = v16;
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v17 = REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v63);
        v18 = *(_QWORD *)(v64 + 8 * v15);
        v57 = v17;
        v19 = (std::__shared_weak_count *)operator new();
        v19->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v19->__shared_weak_owners_ = 0;
        v19[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v58 = v19;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v55 = v17;
        v22 = (std::__shared_weak_count *)operator new();
        v22->__shared_owners_ = 0;
        v23 = (unint64_t *)&v22->__shared_owners_;
        v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v22->__shared_weak_owners_ = 0;
        v22[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v56 = v22;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        ++v15;
      }
      while (v15 < *(_QWORD *)&v63[0]);
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize((int64x2_t *)a4, v59);
    *((_QWORD *)&v81 + 1) = 0;
    *(_QWORD *)&v82 = 0;
    *(_QWORD *)&v81 = (char *)&v81 + 8;
    if ((_QWORD)v59)
    {
      v25 = 0;
      do
      {
        v26 = a3[1];
        v75 = *a3;
        v76 = v26;
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v27 = v61 + 8 * v25;
        v28 = (uint64_t *)*((_QWORD *)&v81 + 1);
        v29 = (uint64_t **)&v81 + 1;
        v30 = (uint64_t **)&v81 + 1;
        if (*((_QWORD *)&v81 + 1))
        {
          while (1)
          {
            while (1)
            {
              v30 = (uint64_t **)v28;
              v31 = v28[4];
              if (v31 <= v27)
                break;
              v28 = *v30;
              v29 = v30;
              if (!*v30)
                goto LABEL_36;
            }
            if (v31 >= v27)
              break;
            v28 = v30[1];
            if (!v28)
            {
              v29 = v30 + 1;
              goto LABEL_36;
            }
          }
          v32 = (uint64_t *)v30;
        }
        else
        {
LABEL_36:
          v32 = (uint64_t *)operator new(0x30uLL);
          v32[4] = v27;
          v32[5] = 0;
          *v32 = 0;
          v32[1] = 0;
          v32[2] = (uint64_t)v30;
          *v29 = v32;
          v33 = v32;
          if (*(_QWORD *)v81)
          {
            *(_QWORD *)&v81 = *(_QWORD *)v81;
            v33 = *v29;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v81 + 1), v33);
          *(_QWORD *)&v82 = v82 + 1;
        }
        v32[5] = v25++;
      }
      while (v25 < (unint64_t)v59);
    }
    v34 = a3[1];
    v73 = *a3;
    v74 = v34;
    REDictionaryIteratorCreate();
    while (1)
    {
      v35 = a3[1];
      v71 = *a3;
      v72 = v35;
      if (!REDictionaryIteratorMoveNext())
        break;
      v36 = a3[1];
      v69 = *a3;
      v70 = v36;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      v38 = (__int128 *)*((_QWORD *)&v81 + 1);
      if (!*((_QWORD *)&v81 + 1))
        goto LABEL_53;
      v39 = (__int128 *)((char *)&v81 + 8);
      do
      {
        v40 = v38;
        v41 = v39;
        v42 = *((_QWORD *)v38 + 4);
        v43 = (__int128 *)((char *)v38 + 8);
        if (v42 >= (unint64_t)CurrentKey)
        {
          v43 = v40;
          v39 = v40;
        }
        v38 = *(__int128 **)v43;
      }
      while (v38);
      if (v39 != (__int128 *)((char *)&v81 + 8)
        && (v42 >= (unint64_t)CurrentKey ? (v44 = v40) : (v44 = v41),
            (unint64_t)CurrentKey >= *((_QWORD *)v44 + 4)))
      {
        if (v42 < (unint64_t)CurrentKey)
          v40 = v41;
        v46 = *((_QWORD *)v40 + 5);
        v47 = a3[1];
        v67 = *a3;
        v68 = v47;
        CurrentValue = REDictionaryIteratorGetCurrentValue();
        *(_QWORD *)&v54 = CurrentValue;
        v49 = (_QWORD *)operator new();
        *v49 = &off_24FDFBE68;
        v49[1] = 0;
        v49[2] = 0;
        v49[3] = CurrentValue;
        *((_QWORD *)&v54 + 1) = v49;
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)&(*a4)[16 * v46], &v54);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      else
      {
LABEL_53:
        v45 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v54) = 0;
          _os_log_impl(&dword_22FF26000, v45, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", (uint8_t *)&v54, 2u);
        }
      }
    }
    v53 = a3[1];
    v65 = *a3;
    v66 = v53;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((_QWORD **)&v81 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
}

void sub_23019897C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_HashTableEntries<int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, __int128 *a3, char **a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  realityio *CurrentKey;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 *v43;
  __int128 *v44;
  NSObject *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t CurrentValue;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62[8];
  _OWORD v63[2];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v54, "keys");
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v54, a1);
  if (v62[0])
  {
    v59 = v63[0];
    v60 = v63[1];
    v7 = v64;
  }
  else
  {
    v59 = v81;
    v60 = v82;
    v7 = v83;
  }
  v61 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v60 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v60 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v81);
  if ((v54 & 7) != 0)
  {
    v10 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  MEMORY[0x2348B274C](&v81, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v81, a1);
  if ((v81 & 7) != 0)
  {
    v12 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (v62[0])
  {
    v81 = 0u;
    v82 = 0u;
    v14 = a3[1];
    v79 = *a3;
    v80 = v14;
    RETypeInfoGetDictionaryValueType();
    if (*(_QWORD *)&v63[0])
    {
      v15 = 0;
      do
      {
        v16 = a3[1];
        v77 = *a3;
        v78 = v16;
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v17 = REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v63);
        v18 = *(_QWORD *)(v64 + 8 * v15);
        v57 = v17;
        v19 = (std::__shared_weak_count *)operator new();
        v19->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v19->__shared_weak_owners_ = 0;
        v19[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v58 = v19;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v55 = v17;
        v22 = (std::__shared_weak_count *)operator new();
        v22->__shared_owners_ = 0;
        v23 = (unint64_t *)&v22->__shared_owners_;
        v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v22->__shared_weak_owners_ = 0;
        v22[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v56 = v22;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        ++v15;
      }
      while (v15 < *(_QWORD *)&v63[0]);
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize((int64x2_t *)a4, v59);
    *((_QWORD *)&v81 + 1) = 0;
    *(_QWORD *)&v82 = 0;
    *(_QWORD *)&v81 = (char *)&v81 + 8;
    if ((_QWORD)v59)
    {
      v25 = 0;
      do
      {
        v26 = a3[1];
        v75 = *a3;
        v76 = v26;
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v27 = v61 + 4 * v25;
        v28 = (uint64_t *)*((_QWORD *)&v81 + 1);
        v29 = (uint64_t **)&v81 + 1;
        v30 = (uint64_t **)&v81 + 1;
        if (*((_QWORD *)&v81 + 1))
        {
          while (1)
          {
            while (1)
            {
              v30 = (uint64_t **)v28;
              v31 = v28[4];
              if (v31 <= v27)
                break;
              v28 = *v30;
              v29 = v30;
              if (!*v30)
                goto LABEL_36;
            }
            if (v31 >= v27)
              break;
            v28 = v30[1];
            if (!v28)
            {
              v29 = v30 + 1;
              goto LABEL_36;
            }
          }
          v32 = (uint64_t *)v30;
        }
        else
        {
LABEL_36:
          v32 = (uint64_t *)operator new(0x30uLL);
          v32[4] = v27;
          v32[5] = 0;
          *v32 = 0;
          v32[1] = 0;
          v32[2] = (uint64_t)v30;
          *v29 = v32;
          v33 = v32;
          if (*(_QWORD *)v81)
          {
            *(_QWORD *)&v81 = *(_QWORD *)v81;
            v33 = *v29;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v81 + 1), v33);
          *(_QWORD *)&v82 = v82 + 1;
        }
        v32[5] = v25++;
      }
      while (v25 < (unint64_t)v59);
    }
    v34 = a3[1];
    v73 = *a3;
    v74 = v34;
    REDictionaryIteratorCreate();
    while (1)
    {
      v35 = a3[1];
      v71 = *a3;
      v72 = v35;
      if (!REDictionaryIteratorMoveNext())
        break;
      v36 = a3[1];
      v69 = *a3;
      v70 = v36;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      v38 = (__int128 *)*((_QWORD *)&v81 + 1);
      if (!*((_QWORD *)&v81 + 1))
        goto LABEL_53;
      v39 = (__int128 *)((char *)&v81 + 8);
      do
      {
        v40 = v38;
        v41 = v39;
        v42 = *((_QWORD *)v38 + 4);
        v43 = (__int128 *)((char *)v38 + 8);
        if (v42 >= (unint64_t)CurrentKey)
        {
          v43 = v40;
          v39 = v40;
        }
        v38 = *(__int128 **)v43;
      }
      while (v38);
      if (v39 != (__int128 *)((char *)&v81 + 8)
        && (v42 >= (unint64_t)CurrentKey ? (v44 = v40) : (v44 = v41),
            (unint64_t)CurrentKey >= *((_QWORD *)v44 + 4)))
      {
        if (v42 < (unint64_t)CurrentKey)
          v40 = v41;
        v46 = *((_QWORD *)v40 + 5);
        v47 = a3[1];
        v67 = *a3;
        v68 = v47;
        CurrentValue = REDictionaryIteratorGetCurrentValue();
        *(_QWORD *)&v54 = CurrentValue;
        v49 = (_QWORD *)operator new();
        *v49 = &off_24FDFBE68;
        v49[1] = 0;
        v49[2] = 0;
        v49[3] = CurrentValue;
        *((_QWORD *)&v54 + 1) = v49;
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)&(*a4)[16 * v46], &v54);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      else
      {
LABEL_53:
        v45 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v54) = 0;
          _os_log_impl(&dword_22FF26000, v45, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", (uint8_t *)&v54, 2u);
        }
      }
    }
    v53 = a3[1];
    v65 = *a3;
    v66 = v53;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((_QWORD **)&v81 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
}

void sub_230199070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_HashTableEntries<long long>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, __int128 *a3, char **a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  realityio *CurrentKey;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 *v43;
  __int128 *v44;
  NSObject *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t CurrentValue;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62[8];
  _OWORD v63[2];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v54, "keys");
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v54, a1);
  if (v62[0])
  {
    v59 = v63[0];
    v60 = v63[1];
    v7 = v64;
  }
  else
  {
    v59 = v81;
    v60 = v82;
    v7 = v83;
  }
  v61 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v60 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v60 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v81);
  if ((v54 & 7) != 0)
  {
    v10 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  MEMORY[0x2348B274C](&v81, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v81, a1);
  if ((v81 & 7) != 0)
  {
    v12 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (v62[0])
  {
    v81 = 0u;
    v82 = 0u;
    v14 = a3[1];
    v79 = *a3;
    v80 = v14;
    RETypeInfoGetDictionaryValueType();
    if (*(_QWORD *)&v63[0])
    {
      v15 = 0;
      do
      {
        v16 = a3[1];
        v77 = *a3;
        v78 = v16;
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v17 = REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v63);
        v18 = *(_QWORD *)(v64 + 8 * v15);
        v57 = v17;
        v19 = (std::__shared_weak_count *)operator new();
        v19->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v19->__shared_weak_owners_ = 0;
        v19[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v58 = v19;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v55 = v17;
        v22 = (std::__shared_weak_count *)operator new();
        v22->__shared_owners_ = 0;
        v23 = (unint64_t *)&v22->__shared_owners_;
        v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v22->__shared_weak_owners_ = 0;
        v22[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v56 = v22;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        ++v15;
      }
      while (v15 < *(_QWORD *)&v63[0]);
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize((int64x2_t *)a4, v59);
    *((_QWORD *)&v81 + 1) = 0;
    *(_QWORD *)&v82 = 0;
    *(_QWORD *)&v81 = (char *)&v81 + 8;
    if ((_QWORD)v59)
    {
      v25 = 0;
      do
      {
        v26 = a3[1];
        v75 = *a3;
        v76 = v26;
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v27 = v61 + 8 * v25;
        v28 = (uint64_t *)*((_QWORD *)&v81 + 1);
        v29 = (uint64_t **)&v81 + 1;
        v30 = (uint64_t **)&v81 + 1;
        if (*((_QWORD *)&v81 + 1))
        {
          while (1)
          {
            while (1)
            {
              v30 = (uint64_t **)v28;
              v31 = v28[4];
              if (v31 <= v27)
                break;
              v28 = *v30;
              v29 = v30;
              if (!*v30)
                goto LABEL_36;
            }
            if (v31 >= v27)
              break;
            v28 = v30[1];
            if (!v28)
            {
              v29 = v30 + 1;
              goto LABEL_36;
            }
          }
          v32 = (uint64_t *)v30;
        }
        else
        {
LABEL_36:
          v32 = (uint64_t *)operator new(0x30uLL);
          v32[4] = v27;
          v32[5] = 0;
          *v32 = 0;
          v32[1] = 0;
          v32[2] = (uint64_t)v30;
          *v29 = v32;
          v33 = v32;
          if (*(_QWORD *)v81)
          {
            *(_QWORD *)&v81 = *(_QWORD *)v81;
            v33 = *v29;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v81 + 1), v33);
          *(_QWORD *)&v82 = v82 + 1;
        }
        v32[5] = v25++;
      }
      while (v25 < (unint64_t)v59);
    }
    v34 = a3[1];
    v73 = *a3;
    v74 = v34;
    REDictionaryIteratorCreate();
    while (1)
    {
      v35 = a3[1];
      v71 = *a3;
      v72 = v35;
      if (!REDictionaryIteratorMoveNext())
        break;
      v36 = a3[1];
      v69 = *a3;
      v70 = v36;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      v38 = (__int128 *)*((_QWORD *)&v81 + 1);
      if (!*((_QWORD *)&v81 + 1))
        goto LABEL_53;
      v39 = (__int128 *)((char *)&v81 + 8);
      do
      {
        v40 = v38;
        v41 = v39;
        v42 = *((_QWORD *)v38 + 4);
        v43 = (__int128 *)((char *)v38 + 8);
        if (v42 >= (unint64_t)CurrentKey)
        {
          v43 = v40;
          v39 = v40;
        }
        v38 = *(__int128 **)v43;
      }
      while (v38);
      if (v39 != (__int128 *)((char *)&v81 + 8)
        && (v42 >= (unint64_t)CurrentKey ? (v44 = v40) : (v44 = v41),
            (unint64_t)CurrentKey >= *((_QWORD *)v44 + 4)))
      {
        if (v42 < (unint64_t)CurrentKey)
          v40 = v41;
        v46 = *((_QWORD *)v40 + 5);
        v47 = a3[1];
        v67 = *a3;
        v68 = v47;
        CurrentValue = REDictionaryIteratorGetCurrentValue();
        *(_QWORD *)&v54 = CurrentValue;
        v49 = (_QWORD *)operator new();
        *v49 = &off_24FDFBE68;
        v49[1] = 0;
        v49[2] = 0;
        v49[3] = CurrentValue;
        *((_QWORD *)&v54 + 1) = v49;
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)&(*a4)[16 * v46], &v54);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      else
      {
LABEL_53:
        v45 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v54) = 0;
          _os_log_impl(&dword_22FF26000, v45, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", (uint8_t *)&v54, 2u);
        }
      }
    }
    v53 = a3[1];
    v65 = *a3;
    v66 = v53;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((_QWORD **)&v81 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
}

void sub_230199764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_HashTableEntries<float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, __int128 *a3, char **a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  realityio *CurrentKey;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 *v43;
  __int128 *v44;
  NSObject *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t CurrentValue;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62[8];
  _OWORD v63[2];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v54, "keys");
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v54, a1);
  if (v62[0])
  {
    v59 = v63[0];
    v60 = v63[1];
    v7 = v64;
  }
  else
  {
    v59 = v81;
    v60 = v82;
    v7 = v83;
  }
  v61 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v60 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v60 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v81);
  if ((v54 & 7) != 0)
  {
    v10 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  MEMORY[0x2348B274C](&v81, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v81, a1);
  if ((v81 & 7) != 0)
  {
    v12 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (v62[0])
  {
    v81 = 0u;
    v82 = 0u;
    v14 = a3[1];
    v79 = *a3;
    v80 = v14;
    RETypeInfoGetDictionaryValueType();
    if (*(_QWORD *)&v63[0])
    {
      v15 = 0;
      do
      {
        v16 = a3[1];
        v77 = *a3;
        v78 = v16;
        pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v17 = REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v63);
        v18 = *(_QWORD *)(v64 + 8 * v15);
        v57 = v17;
        v19 = (std::__shared_weak_count *)operator new();
        v19->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v19->__shared_weak_owners_ = 0;
        v19[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v58 = v19;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v55 = v17;
        v22 = (std::__shared_weak_count *)operator new();
        v22->__shared_owners_ = 0;
        v23 = (unint64_t *)&v22->__shared_owners_;
        v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v22->__shared_weak_owners_ = 0;
        v22[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v56 = v22;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        ++v15;
      }
      while (v15 < *(_QWORD *)&v63[0]);
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize((int64x2_t *)a4, v59);
    *((_QWORD *)&v81 + 1) = 0;
    *(_QWORD *)&v82 = 0;
    *(_QWORD *)&v81 = (char *)&v81 + 8;
    if ((_QWORD)v59)
    {
      v25 = 0;
      do
      {
        v26 = a3[1];
        v75 = *a3;
        v76 = v26;
        pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v27 = v61 + 4 * v25;
        v28 = (uint64_t *)*((_QWORD *)&v81 + 1);
        v29 = (uint64_t **)&v81 + 1;
        v30 = (uint64_t **)&v81 + 1;
        if (*((_QWORD *)&v81 + 1))
        {
          while (1)
          {
            while (1)
            {
              v30 = (uint64_t **)v28;
              v31 = v28[4];
              if (v31 <= v27)
                break;
              v28 = *v30;
              v29 = v30;
              if (!*v30)
                goto LABEL_36;
            }
            if (v31 >= v27)
              break;
            v28 = v30[1];
            if (!v28)
            {
              v29 = v30 + 1;
              goto LABEL_36;
            }
          }
          v32 = (uint64_t *)v30;
        }
        else
        {
LABEL_36:
          v32 = (uint64_t *)operator new(0x30uLL);
          v32[4] = v27;
          v32[5] = 0;
          *v32 = 0;
          v32[1] = 0;
          v32[2] = (uint64_t)v30;
          *v29 = v32;
          v33 = v32;
          if (*(_QWORD *)v81)
          {
            *(_QWORD *)&v81 = *(_QWORD *)v81;
            v33 = *v29;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v81 + 1), v33);
          *(_QWORD *)&v82 = v82 + 1;
        }
        v32[5] = v25++;
      }
      while (v25 < (unint64_t)v59);
    }
    v34 = a3[1];
    v73 = *a3;
    v74 = v34;
    REDictionaryIteratorCreate();
    while (1)
    {
      v35 = a3[1];
      v71 = *a3;
      v72 = v35;
      if (!REDictionaryIteratorMoveNext())
        break;
      v36 = a3[1];
      v69 = *a3;
      v70 = v36;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      v38 = (__int128 *)*((_QWORD *)&v81 + 1);
      if (!*((_QWORD *)&v81 + 1))
        goto LABEL_53;
      v39 = (__int128 *)((char *)&v81 + 8);
      do
      {
        v40 = v38;
        v41 = v39;
        v42 = *((_QWORD *)v38 + 4);
        v43 = (__int128 *)((char *)v38 + 8);
        if (v42 >= (unint64_t)CurrentKey)
        {
          v43 = v40;
          v39 = v40;
        }
        v38 = *(__int128 **)v43;
      }
      while (v38);
      if (v39 != (__int128 *)((char *)&v81 + 8)
        && (v42 >= (unint64_t)CurrentKey ? (v44 = v40) : (v44 = v41),
            (unint64_t)CurrentKey >= *((_QWORD *)v44 + 4)))
      {
        if (v42 < (unint64_t)CurrentKey)
          v40 = v41;
        v46 = *((_QWORD *)v40 + 5);
        v47 = a3[1];
        v67 = *a3;
        v68 = v47;
        CurrentValue = REDictionaryIteratorGetCurrentValue();
        *(_QWORD *)&v54 = CurrentValue;
        v49 = (_QWORD *)operator new();
        *v49 = &off_24FDFBE68;
        v49[1] = 0;
        v49[2] = 0;
        v49[3] = CurrentValue;
        *((_QWORD *)&v54 + 1) = v49;
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)&(*a4)[16 * v46], &v54);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      else
      {
LABEL_53:
        v45 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v54) = 0;
          _os_log_impl(&dword_22FF26000, v45, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", (uint8_t *)&v54, 2u);
        }
      }
    }
    v53 = a3[1];
    v65 = *a3;
    v66 = v53;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((_QWORD **)&v81 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
}

void sub_230199E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::usdToRe_HashTableEntries<double>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, __int128 *a3, char **a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  realityio *CurrentKey;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 *v43;
  __int128 *v44;
  NSObject *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t CurrentValue;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char v62[8];
  _OWORD v63[2];
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v54, "keys");
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v54, a1);
  if (v62[0])
  {
    v59 = v63[0];
    v60 = v63[1];
    v7 = v64;
  }
  else
  {
    v59 = v81;
    v60 = v82;
    v7 = v83;
  }
  v61 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 - 16);
    if (*((_QWORD *)&v60 + 1))
      v8 = (unint64_t *)*((_QWORD *)&v60 + 1);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v81);
  if ((v54 & 7) != 0)
  {
    v10 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  MEMORY[0x2348B274C](&v81, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v81, a1);
  if ((v81 & 7) != 0)
  {
    v12 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (v62[0])
  {
    v81 = 0u;
    v82 = 0u;
    v14 = a3[1];
    v79 = *a3;
    v80 = v14;
    RETypeInfoGetDictionaryValueType();
    if (*(_QWORD *)&v63[0])
    {
      v15 = 0;
      do
      {
        v16 = a3[1];
        v77 = *a3;
        v78 = v16;
        pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v17 = REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v63);
        v18 = *(_QWORD *)(v64 + 8 * v15);
        v57 = v17;
        v19 = (std::__shared_weak_count *)operator new();
        v19->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v19->__shared_weak_owners_ = 0;
        v19[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v58 = v19;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v55 = v17;
        v22 = (std::__shared_weak_count *)operator new();
        v22->__shared_owners_ = 0;
        v23 = (unint64_t *)&v22->__shared_owners_;
        v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
        v22->__shared_weak_owners_ = 0;
        v22[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
        v56 = v22;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        ++v15;
      }
      while (v15 < *(_QWORD *)&v63[0]);
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize((int64x2_t *)a4, v59);
    *((_QWORD *)&v81 + 1) = 0;
    *(_QWORD *)&v82 = 0;
    *(_QWORD *)&v81 = (char *)&v81 + 8;
    if ((_QWORD)v59)
    {
      v25 = 0;
      do
      {
        v26 = a3[1];
        v75 = *a3;
        v76 = v26;
        pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59);
        v27 = v61 + 8 * v25;
        v28 = (uint64_t *)*((_QWORD *)&v81 + 1);
        v29 = (uint64_t **)&v81 + 1;
        v30 = (uint64_t **)&v81 + 1;
        if (*((_QWORD *)&v81 + 1))
        {
          while (1)
          {
            while (1)
            {
              v30 = (uint64_t **)v28;
              v31 = v28[4];
              if (v31 <= v27)
                break;
              v28 = *v30;
              v29 = v30;
              if (!*v30)
                goto LABEL_36;
            }
            if (v31 >= v27)
              break;
            v28 = v30[1];
            if (!v28)
            {
              v29 = v30 + 1;
              goto LABEL_36;
            }
          }
          v32 = (uint64_t *)v30;
        }
        else
        {
LABEL_36:
          v32 = (uint64_t *)operator new(0x30uLL);
          v32[4] = v27;
          v32[5] = 0;
          *v32 = 0;
          v32[1] = 0;
          v32[2] = (uint64_t)v30;
          *v29 = v32;
          v33 = v32;
          if (*(_QWORD *)v81)
          {
            *(_QWORD *)&v81 = *(_QWORD *)v81;
            v33 = *v29;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v81 + 1), v33);
          *(_QWORD *)&v82 = v82 + 1;
        }
        v32[5] = v25++;
      }
      while (v25 < (unint64_t)v59);
    }
    v34 = a3[1];
    v73 = *a3;
    v74 = v34;
    REDictionaryIteratorCreate();
    while (1)
    {
      v35 = a3[1];
      v71 = *a3;
      v72 = v35;
      if (!REDictionaryIteratorMoveNext())
        break;
      v36 = a3[1];
      v69 = *a3;
      v70 = v36;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      v38 = (__int128 *)*((_QWORD *)&v81 + 1);
      if (!*((_QWORD *)&v81 + 1))
        goto LABEL_53;
      v39 = (__int128 *)((char *)&v81 + 8);
      do
      {
        v40 = v38;
        v41 = v39;
        v42 = *((_QWORD *)v38 + 4);
        v43 = (__int128 *)((char *)v38 + 8);
        if (v42 >= (unint64_t)CurrentKey)
        {
          v43 = v40;
          v39 = v40;
        }
        v38 = *(__int128 **)v43;
      }
      while (v38);
      if (v39 != (__int128 *)((char *)&v81 + 8)
        && (v42 >= (unint64_t)CurrentKey ? (v44 = v40) : (v44 = v41),
            (unint64_t)CurrentKey >= *((_QWORD *)v44 + 4)))
      {
        if (v42 < (unint64_t)CurrentKey)
          v40 = v41;
        v46 = *((_QWORD *)v40 + 5);
        v47 = a3[1];
        v67 = *a3;
        v68 = v47;
        CurrentValue = REDictionaryIteratorGetCurrentValue();
        *(_QWORD *)&v54 = CurrentValue;
        v49 = (_QWORD *)operator new();
        *v49 = &off_24FDFBE68;
        v49[1] = 0;
        v49[2] = 0;
        v49[3] = CurrentValue;
        *((_QWORD *)&v54 + 1) = v49;
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)&(*a4)[16 * v46], &v54);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
        if (*((_QWORD *)&v54 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      else
      {
LABEL_53:
        v45 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v54) = 0;
          _os_log_impl(&dword_22FF26000, v45, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", (uint8_t *)&v54, 2u);
        }
      }
    }
    v53 = a3[1];
    v65 = *a3;
    v66 = v53;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((_QWORD **)&v81 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v62);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
}

void sub_23019A54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::usdToRe_HashTableStringEntries(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, __int128 *a3, int64x2_t *a4)
{
  unsigned int *v6;
  unsigned int v7;
  unint64_t *v8;
  uint64_t v11;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  __int128 *EmptyString;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  char *Name;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  realityio *DictionaryValueType;
  uint64_t v26;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t i;
  realityio *v41;
  char *v42;
  BOOL v44;
  __int128 *v45;
  void **v46;
  _OWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  realityio *CurrentKey;
  BOOL v57;
  __int128 *v58;
  realityio *v59;
  realityio *v60;
  char *v61;
  char *v62;
  char *v63;
  const void **v64;
  char **v65;
  const void **v66;
  uint64_t v67;
  __int128 v68;
  void *CurrentValue;
  _QWORD *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  NSObject *v74;
  NSObject *v75;
  uint64_t Text;
  uint64_t v77;
  NSObject *v78;
  __int128 *v79;
  void *v80;
  NSObject *v81;
  NSObject *v82;
  __int128 *v83;
  void *v84;
  __int128 v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t result;
  __int128 v90;
  char v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _BYTE v95[8];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  void *__p[4];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _BYTE v133[40];
  uint64_t v134;
  _BYTE buf[24];
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](buf, "keys");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
  if ((buf[0] & 7) != 0)
  {
    v6 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  *(_QWORD *)buf = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v95);
  v8 = (unint64_t *)MEMORY[0x24BEE82A0];
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
  {
    *(_QWORD *)v133 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v95);
    if (!atomic_load(v8))
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v11 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
    if ((v11 & 1) == 0)
    {
      v75 = *(id *)(realityio::logObjects((realityio *)v11) + 24);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, v133);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v133);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v95, &v138);
        v77 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v138);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = Text;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v77;
        _os_log_impl(&dword_22FF26000, v75, OS_LOG_TYPE_DEFAULT, "Unsupported keys format for (\"%s\") at (\"%s\")", buf, 0x16u);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v138);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v133);
      }

      goto LABEL_164;
    }
  }
  v94 = 0;
  v92 = 0u;
  v93 = 0u;
  *(_QWORD *)buf = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v95);
  if (!atomic_load(v8))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)buf, (pxrInternal__aapl__pxrReserved__::UsdObject *)v95);
    *(_OWORD *)v133 = *(_OWORD *)&buf[8];
    *(_OWORD *)&v133[16] = v136;
    *(_QWORD *)&v133[32] = v137;
    if (v137)
    {
      v13 = (unint64_t *)(v137 - 16);
      if (*(_QWORD *)&v133[24])
        v13 = *(unint64_t **)&v133[24];
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,realityio::DetailedError>::~Result((uint64_t)buf);
    if (*(_QWORD *)v133)
    {
      v15 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v133);
        if ((*(_QWORD *)(*(_QWORD *)&v133[32] + 8 * v15) & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (__int128 *)((*(_QWORD *)(*(_QWORD *)&v133[32] + 8 * v15) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = (__int128 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::emplace_back<std::string const&>((uint64_t)&v92, EmptyString);
        ++v15;
      }
      while (v15 < *(_QWORD *)v133);
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v133);
  }
  else
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v95, (uint64_t)buf);
    if (buf[0])
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v95, (uint64_t)v133);
      v138 = *(_OWORD *)&v133[8];
      v139 = *(_OWORD *)&v133[24];
      v140 = v134;
      if (v134)
      {
        v18 = (unint64_t *)(v134 - 16);
        if (*((_QWORD *)&v139 + 1))
          v18 = (unint64_t *)*((_QWORD *)&v139 + 1);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v92);
      v92 = v138;
      v93 = v139;
      v138 = 0u;
      v139 = 0u;
      v94 = v140;
      v140 = 0;
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v138);
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result((uint64_t)v133);
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result((uint64_t)buf);
  }
  memset(v133, 0, 32);
  v20 = a3[1];
  v131 = *a3;
  v132 = v20;
  RETypeInfoGetDictionaryKeyType();
  v129 = *(_OWORD *)v133;
  v130 = *(_OWORD *)&v133[16];
  Name = (char *)RETypeInfoGetName();
  std::string::basic_string[abi:ne180100]<0>(&v90, Name);
  MEMORY[0x2348B274C](&v138, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v138, a1);
  if ((v138 & 7) != 0)
  {
    v22 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  if (!buf[0])
  {
    std::vector<std::shared_ptr<unsigned char>>::resize(a4, v92);
    *((_QWORD *)&v138 + 1) = 0;
    *(_QWORD *)&v139 = 0;
    *(_QWORD *)&v138 = (char *)&v138 + 8;
    if ((_QWORD)v92)
    {
      v39 = 0;
      for (i = 0; i < (unint64_t)v92; ++i)
      {
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v92);
        v42 = (char *)(v94 + v39);
        if (*(char *)(v94 + v39 + 23) < 0)
          v42 = *(char **)v42;
        if (v91 < 0)
        {
          if (*((_QWORD *)&v90 + 1) == 8)
          {
            v45 = (__int128 *)v90;
            goto LABEL_89;
          }
          if (*((_QWORD *)&v90 + 1) != 13
            || (*(_QWORD *)v90 == 0x5363696D616E7944
              ? (v44 = *(_QWORD *)(v90 + 5) == 0x676E697274536369)
              : (v44 = 0),
                !v44))
          {
LABEL_153:
            v82 = *(id *)(realityio::logObjects(v41) + 24);
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
            {
              if (v91 >= 0)
                v83 = &v90;
              else
                v83 = (__int128 *)v90;
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v95, &v99);
              v84 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v99);
              LODWORD(__p[0]) = 136315394;
              *(void **)((char *)__p + 4) = v83;
              WORD2(__p[1]) = 2080;
              *(void **)((char *)&__p[1] + 6) = v84;
              _os_log_impl(&dword_22FF26000, v82, OS_LOG_TYPE_DEFAULT, "Unsupported string format for (\"%s\") at (\"%s\")", (uint8_t *)__p, 0x16u);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v99);
            }

            goto LABEL_160;
          }
        }
        else
        {
          if (v91 == 8)
          {
            v45 = &v90;
LABEL_89:
            if (*(_QWORD *)v45 != 0x4449676E69727453)
              goto LABEL_153;
            v115 = *(_OWORD *)v133;
            v116 = *(_OWORD *)&v133[16];
            RETypeInfoCreateInstance();
            REStringIDSet();
            goto LABEL_91;
          }
          if (v91 != 13)
            goto LABEL_153;
          if ((_QWORD)v90 != 0x5363696D616E7944 || *(_QWORD *)((char *)&v90 + 5) != 0x676E697274536369)
            goto LABEL_153;
        }
        v117 = *(_OWORD *)v133;
        v118 = *(_OWORD *)&v133[16];
        RETypeInfoCreateInstance();
        REDynamicStringSet();
LABEL_91:
        std::string::basic_string[abi:ne180100]<0>(__p, v42);
        v46 = (void **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)&v138, &v99, (const void **)__p);
        v47 = *v46;
        if (!*v46)
        {
          v47 = operator new(0x40uLL);
          v47[2] = *(_OWORD *)__p;
          v48 = __p[2];
          memset(__p, 0, 24);
          *((_QWORD *)v47 + 6) = v48;
          *((_QWORD *)v47 + 7) = 0;
          v49 = v99;
          *(_QWORD *)v47 = 0;
          *((_QWORD *)v47 + 1) = 0;
          *((_QWORD *)v47 + 2) = v49;
          *v46 = v47;
          v50 = (uint64_t *)v47;
          if (*(_QWORD *)v138)
          {
            *(_QWORD *)&v138 = *(_QWORD *)v138;
            v50 = (uint64_t *)*v46;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v138 + 1), v50);
          *(_QWORD *)&v139 = v139 + 1;
        }
        *((_QWORD *)v47 + 7) = i;
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        v51 = a3[1];
        v112 = *a3;
        v113 = v51;
        REDictionaryAddEntry();
        v110 = *(_OWORD *)v133;
        v111 = *(_OWORD *)&v133[16];
        RETypeInfoDestroyInstance();
        v39 += 24;
      }
    }
    v52 = a3[1];
    v108 = *a3;
    v109 = v52;
    REDictionaryIteratorCreate();
    while (1)
    {
      v53 = a3[1];
      v106 = *a3;
      v107 = v53;
      if (!REDictionaryIteratorMoveNext())
      {
        v85 = a3[1];
        v100 = *a3;
        v101 = v85;
        REDictionaryIteratorDestroy();
LABEL_160:
        std::__tree<std::string>::destroy((uint64_t)&v138, *((char **)&v138 + 1));
        goto LABEL_161;
      }
      v54 = a3[1];
      v104 = *a3;
      v105 = v54;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      if (v91 < 0)
      {
        if (*((_QWORD *)&v90 + 1) != 8)
        {
          if (*((_QWORD *)&v90 + 1) != 13
            || (*(_QWORD *)v90 == 0x5363696D616E7944
              ? (v57 = *(_QWORD *)(v90 + 5) == 0x676E697274536369)
              : (v57 = 0),
                !v57))
          {
LABEL_151:
            v81 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p[0]) = 0;
              _os_log_impl(&dword_22FF26000, v81, OS_LOG_TYPE_DEFAULT, "Unexpected non-string key in HashTable.", (uint8_t *)__p, 2u);
            }
            goto LABEL_160;
          }
          goto LABEL_115;
        }
        v58 = (__int128 *)v90;
      }
      else
      {
        if (v91 != 8)
        {
          if (v91 != 13)
            goto LABEL_151;
          if ((_QWORD)v90 != 0x5363696D616E7944 || *(_QWORD *)((char *)&v90 + 5) != 0x676E697274536369)
            goto LABEL_151;
LABEL_115:
          CurrentKey = (realityio *)REDynamicStringGetValue();
          goto LABEL_120;
        }
        v58 = &v90;
      }
      if (*(_QWORD *)v58 != 0x4449676E69727453)
        goto LABEL_151;
      CurrentKey = (realityio *)REStringIDGet();
LABEL_120:
      v59 = CurrentKey;
      if (!CurrentKey)
        goto LABEL_151;
      v60 = (realityio *)std::string::basic_string[abi:ne180100]<0>(__p, (char *)CurrentKey);
      v61 = (char *)*((_QWORD *)&v138 + 1);
      if (!*((_QWORD *)&v138 + 1))
        goto LABEL_131;
      v62 = (char *)&v138 + 8;
      do
      {
        v63 = v62;
        v64 = (const void **)(v61 + 32);
        v60 = (realityio *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v139, (const void **)v61 + 4, (const void **)__p);
        v65 = (char **)(v61 + 8);
        if (!(_DWORD)v60)
        {
          v65 = (char **)v61;
          v62 = v61;
        }
        v61 = *v65;
      }
      while (*v65);
      if (v62 == (char *)&v138 + 8
        || (!(_DWORD)v60 ? (v66 = v64) : (v66 = (const void **)(v63 + 32)),
            v60 = (realityio *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v139, (const void **)__p, v66),
            (_DWORD)v60))
      {
LABEL_131:
        v62 = (char *)&v138 + 8;
      }
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if ((char *)&v138 + 8 == v62)
      {
        v74 = *(NSObject **)(realityio::logObjects(v60) + 24);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__p[0]) = 136315138;
          *(void **)((char *)__p + 4) = v59;
          _os_log_impl(&dword_22FF26000, v74, OS_LOG_TYPE_DEFAULT, "Expected to find \"%s\" in key cache.", (uint8_t *)__p, 0xCu);
        }
      }
      else
      {
        v67 = *((_QWORD *)v62 + 7);
        v68 = a3[1];
        v102 = *a3;
        v103 = v68;
        CurrentValue = (void *)REDictionaryIteratorGetCurrentValue();
        __p[0] = CurrentValue;
        v70 = (_QWORD *)operator new();
        *v70 = &off_24FDFBE68;
        v70[1] = 0;
        v70[2] = 0;
        v70[3] = CurrentValue;
        __p[1] = v70;
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](a4->i64[0] + 16 * v67, (__int128 *)__p);
        v71 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v72 = (unint64_t *)((char *)__p[1] + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
      }
    }
  }
  v138 = 0u;
  v139 = 0u;
  v24 = a3[1];
  v127 = *a3;
  v128 = v24;
  DictionaryValueType = (realityio *)RETypeInfoGetDictionaryValueType();
  if (!*(_QWORD *)&buf[8])
    goto LABEL_161;
  v26 = 0;
  while ((v91 & 0x80000000) == 0)
  {
    if (v91 != 8)
    {
      if (v91 != 13)
        goto LABEL_145;
      if ((_QWORD)v90 != 0x5363696D616E7944 || *(_QWORD *)((char *)&v90 + 5) != 0x676E697274536369)
        goto LABEL_145;
      goto LABEL_52;
    }
    v29 = &v90;
LABEL_55:
    if (*(_QWORD *)v29 != 0x4449676E69727453)
      goto LABEL_145;
    v123 = *(_OWORD *)v133;
    v124 = *(_OWORD *)&v133[16];
    RETypeInfoCreateInstance();
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v92);
    REStringIDSet();
LABEL_57:
    v30 = a3[1];
    v121 = *a3;
    v122 = v30;
    v31 = REDictionaryAddEntry();
    pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&buf[8]);
    v32 = *(_QWORD *)(v137 + 8 * v26);
    v33 = (std::__shared_weak_count *)operator new();
    v33->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
    v33->__shared_weak_owners_ = 0;
    v33[1].__vftable = (std::__shared_weak_count_vtbl *)v31;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    v36 = (std::__shared_weak_count *)operator new();
    v36->__shared_owners_ = 0;
    v37 = (unint64_t *)&v36->__shared_owners_;
    v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFBE68;
    v36->__shared_weak_owners_ = 0;
    v36[1].__vftable = (std::__shared_weak_count_vtbl *)v31;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    v119 = *(_OWORD *)v133;
    v120 = *(_OWORD *)&v133[16];
    DictionaryValueType = (realityio *)RETypeInfoDestroyInstance();
    if ((unint64_t)++v26 >= *(_QWORD *)&buf[8])
      goto LABEL_161;
  }
  if (*((_QWORD *)&v90 + 1) == 8)
  {
    v29 = (__int128 *)v90;
    goto LABEL_55;
  }
  if (*((_QWORD *)&v90 + 1) == 13
    && *(_QWORD *)v90 == 0x5363696D616E7944
    && *(_QWORD *)(v90 + 5) == 0x676E697274536369)
  {
LABEL_52:
    v125 = *(_OWORD *)v133;
    v126 = *(_OWORD *)&v133[16];
    RETypeInfoCreateInstance();
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v92);
    REDynamicStringSet();
    goto LABEL_57;
  }
LABEL_145:
  v78 = *(id *)(realityio::logObjects(DictionaryValueType) + 24);
  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
  {
    if (v91 >= 0)
      v79 = &v90;
    else
      v79 = (__int128 *)v90;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v95, &v99);
    v80 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v99);
    LODWORD(__p[0]) = 136315394;
    *(void **)((char *)__p + 4) = v79;
    WORD2(__p[1]) = 2080;
    *(void **)((char *)&__p[1] + 6) = v80;
    _os_log_impl(&dword_22FF26000, v78, OS_LOG_TYPE_DEFAULT, "Unsupported string format for (\"%s\") at (\"%s\")", (uint8_t *)__p, 0x16u);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v99);
  }

LABEL_161:
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)buf);
  if (v91 < 0)
    operator delete((void *)v90);
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v92);
LABEL_164:
  if ((v98 & 7) != 0)
  {
    v86 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v87 = __ldxr(v86);
    while (__stlxr(v87 - 2, v86));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v97);
  result = v96;
  if (v96)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v96);
  return result;
}

void sub_23019B46C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::vector<std::shared_ptr<unsigned char>>::resize(int64x2_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  int64x2_t *v25;

  v3 = a1->i64[0];
  v4 = a1->i64[1];
  v5 = (v4 - a1->i64[0]) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v20 = v3 + 16 * a2;
      while (v4 != v20)
      {
        v4 -= 16;
        std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v4);
      }
      a1->i64[1] = v20;
    }
  }
  else
  {
    v6 = a2 - v5;
    v7 = a1[1].i64[0];
    if (a2 - v5 <= (v7 - v4) >> 4)
    {
      bzero((void *)a1->i64[1], 16 * v6);
      a1->i64[1] = v4 + 16 * v6;
    }
    else
    {
      if (a2 >> 60)
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      v8 = v7 - v3;
      v9 = v8 >> 3;
      if (v8 >> 3 <= a2)
        v9 = a2;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
        v10 = 0xFFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      v25 = a1 + 1;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v10);
      v12 = &v11[16 * v5];
      v14 = &v11[16 * v13];
      bzero(v12, 16 * v6);
      v15 = &v12[16 * v6];
      v17 = (_QWORD *)a1->i64[0];
      v16 = (_QWORD *)a1->i64[1];
      if (v16 == (_QWORD *)a1->i64[0])
      {
        v19 = vdupq_n_s64((unint64_t)v16);
      }
      else
      {
        do
        {
          v18 = *((_OWORD *)v16 - 1);
          v16 -= 2;
          *((_OWORD *)v12 - 1) = v18;
          v12 -= 16;
          *v16 = 0;
          v16[1] = 0;
        }
        while (v16 != v17);
        v19 = *a1;
      }
      a1->i64[0] = (uint64_t)v12;
      a1->i64[1] = (uint64_t)v15;
      v23 = v19;
      v21 = a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)v14;
      v24 = v21;
      v22 = v19.i64[0];
      std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)&v22);
    }
  }
}

void std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFBF78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFBF78;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::operator()(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  void (*v5)(uint64_t, __int128 *, uint64_t, uint64_t);
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v5 = *(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(a1 + 8);
  v9 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v5(a2, &v9, a4, a5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_23019B920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::target_type()
{
}

_QWORD *std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>> const&>((uint64_t)a1, v4, a2, a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_23019BA14(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>> const&>(uint64_t result, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v7 = result;
  v8 = (_QWORD *)(result + 8);
  if ((_QWORD *)(result + 8) != a2)
  {
    result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](result + 16, a3, a2 + 4);
    if (!(_DWORD)result)
    {
      result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, a2 + 4, a3);
      if (!(_DWORD)result)
      {
        v25 = a2;
        v26 = a2;
        v12 = &v25;
        if (a2)
          return result;
        goto LABEL_31;
      }
      v12 = (uint64_t **)(a2 + 1);
      v11 = (uint64_t *)a2[1];
      if (v11)
      {
        v13 = (_QWORD *)a2[1];
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        v17 = a2;
        do
        {
          v14 = (_QWORD *)v17[2];
          v16 = *v14 == (_QWORD)v17;
          v17 = v14;
        }
        while (!v16);
      }
      if (v14 != v8)
      {
        result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, a3, v14 + 4);
        if (!(_DWORD)result)
        {
LABEL_29:
          result = (uint64_t)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(v7, &v26, a3);
          v12 = (uint64_t **)result;
          goto LABEL_30;
        }
        v11 = *v12;
      }
      if (v11)
      {
        v26 = v14;
        v12 = (uint64_t **)v14;
      }
      else
      {
        v26 = a2;
      }
LABEL_30:
      if (*v12)
        return result;
      goto LABEL_31;
    }
  }
  if (*(_QWORD **)v7 != a2)
  {
    v9 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (_QWORD *)v15[2];
        v16 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v16);
    }
    result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, v10 + 4, a3);
    if ((_DWORD)result)
      goto LABEL_16;
    goto LABEL_29;
  }
  v10 = a2;
LABEL_16:
  if (*a2)
  {
    v26 = v10;
    v12 = (uint64_t **)(v10 + 1);
    goto LABEL_30;
  }
  v26 = a2;
  v12 = (uint64_t **)a2;
LABEL_31:
  v18 = (uint64_t *)operator new(0x48uLL);
  v19 = v18;
  v20 = *a4;
  v18[4] = *a4;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v18[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)(v18 + 5), (uint64_t)(a4 + 1));
  v23 = (uint64_t)v26;
  *v19 = 0;
  v19[1] = 0;
  v19[2] = v23;
  *v12 = v19;
  v24 = **(_QWORD **)v7;
  if (v24)
  {
    *(_QWORD *)v7 = v24;
    v19 = *v12;
  }
  result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v19);
  ++*(_QWORD *)(v7 + 16);
  return result;
}

void sub_23019BC48(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = v1[4];
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  unsigned int *v4;
  unsigned int v5;

  *a1 = a2;
  if ((a2 & 7) != 0)
  {
    v4 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](a1 + 1, a3);
  return a1;
}

_QWORD *std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  a1[1] = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>> const&>((uint64_t)a1, v3, v5 + 4, v5 + 4);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_23019BD90(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::map[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  qword_255E54EA0 = 0;
  qword_255E54E98 = 0;
  qword_255E54E90 = (uint64_t)&qword_255E54E98;
  if (a2)
  {
    v2 = (uint64_t *)result;
    v3 = 0;
    v4 = (uint64_t *)(result + 32 * a2);
    v5 = &qword_255E54E98;
    while (v5 != &qword_255E54E98)
    {
      if (v3)
      {
        do
        {
          v6 = (uint64_t *)v3;
          v3 = *(_QWORD *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        v7 = &qword_255E54E98;
        do
        {
          v6 = (uint64_t *)v7[2];
          v8 = *v6 == (_QWORD)v7;
          v7 = v6;
        }
        while (v8);
      }
      result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54EA0, v6 + 4, v2);
      v3 = qword_255E54E98;
      if ((_DWORD)result)
        goto LABEL_11;
      if (qword_255E54E98)
      {
        v9 = &qword_255E54E98;
        while (1)
        {
          while (1)
          {
            v6 = (uint64_t *)v3;
            v10 = (uint64_t *)(v3 + 32);
            if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54EA0, v2, (uint64_t *)(v3 + 32)))break;
            v3 = *v6;
            v9 = v6;
            if (!*v6)
              goto LABEL_24;
          }
          result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_255E54EA0, v10, v2);
          if (!(_DWORD)result)
            break;
          v9 = v6 + 1;
          v3 = v6[1];
          if (!v3)
            goto LABEL_24;
        }
LABEL_13:
        if (*v9)
          goto LABEL_32;
        goto LABEL_24;
      }
LABEL_23:
      v9 = &qword_255E54E98;
      v6 = &qword_255E54E98;
LABEL_24:
      v11 = (uint64_t *)operator new(0x40uLL);
      v12 = v11;
      v13 = *v2;
      v11[4] = *v2;
      if ((v13 & 7) != 0)
      {
        v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 2, v14));
        if ((v15 & 1) == 0)
          v11[4] &= 0xFFFFFFFFFFFFFFF8;
      }
      std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v11 + 5, v2 + 1);
      *v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v6;
      *v9 = (uint64_t)v12;
      if (*(_QWORD *)qword_255E54E90)
      {
        qword_255E54E90 = *(_QWORD *)qword_255E54E90;
        v12 = (uint64_t *)*v9;
      }
      result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_255E54E98, v12);
      ++qword_255E54EA0;
LABEL_32:
      v2 += 4;
      if (v2 == v4)
        return result;
      v5 = (uint64_t *)qword_255E54E90;
      v3 = qword_255E54E98;
    }
    v6 = &qword_255E54E98;
LABEL_11:
    if (v3)
    {
      v9 = v6 + 1;
      goto LABEL_13;
    }
    goto LABEL_23;
  }
  return result;
}

