void sub_23019BF80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = v1[4];
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  operator delete(v1);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>>::destroy(*(_QWORD **)(v2 + 3736));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::WrappedRERef<REComponent *>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::WrappedRERef<REComponent *>>,0>(uint64_t a1)
{
  realityio::WrappedRERef<REComponent *>::~WrappedRERef((_QWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new();
  realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType::ArbitraryComponentBuilderTokens_StaticTokenType(v0);
  while (!__ldaxr(&realityio::tokens::ArbitraryComponentBuilderTokens))
  {
    if (!__stlxr((unint64_t)v0, &realityio::tokens::ArbitraryComponentBuilderTokens))
      return (unint64_t)v0;
  }
  __clrex();
  realityio::tokens::ShadowBuilderTokens_StaticTokenType::~ShadowBuilderTokens_StaticTokenType((realityio::tokens::ShadowBuilderTokens_StaticTokenType *)v0);
  MEMORY[0x2348B4E1C]();
  return atomic_load(&realityio::tokens::ArbitraryComponentBuilderTokens);
}

void sub_23019C264(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40FC86440BLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFC028;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFC028;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  uint64_t (***v15)();
  uint64_t v16;
  unint64_t v17;
  realityio::EntityBuilder *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v42;
  std::__shared_weak_count *v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v52;
  uint64_t (**v53)();
  std::__shared_weak_count *v54;
  unsigned int *v55;
  unsigned int v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t *v72;
  std::__shared_weak_count *v73;
  char *v74;
  std::__shared_weak_count *v75;
  int v76;
  uint64_t v77;
  uint64_t (**v78)();
  std::__shared_weak_count *v79;
  void *v80[2];
  uint64_t v81;
  uint64_t (**v82)();
  std::__shared_weak_count *v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  uint64_t (**v86)();
  std::__shared_weak_count *v87;
  void *__p[2];
  uint64_t v89;
  uint64_t (**v90)();
  std::__shared_weak_count *v91;
  uint64_t v92;
  void **v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v74 = v2;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(__p[0]) = 0;
  std::allocate_shared[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)__p, &v90);
  v6 = v91;
  v86 = v90;
  v87 = v91;
  if (v91)
  {
    p_shared_owners = (unint64_t *)&v91->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v75 = v6;
  realityio::InputsDescriptor::addInputDescriptor(v3, &v86);
  v9 = v87;
  if (v87)
  {
    v10 = (unint64_t *)&v87->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v12)
    v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v13 = (std::__shared_weak_count *)operator new(0x68uLL);
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4958;
  std::string::basic_string[abi:ne180100]<0>(__p, "connectedEntityHandles");
  v90 = &off_24FDFC098;
  v93 = (void **)&v90;
  realityio::CustomInputDescriptor::CustomInputDescriptor(&v13[1].__vftable, (uint64_t)__p, (uint64_t *)v12 + 8, (uint64_t)&v90, 1);
  v15 = (uint64_t (***)())v93;
  if (v93 == (void **)&v90)
  {
    v16 = 4;
    v15 = &v90;
  }
  else
  {
    if (!v93)
      goto LABEL_18;
    v16 = 5;
  }
  (*v15)[v16]();
LABEL_18:
  if (SHIBYTE(v89) < 0)
    operator delete(__p[0]);
  v84 = &v13[1].__vftable;
  v85 = v13;
  do
    v17 = __ldxr(v14);
  while (__stxr(v17 + 1, v14));
  v73 = v13;
  v18 = (realityio::EntityBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v84);
  v19 = v85;
  if (v85)
  {
    v20 = (unint64_t *)&v85->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = realityio::EntityBuilder::kPrimPathOutputName(v18);
  v23 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v23)
    v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(__p[0]) = 0;
  std::allocate_shared[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v22, (uint64_t *)v23 + 20, (int *)__p, &v90);
  v24 = v91;
  v82 = v90;
  v83 = v91;
  if (v91)
  {
    v25 = (unint64_t *)&v91->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v72 = a1;
  realityio::InputsDescriptor::addInputDescriptor(v3, &v82);
  v27 = v83;
  if (v83)
  {
    v28 = (unint64_t *)&v83->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v80, "structOrDictPrimPaths");
  v30 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v30)
    v30 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  MEMORY[0x2348B274C](&v90, "RealityKitStruct");
  MEMORY[0x2348B274C](&v91, "RealityKitDict");
  MEMORY[0x2348B274C](&v92, "Struct");
  MEMORY[0x2348B274C](&v93, "Dict");
  std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100]((uint64_t)&v78, (uint64_t *)&v90, 4);
  v31 = (std::__shared_weak_count *)operator new(0x60uLL);
  v31->__shared_owners_ = 0;
  v32 = (unint64_t *)&v31->__shared_owners_;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4A98;
  *(_OWORD *)__p = *(_OWORD *)v80;
  v89 = v81;
  v80[0] = 0;
  v80[1] = 0;
  v81 = 0;
  realityio::DescendantPrimInputDescriptor::DescendantPrimInputDescriptor(&v31[1].__vftable, (uint64_t)__p, (uint64_t *)v30 + 1, (uint64_t)&v78, 1);
  if (SHIBYTE(v89) < 0)
    operator delete(__p[0]);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&v78, v79);
  v33 = (void **)&v94;
  do
  {
    v35 = (uint64_t)*--v33;
    v34 = v35;
    if ((v35 & 7) != 0)
    {
      v36 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v37 = __ldxr(v36);
      while (__stlxr(v37 - 2, v36));
    }
  }
  while (v33 != (void **)&v90);
  if (SHIBYTE(v81) < 0)
    operator delete(v80[0]);
  __p[0] = &v31[1];
  __p[1] = v31;
  do
    v38 = __ldxr(v32);
  while (__stxr(v38 + 1, v32));
  realityio::InputsDescriptor::addInputDescriptor(v3, __p);
  v39 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v40 = (unint64_t *)((char *)__p[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v90, "arbitraryComponentAnimationFilePrimPath");
  v42 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v42)
    v42 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  MEMORY[0x2348B274C](&v78, "RealityKitAnimationFile");
  LODWORD(v77) = 1;
  std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality,void>((uint64_t)&v90, (uint64_t *)v42 + 1, (uint64_t *)&v78, (int *)&v77, v80);
  v44 = v80[0];
  v43 = (std::__shared_weak_count *)v80[1];
  v80[0] = 0;
  v80[1] = 0;
  if ((v78 & 7) != 0)
  {
    v45 = (unsigned int *)((unint64_t)v78 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  if (SHIBYTE(v92) < 0)
    operator delete(v90);
  v80[0] = v44;
  v80[1] = v43;
  if (v43)
  {
    v47 = (unint64_t *)&v43->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, v80);
  v49 = (std::__shared_weak_count *)v80[1];
  if (v80[1])
  {
    v50 = (unint64_t *)((char *)v80[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v90, "arbitraryComponentClipDefinitionPrimPath");
  v52 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v52)
    v52 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  MEMORY[0x2348B274C](&v77, "RealityKitClipDefinition");
  v76 = 1;
  std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality,void>((uint64_t)&v90, (uint64_t *)v52 + 1, &v77, &v76, &v78);
  v53 = v78;
  v54 = v79;
  v78 = 0;
  v79 = 0;
  if ((v77 & 7) != 0)
  {
    v55 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  if (SHIBYTE(v92) < 0)
    operator delete(v90);
  v90 = v53;
  v91 = v54;
  if (v54)
  {
    v57 = (unint64_t *)&v54->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v90);
  v59 = v91;
  if (v91)
  {
    v60 = (unint64_t *)&v91->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  *v72 = v3;
  v72[1] = (uint64_t)v74;
  if (v54)
  {
    v62 = (unint64_t *)&v54->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v43)
  {
    v64 = (unint64_t *)&v43->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  do
    v66 = __ldaxr(v32);
  while (__stlxr(v66 - 1, v32));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v24)
  {
    v67 = (unint64_t *)&v24->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v69 = __ldaxr(v14);
  while (__stlxr(v69 - 1, v14));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  if (v75)
  {
    v70 = (unint64_t *)&v75->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
}

void sub_23019CAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  unint64_t *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;

  if (*(char *)(v44 - 113) < 0)
    operator delete(*(void **)(v37 + 24));
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  do
    v48 = __ldaxr(v41);
  while (__stlxr(v48 - 1, v41));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  if (v39)
  {
    v49 = (unint64_t *)&v39->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  do
    v51 = __ldaxr(v38);
  while (__stlxr(v51 - 1, v38));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
    std::__shared_weak_count::__release_weak(a11);
  }
  if (a13)
  {
    v52 = (unint64_t *)&a13->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  do
    v54 = __ldaxr(v43);
  while (__stlxr(v54 - 1, v43));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void sub_23019D178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  unsigned int *v21;
  unsigned int v22;

  if ((a19 & 7) != 0)
  {
    v21 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a18);
  if (a17)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a17);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v19);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFC128;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFC128;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v5;
  std::string::size_type v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v12;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  void *v25;
  std::__shared_weak_count *v26;
  void *__p;
  std::__shared_weak_count *v28;
  char v29;
  std::string::size_type v30;
  std::__shared_weak_count *v31;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentClass");
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v25) = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)Data + 2, (int *)&v25, &v30);
  v6 = v30;
  v5 = v31;
  v30 = 0;
  v31 = 0;
  if (v29 < 0)
    operator delete(__p);
  v30 = v6;
  v31 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v30);
  v9 = v31;
  if (v31)
  {
    v10 = (unint64_t *)&v31->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentAnimationLibrary");
  v12 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v12)
    v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v24 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)v12 + 3, &v24, &v25);
  v14 = v25;
  v13 = v26;
  v25 = 0;
  v26 = 0;
  if (v29 < 0)
    operator delete(__p);
  __p = v14;
  v28 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, (std::string::size_type *)&__p);
  v17 = v28;
  if (v28)
  {
    v18 = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v13)
  {
    v20 = (unint64_t *)&v13->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v5)
  {
    v22 = (unint64_t *)&v5->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_23019D560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;

  if (a18 < 0)
    operator delete(__p);
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  do
    v26 = __ldaxr(v22);
  while (__stlxr(v26 - 1, v22));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath&&>,std::tuple<>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    v11 = *a3;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 8, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 9, v11 + 1);
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v12 = (uint64_t *)**a1;
    v13 = v10;
    if (v12)
    {
      *a1 = v12;
      v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4);
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4)))break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_10;
  return v10;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  double v8;
  _OWORD *v9;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v11;
  char v12;
  std::string::size_type v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t v15;
  char v16;
  std::string::size_type v17;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v19;
  std::type_info *v20;
  pxrInternal__aapl__pxrReserved__::VtValue *v21;
  _OWORD *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char v34;
  std::string::size_type v35;
  pxrInternal__aapl__pxrReserved__::TfToken *v36;
  uint64_t v37;
  char v38;
  std::string::size_type v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  std::string v47;
  void *__p[2];
  std::string::size_type v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  std::string v53;
  std::string v54;
  _QWORD v55[2];
  _BYTE v56[8];
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v45);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v45);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v45);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    v44 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v50;
      v15 = v51;
      v54.__r_.__value_.__r.__words[0] = v52;
      *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v52 + 7);
      v16 = HIBYTE(v52);
      v52 = 0uLL;
      v51 = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7);
      v17 = v54.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v15;
      *(_QWORD *)(a1 + 32) = v17;
      *(_BYTE *)(a1 + 47) = v16;
      if (SHIBYTE(v49) < 0)
        operator delete(__p[0]);
      goto LABEL_48;
    }
    v57 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v56))
      {
        v9 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
        *(_BYTE *)a1 = 1;
        *(_OWORD *)(a1 + 8) = *v9;
        goto LABEL_47;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
      {
        v20 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
        v21 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v54, (const pxrInternal__aapl__pxrReserved__::VtValue *)v20);
        if (v54.__r_.__value_.__l.__size_)
        {
          v22 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatf>(v21);
          *(_BYTE *)a1 = 1;
          *(_OWORD *)(a1 + 8) = *v22;
        }
        else
        {
          v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a1 + 8) = v50;
          v37 = v51;
          v53.__r_.__value_.__r.__words[0] = v52;
          *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v52 + 7);
          v38 = HIBYTE(v52);
          v52 = 0uLL;
          v51 = 0;
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 7);
          v39 = v53.__r_.__value_.__r.__words[0];
          *(_QWORD *)(a1 + 24) = v37;
          *(_QWORD *)(a1 + 32) = v39;
          *(_BYTE *)(a1 + 47) = v38;
          if (SHIBYTE(v49) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v54);
        goto LABEL_47;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v50;
      v33 = v51;
      v54.__r_.__value_.__r.__words[0] = v52;
      *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v52 + 7);
      v34 = HIBYTE(v52);
      v52 = 0uLL;
      v51 = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7);
      v35 = v54.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v35;
      *(_BYTE *)(a1 + 47) = v34;
      if ((SHIBYTE(v49) & 0x80000000) == 0)
      {
LABEL_47:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v56);
LABEL_48:
        v40 = v46;
        if (v46)
        {
          v41 = (unsigned int *)(v46 + 8);
          do
          {
            v42 = __ldxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        }
        return;
      }
      v32 = __p[0];
    }
    else
    {
      v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      std::operator+<char>();
      v23 = std::string::append(&v53, ") at the given time: ");
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v47, v44);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v47;
      else
        v25 = (std::string *)v47.__r_.__value_.__r.__words[0];
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      else
        size = v47.__r_.__value_.__l.__size_;
      v27 = std::string::append(&v54, (const std::string::value_type *)v25, size);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a1 + 8) = v50;
      v29 = v51;
      v55[0] = v52;
      *(_QWORD *)((char *)v55 + 7) = *(_QWORD *)((char *)&v52 + 7);
      v30 = HIBYTE(v52);
      v52 = 0uLL;
      v51 = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v55 + 7);
      v31 = v55[0];
      *(_QWORD *)(a1 + 24) = v29;
      *(_QWORD *)(a1 + 32) = v31;
      *(_BYTE *)(a1 + 47) = v30;
      if (SHIBYTE(v49) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_47;
      v32 = (void *)v53.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_47;
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v50, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a1 + 8) = v50;
  v11 = v51;
  v54.__r_.__value_.__r.__words[0] = v52;
  *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v52 + 7);
  v12 = HIBYTE(v52);
  v52 = 0uLL;
  v51 = 0;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 7);
  v13 = v54.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 47) = v12;
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
}

void sub_23019DD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (a11)
  {
    v33 = a11 + 2;
    do
    {
      v34 = __ldxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<REComponentClass *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFC1A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<REComponentClass *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFC1A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<REComponentClass *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__push_back_slow_path<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>(int64x2_t *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  int64x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int64x2_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  uint64_t *v24;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 1;
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3)
    v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555)
    v7 = 0x2AAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v24 = (uint64_t *)v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>>(v7);
  else
    v8 = 0;
  v21 = v7;
  v22.i64[0] = v7 + 96 * v2;
  v22.i64[1] = v22.i64[0];
  v23 = v7 + 96 * v8;
  std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::construct[abi:ne180100]<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry,realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>((std::string *)v22.i64[0], a2);
  v9 = a1->i64[0];
  v10 = a1->u64[1];
  v11 = v22.i64[0];
  v12 = v22.i64[0];
  if (v10 == a1->i64[0])
  {
    v17 = vdupq_n_s64(v10);
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v10 - 96);
      *(_QWORD *)(v12 - 80) = *(_QWORD *)(v10 - 80);
      *(_OWORD *)(v12 - 96) = v13;
      *(_QWORD *)(v10 - 88) = 0;
      *(_QWORD *)(v10 - 80) = 0;
      *(_QWORD *)(v10 - 96) = 0;
      v14 = *(_OWORD *)(v10 - 72);
      *(_QWORD *)(v12 - 56) = *(_QWORD *)(v10 - 56);
      *(_OWORD *)(v12 - 72) = v14;
      *(_QWORD *)(v10 - 64) = 0;
      *(_QWORD *)(v10 - 56) = 0;
      *(_QWORD *)(v10 - 72) = 0;
      v15 = *(_OWORD *)(v10 - 48);
      *(_QWORD *)(v12 - 32) = *(_QWORD *)(v10 - 32);
      *(_OWORD *)(v12 - 48) = v15;
      *(_QWORD *)(v10 - 40) = 0;
      *(_QWORD *)(v10 - 32) = 0;
      *(_QWORD *)(v10 - 48) = 0;
      v16 = *(_OWORD *)(v10 - 24);
      *(_BYTE *)(v12 - 8) = *(_BYTE *)(v10 - 8);
      *(_OWORD *)(v12 - 24) = v16;
      v12 -= 96;
      v10 -= 96;
    }
    while (v10 != v9);
    v17 = *a1;
  }
  v18 = v11 + 96;
  a1->i64[0] = v12;
  a1->i64[1] = v11 + 96;
  v22 = v17;
  v19 = a1[1].u64[0];
  a1[1].i64[0] = v23;
  v23 = v19;
  v21 = v17.i64[0];
  std::__split_buffer<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::~__split_buffer((uint64_t)&v21);
  return v18;
}

void sub_23019DFF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::construct[abi:ne180100]<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry,realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  __n128 result;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  result = *(__n128 *)((char *)a2 + 72);
  this[3].__r_.__value_.__s.__data_[16] = *((_BYTE *)a2 + 88);
  *(__n128 *)&this[3].__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_23019E0C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a1);
}

uint64_t std::__split_buffer<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::destroy[abi:ne180100](i - 96);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocate_shared[abi:ne180100]<realityio::ArbitraryComponentBuilder::AnimationLibrary,std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary>,pxrInternal__aapl__pxrReserved__::TfToken const&,REEntity *&,std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry> &,void>(std::string **a1, uint64_t a2, std::string::size_type *a3, uint64_t *a4)
{
  std::string *v8;
  std::string *v9;
  uint64_t EmptyString;
  __int128 v11;
  std::string::size_type v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  __int128 *v21;
  __int128 v22;
  std::string *v23;
  const std::string::value_type **v24;
  __int128 v25;
  std::string *v26;
  const std::string::value_type **v27;
  __int128 v28;
  char *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  char *v34;
  char *v35;
  char *v36;
  std::string v37;
  char **v38;
  char v39;

  v8 = (std::string *)operator new(0x50uLL);
  v9 = v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDFC228;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
  }
  else
  {
    v11 = *(_OWORD *)EmptyString;
    v37.__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v11;
  }
  v12 = *a3;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v13 = *a4;
  v14 = a4[1];
  v38 = &v34;
  v39 = 0;
  v15 = v14 - v13;
  if (v14 != v13)
  {
    v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 5);
    if (v16 >= 0x2AAAAAAAAAAAAABLL)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>>(v16);
    v18 = 0;
    v34 = v17;
    v35 = v17;
    v36 = &v17[96 * v19];
    do
    {
      v20 = (std::string *)&v17[v18];
      v21 = (__int128 *)(v13 + v18);
      if (*(char *)(v13 + v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
      }
      else
      {
        v22 = *v21;
        v20->__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v22;
      }
      v23 = (std::string *)&v17[v18 + 24];
      v24 = (const std::string::value_type **)(v13 + v18 + 24);
      if (*(char *)(v13 + v18 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v23, *v24, *(_QWORD *)(v13 + v18 + 32));
      }
      else
      {
        v25 = *(_OWORD *)v24;
        *(_QWORD *)&v17[v18 + 40] = *(_QWORD *)(v13 + v18 + 40);
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v25;
      }
      v26 = (std::string *)&v17[v18 + 48];
      v27 = (const std::string::value_type **)(v13 + v18 + 48);
      if (*(char *)(v13 + v18 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(v26, *v27, *(_QWORD *)(v13 + v18 + 56));
      }
      else
      {
        v28 = *(_OWORD *)v27;
        *(_QWORD *)&v17[v18 + 64] = *(_QWORD *)(v13 + v18 + 64);
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v28;
      }
      v29 = &v17[v18];
      v30 = *(_OWORD *)(v13 + v18 + 72);
      v29[88] = *(_BYTE *)(v13 + v18 + 88);
      *(_OWORD *)(v29 + 72) = v30;
      v18 += 96;
    }
    while (v13 + v18 != v14);
    v15 = (uint64_t)&v17[v18];
    v35 = &v17[v18];
  }
  v31 = v9 + 1;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9 + 1, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    v15 = (uint64_t)v35;
  }
  else
  {
    *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    v9[1].__r_.__value_.__r.__words[2] = v37.__r_.__value_.__r.__words[2];
  }
  v32 = (std::string::size_type)v34;
  v33 = (std::string::size_type)v36;
  v9[2].__r_.__value_.__r.__words[0] = v12;
  v9[2].__r_.__value_.__l.__size_ = v32;
  v9[2].__r_.__value_.__r.__words[2] = v15;
  v9[3].__r_.__value_.__r.__words[0] = v33;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v38 = &v34;
  std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  *a1 = v31;
  a1[1] = v9;
}

void sub_23019E3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  a20 = &a10;
  std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (a18 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentBuilder::AnimationLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFC228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentBuilder::AnimationLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFC228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentBuilder::AnimationLibrary>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 56);
  std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::ArbitraryComponentBuilder::AnimationLibrary>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFC278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::ArbitraryComponentBuilder::AnimationLibrary>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFC278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::ArbitraryComponentBuilder::AnimationLibrary>>>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_24FDFC2C8;
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<realityio::ArbitraryComponentBuilder::AnimationLibrary>>::getRawValue(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24FDFC2F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDFC2F8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t EmptyString;
  __int128 v4;
  int64_t size;
  std::string *p_str;
  _BYTE *v7;
  std::string *v8;
  _BYTE *v9;
  std::string::size_type v10;
  unsigned __int8 v11;
  std::string::size_type v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  void *v19;
  int v20;
  int64_t v21;
  std::string *v22;
  _BYTE *v23;
  std::string *v24;
  _BYTE *v25;
  std::string::size_type v26;
  std::string *v27;
  uint64_t v28;
  std::string v29;
  std::string __str;
  char v31;

  v2 = *(_QWORD *)(a1 + 16);
  if ((**(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (**(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
  }
  else
  {
    v4 = *(_OWORD *)EmptyString;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v4;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v7 = (char *)p_str + size;
  if (size >= 1)
  {
    v8 = p_str;
    do
    {
      v9 = memchr(v8, 46, size);
      if (!v9)
        break;
      if (*v9 == 46)
        goto LABEL_19;
      v8 = (std::string *)(v9 + 1);
      size = v7 - (_BYTE *)v8;
    }
    while (v7 - (_BYTE *)v8 > 0);
  }
  v9 = v7;
LABEL_19:
  if (v9 == v7)
    v10 = -1;
  else
    v10 = v9 - (_BYTE *)p_str;
  std::string::basic_string(&v29, &__str, 0, v10, (std::allocator<char> *)&v31);
  v11 = atomic_load((unsigned __int8 *)&qword_255E54E88);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255E54E88))
  {
    std::string::basic_string[abi:ne180100]<0>(&qword_255E54EA8, "RealityKit");
    __cxa_guard_release(&qword_255E54E88);
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    v12 = v29.__r_.__value_.__l.__size_;
  v13 = qword_255E54EB0;
  if (byte_255E54EBF >= 0)
    v13 = byte_255E54EBF;
  if (v12 != v13)
  {
    if ((*((_BYTE *)&v29.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
  if (byte_255E54EBF >= 0)
    v14 = &qword_255E54EA8;
  else
    v14 = (uint64_t *)qword_255E54EA8;
  if ((*((_BYTE *)&v29.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v19 = (void *)v29.__r_.__value_.__r.__words[0];
    v20 = memcmp(v29.__r_.__value_.__l.__data_, v14, v29.__r_.__value_.__l.__size_);
    operator delete(v19);
    if (v20)
      goto LABEL_64;
  }
  else if (*((_BYTE *)&v29.__r_.__value_.__s + 23))
  {
    v15 = 0;
    do
    {
      v16 = v29.__r_.__value_.__s.__data_[v15];
      v17 = *((unsigned __int8 *)v14 + v15);
    }
    while (v16 == v17 && HIBYTE(v29.__r_.__value_.__r.__words[2]) - 1 != v15++);
    if (v16 != v17)
      goto LABEL_64;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v21 = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__str;
  else
    v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v23 = (char *)v22 + v21;
  if (v21 >= 1)
  {
    v24 = v22;
    do
    {
      v25 = memchr(v24, 46, v21);
      if (!v25)
        break;
      if (*v25 == 46)
        goto LABEL_57;
      v24 = (std::string *)(v25 + 1);
      v21 = v23 - (_BYTE *)v24;
    }
    while (v23 - (_BYTE *)v24 > 0);
  }
  v25 = v23;
LABEL_57:
  if (v25 == v23)
    v26 = 0;
  else
    v26 = v25 - (_BYTE *)v22 + 1;
  v27 = std::string::basic_string(&v29, &__str, v26, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
  v28 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&qword_255E54EC0, (const void **)&v29.__r_.__value_.__l.__data_);
  if ((uint64_t *)v28 != &qword_255E54EC8)
    std::string::operator=(&v29, (const std::string *)(v28 + 56));
  realityio::ArbitraryComponentBuilder::updateComponentOnEntityFromProtoPrim(v2, **(realityio::ImportSession ****)(a1 + 24), *(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 32), **(_QWORD **)(a1 + 40), (uint64_t *)&v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
LABEL_63:
    operator delete(v29.__r_.__value_.__l.__data_);
LABEL_64:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_23019E910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_guard_abort(&qword_255E54E88);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0>,void ()(void)>::target_type()
{
}

void `anonymous namespace'::getSwiftToREMap(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  uint64_t i;
  uint64_t v3[6];
  _QWORD v4[6];
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[7];

  v10[6] = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v3);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[26],0>(v4);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v5);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v6);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v7);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v8);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[19],0>(v9);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v10);
    std::map<std::string,std::string>::map[abi:ne180100](v3, 8);
    for (i = 42; i != -6; i -= 6)
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)&v3[i]);
  }
}

void sub_23019EAC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 336; i != -48; i -= 48)
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)(v1 + i));
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "Collision");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "Collider");
  return a1;
}

void sub_23019EB54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[26],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "DirectionalLightShadow");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "DirectionalLightShadowMap");
  return a1;
}

void sub_23019EBAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "Model");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "Mesh");
  return a1;
}

void sub_23019EC04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "ModelDebugOptions");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "DebugMesh");
  return a1;
}

void sub_23019EC5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "PhysicsBody");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "RigidBody");
  return a1;
}

void sub_23019ECB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "PhysicsMotion");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "MotionState");
  return a1;
}

void sub_23019ED0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[19],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "SpotLightShadow");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "SpotLightShadowMap");
  return a1;
}

void sub_23019ED64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "Synchronization");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "Network");
  return a1;
}

void sub_23019EDBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  const void **v2;
  uint64_t v3;

  qword_255E54ED0 = 0;
  qword_255E54EC8 = 0;
  qword_255E54EC0 = (uint64_t)&qword_255E54EC8;
  if (a2)
  {
    v2 = (const void **)result;
    v3 = 48 * a2;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)&qword_255E54EC0, &qword_255E54EC8, v2, (__int128 *)v2);
      v2 += 6;
      v3 -= 48;
    }
    while (v3);
  }
  return result;
}

void sub_23019EE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFC378;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFC378;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  realityio::ArbitraryComponentBuilder::removeComponentFromEntity(*(realityio::ArbitraryComponentBuilder **)(a1 + 8));
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDFC3F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDFC3F8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  realityio::ArbitraryComponentBuilder::removeComponentFromEntity(*(realityio::ArbitraryComponentBuilder **)(a1 + 8));
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

__int128 *RIO_MTLX::NULL_EDGE(RIO_MTLX *this)
{
  unsigned __int8 v1;
  _QWORD v3[2];
  _QWORD v4[2];
  _QWORD v5[2];

  {
    v5[0] = 0;
    v5[1] = 0;
    v4[0] = 0;
    v4[1] = 0;
    v3[0] = 0;
    v3[1] = 0;
    RIO_MTLX::NULL_EDGE(void)::v = 0u;
    *(_OWORD *)&qword_255E541E0 = 0u;
    xmmword_255E541F0 = 0u;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v3);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v4);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v5);
  }
  return &RIO_MTLX::NULL_EDGE(void)::v;
}

__int128 *RIO_MTLX::NULL_TREE_ITERATOR(RIO_MTLX *this)
{
  unsigned __int8 v1;
  _QWORD v3[2];

  {
    v3[0] = 0;
    v3[1] = 0;
    *((_QWORD *)&xmmword_255E54230 + 1) = 0;
    RIO_MTLX::NULL_TREE_ITERATOR(void)::v = 0u;
    *(_OWORD *)&qword_255E54218 = 0u;
    unk_255E54221 = 0u;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  }
  return &RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
}

uint64_t *RIO_MTLX::NULL_GRAPH_ITERATOR(RIO_MTLX *this)
{
  unsigned __int8 v1;
  unint64_t v3[2];

  {
    v3[0] = 0;
    v3[1] = 0;
    RIO_MTLX::GraphIterator::GraphIterator((uint64_t)&RIO_MTLX::NULL_GRAPH_ITERATOR(void)::v, v3);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  }
  return &RIO_MTLX::NULL_GRAPH_ITERATOR(void)::v;
}

void sub_23019F138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::NULL_INHERITANCE_ITERATOR(RIO_MTLX *this)
{
  unsigned __int8 v1;
  unint64_t v3[2];

  {
    v3[0] = 0;
    v3[1] = 0;
    RIO_MTLX::InheritanceIterator::InheritanceIterator((uint64_t)&RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v, v3);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  }
  return &RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
}

void sub_23019F1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TreeIterator::operator++(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;

  v2 = a1[6];
  if (v2)
  {
    a1[6] = v2 - 1;
    return a1;
  }
  if (!*((_BYTE *)a1 + 40))
  {
    v12 = *a1;
    if (*a1)
    {
      if (*(_QWORD *)(v12 + 136) != *(_QWORD *)(v12 + 144))
      {
        v13 = (uint64_t)(a1 + 4);
        v14 = a1[4];
        v15 = (_QWORD *)a1[3];
        if ((unint64_t)v15 >= v14)
        {
          v21 = a1[2];
          v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v21) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v21) >> 3);
          if (2 * v24 > v23)
            v23 = 2 * v24;
          if (v24 >= 0x555555555555555)
            v25 = 0xAAAAAAAAAAAAAAALL;
          else
            v25 = v23;
          v35 = a1 + 4;
          if (v25)
          {
            v26 = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(v13, v25);
            v12 = *a1;
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[3 * v22];
          *(_QWORD *)&v32 = v26;
          *((_QWORD *)&v32 + 1) = v27;
          v34 = (char *)&v26[3 * v25];
          *v27 = v12;
          v28 = a1[1];
          v27[1] = v28;
          if (v28)
          {
            v29 = (unint64_t *)(v28 + 8);
            do
              v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
          }
          v26[3 * v22 + 2] = 0;
          v33 = v27 + 3;
          std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__swap_out_circular_buffer(a1 + 2, &v32);
          v19 = (_QWORD *)a1[3];
          std::__split_buffer<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::~__split_buffer((uint64_t)&v32);
        }
        else
        {
          *v15 = v12;
          v16 = a1[1];
          v15[1] = v16;
          if (v16)
          {
            v17 = (unint64_t *)(v16 + 8);
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          v15[2] = 0;
          v19 = v15 + 3;
        }
        a1[3] = v19;
        v20 = *(uint64_t **)(*a1 + 136);
LABEL_36:
        std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](a1, v20);
        return a1;
      }
    }
  }
  *((_BYTE *)a1 + 40) = 0;
  v3 = a1[3];
  if (a1[2] != v3)
  {
    v4 = (_QWORD *)(v3 - 24);
    while (1)
    {
      v5 = v4[2] + 1;
      v6 = *(_QWORD *)(*v4 + 136);
      if (v5 < (*(_QWORD *)(*v4 + 144) - v6) >> 4)
        break;
      v7 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v4);
      a1[3] = v7;
      v8 = v7 == a1[2];
      v4 = (_QWORD *)(v7 - 24);
      if (v8)
        goto LABEL_9;
    }
    v4[2] = v5;
    v20 = (uint64_t *)(v6 + 16 * v5);
    goto LABEL_36;
  }
LABEL_9:
  v32 = 0uLL;
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a1, &v32);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

RIO_MTLX *RIO_MTLX::GraphIterator::operator++(RIO_MTLX *a1)
{
  RIO_MTLX *v1;
  uint64_t v2;
  void **i;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  RIO_MTLX *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t **v55;
  _QWORD *v56;
  BOOL v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t **v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t **v78;
  uint64_t **v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t j;
  std::__shared_weak_count *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  RIO_MTLX *v106;
  std::__shared_weak_count *v107;
  unint64_t v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  int v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;

  v1 = a1;
  v2 = *((_QWORD *)a1 + 11);
  if (v2)
  {
    *((_QWORD *)a1 + 11) = v2 - 1;
    return v1;
  }
  if (!*((_BYTE *)a1 + 80))
  {
    a1 = *(RIO_MTLX **)a1;
    if (*(_QWORD *)v1)
    {
      a1 = (RIO_MTLX *)(*(uint64_t (**)(RIO_MTLX *))(*(_QWORD *)a1 + 24))(a1);
      if (a1)
      {
        v58 = *((_QWORD *)v1 + 9);
        v59 = (_QWORD *)*((_QWORD *)v1 + 8);
        if ((unint64_t)v59 >= v58)
        {
          v64 = *((_QWORD *)v1 + 7);
          v65 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v59 - v64) >> 3);
          v66 = v65 + 1;
          if (v65 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - v64) >> 3);
          if (2 * v67 > v66)
            v66 = 2 * v67;
          if (v67 >= 0x555555555555555)
            v68 = 0xAAAAAAAAAAAAAAALL;
          else
            v68 = v66;
          v146 = (unint64_t)v1 + 72;
          if (v68)
            v69 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)v1 + 72, v68);
          else
            v69 = 0;
          v102 = (std::__shared_weak_count *)&v69[3 * v65];
          v142 = v69;
          v143 = v102;
          v145 = (std::__shared_weak_count *)&v69[3 * v68];
          v102->__vftable = *(std::__shared_weak_count_vtbl **)v1;
          v103 = *((_QWORD *)v1 + 1);
          v102->__shared_owners_ = v103;
          if (v103)
          {
            v104 = (unint64_t *)(v103 + 8);
            do
              v105 = __ldxr(v104);
            while (__stxr(v105 + 1, v104));
          }
          v69[3 * v65 + 2] = 0;
          v144 = (uint64_t)&v102[1];
          std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__swap_out_circular_buffer((_QWORD *)v1 + 7, &v142);
          v63 = (_QWORD *)*((_QWORD *)v1 + 8);
          std::__split_buffer<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::~__split_buffer((uint64_t)&v142);
        }
        else
        {
          *v59 = *(_QWORD *)v1;
          v60 = *((_QWORD *)v1 + 1);
          v59[1] = v60;
          if (v60)
          {
            v61 = (unint64_t *)(v60 + 8);
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
          }
          v59[2] = 0;
          v63 = v59 + 3;
        }
        *((_QWORD *)v1 + 8) = v63;
        v106 = (RIO_MTLX *)(*(_QWORD *(**)(uint64_t **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)v1 + 16))(&v142, *(_QWORD *)v1, 0);
        a1 = (RIO_MTLX *)RIO_MTLX::NULL_EDGE(v106);
        if (v142 != (uint64_t *)RIO_MTLX::NULL_EDGE(void)::v
          || v144 != qword_255E541E0
          || v146 != (_QWORD)xmmword_255E541F0)
        {
          v108 = v146;
          v107 = v147;
          if (v147)
          {
            p_shared_owners = (unint64_t *)&v147->__shared_owners_;
            do
              v110 = __ldxr(p_shared_owners);
            while (__stxr(v110 + 1, p_shared_owners));
            do
              v111 = __ldaxr(p_shared_owners);
            while (__stlxr(v111 - 1, p_shared_owners));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
            if (v108)
            {
              v140 = v146;
              v141 = v147;
              if (v147)
              {
                v112 = (unint64_t *)&v147->__shared_owners_;
                do
                  v113 = __ldxr(v112);
                while (__stxr(v113 + 1, v112));
              }
              goto LABEL_192;
            }
          }
          else if (v146)
          {
            v140 = v146;
            v141 = 0;
LABEL_192:
            v138 = v144;
            v139 = v145;
            if (v145)
            {
              v114 = (unint64_t *)&v145->__shared_owners_;
              do
                v115 = __ldxr(v114);
              while (__stxr(v115 + 1, v114));
            }
            a1 = (RIO_MTLX *)RIO_MTLX::GraphIterator::extendPathUpstream((uint64_t)v1, &v140, &v138);
            v116 = v139;
            if (v139)
            {
              v117 = (unint64_t *)&v139->__shared_owners_;
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
            v119 = v141;
            if (v141)
            {
              v120 = (unint64_t *)&v141->__shared_owners_;
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
            v122 = 0;
LABEL_207:
            v123 = v147;
            if (v147)
            {
              v124 = (unint64_t *)&v147->__shared_owners_;
              do
                v125 = __ldaxr(v124);
              while (__stlxr(v125 - 1, v124));
              if (!v125)
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
            }
            v126 = v145;
            if (v145)
            {
              v127 = (unint64_t *)&v145->__shared_owners_;
              do
                v128 = __ldaxr(v127);
              while (__stlxr(v128 - 1, v127));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
            }
            v129 = v143;
            if (v143)
            {
              v130 = (unint64_t *)&v143->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            if (!v122)
              return v1;
            goto LABEL_4;
          }
        }
        v122 = 1;
        goto LABEL_207;
      }
    }
  }
LABEL_4:
  *((_BYTE *)v1 + 80) = 0;
  i = (void **)((char *)v1 + 56);
  while (1)
  {
    v4 = *(_QWORD *)v1;
    if (*(_QWORD *)v1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 1);
      v136 = *(_QWORD *)v1;
      v137 = v5;
      if (v5)
      {
        v6 = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      RIO_MTLX::GraphIterator::returnPathDownstream(v1, v4);
      if (v5)
      {
        v8 = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    v10 = *((_QWORD *)v1 + 8);
    if (*((_QWORD *)v1 + 7) == v10)
      break;
    v11 = *(_QWORD *)(v10 - 8) + 1;
    if (v11 >= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 - 24) + 24))(*(_QWORD *)(v10 - 24)))
    {
      v19 = *(_QWORD *)(v10 - 24);
      v20 = *(std::__shared_weak_count **)(v10 - 16);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      RIO_MTLX::GraphIterator::returnPathDownstream(v1, v19);
      if (v20)
      {
        v23 = (unint64_t *)&v20->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      a1 = (RIO_MTLX *)std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](*((_QWORD *)v1 + 8) - 24);
      v25 = 0;
      *((_QWORD *)v1 + 8) = a1;
      goto LABEL_74;
    }
    v12 = *(_QWORD *)(v10 - 24);
    ++*(_QWORD *)(v10 - 8);
    v13 = (RIO_MTLX *)(*(_QWORD *(**)(uint64_t **__return_ptr))(*(_QWORD *)v12 + 16))(&v142);
    a1 = (RIO_MTLX *)RIO_MTLX::NULL_EDGE(v13);
    if (v142 == (uint64_t *)RIO_MTLX::NULL_EDGE(void)::v)
    {
      v14 = v146;
      if (v144 == qword_255E541E0 && v146 == (_QWORD)xmmword_255E541F0)
        goto LABEL_57;
    }
    else
    {
      v14 = v146;
    }
    v15 = v147;
    if (v147)
    {
      v16 = (unint64_t *)&v147->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (v18)
      {
        if (!v14)
        {
LABEL_57:
          v25 = 2;
LABEL_58:
          v36 = v147;
          if (v147)
          {
            v37 = (unint64_t *)&v147->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          goto LABEL_64;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        if (!v14)
          goto LABEL_57;
      }
      v134 = v146;
      v135 = v147;
      if (v147)
      {
        v26 = (unint64_t *)&v147->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
LABEL_43:
      v132 = v144;
      v133 = v145;
      if (v145)
      {
        v28 = (unint64_t *)&v145->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      a1 = (RIO_MTLX *)RIO_MTLX::GraphIterator::extendPathUpstream((uint64_t)v1, &v134, &v132);
      v30 = v133;
      if (v133)
      {
        v31 = (unint64_t *)&v133->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = v135;
      if (v135)
      {
        v34 = (unint64_t *)&v135->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v25 = 1;
      goto LABEL_58;
    }
    if (v14)
    {
      v134 = v14;
      v135 = 0;
      goto LABEL_43;
    }
    v25 = 2;
LABEL_64:
    v39 = v145;
    if (v145)
    {
      v40 = (unint64_t *)&v145->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v143;
    if (v143)
    {
      v43 = (unint64_t *)&v143->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
LABEL_74:
    if (v25 == 1)
      return v1;
  }
  RIO_MTLX::NULL_GRAPH_ITERATOR(a1);
  std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](v1, &RIO_MTLX::NULL_GRAPH_ITERATOR(void)::v);
  std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100]((_QWORD *)v1 + 2, &qword_255E54258);
  if (v1 == (RIO_MTLX *)&RIO_MTLX::NULL_GRAPH_ITERATOR(void)::v)
    goto LABEL_169;
  v45 = (_QWORD *)qword_255E54268;
  if (!*((_QWORD *)v1 + 6))
    goto LABEL_123;
  v47 = (uint64_t **)((char *)v1 + 40);
  v46 = *((_QWORD *)v1 + 5);
  v48 = (uint64_t *)*((_QWORD *)v1 + 4);
  *((_QWORD *)v1 + 4) = (char *)v1 + 40;
  *(_QWORD *)(v46 + 16) = 0;
  *((_QWORD *)v1 + 5) = 0;
  *((_QWORD *)v1 + 6) = 0;
  if (v48[1])
    v49 = (uint64_t *)v48[1];
  else
    v49 = v48;
  if (!v49)
  {
    std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v1 + 32, 0);
LABEL_122:
    i = (void **)((char *)v1 + 56);
    goto LABEL_123;
  }
  v50 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v49);
  if (v45 == (_QWORD *)&unk_255E54270)
  {
    v45 = &unk_255E54270;
  }
  else
  {
    v51 = v49;
    v52 = v45;
    do
    {
      v49 = v50;
      std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](v51 + 4, v52 + 4);
      v53 = *v47;
      v54 = (uint64_t **)((char *)v1 + 40);
      v55 = (uint64_t **)((char *)v1 + 40);
      if (*v47)
      {
        do
        {
          while (1)
          {
            v54 = (uint64_t **)v53;
            if (v51[4] >= (unint64_t)v53[4])
              break;
            v53 = (uint64_t *)*v53;
            v55 = v54;
            if (!*v54)
              goto LABEL_90;
          }
          v53 = (uint64_t *)v53[1];
        }
        while (v53);
        v55 = v54 + 1;
      }
LABEL_90:
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)v1 + 4, (uint64_t)v54, v55, v51);
      if (v50)
        v50 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v50);
      else
        v50 = 0;
      v56 = (_QWORD *)v52[1];
      if (v56)
      {
        do
        {
          v45 = v56;
          v56 = (_QWORD *)*v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          v45 = (_QWORD *)v52[2];
          v57 = *v45 == (_QWORD)v52;
          v52 = v45;
        }
        while (!v57);
      }
      if (!v49)
        break;
      v51 = v49;
      v52 = v45;
    }
    while (v45 != (_QWORD *)&unk_255E54270);
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v1 + 32, v49);
  if (!v50)
    goto LABEL_122;
  v70 = (uint64_t *)v50[2];
  for (i = (void **)((char *)v1 + 56); v70; v70 = (uint64_t *)v70[2])
    v50 = v70;
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v1 + 32, v50);
LABEL_123:
  if (v45 != (_QWORD *)&unk_255E54270)
  {
    v71 = (uint64_t **)((char *)v1 + 40);
    do
    {
      v72 = v45[4];
      v73 = v45[5];
      v74 = (uint64_t *)operator new(0x30uLL);
      v142 = v74;
      v143 = (std::__shared_weak_count *)((char *)v1 + 40);
      v74[4] = v72;
      v74[5] = v73;
      if (v73)
      {
        v75 = (unint64_t *)(v73 + 8);
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
      LOBYTE(v144) = 1;
      v77 = *v71;
      v78 = (uint64_t **)((char *)v1 + 40);
      v79 = (uint64_t **)((char *)v1 + 40);
      if (*v71)
      {
        do
        {
          while (1)
          {
            v78 = (uint64_t **)v77;
            if (v77[4] <= v72)
              break;
            v77 = (uint64_t *)*v77;
            v79 = v78;
            if (!*v78)
              goto LABEL_134;
          }
          v77 = (uint64_t *)v77[1];
        }
        while (v77);
        v79 = v78 + 1;
      }
LABEL_134:
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)v1 + 4, (uint64_t)v78, v79, v74);
      v142 = 0;
      std::unique_ptr<std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *>>>>::reset[abi:ne180100]((uint64_t)&v142, 0);
      v80 = (_QWORD *)v45[1];
      if (v80)
      {
        do
        {
          v81 = v80;
          v80 = (_QWORD *)*v80;
        }
        while (v80);
      }
      else
      {
        do
        {
          v81 = (_QWORD *)v45[2];
          v57 = *v81 == (_QWORD)v45;
          v45 = v81;
        }
        while (!v57);
      }
      v45 = v81;
    }
    while (v81 != (_QWORD *)&unk_255E54270);
  }
  v83 = (uint64_t *)qword_255E54280;
  v82 = *(uint64_t **)algn_255E54288;
  v84 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)algn_255E54288 - qword_255E54280) >> 3);
  v85 = *((_QWORD *)v1 + 9);
  v86 = *((_QWORD *)v1 + 7);
  if (0xAAAAAAAAAAAAAAABLL * ((v85 - v86) >> 3) >= v84)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v1 + 8) - v86) >> 3) >= v84)
    {
      v92 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,0>((uint64_t *)qword_255E54280, *(uint64_t **)algn_255E54288, *((_QWORD **)v1 + 7));
      for (j = *((_QWORD *)v1 + 8);
            (_QWORD *)j != v92;
    }
    else
    {
      v96 = (uint64_t *)(qword_255E54280 + 8 * ((*((_QWORD *)v1 + 8) - v86) >> 3));
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,0>((uint64_t *)qword_255E54280, v96, *((_QWORD **)v1 + 7));
      v92 = (_QWORD *)*((_QWORD *)v1 + 8);
      while (v96 != v82)
      {
        *v92 = *v96;
        v97 = v96[1];
        v92[1] = v97;
        if (v97)
        {
          v98 = (unint64_t *)(v97 + 8);
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
        v92[2] = v96[2];
        v96 += 3;
        v92 += 3;
      }
    }
  }
  else
  {
    if (v86)
    {
      v87 = *((_QWORD *)v1 + 8);
      v88 = (void *)*((_QWORD *)v1 + 7);
      if (v87 != v86)
      {
        do
          v87 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v87 - 24);
        while (v87 != v86);
        v88 = *i;
      }
      *((_QWORD *)v1 + 8) = v86;
      operator delete(v88);
      v85 = 0;
      *i = 0;
      i[1] = 0;
      i[2] = 0;
    }
    if (v84 > 0xAAAAAAAAAAAAAAALL)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v89 = 0xAAAAAAAAAAAAAAABLL * (v85 >> 3);
    v90 = 2 * v89;
    if (2 * v89 <= v84)
      v90 = v84;
    if (v89 >= 0x555555555555555)
      v91 = 0xAAAAAAAAAAAAAAALL;
    else
      v91 = v90;
    std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__vallocate[abi:ne180100](i, v91);
    v92 = (_QWORD *)*((_QWORD *)v1 + 8);
    while (v83 != v82)
    {
      *v92 = *v83;
      v93 = v83[1];
      v92[1] = v93;
      if (v93)
      {
        v94 = (unint64_t *)(v93 + 8);
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }
      v92[2] = v83[2];
      v83 += 3;
      v92 += 3;
    }
  }
  *((_QWORD *)v1 + 8) = v92;
LABEL_169:
  *((_OWORD *)v1 + 5) = xmmword_255E54298;
  return v1;
}

void sub_23019FF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  va_list va2;

  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  RIO_MTLX::Edge::~Edge((RIO_MTLX::Edge *)va2);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::GraphIterator::extendPathUpstream(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  std::__tree<std::shared_ptr<RIO_MTLX::Element>>::__emplace_unique_key_args<std::shared_ptr<RIO_MTLX::Element>,std::shared_ptr<RIO_MTLX::Element> const&>((uint64_t **)(a1 + 32), a2, (uint64_t *)a2);
  std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100]((_QWORD *)a1, (uint64_t *)a2);
  return std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100]((_QWORD *)(a1 + 16), a3);
}

void RIO_MTLX::GraphIterator::returnPathDownstream(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v4 = a1 + 5;
  v3 = (uint64_t *)a1[5];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if ((uint64_t *)a1[4] == v5)
        a1[4] = v11;
      --a1[6];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(v5 + 4));
      operator delete(v5);
    }
  }
  v20 = 0uLL;
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a1, &v20);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v20 = 0uLL;
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(a1 + 2), &v20);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

uint64_t RIO_MTLX::InheritanceIterator::operator++(uint64_t a1)
{
  uint64_t v2;
  RIO_MTLX::Element *v4;
  std::string *InheritString;
  unsigned __int8 *v6;
  RIO_MTLX::Element *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const void **v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[2];
  char v39;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2 - 1;
    return a1;
  }
  v4 = *(RIO_MTLX::Element **)a1;
  if (!*(_QWORD *)a1)
    return a1;
  InheritString = (std::string *)RIO_MTLX::Element::getInheritString(*(RIO_MTLX::Element **)a1);
  RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>((uint64_t)v4, InheritString, &v36);
  if (v36)
  {
    v7 = *(RIO_MTLX::Element **)a1;
    v8 = *(unsigned __int8 *)(v36 + 47);
    if ((v8 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v36 + 47);
    else
      v9 = *(_QWORD *)(v36 + 32);
    v10 = *((unsigned __int8 *)v7 + 47);
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)v7 + 4);
    if (v9 == v10)
    {
      v12 = (const void **)(v36 + 24);
      v15 = (unsigned __int8 *)*((_QWORD *)v7 + 3);
      v13 = (unsigned __int8 *)v7 + 24;
      v14 = v15;
      if (v11 >= 0)
        v6 = v13;
      else
        v6 = v14;
      if ((v8 & 0x80) != 0)
      {
        if (!memcmp(*v12, v6, *(_QWORD *)(v36 + 32)))
          goto LABEL_26;
      }
      else
      {
        if (!*(_BYTE *)(v36 + 47))
          goto LABEL_26;
        while (*(unsigned __int8 *)v12 == *v6)
        {
          v12 = (const void **)((char *)v12 + 1);
          ++v6;
          if (!--v8)
            goto LABEL_26;
        }
      }
    }
    v16 = v37;
    v36 = 0;
    v37 = 0;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_26:
      v19 = v36;
      if (v36)
      {
        v20 = v37;
        if (v37)
        {
          v21 = (unint64_t *)&v37->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
          do
            v23 = __ldaxr(v21);
          while (__stlxr(v23 - 1, v21));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v20->__on_zero_shared)(v20, v6);
            std::__shared_weak_count::__release_weak(v20);
          }
          v19 = v36;
          v20 = v37;
          if (v37)
          {
            v24 = (unint64_t *)&v37->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
        }
        v26 = *(uint64_t **)(a1 + 24);
        v27 = (uint64_t **)(a1 + 24);
        v28 = (uint64_t **)(a1 + 24);
        if (v26)
        {
          while (1)
          {
            while (1)
            {
              v28 = (uint64_t **)v26;
              v29 = v26[4];
              if (v29 <= v19)
                break;
              v26 = *v28;
              v27 = v28;
              if (!*v28)
                goto LABEL_43;
            }
            if (v29 >= v19)
              break;
            v26 = v28[1];
            if (!v26)
            {
              v27 = v28 + 1;
              goto LABEL_43;
            }
          }
        }
        else
        {
LABEL_43:
          v30 = (uint64_t *)operator new(0x30uLL);
          v38[1] = a1 + 24;
          v30[4] = v19;
          v30[5] = (uint64_t)v20;
          v39 = 1;
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)(a1 + 16), (uint64_t)v28, v27, v30);
          v38[0] = 0;
          std::unique_ptr<std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *>>>>::reset[abi:ne180100]((uint64_t)v38, 0);
          v20 = 0;
        }
        if (v20)
        {
          v31 = (unint64_t *)&v20->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
    }
  }
  std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100]((_QWORD *)a1, (uint64_t *)&v36);
  v33 = v37;
  if (v37)
  {
    v34 = (unint64_t *)&v37->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return a1;
}

void sub_2301A0438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,0>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](a3, v5);
      a3[2] = v5[2];
      a3 += 3;
      v5 += 3;
    }
    while (v5 != a2);
  }
  return a3;
}

_QWORD *std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *v2 = 0;
    v2[1] = 0;
    *(_QWORD *)(v4 + 16) = v2[2];
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](i - 24);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void realityio::MaterialXStandalone::makeSource(realityio::MaterialXStandalone *this@<X0>, const __CFURL *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  void *__p[2];
  char v8;
  __int128 v9;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a2);
  realityio::mtlx::mtlxToDataSource((uint64_t)__p, this, &v9);
  v6 = v9;
  v9 = 0uLL;
  *(_BYTE *)a3 = 1;
  *(_OWORD *)(a3 + 8) = v6;
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_2301A05C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::MaterialXStandalone::makeSource(realityio::MaterialXStandalone *this@<X0>, char *__s@<X2>, uint64_t a3@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const std::error_category *v12;
  size_t size;
  size_t v14;
  std::string *v15;
  std::string *p_p;
  char *v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::string v23;
  void *v24[2];
  std::string::size_type v25;
  void *v26[2];
  uint64_t v27;
  __int128 v28;
  std::string __p;
  uint64_t v30;
  std::__shared_weak_count *v31;

  std::string::basic_string[abi:ne180100]<0>(v26, __s);
  realityio::stringFromCFData(this, &__p);
  realityio::mtlx::mtlxToDataSource((uint64_t)v26, &__p, (uint64_t)&v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  v8 = v30;
  if (v30)
  {
    v9 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v9;
    if (!v9)
      return;
LABEL_30:
    v21 = (unint64_t *)&v9->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Error reading material \"");
  v12 = std::system_category();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = strlen(__s);
  v15 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, size + v14);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(v15, p_p, size);
  }
  v17 = (char *)v15 + size;
  if (v14)
    memmove(v17, __s, v14);
  v17[v14] = 0;
  v18 = std::string::append(&v23, "\"");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v25 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)v24 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  realityio::DetailedError::DetailedError(v26, 0, (uint64_t)v12, (__int128 *)v24);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v26;
  v20 = v28;
  *(_QWORD *)(a3 + 24) = v27;
  *(_QWORD *)(a3 + 32) = v20;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v28 + 7);
  LOBYTE(v20) = HIBYTE(v28);
  v28 = 0uLL;
  v27 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v20;
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = v31;
  if (v31)
    goto LABEL_30;
}

void sub_2301A0808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a15 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v32 - 72);
  _Unwind_Resume(a1);
}

void realityio::MaterialXStandalone::generateSyncOnEngineQueue(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[2];
  _QWORD v22[3];
  _QWORD *v23;
  id v24[9];
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v22, a3);
  v21[0] = v7;
  v21[1] = v6;
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (uint64_t)v23;
  if (!v23)
    goto LABEL_10;
  if (v23 != v22)
  {
    v12 = (*(uint64_t (**)(_QWORD *))(*v23 + 16))(v23);
LABEL_10:
    v27 = (uint64_t *)v12;
    goto LABEL_12;
  }
  v27 = &v25;
  (*(void (**)(_QWORD *, uint64_t *))(v22[0] + 24))(v22, &v25);
LABEL_12:
  v13 = v27;
  if (v27 == &v25)
  {
    v14 = 4;
    v13 = &v25;
    goto LABEL_16;
  }
  if (v27)
  {
    v14 = 5;
LABEL_16:
    (*(void (**)(uint64_t *))(*v13 + 8 * v14))(v13);
  }
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v24[0] = &off_24FDFC478;
  v17 = v23;
  if (v23 == v22)
  {
    v18 = 4;
    v17 = v22;
    goto LABEL_26;
  }
  if (v23)
  {
    v18 = 5;
LABEL_26:
    (*(void (**)(_QWORD *))(*v17 + 8 * v18))(v17);
  }
  if (v6)
  {
    v19 = (unint64_t *)&v6->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  dispatch_assert_queue_V2((dispatch_queue_t)v24[8]);
  realityio::buildMaterialXAsset((realityio *)v24, (uint64_t (***)(_QWORD))v24[6], &v25);
  *a4 = v25;
  v25 = 0;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v26);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v25);
}

void sub_2301A0A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char *v20;
  uint64_t v21;

  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = a16;
  if (a16 == &a13)
  {
    v21 = 4;
    v20 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void realityio::MaterialXStandalone::generateAsync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  unint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  NSObject **v23;
  dispatch_queue_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t (***v33)();
  _QWORD *v34;
  uint64_t (**v35)();
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t (***v41)();
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD v50[2];
  __int128 v51;
  _QWORD v52[3];
  _QWORD *v53;
  _BYTE v54[24];
  uint64_t (***v55)();
  _QWORD v56[3];
  _QWORD *v57;
  _QWORD block[3];
  _QWORD *v59;
  char *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x100uLL);
  *((_QWORD *)v8 + 1) = 0;
  v9 = (unint64_t *)(v8 + 8);
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24FDFC5A8;
  v11 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v56, a3);
  v50[0] = v11;
  v50[1] = v10;
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (uint64_t)v57;
  if (!v57)
    goto LABEL_10;
  if (v57 != v56)
  {
    v16 = (*(uint64_t (**)(void))(*v57 + 16))();
LABEL_10:
    v59 = (_QWORD *)v16;
    goto LABEL_12;
  }
  v59 = block;
  (*(void (**)(_QWORD *, _QWORD *))(v56[0] + 24))(v56, block);
LABEL_12:
  v17 = v8 + 24;
  v18 = v59;
  if (v59 == block)
  {
    v19 = 4;
    v18 = block;
    goto LABEL_16;
  }
  if (v59)
  {
    v19 = 5;
LABEL_16:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  if (v10)
  {
    v20 = (unint64_t *)&v10->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *((_QWORD *)v8 + 12) = &off_24FDFA800;
  MEMORY[0x2348B4CCC](v8 + 104);
  *((_QWORD *)v8 + 30) = 0;
  v22 = (uint64_t *)(v8 + 240);
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *((_QWORD *)v8 + 3) = &off_24FDFC5F8;
  *((_QWORD *)v8 + 12) = &unk_24FDFC650;
  *((_QWORD *)v8 + 25) = 0;
  v23 = (NSObject **)(v8 + 200);
  *((_QWORD *)v8 + 26) = 0;
  *((_QWORD *)v8 + 31) = 0;
  v24 = dispatch_queue_create("com.apple.realityio.materialX-async", 0);
  v25 = (void *)*((_QWORD *)v8 + 25);
  *((_QWORD *)v8 + 25) = v24;

  v26 = v57;
  if (v57 == v56)
  {
    v27 = 4;
    v26 = v56;
    goto LABEL_26;
  }
  if (v57)
  {
    v27 = 5;
LABEL_26:
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
  if (v10)
  {
    v28 = (unint64_t *)&v10->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v49 = (std::__shared_weak_count *)v8;
  *(_QWORD *)&v51 = v8 + 24;
  *((_QWORD *)&v51 + 1) = v8;
  do
    v30 = __ldxr(v9);
  while (__stxr(v30 + 1, v9));
  v31 = v52;
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v52, a4);
  v55 = 0;
  v32 = (char *)operator new(0x38uLL);
  v33 = (uint64_t (***)())v32;
  *(_QWORD *)v32 = &off_24FDFC700;
  *(_OWORD *)(v32 + 8) = v51;
  v51 = 0uLL;
  if (!v53)
  {
    v34 = v32 + 48;
    goto LABEL_38;
  }
  if (v53 != v52)
  {
    v34 = &v53;
    *((_QWORD *)v32 + 6) = v53;
LABEL_38:
    *v34 = 0;
    v35 = &off_24FDFC700;
    goto LABEL_40;
  }
  *((_QWORD *)v32 + 6) = v32 + 24;
  (*(void (**)(_QWORD *))(v52[0] + 24))(v52);
  v35 = *v33;
LABEL_40:
  v55 = v33;
  v36 = ((uint64_t (*)(uint64_t (***)()))v35[2])(v33);
  v37 = v8 + 216;
  v59 = (_QWORD *)v36;
  v38 = (_QWORD *)*v22;
  if ((char *)*v22 == v37)
  {
    v38 = block;
    (*(void (**)(char *, _QWORD *))(*(_QWORD *)v37 + 24))(v37, block);
    (*(void (**)(uint64_t))(*(_QWORD *)*v22 + 32))(*v22);
    *v22 = (uint64_t)v59;
    v59 = block;
    v39 = 4;
  }
  else
  {
    v59 = (_QWORD *)*v22;
    *v22 = v36;
    if (v38 == block)
    {
      v39 = 4;
      v38 = block;
    }
    else
    {
      if (!v38)
        goto LABEL_47;
      v39 = 5;
    }
  }
  (*(void (**)(_QWORD *))(*v38 + 8 * v39))(v38);
LABEL_47:
  v40 = *v23;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZN9realityio12_GLOBAL__N_115StandaloneAsync7executeENSt3__18functionIFvNS_12WrappedRERefIP7REAssetEEEEE_block_invoke;
  v59 = &__block_descriptor_40_e5_v8__0l;
  v60 = v17;
  dispatch_async(v40, block);
  v41 = v55;
  if (v55 == (uint64_t (***)())v54)
  {
    v42 = 4;
    v41 = (uint64_t (***)())v54;
  }
  else
  {
    if (!v55)
      goto LABEL_52;
    v42 = 5;
  }
  ((void (*)(uint64_t (***)()))(*v41)[v42])(v41);
LABEL_52:
  if (v53 == v52)
  {
    v43 = 4;
    goto LABEL_56;
  }
  if (v53)
  {
    v43 = 5;
    v31 = v53;
LABEL_56:
    (*(void (**)(_QWORD *))(*v31 + 8 * v43))(v31);
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v49)
  {
    v47 = (unint64_t *)&v49->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_2301A1008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0::~$_0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)(a1 + 40);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1);
}

_QWORD *realityio::`anonymous namespace'::Standalone::Standalone(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;

  *a1 = &off_24FDFC4F8;
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a4);
  a1[5] = a2;
  if (a2)
    RERetain();
  v7 = a3[1];
  a1[6] = *a3;
  a1[7] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  a1[8] = 0;
  REEngineConfigurationCreateFromEngine();
  REEngineConfigurationGetEngineQueue();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)a1[8];
  a1[8] = v10;

  RERelease();
  return a1;
}

void sub_2301A1288(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = v1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t realityio::`anonymous namespace'::Standalone::engine(realityio::_anonymous_namespace_::Standalone *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t realityio::`anonymous namespace'::StandaloneSynchronous::performBlockSyncOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
}

uint64_t realityio::`anonymous namespace'::Standalone::addExtraAsset()
{
  return 1;
}

uint64_t realityio::`anonymous namespace'::StandaloneSynchronous::queueForDeferredAssetLoad()
{
  return REAssetHandleLoadNow();
}

void realityio::`anonymous namespace'::Standalone::resolveImageAssets(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath **a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int **NameToken;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  std::string v26;
  std::string __p;
  std::string::size_type v28;
  void *v29[2];
  char v30;
  std::string v31;
  std::string v32;
  uint64_t v33;
  int v34;
  unsigned int *v35;
  int v36;
  _QWORD v37[2];
  _QWORD *v38;
  _QWORD v39[2];
  _QWORD v40[6];

  v37[0] = &off_24FDFC548;
  v37[1] = a1;
  v39[0] = 0;
  v39[1] = 0;
  v38 = v39;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v25 = 0;
  }
  else
  {
    do
    {
      v7 = *(_QWORD *)(a1 + 48);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v5);
      v8 = realityio::mtlx::NeoDataSource::primFromPath(v7, &v36);
      LODWORD(v7) = v9;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
      NameToken = (unsigned int **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v5);
      v33 = v8;
      v34 = v7;
      v11 = *NameToken;
      v35 = v11;
      if ((v11 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        if ((v13 & 1) == 0)
          v35 = v12;
      }
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v31);
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t *, std::string *))(**(_QWORD **)(a1 + 48) + 224))(v29, *(_QWORD *)(a1 + 48), &v33, &v31);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v26, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      else
        v26 = v31;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      else
        __p = v32;
      realityio::TextureBuilder::createStandaloneTextureAsset((uint64_t)v37, &v26, (uint64_t)v29, &v28);
      v15 = (_QWORD *)a3[1];
      v14 = a3[2];
      if ((unint64_t)v15 >= v14)
      {
        v17 = ((uint64_t)v15 - *a3) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
        v18 = v14 - *a3;
        v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1))
          v19 = v17 + 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        v40[4] = a3 + 2;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a3 + 2), v20);
        else
          v21 = 0;
        v22 = &v21[8 * v17];
        v40[0] = v21;
        v40[1] = v22;
        v40[3] = &v21[8 * v20];
        *(_QWORD *)v22 = v28;
        v28 = 0;
        v40[2] = v22 + 8;
        std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer(a3, v40);
        v16 = (_QWORD *)a3[1];
        std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)v40);
      }
      else
      {
        *v15 = v28;
        v16 = v15 + 1;
        v28 = 0;
        a3[1] = (uint64_t)v16;
      }
      a3[1] = (uint64_t)v16;
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v28);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (v30 < 0)
        operator delete(v29[0]);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if ((v35 & 7) != 0)
      {
        v23 = (unsigned int *)((unint64_t)v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 8);
    }
    while (v5 != v6);
    v25 = (_QWORD *)v39[0];
  }
  v37[0] = &off_24FDFC548;
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)&v38, v25);
}

void sub_2301A1610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a20);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a11);
  if (a26 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)&a28);
  if ((a36 & 7) != 0)
  {
    v39 = (unsigned int *)(a36 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  *(_QWORD *)(v37 - 168) = &off_24FDFC548;
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(a10, *(_QWORD **)(v37 - 144));
  _Unwind_Resume(a1);
}

void realityio::`anonymous namespace'::StandaloneSynchronous::~StandaloneSynchronous(id *this)
{
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::`anonymous namespace'::LocalTextureContext::engine(realityio::_anonymous_namespace_::LocalTextureContext *this)
{
  return (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
}

uint64_t realityio::`anonymous namespace'::LocalTextureContext::getTextureAssetWithKey@<X0>(uint64_t result@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v4 = result + 24;
  v5 = *(_QWORD *)(result + 24);
  if (!v5)
    goto LABEL_8;
  v7 = result + 32;
  v8 = result + 24;
  do
  {
    result = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), a2);
    v9 = (uint64_t *)(v5 + 8);
    if (!(_DWORD)result)
    {
      v9 = (uint64_t *)v5;
      v8 = v5;
    }
    v5 = *v9;
  }
  while (*v9);
  if (v8 == v4
    || (result = std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)(v8 + 32)), (result & 1) != 0))
  {
LABEL_8:
    *a3 = 0;
  }
  else
  {
    result = *(_QWORD *)(v8 + 56);
    *a3 = result;
    if (result)
      return RERetain();
  }
  return result;
}

_QWORD *realityio::`anonymous namespace'::LocalTextureContext::getBundleInfo@<X0>(_QWORD *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a1, "");
  return std::string::basic_string[abi:ne180100]<0>(a1 + 3, "");
}

void sub_2301A181C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *realityio::`anonymous namespace'::LocalTextureContext::insertTextureIntoCache(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  uint64_t *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 16), (const void **)a2, (uint64_t)&std::piecewise_construct, &v6);
  return realityio::WrappedRERef<REAsset *>::operator=(v4 + 7, a3);
}

uint64_t realityio::`anonymous namespace'::LocalTextureContext::queueForDeferredAssetLoad(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t realityio::`anonymous namespace'::LocalTextureContext::dataFromRawPath@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;

  *a3 = 0;
  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if (result)
  {
    if (*((char *)a2 + 23) >= 0)
      v5 = a2;
    else
      v5 = (uint64_t *)*a2;
    v6 = v5;
    result = (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)result + 48))(result, &v6);
    *a3 = result;
  }
  return result;
}

void sub_2301A18F4(_Unwind_Exception *a1)
{
  const void **v1;

  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void realityio::`anonymous namespace'::Standalone::~Standalone(id *this)
{
  realityio::_anonymous_namespace_::Standalone *v2;
  uint64_t v3;

  *this = &off_24FDFC4F8;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(this + 5);
  v2 = (realityio::_anonymous_namespace_::Standalone *)this[4];
  if (v2 == (realityio::_anonymous_namespace_::Standalone *)(this + 1))
  {
    v3 = 4;
    v2 = (realityio::_anonymous_namespace_::Standalone *)(this + 1);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

void ___ZN9realityio12_GLOBAL__N_115StandaloneAsync7executeENSt3__18functionIFvNS_12WrappedRERefIP7REAssetEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  _QWORD block[5];
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  realityio::buildMaterialXAsset((realityio *)v1, *(uint64_t (****)(_QWORD))(v1 + 48), &v5);
  v2 = *(_QWORD *)(v1 + 224);
  if (v2 != v5)
  {
    *(_QWORD *)(v1 + 224) = v5;
    v5 = v2;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
  v3 = *(NSObject **)(v1 + 64);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZN9realityio12_GLOBAL__N_115StandaloneAsync7executeENSt3__18functionIFvNS_12WrappedRERefIP7REAssetEEEEE_block_invoke_2;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v1;
  dispatch_async(v3, block);
}

void ___ZN9realityio12_GLOBAL__N_115StandaloneAsync7executeENSt3__18functionIFvNS_12WrappedRERefIP7REAssetEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t (***v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t (****)(_QWORD))(a1 + 32);
  v2 = (uint64_t)(v1 + 9);
  v3 = (**v1)(v1);
  realityio::AssetLoadTracker::loadAssets(v2, v3, 0);
}

void std::__shared_ptr_emplace<realityio::`anonymous namespace'::StandaloneAsync>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFC5A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::`anonymous namespace'::StandaloneAsync>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFC5A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::`anonymous namespace'::StandaloneAsync>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

_QWORD *realityio::`anonymous namespace'::StandaloneAsync::performBlockSyncOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 184))
  {
    v3 = *(_QWORD *)(a2 + 24);
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  }
  else
  {
    v6 = *(id *)(a1 + 64);
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3321888768;
    v12[2] = ___ZN9realityio12_GLOBAL__N_115StandaloneAsync29performBlockSyncOnEngineQueueENSt3__18functionIFvvEEE_block_invoke;
    v12[3] = &__block_descriptor_72_ea8_40c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
    v12[4] = a1;
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v13, a2);
    dispatch_sync(v6, v12);

    result = v14;
    if (v14 == v13)
    {
      v11 = 4;
      result = v13;
    }
    else
    {
      if (!v14)
        return result;
      v11 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v11))(result, v7, v8, v9, v10);
  }
}

void sub_2301A1BD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void realityio::`anonymous namespace'::StandaloneAsync::queueForDeferredAssetLoad(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14[2];
  std::__shared_weak_count *v15;

  v4 = (std::__shared_weak_count *)operator new(0x40uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFA760;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF09F0;
  v4[1].__shared_owners_ = 0;
  v4[2].__vftable = 0;
  v4[2].__shared_owners_ = 0;
  v4[1].__shared_weak_owners_ = 0;
  v14[1] = (uint64_t)&v4[1];
  v15 = v4;
  v14[0] = *a2;
  realityio::WrappedRERef<REAsset *>::operator=(&v4[1].__shared_owners_, v14);
  *(_QWORD *)&v13 = v4 + 1;
  *((_QWORD *)&v13 + 1) = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  realityio::AssetLoadTracker::add(a1 + 72, &v13);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_2301A1D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void realityio::`anonymous namespace'::StandaloneAsync::~StandaloneAsync(realityio::_anonymous_namespace_::StandaloneAsync *this)
{
  realityio::_anonymous_namespace_::StandaloneAsync *v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_24FDFC5F8;
  *((_QWORD *)this + 9) = &unk_24FDFC650;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)this + 28);
  v2 = (realityio::_anonymous_namespace_::StandaloneAsync *)*((_QWORD *)this + 27);
  if (v2 == (realityio::_anonymous_namespace_::StandaloneAsync *)((char *)this + 192))
  {
    v3 = 4;
    v2 = (realityio::_anonymous_namespace_::StandaloneAsync *)((char *)this + 192);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }

  *((_QWORD *)this + 9) = &off_24FDFA800;
  v4 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 80));
}

{
  realityio::_anonymous_namespace_::StandaloneAsync *v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_24FDFC5F8;
  *((_QWORD *)this + 9) = &unk_24FDFC650;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)this + 28);
  v2 = (realityio::_anonymous_namespace_::StandaloneAsync *)*((_QWORD *)this + 27);
  if (v2 == (realityio::_anonymous_namespace_::StandaloneAsync *)((char *)this + 192))
  {
    v3 = 4;
    v2 = (realityio::_anonymous_namespace_::StandaloneAsync *)((char *)this + 192);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }

  *((_QWORD *)this + 9) = &off_24FDFA800;
  v4 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 80));
  MEMORY[0x2348B4E1C]();
}

_QWORD *realityio::`anonymous namespace'::StandaloneAsync::onComplete(id *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  _QWORD v19[5];
  _BYTE v20[24];
  _BYTE *v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)(this + 24);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)(this + 24));
  v7 = this[8];
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3321888768;
  v19[2] = ___ZN9realityio12_GLOBAL__N_115StandaloneAsync10onCompleteEv_block_invoke;
  v19[3] = &__block_descriptor_72_ea8_40c63_ZTSNSt3__18functionIFvN9realityio12WrappedRERefIP7REAssetEEEEE_e5_v8__0l;
  v19[4] = this;
  v8 = v20;
  v9 = (uint64_t)v23;
  if (!v23)
    goto LABEL_4;
  if (v23 != v22)
  {
    v9 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v23 + 16))(v23, v3, v4, v5, v6);
LABEL_4:
    v21 = (_BYTE *)v9;
    goto LABEL_6;
  }
  v21 = v20;
  (*(void (**)(_QWORD *, _BYTE *))(v22[0] + 24))(v22, v20);
LABEL_6:
  dispatch_async(v7, v19);

  v14 = (char *)this[27];
  this[27] = 0;
  if (v14 == v2)
  {
    v15 = 4;
    v14 = v2;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v15 = 5;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 8 * v15))(v14, v10, v11, v12, v13);
LABEL_11:
  if (v21 == v20)
  {
    v16 = 4;
  }
  else
  {
    if (!v21)
      goto LABEL_16;
    v16 = 5;
    v8 = v21;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v16))(v8);
LABEL_16:
  result = v23;
  if (v23 == v22)
  {
    v18 = 4;
    result = v22;
  }
  else
  {
    if (!v23)
      return result;
    v18 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v18))(result, v10, v11, v12, v13);
}

void sub_2301A2010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  void *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == &a18)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *`non-virtual thunk to'realityio::`anonymous namespace'::StandaloneAsync::onComplete(uint64_t a1)
{
}

uint64_t ___ZN9realityio12_GLOBAL__N_115StandaloneAsync29performBlockSyncOnEngineQueueENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  ++*(_QWORD *)(v1 + 184);
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  --*(_QWORD *)(v1 + 184);
  return result;
}

uint64_t __copy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_2301A214C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c63_ZTSNSt3__18functionIFvN9realityio12WrappedRERefIP7REAssetEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_ea8_40c63_ZTSNSt3__18functionIFvN9realityio12WrappedRERefIP7REAssetEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24FDFC700;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24FDFC700;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
      JUMPOUT(0x2348B4E1CLL);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

_QWORD *std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x38uLL);
  *v2 = &off_24FDFC700;
  std::__compressed_pair_elem<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_2301A22B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFC700;
  return std::__compressed_pair_elem<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0 const&,0ul>(a2 + 1, (_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::destroy(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  operator delete(a1);
}

_QWORD *std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v6 = v3;
  v7 = v3;
  *a2 = 0;
  if (v3)
    RERetain();
  v4 = *(_QWORD *)(a1 + 48);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v7);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v7);
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
}

void sub_2301A23F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0 const&,0ul>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

void sub_2301A24B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN9realityio16AssetLoadTracker5Asset10setTrackerEPS0__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  realityio *v3;
  NSObject *v4;
  _BOOL8 v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)(v2 + 8));
  v3 = (realityio *)(**(uint64_t (***)(uint64_t))v1)(v1);
  *(_BYTE *)(v1 + 16) = 1;
  ++*(_DWORD *)(v2 + 96);
  v4 = *(NSObject **)(realityio::logObjects(v3) + 16);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (v5)
  {
    v7 = *(_QWORD *)(v1 + 8);
    v8 = *(_DWORD *)(v2 + 96);
    v9 = (uint64_t)(*(_QWORD *)(v2 + 80) - *(_QWORD *)(v2 + 72)) >> 4;
    v10 = 134218496;
    v11 = v7;
    v12 = 1024;
    v13 = v8;
    v14 = 2048;
    v15 = v9;
    _os_log_debug_impl(&dword_22FF26000, v4, OS_LOG_TYPE_DEBUG, "AssetLoadTracker::complete @ %p -- assets completed: %d / %zu\n", (uint8_t *)&v10, 0x1Cu);
  }
  if (*(_DWORD *)(v2 + 96) == (uint64_t)(*(_QWORD *)(v2 + 80) - *(_QWORD *)(v2 + 72)) >> 4)
  {
    v6 = *(NSObject **)(realityio::logObjects((realityio *)v5) + 16);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_22FF26000, v6, OS_LOG_TYPE_DEFAULT, "AssetLoadTracker::complete - onComplete\n", (uint8_t *)&v10, 2u);
    }
    *(_DWORD *)(v2 + 100) = 2;
    (**(void (***)(uint64_t))v2)(v2);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 8));
}

void sub_2301A2640(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::AssetLoadTracker::add(uint64_t a1, __int128 *a2)
{
  std::recursive_mutex *v4;

  v4 = (std::recursive_mutex *)(a1 + 8);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 8));
  std::vector<std::shared_ptr<realityio::AssetLoadTracker::Asset>>::push_back[abi:ne180100]((char **)(a1 + 72), a2);
  std::recursive_mutex::unlock(v4);
}

void sub_2301A26A0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::AssetLoadTracker::loadAssets(uint64_t a1, uint64_t a2, int a3)
{
  std::recursive_mutex *v5;
  realityio *v6;
  NSObject *v7;
  uint64_t RequestAddAsset;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssetRequest;
  uint64_t ServiceLocator;
  NSObject *v17;
  __int128 buf;
  void (*v19)(uint64_t);
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = (std::recursive_mutex *)(a1 + 8);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 8));
  *(_DWORD *)(a1 + 100) = 1;
  v7 = *(NSObject **)(realityio::logObjects(v6) + 16);
  RequestAddAsset = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)RequestAddAsset)
  {
    v9 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v9;
    _os_log_impl(&dword_22FF26000, v7, OS_LOG_TYPE_DEFAULT, "AssetLoadTracker::loadAssets -- asset count = %zu\n", (uint8_t *)&buf, 0xCu);
  }
  v10 = *(uint64_t **)(a1 + 72);
  v11 = *(uint64_t **)(a1 + 80);
  if (v10 == v11)
    goto LABEL_14;
  v12 = a3;
  v13 = MEMORY[0x24BDAC760];
  do
  {
    v14 = *v10;
    *(_QWORD *)(*v10 + 24) = a1;
    REAssetGetAssetManager();
    AssetRequest = REAssetManagerCreateAssetRequest();
    if (*(_QWORD *)(v14 + 32))
      RERelease();
    *(_QWORD *)(v14 + 32) = AssetRequest;
    *(_QWORD *)&buf = v13;
    *((_QWORD *)&buf + 1) = 3221225472;
    v19 = ___ZN9realityio16AssetLoadTracker5Asset10setTrackerEPS0__block_invoke;
    v20 = &__block_descriptor_40_e8_v12__0B8l;
    v21 = v14;
    REAssetLoadRequestSetCompletionHandler();
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
    RequestAddAsset = REAssetLoadRequestAddAsset();
    v10 += 2;
  }
  while (v10 != v11);
  if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 72))
  {
LABEL_14:
    v17 = *(NSObject **)(realityio::logObjects((realityio *)RequestAddAsset) + 16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_22FF26000, v17, OS_LOG_TYPE_DEFAULT, "AssetLoadTracker::loadAssets - onComplete due to zero-size asset list\n", (uint8_t *)&buf, 2u);
    }
    *(_DWORD *)(a1 + 100) = 2;
    (**(void (***)(uint64_t))a1)(a1);
  }
  else if (*(_DWORD *)(a1 + 100) != 2 && v12)
  {
    ServiceLocator = REEngineGetServiceLocator();
    MEMORY[0x2348B1264](ServiceLocator);
    while (*(_DWORD *)(a1 + 100) == 1)
      REAssetManagerUpdate();
  }
  std::recursive_mutex::unlock(v5);
}

void sub_2301A28E8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::AssetLoadTracker::clear(realityio::AssetLoadTracker *this)
{
  std::recursive_mutex *v2;
  uint64_t i;
  uint64_t v4;

  v2 = (std::recursive_mutex *)((char *)this + 8);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 8));
  v4 = *((_QWORD *)this + 9);
  for (i = *((_QWORD *)this + 10);
        i != v4;
  *((_QWORD *)this + 10) = v4;
  *((_QWORD *)this + 12) = 0;
  std::recursive_mutex::unlock(v2);
}

void realityio::mtlx::UsdMtlxRead(uint64_t *a1, char **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  realityio::mtlx::_anonymous_namespace_ *v23;
  realityio::mtlx::_anonymous_namespace_ *v24;
  pxrInternal__aapl__pxrReserved__::UsdStage *v25;
  unsigned int *v26;
  unsigned int v27;
  pxrInternal__aapl__pxrReserved__::UsdStage *v28;
  uint64_t *ActiveColorSpace;
  uint64_t v30;
  unint64_t *v31;
  pxrInternal__aapl__pxrReserved__::TfToken *Data;
  _QWORD *v33;
  pxrInternal__aapl__pxrReserved__::UsdStage *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t *v40;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer first;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin;
  uint64_t **v43;
  char *v44;
  __int128 *v45;
  char *v46;
  _OWORD *v47;
  const char *v48;
  _QWORD *v49;
  std::string::size_type size;
  std::string *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  char IsValid;
  char v56;
  const char *v57;
  char *v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::string::size_type v69;
  std::__shared_weak_count *v70;
  _OWORD *v71;
  char *v72;
  __int128 *v73;
  char *v74;
  uint64_t **v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  std::string *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *p_size;
  unint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  RIO_MTLX *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unsigned __int8 *v105;
  std::string **v106;
  std::string::size_type v107;
  uint64_t v108;
  const char *v109;
  std::string::__raw *v110;
  std::string *v111;
  __int128 *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t *v128;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer *v129;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v130;
  uint64_t **v131;
  std::pair<std::string, std::string> *v132;
  unsigned int *v133;
  unsigned int v134;
  void *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  std::string *v139;
  std::string *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::string *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  RIO_MTLX *v153;
  unsigned __int8 *v154;
  RIO_MTLX *v155;
  unsigned __int8 *v156;
  RIO_MTLX *v157;
  unsigned __int8 *v158;
  RIO_MTLX *v159;
  unsigned __int8 *v160;
  std::string *v161;
  uint64_t *v162;
  std::string *v163;
  uint64_t **v164;
  void **v165;
  const void **v166;
  _QWORD *v167;
  char *v168;
  __int128 v169;
  unsigned int *v170;
  unsigned int v171;
  uint64_t *v172;
  std::string *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::string *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int v185;
  RIO_MTLX *v186;
  unsigned __int8 *v187;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v188;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer i;
  realityio::mtlx::_anonymous_namespace_ *v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int *v193;
  unsigned int v194;
  const char *v195;
  _QWORD *v196;
  std::string::size_type v197;
  RIO_MTLX *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  realityio::mtlx::_anonymous_namespace_ *v206;
  __int128 *v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  __int128 *v212;
  __int128 *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  const void **v217;
  uint64_t *v218;
  __int128 *v219;
  __int128 *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  const void **v224;
  uint64_t *v225;
  char *v226;
  std::string *v227;
  uint64_t *v228;
  uint64_t *v229;
  std::string::size_type v230;
  std::string::size_type v231;
  uint64_t v232;
  unint64_t v233;
  int64_t v234;
  unint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  _QWORD *v239;
  std::string::size_type v240;
  std::string::size_type v241;
  __int128 v242;
  int64x2_t v243;
  std::string::size_type v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::string::size_type v248;
  uint64_t *j;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  void **v253;
  void **v254;
  const void **v255;
  void *v256;
  uint64_t *v257;
  std::string *v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v269;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer *p_begin;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer *v271;
  const void **v272;
  _QWORD *v273;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v274;
  uint64_t *v275;
  std::string *v276;
  __int128 v277;
  std::string::value_type *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t **v283;
  uint64_t **v284;
  const void **v285;
  uint64_t *v286;
  uint64_t *v287;
  std::string *v288;
  __int128 v289;
  std::string::size_type v290;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v291;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer end;
  std::string *v293;
  __int128 v294;
  std::string *v295;
  RIO_MTLX *v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  uint64_t *v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  const void **v315;
  unsigned __int8 *v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  char *v323;
  char *v324;
  std::pair<std::string, std::string> *v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  RIO_MTLX *v330;
  uint64_t *v331;
  RIO_MTLX *v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t *v335;
  char *v336;
  char *v337;
  unint64_t *v338;
  unint64_t *v339;
  unint64_t v340;
  unsigned int *v341;
  unsigned int v342;
  realityio::mtlx::_anonymous_namespace_ *v343;
  RIO_MTLX::Element *v344;
  uint64_t **v345;
  const void **v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t *v349;
  const void **v350;
  _BOOL4 v351;
  uint64_t *v352;
  const void **v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  uint64_t **v357;
  std::string *v358;
  unsigned __int8 **v359;
  unint64_t v360;
  uint64_t v361;
  std::string *v362;
  std::string *v363;
  std::string *v364;
  int v365;
  std::string *v366;
  std::string *v367;
  void **p_data;
  __int128 v369;
  unsigned int *v370;
  unsigned int v371;
  std::pair<std::string, std::string> *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v375;
  __int128 *v376;
  __int128 *v377;
  std::string *kk;
  uint64_t **v379;
  char *v380;
  char *v381;
  uint64_t **v382;
  uint64_t v383;
  unsigned int *v384;
  unsigned int v385;
  std::string::size_type v386;
  uint64_t *v387;
  unsigned int *v388;
  unsigned int v389;
  uint64_t v390;
  unsigned int *v391;
  unsigned int v392;
  pxrInternal__aapl__pxrReserved__::UsdStage *v393;
  unsigned int *v394;
  unsigned int v395;
  int mm;
  std::string *v397;
  __int128 v398;
  int v399;
  unsigned int *v400;
  unsigned int v401;
  std::string *v402;
  __int128 v403;
  void *v404;
  unint64_t *v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t *v408;
  unsigned int *v409;
  unsigned int v410;
  uint64_t *ActiveGeomPrefix;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *v412;
  std::string *v413;
  std::string *v414;
  const void **v415;
  unsigned int *v416;
  unsigned int v417;
  uint64_t v418;
  unsigned int *v419;
  unsigned int v420;
  unsigned int *v421;
  unsigned int v422;
  std::pair<std::string, std::string> *v423;
  unint64_t *v424;
  unint64_t v425;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v426;
  RIO_MTLX::Element *v427;
  uint64_t *v428;
  uint64_t **v429;
  uint64_t **v430;
  unint64_t v431;
  uint64_t *v432;
  RIO_MTLX::Element *v433;
  unint64_t *v434;
  unint64_t v435;
  unsigned int *v436;
  unsigned int v437;
  uint64_t *v438;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v439;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t *v443;
  uint64_t v444;
  unsigned int *v445;
  unsigned int v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  RIO_MTLX *v450;
  std::__shared_weak_count *v451;
  uint64_t *v452;
  unint64_t *v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t *v456;
  std::string::size_type v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  RIO_MTLX *v461;
  unint64_t *v462;
  unint64_t v463;
  void *v464;
  uint64_t *v465;
  std::string::size_type v466;
  std::string::size_type v467;
  __int128 *v468;
  unint64_t *v469;
  unint64_t v470;
  __int128 *v471;
  char *v472;
  int64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  std::pair<std::string, std::string> *v480;
  __int128 *v481;
  uint64_t v482;
  char *v483;
  uint64_t v484;
  __int128 v485;
  __int128 v486;
  __int128 *v487;
  uint64_t v488;
  __int128 v489;
  __int128 v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  std::pair<std::string, std::string> *v494;
  std::pair<std::string, std::string> *v495;
  __int128 v496;
  __int128 v497;
  std::pair<std::string, std::string> *v498;
  uint64_t v499;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  std::pair<std::string, std::string> *v504;
  unint64_t *v505;
  unint64_t v506;
  std::pair<std::string, std::string> *v507;
  std::string *v508;
  unint64_t *v509;
  unint64_t v510;
  char *v511;
  char **v512;
  char **v513;
  unint64_t v514;
  char **v515;
  char **v516;
  unint64_t *v517;
  unint64_t v518;
  uint64_t *v519;
  void **v520;
  char *v521;
  uint64_t v522;
  void *v523;
  char *v524;
  char *v525;
  uint64_t v526;
  uint64_t v527;
  char **v528;
  char *v529;
  char *v530;
  char *v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  realityio::mtlx::_anonymous_namespace_ *v535;
  uint64_t *v536;
  uint64_t *v537;
  uint64_t **v538;
  uint64_t **v539;
  unint64_t v540;
  unint64_t v541;
  uint64_t *v542;
  uint64_t **v543;
  uint64_t v544;
  unint64_t *v545;
  unint64_t v546;
  uint64_t *v547;
  __int128 v548;
  __int128 v549;
  _QWORD *v550;
  unint64_t *v551;
  unint64_t v552;
  _QWORD *v553;
  _QWORD *v554;
  uint64_t v555;
  unint64_t v556;
  uint64_t v557;
  unint64_t v558;
  _OWORD *v559;
  unint64_t *v560;
  unint64_t v561;
  char *v562;
  __int128 v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t **v567;
  char *v568;
  uint64_t *v569;
  const void **v570;
  __int128 v571;
  std::string *v572;
  __int128 v573;
  uint64_t *v574;
  uint64_t **v575;
  uint64_t **v576;
  const void **v577;
  uint64_t *v578;
  uint64_t *v579;
  uint64_t **v580;
  BOOL v581;
  realityio::mtlx::_anonymous_namespace_ *v582;
  __int128 v583;
  std::string::size_type v584;
  const void **n;
  uint64_t *VariantSelections;
  const void **v587;
  _QWORD *v588;
  _QWORD *v589;
  _QWORD *v590;
  _QWORD *v591;
  _BOOL4 v592;
  _QWORD *v593;
  const void **v594;
  uint64_t *v595;
  uint64_t **v596;
  uint64_t **v597;
  uint64_t *v598;
  _BOOL4 v599;
  uint64_t *v600;
  const void **v601;
  uint64_t *v602;
  uint64_t **v603;
  uint64_t v604;
  uint64_t **v605;
  _BOOL4 v606;
  uint64_t **v607;
  unsigned int *v608;
  unsigned int v609;
  std::pair<std::string, std::string> *value;
  unsigned int *v611;
  unsigned int v612;
  unsigned int v613;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v614;
  unsigned int *v615;
  unsigned int v616;
  unsigned int v617;
  std::string *v618;
  unsigned int *v619;
  unsigned int v620;
  unsigned int v621;
  uint64_t v622;
  const void **v623;
  const void **v624;
  _BOOL4 v625;
  uint64_t *v626;
  void **v627;
  void **v628;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *v629;
  __int128 *v630;
  unint64_t *v631;
  unint64_t v632;
  unsigned int *v633;
  unsigned int v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  void **v638;
  void **v639;
  unsigned int *v640;
  unsigned int v641;
  uint64_t *v642;
  uint64_t *v643;
  unsigned int *v644;
  unsigned int v645;
  pxrInternal__aapl__pxrReserved__::UsdStage *v646;
  unsigned int *v647;
  unsigned int v648;
  unsigned int *v649;
  unsigned int v650;
  RIO_MTLX *v651;
  uint64_t v652;
  uint64_t *v653;
  RIO_MTLX::Element **v654;
  RIO_MTLX::Element **v655;
  unint64_t *v656;
  RIO_MTLX::Element *v657;
  unint64_t *v658;
  unint64_t v659;
  char *v660;
  void **v661;
  void **jj;
  void **v663;
  unint64_t v664;
  uint64_t *v665;
  uint64_t *v666;
  unint64_t *v667;
  unint64_t v668;
  realityio::mtlx::_anonymous_namespace_ *v669;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v670;
  RIO_MTLX *v671;
  uint64_t *v672;
  uint64_t v673;
  unsigned __int8 *v674;
  _QWORD *v675;
  void *v676;
  std::__shared_weak_count *v677;
  unint64_t *v678;
  unint64_t v679;
  std::__shared_weak_count *v680;
  unint64_t *v681;
  unint64_t v682;
  std::__shared_weak_count *v683;
  unint64_t *v684;
  unint64_t v685;
  unint64_t *v686;
  unint64_t v687;
  std::__shared_weak_count *v688;
  unint64_t *v689;
  unint64_t v690;
  char *v691;
  char *v692;
  uint64_t v694;
  uint64_t v695;
  std::__shared_weak_count *v696;
  unint64_t *v697;
  unint64_t v698;
  char *v699;
  char *v700;
  uint64_t v701;
  pxrInternal__aapl__pxrReserved__::UsdStage *v702;
  unsigned int *v703;
  unsigned int v704;
  unsigned int *v705;
  unsigned int v706;
  std::__shared_weak_count *v707;
  unint64_t *v708;
  unint64_t v709;
  unsigned __int8 v710;
  unint64_t *v711;
  unint64_t v712;
  uint64_t **v713;
  unint64_t *v714;
  unint64_t v715;
  RIO_MTLX *v716;
  uint64_t *v717;
  uint64_t v718;
  uint64_t v719;
  unsigned int *v720;
  unsigned int v721;
  unsigned int *v722;
  unsigned int v723;
  unsigned int *v724;
  unsigned int v725;
  pxrInternal__aapl__pxrReserved__::UsdStage *v726;
  unsigned int *v727;
  unsigned int v728;
  RIO_MTLX *v729;
  unsigned int *v730;
  unsigned int v731;
  unsigned int v732;
  uint64_t *v733;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer *v734;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer *v735;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v736;
  std::pair<std::string, std::string> *v737;
  unint64_t *v738;
  unint64_t v739;
  void **v740;
  _QWORD *v741;
  void *v742;
  uint64_t *v743;
  unsigned int *v744;
  unsigned int v745;
  unint64_t *v746;
  unint64_t v747;
  pxrInternal__aapl__pxrReserved__ *v748;
  uint64_t UsdPrimAllPrimsPredicate;
  unint64_t v750;
  unint64_t v751;
  std::pair<std::string, std::string> *v752;
  unsigned int *v753;
  unsigned int v754;
  RIO_MTLX *PropertyOrder;
  uint64_t *v756;
  realityio::mtlx::_anonymous_namespace_ *v757;
  RIO_MTLX::Element *v758;
  RIO_MTLX::Element *v759;
  RIO_MTLX *v760;
  uint64_t *v761;
  uint64_t v762;
  std::string *v763;
  std::__shared_weak_count *v764;
  unint64_t *v765;
  unint64_t v766;
  unint64_t *v767;
  unint64_t v768;
  uint64_t *v769;
  uint64_t *v770;
  pxrInternal__aapl__pxrReserved__::TfToken *Path;
  uint64_t EmptyString;
  size_t v773;
  void **v774;
  const void *v775;
  int v776;
  void **v777;
  std::string::size_type v778;
  std::string *v779;
  __int128 v780;
  unsigned int *v781;
  unsigned int v782;
  pxrInternal__aapl__pxrReserved__::UsdStage *v783;
  char v784;
  unsigned int *v785;
  unsigned int v786;
  uint64_t v787;
  unsigned int *v788;
  unsigned int v789;
  unsigned int v790;
  pxrInternal__aapl__pxrReserved__::UsdStage *v791;
  unsigned int *v792;
  unsigned int v793;
  void *v794;
  unsigned int *v795;
  unsigned int v796;
  unsigned int v797;
  std::__shared_weak_count *v798;
  unint64_t *v799;
  unint64_t v800;
  unint64_t *v801;
  unint64_t v802;
  unsigned int *v803;
  unsigned int v804;
  unint64_t v805;
  std::__shared_weak_count *v806;
  unint64_t *v807;
  unint64_t v808;
  uint64_t *v809;
  unint64_t v810;
  _QWORD *v811;
  uint64_t *v812;
  uint64_t v813;
  unsigned int *v814;
  unsigned int v815;
  uint64_t *v816;
  uint64_t *v817;
  uint64_t v818;
  std::string *v819;
  unint64_t *v820;
  unint64_t v821;
  uint64_t *v822;
  uint64_t **v823;
  uint64_t *v824;
  uint64_t **v825;
  unint64_t v826;
  uint64_t **v827;
  _QWORD *v828;
  unsigned int *v829;
  unsigned int v830;
  std::__shared_weak_count *v831;
  unint64_t *v832;
  unint64_t v833;
  unint64_t *v834;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v835;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v836;
  int v837;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v838;
  uint64_t *v839;
  char *v840;
  uint64_t v841;
  unsigned int *v842;
  unsigned int v843;
  char *v844;
  unint64_t *v845;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v846;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v847;
  int v848;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v849;
  uint64_t *v850;
  char *v851;
  uint64_t v852;
  unsigned int *v853;
  unsigned int v854;
  char *v855;
  unsigned int *v856;
  unsigned int v857;
  unsigned int *v858;
  unsigned int v859;
  unsigned int *v860;
  unsigned int v861;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *v862;
  void *v863;
  unsigned int *v864;
  unsigned int v865;
  unsigned int v866;
  _QWORD *v867;
  uint64_t v868;
  unsigned int *v869;
  unsigned int v870;
  unsigned int *v871;
  unsigned int v872;
  unsigned int *v873;
  unsigned int v874;
  char *v875;
  uint64_t *v876;
  uint64_t *v877;
  uint64_t v878;
  uint64_t v879;
  char *v880;
  uint64_t v881;
  unint64_t v882;
  unint64_t v883;
  char *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t *v887;
  uint64_t *v888;
  char *v889;
  uint64_t v890;
  unsigned int *v891;
  unsigned int v892;
  uint64_t *v893;
  char *v894;
  uint64_t v895;
  unsigned int *v896;
  unsigned int v897;
  char *v898;
  char *v899;
  char *v900;
  uint64_t v901;
  char *v902;
  char *v903;
  unint64_t v904;
  char *v905;
  char *v906;
  char *ii;
  unsigned int *v908;
  unsigned int v909;
  unint64_t *v910;
  unint64_t v911;
  std::pair<std::string, std::string> *v912;
  unsigned int *v913;
  unsigned int v914;
  unsigned int v915;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v916;
  unsigned int *v917;
  unsigned int v918;
  unsigned int v919;
  void *v920;
  unsigned int *v921;
  unsigned int v922;
  unsigned int v923;
  unsigned int *v924;
  unsigned int v925;
  unsigned int *v926;
  unsigned int v927;
  unsigned int *v928;
  unsigned int v929;
  unsigned int *v930;
  unsigned int v931;
  uint64_t *v932;
  RIO_MTLX::Element **v933;
  uint64_t v934;
  char v935;
  pxrInternal__aapl__pxrReserved__::SdfPath *v936;
  void *v937;
  uint64_t *v938;
  uint64_t *m;
  char *v942;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *v943;
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *v944;
  std::string::size_type v945;
  uint64_t v946;
  uint64_t *v947;
  uint64_t v948;
  char *v949;
  void *v950;
  char *v951;
  uint64_t (*v952)(void **);
  std::__shared_weak_count *v953;
  char *k;
  RIO_MTLX::Element *v955;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v956;
  std::string::size_type v957;
  std::string *v958;
  std::string::size_type v959;
  char *v960;
  uint64_t *v961;
  pxrInternal__aapl__pxrReserved__::SdfPath *v962[2];
  uint64_t *v963;
  uint64_t *v964;
  _QWORD *v965;
  std::__shared_weak_count *v966;
  void *v967[2];
  uint64_t v968;
  uint64_t v969;
  std::string v970;
  char *v971;
  char *v972;
  uint64_t v973;
  uint64_t *v974;
  uint64_t *v975;
  std::string *v976;
  std::string *v977;
  uint64_t v978;
  uint64_t v979;
  char v980[8];
  unint64_t v981;
  char *v982;
  uint64_t v983;
  uint64_t v984;
  std::__shared_weak_count *v985;
  uint64_t v986;
  std::__shared_weak_count *v987;
  uint64_t v988;
  std::__shared_weak_count *v989;
  char *v990;
  const char *v991;
  uint64_t v992;
  const char *v993;
  char v994[8];
  uint64_t v995;
  uint64_t **v996;
  uint64_t *v997;
  uint64_t v998;
  std::string *__str;
  std::string *v1000;
  unint64_t v1001;
  _QWORD *v1002;
  _QWORD v1003[2];
  uint64_t **v1004;
  uint64_t *v1005;
  _QWORD v1006[2];
  uint64_t v1007;
  uint64_t v1008;
  uint64_t **v1009;
  uint64_t *v1010;
  uint64_t v1011;
  uint64_t **v1012;
  uint64_t *v1013;
  uint64_t v1014;
  uint64_t *v1015;
  _QWORD *v1016;
  uint64_t v1017;
  int __val;
  std::string *v1019;
  std::__shared_weak_count *v1020;
  uint64_t v1021;
  std::string *v1022;
  int v1023;
  int v1024;
  std::pair<std::string, std::string> **v1025;
  std::string *v1026;
  void **v1027;
  uint64_t v1028;
  void *v1029;
  char v1030;
  std::string *v1031;
  uint64_t v1032;
  uint64_t v1033;
  std::string *v1034;
  uint64_t v1035;
  RIO_MTLX::Element *v1036;
  RIO_MTLX::Element *v1037;
  char *v1038;
  char *v1039;
  unint64_t v1040;
  uint64_t *Name;
  uint64_t *v1042;
  std::string v1043;
  uint64_t v1044;
  void *__p[2];
  __int128 v1046;
  uint64_t v1047;
  std::string v1048;
  std::string v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  void *v1054[2];
  _OWORD v1055[2];
  char *v1056;
  __int128 v1057;
  __int128 v1058;
  std::pair<std::string, std::string> *v1059;
  char **v1060;
  char *v1061;
  char *v1062;
  std::__split_buffer<std::pair<std::string, std::string>> v1063;
  _BYTE v1064[32];
  __int128 v1065;
  uint64_t **v1066;
  uint64_t *v1067;
  uint64_t v1068;
  const void **v1069;
  const void **v1070;
  uint64_t v1071;
  char **v1072;
  char *v1073;
  uint64_t v1074;
  uint64_t v1075;

  v1075 = *MEMORY[0x24BDAC8D0];
  if (!*a1)
  {
    v990 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v991 = "UsdMtlxRead";
    v992 = 2344;
    v993 = "void realityio::mtlx::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, const SdfPath &, "
           "const SdfPath &)";
    v994[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    return;
  }
  v6 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const(a2);
  if (!(v7 & 1 | (unint64_t)v6))
  {
    v990 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v991 = "UsdMtlxRead";
    v992 = 2348;
    v993 = "void realityio::mtlx::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, const SdfPath &, "
           "const SdfPath &)";
    v994[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    return;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3) & 1) == 0)
  {
    v990 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v991 = "UsdMtlxRead";
    v992 = 2352;
    v993 = "void realityio::mtlx::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, const SdfPath &, "
           "const SdfPath &)";
    v994[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    return;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a4) & 1) == 0)
  {
    v990 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v991 = "UsdMtlxRead";
    v992 = 2356;
    v993 = "void realityio::mtlx::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, const SdfPath &, "
           "const SdfPath &)";
    v994[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    return;
  }
  v8 = a2[1];
  v990 = *a2;
  v991 = v8;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  MEMORY[0x2348B274C](v1064, "Collections");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1064);
  if ((v1064[0] & 7) != 0)
  {
    v11 = (unsigned int *)(*(_QWORD *)v1064 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  MEMORY[0x2348B274C](v1064, "Looks");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1064);
  if ((v1064[0] & 7) != 0)
  {
    v13 = (unsigned int *)(*(_QWORD *)v1064 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  MEMORY[0x2348B274C](v1064, "Materials");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1064);
  if ((v1064[0] & 7) != 0)
  {
    v15 = (unsigned int *)(*(_QWORD *)v1064 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  MEMORY[0x2348B274C](v1064, "NodeGraphs");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1064);
  if ((v1064[0] & 7) != 0)
  {
    v17 = (unsigned int *)(*(_QWORD *)v1064 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  MEMORY[0x2348B274C](v1064, "Shaders");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1064);
  v936 = a3;
  v961 = (uint64_t *)a2;
  if ((v1064[0] & 7) != 0)
  {
    v19 = (unsigned int *)(*(_QWORD *)v1064 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  __str = 0;
  v998 = 0;
  v997 = 0;
  v996 = &v997;
  v1001 = 0;
  v1000 = 0;
  v1003[0] = 0;
  v1002 = v1003;
  v1006[0] = 0;
  v1005 = 0;
  v1003[1] = 0;
  v1004 = &v1005;
  v1007 = 0;
  v1006[1] = &v1007;
  v1010 = 0;
  v1011 = 0;
  v1008 = 0;
  v1009 = &v1010;
  v1013 = 0;
  v1012 = &v1013;
  v1016 = 0;
  v1017 = 0;
  v1014 = 0;
  v1015 = (uint64_t *)&v1016;
  __val = 1;
  v1019 = 0;
  v1020 = 0;
  *(_DWORD *)v1064 = 1;
  *(_QWORD *)&v1064[8] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)&v1064[24] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v1021 = MEMORY[0x24BEE9D88] + 16;
  if ((v1064[24] & 7) != 0)
  {
    v21 = (unsigned int *)(*(_QWORD *)&v1064[24] & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1064[16]);
  v23 = *(realityio::mtlx::_anonymous_namespace_ **)&v1064[8];
  if (*(_QWORD *)&v1064[8])
    v23 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v1064[8]);
  if (*(char *)(*(_QWORD *)v1064 + 23) < 0)
  {
    if (!*(_QWORD *)(*(_QWORD *)v1064 + 8))
      goto LABEL_39;
  }
  else if (!*(_BYTE *)(*(_QWORD *)v1064 + 23))
  {
    goto LABEL_39;
  }
  v25 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)a2);
  MEMORY[0x2348B2764](v1054, *(_QWORD *)v1064);
  v24 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdStage::SetColorManagementSystem(v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1054);
  if (((uint64_t)v1054[0] & 7) != 0)
  {
    v26 = (unsigned int *)((unint64_t)v1054[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
LABEL_39:
  if ((*((char *)v1054[0] + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v1054[0] + 23))
      goto LABEL_47;
LABEL_43:
    v28 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)a2);
    MEMORY[0x2348B1B64](v1064, v1054[0]);
    pxrInternal__aapl__pxrReserved__::UsdStage::SetColorConfiguration(v28, (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v1064);
    if (SHIBYTE(v1065) < 0)
      operator delete(*(void **)&v1064[24]);
    if ((v1064[23] & 0x80000000) != 0)
      operator delete(*(void **)v1064);
    goto LABEL_47;
  }
  if (*((_QWORD *)v1054[0] + 1))
    goto LABEL_43;
LABEL_47:
  ActiveColorSpace = RIO_MTLX::Element::getActiveColorSpace((RIO_MTLX::Element *)*a1);
  v30 = *((unsigned __int8 *)ActiveColorSpace + 23);
  if ((v30 & 0x80u) != 0)
    v30 = ActiveColorSpace[1];
  if (v30)
  {
    v1054[0] = 0;
    *(_QWORD *)&v1064[8] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy((std::string **)v1064, (uint64_t)ActiveColorSpace);
    v31 = (unint64_t *)MEMORY[0x24BEE7E98];
    Data = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x24BEE7E98]);
    if (!Data)
      Data = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    if ((*((_QWORD *)Data + 5) & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Data);
    v33 = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]();
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(v33, v1064);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v1064);
    v34 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v961);
    v35 = atomic_load(v31);
    if (!v35)
      v35 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    *(_QWORD *)&v1064[8] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>::_PlaceCopy((uint64_t *)v1064, (uint64_t)v1054);
    pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(v34, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v35 + 80), (const pxrInternal__aapl__pxrReserved__::VtValue *)v1064);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v1064);
    ActiveColorSpace = std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)v1054, 0);
  }
  v37 = *a1;
  v36 = (std::__shared_weak_count *)a1[1];
  v988 = *a1;
  v989 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
  }
  v953 = v36;
  v40 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)ActiveColorSpace);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeGraph>(v37, (unsigned __int8 *)v40, (uint64_t)&v1063);
  first = v1063.__first_;
  begin = v1063.__begin_;
  if (v1063.__first_ != v1063.__begin_)
  {
    v43 = &v1002;
    v44 = (char *)&v1057 + 4;
    v45 = &v1057;
    v46 = (char *)v1055 + 4;
    v47 = v1055;
    v956 = v1063.__begin_;
    while (1)
    {
      if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
      {
        v49 = (_QWORD *)(first->first.__r_.__value_.__r.__words[0] + 48);
        if (*(char *)(first->first.__r_.__value_.__r.__words[0] + 71) < 0)
          v49 = (_QWORD *)*v49;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Read node graph %s\n", v48, v49);
      }
      v51 = (std::string *)first->first.__r_.__value_.__r.__words[0];
      size = first->first.__r_.__value_.__l.__size_;
      v1049.__r_.__value_.__r.__words[0] = first->first.__r_.__value_.__r.__words[0];
      v1049.__r_.__value_.__l.__size_ = size;
      if (size)
      {
        v52 = (unint64_t *)(size + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v54);
      if (v51)
        v56 = IsValid;
      else
        v56 = 1;
      if ((v56 & 1) != 0)
        goto LABEL_122;
      RIO_MTLX::NodeGraph::getNodeDef(v51, &v1025);
      if (v1025)
        break;
LABEL_117:
      v90 = (std::__shared_weak_count *)v1026;
      if (v1026)
      {
        p_size = &v1026->__r_.__value_.__l.__size_;
        do
          v92 = __ldaxr(p_size);
        while (__stlxr(v92 - 1, p_size));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
LABEL_122:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v45);
      std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(*((_QWORD **)&v1055[1] + 1));
      if ((BYTE8(v1055[0]) & 7) != 0)
      {
        v93 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v94 = __ldxr(v93);
        while (__stlxr(v94 - 2, v93));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v47);
      if (v1054[1])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
      v95 = (std::__shared_weak_count *)v1049.__r_.__value_.__l.__size_;
      if (v1049.__r_.__value_.__l.__size_)
      {
        v96 = (unint64_t *)(v1049.__r_.__value_.__l.__size_ + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      first = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)((char *)first + 16);
      if (first == begin)
        goto LABEL_133;
    }
    if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
    {
      v58 = (char *)(v1025 + 6);
      if (*((char *)v1025 + 71) < 0)
        v58 = *(char **)v58;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add mtlxNodeDef %s\n", v57, v58);
    }
    v59 = (char *)v1025;
    v60 = (std::__shared_weak_count *)v1026;
    if (v1026)
    {
      v61 = &v1026->__r_.__value_.__l.__size_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      do
        v63 = __ldxr(v61);
      while (__stxr(v63 + 1, v61));
    }
    v64 = *(std::__shared_weak_count **)&v1064[8];
    *(_QWORD *)v1064 = v59;
    *(_QWORD *)&v1064[8] = v60;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (v60)
    {
      v67 = (unint64_t *)&v60->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v70 = (std::__shared_weak_count *)v1049.__r_.__value_.__l.__size_;
    v69 = v1049.__r_.__value_.__r.__words[0];
    if (v1049.__r_.__value_.__l.__size_)
    {
      v71 = v47;
      v72 = v46;
      v73 = v45;
      v74 = v44;
      v75 = v43;
      v76 = (unint64_t *)(v1049.__r_.__value_.__l.__size_ + 8);
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
      do
        v78 = __ldxr(v76);
      while (__stxr(v78 + 1, v76));
      v79 = *(std::__shared_weak_count **)&v1064[24];
      *(_QWORD *)&v1064[16] = v69;
      *(_QWORD *)&v1064[24] = v70;
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      do
        v82 = __ldaxr(v76);
      while (__stlxr(v82 - 1, v76));
      v43 = v75;
      v44 = v74;
      v45 = v73;
      v46 = v72;
      v47 = v71;
      begin = v956;
    }
    else
    {
      v70 = *(std::__shared_weak_count **)&v1064[24];
      *(_QWORD *)&v1064[16] = v1049.__r_.__value_.__r.__words[0];
      *(_QWORD *)&v1064[24] = 0;
      if (!v70)
      {
LABEL_108:
        v84 = (std::string *)v1025;
        v85 = (std::__shared_weak_count *)v1026;
        __p[0] = v1025;
        __p[1] = v1026;
        if (v1026)
        {
          v86 = &v1026->__r_.__value_.__l.__size_;
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
        if (v85)
        {
          v88 = (unint64_t *)&v85->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        goto LABEL_117;
      }
      v83 = (unint64_t *)&v70->__shared_owners_;
      do
        v82 = __ldaxr(v83);
      while (__stlxr(v82 - 1, v83));
    }
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
    goto LABEL_108;
  }
LABEL_133:
  *(_QWORD *)v1064 = &v1063;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1064);
  if (v953)
  {
    v99 = (unint64_t *)&v953->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v953->__on_zero_shared)(v953);
      std::__shared_weak_count::__release_weak(v953);
    }
  }
  v102 = *a1;
  v101 = a1[1];
  v986 = *a1;
  v987 = (std::__shared_weak_count *)v101;
  if (v101)
  {
    v103 = (unint64_t *)(v101 + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  v105 = (unsigned __int8 *)RIO_MTLX::MATERIAL_TYPE_STRING(v98);
  RIO_MTLX::GraphElement::getNodesOfType((RIO_MTLX *)&v1049, v102, v105);
  v107 = v1049.__r_.__value_.__l.__size_;
  v106 = (std::string **)v1049.__r_.__value_.__r.__words[0];
  if (v1049.__r_.__value_.__r.__words[0] != v1049.__r_.__value_.__l.__size_)
  {
    v937 = (void *)(MEMORY[0x24BEE9DC0] + 16);
    v108 = MEMORY[0x24BEE9D88] + 16;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
      {
        v110 = (std::string::__raw *)&(*v106)[2];
        if (SHIBYTE((*v106)[2].__r_.__value_.__r.__words[2]) < 0)
          v110 = (std::string::__raw *)v110->__words[0];
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding mtlxMaterial '%s'\n", v109, v110);
      }
      v111 = *v106;
      v976 = *v106;
      v112 = (__int128 *)v106[1];
      v977 = (std::string *)v112;
      if (v112)
      {
        v113 = (unint64_t *)v112 + 1;
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      if (!v1022
        || (v1022[2].__r_.__value_.__s.__data_[9] & 8) != 0
        || !(*(unsigned int (**)(uint64_t *))(v1021 + 32))(&v1021)
        || (*(_QWORD *)v1064 = "CoreRealityIO/mtlxToUsdShade.cpp",
            *(_QWORD *)&v1064[8] = "BeginMaterial",
            *(_QWORD *)&v1064[16] = 1357,
            *(_QWORD *)&v1064[24] = "UsdShadeMaterial realityio::mtlx::(anonymous namespace)::_Context::BeginMaterial(con"
                                    "st mx::ConstNodePtr &)",
            LOBYTE(v1065) = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper() & 1) != 0))
      {
        *(_QWORD *)v1064 = v111;
        *(_QWORD *)&v1064[8] = v112;
        if (v112)
        {
          v115 = (unint64_t *)v112 + 1;
          do
            v116 = __ldxr(v115);
          while (__stxr(v116 + 1, v115));
        }
        if (v111)
        else
          v1054[0] = 0;
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v994, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1054);
        if (((uint64_t)v1054[0] & 7) != 0)
        {
          v117 = (unsigned int *)((unint64_t)v1054[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v118 = __ldxr(v117);
          while (__stlxr(v118 - 2, v117));
          v112 = *(__int128 **)&v1064[8];
        }
        if (v112)
        {
          v119 = (unint64_t *)v112 + 1;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            (*(void (**)(__int128 *))(*(_QWORD *)v112 + 16))(v112);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v112);
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define();
        if (v1026
          && (v1026[2].__r_.__value_.__s.__data_[9] & 8) == 0
          && ((unsigned int (*)(std::pair<std::string, std::string> ***))v1025[4])(&v1025))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v1064, (uint64_t *)&v1026, &v1027);
          v121 = (std::__shared_weak_count *)v977;
          v1054[0] = v976;
          v1054[1] = v977;
          if (v977)
          {
            v122 = &v977->__r_.__value_.__l.__size_;
            do
              v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
          }
          if (v121)
          {
            v124 = (unint64_t *)&v121->__shared_owners_;
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
          if ((v1064[24] & 7) != 0)
          {
            v126 = (unsigned int *)(*(_QWORD *)&v1064[24] & 0xFFFFFFFFFFFFFFF8);
            do
              v127 = __ldxr(v126);
            while (__stlxr(v127 - 2, v126));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1064[16]);
          if (*(_QWORD *)&v1064[8])
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v1064[8]);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          *((_QWORD *)&v1055[0] + 1) = 0;
          v1054[0] = v937;
          *(_QWORD *)v1064 = v976 + 2;
          v128 = std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v1015, (const void **)&v976[2].__r_.__value_.__l.__data_, (__int128 **)v1064);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          v129 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer *)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)(v128 + 7), v967, (const void **)__p);
          v130 = *v129;
          if (!*v129)
          {
            v131 = (uint64_t **)v129;
            v132 = (std::pair<std::string, std::string> *)operator new(0x58uLL);
            v1063.__first_ = v132;
            v1063.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)(v128 + 8);
            LOBYTE(v1063.__end_) = 0;
            *(_OWORD *)&v132->second.__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
            v132[1].first.__r_.__value_.__r.__words[0] = v1046;
            __p[1] = 0;
            __p[0] = 0;
            *(_QWORD *)&v1046 = 0;
            *(_DWORD *)v1064 = 1;
            *(_QWORD *)&v1064[8] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            *(_QWORD *)&v1064[24] = 0;
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v132[1].second.__r_.__value_.__l.__size_ = 0;
            v132[1].first.__r_.__value_.__l.__size_ = MEMORY[0x24BEE9DC0] + 16;
            if ((v1064[24] & 7) != 0)
            {
              v133 = (unsigned int *)(*(_QWORD *)&v1064[24] & 0xFFFFFFFFFFFFFFF8);
              do
                v134 = __ldxr(v133);
              while (__stlxr(v134 - 2, v133));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1064[16]);
            if (*(_QWORD *)&v1064[8])
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v1064[8]);
            LOBYTE(v1063.__end_) = 1;
            v130 = v1063.__first_;
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)v128 + 7, (uint64_t)v967[0], v131, (uint64_t *)v1063.__first_);
            v1063.__first_ = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,void *>>>>::reset[abi:ne180100]((uint64_t)&v1063);
          }
          v135 = v1054[1];
          if (v1054[1])
          {
            v136 = (unint64_t *)((char *)v1054[1] + 48);
            do
              v137 = __ldxr(v136);
            while (__stxr(v137 + 1, v136));
          }
          v138 = v130[1].first.__r_.__value_.__r.__words[2];
          v130[1].first.__r_.__value_.__r.__words[2] = (std::string::size_type)v135;
          if (v138)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v138);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v130[1].second, v1055);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v130[1].second.__r_.__value_.__r.__words + 4, (_DWORD *)v1055 + 1);
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v130[1].second.__r_.__value_.__l.__size_, (_QWORD *)v1055 + 1);
          if (SBYTE7(v1046) < 0)
            operator delete(__p[0]);
          MEMORY[0x2348B2350](v1054);
          v140 = v976;
          v139 = v977;
          if (v977)
          {
            v141 = &v977->__r_.__value_.__l.__size_;
            do
              v142 = __ldxr(v141);
            while (__stxr(v142 + 1, v141));
          }
          v143 = v1020;
          v1019 = v140;
          v1020 = (std::__shared_weak_count *)v139;
          if (v143)
          {
            v144 = (unint64_t *)&v143->__shared_owners_;
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
          }
          v146 = v1026;
          if (v1026)
          {
            v147 = (unint64_t *)&v1026[2];
            do
              v148 = __ldxr(v147);
            while (__stxr(v148 + 1, v147));
          }
          v149 = (uint64_t)v1022;
          v1022 = v146;
          if (v149)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v149);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v1023, &v1027);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v1024, (_DWORD *)&v1027 + 1);
        }
        MEMORY[0x2348B20B0](&v1025);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1048);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v1043.__r_.__value_.__r.__words[0] = v108;
      v150 = (std::__shared_weak_count *)v977;
      if (v977)
      {
        v151 = &v977->__r_.__value_.__l.__size_;
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      if (v1043.__r_.__value_.__l.__size_
        && (*(_BYTE *)(v1043.__r_.__value_.__l.__size_ + 57) & 8) == 0
        && (v153 = (RIO_MTLX *)(*(uint64_t (**)(std::string *))(v1043.__r_.__value_.__r.__words[0] + 32))(&v1043),
            (_DWORD)v153))
      {
        v154 = (unsigned __int8 *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING(v153);
        v156 = (unsigned __int8 *)RIO_MTLX::VOLUME_SHADER_TYPE_STRING(v155);
        v158 = (unsigned __int8 *)RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(v157);
        v160 = (unsigned __int8 *)RIO_MTLX::LIGHT_SHADER_TYPE_STRING(v159);
        if (v1022
          && (v1022[2].__r_.__value_.__s.__data_[9] & 8) == 0
          && ((*(uint64_t (**)(uint64_t *))(v1021 + 32))(&v1021) & 1) != 0
          || (*(_QWORD *)v1064 = "CoreRealityIO/mtlxToUsdShade.cpp",
              *(_QWORD *)&v1064[8] = "EndMaterial",
              *(_QWORD *)&v1064[16] = 1375,
              *(_QWORD *)&v1064[24] = "void realityio::mtlx::(anonymous namespace)::_Context::EndMaterial()",
              LOBYTE(v1065) = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper() & 1) != 0))
        {
          v161 = v1019;
          v162 = v1005;
          v163 = v1019 + 2;
          v164 = &v1005;
          v165 = (void **)&v1005;
          if (!v1005)
            goto LABEL_236;
          v165 = (void **)&v1005;
          while (1)
          {
            while (1)
            {
              v164 = (uint64_t **)v162;
              v166 = (const void **)(v162 + 4);
              if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v1006, (const void **)&v163->__r_.__value_.__l.__data_, (const void **)v162 + 4))break;
              v162 = *v164;
              v165 = (void **)v164;
              if (!*v164)
                goto LABEL_236;
            }
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v1006, v166, (const void **)&v163->__r_.__value_.__l.__data_))break;
            v165 = (void **)(v164 + 1);
            v162 = v164[1];
            if (!v162)
              goto LABEL_236;
          }
          v167 = *v165;
          if (!*v165)
          {
LABEL_236:
            v168 = (char *)operator new(0x50uLL);
            v1054[0] = v168;
            v1054[1] = &v1005;
            LOBYTE(v1055[0]) = 0;
            if (SHIBYTE(v161[2].__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)(v168 + 32), v161[2].__r_.__value_.__l.__data_, v161[2].__r_.__value_.__l.__size_);
            }
            else
            {
              v169 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
              *((_QWORD *)v168 + 6) = *((_QWORD *)&v163->__r_.__value_.__l + 2);
              *((_OWORD *)v168 + 2) = v169;
            }
            *(_DWORD *)v1064 = 1;
            *(_QWORD *)&v1064[8] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            *(_QWORD *)&v1064[24] = 0;
            *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase() = MEMORY[0x24BEE9D88] + 16;
            if ((v1064[24] & 7) != 0)
            {
              v170 = (unsigned int *)(*(_QWORD *)&v1064[24] & 0xFFFFFFFFFFFFFFF8);
              do
                v171 = __ldxr(v170);
              while (__stlxr(v171 - 2, v170));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1064[16]);
            if (*(_QWORD *)&v1064[8])
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v1064[8]);
            LOBYTE(v1055[0]) = 1;
            v172 = (uint64_t *)v1054[0];
            *(_QWORD *)v1054[0] = 0;
            v172[1] = 0;
            v172[2] = (uint64_t)v164;
            *v165 = v172;
            if (*v1004)
            {
              v1004 = (uint64_t **)*v1004;
              v172 = (uint64_t *)*v165;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v1005, v172);
            ++v1006[0];
            v167 = v1054[0];
            v1054[0] = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,void *>>>>::reset[abi:ne180100]((uint64_t)v1054);
          }
          v173 = v1022;
          if (v1022)
          {
            v174 = (unint64_t *)&v1022[2];
            do
              v175 = __ldxr(v174);
            while (__stxr(v175 + 1, v174));
          }
          v176 = v167[8];
          v167[8] = v173;
          if (v176)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v176);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v167 + 9), &v1023);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v167 + 76, &v1024);
          v177 = v1020;
          v1019 = 0;
          v1020 = 0;
          if (v177)
          {
            v178 = (unint64_t *)&v177->__shared_owners_;
            do
              v179 = __ldaxr(v178);
            while (__stlxr(v179 - 1, v178));
            if (!v179)
            {
              ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
              std::__shared_weak_count::__release_weak(v177);
            }
          }
          *(_DWORD *)v1064 = 1;
          *(_QWORD *)&v1064[8] = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          *(_QWORD *)&v1064[24] = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v1054[0] = (void *)(MEMORY[0x24BEE9D88] + 16);
          v180 = (std::string *)v1054[1];
          if (v1054[1])
          {
            v181 = (unint64_t *)((char *)v1054[1] + 48);
            do
              v182 = __ldxr(v181);
            while (__stxr(v182 + 1, v181));
          }
          v183 = (uint64_t)v1022;
          v1022 = v180;
          if (v183)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v183);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v1023, v1055);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v1024, (_DWORD *)v1055 + 1);
          MEMORY[0x2348B20B0](v1054);
          if ((v1064[24] & 7) != 0)
          {
            v184 = (unsigned int *)(*(_QWORD *)&v1064[24] & 0xFFFFFFFFFFFFFFF8);
            do
              v185 = __ldxr(v184);
            while (__stlxr(v185 - 2, v184));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1064[16]);
          if (*(_QWORD *)&v1064[8])
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v1064[8]);
        }
      }
      else
      {
        *(_QWORD *)v1064 = "CoreRealityIO/mtlxToUsdShade.cpp";
        *(_QWORD *)&v1064[8] = "ReadMaterials";
        *(_QWORD *)&v1064[16] = 2142;
        *(_QWORD *)&v1064[24] = "void realityio::mtlx::(anonymous namespace)::ReadMaterials(mx::ConstDocumentPtr, _Context &)";
        LOBYTE(v1065) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      }
      MEMORY[0x2348B20B0](&v1043);
      v106 += 2;
    }
    while (v106 != (std::string **)v107);
    v102 = v986;
  }
  *(_QWORD *)v1064 = &v1049;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1064);
  v187 = (unsigned __int8 *)RIO_MTLX::MATERIAL_TYPE_STRING(v186);
  RIO_MTLX::GraphElement::getNodesOfType((RIO_MTLX *)&v1063, v102, v187);
  v188 = v1063.__first_;
  for (i = v1063.__begin_;
        v188 != i;
        v188 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)((char *)v188 + 16))
  {
    if (v1026)
    {
      if ((v1026[2].__r_.__value_.__s.__data_[9] & 8) == 0)
      {
        v190 = (realityio::mtlx::_anonymous_namespace_ *)((uint64_t (*)(std::pair<std::string, std::string> ***))v1025[4])(&v1025);
        if ((_DWORD)v190)
        {
          if (*(char *)(v1049.__r_.__value_.__r.__words[0] + 23) < 0)
          {
            if (*(_QWORD *)(v1049.__r_.__value_.__r.__words[0] + 8))
            {
LABEL_279:
              if (__p[1]
                && (*((_BYTE *)__p[1] + 57) & 8) == 0
                && (*((unsigned int (**)(void **))__p[0] + 4))(__p))
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v1054, (uint64_t *)&v1026, &v1027);
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes((pxrInternal__aapl__pxrReserved__::UsdPrim *)v1054);
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p, &v1043);
                MEMORY[0x2348B1ED0](v1064, &v1043, 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1043);
                if ((v1064[24] & 7) != 0)
                {
                  v191 = (unsigned int *)(*(_QWORD *)&v1064[24] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v192 = __ldxr(v191);
                  while (__stlxr(v192 - 2, v191));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1064[16]);
                if (*(_QWORD *)&v1064[8])
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v1064[8]);
                if ((BYTE8(v1055[0]) & 7) != 0)
                {
                  v193 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                  do
                    v194 = __ldxr(v193);
                  while (__stlxr(v194 - 2, v193));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                if (v1054[1])
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
                {
                  v196 = (_QWORD *)(v188->first.__r_.__value_.__r.__words[0] + 48);
                  if (*(char *)(v188->first.__r_.__value_.__r.__words[0] + 71) < 0)
                    v196 = (_QWORD *)*v196;
                  v197 = v1049.__r_.__value_.__r.__words[0];
                  if (*(char *)(v1049.__r_.__value_.__r.__words[0] + 23) < 0)
                    v197 = *(_QWORD *)v1049.__r_.__value_.__l.__data_;
                  pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Material '%s' inherit from  '%s'\n", v195, v196, v197);
                }
              }
              else
              {
                *(_QWORD *)v1064 = "CoreRealityIO/mtlxToUsdShade.cpp";
                *(_QWORD *)&v1064[8] = "ReadMaterials";
                *(_QWORD *)&v1064[16] = 2162;
                *(_QWORD *)&v1064[24] = "void realityio::mtlx::(anonymous namespace)::ReadMaterials(mx::ConstDocumentPtr, _Context &)";
                LOBYTE(v1065) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
              }
              MEMORY[0x2348B20B0](__p);
            }
          }
          else if (*(_BYTE *)(v1049.__r_.__value_.__r.__words[0] + 23))
          {
            goto LABEL_279;
          }
        }
      }
    }
    MEMORY[0x2348B20B0](&v1025);
  }
  *(_QWORD *)v1064 = &v1063;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1064);
  v199 = v987;
  if (v987)
  {
    v200 = (unint64_t *)&v987->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = *a1;
  v203 = RIO_MTLX::EMPTY_STRING(v198);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Look>(v202, (unsigned __int8 *)v203, (uint64_t)v1064);
  v204 = *(_QWORD *)v1064;
  v205 = *(_QWORD *)&v1064[8];
  v1054[0] = v1064;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
  if (v204 != v205)
  {
    v208 = *a1;
    v207 = (__int128 *)a1[1];
    v976 = (std::string *)*a1;
    v977 = (std::string *)v207;
    if (v207)
    {
      v209 = (unint64_t *)v207 + 1;
      do
        v210 = __ldxr(v209);
      while (__stxr(v210 + 1, v209));
    }
    v1054[1] = 0;
    v1054[0] = 0;
    *(_QWORD *)&v1055[0] = 0;
    v212 = *(__int128 **)(v208 + 136);
    v213 = *(__int128 **)(v208 + 144);
    if (v212 == v213)
      goto LABEL_447;
    while (1)
    {
      v214 = *(unsigned __int8 *)(*(_QWORD *)v212 + 47);
      if ((v214 & 0x80u) == 0)
        v215 = *(unsigned __int8 *)(*(_QWORD *)v212 + 47);
      else
        v215 = *(_QWORD *)(*(_QWORD *)v212 + 32);
      v216 = byte_255E55357;
      if (byte_255E55357 < 0)
        v216 = qword_255E55348;
      if (v215 != v216)
        goto LABEL_327;
      v217 = (const void **)(*(_QWORD *)v212 + 24);
      v218 = byte_255E55357 >= 0 ? &qword_255E55340 : (uint64_t *)qword_255E55340;
      if ((v214 & 0x80) == 0)
        break;
      v211 = memcmp(*v217, v218, *(_QWORD *)(*(_QWORD *)v212 + 32));
      if (!(_DWORD)v211)
        goto LABEL_326;
LABEL_327:
      if (++v212 == v213)
      {
        v951 = (char *)v1054[0];
        v949 = (char *)v1054[1];
        if (v1054[0] != v1054[1])
        {
          while (1)
          {
            v1063.__begin_ = 0;
            v1063.__end_ = 0;
            v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v1063.__begin_;
            v1026 = 0;
            v1025 = 0;
            v1027 = 0;
            v220 = *(__int128 **)(*(_QWORD *)v951 + 136);
            v219 = *(__int128 **)(*(_QWORD *)v951 + 144);
            if (v220 == v219)
              goto LABEL_419;
            do
            {
              v221 = *(unsigned __int8 *)(*(_QWORD *)v220 + 47);
              if ((v221 & 0x80u) == 0)
                v222 = *(unsigned __int8 *)(*(_QWORD *)v220 + 47);
              else
                v222 = *(_QWORD *)(*(_QWORD *)v220 + 32);
              v223 = byte_255E55327;
              if (byte_255E55327 < 0)
                v223 = qword_255E55318;
              if (v222 == v223)
              {
                v224 = (const void **)(*(_QWORD *)v220 + 24);
                if (byte_255E55327 >= 0)
                  v225 = &qword_255E55310;
                else
                  v225 = (uint64_t *)qword_255E55310;
                if ((v221 & 0x80) != 0)
                {
                  if (memcmp(*v224, v225, *(_QWORD *)(*(_QWORD *)v220 + 32)))
                    goto LABEL_346;
LABEL_345:
                  std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)&v1025, v220);
                  goto LABEL_346;
                }
                if (!*(_BYTE *)(*(_QWORD *)v220 + 47))
                  goto LABEL_345;
                while (*(unsigned __int8 *)v224 == *(unsigned __int8 *)v225)
                {
                  v224 = (const void **)((char *)v224 + 1);
                  v225 = (uint64_t *)((char *)v225 + 1);
                  if (!--v221)
                    goto LABEL_345;
                }
              }
LABEL_346:
              ++v220;
            }
            while (v220 != v219);
            v226 = (char *)v1025;
            v227 = v1026;
            v958 = v1026;
            while (v226 != (char *)v227)
            {
              __p[1] = 0;
              *(_QWORD *)&v1046 = 0;
              __p[0] = &__p[1];
              memset(&v1049, 0, sizeof(v1049));
              v228 = *(uint64_t **)(*(_QWORD *)v226 + 136);
              v229 = *(uint64_t **)(*(_QWORD *)v226 + 144);
              if (v228 != v229)
              {
                do
                {
                  RIO_MTLX::Element::asA<RIO_MTLX::ValueElement>(*v228, &v1043);
                  if (v1043.__r_.__value_.__r.__words[0])
                  {
                    v230 = v1049.__r_.__value_.__l.__size_;
                    if (v1049.__r_.__value_.__l.__size_ >= v1049.__r_.__value_.__r.__words[2])
                    {
                      v232 = (uint64_t)(v1049.__r_.__value_.__l.__size_ - v1049.__r_.__value_.__r.__words[0]) >> 4;
                      v233 = v232 + 1;
                      if ((unint64_t)(v232 + 1) >> 60)
                        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                      v234 = v1049.__r_.__value_.__r.__words[2] - v1049.__r_.__value_.__r.__words[0];
                      if ((uint64_t)(v1049.__r_.__value_.__r.__words[2] - v1049.__r_.__value_.__r.__words[0]) >> 3 > v233)
                        v233 = v234 >> 3;
                      if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFF0)
                        v235 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v235 = v233;
                      *(_QWORD *)&v1065 = (char *)&v1049.__r_.__value_.__l + 16;
                      v236 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v1049.__r_.__value_.__r.__words[2], v235);
                      v238 = &v236[16 * v232];
                      *(_OWORD *)v238 = *(_OWORD *)&v1043.__r_.__value_.__l.__data_;
                      *(_OWORD *)&v1043.__r_.__value_.__l.__data_ = 0uLL;
                      v239 = (_QWORD *)v1049.__r_.__value_.__l.__size_;
                      v240 = v1049.__r_.__value_.__r.__words[0];
                      if (v1049.__r_.__value_.__l.__size_ == v1049.__r_.__value_.__r.__words[0])
                      {
                        v243 = vdupq_n_s64(v1049.__r_.__value_.__l.__size_);
                        v241 = (std::string::size_type)&v236[16 * v232];
                      }
                      else
                      {
                        v241 = (std::string::size_type)&v236[16 * v232];
                        do
                        {
                          v242 = *((_OWORD *)v239 - 1);
                          v239 -= 2;
                          *(_OWORD *)(v241 - 16) = v242;
                          v241 -= 16;
                          *v239 = 0;
                          v239[1] = 0;
                        }
                        while (v239 != (_QWORD *)v240);
                        v243 = *(int64x2_t *)&v1049.__r_.__value_.__l.__data_;
                      }
                      v231 = (std::string::size_type)(v238 + 16);
                      v1049.__r_.__value_.__r.__words[0] = v241;
                      v1049.__r_.__value_.__l.__size_ = (std::string::size_type)(v238 + 16);
                      *(int64x2_t *)&v1064[8] = v243;
                      v244 = v1049.__r_.__value_.__r.__words[2];
                      v1049.__r_.__value_.__r.__words[2] = (std::string::size_type)&v236[16 * v237];
                      *(_QWORD *)&v1064[24] = v244;
                      *(_QWORD *)v1064 = v243.i64[0];
                      std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)v1064);
                    }
                    else
                    {
                      *(_QWORD *)v1049.__r_.__value_.__l.__size_ = v1043.__r_.__value_.__r.__words[0];
                      *(_QWORD *)(v230 + 8) = v1043.__r_.__value_.__l.__size_;
                      *(_OWORD *)&v1043.__r_.__value_.__l.__data_ = 0uLL;
                      v231 = v230 + 16;
                    }
                    v1049.__r_.__value_.__l.__size_ = v231;
                  }
                  v245 = (std::__shared_weak_count *)v1043.__r_.__value_.__l.__size_;
                  if (v1043.__r_.__value_.__l.__size_)
                  {
                    v246 = (unint64_t *)(v1043.__r_.__value_.__l.__size_ + 8);
                    do
                      v247 = __ldaxr(v246);
                    while (__stlxr(v247 - 1, v246));
                    if (!v247)
                    {
                      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                      std::__shared_weak_count::__release_weak(v245);
                    }
                  }
                  v228 += 2;
                }
                while (v228 != v229);
                v248 = v1049.__r_.__value_.__l.__size_;
                for (j = (uint64_t *)v1049.__r_.__value_.__r.__words[0]; j != (uint64_t *)v248; j += 2)
                {
                  v250 = *j;
                  v251 = *j + 48;
                  v252 = (char *)__p[1];
                  v253 = &__p[1];
                  v254 = &__p[1];
                  if (!__p[1])
                    goto LABEL_383;
                  v253 = &__p[1];
                  while (1)
                  {
                    while (1)
                    {
                      v254 = (void **)v252;
                      v255 = (const void **)(v252 + 32);
                      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v1046, (const void **)v251, (const void **)v252 + 4))break;
                      v252 = (char *)*v254;
                      v253 = v254;
                      if (!*v254)
                        goto LABEL_383;
                    }
                    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v1046, v255, (const void **)v251))
                      break;
                    v253 = v254 + 1;
                    v252 = (char *)v254[1];
                    if (!v252)
                      goto LABEL_383;
                  }
                  v256 = *v253;
                  if (!*v253)
                  {
LABEL_383:
                    v257 = (uint64_t *)operator new(0x48uLL);
                    *(_QWORD *)v1064 = v257;
                    *(_QWORD *)&v1064[8] = &__p[1];
                    v1064[16] = 0;
                    v258 = (std::string *)(v257 + 4);
                    if (*(char *)(v250 + 71) < 0)
                    {
                      std::string::__init_copy_ctor_external(v258, *(const std::string::value_type **)(v250 + 48), *(_QWORD *)(v250 + 56));
                    }
                    else
                    {
                      v259 = *(_OWORD *)v251;
                      v257[6] = *(_QWORD *)(v251 + 16);
                      *(_OWORD *)&v258->__r_.__value_.__l.__data_ = v259;
                    }
                    v257[7] = 0;
                    v257[8] = 0;
                    v1064[16] = 1;
                    *v257 = 0;
                    v257[1] = 0;
                    v257[2] = (uint64_t)v254;
                    *v253 = v257;
                    if (*(_QWORD *)__p[0])
                    {
                      __p[0] = *(void **)__p[0];
                      v257 = (uint64_t *)*v253;
                    }
                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)__p[1], v257);
                    *(_QWORD *)&v1046 = v1046 + 1;
                    v256 = *(void **)v1064;
                    *(_QWORD *)v1064 = 0;
                    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v1064);
                  }
                  v261 = *j;
                  v260 = j[1];
                  if (v260)
                  {
                    v262 = (unint64_t *)(v260 + 8);
                    do
                      v263 = __ldxr(v262);
                    while (__stxr(v263 + 1, v262));
                  }
                  v264 = (std::__shared_weak_count *)*((_QWORD *)v256 + 8);
                  *((_QWORD *)v256 + 7) = v261;
                  *((_QWORD *)v256 + 8) = v260;
                  if (v264)
                  {
                    v265 = (unint64_t *)&v264->__shared_owners_;
                    do
                      v266 = __ldaxr(v265);
                    while (__stlxr(v266 - 1, v265));
                    if (!v266)
                    {
                      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                      std::__shared_weak_count::__release_weak(v264);
                    }
                  }
                }
              }
              *(_QWORD *)v1064 = &v1049;
              std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1064);
              if ((_QWORD)v1046)
              {
                v267 = *(_QWORD *)v226;
                v268 = *(_QWORD *)v226 + 48;
                v269 = v1063.__begin_;
                p_begin = &v1063.__begin_;
                v271 = &v1063.__begin_;
                if (!v1063.__begin_)
                  goto LABEL_409;
                v271 = &v1063.__begin_;
                while (1)
                {
                  while (1)
                  {
                    p_begin = (std::__split_buffer<std::pair<std::string, std::string>>::pointer *)v269;
                    v272 = (const void **)&v269->second.__r_.__value_.__l.__size_;
                    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v1063.__end_, (const void **)v268, (const void **)&v269->second.__r_.__value_.__l.__size_))break;
                    v269 = *p_begin;
                    v271 = p_begin;
                    if (!*p_begin)
                      goto LABEL_409;
                  }
                  if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v1063.__end_, v272, (const void **)v268))break;
                  v271 = p_begin + 1;
                  v269 = p_begin[1];
                  if (!v269)
                    goto LABEL_409;
                }
                v274 = *v271;
                if (!*v271)
                {
LABEL_409:
                  v275 = (uint64_t *)operator new(0x50uLL);
                  *(_QWORD *)v1064 = v275;
                  *(_QWORD *)&v1064[8] = &v1063.__begin_;
                  v1064[16] = 0;
                  v276 = (std::string *)(v275 + 4);
                  if (*(char *)(v267 + 71) < 0)
                  {
                    std::string::__init_copy_ctor_external(v276, *(const std::string::value_type **)(v267 + 48), *(_QWORD *)(v267 + 56));
                  }
                  else
                  {
                    v277 = *(_OWORD *)v268;
                    v275[6] = *(_QWORD *)(v268 + 16);
                    *(_OWORD *)&v276->__r_.__value_.__l.__data_ = v277;
                  }
                  v275[9] = 0;
                  v275[8] = 0;
                  v275[7] = (uint64_t)(v275 + 8);
                  v1064[16] = 1;
                  *v275 = 0;
                  v275[1] = 0;
                  v275[2] = (uint64_t)p_begin;
                  *v271 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v275;
                  if (v1063.__first_->first.__r_.__value_.__r.__words[0])
                  {
                    v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v1063.__first_->first.__r_.__value_.__l.__data_;
                    v275 = (uint64_t *)*v271;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v1063.__begin_, v275);
                  ++v1063.__end_;
                  v274 = *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)v1064;
                  *(_QWORD *)v1064 = 0;
                  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v1064);
                }
                v278 = &v274[1].first.__r_.__value_.__s.__data_[16];
                std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>::destroy((_QWORD *)v274[1].first.__r_.__value_.__r.__words[2]);
                v273 = __p[1];
                v274[1].first.__r_.__value_.__l.__size_ = (std::string::size_type)__p[0];
                v274[1].first.__r_.__value_.__r.__words[2] = (std::string::size_type)v273;
                v279 = v1046;
                v274[1].second.__r_.__value_.__r.__words[0] = v1046;
                if (v279)
                {
                  v273[2] = v278;
                  __p[0] = &__p[1];
                  __p[1] = 0;
                  *(_QWORD *)&v1046 = 0;
                  v273 = 0;
                }
                else
                {
                  v274[1].first.__r_.__value_.__l.__size_ = (std::string::size_type)v278;
                }
              }
              else
              {
                v273 = __p[1];
              }
              std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>::destroy(v273);
              v226 += 16;
              v227 = v958;
            }
LABEL_419:
            *(_QWORD *)v1064 = &v1025;
            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1064);
            if (v1063.__end_)
            {
              v280 = *(_QWORD *)v951;
              v281 = *(_QWORD *)v951 + 48;
              v282 = v997;
              v283 = &v997;
              v284 = &v997;
              if (!v997)
                goto LABEL_429;
              v284 = &v997;
              while (1)
              {
                while (1)
                {
                  v283 = (uint64_t **)v282;
                  v285 = (const void **)(v282 + 4);
                  if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v998, (const void **)v281, (const void **)v282 + 4))break;
                  v282 = *v283;
                  v284 = v283;
                  if (!*v283)
                    goto LABEL_429;
                }
                if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v998, v285, (const void **)v281))
                  break;
                v284 = v283 + 1;
                v282 = v283[1];
                if (!v282)
                  goto LABEL_429;
              }
              v286 = *v284;
              if (!*v284)
              {
LABEL_429:
                v287 = (uint64_t *)operator new(0x50uLL);
                *(_QWORD *)v1064 = v287;
                *(_QWORD *)&v1064[8] = &v997;
                v1064[16] = 0;
                v288 = (std::string *)(v287 + 4);
                if (*(char *)(v280 + 71) < 0)
                {
                  std::string::__init_copy_ctor_external(v288, *(const std::string::value_type **)(v280 + 48), *(_QWORD *)(v280 + 56));
                }
                else
                {
                  v289 = *(_OWORD *)v281;
                  v287[6] = *(_QWORD *)(v281 + 16);
                  *(_OWORD *)&v288->__r_.__value_.__l.__data_ = v289;
                }
                v287[9] = 0;
                v287[8] = 0;
                v287[7] = (uint64_t)(v287 + 8);
                v1064[16] = 1;
                *v287 = 0;
                v287[1] = 0;
                v287[2] = (uint64_t)v283;
                *v284 = v287;
                if (*v996)
                {
                  v996 = (uint64_t **)*v996;
                  v287 = *v284;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v997, v287);
                ++v998;
                v286 = *(uint64_t **)v1064;
                *(_QWORD *)v1064 = 0;
                std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v1064);
              }
              v290 = (std::string::size_type)(v286 + 8);
              std::__tree<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>::destroy((_QWORD *)v286[8]);
              v291 = v1063.__begin_;
              v286[7] = (uint64_t)v1063.__first_;
              v286[8] = (uint64_t)v291;
              end = v1063.__end_;
              v286[9] = (uint64_t)v1063.__end_;
              if (end)
              {
                v291->first.__r_.__value_.__r.__words[2] = v290;
                v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v1063.__begin_;
                v1063.__begin_ = 0;
                v1063.__end_ = 0;
              }
              else
              {
                v286[7] = v290;
              }
              v293 = v1000;
              if ((unint64_t)v1000 >= v1001)
              {
                v295 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__str, (__int128 *)v281);
              }
              else
              {
                if (*(char *)(v280 + 71) < 0)
                {
                  std::string::__init_copy_ctor_external(v1000, *(const std::string::value_type **)(v280 + 48), *(_QWORD *)(v280 + 56));
                }
                else
                {
                  v294 = *(_OWORD *)v281;
                  v1000->__r_.__value_.__r.__words[2] = *(_QWORD *)(v281 + 16);
                  *(_OWORD *)&v293->__r_.__value_.__l.__data_ = v294;
                }
                v295 = v293 + 1;
              }
              v1000 = v295;
            }
            std::__tree<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>::destroy(v1063.__begin_->first.__r_.__value_.__r.__words);
            v951 += 16;
            if (v951 == v949)
            {
              v207 = (__int128 *)v977;
              break;
            }
          }
        }
LABEL_447:
        *(_QWORD *)v1064 = v1054;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1064);
        if (v207)
        {
          v297 = (unint64_t *)v207 + 1;
          do
            v298 = __ldaxr(v297);
          while (__stlxr(v298 - 1, v297));
          if (!v298)
          {
            (*(void (**)(__int128 *))(*(_QWORD *)v207 + 16))(v207);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v207);
          }
        }
        v300 = *a1;
        v299 = a1[1];
        v984 = *a1;
        v985 = (std::__shared_weak_count *)v299;
        if (v299)
        {
          v301 = (unint64_t *)(v299 + 8);
          do
            v302 = __ldxr(v301);
          while (__stxr(v302 + 1, v301));
        }
        v303 = RIO_MTLX::EMPTY_STRING(v296);
        v304 = *(uint64_t **)(v300 + 136);
        v305 = *(uint64_t **)(v300 + 144);
        v1054[1] = 0;
        v1054[0] = 0;
        *(_QWORD *)&v1055[0] = 0;
        if (v304 == v305)
          goto LABEL_500;
        v306 = v303;
        while (1)
        {
          v308 = *v304;
          v307 = v304[1];
          *(_QWORD *)v1064 = *v304;
          *(_QWORD *)&v1064[8] = v307;
          if (v307)
          {
            v309 = (unint64_t *)(v307 + 8);
            do
              v310 = __ldxr(v309);
            while (__stxr(v310 + 1, v309));
          }
          RIO_MTLX::Element::asA<RIO_MTLX::Collection>(v308, &v1063);
          if (!v1063.__first_)
            goto LABEL_478;
          v311 = *((char *)v306 + 23);
          v312 = v306[1];
          if (v311 >= 0)
            v312 = *((unsigned __int8 *)v306 + 23);
          if (v312)
          {
            v313 = *(unsigned __int8 *)(v308 + 47);
            if ((v313 & 0x80u) == 0)
              v314 = *(unsigned __int8 *)(v308 + 47);
            else
              v314 = *(_QWORD *)(v308 + 32);
            if (v314 != v312)
              goto LABEL_478;
            v315 = (const void **)(v308 + 24);
            if (v311 >= 0)
              v316 = (unsigned __int8 *)v306;
            else
              v316 = (unsigned __int8 *)*v306;
            if ((v313 & 0x80) != 0)
            {
              if (memcmp(*v315, v316, *(_QWORD *)(v308 + 32)))
                goto LABEL_478;
            }
            else if (*(_BYTE *)(v308 + 47))
            {
              while (*(unsigned __int8 *)v315 == *v316)
              {
                v315 = (const void **)((char *)v315 + 1);
                ++v316;
                if (!--v313)
                  goto LABEL_477;
              }
              goto LABEL_478;
            }
          }
LABEL_477:
          std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)v1054, (__int128 *)&v1063);
LABEL_478:
          v317 = (std::__shared_weak_count *)v1063.__begin_;
          if (v1063.__begin_)
          {
            v318 = &v1063.__begin_->first.__r_.__value_.__l.__size_;
            do
              v319 = __ldaxr(v318);
            while (__stlxr(v319 - 1, v318));
            if (!v319)
            {
              ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
              std::__shared_weak_count::__release_weak(v317);
            }
          }
          v320 = *(std::__shared_weak_count **)&v1064[8];
          if (*(_QWORD *)&v1064[8])
          {
            v321 = (unint64_t *)(*(_QWORD *)&v1064[8] + 8);
            do
              v322 = __ldaxr(v321);
            while (__stlxr(v322 - 1, v321));
            if (!v322)
            {
              ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
              std::__shared_weak_count::__release_weak(v320);
            }
          }
          v304 += 2;
          if (v304 == v305)
          {
            v323 = (char *)v1054[0];
            v324 = (char *)v1054[1];
            if (v1054[0] != v1054[1])
            {
              do
              {
                v325 = (std::pair<std::string, std::string> *)*((_QWORD *)v323 + 1);
                v1063.__first_ = *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)v323;
                v1063.__begin_ = v325;
                if (v325)
                {
                  v326 = &v325->first.__r_.__value_.__l.__size_;
                  do
                    v327 = __ldxr(v326);
                  while (__stxr(v327 + 1, v326));
                }
                *(_QWORD *)&v1064[8] = 0;
                *(_QWORD *)&v1064[16] = 0;
                *(_QWORD *)v1064 = &v1064[8];
                std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(*(_QWORD **)&v1064[8]);
                MEMORY[0x2348B2038](__p);
                if (v325)
                {
                  v328 = &v325->first.__r_.__value_.__l.__size_;
                  do
                    v329 = __ldaxr(v328);
                  while (__stlxr(v329 - 1, v328));
                  if (!v329)
                  {
                    (*(void (**)(std::pair<std::string, std::string> *))(v325->first.__r_.__value_.__r.__words[0]
                                                                                  + 16))(v325);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v325);
                  }
                }
                v323 += 16;
              }
              while (v323 != v324);
              v935 = 0;
              v300 = v984;
LABEL_501:
              *(_QWORD *)v1064 = v1054;
              std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1064);
              v331 = RIO_MTLX::EMPTY_STRING(v330);
              RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Look>(v300, (unsigned __int8 *)v331, (uint64_t)&Name);
              v333 = Name;
              v938 = v1042;
              if (Name == v1042)
                goto LABEL_690;
              v952 = *(uint64_t (**)(void **))(MEMORY[0x24BEE9D60] + 48);
              v943 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)(MEMORY[0x24BEE9D58] + 16);
LABEL_503:
              v947 = v333;
              v334 = *v333;
              v335 = RIO_MTLX::EMPTY_STRING(v332);
              RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::MaterialAssign>(v334, (unsigned __int8 *)v335, (uint64_t)&v1038);
              v336 = v1038;
              v337 = v1039;
              for (k = v1039; ; v337 = k)
              {
                if (v336 == v337)
                {
                  *(_QWORD *)v1064 = &v1038;
                  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1064);
                  v333 = v947 + 2;
                  if (v947 + 2 == v938)
                  {
LABEL_690:
                    *(_QWORD *)v1064 = &Name;
                    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1064);
                    v451 = v985;
                    v452 = v961;
                    if (v985)
                    {
                      v453 = (unint64_t *)&v985->__shared_owners_;
                      do
                        v454 = __ldaxr(v453);
                      while (__stlxr(v454 - 1, v453));
                      if (!v454)
                      {
                        ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
                        std::__shared_weak_count::__release_weak(v451);
                      }
                    }
                    v983 = 0;
                    v982 = 0;
                    v981 = (unint64_t)&v982;
                    v455 = *a1;
                    v456 = RIO_MTLX::EMPTY_STRING(v450);
                    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Look>(v455, (unsigned __int8 *)v456, (uint64_t)&v1049);
                    v944 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)v1049.__r_.__value_.__l.__size_;
                    v457 = v1049.__r_.__value_.__r.__words[0];
                    if (v1049.__r_.__value_.__r.__words[0] == v1049.__r_.__value_.__l.__size_)
                      goto LABEL_783;
                    while (2)
                    {
                      v1067 = 0;
                      v1068 = 0;
                      memset(v1064, 0, sizeof(v1064));
                      v1065 = 0u;
                      v1070 = 0;
                      v1071 = 0;
                      v1069 = 0;
                      v1073 = 0;
                      v1074 = 0;
                      v1066 = &v1067;
                      v1072 = &v1073;
                      v458 = *(std::__shared_weak_count **)(v457 + 8);
                      v1054[0] = *(void **)v457;
                      v1054[1] = v458;
                      if (v458)
                      {
                        v459 = (unint64_t *)&v458->__shared_owners_;
                        do
                          v460 = __ldxr(v459);
                        while (__stxr(v460 + 1, v459));
                      }
                      if (v458)
                      {
                        v462 = (unint64_t *)&v458->__shared_owners_;
                        do
                          v463 = __ldaxr(v462);
                        while (__stlxr(v463 - 1, v462));
                        if (!v463)
                        {
                          ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
                          std::__shared_weak_count::__release_weak(v458);
                        }
                      }
                      v945 = v457;
                      v464 = *(void **)v457;
                      v465 = RIO_MTLX::EMPTY_STRING(v461);
                      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::MaterialAssign>((uint64_t)v464, (unsigned __int8 *)v465, (uint64_t)&v1043);
                      v466 = v1043.__r_.__value_.__l.__size_;
                      v957 = v1043.__r_.__value_.__l.__size_;
                      v467 = v1043.__r_.__value_.__r.__words[0];
LABEL_705:
                      if (v467 == v466)
                      {
                        v1054[0] = &v1043;
                        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                        std::__tree<std::string>::destroy((uint64_t)&v1072, v1073);
                        v1054[0] = &v1069;
                        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                        std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(v1067);
                        v1054[0] = &v1064[24];
                        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                        v1054[0] = v1064;
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                        v457 = v945 + 16;
                        if ((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)(v945 + 16) != v944)
                          continue;
LABEL_783:
                        *(_QWORD *)v1064 = &v1049;
                        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1064);
                        memset(v1064, 0, sizeof(v1064));
                        v1065 = 0u;
                        v1066 = &v1067;
                        v1067 = 0;
                        v1068 = 0;
                        v1069 = 0;
                        v1070 = 0;
                        v1071 = 0;
                        v1073 = 0;
                        v1074 = 0;
                        v1072 = &v1073;
                        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)v1064, __str, (__int128 *)v1000, 0xAAAAAAAAAAAAAAABLL * (((char *)v1000 - (char *)__str) >> 3));
                        v536 = (uint64_t *)v981;
                        if ((char **)v981 != &v982)
                        {
                          do
                          {
                            v537 = v1067;
                            v538 = &v1067;
                            v539 = &v1067;
                            if (!v1067)
                              goto LABEL_792;
                            v540 = v536[4];
                            do
                            {
                              while (1)
                              {
                                v538 = (uint64_t **)v537;
                                v541 = v537[4];
                                if (v541 <= v540)
                                  break;
                                v537 = *v538;
                                v539 = v538;
                                if (!*v538)
                                  goto LABEL_792;
                              }
                              if (v541 >= v540)
                              {
                                v543 = v538;
                                goto LABEL_799;
                              }
                              v537 = v538[1];
                            }
                            while (v537);
                            v539 = v538 + 1;
LABEL_792:
                            v542 = (uint64_t *)operator new(0x48uLL);
                            v543 = (uint64_t **)v542;
                            v542[4] = v536[4];
                            v544 = v536[5];
                            v542[5] = v544;
                            if (v544)
                            {
                              v545 = (unint64_t *)(v544 + 8);
                              do
                                v546 = __ldxr(v545);
                              while (__stxr(v546 + 1, v545));
                            }
                            v542[8] = 0;
                            v542[7] = 0;
                            v542[6] = (uint64_t)(v542 + 7);
                            *v542 = 0;
                            v542[1] = 0;
                            v542[2] = (uint64_t)v538;
                            *v539 = v542;
                            v547 = v542;
                            if (*v1066)
                            {
                              v1066 = (uint64_t **)*v1066;
                              v547 = *v539;
                            }
                            v535 = (realityio::mtlx::_anonymous_namespace_ *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v1067, v547);
                            ++v1068;
LABEL_799:
                            if (*((char *)v1054[0] + 23) < 0)
                            {
                              std::string::__init_copy_ctor_external((std::string *)&v1063, *(const std::string::value_type **)v1054[0], *((_QWORD *)v1054[0] + 1));
                            }
                            else
                            {
                              v548 = *(_OWORD *)v1054[0];
                              v1063.__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)*((_QWORD *)v1054[0] + 2);
                              *(_OWORD *)&v1063.__first_ = v548;
                            }
                            v549 = *((_OWORD *)v536 + 2);
                            v550 = (_QWORD *)v1065;
                            if ((unint64_t)v1065 >= *((_QWORD *)&v1065 + 1))
                            {
                              v554 = *(_QWORD **)&v1064[24];
                              v555 = (uint64_t)(v1065 - *(_QWORD *)&v1064[24]) >> 4;
                              v556 = v555 + 1;
                              if ((unint64_t)(v555 + 1) >> 60)
                                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                              *(_OWORD *)v962 = *((_OWORD *)v536 + 2);
                              v557 = *((_QWORD *)&v1065 + 1) - *(_QWORD *)&v1064[24];
                              if ((uint64_t)(*((_QWORD *)&v1065 + 1) - *(_QWORD *)&v1064[24]) >> 3 > v556)
                                v556 = v557 >> 3;
                              if ((unint64_t)v557 >= 0x7FFFFFFFFFFFFFF0)
                                v558 = 0xFFFFFFFFFFFFFFFLL;
                              else
                                v558 = v556;
                              if (v558 >> 60)
                                std::__throw_bad_array_new_length[abi:ne180100]();
                              v535 = (realityio::mtlx::_anonymous_namespace_ *)operator new(16 * v558);
                              v559 = (_OWORD *)((char *)v535 + 16 * v555);
                              *v559 = *(_OWORD *)v962;
                              if (v962[1])
                              {
                                v560 = (unint64_t *)((char *)v962[1] + 8);
                                do
                                  v561 = __ldxr(v560);
                                while (__stxr(v561 + 1, v560));
                                v554 = *(_QWORD **)&v1064[24];
                                v550 = (_QWORD *)v1065;
                              }
                              if (v550 == v554)
                              {
                                v553 = v559 + 1;
                                *(_QWORD *)&v1064[24] = (char *)v535 + 16 * v555;
                                *(_QWORD *)&v1065 = v559 + 1;
                                *((_QWORD *)&v1065 + 1) = (char *)v535 + 16 * v558;
                              }
                              else
                              {
                                v562 = (char *)v535 + 16 * v555;
                                do
                                {
                                  v563 = *((_OWORD *)v550 - 1);
                                  v550 -= 2;
                                  *((_OWORD *)v562 - 1) = v563;
                                  v562 -= 16;
                                  *v550 = 0;
                                  v550[1] = 0;
                                }
                                while (v550 != v554);
                                v554 = *(_QWORD **)&v1064[24];
                                v564 = v1065;
                                v553 = v559 + 1;
                                *(_QWORD *)&v1064[24] = v562;
                                *(_QWORD *)&v1065 = v559 + 1;
                                *((_QWORD *)&v1065 + 1) = (char *)v535 + 16 * v558;
                                while ((_QWORD *)v564 != v554)
                                {
                                  v564 -= 16;
                                  v535 = (realityio::mtlx::_anonymous_namespace_ *)std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v564);
                                }
                              }
                              if (v554)
                                operator delete(v554);
                            }
                            else
                            {
                              *(_OWORD *)v1065 = v549;
                              if (*((_QWORD *)&v549 + 1))
                              {
                                v551 = (unint64_t *)(*((_QWORD *)&v549 + 1) + 8);
                                do
                                  v552 = __ldxr(v551);
                                while (__stxr(v552 + 1, v551));
                              }
                              v553 = v550 + 2;
                            }
                            *(_QWORD *)&v1065 = v553;
                            v566 = v536[15];
                            v565 = v536[16];
                            if (v566 != v565)
                            {
                              v567 = v543 + 7;
                              do
                              {
                                v568 = (char *)operator new(0x50uLL);
                                v569 = (uint64_t *)v568;
                                v1054[0] = v568;
                                v1054[1] = v543 + 7;
                                LOBYTE(v1055[0]) = 0;
                                v570 = (const void **)(v568 + 32);
                                if (*(char *)(v566 + 23) < 0)
                                {
                                  std::string::__init_copy_ctor_external((std::string *)(v568 + 32), *(const std::string::value_type **)v566, *(_QWORD *)(v566 + 8));
                                }
                                else
                                {
                                  v571 = *(_OWORD *)v566;
                                  *((_QWORD *)v568 + 6) = *(_QWORD *)(v566 + 16);
                                  *(_OWORD *)v570 = v571;
                                }
                                v572 = (std::string *)(v569 + 7);
                                if (*(char *)(v566 + 47) < 0)
                                {
                                  std::string::__init_copy_ctor_external(v572, *(const std::string::value_type **)(v566 + 24), *(_QWORD *)(v566 + 32));
                                }
                                else
                                {
                                  v573 = *(_OWORD *)(v566 + 24);
                                  v569[9] = *(_QWORD *)(v566 + 40);
                                  *(_OWORD *)&v572->__r_.__value_.__l.__data_ = v573;
                                }
                                LOBYTE(v1055[0]) = 1;
                                v574 = *v567;
                                v575 = v543 + 7;
                                v576 = v543 + 7;
                                if (*v567)
                                {
                                  do
                                  {
                                    while (1)
                                    {
                                      v576 = (uint64_t **)v574;
                                      v577 = (const void **)(v574 + 4);
                                      if (!std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](v570, (const void **)v574 + 4))break;
                                      v574 = *v576;
                                      v575 = v576;
                                      if (!*v576)
                                        goto LABEL_842;
                                    }
                                    if (!std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](v577, v570))goto LABEL_845;
                                    v574 = v576[1];
                                  }
                                  while (v574);
                                  v575 = v576 + 1;
                                }
LABEL_842:
                                *v569 = 0;
                                v569[1] = 0;
                                v569[2] = (uint64_t)v576;
                                *v575 = v569;
                                v578 = (uint64_t *)*v543[6];
                                if (v578)
                                {
                                  v543[6] = v578;
                                  v569 = *v575;
                                }
                                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v543[7], v569);
                                v543[8] = (uint64_t *)((char *)v543[8] + 1);
                                v1054[0] = 0;
LABEL_845:
                                std::unique_ptr<std::__tree_node<std::pair<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::pair<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v1054);
                                v566 += 48;
                              }
                              while (v566 != v565);
                            }
                            if (SHIBYTE(v1063.__end_) < 0)
                              operator delete(v1063.__first_);
                            v579 = (uint64_t *)v536[1];
                            v452 = v961;
                            if (v579)
                            {
                              do
                              {
                                v580 = (uint64_t **)v579;
                                v579 = (uint64_t *)*v579;
                              }
                              while (v579);
                            }
                            else
                            {
                              do
                              {
                                v580 = (uint64_t **)v536[2];
                                v581 = *v580 == v536;
                                v536 = (uint64_t *)v580;
                              }
                              while (!v581);
                            }
                            v536 = (uint64_t *)v580;
                          }
                          while (v580 != (uint64_t **)&v982);
                        }
                        v983 = 0;
                        v981 = (unint64_t)&v982;
                        v982 = 0;
                        v963 = *(uint64_t **)&v1064[24];
                        for (m = (uint64_t *)v1065; v963 != m; v963 += 2)
                        {
                          if (*((char *)v1054[0] + 23) < 0)
                          {
                            std::string::__init_copy_ctor_external(&v1049, *(const std::string::value_type **)v1054[0], *((_QWORD *)v1054[0] + 1));
                          }
                          else
                          {
                            v583 = *(_OWORD *)v1054[0];
                            v1049.__r_.__value_.__r.__words[2] = *((_QWORD *)v1054[0] + 2);
                            *(_OWORD *)&v1049.__r_.__value_.__l.__data_ = v583;
                          }
                          memset(&v1043, 0, sizeof(v1043));
                          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v1043, *(__int128 **)v1064, *(__int128 **)&v1064[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1064[8] - *(_QWORD *)v1064) >> 3));
                          v584 = v1043.__r_.__value_.__l.__size_;
                          v959 = v1043.__r_.__value_.__l.__size_;
                          for (n = (const void **)v1043.__r_.__value_.__r.__words[0]; n != (const void **)v584; n += 3)
                          {
                            v587 = (const void **)*VariantSelections;
                            v964 = VariantSelections + 1;
                            if ((uint64_t *)*VariantSelections != VariantSelections + 1)
                            {
                              do
                              {
                                v588 = v1016;
                                if (v1016)
                                {
                                  v589 = &v1016;
                                  do
                                  {
                                    v590 = v589;
                                    v591 = v588 + 4;
                                    v592 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v1017, (const void **)v588 + 4, (const void **)&v1049.__r_.__value_.__l.__data_);
                                    v593 = v588 + 1;
                                    if (!v592)
                                    {
                                      v593 = v588;
                                      v589 = v588;
                                    }
                                    v588 = (_QWORD *)*v593;
                                  }
                                  while (*v593);
                                  if (v589 != &v1016)
                                  {
                                    v594 = (const void **)(v592 ? v590 + 4 : v591);
                                    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v1017, (const void **)&v1049.__r_.__value_.__l.__data_, v594))
                                    {
                                      v595 = v997;
                                      if (v997)
                                      {
                                        v596 = &v997;
                                        do
                                        {
                                          v597 = v596;
                                          v598 = v595 + 4;
                                          v599 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v998, (const void **)v595 + 4, n);
                                          v600 = v595 + 1;
                                          if (!v599)
                                          {
                                            v600 = v595;
                                            v596 = (uint64_t **)v595;
                                          }
                                          v595 = (uint64_t *)*v600;
                                        }
                                        while (*v600);
                                        if (v596 != &v997)
                                        {
                                          v601 = v599 ? (const void **)(v597 + 4) : (const void **)v598;
                                          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v998, n, v601))
                                          {
                                            v603 = v596 + 8;
                                            v602 = v596[8];
                                            if (v602)
                                            {
                                              v604 = (uint64_t)(v596 + 9);
                                              v605 = v596 + 8;
                                              do
                                              {
                                                v606 = std::less<std::string>::operator()[abi:ne180100](v604, (const void **)v602 + 4, v587 + 7);
                                                v607 = (uint64_t **)(v602 + 1);
                                                if (!v606)
                                                {
                                                  v607 = (uint64_t **)v602;
                                                  v605 = (uint64_t **)v602;
                                                }
                                                v602 = *v607;
                                              }
                                              while (*v607);
                                              if (v605 != v603
                                                && !std::less<std::string>::operator()[abi:ne180100](v604, v587 + 7, (const void **)v605 + 4))
                                              {
                                                pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v1054, (uint64_t *)&__p[1], &v1046);
                                                pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet();
                                                if ((BYTE8(v1055[0]) & 7) != 0)
                                                {
                                                  v608 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                                                  do
                                                    v609 = __ldxr(v608);
                                                  while (__stlxr(v609 - 2, v608));
                                                }
                                                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                                                if (v1054[1])
                                                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                                                if ((pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant() & 1) != 0)
                                                {
                                                  pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection();
                                                  v976 = 0;
                                                  v977 = 0;
                                                  pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext();
                                                  MEMORY[0x2348B1E28](v1054, &v1063);
                                                  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)&v1063.__end_cap_.std::__compressed_pair_elem<std::allocator<std::pair<std::string, std::string>> &, 1, false>);
                                                  value = v1063.__end_cap_.__value_;
                                                  if (v1063.__end_cap_.__value_)
                                                  {
                                                    v611 = (unsigned int *)&v1063.__end_cap_.__value_->first.__r_.__value_.__r.__words[1];
                                                    do
                                                    {
                                                      v612 = __ldxr(v611);
                                                      v613 = v612 - 1;
                                                    }
                                                    while (__stlxr(v613, v611));
                                                    if (!v613)
                                                      (*(void (**)(std::pair<std::string, std::string> *))(value->first.__r_.__value_.__r.__words[0] + 8))(value);
                                                  }
                                                  v614 = v1063.__begin_;
                                                  if (v1063.__begin_)
                                                  {
                                                    v615 = (unsigned int *)&v1063.__begin_->first.__r_.__value_.__r.__words[1];
                                                    do
                                                    {
                                                      v616 = __ldxr(v615);
                                                      v617 = v616 - 1;
                                                    }
                                                    while (__stlxr(v617, v615));
                                                    if (!v617)
                                                      (*(void (**)(std::__split_buffer<std::pair<std::string, std::string>>::pointer))(v614->first.__r_.__value_.__r.__words[0] + 8))(v614);
                                                  }
                                                  v618 = v977;
                                                  if (v977)
                                                  {
                                                    v619 = (unsigned int *)&v977->__r_.__value_.__r.__words[1];
                                                    do
                                                    {
                                                      v620 = __ldxr(v619);
                                                      v621 = v620 - 1;
                                                    }
                                                    while (__stlxr(v621, v619));
                                                    if (!v621)
                                                      (*(void (**)(std::string *))(v618->__r_.__value_.__r.__words[0]
                                                                                            + 8))(v618);
                                                  }
                                                  std::string::basic_string[abi:ne180100]<0>(&v1063, "");
                                                  v623 = (const void **)(v589 + 8);
                                                  v622 = v589[8];
                                                  if (!v622)
                                                    goto LABEL_916;
                                                  v624 = (const void **)(v589 + 8);
                                                  do
                                                  {
                                                    v625 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v589 + 9), (const void **)(v622 + 32), (const void **)&v1063.__first_);
                                                    v626 = (uint64_t *)(v622 + 8);
                                                    if (!v625)
                                                    {
                                                      v626 = (uint64_t *)v622;
                                                      v624 = (const void **)v622;
                                                    }
                                                    v622 = *v626;
                                                  }
                                                  while (*v626);
                                                  if (v624 == v623
                                                    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v589 + 9), (const void **)&v1063.__first_, v624 + 4))
                                                  {
LABEL_916:
                                                    v624 = (const void **)(v589 + 8);
                                                  }
                                                  if (SHIBYTE(v1063.__end_) < 0)
                                                    operator delete(v1063.__first_);
                                                  if (v623 != v624)
                                                  {
                                                    v627 = (void **)v605[7];
                                                    v628 = (void **)(v605 + 8);
                                                    if (v627 != v628)
                                                    {
                                                      v629 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)(v624 + 7);
                                                      do
                                                      {
                                                        v630 = (__int128 *)v627[8];
                                                        v976 = (std::string *)v627[7];
                                                        v977 = (std::string *)v630;
                                                        if (v630)
                                                        {
                                                          v631 = (unint64_t *)v630 + 1;
                                                          do
                                                            v632 = __ldxr(v631);
                                                          while (__stxr(v632 + 1, v631));
                                                        }
                                                        if (((uint64_t)v1063.__end_cap_.__value_ & 7) != 0)
                                                        {
                                                          v633 = (unsigned int *)((unint64_t)v1063.__end_cap_.__value_ & 0xFFFFFFFFFFFFFFF8);
                                                          do
                                                            v634 = __ldxr(v633);
                                                          while (__stlxr(v634 - 2, v633));
                                                        }
                                                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1063.__end_);
                                                        if (v1063.__begin_)
                                                          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1063.__begin_);
                                                        v635 = (std::__shared_weak_count *)v977;
                                                        if (v977)
                                                        {
                                                          v636 = &v977->__r_.__value_.__l.__size_;
                                                          do
                                                            v637 = __ldaxr(v636);
                                                          while (__stlxr(v637 - 1, v636));
                                                          if (!v637)
                                                          {
                                                            ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
                                                            std::__shared_weak_count::__release_weak(v635);
                                                          }
                                                        }
                                                        v638 = (void **)v627[1];
                                                        if (v638)
                                                        {
                                                          do
                                                          {
                                                            v639 = v638;
                                                            v638 = (void **)*v638;
                                                          }
                                                          while (v638);
                                                        }
                                                        else
                                                        {
                                                          do
                                                          {
                                                            v639 = (void **)v627[2];
                                                            v581 = *v639 == v627;
                                                            v627 = v639;
                                                          }
                                                          while (!v581);
                                                        }
                                                        v627 = v639;
                                                      }
                                                      while (v639 != v628);
                                                    }
                                                  }
                                                  MEMORY[0x2348B1E34](v1054);
                                                  pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v1025);
                                                }
                                                else
                                                {
                                                  v1054[0] = "CoreRealityIO/mtlxToUsdShade.cpp";
                                                  v1054[1] = "AddMaterialVariant";
                                                  *(_QWORD *)&v1055[0] = 1556;
                                                  *((_QWORD *)&v1055[0] + 1) = "void realityio::mtlx::(anonymous namespac"
                                                                               "e)::_Context::AddMaterialVariant(const st"
                                                                               "d::string &, const VariantSetName &, cons"
                                                                               "t VariantName &) const";
                                                  LOBYTE(v1055[1]) = 0;
                                                  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p, &v1063);
                                                  pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v1063);
                                                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
                                                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1063);
                                                }
                                                if (v1030 < 0)
                                                  operator delete(v1029);
                                                if ((v1028 & 7) != 0)
                                                {
                                                  v640 = (unsigned int *)(v1028 & 0xFFFFFFFFFFFFFFF8);
                                                  do
                                                    v641 = __ldxr(v640);
                                                  while (__stlxr(v641 - 2, v640));
                                                }
                                                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1027);
                                                if (v1026)
                                                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1026);
                                                MEMORY[0x2348B20B0](__p);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                v642 = (uint64_t *)v587[1];
                                if (v642)
                                {
                                  do
                                  {
                                    v643 = v642;
                                    v642 = (uint64_t *)*v642;
                                  }
                                  while (v642);
                                }
                                else
                                {
                                  do
                                  {
                                    v643 = (uint64_t *)v587[2];
                                    v581 = *v643 == (_QWORD)v587;
                                    v587 = (const void **)v643;
                                  }
                                  while (!v581);
                                }
                                v587 = (const void **)v643;
                              }
                              while (v643 != v964);
                            }
                            v584 = v959;
                          }
                          v1054[0] = &v1043;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                          if (SHIBYTE(v1049.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v1049.__r_.__value_.__l.__data_);
                          v452 = v961;
                        }
                        MEMORY[0x2348B274C](v1054, "Looks");
                        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v936, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1054);
                        if (((uint64_t)v1054[0] & 7) != 0)
                        {
                          v644 = (unsigned int *)((unint64_t)v1054[0] & 0xFFFFFFFFFFFFFFF8);
                          do
                            v645 = __ldxr(v644);
                          while (__stlxr(v645 - 2, v644));
                        }
                        v646 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v452);
                        v1054[0] = 0;
                        pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v646, a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1054);
                        if (((uint64_t)v1054[0] & 7) != 0)
                        {
                          v647 = (unsigned int *)((unint64_t)v1054[0] & 0xFFFFFFFFFFFFFFF8);
                          do
                            v648 = __ldxr(v647);
                          while (__stlxr(v648 - 2, v647));
                        }
                        pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v976);
                        std::string::basic_string[abi:ne180100]<0>(&v1063, "LookVariant");
                        pxrInternal__aapl__pxrReserved__::UsdVariantSets::AddVariantSet();
                        if (SHIBYTE(v1063.__end_) < 0)
                          operator delete(v1063.__first_);
                        if ((BYTE8(v1055[0]) & 7) != 0)
                        {
                          v649 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                          do
                            v650 = __ldxr(v649);
                          while (__stlxr(v650 - 2, v649));
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                        v651 = (RIO_MTLX *)v1054[1];
                        if (v1054[1])
                          v651 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                        v652 = *a1;
                        v653 = RIO_MTLX::EMPTY_STRING(v651);
                        RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Look>(v652, (unsigned __int8 *)v653, (uint64_t)&v974);
                        v654 = (RIO_MTLX::Element **)v974;
                        v932 = v975;
                        if (v974 == v975)
                          goto LABEL_1436;
                        v934 = MEMORY[0x24BEE9D58] + 16;
                        v946 = MEMORY[0x24BEE9D60] + 16;
                        v950 = (void *)(MEMORY[0x24BEE9D88] + 16);
                        while (2)
                        {
                          v971 = 0;
                          v972 = 0;
                          v973 = 0;
                          v1054[1] = 0;
                          *(_QWORD *)&v1055[0] = 0;
                          v1054[0] = &v1054[1];
                          v655 = v654;
                          RIO_MTLX::Element::getDocument(*v654, &v1063);
                          v657 = *v655;
                          v656 = (unint64_t *)v655[1];
                          v933 = v655;
                          __p[0] = *v655;
                          __p[1] = v656;
                          if (v656)
                          {
                            v658 = v656 + 1;
                            do
                              v659 = __ldxr(v658);
                            while (__stxr(v659 + 1, v658));
                          }
LABEL_1027:
                          if (!v657)
                          {
                            v688 = (std::__shared_weak_count *)__p[1];
                            if (__p[1])
                            {
                              v689 = (unint64_t *)((char *)__p[1] + 8);
                              do
                                v690 = __ldaxr(v689);
                              while (__stlxr(v690 - 1, v689));
                              if (!v690)
                              {
                                ((void (*)(std::__shared_weak_count *))v688->__on_zero_shared)(v688);
                                std::__shared_weak_count::__release_weak(v688);
                              }
                            }
                            v691 = v971;
                            v692 = v972 - 16;
                            if (v971 != v972 && v692 > v971)
                            {
                              do
                              {
                                v694 = *(_QWORD *)v691;
                                *(_QWORD *)v691 = *(_QWORD *)v692;
                                *(_QWORD *)v692 = v694;
                                v695 = *((_QWORD *)v691 + 1);
                                *((_QWORD *)v691 + 1) = *((_QWORD *)v692 + 1);
                                *((_QWORD *)v692 + 1) = v695;
                                v691 += 16;
                                v692 -= 16;
                              }
                              while (v691 < v692);
                            }
                            v696 = (std::__shared_weak_count *)v1063.__begin_;
                            if (v1063.__begin_)
                            {
                              v697 = &v1063.__begin_->first.__r_.__value_.__l.__size_;
                              do
                                v698 = __ldaxr(v697);
                              while (__stlxr(v698 - 1, v697));
                              if (!v698)
                              {
                                ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
                                std::__shared_weak_count::__release_weak(v696);
                              }
                            }
                            std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy((_QWORD *)v1054[1]);
                            v699 = v971;
                            v700 = v972;
                            v942 = v972;
                            while (2)
                            {
                              if (v699 != v700)
                              {
                                v960 = v699;
                                v701 = *(_QWORD *)v699;
                                if (*(char *)(v701 + 71) < 0)
                                  std::string::__init_copy_ctor_external(&v970, *(const std::string::value_type **)(v701 + 48), *(_QWORD *)(v701 + 56));
                                else
                                  v970 = *(std::string *)(v701 + 48);
                                v702 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v961);
                                MEMORY[0x2348B2764](&v1063, &v970);
                                pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v980, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v1063);
                                __p[0] = 0;
                                pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v702, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v1054, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
                                if (((uint64_t)__p[0] & 7) != 0)
                                {
                                  v703 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
                                  do
                                    v704 = __ldxr(v703);
                                  while (__stlxr(v704 - 2, v703));
                                }
                                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1054);
                                if (((uint64_t)v1063.__first_ & 7) != 0)
                                {
                                  v705 = (unsigned int *)((unint64_t)v1063.__first_ & 0xFFFFFFFFFFFFFFF8);
                                  do
                                    v706 = __ldxr(v705);
                                  while (__stlxr(v706 - 2, v705));
                                }
                                if ((pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)v967) & 1) == 0)
                                {
                                  v707 = (std::__shared_weak_count *)*((_QWORD *)v960 + 1);
                                  v965 = *(_QWORD **)v960;
                                  v966 = v707;
                                  if (v707)
                                  {
                                    v708 = (unint64_t *)&v707->__shared_owners_;
                                    do
                                      v709 = __ldxr(v708);
                                    while (__stxr(v709 + 1, v708));
                                  }
                                  v710 = atomic_load((unsigned __int8 *)&qword_255E54F50);
                                  if ((v710 & 1) == 0 && __cxa_guard_acquire(&qword_255E54F50))
                                  {
                                    MEMORY[0x2348B274C](&unk_255E54F48, "Materials");
                                    __cxa_guard_release(&qword_255E54F50);
                                  }
                                  v1054[0] = v965;
                                  v1054[1] = v966;
                                  if (v966)
                                  {
                                    v711 = (unint64_t *)&v966->__shared_owners_;
                                    do
                                      v712 = __ldxr(v711);
                                    while (__stxr(v712 + 1, v711));
                                  }
                                  if (v966)
                                  {
                                    v714 = (unint64_t *)&v966->__shared_owners_;
                                    do
                                      v715 = __ldaxr(v714);
                                    while (__stlxr(v715 - 1, v714));
                                    if (!v715)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v966->__on_zero_shared)(v966);
                                      std::__shared_weak_count::__release_weak(v966);
                                    }
                                  }
                                  v716 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v965 + 20, (unsigned __int8 *)&qword_255E55100);
                                  if (v716)
                                  {
                                    v717 = (uint64_t *)((char *)v716 + 40);
                                  }
                                  else
                                  {
                                    v716 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
                                    v717 = (uint64_t *)v716;
                                  }
                                  v718 = *((unsigned __int8 *)v717 + 23);
                                  if ((v718 & 0x80u) == 0)
                                    v719 = *((unsigned __int8 *)v717 + 23);
                                  else
                                    v719 = v717[1];
                                  if (v719)
                                  {
                                    if ((v718 & 0x80) == 0)
                                      goto LABEL_1076;
LABEL_1079:
                                    if (v717[1])
                                      goto LABEL_1080;
                                  }
                                  else
                                  {
                                    v717 = RIO_MTLX::EMPTY_STRING(v716);
                                    v718 = *((unsigned __int8 *)v717 + 23);
                                    if ((v718 & 0x80) != 0)
                                      goto LABEL_1079;
LABEL_1076:
                                    if (v718)
                                    {
LABEL_1080:
                                      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v967, &v1063);
                                      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v1063);
                                      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v1054, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v1049);
                                      if ((v1049.__r_.__value_.__s.__data_[0] & 7) != 0)
                                      {
                                        v720 = (unsigned int *)(v1049.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v721 = __ldxr(v720);
                                        while (__stlxr(v721 - 2, v720));
                                      }
                                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1054);
                                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1063);
                                      pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)v967);
                                      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v1063, 0.0, 1.0);
                                      pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
                                      if ((BYTE8(v1055[0]) & 7) != 0)
                                      {
                                        v722 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                                        do
                                          v723 = __ldxr(v722);
                                        while (__stlxr(v723 - 2, v722));
                                      }
                                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                                      if (v1054[1])
                                        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
                                    }
                                  }
                                  if ((v935 & 1) == 0)
                                  {
                                    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)v967);
                                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, &v992);
                                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)__p + 1, (_DWORD *)&v992 + 1);
                                    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v1063, 0.0, 1.0);
                                    pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
                                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
                                    if ((BYTE8(v1055[0]) & 7) != 0)
                                    {
                                      v724 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                                      do
                                        v725 = __ldxr(v724);
                                      while (__stlxr(v725 - 2, v724));
                                    }
                                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                                    if (v1054[1])
                                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                                  }
                                  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v967);
                                  v726 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)v1054);
                                  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v967, __p);
                                  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&unk_255E54F48);
                                  v1043.__r_.__value_.__r.__words[0] = 0;
                                  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v726, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1063, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v1043);
                                  if ((v1043.__r_.__value_.__s.__data_[0] & 7) != 0)
                                  {
                                    v727 = (unsigned int *)(v1043.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v728 = __ldxr(v727);
                                    while (__stlxr(v728 - 2, v727));
                                  }
                                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1063);
                                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
                                  v729 = (RIO_MTLX *)v1054[1];
                                  if (v1054[1])
                                  {
                                    v730 = (unsigned int *)((char *)v1054[1] + 8);
                                    do
                                    {
                                      v731 = __ldxr(v730);
                                      v732 = v731 - 1;
                                    }
                                    while (__stlxr(v732, v730));
                                    if (!v732)
                                      v729 = (RIO_MTLX *)(*(uint64_t (**)(RIO_MTLX *))(*(_QWORD *)v729 + 8))(v729);
                                  }
                                  *(_OWORD *)&v1048.__r_.__value_.__r.__words[1] = 0uLL;
                                  v1048.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1048.__r_.__value_.__l.__size_;
                                  v733 = RIO_MTLX::EMPTY_STRING(v729);
                                  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::MaterialAssign>((uint64_t)v965, (unsigned __int8 *)v733, (uint64_t)v1054);
                                  v734 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer *)v1054[0];
                                  v735 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer *)v1054[1];
                                  while (v734 != v735)
                                  {
                                    v736 = *v734;
                                    v737 = v734[1];
                                    v1063.__first_ = *v734;
                                    v1063.__begin_ = v737;
                                    if (v737)
                                    {
                                      v738 = &v737->first.__r_.__value_.__l.__size_;
                                      do
                                        v739 = __ldxr(v738);
                                      while (__stxr(v739 + 1, v738));
                                    }
                                    if (v736)
                                    else
                                      v1043.__r_.__value_.__r.__words[0] = 0;
                                    v740 = (void **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v1048, __p, (uint64_t *)&v1043);
                                    v741 = *v740;
                                    if (!*v740)
                                    {
                                      v741 = operator new(0x30uLL);
                                      v741[4] = v1043.__r_.__value_.__r.__words[0];
                                      v1043.__r_.__value_.__r.__words[0] = 0;
                                      *((_DWORD *)v741 + 10) = 0;
                                      v742 = __p[0];
                                      *v741 = 0;
                                      v741[1] = 0;
                                      v741[2] = v742;
                                      *v740 = v741;
                                      v743 = v741;
                                      if (*(_QWORD *)v1048.__r_.__value_.__l.__data_)
                                      {
                                        v1048.__r_.__value_.__r.__words[0] = *(_QWORD *)v1048.__r_.__value_.__l.__data_;
                                        v743 = (uint64_t *)*v740;
                                      }
                                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v1048.__r_.__value_.__l.__size_, v743);
                                      ++v1048.__r_.__value_.__r.__words[2];
                                    }
                                    *((_DWORD *)v741 + 10) = 0;
                                    if ((v1043.__r_.__value_.__s.__data_[0] & 7) != 0)
                                    {
                                      v744 = (unsigned int *)(v1043.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                                      do
                                        v745 = __ldxr(v744);
                                      while (__stlxr(v745 - 2, v744));
                                      v737 = v1063.__begin_;
                                    }
                                    if (v737)
                                    {
                                      v746 = &v737->first.__r_.__value_.__l.__size_;
                                      do
                                        v747 = __ldaxr(v746);
                                      while (__stlxr(v747 - 1, v746));
                                      if (!v747)
                                      {
                                        (*(void (**)(std::pair<std::string, std::string> *))(v737->first.__r_.__value_.__r.__words[0] + 16))(v737);
                                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v737);
                                      }
                                    }
                                    v734 += 2;
                                  }
                                  v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v1054;
                                  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1063);
                                  UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v748);
                                  v751 = *(_QWORD *)UsdPrimAllPrimsPredicate;
                                  v750 = *(_QWORD *)(UsdPrimAllPrimsPredicate + 8);
                                  v752 = *(std::pair<std::string, std::string> **)(UsdPrimAllPrimsPredicate + 16);
                                  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
                                    && ((v751 & 0x2000) != 0 || (v750 & 0x2000) == 0))
                                  {
                                    v751 |= 0x2000uLL;
                                    v750 &= ~0x2000uLL;
                                  }
                                  v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v751;
                                  v1063.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v750;
                                  v1063.__end_ = v752;
                                  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v1049, (uint64_t *)&v1063, (uint64_t)v1054);
                                  v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v1054[0];
                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v1063.__begin_, &v1054[1]);
                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v1063.__begin_ + 1, (_DWORD *)&v1054[1] + 1);
                                  *(_OWORD *)&v1063.__end_ = v1055[0];
                                  __p[0] = *((void **)&v1055[1] + 1);
                                  v1063.__end_cap_.__value_ = *(std::allocator<std::pair<std::string, std::string>> **)&v1055[1];
                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p[1], &v1056);
                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p[1] + 1, (_DWORD *)&v1056 + 1);
                                  v1046 = v1057;
                                  v1047 = v1058;
                                  while (v1063.__first_ != __p[0]
                                       || v1063.__begin_ != __p[1]
                                       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v1063.__end_, (uint64_t)&v1046))
                                  {
                                    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v1063, (uint64_t)&v1043);
                                    Name = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v1043);
                                    *((_DWORD *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((uint64_t **)&v1048, Name, &Name)+ 10) = 1;
                                    if ((v1044 & 7) != 0)
                                    {
                                      v753 = (unsigned int *)(v1044 & 0xFFFFFFFFFFFFFFF8);
                                      do
                                        v754 = __ldxr(v753);
                                      while (__stlxr(v754 - 2, v753));
                                    }
                                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1043.__r_.__value_.__r.__words[2]);
                                    if (v1043.__r_.__value_.__l.__size_)
                                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v1043.__r_.__value_.__l.__size_);
                                    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v1063);
                                  }
                                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[1]);
                                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1063.__begin_);
                                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1056);
                                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1054[1]);
                                  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Apply();
                                  PropertyOrder = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyOrder((pxrInternal__aapl__pxrReserved__::UsdPrim *)v967);
                                  v1039 = 0;
                                  v1038 = 0;
                                  v1040 = 0;
                                  v756 = RIO_MTLX::EMPTY_STRING(PropertyOrder);
                                  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::MaterialAssign>((uint64_t)v965, (unsigned __int8 *)v756, (uint64_t)&v1036);
                                  v758 = v1036;
                                  v759 = v1037;
                                  v955 = v1037;
                                  if (v1036 != v1037)
                                  {
                                    while (2)
                                    {
                                      v760 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(*(_QWORD *)v758 + 160), (unsigned __int8 *)&qword_255E55160);
                                      if (v760)
                                      {
                                        v761 = (uint64_t *)((char *)v760 + 40);
                                      }
                                      else
                                      {
                                        v760 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
                                        v761 = (uint64_t *)v760;
                                      }
                                      v762 = *((unsigned __int8 *)v761 + 23);
                                      if ((v762 & 0x80u) != 0)
                                        v762 = v761[1];
                                      if (!v762)
                                        v761 = RIO_MTLX::EMPTY_STRING(v760);
                                      if (v1035
                                        && (*(_BYTE *)(v1035 + 57) & 8) == 0
                                        && (((uint64_t (*)(std::string **))v1034[1].__r_.__value_.__l.__size_)(&v1034) & 1) != 0)
                                      {
                                        v763 = *(std::string **)v758;
                                        v764 = (std::__shared_weak_count *)*((_QWORD *)v758 + 1);
                                        v1054[0] = *(void **)v758;
                                        v1054[1] = v764;
                                        if (v764)
                                        {
                                          v765 = (unint64_t *)&v764->__shared_owners_;
                                          do
                                            v766 = __ldxr(v765);
                                          while (__stxr(v766 + 1, v765));
                                        }
                                        if (v763)
                                        {
                                          if (!v764)
                                            goto LABEL_1161;
                                        }
                                        else
                                        {
                                          v1033 = 0;
                                          if (!v764)
                                            goto LABEL_1161;
                                        }
                                        v767 = (unint64_t *)&v764->__shared_owners_;
                                        do
                                          v768 = __ldaxr(v767);
                                        while (__stlxr(v768 - 1, v767));
                                        if (!v768)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v764->__on_zero_shared)(v764);
                                          std::__shared_weak_count::__release_weak(v764);
                                        }
LABEL_1161:
                                        v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1033;
                                        v769 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((uint64_t **)&v1048, &v1033, (uint64_t **)&v1043);
                                        v770 = v769;
                                        if (*((_DWORD *)v769 + 10))
                                        {
                                          pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v1049);
                                          Path = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v1049, &v1053);
                                          if ((v1033 & 0xFFFFFFFFFFFFFFF8) != 0)
                                            EmptyString = (v1033 & 0xFFFFFFFFFFFFFFF8) + 16;
                                          else
                                            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Path);
                                          if (*(char *)(EmptyString + 23) >= 0)
                                            v773 = *(unsigned __int8 *)(EmptyString + 23);
                                          else
                                            v773 = *(_QWORD *)(EmptyString + 8);
                                          std::string::basic_string[abi:ne180100]((uint64_t)__p, v773 + 1);
                                          if ((SBYTE7(v1046) & 0x80u) == 0)
                                            v774 = __p;
                                          else
                                            v774 = (void **)__p[0];
                                          if (v773)
                                          {
                                            if (*(char *)(EmptyString + 23) >= 0)
                                              v775 = (const void *)EmptyString;
                                            else
                                              v775 = *(const void **)EmptyString;
                                            memmove(v774, v775, v773);
                                          }
                                          *(_WORD *)((char *)v774 + v773) = 95;
                                          do
                                          {
                                            v776 = *((_DWORD *)v770 + 10);
                                            *((_DWORD *)v770 + 10) = v776 + 1;
                                            std::to_string(&v1043, v776);
                                            if ((SBYTE7(v1046) & 0x80u) == 0)
                                              v777 = __p;
                                            else
                                              v777 = (void **)__p[0];
                                            if ((SBYTE7(v1046) & 0x80u) == 0)
                                              v778 = BYTE7(v1046);
                                            else
                                              v778 = (std::string::size_type)__p[1];
                                            v779 = std::string::insert(&v1043, 0, (const std::string::value_type *)v777, v778);
                                            v780 = *(_OWORD *)&v779->__r_.__value_.__l.__data_;
                                            *(_QWORD *)&v1055[0] = *((_QWORD *)&v779->__r_.__value_.__l + 2);
                                            *(_OWORD *)v1054 = v780;
                                            v779->__r_.__value_.__l.__size_ = 0;
                                            v779->__r_.__value_.__r.__words[2] = 0;
                                            v779->__r_.__value_.__r.__words[0] = 0;
                                            MEMORY[0x2348B2764](&v1052, v1054);
                                            if ((v1033 & 7) != 0)
                                            {
                                              v781 = (unsigned int *)(v1033 & 0xFFFFFFFFFFFFFFF8);
                                              do
                                                v782 = __ldxr(v781);
                                              while (__stlxr(v782 - 2, v781));
                                            }
                                            v1033 = v1052;
                                            v1052 = 0;
                                            if (SBYTE7(v1055[0]) < 0)
                                              operator delete(v1054[0]);
                                            if (SHIBYTE(v1043.__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(v1043.__r_.__value_.__l.__data_);
                                            v783 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v1031);
                                            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v1053, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v1033);
                                            pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v783, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1043);
                                            v784 = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v1054);
                                            if ((BYTE8(v1055[0]) & 7) != 0)
                                            {
                                              v785 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                                              do
                                                v786 = __ldxr(v785);
                                              while (__stlxr(v786 - 2, v785));
                                            }
                                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                                            if (v1054[1])
                                              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1043);
                                          }
                                          while ((v784 & 1) != 0);
                                          if (SBYTE7(v1046) < 0)
                                            operator delete(__p[0]);
                                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1053);
                                          v787 = v1032;
                                          if (v1032)
                                          {
                                            v788 = (unsigned int *)(v1032 + 8);
                                            do
                                            {
                                              v789 = __ldxr(v788);
                                              v790 = v789 - 1;
                                            }
                                            while (__stlxr(v790, v788));
                                            if (!v790)
                                              (*(void (**)(uint64_t))(*(_QWORD *)v787 + 8))(v787);
                                          }
                                        }
                                        else
                                        {
                                          *((_DWORD *)v769 + 10) = 1;
                                        }
                                        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v1049);
                                        v791 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)v1054);
                                        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v1049, &v1031);
                                        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v1031, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v1033);
                                        v1053 = 0;
                                        pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v791, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1043, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v1053);
                                        if ((v1053 & 7) != 0)
                                        {
                                          v792 = (unsigned int *)(v1053 & 0xFFFFFFFFFFFFFFF8);
                                          do
                                            v793 = __ldxr(v792);
                                          while (__stlxr(v793 - 2, v792));
                                        }
                                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1043);
                                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1031);
                                        v794 = v1054[1];
                                        if (v1054[1])
                                        {
                                          v795 = (unsigned int *)((char *)v1054[1] + 8);
                                          do
                                          {
                                            v796 = __ldxr(v795);
                                            v797 = v796 - 1;
                                          }
                                          while (__stlxr(v797, v795));
                                          if (!v797)
                                            (*(void (**)(void *))(*(_QWORD *)v794 + 8))(v794);
                                        }
                                        v798 = (std::__shared_weak_count *)*((_QWORD *)v758 + 1);
                                        v1054[0] = *(void **)v758;
                                        v1054[1] = v798;
                                        if (v798)
                                        {
                                          v799 = (unint64_t *)&v798->__shared_owners_;
                                          do
                                            v800 = __ldxr(v799);
                                          while (__stxr(v800 + 1, v799));
                                        }
                                        if (v798)
                                        {
                                          v801 = (unint64_t *)&v798->__shared_owners_;
                                          do
                                            v802 = __ldaxr(v801);
                                          while (__stlxr(v802 - 1, v801));
                                          if (!v802)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v798->__on_zero_shared)(v798);
                                            std::__shared_weak_count::__release_weak(v798);
                                          }
                                        }
                                        pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
                                        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v1034, &v1031);
                                        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v1043, 0.0, 1.0);
                                        pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
                                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1031);
                                        if ((BYTE8(v1055[0]) & 7) != 0)
                                        {
                                          v803 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                                          do
                                            v804 = __ldxr(v803);
                                          while (__stlxr(v804 - 2, v803));
                                        }
                                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                                        if (v1054[1])
                                          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                                        v805 = *(_QWORD *)v758;
                                        v806 = (std::__shared_weak_count *)*((_QWORD *)v758 + 1);
                                        if (v806)
                                        {
                                          v807 = (unint64_t *)&v806->__shared_owners_;
                                          do
                                            v808 = __ldxr(v807);
                                          while (__stxr(v808 + 1, v807));
                                          do
                                            v810 = __ldaxr(v807);
                                          while (__stlxr(v810 - 1, v807));
                                          if (!v810)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v806->__on_zero_shared)(v806);
                                            std::__shared_weak_count::__release_weak(v806);
                                          }
                                        }
                                        else
                                        {
                                        }
                                        v813 = *v809;
                                        v812 = v809 + 1;
                                        v811 = (_QWORD *)v813;
                                        if ((uint64_t *)v813 != v812)
                                        {
                                          do
                                          {
                                            pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet();
                                            pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection();
                                            if (SHIBYTE(v1056) < 0)
                                              operator delete(*(void **)&v1055[1]);
                                            if ((BYTE8(v1055[0]) & 7) != 0)
                                            {
                                              v814 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                                              do
                                                v815 = __ldxr(v814);
                                              while (__stlxr(v815 - 2, v814));
                                            }
                                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                                            if (v1054[1])
                                              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                                            v816 = (uint64_t *)v811[1];
                                            if (v816)
                                            {
                                              do
                                              {
                                                v817 = v816;
                                                v816 = (uint64_t *)*v816;
                                              }
                                              while (v816);
                                            }
                                            else
                                            {
                                              do
                                              {
                                                v817 = (uint64_t *)v811[2];
                                                v581 = *v817 == (_QWORD)v811;
                                                v811 = v817;
                                              }
                                              while (!v581);
                                            }
                                            v811 = v817;
                                          }
                                          while (v817 != v812);
                                        }
                                        v819 = *(std::string **)v758;
                                        v818 = *((_QWORD *)v758 + 1);
                                        v1031 = *(std::string **)v758;
                                        v1032 = v818;
                                        if (v818)
                                        {
                                          v820 = (unint64_t *)(v818 + 8);
                                          do
                                            v821 = __ldxr(v820);
                                          while (__stxr(v821 + 1, v820));
                                        }
                                        v822 = v1013;
                                        if (!v1013)
                                          goto LABEL_1260;
                                        v823 = &v1013;
                                        do
                                        {
                                          v824 = v822;
                                          v825 = v823;
                                          v826 = v822[4];
                                          v827 = (uint64_t **)(v822 + 1);
                                          if (v826 >= (unint64_t)v819)
                                          {
                                            v827 = (uint64_t **)v824;
                                            v823 = (uint64_t **)v824;
                                          }
                                          v822 = *v827;
                                        }
                                        while (v822);
                                        if (v823 != &v1013
                                          && (v826 >= (unint64_t)v819 ? (v828 = v824) : (v828 = v825),
                                              (unint64_t)v819 >= v828[4]))
                                        {
                                          if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v967) & 1) != 0)
                                          {
                                            if (v826 >= (unint64_t)v819)
                                              v862 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v824 + 6);
                                            else
                                              v862 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v825 + 6);
                                            pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(v862);
                                            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v1053);
                                            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v967, &v1051);
                                            pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v1053, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v1054, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v1051);
                                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1051);
                                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1054);
                                            if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) != 0)
                                            {
                                              pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v967);
                                              pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection();
                                              v863 = v1054[1];
                                              if (v1054[1])
                                              {
                                                v864 = (unsigned int *)((char *)v1054[1] + 8);
                                                do
                                                {
                                                  v865 = __ldxr(v864);
                                                  v866 = v865 - 1;
                                                }
                                                while (__stlxr(v866, v864));
                                                if (!v866)
                                                  (*(void (**)(void *))(*(_QWORD *)v863 + 8))(v863);
                                              }
                                            }
                                            else
                                            {
                                              LODWORD(v1054[0]) = 1;
                                              v1054[1] = 0;
                                              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
                                              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
                                              *((_QWORD *)&v1055[0] + 1) = 0;
                                              v1051 = 0;
                                              pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v1043, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v1054, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v1051);
                                              v1043.__r_.__value_.__r.__words[0] = MEMORY[0x24BEE9D60] + 16;
                                              if ((BYTE8(v1055[0]) & 7) != 0)
                                              {
                                                v871 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                                                do
                                                  v872 = __ldxr(v871);
                                                while (__stlxr(v872 - 2, v871));
                                              }
                                              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                                              if (v1054[1])
                                                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                                            }
                                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1052);
                                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1053);
                                          }
                                          else
                                          {
                                            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                                            if (v826 >= (unint64_t)v819)
                                              v867 = v824;
                                            else
                                              v867 = v825;
                                            v868 = v867[9];
                                            v1043.__r_.__value_.__r.__words[0] = v934;
                                            v1044 = v868;
                                            if ((v868 & 7) != 0)
                                            {
                                              v869 = (unsigned int *)(v868 & 0xFFFFFFFFFFFFFFF8);
                                              do
                                                v870 = __ldxr(v869);
                                              while (__stxr(v870 + 2, v869));
                                              if ((v870 & 1) == 0)
                                                v1044 &= 0xFFFFFFFFFFFFFFF8;
                                            }
                                            v1043.__r_.__value_.__r.__words[0] = MEMORY[0x24BEE9D60] + 16;
                                          }
                                        }
                                        else
                                        {
LABEL_1260:
                                          LODWORD(v1054[0]) = 1;
                                          v1054[1] = 0;
                                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
                                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
                                          *((_QWORD *)&v1055[0] + 1) = 0;
                                          v1053 = 0;
                                          pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v1043, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v1054, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v1053);
                                          v1043.__r_.__value_.__r.__words[0] = v946;
                                          if ((BYTE8(v1055[0]) & 7) != 0)
                                          {
                                            v829 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                                            do
                                              v830 = __ldxr(v829);
                                            while (__stlxr(v830 - 2, v829));
                                          }
                                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                                          if (v1054[1])
                                            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                                        }
                                        v831 = (std::__shared_weak_count *)v1032;
                                        if (v1032)
                                        {
                                          v832 = (unint64_t *)(v1032 + 8);
                                          do
                                            v833 = __ldaxr(v832);
                                          while (__stlxr(v833 - 1, v832));
                                          if (!v833)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v831->__on_zero_shared)(v831);
                                            std::__shared_weak_count::__release_weak(v831);
                                          }
                                        }
                                        if (v1043.__r_.__value_.__l.__size_
                                          && (*(_BYTE *)(v1043.__r_.__value_.__l.__size_ + 57) & 8) == 0
                                          && (*(unsigned int (**)(std::string *))(v1043.__r_.__value_.__r.__words[0]
                                                                                           + 32))(&v1043))
                                        {
                                          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                                          v1054[0] = (void *)(MEMORY[0x24BEE9D88] + 16);
                                          v834 = (unint64_t *)MEMORY[0x24BEE8128];
                                          v835 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
                                          if (!v835)
                                          {
                                            v835 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
                                            v834 = (unint64_t *)MEMORY[0x24BEE8128];
                                          }
                                          v836 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v834);
                                          if (!v836)
                                            v836 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(v834);
                                          v837 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v1063, (const pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v1043, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v1054, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v1033, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v835 + 40), v836);
                                          MEMORY[0x2348B20B0](v1054);
                                          if (v837)
                                          {
                                            v838 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
                                            if (!v838)
                                              v838 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
                                            pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v1063, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v1033, v838);
                                            v839 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v1054);
                                            v840 = v1039;
                                            if ((unint64_t)v1039 >= v1040)
                                            {
                                              v844 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v1038, v839);
                                            }
                                            else
                                            {
                                              v841 = *v839;
                                              *(_QWORD *)v1039 = *v839;
                                              if ((v841 & 7) != 0)
                                              {
                                                v842 = (unsigned int *)(v841 & 0xFFFFFFFFFFFFFFF8);
                                                do
                                                  v843 = __ldxr(v842);
                                                while (__stxr(v843 + 2, v842));
                                                if ((v843 & 1) == 0)
                                                  *(_QWORD *)v840 &= 0xFFFFFFFFFFFFFFF8;
                                              }
                                              v844 = v840 + 8;
                                            }
                                            v1039 = v844;
                                            if ((BYTE8(v1055[0]) & 7) != 0)
                                            {
                                              v873 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                                              do
                                                v874 = __ldxr(v873);
                                              while (__stlxr(v874 - 2, v873));
                                            }
                                            goto LABEL_1305;
                                          }
                                        }
                                        else
                                        {
                                          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                                          v1054[0] = v950;
                                          v845 = (unint64_t *)MEMORY[0x24BEE8128];
                                          v846 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
                                          if (!v846)
                                          {
                                            v846 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
                                            v845 = (unint64_t *)MEMORY[0x24BEE8128];
                                          }
                                          v847 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v845);
                                          if (!v847)
                                            v847 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(v845);
                                          v848 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v1063, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v1054, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v846 + 40), v847);
                                          MEMORY[0x2348B20B0](v1054);
                                          if (v848)
                                          {
                                            v849 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
                                            if (!v849)
                                              v849 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
                                            pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBindingRel((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v1063, v849);
                                            v850 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v1054);
                                            v851 = v1039;
                                            if ((unint64_t)v1039 >= v1040)
                                            {
                                              v855 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v1038, v850);
                                            }
                                            else
                                            {
                                              v852 = *v850;
                                              *(_QWORD *)v1039 = *v850;
                                              if ((v852 & 7) != 0)
                                              {
                                                v853 = (unsigned int *)(v852 & 0xFFFFFFFFFFFFFFF8);
                                                do
                                                  v854 = __ldxr(v853);
                                                while (__stxr(v854 + 2, v853));
                                                if ((v854 & 1) == 0)
                                                  *(_QWORD *)v851 &= 0xFFFFFFFFFFFFFFF8;
                                              }
                                              v855 = v851 + 8;
                                            }
                                            v1039 = v855;
                                            if ((BYTE8(v1055[0]) & 7) != 0)
                                            {
                                              v856 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                                              do
                                                v857 = __ldxr(v856);
                                              while (__stlxr(v857 - 2, v856));
                                            }
LABEL_1305:
                                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                                            if (v1054[1])
                                              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                                          }
                                        }
                                        MEMORY[0x2348B2038](&v1043);
                                        if ((BYTE8(v1046) & 7) != 0)
                                        {
                                          v858 = (unsigned int *)(*((_QWORD *)&v1046 + 1) & 0xFFFFFFFFFFFFFFF8);
                                          do
                                            v859 = __ldxr(v858);
                                          while (__stlxr(v859 - 2, v858));
                                        }
                                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                        v759 = v955;
                                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1046);
                                        if (__p[1])
                                          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p[1]);
                                        if ((v1033 & 7) != 0)
                                        {
                                          v860 = (unsigned int *)(v1033 & 0xFFFFFFFFFFFFFFF8);
                                          do
                                            v861 = __ldxr(v860);
                                          while (__stlxr(v861 - 2, v860));
                                        }
                                      }
                                      v757 = (realityio::mtlx::_anonymous_namespace_ *)MEMORY[0x2348B20B0](&v1034);
                                      v758 = (RIO_MTLX::Element *)((char *)v758 + 16);
                                      if (v758 == v759)
                                        break;
                                      continue;
                                    }
                                  }
                                  v1054[0] = &v1036;
                                  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                                  v875 = v1039;
                                  if (v1038 != v1039)
                                  {
                                    v876 = Name;
                                    v877 = v1042;
                                    if ((char *)v1042 - (char *)Name < 1)
                                      goto LABEL_1391;
                                    v878 = v1042 - Name;
                                    v879 = v1039 - v1038;
                                    v880 = &v1038[(v1039 - v1038) & 0xFFFFFFFFFFFFFFF8];
                                    if (v878 > (uint64_t)(v1040 - (_QWORD)v1039) >> 3)
                                    {
                                      v881 = v879 >> 3;
                                      v882 = v878 + (v879 >> 3);
                                      if (v882 >> 61)
                                        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
                                      if ((uint64_t)(v1040 - (_QWORD)v1038) >> 2 > v882)
                                        v882 = (uint64_t)(v1040 - (_QWORD)v1038) >> 2;
                                      if (v1040 - (unint64_t)v1038 >= 0x7FFFFFFFFFFFFFF8)
                                        v883 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v883 = v882;
                                      *(_QWORD *)&v1055[1] = &v1040;
                                      if (v883)
                                        v884 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v1040, v883);
                                      else
                                        v884 = 0;
                                      v893 = (uint64_t *)&v884[8 * v881];
                                      v1054[0] = v884;
                                      v1054[1] = v893;
                                      *((_QWORD *)&v1055[0] + 1) = &v884[8 * v883];
                                      v894 = (char *)&v893[v878];
                                      do
                                      {
                                        v895 = *v876;
                                        *v893 = *v876;
                                        if ((v895 & 7) != 0)
                                        {
                                          v896 = (unsigned int *)(v895 & 0xFFFFFFFFFFFFFFF8);
                                          do
                                            v897 = __ldxr(v896);
                                          while (__stxr(v897 + 2, v896));
                                          if ((v897 & 1) == 0)
                                            *v893 &= 0xFFFFFFFFFFFFFFF8;
                                        }
                                        ++v893;
                                        ++v876;
                                      }
                                      while (v893 != (uint64_t *)v894);
                                      *(_QWORD *)&v1055[0] = v894;
                                      v898 = (char *)v1054[1];
                                      v899 = v1038;
                                      if (v1038 != v880)
                                      {
                                        v900 = v880;
                                        do
                                        {
                                          v901 = *((_QWORD *)v900 - 1);
                                          v900 -= 8;
                                          *((_QWORD *)v898 - 1) = v901;
                                          v898 -= 8;
                                          *(_QWORD *)v900 = 0;
                                        }
                                        while (v900 != v899);
                                        v894 = *(char **)&v1055[0];
                                      }
                                      v1054[1] = v898;
                                      v902 = v1039;
                                      if (v1039 != v880)
                                      {
                                        do
                                        {
                                          *(_QWORD *)v894 = *(_QWORD *)v880;
                                          v894 += 8;
                                          *(_QWORD *)v880 = 0;
                                          v880 += 8;
                                        }
                                        while (v880 != v902);
                                        v898 = (char *)v1054[1];
                                        v880 = v1039;
                                      }
                                      v903 = v1038;
                                      v904 = v1040;
                                      v1038 = v898;
                                      v1039 = v894;
                                      v1040 = *((_QWORD *)&v1055[0] + 1);
                                      *(_QWORD *)&v1055[0] = v880;
                                      *((_QWORD *)&v1055[0] + 1) = v904;
                                      v1054[1] = v903;
                                      v1054[0] = v903;
                                      std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfToken>::~__split_buffer((uint64_t)v1054);
                                      goto LABEL_1391;
                                    }
                                    v885 = v1039 - v880;
                                    v886 = (v1039 - v880) >> 3;
                                    if (v886 >= v878)
                                    {
                                      v887 = &Name[v878];
                                      v889 = v1039;
                                      goto LABEL_1387;
                                    }
                                    v887 = &Name[v886];
                                    if (v887 == v1042)
                                    {
                                      v889 = v1039;
                                    }
                                    else
                                    {
                                      v888 = &Name[v886];
                                      v889 = v1039;
                                      do
                                      {
                                        v890 = *v888;
                                        *(_QWORD *)v889 = *v888;
                                        if ((v890 & 7) != 0)
                                        {
                                          v891 = (unsigned int *)(v890 & 0xFFFFFFFFFFFFFFF8);
                                          do
                                            v892 = __ldxr(v891);
                                          while (__stxr(v892 + 2, v891));
                                          if ((v892 & 1) == 0)
                                            *(_QWORD *)v889 &= 0xFFFFFFFFFFFFFFF8;
                                        }
                                        ++v888;
                                        v889 += 8;
                                      }
                                      while (v888 != v877);
                                    }
                                    v1039 = v889;
                                    if (v885 >= 1)
                                    {
LABEL_1387:
                                      v905 = &v889[-8 * v878];
                                      v906 = v889;
                                      for (ii = v905; ii < v875; ii += 8)
                                      {
                                        *(_QWORD *)v906 = *(_QWORD *)ii;
                                        v906 += 8;
                                        *(_QWORD *)ii = 0;
                                      }
                                      v1039 = v906;
                                      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,pxrInternal__aapl__pxrReserved__::TfToken *,pxrInternal__aapl__pxrReserved__::TfToken *,pxrInternal__aapl__pxrReserved__::TfToken *,0>(v880, v905, v889);
                                      for (; v876 != v887; v880 += 8)
                                        pxrInternal__aapl__pxrReserved__::TfToken::operator=(v880, v876++);
                                    }
LABEL_1391:
                                    pxrInternal__aapl__pxrReserved__::UsdPrim::SetPropertyOrder((uint64_t)v967);
                                  }
                                  v1054[0] = &v1038;
                                  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                                  v1054[0] = &Name;
                                  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                                  MEMORY[0x2348B24C4](&v1063);
                                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::destroy((_QWORD *)v1048.__r_.__value_.__l.__size_);
                                  if ((v1050 & 7) != 0)
                                  {
                                    v908 = (unsigned int *)(v1050 & 0xFFFFFFFFFFFFFFF8);
                                    do
                                      v909 = __ldxr(v908);
                                    while (__stlxr(v909 - 2, v908));
                                  }
                                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1049.__r_.__value_.__r.__words[2]);
                                  if (v1049.__r_.__value_.__l.__size_)
                                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v1049.__r_.__value_.__l.__size_);
                                  if (v966)
                                  {
                                    v910 = (unint64_t *)&v966->__shared_owners_;
                                    do
                                      v911 = __ldaxr(v910);
                                    while (__stlxr(v911 - 1, v910));
                                    if (!v911)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v966->__on_zero_shared)(v966);
                                      std::__shared_weak_count::__release_weak(v966);
                                    }
                                  }
                                  if (pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant())
                                  {
                                    pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection();
                                    __p[1] = 0;
                                    __p[0] = 0;
                                    pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext();
                                    MEMORY[0x2348B1E28](v1054, &v1063);
                                    pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)&v1063.__end_cap_.std::__compressed_pair_elem<std::allocator<std::pair<std::string, std::string>> &, 1, false>);
                                    v912 = v1063.__end_cap_.__value_;
                                    if (v1063.__end_cap_.__value_)
                                    {
                                      v913 = (unsigned int *)&v1063.__end_cap_.__value_->first.__r_.__value_.__r.__words[1];
                                      do
                                      {
                                        v914 = __ldxr(v913);
                                        v915 = v914 - 1;
                                      }
                                      while (__stlxr(v915, v913));
                                      if (!v915)
                                        (*(void (**)(std::pair<std::string, std::string> *))(v912->first.__r_.__value_.__r.__words[0] + 8))(v912);
                                    }
                                    v916 = v1063.__begin_;
                                    if (v1063.__begin_)
                                    {
                                      v917 = (unsigned int *)&v1063.__begin_->first.__r_.__value_.__r.__words[1];
                                      do
                                      {
                                        v918 = __ldxr(v917);
                                        v919 = v918 - 1;
                                      }
                                      while (__stlxr(v919, v917));
                                      if (!v919)
                                        (*(void (**)(std::__split_buffer<std::pair<std::string, std::string>>::pointer))(v916->first.__r_.__value_.__r.__words[0] + 8))(v916);
                                    }
                                    v920 = __p[1];
                                    if (__p[1])
                                    {
                                      v921 = (unsigned int *)((char *)__p[1] + 8);
                                      do
                                      {
                                        v922 = __ldxr(v921);
                                        v923 = v922 - 1;
                                      }
                                      while (__stlxr(v923, v921));
                                      if (!v923)
                                        (*(void (**)(void *))(*(_QWORD *)v920 + 8))(v920);
                                    }
                                    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v976);
                                    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v967, &v1049);
                                    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)__p, 0.0, 1.0);
                                    pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
                                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1049);
                                    if (((uint64_t)v1063.__end_cap_.__value_ & 7) != 0)
                                    {
                                      v924 = (unsigned int *)((unint64_t)v1063.__end_cap_.__value_ & 0xFFFFFFFFFFFFFFF8);
                                      do
                                        v925 = __ldxr(v924);
                                      while (__stlxr(v925 - 2, v924));
                                    }
                                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1063.__end_);
                                    if (v1063.__begin_)
                                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1063.__begin_);
                                    MEMORY[0x2348B1E34](v1054);
                                  }
                                  else
                                  {
                                    v1054[0] = "CoreRealityIO/mtlxToUsdShade.cpp";
                                    v1054[1] = "UsdMtlxRead";
                                    *(_QWORD *)&v1055[0] = 2457;
                                    *((_QWORD *)&v1055[0] + 1) = "void realityio::mtlx::UsdMtlxRead(const MaterialX::Cons"
                                                                 "tDocumentPtr &, const UsdStagePtr &, const SdfPath &, const SdfPath &)";
                                    LOBYTE(v1055[1]) = 0;
                                    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v976, &v1063);
                                    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v1063);
                                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
                                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1063);
                                  }
                                }
                                if ((v969 & 7) != 0)
                                {
                                  v926 = (unsigned int *)(v969 & 0xFFFFFFFFFFFFFFF8);
                                  do
                                    v927 = __ldxr(v926);
                                  while (__stlxr(v927 - 2, v926));
                                }
                                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v968);
                                if (v967[1])
                                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v967[1]);
                                if (SHIBYTE(v970.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v970.__r_.__value_.__l.__data_);
                                v699 = v960 + 16;
                                v700 = v942;
                                continue;
                              }
                              break;
                            }
                            v1054[0] = &v971;
                            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                            v654 = v933 + 2;
                            if (v933 + 2 == (RIO_MTLX::Element **)v932)
                            {
LABEL_1436:
                              v1054[0] = &v974;
                              std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                              pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v1025);
                              if (v1030 < 0)
                                operator delete(v1029);
                              if ((v1028 & 7) != 0)
                              {
                                v928 = (unsigned int *)(v1028 & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v929 = __ldxr(v928);
                                while (__stlxr(v929 - 2, v928));
                              }
                              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1027);
                              if (v1026)
                                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1026);
                              if ((v979 & 7) != 0)
                              {
                                v930 = (unsigned int *)(v979 & 0xFFFFFFFFFFFFFFF8);
                                do
                                  v931 = __ldxr(v930);
                                while (__stlxr(v931 - 2, v930));
                              }
                              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v978);
                              if (v977)
                                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v977);
                              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v980);
                              std::__tree<std::string>::destroy((uint64_t)&v1072, v1073);
                              v1054[0] = &v1069;
                              std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                              std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(v1067);
                              v1054[0] = &v1064[24];
                              std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                              v1054[0] = v1064;
                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1054);
                              goto LABEL_1449;
                            }
                            continue;
                          }
                          break;
                        }
                        v660 = (char *)__p[1];
                        v661 = (void **)v1054[1];
                        for (jj = &v1054[1]; ; v661 = (void **)*jj)
                        {
                          v663 = jj;
                          if (!v661)
                            break;
                          while (1)
                          {
                            jj = v661;
                            v664 = (unint64_t)v661[4];
                            if (v664 > (unint64_t)v657)
                              break;
                            if (v664 >= (unint64_t)v657)
                              goto LABEL_993;
                            v661 = (void **)jj[1];
                            if (!v661)
                            {
                              v663 = jj + 1;
                              goto LABEL_987;
                            }
                          }
                        }
LABEL_987:
                        v665 = (uint64_t *)operator new(0x30uLL);
                        v666 = v665;
                        v665[4] = (uint64_t)v657;
                        v665[5] = (uint64_t)v660;
                        if (v660)
                        {
                          v667 = (unint64_t *)(v660 + 8);
                          do
                            v668 = __ldxr(v667);
                          while (__stxr(v668 + 1, v667));
                        }
                        *v665 = 0;
                        v665[1] = 0;
                        v665[2] = (uint64_t)jj;
                        *v663 = v665;
                        if (*(_QWORD *)v1054[0])
                        {
                          v1054[0] = *(void **)v1054[0];
                          v666 = (uint64_t *)*v663;
                        }
                        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v1054[1], v666);
                        ++*(_QWORD *)&v1055[0];
LABEL_993:
                        v669 = (realityio::mtlx::_anonymous_namespace_ *)std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100](&v971, (__int128 *)__p);
                        v670 = v1063.__first_;
                        v671 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)__p[0] + 20, (unsigned __int8 *)&qword_255E55100);
                        if (v671)
                        {
                          v672 = (uint64_t *)((char *)v671 + 40);
                        }
                        else
                        {
                          v671 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
                          v672 = (uint64_t *)v671;
                        }
                        v673 = *((unsigned __int8 *)v672 + 23);
                        if ((v673 & 0x80u) != 0)
                          v673 = v672[1];
                        if (!v673)
                          v672 = RIO_MTLX::EMPTY_STRING(v671);
                        v674 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v670[2].first.__r_.__value_.__r.__words, (unsigned __int8 *)v672);
                        v675 = v674;
                        if (v674)
                        {
                          v676 = (void *)*((_QWORD *)v674 + 5);
                          v677 = (std::__shared_weak_count *)v675[6];
                          if (v677)
                          {
                            v678 = (unint64_t *)&v677->__shared_owners_;
                            do
                              v679 = __ldxr(v678);
                            while (__stxr(v679 + 1, v678));
                          }
                          if (v676)
                          {
                            v675 = 0;
                            if (v676)
                              v680 = 0;
                            else
                              v680 = v677;
                            if (v677 && v676)
                            {
                              v681 = (unint64_t *)&v677->__shared_owners_;
                              do
                                v682 = __ldxr(v681);
                              while (__stxr(v682 + 1, v681));
                              v675 = &v677->__vftable;
                            }
                            else
                            {
                              v677 = v680;
                            }
                          }
                          else
                          {
                            v675 = 0;
                          }
                        }
                        else
                        {
                          v677 = 0;
                          v676 = 0;
                        }
                        v683 = (std::__shared_weak_count *)__p[1];
                        __p[0] = v676;
                        __p[1] = v675;
                        if (!v683)
                          goto LABEL_1020;
                        v684 = (unint64_t *)&v683->__shared_owners_;
                        do
                          v685 = __ldaxr(v684);
                        while (__stlxr(v685 - 1, v684));
                        if (!v685)
                        {
                          ((void (*)(std::__shared_weak_count *))v683->__on_zero_shared)(v683);
                          std::__shared_weak_count::__release_weak(v683);
                          if (v677)
                          {
LABEL_1021:
                            v686 = (unint64_t *)&v677->__shared_owners_;
                            do
                              v687 = __ldaxr(v686);
                            while (__stlxr(v687 - 1, v686));
                            if (!v687)
                            {
                              ((void (*)(std::__shared_weak_count *))v677->__on_zero_shared)(v677);
                              std::__shared_weak_count::__release_weak(v677);
                            }
                          }
                        }
                        else
                        {
LABEL_1020:
                          if (v677)
                            goto LABEL_1021;
                        }
                        v657 = (RIO_MTLX::Element *)__p[0];
                        goto LABEL_1027;
                      }
                      break;
                    }
                    v1057 = 0uLL;
                    *(_OWORD *)v1054 = 0u;
                    memset(v1055, 0, sizeof(v1055));
                    v1059 = 0;
                    v1058 = 0uLL;
                    v1061 = 0;
                    v1062 = 0;
                    v1056 = (char *)&v1057;
                    v1060 = &v1061;
                    v468 = *(__int128 **)(v467 + 8);
                    v976 = *(std::string **)v467;
                    v977 = (std::string *)v468;
                    if (v468)
                    {
                      v469 = (unint64_t *)v468 + 1;
                      do
                        v470 = __ldxr(v469);
                      while (__stxr(v470 + 1, v469));
                    }
                    v471 = (__int128 *)__p[0];
                    v472 = (char *)__p[1];
                    if ((char *)__p[1] - (char *)__p[0] >= 1)
                    {
                      v473 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 4);
                      v474 = *((_QWORD *)&v1058 + 1);
                      v475 = v1058;
                      v476 = (*((_QWORD *)&v1058 + 1) - (_QWORD)v1058) / 48;
                      v477 = v1058 + 48 * v476;
                      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v1059 - *((_QWORD *)&v1058 + 1)) >> 4)) >= v473)
                      {
                        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)&v1058 + 1) - v477) >> 4)) >= v473)
                        {
                          v481 = (__int128 *)((char *)__p[0] + 16 * (((char *)__p[1] - (char *)__p[0]) >> 4));
                          v482 = *((_QWORD *)&v1058 + 1);
                        }
                        else
                        {
                          v1025 = (std::pair<std::string, std::string> **)*((_QWORD *)&v1058 + 1);
                          v967[0] = *((void **)&v1058 + 1);
                          v481 = (__int128 *)((char *)__p[0] + 16 * ((*((_QWORD *)&v1058 + 1) - v477) >> 4));
                          v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v1059;
                          v1063.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v967;
                          v1063.__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v1025;
                          v948 = *((_QWORD *)&v1058 + 1) - v477;
                          v482 = *((_QWORD *)&v1058 + 1);
                          if (v481 != __p[1])
                          {
                            v483 = (char *)__p[0] + 16 * ((*((_QWORD *)&v1058 + 1) - v477) >> 4);
                            v484 = *((_QWORD *)&v1058 + 1);
                            do
                            {
                              v485 = *(_OWORD *)v483;
                              *(_QWORD *)(v484 + 16) = *((_QWORD *)v483 + 2);
                              *(_OWORD *)v484 = v485;
                              *((_QWORD *)v483 + 1) = 0;
                              *((_QWORD *)v483 + 2) = 0;
                              *(_QWORD *)v483 = 0;
                              v486 = *(_OWORD *)(v483 + 24);
                              *(_QWORD *)(v484 + 40) = *((_QWORD *)v483 + 5);
                              *(_OWORD *)(v484 + 24) = v486;
                              *((_QWORD *)v483 + 4) = 0;
                              *((_QWORD *)v483 + 5) = 0;
                              *((_QWORD *)v483 + 3) = 0;
                              v484 += 48;
                              v482 += 48;
                              v483 += 48;
                            }
                            while (v483 != v472);
                            v1025 = (std::pair<std::string, std::string> **)v484;
                          }
                          LOBYTE(v1063.__end_cap_.__value_) = 1;
                          std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v1063);
                          *((_QWORD *)&v1058 + 1) = v482;
                          if (v948 < 1)
                            goto LABEL_743;
                        }
                        v487 = (__int128 *)(v482 - 48 * v473);
                        v488 = v482;
                        while ((unint64_t)v487 < v474)
                        {
                          v489 = *v487;
                          *(_QWORD *)(v488 + 16) = *((_QWORD *)v487 + 2);
                          *(_OWORD *)v488 = v489;
                          *((_QWORD *)v487 + 1) = 0;
                          *((_QWORD *)v487 + 2) = 0;
                          *(_QWORD *)v487 = 0;
                          v490 = *(__int128 *)((char *)v487 + 24);
                          *(_QWORD *)(v488 + 40) = *((_QWORD *)v487 + 5);
                          *(_OWORD *)(v488 + 24) = v490;
                          *((_QWORD *)v487 + 4) = 0;
                          *((_QWORD *)v487 + 5) = 0;
                          *((_QWORD *)v487 + 3) = 0;
                          v488 += 48;
                          v487 += 3;
                        }
                        v491 = v477 + 48 * v473;
                        *((_QWORD *)&v1058 + 1) = v488;
                        if (v482 != v491)
                        {
                          v492 = v482 - 48;
                          v493 = 16 * ((v482 - v491) >> 4);
                          do
                          {
                            v492 = std::pair<std::string,std::string>::operator=[abi:ne180100](v492, (__int128 *)(v475 + 48 * v476 - 48 + v493))- 48;
                            v493 -= 48;
                          }
                          while (v493);
                        }
                        for (; v471 != v481; v477 += 48)
                        {
                          std::pair<std::string,std::string>::operator=[abi:ne180100](v477, v471);
                          v471 += 3;
                        }
                      }
                      else
                      {
                        v478 = v476 - 0x5555555555555555 * (((char *)__p[1] - (char *)__p[0]) >> 4);
                        if (v478 > 0x555555555555555)
                          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                        if (0x5555555555555556 * ((uint64_t)((uint64_t)v1059 - v1058) >> 4) > v478)
                          v478 = 0x5555555555555556 * ((uint64_t)((uint64_t)v1059 - v1058) >> 4);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v1059 - v1058) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                          v479 = 0x555555555555555;
                        else
                          v479 = v478;
                        v1063.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)&v1059;
                        if (v479)
                          v480 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)&v1059, v479);
                        else
                          v480 = 0;
                        v494 = &v480[v476];
                        v1063.__first_ = v480;
                        v1063.__begin_ = v494;
                        v1063.__end_cap_.__value_ = &v480[v479];
                        v495 = v494;
                        do
                        {
                          v496 = *v471;
                          v495->first.__r_.__value_.__r.__words[2] = *((_QWORD *)v471 + 2);
                          *(_OWORD *)&v495->first.__r_.__value_.__l.__data_ = v496;
                          *((_QWORD *)v471 + 1) = 0;
                          *((_QWORD *)v471 + 2) = 0;
                          *(_QWORD *)v471 = 0;
                          v497 = *(__int128 *)((char *)v471 + 24);
                          v495->second.__r_.__value_.__r.__words[2] = *((_QWORD *)v471 + 5);
                          *(_OWORD *)&v495->second.__r_.__value_.__l.__data_ = v497;
                          *((_QWORD *)v471 + 4) = 0;
                          *((_QWORD *)v471 + 5) = 0;
                          *((_QWORD *)v471 + 3) = 0;
                          ++v495;
                          v471 += 3;
                        }
                        while (v495 != v494 + v473);
                        v1063.__end_ = v494 + v473;
                        std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&v1059, v477, v477, v1058, v1058, (uint64_t)v494, (uint64_t)v494);
                        v1063.__begin_ = v498;
                        v499 = *((_QWORD *)&v1058 + 1);
                        v500 = v1063.__end_;
                        v967[0] = v1063.__end_;
                        v1048.__r_.__value_.__r.__words[0] = (std::string::size_type)v1063.__end_;
                        v1025 = &v1059;
                        v1026 = &v1048;
                        v1027 = v967;
                        if (*((_QWORD *)&v1058 + 1) != v477)
                        {
                          do
                          {
                            v501 = *(_OWORD *)v477;
                            v500->first.__r_.__value_.__r.__words[2] = *(_QWORD *)(v477 + 16);
                            *(_OWORD *)&v500->first.__r_.__value_.__l.__data_ = v501;
                            *(_QWORD *)(v477 + 8) = 0;
                            *(_QWORD *)(v477 + 16) = 0;
                            *(_QWORD *)v477 = 0;
                            v502 = *(_OWORD *)(v477 + 24);
                            v500->second.__r_.__value_.__r.__words[2] = *(_QWORD *)(v477 + 40);
                            *(_OWORD *)&v500->second.__r_.__value_.__l.__data_ = v502;
                            *(_QWORD *)(v477 + 32) = 0;
                            *(_QWORD *)(v477 + 40) = 0;
                            *(_QWORD *)(v477 + 24) = 0;
                            ++v500;
                            v477 += 48;
                          }
                          while (v477 != v499);
                          v967[0] = v500;
                        }
                        LOBYTE(v1028) = 1;
                        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v1025);
                        v503 = v1058;
                        *(_QWORD *)&v1058 = v1063.__begin_;
                        *((_QWORD *)&v1058 + 1) = v500;
                        *(_OWORD *)&v1063.__begin_ = v503;
                        v504 = v1059;
                        v1059 = v1063.__end_cap_.__value_;
                        v1063.__end_cap_.__value_ = v504;
                        v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v503;
                        std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&v1063);
                      }
                    }
LABEL_743:
                    v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)__p;
                    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1063);
                    if (v468)
                    {
                      v505 = (unint64_t *)v468 + 1;
                      do
                        v506 = __ldaxr(v505);
                      while (__stlxr(v506 - 1, v505));
                      if (!v506)
                      {
                        (*(void (**)(__int128 *))(*(_QWORD *)v468 + 16))(v468);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v468);
                      }
                    }
                    v508 = *(std::string **)v467;
                    v507 = *(std::pair<std::string, std::string> **)(v467 + 8);
                    v1063.__first_ = *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)v467;
                    v1063.__begin_ = v507;
                    if (v507)
                    {
                      v509 = &v507->first.__r_.__value_.__l.__size_;
                      do
                        v510 = __ldxr(v509);
                      while (__stxr(v510 + 1, v509));
                    }
                    v511 = v982;
                    v512 = &v982;
                    v513 = &v982;
                    if (v982)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v512 = (char **)v511;
                          v514 = *((_QWORD *)v511 + 4);
                          if ((unint64_t)v508 >= v514)
                            break;
                          v511 = *v512;
                          v513 = v512;
                          if (!*v512)
                            goto LABEL_758;
                        }
                        if (v514 >= (unint64_t)v508)
                          break;
                        v511 = v512[1];
                        if (!v511)
                        {
                          v513 = v512 + 1;
                          goto LABEL_758;
                        }
                      }
                      v516 = v512;
                      v452 = v961;
                    }
                    else
                    {
LABEL_758:
                      v515 = (char **)operator new(0xA8uLL);
                      v516 = v515;
                      v515[4] = (char *)v508;
                      v515[5] = (char *)v507;
                      if (v507)
                      {
                        v517 = &v507->first.__r_.__value_.__l.__size_;
                        do
                          v518 = __ldxr(v517);
                        while (__stxr(v518 + 1, v517));
                      }
                      v515[14] = 0;
                      v515[15] = 0;
                      *((_OWORD *)v515 + 5) = 0u;
                      *((_OWORD *)v515 + 6) = 0u;
                      *((_OWORD *)v515 + 3) = 0u;
                      *((_OWORD *)v515 + 4) = 0u;
                      v515[12] = (char *)(v515 + 13);
                      v515[16] = 0;
                      v515[17] = 0;
                      v515[20] = 0;
                      v515[19] = 0;
                      v515[18] = (char *)(v515 + 19);
                      *v515 = 0;
                      v515[1] = 0;
                      v515[2] = (char *)v512;
                      *v513 = (char *)v515;
                      v519 = (uint64_t *)v515;
                      v452 = v961;
                      if (*(_QWORD *)v981)
                      {
                        v981 = *(_QWORD *)v981;
                        v519 = (uint64_t *)*v513;
                      }
                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v982, v519);
                      ++v983;
                    }
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v516 + 2);
                    *((_OWORD *)v516 + 3) = *(_OWORD *)v1054;
                    v520 = (void **)(v516 + 9);
                    v521 = v516[9];
                    v516[8] = *(char **)&v1055[0];
                    *(_QWORD *)&v1055[0] = 0;
                    v1054[1] = 0;
                    v1054[0] = 0;
                    if (v521)
                    {
                      v522 = (uint64_t)v516[10];
                      v523 = v521;
                      if ((char *)v522 != v521)
                      {
                        do
                          v522 = std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v522 - 16);
                        while ((char *)v522 != v521);
                        v523 = *v520;
                      }
                      v516[10] = v521;
                      operator delete(v523);
                      *v520 = 0;
                      v516[10] = 0;
                      v516[11] = 0;
                    }
                    v525 = (char *)(v516 + 13);
                    v524 = v516[13];
                    *(_OWORD *)(v516 + 9) = *(_OWORD *)((char *)v1055 + 8);
                    v516[11] = (char *)*((_QWORD *)&v1055[1] + 1);
                    memset((char *)v1055 + 8, 0, 24);
                    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(v524);
                    v526 = v1057;
                    v516[12] = v1056;
                    v516[13] = (char *)v526;
                    v527 = *((_QWORD *)&v1057 + 1);
                    v516[14] = (char *)*((_QWORD *)&v1057 + 1);
                    if (v527)
                    {
                      *(_QWORD *)(v526 + 16) = v525;
                      v1056 = (char *)&v1057;
                      v1057 = 0uLL;
                    }
                    else
                    {
                      v516[12] = v525;
                    }
                    std::vector<std::pair<std::string,std::string>>::__vdeallocate((std::vector<std::pair<std::string, std::string>> *)v516 + 5);
                    *(_OWORD *)(v516 + 15) = v1058;
                    v529 = v516[19];
                    v528 = v516 + 19;
                    *(v528 - 2) = (char *)v1059;
                    v1059 = 0;
                    v1058 = 0uLL;
                    std::__tree<std::string>::destroy((uint64_t)(v528 - 1), v529);
                    v530 = v1061;
                    *(v528 - 1) = (char *)v1060;
                    *v528 = v530;
                    v531 = v1062;
                    v528[1] = v1062;
                    if (v531)
                    {
                      *((_QWORD *)v530 + 2) = v528;
                      v1060 = &v1061;
                      v1061 = 0;
                      v1062 = 0;
                    }
                    else
                    {
                      *(v528 - 1) = (char *)v528;
                    }
                    v532 = (std::__shared_weak_count *)v1063.__begin_;
                    if (v1063.__begin_)
                    {
                      v533 = &v1063.__begin_->first.__r_.__value_.__l.__size_;
                      do
                        v534 = __ldaxr(v533);
                      while (__stlxr(v534 - 1, v533));
                      if (!v534)
                      {
                        ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
                        std::__shared_weak_count::__release_weak(v532);
                      }
                    }
                    std::__tree<std::string>::destroy((uint64_t)&v1060, v1061);
                    v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v1058;
                    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1063);
                    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy((_QWORD *)v1057);
                    v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)((char *)v1055 + 8);
                    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1063);
                    v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v1054;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1063);
                    v467 += 16;
                    v466 = v957;
                    goto LABEL_705;
                  }
                  goto LABEL_503;
                }
                v338 = (unint64_t *)*((_QWORD *)v336 + 1);
                v1036 = *(RIO_MTLX::Element **)v336;
                v1037 = (RIO_MTLX::Element *)v338;
                if (v338)
                {
                  v339 = v338 + 1;
                  do
                    v340 = __ldxr(v339);
                  while (__stxr(v340 + 1, v339));
                }
                *(_DWORD *)v1064 = 1;
                *(_QWORD *)&v1064[8] = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
                *(_QWORD *)&v1064[24] = 0;
                v1054[0] = 0;
                pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v1063, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v1064, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1054);
                v1063.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)(MEMORY[0x24BEE9D60] + 16);
                if ((v1064[24] & 7) != 0)
                {
                  v341 = (unsigned int *)(*(_QWORD *)&v1064[24] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v342 = __ldxr(v341);
                  while (__stlxr(v342 - 2, v341));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1064[16]);
                v343 = *(realityio::mtlx::_anonymous_namespace_ **)&v1064[8];
                if (*(_QWORD *)&v1064[8])
                  v343 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v1064[8]);
                v344 = v1036;
                v346 = (const void **)v974;
                if (*((char *)v974 + 23) < 0)
                {
                  if (!v974[1])
                  {
LABEL_533:
                    v358 = v1034;
                    if (SHIBYTE(v1034->__r_.__value_.__r.__words[2]) < 0)
                    {
                      if (!v1034->__r_.__value_.__l.__size_)
                        goto LABEL_550;
LABEL_535:
                      v359 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS((RIO_MTLX *)v357);
                      RIO_MTLX::splitString(v358, v359, (uint64_t)&v976);
                      v360 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v977 - (char *)v976) >> 3));
                      if (v977 == v976)
                        v361 = 0;
                      else
                        v361 = v360;
                      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v976, (const void **)&v977->__r_.__value_.__l.__data_, (uint64_t)v1064, v361, 1);
                      v362 = v976;
                      v363 = v977;
                      if (v976 != v977)
                      {
                        do
                        {
                          v364 = v362 + 1;
                          if (&v362[1] == v363)
                          {
                            v362 = v363;
                            goto LABEL_564;
                          }
                          v365 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v1064, (unsigned __int8 *)v362, (unsigned __int8 *)&v362[1]);
                          v362 = v364;
                        }
                        while (!v365);
                        v366 = v364 + 1;
                        v367 = v364 - 1;
                        if (v366 == v363)
                        {
                          p_data = (void **)&v367->__r_.__value_.__l.__data_;
                        }
                        else
                        {
                          do
                          {
                            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v1064, (unsigned __int8 *)v367, (unsigned __int8 *)v366) & 1) != 0)
                            {
                              p_data = (void **)&v367->__r_.__value_.__l.__data_;
                            }
                            else
                            {
                              p_data = (void **)&v367[1].__r_.__value_.__l.__data_;
                              if (SHIBYTE(v367[1].__r_.__value_.__r.__words[2]) < 0)
                                operator delete(*p_data);
                              v369 = *(_OWORD *)&v366->__r_.__value_.__l.__data_;
                              v367[1].__r_.__value_.__r.__words[2] = v366->__r_.__value_.__r.__words[2];
                              *(_OWORD *)p_data = v369;
                              *((_BYTE *)&v366->__r_.__value_.__s + 23) = 0;
                              v366->__r_.__value_.__s.__data_[0] = 0;
                              ++v367;
                            }
                            ++v366;
                          }
                          while (v366 != v363);
                        }
                        v362 = (std::string *)(p_data + 3);
                      }
LABEL_564:
                      if (v362 != v977)
                      {
                        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)v1054, (__int128 *)v977, (__int128 *)v977, (uint64_t)v362);
                        v377 = v376;
                        for (kk = v977; kk != (std::string *)v377; --kk)
                        {
                          if (SHIBYTE(kk[-1].__r_.__value_.__r.__words[2]) < 0)
                            operator delete(kk[-1].__r_.__value_.__l.__data_);
                        }
                        v977 = (std::string *)v377;
                      }
                      pxrInternal__aapl__pxrReserved__::TfStringJoin();
                      LODWORD(v1054[0]) = 1;
                      v1054[1] = 0;
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
                      *((_QWORD *)&v1055[0] + 1) = 0;
                      v981 = 0;
                      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v1064, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v1054, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v981);
                      *(_QWORD *)v1064 = MEMORY[0x24BEE9D60] + 16;
                      v379 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)&v1009, &v1048, (const void **)v967);
                      v380 = (char *)*v379;
                      v381 = (char *)*v379;
                      if (!*v379)
                      {
                        v382 = v379;
                        v381 = (char *)operator new(0x58uLL);
                        v1043.__r_.__value_.__r.__words[0] = (std::string::size_type)v381;
                        v1043.__r_.__value_.__l.__size_ = (std::string::size_type)&v1010;
                        v1043.__r_.__value_.__s.__data_[16] = 0;
                        *((_OWORD *)v381 + 2) = *(_OWORD *)v967;
                        *((_QWORD *)v381 + 6) = v968;
                        v967[0] = 0;
                        v967[1] = 0;
                        v968 = 0;
                        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                        *((_QWORD *)v381 + 7) = v943;
                        v383 = *(_QWORD *)&v1064[24];
                        *((_QWORD *)v381 + 10) = *(_QWORD *)&v1064[24];
                        if ((v383 & 7) != 0)
                        {
                          v384 = (unsigned int *)(v383 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v385 = __ldxr(v384);
                          while (__stxr(v385 + 2, v384));
                          if ((v385 & 1) == 0)
                            *((_QWORD *)v381 + 10) &= 0xFFFFFFFFFFFFFFF8;
                        }
                        *((_QWORD *)v381 + 7) = MEMORY[0x24BEE9D60] + 16;
                        v1043.__r_.__value_.__s.__data_[16] = 1;
                        v386 = v1048.__r_.__value_.__r.__words[0];
                        *(_QWORD *)v381 = 0;
                        *((_QWORD *)v381 + 1) = 0;
                        *((_QWORD *)v381 + 2) = v386;
                        *v382 = (uint64_t *)v381;
                        v387 = (uint64_t *)v381;
                        if (*v1009)
                        {
                          v1009 = (uint64_t **)*v1009;
                          v387 = *v382;
                        }
                        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v1010, v387);
                        ++v1011;
                        v1043.__r_.__value_.__r.__words[0] = 0;
                        std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>>>>::reset[abi:ne180100]((uint64_t)&v1043);
                      }
                      MEMORY[0x2348B2038](v1064);
                      if ((BYTE8(v1055[0]) & 7) != 0)
                      {
                        v388 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                        do
                          v389 = __ldxr(v388);
                        while (__stlxr(v389 - 2, v388));
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                      if (v1054[1])
                        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                      if (v380)
                      {
                        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                        v390 = *((_QWORD *)v381 + 10);
                        v1025 = (std::pair<std::string, std::string> **)(MEMORY[0x24BEE9D58] + 16);
                        v1028 = v390;
                        if ((v390 & 7) != 0)
                        {
                          v391 = (unsigned int *)(v390 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v392 = __ldxr(v391);
                          while (__stxr(v392 + 2, v391));
                          if ((v392 & 1) == 0)
                            v1028 &= 0xFFFFFFFFFFFFFFF8;
                        }
                        v1025 = (std::pair<std::string, std::string> **)(MEMORY[0x24BEE9D60] + 16);
                      }
                      else
                      {
                        v393 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v990);
                        v1054[0] = 0;
                        pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v393, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v992, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1054);
                        if (((uint64_t)v1054[0] & 7) != 0)
                        {
                          v394 = (unsigned int *)((unint64_t)v1054[0] & 0xFFFFFFFFFFFFFFF8);
                          do
                            v395 = __ldxr(v394);
                          while (__stlxr(v395 - 2, v394));
                        }
                        for (mm = __val; ; mm = ++__val)
                        {
                          std::to_string(&v1048, mm);
                          v397 = std::string::insert(&v1048, 0, "geom_");
                          v398 = *(_OWORD *)&v397->__r_.__value_.__l.__data_;
                          v1043.__r_.__value_.__r.__words[2] = v397->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v1043.__r_.__value_.__l.__data_ = v398;
                          v397->__r_.__value_.__l.__size_ = 0;
                          v397->__r_.__value_.__r.__words[2] = 0;
                          v397->__r_.__value_.__r.__words[0] = 0;
                          MEMORY[0x2348B2764](&v981, &v1043);
                          pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v1054, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v1064, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v981);
                          v1054[0] = (void *)(MEMORY[0x24BEE9D60] + 16);
                          if (!v1054[1] || (*((_BYTE *)v1054[1] + 57) & 8) != 0)
                            v399 = 0;
                          else
                            v399 = v952(v1054);
                          MEMORY[0x2348B2038](v1054);
                          if ((v981 & 7) != 0)
                          {
                            v400 = (unsigned int *)(v981 & 0xFFFFFFFFFFFFFFF8);
                            do
                              v401 = __ldxr(v400);
                            while (__stlxr(v401 - 2, v400));
                          }
                          if (SHIBYTE(v1043.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v1043.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v1048.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v1048.__r_.__value_.__l.__data_);
                          if (!v399)
                            break;
                        }
                        std::to_string(&v1048, __val);
                        v402 = std::string::insert(&v1048, 0, "geom_");
                        v403 = *(_OWORD *)&v402->__r_.__value_.__l.__data_;
                        v1043.__r_.__value_.__r.__words[2] = v402->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v1043.__r_.__value_.__l.__data_ = v403;
                        v402->__r_.__value_.__l.__size_ = 0;
                        v402->__r_.__value_.__r.__words[2] = 0;
                        v402->__r_.__value_.__r.__words[0] = 0;
                        MEMORY[0x2348B2764](&v981, &v1043);
                        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply();
                        v404 = v1054[1];
                        if (v1054[1])
                        {
                          v405 = (unint64_t *)((char *)v1054[1] + 48);
                          do
                            v406 = __ldxr(v405);
                          while (__stxr(v406 + 1, v405));
                        }
                        v407 = *((_QWORD *)v381 + 8);
                        *((_QWORD *)v381 + 8) = v404;
                        if (v407)
                          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v407);
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v381 + 72), v1055);
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v381 + 76), (_DWORD *)v1055 + 1);
                        v408 = (uint64_t *)(v381 + 80);
                        pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)v381 + 10, (_QWORD *)v1055 + 1);
                        MEMORY[0x2348B2038](v1054);
                        if ((v981 & 7) != 0)
                        {
                          v409 = (unsigned int *)(v981 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v410 = __ldxr(v409);
                          while (__stlxr(v410 - 2, v409));
                        }
                        if (SHIBYTE(v1043.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v1043.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v1048.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v1048.__r_.__value_.__l.__data_);
                        ActiveGeomPrefix = RIO_MTLX::Element::getActiveGeomPrefix(v1036);
                        v412 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v381 + 56);
                        v413 = v976;
                        v414 = v977;
                        if (v976 != v977)
                        {
                          v415 = (const void **)ActiveGeomPrefix;
                          do
                          {
                            pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(v412);
                            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v415, (const void **)&v413->__r_.__value_.__l.__data_, (uint64_t)&v1043);
                            if (SHIBYTE(v1043.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v1043.__r_.__value_.__l.__data_);
                            if ((BYTE8(v1055[0]) & 7) != 0)
                            {
                              v416 = (unsigned int *)(*((_QWORD *)&v1055[0] + 1) & 0xFFFFFFFFFFFFFFF8);
                              do
                                v417 = __ldxr(v416);
                              while (__stlxr(v417 - 2, v416));
                            }
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v1055);
                            if (v1054[1])
                              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v1054[1]);
                            ++v413;
                          }
                          while (v413 != v414);
                        }
                        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                        v418 = *v408;
                        v1025 = (std::pair<std::string, std::string> **)(MEMORY[0x24BEE9D58] + 16);
                        v1028 = v418;
                        if ((v418 & 7) != 0)
                        {
                          v419 = (unsigned int *)(v418 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v420 = __ldxr(v419);
                          while (__stxr(v420 + 2, v419));
                          if ((v420 & 1) == 0)
                            v1028 &= 0xFFFFFFFFFFFFFFF8;
                        }
                        v1025 = (std::pair<std::string, std::string> **)(MEMORY[0x24BEE9D60] + 16);
                        if ((v1064[24] & 7) != 0)
                        {
                          v421 = (unsigned int *)(*(_QWORD *)&v1064[24] & 0xFFFFFFFFFFFFFFF8);
                          do
                            v422 = __ldxr(v421);
                          while (__stlxr(v422 - 2, v421));
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1064[16]);
                        if (*(_QWORD *)&v1064[8])
                          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v1064[8]);
                      }
                      if (SHIBYTE(v968) < 0)
                        operator delete(v967[0]);
                      *(_QWORD *)v1064 = &v976;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1064);
                    }
                    else
                    {
                      if (*((_BYTE *)&v1034->__r_.__value_.__s + 23))
                        goto LABEL_535;
LABEL_550:
                      *(_DWORD *)v1064 = 1;
                      *(_QWORD *)&v1064[8] = 0;
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
                      *(_QWORD *)&v1064[24] = 0;
                      v1054[0] = 0;
                      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v1025, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v1064, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1054);
                      v1025 = (std::pair<std::string, std::string> **)(MEMORY[0x24BEE9D60] + 16);
                      if ((v1064[24] & 7) != 0)
                      {
                        v370 = (unsigned int *)(*(_QWORD *)&v1064[24] & 0xFFFFFFFFFFFFFFF8);
                        do
                          v371 = __ldxr(v370);
                        while (__stlxr(v371 - 2, v370));
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1064[16]);
                      if (*(_QWORD *)&v1064[8])
                        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v1064[8]);
                    }
                    if (v1026
                      && (v1026[2].__r_.__value_.__s.__data_[9] & 8) == 0
                      && ((unsigned int (*)(std::pair<std::string, std::string> ***))v1025[4])(&v1025))
                    {
                      v423 = (std::pair<std::string, std::string> *)v1026;
                      if (v1026)
                      {
                        v424 = (unint64_t *)&v1026[2];
                        do
                          v425 = __ldxr(v424);
                        while (__stxr(v425 + 1, v424));
                      }
                      v426 = v1063.__begin_;
                      v1063.__begin_ = v423;
                      if (v426)
                        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v426);
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v1063.__end_, &v1027);
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v1063.__end_ + 4, (_DWORD *)&v1027 + 1);
                      pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v1063.__end_cap_.__value_, &v1028);
                    }
                    MEMORY[0x2348B2038](&v1025);
                    goto LABEL_654;
                  }
                }
                else if (!*((_BYTE *)v974 + 23))
                {
                  goto LABEL_533;
                }
                v347 = v1007;
                if (!v1007)
                  goto LABEL_525;
                v348 = &v1007;
                do
                {
                  v349 = v348;
                  v350 = (const void **)(v347 + 32);
                  v351 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v1008, (const void **)(v347 + 32), v346);
                  v352 = (uint64_t *)(v347 + 8);
                  if (!v351)
                  {
                    v352 = (uint64_t *)v347;
                    v348 = (uint64_t *)v347;
                  }
                  v347 = *v352;
                }
                while (*v352);
                if (v348 == &v1007
                  || (!v351 ? (v353 = v350) : (v353 = (const void **)(v349 + 4)),
                      std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v1008, v346, v353)))
                {
LABEL_525:
                  *(_QWORD *)v1064 = "CoreRealityIO/mtlxToUsdShade.cpp";
                  *(_QWORD *)&v1064[8] = "AddGeometryReference";
                  *(_QWORD *)&v1064[16] = 1588;
                  *(_QWORD *)&v1064[24] = "UsdCollectionAPI realityio::mtlx::(anonymous namespace)::_Context::AddGeometry"
                                          "Reference(const mx::ConstGeomElementPtr &)";
                  LOBYTE(v1065) = 0;
                  v1026 = 0;
                  v1025 = 0;
                  RIO_MTLX::Element::getNamePath(v1036, (uint64_t)&v1025, (uint64_t)v1054);
                  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
                  if (SBYTE7(v1055[0]) < 0)
                    operator delete(v1054[0]);
                  v354 = (std::__shared_weak_count *)v1026;
                  if (v1026)
                  {
                    v355 = &v1026->__r_.__value_.__l.__size_;
                    do
                      v356 = __ldaxr(v355);
                    while (__stlxr(v356 - 1, v355));
                    if (!v356)
                    {
                      ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                      std::__shared_weak_count::__release_weak(v354);
                    }
                  }
                }
                else
                {
                  v372 = (std::pair<std::string, std::string> *)v348[8];
                  if (v372)
                  {
                    v373 = (unint64_t *)&v372[1];
                    do
                      v374 = __ldxr(v373);
                    while (__stxr(v374 + 1, v373));
                  }
                  v375 = v1063.__begin_;
                  v1063.__begin_ = v372;
                  if (v375)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v375);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v1063.__end_, (_DWORD *)v348 + 18);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v1063.__end_ + 4, (_DWORD *)v348 + 19);
                  pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v1063.__end_cap_.__value_, v348 + 10);
                }
LABEL_654:
                v427 = v1036;
                v428 = v1013;
                v429 = &v1013;
LABEL_655:
                v430 = v429;
                if (v428)
                {
                  while (1)
                  {
                    v429 = (uint64_t **)v428;
                    v431 = v428[4];
                    if (v431 > (unint64_t)v1036)
                    {
                      v428 = *v429;
                      goto LABEL_655;
                    }
                    if (v431 >= (unint64_t)v1036)
                      break;
                    v428 = v429[1];
                    if (!v428)
                    {
                      v430 = v429 + 1;
                      goto LABEL_662;
                    }
                  }
                  v432 = (uint64_t *)v429;
                }
                else
                {
LABEL_662:
                  v432 = (uint64_t *)operator new(0x50uLL);
                  v433 = v1037;
                  v432[4] = (uint64_t)v427;
                  v432[5] = (uint64_t)v433;
                  if (v433)
                  {
                    v434 = (unint64_t *)((char *)v433 + 8);
                    do
                      v435 = __ldxr(v434);
                    while (__stxr(v435 + 1, v434));
                  }
                  *(_DWORD *)v1064 = 1;
                  *(_QWORD *)&v1064[8] = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
                  *(_QWORD *)&v1064[24] = 0;
                  v1054[0] = 0;
                  *pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)(v432 + 6), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v1064, (const pxrInternal__aapl__pxrReserved__::TfToken *)v1054) = MEMORY[0x24BEE9D60] + 16;
                  if ((v1064[24] & 7) != 0)
                  {
                    v436 = (unsigned int *)(*(_QWORD *)&v1064[24] & 0xFFFFFFFFFFFFFFF8);
                    do
                      v437 = __ldxr(v436);
                    while (__stlxr(v437 - 2, v436));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v1064[16]);
                  if (*(_QWORD *)&v1064[8])
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v1064[8]);
                  *v432 = 0;
                  v432[1] = 0;
                  v432[2] = (uint64_t)v429;
                  *v430 = v432;
                  v438 = v432;
                  if (*v1012)
                  {
                    v1012 = (uint64_t **)*v1012;
                    v438 = *v430;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v1013, v438);
                  ++v1014;
                }
                v439 = v1063.__begin_;
                if (v1063.__begin_)
                {
                  v440 = v1063.__begin_ + 1;
                  do
                    v441 = __ldxr((unint64_t *)v440);
                  while (__stxr(v441 + 1, (unint64_t *)v440));
                }
                v442 = v432[7];
                v432[7] = (uint64_t)v439;
                if (v442)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v442);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v432 + 8), &v1063.__end_);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v432 + 68, (_DWORD *)&v1063.__end_ + 1);
                v443 = v432 + 9;
                pxrInternal__aapl__pxrReserved__::TfToken::operator=(v443, &v1063.__end_cap_.__value_);
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                v444 = *v443;
                v1049.__r_.__value_.__r.__words[0] = MEMORY[0x24BEE9D58] + 16;
                v1050 = v444;
                if ((v444 & 7) != 0)
                {
                  v445 = (unsigned int *)(v444 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v446 = __ldxr(v445);
                  while (__stxr(v446 + 2, v445));
                  if ((v446 & 1) == 0)
                    v1050 &= 0xFFFFFFFFFFFFFFF8;
                }
                v1049.__r_.__value_.__r.__words[0] = MEMORY[0x24BEE9D60] + 16;
                MEMORY[0x2348B2038](&v1063);
                MEMORY[0x2348B2038](&v1049);
                v447 = (std::__shared_weak_count *)v1037;
                if (v1037)
                {
                  v448 = (unint64_t *)((char *)v1037 + 8);
                  do
                    v449 = __ldaxr(v448);
                  while (__stlxr(v449 - 1, v448));
                  if (!v449)
                  {
                    ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
                    std::__shared_weak_count::__release_weak(v447);
                  }
                }
                v336 += 16;
              }
            }
LABEL_500:
            v935 = 1;
            goto LABEL_501;
          }
        }
      }
    }
    if (*(_BYTE *)(*(_QWORD *)v212 + 47))
    {
      while (*(unsigned __int8 *)v217 == *(unsigned __int8 *)v218)
      {
        v217 = (const void **)((char *)v217 + 1);
        v218 = (uint64_t *)((char *)v218 + 1);
        if (!--v214)
          goto LABEL_326;
      }
      goto LABEL_327;
    }
LABEL_326:
    v211 = std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)v1054, v212);
    goto LABEL_327;
  }
LABEL_1449:
}

void sub_2301A8DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  char a69;
  char a72;
  char a73;
  uint64_t v73;

  __cxa_guard_abort(&qword_255E54F50);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a59);
  if (a68 < 0)
    operator delete(__p);
  a59 = &a69;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  a59 = &a72;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet((void **)&STACK[0x390]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a73);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x218]);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::_names(realityio::mtlx::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  realityio::mtlx::_anonymous_namespace_::_AttributeNames *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
    }
  }
}

void sub_2301AA1D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **realityio::mtlx::`anonymous namespace'::_Attr::_Attr<RIO_MTLX::Document const>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a2 + 160), a3);
  if (v4)
    v5 = (uint64_t *)(v4 + 40);
  else
    v5 = RIO_MTLX::EMPTY_STRING(0);
  v6 = *((unsigned __int8 *)v5 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = v5[1];
  if (!v6)
    v5 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v5);
  *a1 = v5;
  return a1;
}

uint64_t *RIO_MTLX::Element::getActiveColorSpace(RIO_MTLX::Element *this)
{
  std::__shared_weak_count *v1;
  RIO_MTLX::Element *ColorSpace;
  RIO_MTLX::Element *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  RIO_MTLX::Element *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  RIO_MTLX::Element *v14;
  std::__shared_weak_count *v15;

  ColorSpace = (RIO_MTLX::Element *)std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v14, (_QWORD *)this + 1);
  v3 = v14;
  if (v14)
  {
    while (1)
    {
      v4 = (unsigned __int8 *)RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE(ColorSpace);
      v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v3 + 20, v4);
      v6 = v14;
      if (v5)
        break;
      ColorSpace = (RIO_MTLX::Element *)*((_QWORD *)v14 + 29);
      if (ColorSpace
        && (ColorSpace = (RIO_MTLX::Element *)std::__shared_weak_count::lock((std::__shared_weak_count *)ColorSpace)) != 0)
      {
        v3 = (RIO_MTLX::Element *)*((_QWORD *)v6 + 28);
      }
      else
      {
        v3 = 0;
      }
      v1 = v15;
      v14 = v3;
      v15 = (std::__shared_weak_count *)ColorSpace;
      if (v1)
      {
        p_shared_owners = (unint64_t *)&v1->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
          std::__shared_weak_count::__release_weak(v1);
        }
        v3 = v14;
      }
      if (!v3)
        goto LABEL_14;
    }
    ColorSpace = (RIO_MTLX::Element *)RIO_MTLX::Element::getColorSpace(v14);
    v1 = (std::__shared_weak_count *)ColorSpace;
    v9 = 0;
  }
  else
  {
LABEL_14:
    v9 = 1;
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (!v9)
        return (uint64_t *)v1;
      return RIO_MTLX::EMPTY_STRING(ColorSpace);
    }
  }
  if (v9)
    return RIO_MTLX::EMPTY_STRING(ColorSpace);
  return (uint64_t *)v1;
}

void sub_2301AA368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::VariantAssignments::AddInherited(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  RIO_MTLX::Element *v9;
  std::string *InheritString;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void **v22[2];
  void **v23;
  void **v24;
  const void **v25;
  std::__shared_weak_count *v26;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v23 = *(void ***)a2;
  v24 = (void **)&v4->__vftable;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v22[0] = (void **)&v25;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v22);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = *(RIO_MTLX::Element **)a2;
  InheritString = (std::string *)RIO_MTLX::Element::getInheritString(v9);
  RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>((uint64_t)v9, InheritString, &v25);
  if (v25)
  {
    RIO_MTLX::Element::asA<RIO_MTLX::Look>((uint64_t)v25, &v23);
    if (v23)
    {
      v11 = (std::__shared_weak_count *)v24;
      v22[0] = v23;
      v22[1] = v24;
      if (v24)
      {
        v12 = (unint64_t *)(v24 + 1);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      if (v11)
      {
        v14 = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    v16 = (std::__shared_weak_count *)v24;
    if (v24)
    {
      v17 = (unint64_t *)(v24 + 1);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_2301AA534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::VariantAssignments::~VariantAssignments(char **this)
{
  char **v2;

  std::__tree<std::string>::destroy((uint64_t)(this + 12), this[13]);
  v2 = this + 9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(this[7]);
  v2 = this + 3;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

_QWORD *std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,pxrInternal__aapl__pxrReserved__::UsdEditTarget>::~pair(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)(a1 + 4));
  v2 = (unsigned int *)a1[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)a1[1];
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

void realityio::mtlx::`anonymous namespace'::_Context::~_Context(realityio::mtlx::_anonymous_namespace_::_Context *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v6;

  MEMORY[0x2348B20B0]((char *)this + 272);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 256);
  std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::destroy(*((_QWORD **)this + 29));
  std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::GeomElement const>,std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::shared_ptr<RIO_MTLX::GeomElement const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(*((_QWORD **)this + 26));
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(*((_QWORD **)this + 23));
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(*((_QWORD **)this + 20));
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>>>::destroy(*((_QWORD **)this + 17));
  v6 = (void **)((char *)this + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>>::destroy(*((_QWORD **)this + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 40);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v2 = (unsigned int *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>::destroy(*(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,0>(uint64_t a1)
{
  MEMORY[0x2348B2350](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::GeomElement const>,std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::shared_ptr<RIO_MTLX::GeomElement const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::GeomElement const>,std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::shared_ptr<RIO_MTLX::GeomElement const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::GeomElement const>,std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::shared_ptr<RIO_MTLX::GeomElement const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(a1[1]);
    MEMORY[0x2348B2038](a1 + 6);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,0>(uint64_t a1)
{
  MEMORY[0x2348B2038](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,0>(uint64_t a1)
{
  MEMORY[0x2348B20B0](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::NodeGraph const>,realityio::mtlx::`anonymous namespace'::_NodeGraph>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::NodeGraph const>,std::__value_type<std::shared_ptr<RIO_MTLX::NodeGraph const>,realityio::mtlx::`anonymous namespace'::_NodeGraph>,std::less<std::shared_ptr<RIO_MTLX::NodeGraph const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::NodeGraph const>,realityio::mtlx::`anonymous namespace'::_NodeGraph>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 13));
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy((_QWORD *)a1[11]);
    v2 = a1[9];
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 8));
    v5 = a1[7];
    if (v5)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void realityio::mtlx::`anonymous namespace'::_NodeGraph::~_NodeGraph(realityio::mtlx::_anonymous_namespace_::_NodeGraph *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 56);
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(*((_QWORD **)this + 5));
  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

void std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::TfToken>,0>(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 24);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>::destroy(*(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>::destroy(*(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

_QWORD *realityio::mtlx::`anonymous namespace'::_AttributeNames::_AttributeNames(realityio::mtlx::_anonymous_namespace_::_AttributeNames *this)
{
  _QWORD *v1;

  v1 = std::string::basic_string[abi:ne180100]<0>(&qword_255E54FB0, "channels");
  std::string::basic_string[abi:ne180100]<0>(v1 + 3, "cms");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E54FE0, "cmsconfig");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E54FF8, "collection");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55010, "context");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55028, "default");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55040, "doc");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55058, "enum");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55070, "enumvalues");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55088, "excludegeom");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E550A0, "geom");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E550B8, "helptext");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E550D0, "includegeom");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E550E8, "includecollection");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55100, "inherit");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55118, "interfacename");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55130, "isdefaultversion");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55148, "look");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55160, "material");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55178, "member");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55190, "nodedef");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E551A8, "nodegraph");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E551C0, "nodename");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E551D8, "node");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E551F0, "output");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55208, "semantic");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55220, "token");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55238, "type");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55250, "uicolor");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55268, "uifolder");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55280, "uimax");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55298, "uimin");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E552B0, "uiname");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E552C8, "value");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E552E0, "valuecurve");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E552F8, "valuerange");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55310, "variant");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55328, "variantassign");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55340, "variantset");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55358, "version");
  std::string::basic_string[abi:ne180100]<0>(&qword_255E55370, "xpos");
  return std::string::basic_string[abi:ne180100]<0>(qword_255E55388, "ypos");
}

void sub_2301AAFE8(_Unwind_Exception *exception_object)
{
  if (byte_255E55387 < 0)
    operator delete((void *)qword_255E55370);
  if (byte_255E5536F < 0)
    operator delete((void *)qword_255E55358);
  if (byte_255E55357 < 0)
    operator delete((void *)qword_255E55340);
  if (byte_255E5533F < 0)
    operator delete((void *)qword_255E55328);
  if (byte_255E55327 < 0)
    operator delete((void *)qword_255E55310);
  if (byte_255E5530F < 0)
    operator delete((void *)qword_255E552F8);
  if (byte_255E552F7 < 0)
    operator delete((void *)qword_255E552E0);
  if (byte_255E552DF < 0)
    operator delete((void *)qword_255E552C8);
  if (byte_255E552C7 < 0)
    operator delete((void *)qword_255E552B0);
  if (byte_255E552AF < 0)
    operator delete((void *)qword_255E55298);
  if (byte_255E55297 < 0)
    operator delete((void *)qword_255E55280);
  if (byte_255E5527F < 0)
    operator delete((void *)qword_255E55268);
  if (byte_255E55267 < 0)
    operator delete((void *)qword_255E55250);
  if (byte_255E5524F < 0)
    operator delete((void *)qword_255E55238);
  if (byte_255E55237 < 0)
    operator delete((void *)qword_255E55220);
  if (byte_255E5521F < 0)
    operator delete((void *)qword_255E55208);
  if (byte_255E55207 < 0)
    operator delete((void *)qword_255E551F0);
  if (byte_255E551EF < 0)
    operator delete((void *)qword_255E551D8);
  if (byte_255E551D7 < 0)
    operator delete((void *)qword_255E551C0);
  if (byte_255E551BF < 0)
    operator delete((void *)qword_255E551A8);
  if (byte_255E551A7 < 0)
    operator delete((void *)qword_255E55190);
  if (byte_255E5518F < 0)
    operator delete((void *)qword_255E55178);
  if (byte_255E55177 < 0)
    operator delete((void *)qword_255E55160);
  if (byte_255E5515F < 0)
    operator delete((void *)qword_255E55148);
  if (byte_255E55147 < 0)
    operator delete((void *)qword_255E55130);
  if (byte_255E5512F < 0)
    operator delete((void *)qword_255E55118);
  if (byte_255E55117 < 0)
    operator delete((void *)qword_255E55100);
  if (byte_255E550FF < 0)
    operator delete((void *)qword_255E550E8);
  if (byte_255E550E7 < 0)
    operator delete((void *)qword_255E550D0);
  if (byte_255E550CF < 0)
    operator delete((void *)qword_255E550B8);
  if (byte_255E550B7 < 0)
    operator delete((void *)qword_255E550A0);
  if (byte_255E5509F < 0)
    operator delete((void *)qword_255E55088);
  if (byte_255E55087 < 0)
    operator delete((void *)qword_255E55070);
  if (byte_255E5506F < 0)
    operator delete((void *)qword_255E55058);
  if (byte_255E55057 < 0)
    operator delete((void *)qword_255E55040);
  if (byte_255E5503F < 0)
    operator delete((void *)qword_255E55028);
  if (byte_255E55027 < 0)
    operator delete((void *)qword_255E55010);
  if (byte_255E5500F < 0)
    operator delete((void *)qword_255E54FF8);
  if (byte_255E54FF7 < 0)
    operator delete((void *)qword_255E54FE0);
  if (byte_255E54FDF < 0)
    operator delete((void *)qword_255E54FC8);
  if (byte_255E54FC7 < 0)
    operator delete((void *)qword_255E54FB0);
  _Unwind_Resume(exception_object);
}

void sub_2301AB40C()
{
  JUMPOUT(0x2301AB104);
}

void sub_2301AB414()
{
  JUMPOUT(0x2301AB11CLL);
}

void sub_2301AB41C()
{
  JUMPOUT(0x2301AB134);
}

void sub_2301AB424()
{
  JUMPOUT(0x2301AB14CLL);
}

void sub_2301AB42C()
{
  JUMPOUT(0x2301AB164);
}

void sub_2301AB434()
{
  JUMPOUT(0x2301AB17CLL);
}

void sub_2301AB43C()
{
  JUMPOUT(0x2301AB194);
}

void sub_2301AB444()
{
  JUMPOUT(0x2301AB1ACLL);
}

void sub_2301AB44C()
{
  JUMPOUT(0x2301AB1C4);
}

void sub_2301AB454()
{
  JUMPOUT(0x2301AB1DCLL);
}

void sub_2301AB45C()
{
  JUMPOUT(0x2301AB1F4);
}

void sub_2301AB464()
{
  JUMPOUT(0x2301AB20CLL);
}

void sub_2301AB46C()
{
  JUMPOUT(0x2301AB224);
}

void sub_2301AB474()
{
  JUMPOUT(0x2301AB23CLL);
}

void sub_2301AB47C()
{
  JUMPOUT(0x2301AB254);
}

void sub_2301AB484()
{
  JUMPOUT(0x2301AB26CLL);
}

void sub_2301AB48C()
{
  JUMPOUT(0x2301AB284);
}

void sub_2301AB494()
{
  JUMPOUT(0x2301AB29CLL);
}

void sub_2301AB49C()
{
  JUMPOUT(0x2301AB2B4);
}

void sub_2301AB4A4()
{
  JUMPOUT(0x2301AB2CCLL);
}

void sub_2301AB4AC()
{
  JUMPOUT(0x2301AB2E4);
}

void sub_2301AB4B4()
{
  JUMPOUT(0x2301AB2FCLL);
}

void sub_2301AB4BC()
{
  JUMPOUT(0x2301AB314);
}

void sub_2301AB4C4()
{
  JUMPOUT(0x2301AB32CLL);
}

void sub_2301AB4CC()
{
  JUMPOUT(0x2301AB344);
}

void sub_2301AB4D4()
{
  JUMPOUT(0x2301AB35CLL);
}

void sub_2301AB4DC()
{
  JUMPOUT(0x2301AB374);
}

void sub_2301AB4E4()
{
  JUMPOUT(0x2301AB38CLL);
}

void sub_2301AB4EC()
{
  JUMPOUT(0x2301AB3A4);
}

void sub_2301AB4F4()
{
  JUMPOUT(0x2301AB3BCLL);
}

void sub_2301AB4FC()
{
  JUMPOUT(0x2301AB3D4);
}

void sub_2301AB504()
{
  JUMPOUT(0x2301AB3ECLL);
}

BOOL pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>()
{
  unsigned int *v0;
  unsigned int v1;
  unsigned int *v3;

  v0 = (unsigned int *)pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>::nodes();
  v1 = atomic_load(v0);
  if (!v1)
  {
    v3 = v0;
    pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>::nodes();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode();
    v1 = atomic_load(v3);
  }
  return v1 == 2;
}

uint64_t *std::map<std::shared_ptr<RIO_MTLX::NodeGraph const>,realityio::mtlx::`anonymous namespace'::_NodeGraph>::operator[](uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = v6[4];
        if (v9 <= a2)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v9 >= a2)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
    v11 = (uint64_t *)v8;
  }
  else
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x70uLL);
    v11 = v10;
    v10[4] = a2;
    v10[5] = a3;
    if (a3)
    {
      v12 = (unint64_t *)(a3 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v7 = v11;
    v14 = (uint64_t *)**a1;
    v15 = v11;
    if (v14)
    {
      *a1 = v14;
      v15 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11 + 6;
}

realityio::mtlx::_anonymous_namespace_::_NodeGraphBuilder *realityio::mtlx::`anonymous namespace'::_NodeGraphBuilder::_NodeGraphBuilder(realityio::mtlx::_anonymous_namespace_::_NodeGraphBuilder *this)
{
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = (char *)this + 112;
  return this;
}

uint64_t realityio::mtlx::`anonymous namespace'::_NodeGraphBuilder::SetTarget(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, std::string *a4)
{
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;

  if (a4)
  else
    v10 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if ((v10 & 7) != 0)
  {
    v8 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  return result;
}

void sub_2301AB750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  unsigned int *v3;
  unsigned int v4;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  if ((a2 & 7) != 0)
  {
    v3 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::`anonymous namespace'::_NodeGraph::SetImplementation(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11))
  {
    *(_DWORD *)a1 = v11;
    v3 = v12;
    if (v12)
    {
      v4 = (unint64_t *)(v12 + 48);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    if (v6)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 16, &v13);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 20, &v14);
    pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)(a1 + 24), &v15);
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 56, (int *)&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  }
  if ((v15 & 7) != 0)
  {
    v7 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  result = v12;
  if (v12)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  return result;
}

void sub_2301AB8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::_NodeGraphBuilder::~_NodeGraphBuilder(char **this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  std::__tree<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>>>::destroy(this[14]);
  std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::Input const>,std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::shared_ptr<RIO_MTLX::Input const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(this[11]);
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(this[8]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 6));
  v2 = (unsigned int *)this[5];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t realityio::mtlx::`anonymous namespace'::_NodeGraph::_NodeGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  std::map<std::string,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100](a1 + 32, (const void ***)(a2 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 56), (_DWORD *)(a2 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 60), (_DWORD *)(a2 + 60));
  return a1;
}

void sub_2301ABA18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v1 + 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v2);
  v7 = *(_QWORD *)(v1 + 8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  _Unwind_Resume(a1);
}

realityio::mtlx::_anonymous_namespace_::_NodeGraph *realityio::mtlx::`anonymous namespace'::_NodeGraph::_NodeGraph(realityio::mtlx::_anonymous_namespace_::_NodeGraph *this)
{
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

_QWORD *std::shared_ptr<RIO_MTLX::Element const>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

uint64_t realityio::mtlx::`anonymous namespace'::_NodeGraphBuilder::SetTarget(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v5 = *(unsigned int **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (v5)
  {
    v9 = v5 + 2;
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 48, a3);
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 52, a3 + 1);
}

void realityio::mtlx::`anonymous namespace'::_MakeName(uint64_t a1, std::string *this)
{
  std::string::size_type v4;
  std::string::size_type v5;
  std::string __p;

  v4 = std::string::find(this, 58, 0);
  if (v4 == -1)
    JUMPOUT(0x2348B2764);
  v5 = v4;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    __p = *this;
  std::string::replace(&__p, v5, 1uLL, "__");
  MEMORY[0x2348B2764](a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2301ABC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdPrim *realityio::mtlx::`anonymous namespace'::_NodeGraphBuilder::Build(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t (*v5)(uint64_t *);
  char v6;
  uint64_t IsPrimPath;
  uint64_t v8;
  uint64_t *v9;
  _BOOL4 v10;
  std::string::size_type size;
  unsigned int *v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t i;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  RIO_MTLX *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  std::string::size_type v25;
  std::string::size_type v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  RIO_MTLX *v57;
  pxrInternal__aapl__pxrReserved__::UsdStage *v58;
  std::string::size_type v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t SourceURI;
  __int128 v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t IsRelativePath;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::string::size_type v93;
  uint64_t v94;
  __int128 v95;
  unint64_t *v96;
  unint64_t v97;
  std::string::size_type v98;
  std::string *p_str;
  unsigned __int8 *v100;
  std::string *v101;
  std::string *v102;
  std::string *v103;
  unsigned __int8 *v104;
  int v105;
  int64_t v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  std::string *v113;
  int v114;
  uint64_t v115;
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  int v122;
  uint64_t *v123;
  RIO_MTLX *v124;
  uint64_t v125;
  uint64_t *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  std::string::size_type v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  _QWORD *v149;
  uint64_t Text;
  const char *v151;
  std::string *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  unint64_t *v158;
  unint64_t v159;
  std::string::size_type v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  char v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int v169;
  std::string::size_type v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  RIO_MTLX *v182;
  uint64_t v183;
  uint64_t *v184;
  std::string::size_type *j;
  std::string::size_type v186;
  std::string::size_type v187;
  std::string::size_type v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  RIO_MTLX *v200;
  std::string::size_type v201;
  uint64_t *k;
  std::__shared_weak_count *v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t *v207;
  std::string::size_type v208;
  std::string **v209;
  std::string *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unsigned int *v217;
  unsigned int v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int *v236;
  unsigned int v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  _QWORD *v241;
  realityio::mtlx::_anonymous_namespace_ *v242;
  uint64_t *v243;
  std::__shared_weak_count *v244;
  uint64_t *v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  realityio::mtlx::_anonymous_namespace_ *v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int *v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int *v262;
  unsigned int v263;
  std::string::size_type v264;
  unint64_t *v265;
  unint64_t v266;
  std::string::size_type v267;
  uint64_t *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  unsigned int *v274;
  unsigned int v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t *v279;
  uint64_t *v280;
  RIO_MTLX *v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t *v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  uint64_t v287;
  unint64_t *v288;
  unint64_t v289;
  std::string::size_type v290;
  unint64_t *v291;
  unint64_t v292;
  realityio::mtlx::_anonymous_namespace_ *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  realityio::mtlx::_anonymous_namespace_ *v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  unsigned int *v305;
  unsigned int v306;
  uint64_t *v307;
  unsigned int *v308;
  unsigned int v309;
  std::string::size_type v310;
  unint64_t *v311;
  unint64_t v312;
  std::string::size_type v313;
  __int128 v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  unsigned int *v319;
  unsigned int v320;
  unsigned int *v321;
  unsigned int v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  unsigned int *v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t *v332;
  unsigned __int8 *v333;
  unint64_t v334;
  uint64_t v335;
  unsigned __int8 *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  uint64_t **v342;
  std::string *v343;
  __int128 v344;
  _QWORD *v345;
  unsigned int *v346;
  unsigned int v347;
  unint64_t v348;
  unsigned int *v349;
  unsigned int v350;
  pxrInternal__aapl__pxrReserved__::UsdPrim *result;
  _BOOL4 v352;
  uint64_t *v355;
  uint64_t *v356;
  uint64_t *v357;
  uint64_t *v358;
  __int128 v359;
  uint64_t *v360;
  uint64_t *v361;
  char v362[8];
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  int data;
  pxrInternal__aapl__pxrReserved__::UsdPrim *v367;
  int v368;
  int v369;
  unint64_t v370;
  __int128 v371;
  std::string *v372;
  std::__shared_weak_count *v373;
  __int128 v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  uint64_t *v381;
  std::__shared_weak_count *v382;
  uint64_t v383;
  uint64_t v384;
  __int128 v385;
  uint64_t v386;
  uint64_t v387;
  std::string::size_type v388;
  std::string *v389;
  std::__shared_weak_count *v390;
  char v391;
  std::string v392;
  std::string v393;
  unint64_t v394;
  std::string::size_type v395;
  _BYTE v396[4];
  _BYTE v397[4];
  uint64_t v398;
  std::string __str;
  const char *v400;
  char v401;
  uint64_t v402;

  v402 = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 4;
  v5 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const(a2 + 4);
  if (!(v6 & 1 | (unint64_t)v5))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"Build";
    __str.__r_.__value_.__r.__words[2] = 689;
    v400 = "UsdPrim realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::Build(ShaderNamesByOutputName *)";
    v401 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper() & 1) == 0)
      return pxrInternal__aapl__pxrReserved__::UsdPrim::UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)a1);
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 6))
    || (IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 6)),
        (IsPrimPath & 1) == 0))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"Build";
    __str.__r_.__value_.__r.__words[2] = 692;
    v400 = "UsdPrim realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::Build(ShaderNamesByOutputName *)";
    v401 = 0;
    IsPrimPath = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
    if ((IsPrimPath & 1) == 0)
      return pxrInternal__aapl__pxrReserved__::UsdPrim::UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)a1);
  }
  v8 = a2[2];
  v356 = a2 + 2;
  v9 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)IsPrimPath);
  v10 = RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(v8, (unsigned __int8 *)v9);
  data = 1;
  v367 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v370 = 0;
  v352 = v10;
  if (v10)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Define();
    if (!v378 || (*(_BYTE *)(v378 + 57) & 8) != 0 || (((uint64_t (*)(uint64_t **))v377[4])(&v377) & 1) == 0)
    {
      *(_DWORD *)a1 = 1;
      *(_QWORD *)(a1 + 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      *(_QWORD *)(a1 + 24) = 0;
      MEMORY[0x2348B2170](&v377);
      if ((v370 & 7) != 0)
      {
        v329 = (unsigned int *)(v370 & 0xFFFFFFFFFFFFFFF8);
        do
          v330 = __ldxr(v329);
        while (__stlxr(v330 - 2, v329));
      }
      goto LABEL_580;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&__str, &v378, &v379);
    data = (int)__str.__r_.__value_.__l.__data_;
    size = __str.__r_.__value_.__l.__size_;
    __str.__r_.__value_.__l.__size_ = 0;
    v367 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)size;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v368, (int *)&__str.__r_.__value_.__r.__words[2]);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v369);
    if ((v370 & 7) != 0)
    {
      v12 = (unsigned int *)(v370 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    v370 = (unint64_t)v400;
    v400 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
    if (__str.__r_.__value_.__l.__size_)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
    if (*a2)
    {
      v16 = *((_QWORD *)&v374 + 1);
      for (i = v374; i != v16; i += 16)
      {
        v18 = *(uint64_t **)i;
        v17 = *(std::__shared_weak_count **)(i + 8);
        v389 = *(std::string **)i;
        v390 = v17;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        v21 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v377);
        v22 = RIO_MTLX::EMPTY_STRING(v21);
        RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>((uint64_t)v18, (unsigned __int8 *)v22, (uint64_t)&v381);
        v23 = v381;
        v24 = (uint64_t)v382;
        if (v381 != (uint64_t *)v382)
        {
          do
          {
            v25 = *v23;
            v26 = v23[1];
            v393.__r_.__value_.__r.__words[0] = *v23;
            v393.__r_.__value_.__l.__size_ = v26;
            if (v26)
            {
              v27 = (unint64_t *)(v26 + 8);
              do
                v28 = __ldxr(v27);
              while (__stxr(v28 + 1, v27));
              v392.__r_.__value_.__l.__size_ = v26;
              do
                v29 = __ldxr(v27);
              while (__stxr(v29 + 1, v27));
            }
            else
            {
              v392.__r_.__value_.__l.__size_ = 0;
            }
            v392.__r_.__value_.__r.__words[0] = v25;
            if ((v400 & 7) != 0)
            {
              v30 = (unsigned int *)((unint64_t)v400 & 0xFFFFFFFFFFFFFFF8);
              do
                v31 = __ldxr(v30);
              while (__stlxr(v31 - 2, v30));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
            if (__str.__r_.__value_.__l.__size_)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
            v32 = (std::__shared_weak_count *)v392.__r_.__value_.__l.__size_;
            if (v392.__r_.__value_.__l.__size_)
            {
              v33 = (unint64_t *)(v392.__r_.__value_.__l.__size_ + 8);
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            v35 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
            if (v393.__r_.__value_.__l.__size_)
            {
              v36 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            v23 += 2;
          }
          while (v23 != (uint64_t *)v24);
          v17 = v390;
        }
        v393.__r_.__value_.__r.__words[0] = (std::string::size_type)&v381;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v393);
        MEMORY[0x2348B2350](&v394);
        if (v17)
        {
          v38 = (unint64_t *)&v17->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v374;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    }
    v40 = *v356;
    v41 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v14);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>(v40, (unsigned __int8 *)v41, (uint64_t)&v394);
    v42 = (uint64_t **)v394;
    v43 = v395;
    if (v394 != v395)
    {
      do
      {
        v44 = *v42;
        v45 = (uint64_t)v42[1];
        v381 = *v42;
        v382 = (std::__shared_weak_count *)v45;
        if (v45)
        {
          v46 = (unint64_t *)(v45 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
          *((_QWORD *)&v374 + 1) = v45;
          do
            v48 = __ldxr(v46);
          while (__stxr(v48 + 1, v46));
        }
        else
        {
          *((_QWORD *)&v374 + 1) = 0;
        }
        *(_QWORD *)&v374 = v44;
        pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v377);
        if ((v365 & 7) != 0)
        {
          v49 = (unsigned int *)(v365 & 0xFFFFFFFFFFFFFFF8);
          do
            v50 = __ldxr(v49);
          while (__stlxr(v50 - 2, v49));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v364);
        if (v363)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v363);
        MEMORY[0x2348B2350](&__str);
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
        if (*((_QWORD *)&v374 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v54 = v382;
        if (v382)
        {
          v55 = (unint64_t *)&v382->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v42 += 2;
      }
      while (v42 != (uint64_t **)v43);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v394;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    v57 = (RIO_MTLX *)MEMORY[0x2348B2170](&v377);
  }
  else
  {
    v58 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v4);
    v394 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 6), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v394);
    data = (int)__str.__r_.__value_.__l.__data_;
    v59 = __str.__r_.__value_.__l.__size_;
    __str.__r_.__value_.__l.__size_ = 0;
    v367 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)v59;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v368, (int *)&__str.__r_.__value_.__r.__words[2]);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v369);
    if ((v370 & 7) != 0)
    {
      v60 = (unsigned int *)(v370 & 0xFFFFFFFFFFFFFFF8);
      do
        v61 = __ldxr(v60);
      while (__stlxr(v61 - 2, v60));
    }
    v370 = (unint64_t)v400;
    v400 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
    v57 = (RIO_MTLX *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
      v57 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
    if ((v394 & 7) != 0)
    {
      v62 = (unsigned int *)(v394 & 0xFFFFFFFFFFFFFFF8);
      do
        v63 = __ldxr(v62);
      while (__stlxr(v63 - 2, v62));
    }
  }
  v64 = *v356;
  v65 = RIO_MTLX::EMPTY_STRING(v57);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Node>(v64, (unsigned __int8 *)v65, (uint64_t)&v360);
  v67 = v360;
  v358 = v361;
  if (v360 != v361)
  {
    v355 = (uint64_t *)(MEMORY[0x24BEE9DC0] + 16);
    do
    {
      v68 = (uint64_t *)__str.__r_.__value_.__r.__words[0];
      if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        v70 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
        if (v70 == 8)
        {
          v68 = *(uint64_t **)__str.__r_.__value_.__l.__data_;
LABEL_99:
          if (*v68 != 0x6C6169726574616DLL)
            goto LABEL_100;
          goto LABEL_395;
        }
        if (v70 != 13)
          goto LABEL_100;
        v68 = *(uint64_t **)__str.__r_.__value_.__l.__data_;
      }
      else
      {
        v69 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
        if (v69 == 8)
          goto LABEL_99;
        if (v69 != 13)
          goto LABEL_100;
      }
      v71 = *v68;
      v72 = *(uint64_t *)((char *)v68 + 5);
      v73 = v71 == 0x7365636166727573 && v72 == 0x7265646168736563;
      if (!v73)
      {
LABEL_100:
        v74 = v67[1];
        *(_QWORD *)&v359 = *v67;
        *((_QWORD *)&v359 + 1) = v74;
        if (v74)
        {
          v75 = (unint64_t *)(v74 + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        if (__str.__r_.__value_.__r.__words[0])
          v66 = (uint64_t **)MEMORY[0x2348B2764](&v388, __str.__r_.__value_.__r.__words[0] + 48);
        else
          v388 = 0;
        v77 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_)
        {
          v78 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (!v388 && *a2)
          goto LABEL_390;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&data);
        LODWORD(__str.__r_.__value_.__l.__data_) = 1;
        __str.__r_.__value_.__l.__size_ = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v400 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v398 = 0;
        v394 = (unint64_t)v355;
        if ((v400 & 7) != 0)
        {
          v80 = (unsigned int *)((unint64_t)v400 & 0xFFFFFFFFFFFFFFF8);
          do
            v81 = __ldxr(v80);
          while (__stlxr(v81 - 2, v80));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
        if (__str.__r_.__value_.__l.__size_)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
        if (!(_QWORD)v385)
          goto LABEL_246;
        v82 = (std::__shared_weak_count *)*((_QWORD *)&v385 + 1);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v385;
        if (*((_QWORD *)&v385 + 1))
        {
          v83 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 8);
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
        SourceURI = realityio::mtlx::UsdMtlxGetSourceURI((uint64_t *)&__str);
        if (*(char *)(SourceURI + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v393, *(const std::string::value_type **)SourceURI, *(_QWORD *)(SourceURI + 8));
        }
        else
        {
          v86 = *(_OWORD *)SourceURI;
          v393.__r_.__value_.__r.__words[2] = *(_QWORD *)(SourceURI + 16);
          *(_OWORD *)&v393.__r_.__value_.__l.__data_ = v86;
        }
        if (v82)
        {
          v87 = (unint64_t *)&v82->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        IsRelativePath = pxrInternal__aapl__pxrReserved__::TfIsRelativePath();
        if ((_DWORD)IsRelativePath)
        {
          v90 = v385;
          v91 = *(std::__shared_weak_count **)(v385 + 232);
          if (v91)
          {
            v92 = std::__shared_weak_count::lock(v91);
            if (v92)
              v93 = *(_QWORD *)(v90 + 224);
            else
              v93 = 0;
          }
          else
          {
            v93 = 0;
            v92 = 0;
          }
          v392.__r_.__value_.__r.__words[0] = v93;
          v392.__r_.__value_.__l.__size_ = (std::string::size_type)v92;
          v94 = realityio::mtlx::UsdMtlxGetSourceURI((uint64_t *)&v392);
          if (*(char *)(v94 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v94, *(_QWORD *)(v94 + 8));
          }
          else
          {
            v95 = *(_OWORD *)v94;
            __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v94 + 16);
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v95;
          }
          if (v92)
          {
            v96 = (unint64_t *)&v92->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
          v98 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          p_str = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v98 = __str.__r_.__value_.__l.__size_;
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v98)
          {
            v100 = (unsigned __int8 *)p_str + v98;
            v101 = p_str;
            v102 = (std::string *)v100;
            do
            {
              v103 = v101;
              v104 = (unsigned __int8 *)v101;
              while (1)
              {
                v105 = *v104++;
                if (v105 == 47)
                  break;
                v103 = (std::string *)v104;
                if (v104 == v100)
                {
                  v103 = v102;
                  goto LABEL_154;
                }
              }
              v101 = (std::string *)((char *)&v103->__r_.__value_.__l.__data_ + 1);
              v102 = v103;
            }
            while (v104 != v100);
LABEL_154:
            if (v103 != (std::string *)v100)
            {
              v106 = (char *)v103 - (char *)p_str;
              if (v106 != -1)
              {
                std::string::basic_string(&v392, &__str, 0, v106 + 1, (std::allocator<char> *)&v389);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                __str = v392;
              }
            }
          }
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v393.__r_.__value_.__l.__data_, (uint64_t)&v389);
          IsRelativePath = pxrInternal__aapl__pxrReserved__::ArchNormPath();
          if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v393.__r_.__value_.__l.__data_);
          v393 = v392;
          *((_BYTE *)&v392.__r_.__value_.__s + 23) = 0;
          v392.__r_.__value_.__s.__data_[0] = 0;
          if (v391 < 0)
            operator delete(v389);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        v107 = atomic_load((unsigned __int8 *)&qword_255E54F30);
        if ((v107 & 1) == 0)
        {
          IsRelativePath = __cxa_guard_acquire(&qword_255E54F30);
          if ((_DWORD)IsRelativePath)
          {
            qword_255E54F78 = 0;
            qword_255E54F70 = 0;
            qword_255E54F68 = (uint64_t)&qword_255E54F70;
            __cxa_guard_release(&qword_255E54F30);
          }
        }
        v108 = atomic_load((unsigned __int8 *)&qword_255E54F38);
        if ((v108 & 1) == 0)
        {
          IsRelativePath = __cxa_guard_acquire(&qword_255E54F38);
          if ((_DWORD)IsRelativePath)
          {
            v241 = std::string::basic_string[abi:ne180100]<0>(&__str, "");
            realityio::mtlx::UsdMtlxGetDocument((uint64_t)v241, &v392);
            RIO_MTLX::Document::getReferencedSourceUris((RIO_MTLX::Document *)v392.__r_.__value_.__l.__data_, (uint64_t)&unk_255E54F80);
            std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v392);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            __cxa_guard_release(&qword_255E54F38);
          }
        }
        v109 = qword_255E54F88;
        if (!qword_255E54F88)
          goto LABEL_174;
        v110 = &qword_255E54F88;
        do
        {
          IsRelativePath = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&unk_255E54F90, (const void **)(v109 + 32), (const void **)&v393.__r_.__value_.__l.__data_);
          v111 = (uint64_t *)(v109 + 8);
          if (!(_DWORD)IsRelativePath)
          {
            v111 = (uint64_t *)v109;
            v110 = (uint64_t *)v109;
          }
          v109 = *v111;
        }
        while (*v111);
        if (v110 == &qword_255E54F88
          || (IsRelativePath = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&unk_255E54F90, (const void **)&v393.__r_.__value_.__l.__data_, (const void **)v110 + 4), (_DWORD)IsRelativePath))
        {
LABEL_174:
          v112 = qword_255E54F68;
          v113 = (std::string *)v385;
          if ((uint64_t *)qword_255E54F68 != &qword_255E54F70)
          {
            v114 = *(char *)(v385 + 71);
            if (v114 >= 0)
              v115 = *(unsigned __int8 *)(v385 + 71);
            else
              v115 = *(_QWORD *)(v385 + 56);
            if (v114 >= 0)
              v116 = (unsigned __int8 *)(v385 + 48);
            else
              v116 = *(unsigned __int8 **)(v385 + 48);
            do
            {
              v117 = *(unsigned __int8 *)(v112 + 55);
              if ((v117 & 0x80u) == 0)
                v118 = *(unsigned __int8 *)(v112 + 55);
              else
                v118 = *(_QWORD *)(v112 + 40);
              if (v118 == v115)
              {
                if ((v117 & 0x80) != 0)
                {
                  IsRelativePath = memcmp(*(const void **)(v112 + 32), v116, *(_QWORD *)(v112 + 40));
                  if (!(_DWORD)IsRelativePath)
                  {
LABEL_200:
                    v122 = 1;
                    goto LABEL_216;
                  }
                }
                else
                {
                  if (!*(_BYTE *)(v112 + 55))
                    goto LABEL_200;
                  v119 = 0;
                  while (*(unsigned __int8 *)(v112 + v119 + 32) == v116[v119])
                  {
                    if (v117 == ++v119)
                    {
                      if ((uint64_t *)v112 == &qword_255E54F70)
                        goto LABEL_201;
                      goto LABEL_200;
                    }
                  }
                }
              }
              v120 = *(uint64_t **)(v112 + 8);
              if (v120)
              {
                do
                {
                  v121 = v120;
                  v120 = (uint64_t *)*v120;
                }
                while (v120);
              }
              else
              {
                do
                {
                  v121 = *(uint64_t **)(v112 + 16);
                  v73 = *v121 == v112;
                  v112 = (uint64_t)v121;
                }
                while (!v73);
              }
              v112 = (uint64_t)v121;
            }
            while (v121 != &qword_255E54F70);
          }
LABEL_201:
          v123 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)IsRelativePath);
          RIO_MTLX::NodeDef::getImplementation(v113, (uint64_t)v123, (RIO_MTLX::InterfaceElement **)&__str);
          v125 = __str.__r_.__value_.__r.__words[0];
          if (__str.__r_.__value_.__r.__words[0])
          {
            v126 = RIO_MTLX::EMPTY_STRING(v124);
            if (RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(v125, (unsigned __int8 *)v126))
            {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&qword_255E54F68, (const void **)(v385 + 48), v385 + 48);
              v127 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
              if (__str.__r_.__value_.__l.__size_)
              {
                v128 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                }
              }
              v122 = 1;
LABEL_216:
              if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v393.__r_.__value_.__l.__data_);
                if (!v122)
                  goto LABEL_246;
LABEL_218:
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&data, (uint64_t)&__str);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__str, &v393);
                MEMORY[0x2348B2764](&v392, v385 + 48);
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v393, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v392);
                if ((v392.__r_.__value_.__s.__data_[0] & 7) != 0)
                {
                  v133 = (unsigned int *)(v392.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v134 = __ldxr(v133);
                  while (__stlxr(v134 - 2, v133));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v393);
                if ((v400 & 7) != 0)
                {
                  v135 = (unsigned int *)((unint64_t)v400 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v136 = __ldxr(v135);
                  while (__stlxr(v136 - 2, v135));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
                if (__str.__r_.__value_.__l.__size_)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
                pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get();
                pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v393);
                v137 = __str.__r_.__value_.__l.__size_;
                if (__str.__r_.__value_.__l.__size_)
                {
                  v138 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 48);
                  do
                    v139 = __ldxr(v138);
                  while (__stxr(v139 + 1, v138));
                }
                v140 = v395;
                v395 = v137;
                if (v140)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v140);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v396, &__str.__r_.__value_.__r.__words[2]);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v397, (_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
                pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v398, &v400);
                v141 = MEMORY[0x2348B2350](&__str);
                pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(v141, (uint64_t *)&v393.__r_.__value_.__l.__size_, &v393.__r_.__value_.__r.__words[2]);
                v142 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
                *(_OWORD *)&v392.__r_.__value_.__l.__data_ = v359;
                if (*((_QWORD *)&v359 + 1))
                {
                  v143 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
                  do
                    v144 = __ldxr(v143);
                  while (__stxr(v144 + 1, v143));
                }
                if (v142)
                {
                  v145 = (unint64_t *)&v142->__shared_owners_;
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                    std::__shared_weak_count::__release_weak(v142);
                  }
                }
                if ((v400 & 7) != 0)
                {
                  v147 = (unsigned int *)((unint64_t)v400 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v148 = __ldxr(v147);
                  while (__stlxr(v148 - 2, v147));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
                if (__str.__r_.__value_.__l.__size_)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
                MEMORY[0x2348B2170](&v393);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                goto LABEL_305;
              }
              if (v122)
                goto LABEL_218;
LABEL_246:
              if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
              {
                v149 = (_QWORD *)(v359 + 48);
                if (*(char *)(v359 + 71) < 0)
                  v149 = (_QWORD *)*v149;
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&data, &__str);
                Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Processing shader node (%s) to be added under parent (%s).\n", v151, v149, Text);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str);
              }
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&data, &v393);
              v153 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
              v152 = (std::string *)v359;
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v359;
              if (*((_QWORD *)&v359 + 1))
              {
                v154 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
                do
                  v155 = __ldxr(v154);
                while (__stxr(v155 + 1, v154));
              }
              if (v152)
              else
                v392.__r_.__value_.__r.__words[0] = 0;
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v393, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v392);
              if ((v392.__r_.__value_.__s.__data_[0] & 7) != 0)
              {
                v156 = (unsigned int *)(v392.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
                do
                  v157 = __ldxr(v156);
                while (__stlxr(v157 - 2, v156));
                v153 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
              }
              if (v153)
              {
                v158 = (unint64_t *)&v153->__shared_owners_;
                do
                  v159 = __ldaxr(v158);
                while (__stlxr(v159 - 1, v158));
                if (!v159)
                {
                  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                  std::__shared_weak_count::__release_weak(v153);
                }
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v393);
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
              v160 = v388;
              if (!v388)
                goto LABEL_286;
              if ((v388 & 7) != 0)
              {
                v161 = (unsigned int *)(v388 & 0xFFFFFFFFFFFFFFF8);
                do
                  v162 = __ldxr(v161);
                while (__stxr(v162 + 2, v161));
                if ((v162 & 1) == 0)
                  v160 &= 0xFFFFFFFFFFFFFFF8;
                __str.__r_.__value_.__r.__words[0] = v160;
                __str.__r_.__value_.__l.__size_ = (std::string::size_type)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                                                + 1;
                if ((v160 & 7) != 0)
                {
                  v163 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v164 = __ldxr(v163);
                  while (__stxr(v164 + 2, v163));
                  v165 = 0;
                  if ((v164 & 1) == 0)
                    __str.__r_.__value_.__r.__words[0] &= 0xFFFFFFFFFFFFFFF8;
LABEL_278:
                  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v393, (const pxrInternal__aapl__pxrReserved__::VtValue *)&__str);
                  if ((v384 & 7) != 0)
                  {
                    v166 = (unsigned int *)(v384 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v167 = __ldxr(v166);
                    while (__stlxr(v167 - 2, v166));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v383);
                  if (v382)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v382);
                  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__str);
                  if ((v165 & 1) == 0)
                  {
                    v168 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v169 = __ldxr(v168);
                    while (__stlxr(v169 - 2, v168));
                  }
LABEL_286:
                  pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v393);
                  v170 = __str.__r_.__value_.__l.__size_;
                  if (__str.__r_.__value_.__l.__size_)
                  {
                    v171 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 48);
                    do
                      v172 = __ldxr(v171);
                    while (__stxr(v172 + 1, v171));
                  }
                  v173 = v395;
                  v395 = v170;
                  if (v173)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v173);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v396, &__str.__r_.__value_.__r.__words[2]);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v397, (_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
                  pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v398, &v400);
                  v174 = MEMORY[0x2348B2350](&__str);
                  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(v174, (uint64_t *)&v393.__r_.__value_.__l.__size_, &v393.__r_.__value_.__r.__words[2]);
                  v175 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
                  *(_OWORD *)&v392.__r_.__value_.__l.__data_ = v359;
                  if (*((_QWORD *)&v359 + 1))
                  {
                    v176 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
                    do
                      v177 = __ldxr(v176);
                    while (__stxr(v177 + 1, v176));
                  }
                  if (v175)
                  {
                    v178 = (unint64_t *)&v175->__shared_owners_;
                    do
                      v179 = __ldaxr(v178);
                    while (__stlxr(v179 - 1, v178));
                    if (!v179)
                    {
                      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                      std::__shared_weak_count::__release_weak(v175);
                    }
                  }
                  if ((v400 & 7) != 0)
                  {
                    v180 = (unsigned int *)((unint64_t)v400 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v181 = __ldxr(v180);
                    while (__stlxr(v181 - 2, v180));
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
                  if (__str.__r_.__value_.__l.__size_)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
                  MEMORY[0x2348B1EC4](&v393);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
LABEL_305:
                  v182 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v389);
                  v183 = v359;
                  v184 = RIO_MTLX::EMPTY_STRING(v182);
                  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>(v183, (unsigned __int8 *)v184, (uint64_t)&__str);
                  v186 = __str.__r_.__value_.__l.__size_;
                  for (j = (std::string::size_type *)__str.__r_.__value_.__r.__words[0];
                        j != (std::string::size_type *)v186;
                        j += 2)
                  {
                    v187 = *j;
                    v188 = j[1];
                    v393.__r_.__value_.__r.__words[0] = *j;
                    v393.__r_.__value_.__l.__size_ = v188;
                    if (v188)
                    {
                      v189 = (unint64_t *)(v188 + 8);
                      do
                        v190 = __ldxr(v189);
                      while (__stxr(v190 + 1, v189));
                      v392.__r_.__value_.__l.__size_ = v188;
                      do
                        v191 = __ldxr(v189);
                      while (__stxr(v191 + 1, v189));
                    }
                    else
                    {
                      v392.__r_.__value_.__l.__size_ = 0;
                    }
                    v392.__r_.__value_.__r.__words[0] = v187;
                    if ((v380 & 7) != 0)
                    {
                      v192 = (unsigned int *)(v380 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v193 = __ldxr(v192);
                      while (__stlxr(v193 - 2, v192));
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v379);
                    if (v378)
                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v378);
                    v194 = (std::__shared_weak_count *)v392.__r_.__value_.__l.__size_;
                    if (v392.__r_.__value_.__l.__size_)
                    {
                      v195 = (unint64_t *)(v392.__r_.__value_.__l.__size_ + 8);
                      do
                        v196 = __ldaxr(v195);
                      while (__stlxr(v196 - 1, v195));
                      if (!v196)
                      {
                        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                        std::__shared_weak_count::__release_weak(v194);
                      }
                    }
                    v197 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
                    if (v393.__r_.__value_.__l.__size_)
                    {
                      v198 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
                      do
                        v199 = __ldaxr(v198);
                      while (__stlxr(v199 - 1, v198));
                      if (!v199)
                      {
                        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                        std::__shared_weak_count::__release_weak(v197);
                      }
                    }
                  }
                  v393.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v393);
                  if ((_QWORD)v385)
                  {
                    v357 = v67;
                    v201 = __str.__r_.__value_.__l.__size_;
                    for (k = (uint64_t *)__str.__r_.__value_.__r.__words[0]; k != (uint64_t *)v201; k += 2)
                    {
                      v204 = *k;
                      v203 = (std::__shared_weak_count *)k[1];
                      v392.__r_.__value_.__r.__words[0] = *k;
                      v392.__r_.__value_.__l.__size_ = (std::string::size_type)v203;
                      if (v203)
                      {
                        v205 = (unint64_t *)&v203->__shared_owners_;
                        do
                          v206 = __ldxr(v205);
                        while (__stxr(v206 + 1, v205));
                      }
                      v207 = RIO_MTLX::EMPTY_STRING(v200);
                      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v204, (unsigned __int8 *)v207, (uint64_t)&v393);
                      v208 = v393.__r_.__value_.__l.__size_;
                      v209 = (std::string **)v393.__r_.__value_.__r.__words[0];
                      if (v393.__r_.__value_.__r.__words[0] != v393.__r_.__value_.__l.__size_)
                      {
                        do
                        {
                          v210 = *v209;
                          v211 = (std::__shared_weak_count *)v209[1];
                          v389 = *v209;
                          v390 = v211;
                          if (v211)
                          {
                            v212 = (unint64_t *)&v211->__shared_owners_;
                            do
                              v213 = __ldxr(v212);
                            while (__stxr(v213 + 1, v212));
                            v373 = v211;
                            do
                              v214 = __ldxr(v212);
                            while (__stxr(v214 + 1, v212));
                          }
                          else
                          {
                            v373 = 0;
                          }
                          v372 = v210;
                          v371 = v359;
                          if (*((_QWORD *)&v359 + 1))
                          {
                            v215 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
                            do
                              v216 = __ldxr(v215);
                            while (__stxr(v216 + 1, v215));
                          }
                          if ((v376 & 7) != 0)
                          {
                            v217 = (unsigned int *)(v376 & 0xFFFFFFFFFFFFFFF8);
                            do
                              v218 = __ldxr(v217);
                            while (__stlxr(v218 - 2, v217));
                          }
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v375);
                          if (*((_QWORD *)&v374 + 1))
                            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v374 + 1));
                          v219 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
                          if (*((_QWORD *)&v371 + 1))
                          {
                            v220 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
                            do
                              v221 = __ldaxr(v220);
                            while (__stlxr(v221 - 1, v220));
                            if (!v221)
                            {
                              ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                              std::__shared_weak_count::__release_weak(v219);
                            }
                          }
                          v222 = v373;
                          if (v373)
                          {
                            v223 = (unint64_t *)&v373->__shared_owners_;
                            do
                              v224 = __ldaxr(v223);
                            while (__stlxr(v224 - 1, v223));
                            if (!v224)
                            {
                              ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                              std::__shared_weak_count::__release_weak(v222);
                            }
                          }
                          v225 = v390;
                          if (v390)
                          {
                            v226 = (unint64_t *)&v390->__shared_owners_;
                            do
                              v227 = __ldaxr(v226);
                            while (__stlxr(v227 - 1, v226));
                            if (!v227)
                            {
                              ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                              std::__shared_weak_count::__release_weak(v225);
                            }
                          }
                          v209 += 2;
                        }
                        while (v209 != (std::string **)v208);
                        v203 = (std::__shared_weak_count *)v392.__r_.__value_.__l.__size_;
                      }
                      v389 = &v393;
                      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v389);
                      if (v203)
                      {
                        v228 = (unint64_t *)&v203->__shared_owners_;
                        do
                          v229 = __ldaxr(v228);
                        while (__stlxr(v229 - 1, v228));
                        if (!v229)
                        {
                          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                          std::__shared_weak_count::__release_weak(v203);
                        }
                      }
                    }
                    v393.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v393);
                    v67 = v357;
                  }
                  else
                  {
                    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
                    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_AddNode";
                    __str.__r_.__value_.__r.__words[2] = 874;
                    v400 = "void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_AddNode(const mx::ConstNodeP"
                           "tr &, const UsdPrim &)";
                    v401 = 0;
                    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
                  }
                  MEMORY[0x2348B2350](&v394);
                  v230 = (std::__shared_weak_count *)*((_QWORD *)&v385 + 1);
                  if (*((_QWORD *)&v385 + 1))
                  {
                    v231 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 8);
                    do
                      v232 = __ldaxr(v231);
                    while (__stlxr(v232 - 1, v231));
                    if (!v232)
                    {
                      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                      std::__shared_weak_count::__release_weak(v230);
                    }
                  }
                  v66 = (uint64_t **)v387;
                  if (v387)
                  {
                    v233 = (unsigned int *)(v387 + 8);
                    do
                    {
                      v234 = __ldxr(v233);
                      v235 = v234 - 1;
                    }
                    while (__stlxr(v235, v233));
                    if (!v235)
                      v66 = (uint64_t **)((uint64_t (*)(uint64_t **))(*v66)[1])(v66);
                  }
                  if ((v388 & 7) != 0)
                  {
                    v236 = (unsigned int *)(v388 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v237 = __ldxr(v236);
                    while (__stlxr(v237 - 2, v236));
                  }
LABEL_390:
                  v238 = (std::__shared_weak_count *)*((_QWORD *)&v359 + 1);
                  if (*((_QWORD *)&v359 + 1))
                  {
                    v239 = (unint64_t *)(*((_QWORD *)&v359 + 1) + 8);
                    do
                      v240 = __ldaxr(v239);
                    while (__stlxr(v240 - 1, v239));
                    if (!v240)
                    {
                      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                      std::__shared_weak_count::__release_weak(v238);
                    }
                  }
                  goto LABEL_395;
                }
              }
              else
              {
                __str.__r_.__value_.__r.__words[0] = v388;
                __str.__r_.__value_.__l.__size_ = (std::string::size_type)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                                                + 1;
              }
              v165 = 1;
              goto LABEL_278;
            }
          }
          v130 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          if (__str.__r_.__value_.__l.__size_)
          {
            v131 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 - 1, v131));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_IsLocalCustomNode";
          __str.__r_.__value_.__r.__words[2] = 805;
          v400 = "BOOL realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_IsLocalCustomNode(const mx::ConstNodeDefPtr &)";
          v401 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
        }
        v122 = 0;
        goto LABEL_216;
      }
LABEL_395:
      v67 += 2;
    }
    while (v67 != v358);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v243 = (uint64_t *)a2[10];
  if (v243 != a2 + 11)
  {
    do
    {
      v245 = (uint64_t *)v243[4];
      v244 = (std::__shared_weak_count *)v243[5];
      v381 = v245;
      v382 = v244;
      if (v244)
      {
        v246 = (unint64_t *)&v244->__shared_owners_;
        do
          v247 = __ldxr(v246);
        while (__stxr(v247 + 1, v246));
      }
      if (*((char *)v377 + 23) < 0)
      {
        if (!v377[1])
          goto LABEL_457;
      }
      else if (!*((_BYTE *)v377 + 23))
      {
        goto LABEL_457;
      }
      v248 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)(a2 + 13), (const void **)v377);
      if (a2 + 14 != (uint64_t *)v248)
      {
        v249 = v248;
        v250 = *(_QWORD *)(v248 + 56);
        if ((unint64_t)(*(_QWORD *)(v248 + 64) - v250) < 0x21)
        {
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v245;
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)v244;
          if (v244)
          {
            v252 = (unint64_t *)&v244->__shared_owners_;
            do
              v253 = __ldxr(v252);
            while (__stxr(v253 + 1, v252));
            v250 = *(_QWORD *)(v248 + 56);
          }
          if (v244)
          {
            v254 = (unint64_t *)&v244->__shared_owners_;
            do
              v255 = __ldaxr(v254);
            while (__stlxr(v255 - 1, v254));
            if (!v255)
            {
              ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
              std::__shared_weak_count::__release_weak(v244);
            }
          }
          goto LABEL_457;
        }
        LODWORD(__str.__r_.__value_.__l.__data_) = 3;
        __str.__r_.__value_.__l.__size_ = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        v251 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v400 = 0;
        if (*(char *)(v394 + 23) < 0)
        {
          if (!*(_QWORD *)(v394 + 8))
          {
LABEL_444:
            v268 = v381;
            v269 = v382;
            v394 = (unint64_t)v381;
            v395 = (std::string::size_type)v382;
            if (v382)
            {
              v270 = (unint64_t *)&v382->__shared_owners_;
              do
                v271 = __ldxr(v270);
              while (__stxr(v271 + 1, v270));
            }
            if (v269)
            {
              v272 = (unint64_t *)&v269->__shared_owners_;
              do
                v273 = __ldaxr(v272);
              while (__stlxr(v273 - 1, v272));
              if (!v273)
              {
                ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                std::__shared_weak_count::__release_weak(v269);
              }
            }
            if ((v400 & 7) != 0)
            {
              v274 = (unsigned int *)((unint64_t)v400 & 0xFFFFFFFFFFFFFFF8);
              do
                v275 = __ldxr(v274);
              while (__stlxr(v275 - 2, v274));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
            v242 = (realityio::mtlx::_anonymous_namespace_ *)__str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_)
              v242 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
            goto LABEL_457;
          }
        }
        else if (!*(_BYTE *)(v394 + 23))
        {
          goto LABEL_444;
        }
        v256 = *(_QWORD *)(v249 + 56);
        v257 = *(_QWORD *)(v249 + 64);
        while (v256 != v257)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v256);
          MEMORY[0x2348B2764](&v393, v394);
          v258 = v374;
          v259 = (unsigned int *)(v393.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
          if ((v393.__r_.__value_.__s.__data_[0] & 7) != 0)
          {
            do
              v260 = __ldxr(v259);
            while (__stlxr(v260 - 2, v259));
            v261 = v374;
          }
          else
          {
            v261 = v374;
          }
          if ((v261 & 7) != 0)
          {
            v262 = (unsigned int *)(v261 & 0xFFFFFFFFFFFFFFF8);
            do
              v263 = __ldxr(v262);
            while (__stlxr(v263 - 2, v262));
          }
          if ((unsigned int *)(v258 & 0xFFFFFFFFFFFFFFF8) == v259)
          {
            LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v256;
            v264 = *(_QWORD *)(v256 + 8);
            if (v264)
            {
              v265 = (unint64_t *)(v264 + 48);
              do
                v266 = __ldxr(v265);
              while (__stxr(v266 + 1, v265));
            }
            v267 = __str.__r_.__value_.__l.__size_;
            __str.__r_.__value_.__l.__size_ = v264;
            if (v267)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v267);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&__str.__r_.__value_.__r.__words[2], (_DWORD *)(v256 + 16));
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&__str.__r_.__value_.__r.__words[2] + 4, (_DWORD *)(v256 + 20));
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v400, (_QWORD *)(v256 + 24));
            goto LABEL_444;
          }
          v256 += 32;
        }
        goto LABEL_444;
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
      __str.__r_.__value_.__r.__words[2] = 979;
      v400 = "void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::ConstPortElementPtr"
             " &, const D &) [D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
      v401 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(v243 + 6), &v394);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v394);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      v242 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v394);
LABEL_457:
      v276 = v382;
      if (v382)
      {
        v277 = (unint64_t *)&v382->__shared_owners_;
        do
          v278 = __ldaxr(v277);
        while (__stlxr(v278 - 1, v277));
        if (!v278)
        {
          ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
          std::__shared_weak_count::__release_weak(v276);
        }
      }
      v279 = (uint64_t *)v243[1];
      if (v279)
      {
        do
        {
          v280 = v279;
          v279 = (uint64_t *)*v279;
        }
        while (v279);
      }
      else
      {
        do
        {
          v280 = (uint64_t *)v243[2];
          v73 = *v280 == (_QWORD)v243;
          v243 = v280;
        }
        while (!v73);
      }
      v243 = v280;
    }
    while (v280 != a2 + 11);
  }
  if (v352)
  {
    v281 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v384 = 0;
    v381 = (uint64_t *)(MEMORY[0x24BEE9DC0] + 16);
    v282 = *v356;
    v283 = RIO_MTLX::EMPTY_STRING(v281);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v282, (unsigned __int8 *)v283, (uint64_t)&v377);
    v284 = v377;
    v285 = v378;
    while (v284 != (uint64_t *)v285)
    {
      v287 = *v284;
      v286 = (std::__shared_weak_count *)v284[1];
      v393.__r_.__value_.__r.__words[0] = *v284;
      v393.__r_.__value_.__l.__size_ = (std::string::size_type)v286;
      if (v286)
      {
        v288 = (unint64_t *)&v286->__shared_owners_;
        do
          v289 = __ldxr(v288);
        while (__stxr(v289 + 1, v288));
        v290 = v284[1];
        v392.__r_.__value_.__r.__words[0] = *v284;
        v392.__r_.__value_.__l.__size_ = v290;
        if (v290)
        {
          v291 = (unint64_t *)(v290 + 8);
          do
            v292 = __ldxr(v291);
          while (__stxr(v292 + 1, v291));
        }
      }
      else
      {
        *(_OWORD *)&v392.__r_.__value_.__l.__data_ = (unint64_t)v287;
      }
      if (SHIBYTE(v389->__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v389->__r_.__value_.__l.__size_)
          goto LABEL_528;
      }
      else if (!*((_BYTE *)&v389->__r_.__value_.__s + 23))
      {
        goto LABEL_528;
      }
      v294 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)(a2 + 13), (const void **)&v389->__r_.__value_.__l.__data_);
      if (a2 + 14 != (uint64_t *)v294)
      {
        v295 = v294;
        v296 = *(_QWORD *)(v294 + 56);
        if ((unint64_t)(*(_QWORD *)(v294 + 64) - v296) < 0x21)
        {
          __str.__r_.__value_.__r.__words[0] = v287;
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)v286;
          if (v286)
          {
            v298 = (unint64_t *)&v286->__shared_owners_;
            do
              v299 = __ldxr(v298);
            while (__stxr(v299 + 1, v298));
            v296 = *(_QWORD *)(v294 + 56);
          }
          if (v286)
          {
            v300 = (unint64_t *)&v286->__shared_owners_;
            do
              v301 = __ldaxr(v300);
            while (__stlxr(v301 - 1, v300));
            if (!v301)
            {
              ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
              std::__shared_weak_count::__release_weak(v286);
            }
          }
          goto LABEL_528;
        }
        LODWORD(__str.__r_.__value_.__l.__data_) = 3;
        __str.__r_.__value_.__l.__size_ = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        v297 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v400 = 0;
        if (*(char *)(v374 + 23) < 0)
        {
          if (!*(_QWORD *)(v374 + 8))
          {
LABEL_515:
            v314 = *(_OWORD *)&v393.__r_.__value_.__l.__data_;
            v374 = *(_OWORD *)&v393.__r_.__value_.__l.__data_;
            if (v393.__r_.__value_.__l.__size_)
            {
              v315 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
              do
                v316 = __ldxr(v315);
              while (__stxr(v316 + 1, v315));
            }
            if (*((_QWORD *)&v314 + 1))
            {
              v317 = (unint64_t *)(*((_QWORD *)&v314 + 1) + 8);
              do
                v318 = __ldaxr(v317);
              while (__stlxr(v318 - 1, v317));
              if (!v318)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v314 + 1) + 16))(*((_QWORD *)&v314 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v314 + 1));
              }
            }
            if ((v400 & 7) != 0)
            {
              v319 = (unsigned int *)((unint64_t)v400 & 0xFFFFFFFFFFFFFFF8);
              do
                v320 = __ldxr(v319);
              while (__stlxr(v320 - 2, v319));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
            if (__str.__r_.__value_.__l.__size_)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
            goto LABEL_528;
          }
        }
        else if (!*(_BYTE *)(v374 + 23))
        {
          goto LABEL_515;
        }
        v302 = *(_QWORD *)(v295 + 56);
        v303 = *(_QWORD *)(v295 + 64);
        while (v302 != v303)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v302);
          MEMORY[0x2348B2764](&v386, v374);
          v304 = v360;
          v305 = (unsigned int *)(v386 & 0xFFFFFFFFFFFFFFF8);
          if ((v386 & 7) != 0)
          {
            do
              v306 = __ldxr(v305);
            while (__stlxr(v306 - 2, v305));
            v307 = v360;
          }
          else
          {
            v307 = v360;
          }
          if ((v307 & 7) != 0)
          {
            v308 = (unsigned int *)((unint64_t)v307 & 0xFFFFFFFFFFFFFFF8);
            do
              v309 = __ldxr(v308);
            while (__stlxr(v309 - 2, v308));
          }
          if ((unsigned int *)((unint64_t)v304 & 0xFFFFFFFFFFFFFFF8) == v305)
          {
            LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v302;
            v310 = *(_QWORD *)(v302 + 8);
            if (v310)
            {
              v311 = (unint64_t *)(v310 + 48);
              do
                v312 = __ldxr(v311);
              while (__stxr(v312 + 1, v311));
            }
            v313 = __str.__r_.__value_.__l.__size_;
            __str.__r_.__value_.__l.__size_ = v310;
            if (v313)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v313);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&__str.__r_.__value_.__r.__words[2], (_DWORD *)(v302 + 16));
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&__str.__r_.__value_.__r.__words[2] + 4, (_DWORD *)(v302 + 20));
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v400, (_QWORD *)(v302 + 24));
            goto LABEL_515;
          }
          v302 += 32;
        }
        goto LABEL_515;
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
      __str.__r_.__value_.__r.__words[2] = 979;
      v400 = "void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::ConstPortElementPtr"
             " &, const D &) [D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
      v401 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v394, &v374);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v374);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v374);
LABEL_528:
      if ((v398 & 7) != 0)
      {
        v321 = (unsigned int *)(v398 & 0xFFFFFFFFFFFFFFF8);
        do
          v322 = __ldxr(v321);
        while (__stlxr(v322 - 2, v321));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v396);
      if (v395)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v395);
      v323 = (std::__shared_weak_count *)v392.__r_.__value_.__l.__size_;
      if (v392.__r_.__value_.__l.__size_)
      {
        v324 = (unint64_t *)(v392.__r_.__value_.__l.__size_ + 8);
        do
          v325 = __ldaxr(v324);
        while (__stlxr(v325 - 1, v324));
        if (!v325)
        {
          ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
          std::__shared_weak_count::__release_weak(v323);
        }
      }
      v326 = (std::__shared_weak_count *)v393.__r_.__value_.__l.__size_;
      if (v393.__r_.__value_.__l.__size_)
      {
        v327 = (unint64_t *)(v393.__r_.__value_.__l.__size_ + 8);
        do
          v328 = __ldaxr(v327);
        while (__stlxr(v328 - 1, v327));
        if (!v328)
        {
          ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
          std::__shared_weak_count::__release_weak(v326);
        }
      }
      v284 += 2;
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v377;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    MEMORY[0x2348B2350](&v381);
    goto LABEL_579;
  }
  if (a3)
  {
    v331 = *v356;
    v332 = RIO_MTLX::EMPTY_STRING(v242);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v331, (unsigned __int8 *)v332, (uint64_t)&v394);
    v334 = v394;
    v335 = v395;
    while (v334 != v335)
    {
      v333 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(*(_QWORD *)v334 + 160), (unsigned __int8 *)&qword_255E551C0);
      if (v333)
      {
        v336 = v333 + 40;
      }
      else
      {
        v333 = (unsigned __int8 *)RIO_MTLX::EMPTY_STRING(0);
        v336 = v333;
      }
      v337 = v336[23];
      if ((v337 & 0x80u) == 0)
        v338 = v336[23];
      else
        v338 = *((_QWORD *)v336 + 1);
      if (v338)
      {
        if ((v337 & 0x80) == 0)
          goto LABEL_559;
      }
      else
      {
        v333 = (unsigned __int8 *)RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v333);
        v336 = v333;
        v337 = v333[23];
        if ((v337 & 0x80) == 0)
        {
LABEL_559:
          if (v337)
            goto LABEL_563;
          goto LABEL_577;
        }
      }
      if (*((_QWORD *)v336 + 1))
      {
LABEL_563:
        MEMORY[0x2348B2764](&v377, v336);
        v339 = *(_QWORD *)v334;
        v340 = *(_QWORD *)v334 + 48;
        v333 = (unsigned __int8 *)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a3, &v381, (const void **)v340);
        v341 = *(char **)v333;
        if (!*(_QWORD *)v333)
        {
          v342 = (uint64_t **)v333;
          v341 = (char *)operator new(0x40uLL);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v341;
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)(a3 + 1);
          __str.__r_.__value_.__s.__data_[16] = 0;
          v343 = (std::string *)(v341 + 32);
          if (*(char *)(v339 + 71) < 0)
          {
            std::string::__init_copy_ctor_external(v343, *(const std::string::value_type **)(v339 + 48), *(_QWORD *)(v339 + 56));
          }
          else
          {
            v344 = *(_OWORD *)v340;
            *((_QWORD *)v341 + 6) = *(_QWORD *)(v340 + 16);
            *(_OWORD *)&v343->__r_.__value_.__l.__data_ = v344;
          }
          *((_QWORD *)v341 + 7) = 0;
          __str.__r_.__value_.__s.__data_[16] = 1;
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a3, (uint64_t)v381, v342, (uint64_t *)v341);
          __str.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100]((uint64_t)&__str);
        }
        v345 = v341 + 56;
        if (&v377 == (uint64_t **)(v341 + 56))
        {
          v348 = (unint64_t)v377;
        }
        else
        {
          if ((*v345 & 7) != 0)
          {
            v346 = (unsigned int *)(*v345 & 0xFFFFFFFFFFFFFFF8);
            do
              v347 = __ldxr(v346);
            while (__stlxr(v347 - 2, v346));
          }
          v348 = 0;
          *v345 = v377;
          v377 = 0;
        }
        if ((v348 & 7) != 0)
        {
          v349 = (unsigned int *)(v348 & 0xFFFFFFFFFFFFFFF8);
          do
            v350 = __ldxr(v349);
          while (__stlxr(v350 - 2, v349));
        }
      }
LABEL_577:
      v334 += 16;
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v394;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  }
LABEL_579:
  *(_DWORD *)a1 = data;
  *(_QWORD *)(a1 + 8) = v367;
  v367 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), &v368);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), &v369);
  *(_QWORD *)(a1 + 24) = v370;
  v370 = 0;
LABEL_580:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v368);
  result = v367;
  if (v367)
    return (pxrInternal__aapl__pxrReserved__::UsdPrim *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v367);
  return result;
}

void sub_2301AE044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t a67;
  uint64_t a68;
  uint64_t v68;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v68 - 232);
  if (*(char *)(v68 - 121) < 0)
    operator delete(*(void **)(v68 - 144));
  __cxa_guard_abort(&qword_255E54F38);
  if (*(char *)(v68 - 185) < 0)
    operator delete(*(void **)(v68 - 208));
  MEMORY[0x2348B2350](v68 - 176);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
  v70 = a67;
  if (a67)
  {
    v71 = (unsigned int *)(a67 + 8);
    do
    {
      v72 = __ldxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  }
  if ((a68 & 7) != 0)
  {
    v74 = (unsigned int *)(a68 & 0xFFFFFFFFFFFFFFF8);
    do
      v75 = __ldxr(v74);
    while (__stlxr(v75 - 2, v74));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  *(_QWORD *)(v68 - 176) = &a37;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v68 - 176));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a44);
  _Unwind_Resume(a1);
}

uint64_t **realityio::mtlx::`anonymous namespace'::_SetCoreUIAttributes(uint64_t a1, uint64_t *a2)
{
  uint64_t **result;
  unsigned int *v5;
  unsigned int v6;
  realityio::mtlx::_anonymous_namespace_ *v7;
  _BOOL8 v8;
  unsigned int *v9;
  unsigned int v10;
  float v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  RIO_MTLX *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)a1 == 1)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v31, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v30 = 0;
    v28 = MEMORY[0x24BEE9DB8] + 16;
    if ((v34 & 7) != 0)
    {
      v5 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
    if (v32)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
    if (v29)
    {
      if ((*(_BYTE *)(v29 + 57) & 8) == 0)
      {
        v7 = (realityio::mtlx::_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t *))(v28 + 32))(&v28);
        if ((_DWORD)v7)
        {
          v27 = 0;
          if (v8)
          {
            if (v8)
            {
              v32 = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(void)::ti
                  + 3;
              v31 = (RIO_MTLX *)__PAIR64__(v27, HIDWORD(v27));
              pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreatePosAttr((pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *)&v28, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v31);
              if ((v26 & 7) != 0)
              {
                v9 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
                do
                  v10 = __ldxr(v9);
                while (__stlxr(v10 - 2, v9));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
              if (v24)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v31);
            }
          }
          if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(*a2 + 160), (unsigned __int8 *)&qword_255E55250))
          {
            v11 = RIO_MTLX::fromValueString<RIO_MTLX::Vector3>(v31);
            v13 = v12;
            v15 = v14;
            v32 = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
                + 2;
            v16 = operator new();
            *(float *)v16 = v11;
            *(_DWORD *)(v16 + 4) = v13;
            *(_DWORD *)(v16 + 8) = v15;
            v17 = (unsigned int *)(v16 + 12);
            atomic_store(0, (unsigned int *)(v16 + 12));
            v31 = (RIO_MTLX *)v16;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
            pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateDisplayColorAttr((pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *)&v28, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v31);
            if ((v23 & 7) != 0)
            {
              v19 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
              do
                v20 = __ldxr(v19);
              while (__stlxr(v20 - 2, v19));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
            if (v21)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v21);
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v31);
          }
        }
      }
    }
    return (uint64_t **)MEMORY[0x2348B22FC](&v28);
  }
  return result;
}

void sub_2301AE8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::`anonymous namespace'::_GetInheritanceStack<RIO_MTLX::NodeDef const>(RIO_MTLX::Element ***a1, uint64_t a2)
{
  realityio::mtlx::_anonymous_namespace_ *v4;
  std::__shared_weak_count *v5;
  RIO_MTLX::Element *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  RIO_MTLX::Element **v19;
  unint64_t *v20;
  unint64_t v21;
  RIO_MTLX::Element **v22;
  RIO_MTLX::Element **v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  RIO_MTLX::Element **v28;
  unint64_t *v29;
  unint64_t v30;
  RIO_MTLX::Element **v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  RIO_MTLX *v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  RIO_MTLX::Element **v53;
  RIO_MTLX::Element **v54;
  RIO_MTLX::Element **v55;
  RIO_MTLX::Element *v57;
  RIO_MTLX::Element *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  RIO_MTLX::Element *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v67 = 0;
  v68 = 0;
  v66 = &v67;
  RIO_MTLX::Element::getDocument(*(RIO_MTLX::Element **)a2, &v64);
  v6 = *(RIO_MTLX::Element **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v62 = v6;
  v63 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v6)
  {
    while (1)
    {
      v9 = v63;
      v10 = v67;
      v11 = &v67;
      v12 = &v67;
      if (v67)
      {
        while (1)
        {
          while (1)
          {
            v12 = (uint64_t **)v10;
            v13 = v10[4];
            if (v13 <= (unint64_t)v6)
              break;
            v10 = *v12;
            v11 = v12;
            if (!*v12)
              goto LABEL_12;
          }
          if (v13 >= (unint64_t)v6)
            break;
          v10 = v12[1];
          if (!v10)
          {
            v11 = v12 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v14 = (uint64_t *)operator new(0x30uLL);
        v15 = v14;
        v14[4] = (uint64_t)v6;
        v14[5] = (uint64_t)v63;
        if (v63)
        {
          v16 = (unint64_t *)&v63->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        *v14 = 0;
        v14[1] = 0;
        v14[2] = (uint64_t)v12;
        *v11 = v14;
        if (*v66)
        {
          v66 = (uint64_t **)*v66;
          v15 = *v11;
        }
        v4 = (realityio::mtlx::_anonymous_namespace_ *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v67, v15);
        ++v68;
        v6 = v62;
        v9 = v63;
      }
      v19 = a1[1];
      v18 = (unint64_t)a1[2];
      if ((unint64_t)v19 >= v18)
      {
        v23 = *a1;
        v24 = ((char *)v19 - (char *)*a1) >> 4;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v26 = v18 - (_QWORD)v23;
        if (v26 >> 3 > v25)
          v25 = v26 >> 3;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v4 = (realityio::mtlx::_anonymous_namespace_ *)operator new(16 * v27);
        v28 = (RIO_MTLX::Element **)((char *)v4 + 16 * v24);
        *v28 = v6;
        v28[1] = (RIO_MTLX::Element *)v9;
        if (v9)
        {
          v29 = (unint64_t *)&v9->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        if (v19 != v23)
        {
          v31 = v19;
          v32 = (char *)v4 + 16 * v24;
          do
          {
            v33 = *((_OWORD *)v31 - 1);
            v31 -= 2;
            *((_OWORD *)v32 - 1) = v33;
            v32 -= 16;
            *v31 = 0;
            v31[1] = 0;
          }
          while (v31 != v23);
          v22 = v28 + 2;
          *a1 = (RIO_MTLX::Element **)v32;
          a1[1] = v28 + 2;
          a1[2] = (RIO_MTLX::Element **)((char *)v4 + 16 * v27);
          do
          {
            v19 -= 2;
            v4 = (realityio::mtlx::_anonymous_namespace_ *)std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v19);
          }
          while (v19 != v23);
          v19 = v23;
          if (!v23)
            goto LABEL_40;
LABEL_39:
          operator delete(v19);
          goto LABEL_40;
        }
        v22 = v28 + 2;
        *a1 = v28;
        a1[1] = v28 + 2;
        a1[2] = (RIO_MTLX::Element **)((char *)v4 + 16 * v27);
        if (v19)
          goto LABEL_39;
      }
      else
      {
        *v19 = v6;
        v19[1] = (RIO_MTLX::Element *)v9;
        if (v9)
        {
          v20 = (unint64_t *)&v9->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = v19 + 2;
      }
LABEL_40:
      a1[1] = v22;
      v34 = v64;
      v35 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v62 + 20, (unsigned __int8 *)&qword_255E55100);
      if (v35)
      {
        v36 = (uint64_t *)((char *)v35 + 40);
      }
      else
      {
        v35 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
        v36 = (uint64_t *)v35;
      }
      v37 = *((unsigned __int8 *)v36 + 23);
      if ((v37 & 0x80u) != 0)
        v37 = v36[1];
      if (!v37)
        v36 = RIO_MTLX::EMPTY_STRING(v35);
      v38 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v34 + 96), (unsigned __int8 *)v36);
      v39 = v38;
      if (v38)
      {
        v4 = (realityio::mtlx::_anonymous_namespace_ *)*((_QWORD *)v38 + 5);
        v40 = (std::__shared_weak_count *)*((_QWORD *)v39 + 6);
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        if (v4)
        {
          v39 = 0;
          if (v4)
            v43 = 0;
          else
            v43 = v40;
          if (v40 && v4)
          {
            v44 = (unint64_t *)&v40->__shared_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            v39 = v40;
          }
          else
          {
            v40 = v43;
          }
        }
        else
        {
          v39 = 0;
        }
      }
      else
      {
        v40 = 0;
        v4 = 0;
      }
      v46 = v63;
      v62 = v4;
      v63 = (std::__shared_weak_count *)v39;
      if (!v46)
        goto LABEL_67;
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
        if (v40)
        {
LABEL_68:
          v49 = (unint64_t *)&v40->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      else
      {
LABEL_67:
        if (v40)
          goto LABEL_68;
      }
      v6 = v62;
      if (!v62)
      {
        v5 = v63;
        break;
      }
    }
  }
  if (v5)
  {
    v51 = (unint64_t *)&v5->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v53 = *a1;
  v54 = a1[1];
  v55 = v54 - 2;
  if (*a1 != v54 && v55 > v53)
  {
    do
    {
      v57 = *v53;
      *v53 = *v55;
      *v55 = v57;
      v58 = v53[1];
      v53[1] = v55[1];
      v55[1] = v58;
      v53 += 2;
      v55 -= 2;
    }
    while (v53 < v55);
  }
  v59 = v65;
  if (v65)
  {
    v60 = (unint64_t *)&v65->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(v67);
}

void sub_2301AEDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, _QWORD *a15)
{
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(a15);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::_NodeGraphBuilder::_AddInput(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, int a5)
{
  std::__shared_weak_count *v10;
  uint64_t *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  pxrInternal__aapl__pxrReserved__::UsdObject *v15;
  uint64_t Text;
  const char *v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  realityio::mtlx::_anonymous_namespace_ *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  realityio::mtlx::_anonymous_namespace_ *v28;
  unsigned __int8 *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *Copy;
  uint64_t v45;
  realityio::mtlx::_anonymous_namespace_ *v46;
  __int128 v47;
  std::string::size_type v48;
  std::string::size_type size;
  std::string *v50;
  realityio::mtlx::_anonymous_namespace_ *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  const void **v56;
  std::string::size_type v57;
  std::string::size_type *v58;
  std::string::size_type *v59;
  const void **v60;
  const void **v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v64;
  uint64_t *v65;
  std::string::size_type v66;
  char *v67;
  std::string *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t **v77;
  uint64_t **v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t *v103;
  unint64_t *v104;
  unint64_t v105;
  realityio::mtlx::_anonymous_namespace_ *v106;
  realityio::mtlx::_anonymous_namespace_ *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  unint64_t v114;
  int v115;
  unsigned int *v116;
  unsigned int v117;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v118;
  unsigned int *v119;
  unsigned int v120;
  const pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  realityio::mtlx::_anonymous_namespace_ *v122;
  const pxrInternal__aapl__pxrReserved__::TfToken *v123;
  unsigned int *v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  std::string *v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t *v137;
  std::__shared_weak_count *v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  RIO_MTLX *v144;
  std::__shared_weak_count *v145;
  const void **v146;
  __int128 v147;
  __int128 v148;
  uint64_t *v149;
  int v150;
  int v151;
  int v152;
  char v153[8];
  uint64_t *v154;
  std::__shared_weak_count *v155;
  std::vector<std::string> v156;
  uint64_t v157;
  uint64_t v158;
  std::string v159;
  const char *v160;
  char v161;

  v11 = *a3;
  v10 = (std::__shared_weak_count *)a3[1];
  v137 = *a3;
  v138 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
  {
    v14 = v11 + 6;
    if (*((char *)v11 + 71) < 0)
      v14 = (_QWORD *)*v14;
    v15 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v159, (uint64_t *)(a4 + 8), (_DWORD *)(a4 + 16));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v15, &v147);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v147);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding input (%s) to connectable prim: (%s)\n", v17, v14, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v147);
    if ((v160 & 7) != 0)
    {
      v18 = (unsigned int *)((unint64_t)v160 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v159.__r_.__value_.__r.__words[2]);
    if (v159.__r_.__value_.__l.__size_)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v159.__r_.__value_.__l.__size_);
    v11 = v137;
    v10 = v138;
  }
  v159.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  v159.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  if (v10)
  {
    v20 = (unint64_t *)&v10->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (v10)
  {
    v22 = (unint64_t *)&v10->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v25 = v137;
  v154 = v137;
  v155 = v138;
  if (v138)
  {
    v26 = (unint64_t *)&v138->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if ((*(char *)(v159.__r_.__value_.__r.__words[0] + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v159.__r_.__value_.__r.__words[0] + 23))
      goto LABEL_29;
    goto LABEL_28;
  }
  if (*(_QWORD *)(v159.__r_.__value_.__r.__words[0] + 8))
LABEL_28:
    v28 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetDocumentation();
LABEL_29:
  memset(&v156, 0, sizeof(v156));
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v25 + 20, (unsigned __int8 *)&qword_255E55058);
  if (v29)
  {
    RIO_MTLX::fromValueString<std::vector<std::string>>(v144, (uint64_t *)&v159);
    std::vector<std::string>::__vdeallocate(&v156);
    v156 = (std::vector<std::string>)v159;
    memset(&v159, 0, sizeof(v159));
    *(_QWORD *)&v147 = &v159;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
    if (v156.__begin_ != v156.__end_)
    {
      pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack();
      v30 = *(unsigned int **)v159.__r_.__value_.__l.__data_;
      *(_QWORD *)&v147 = v30;
      if (v30)
      {
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
        v32 = (unsigned int *)v147;
        v144 = (RIO_MTLX *)v147;
        if ((_QWORD)v147)
        {
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 + 1, v32));
        }
      }
      else
      {
        v144 = 0;
      }
      MEMORY[0x2348B2704](&v147);
      *(_QWORD *)&v147 = &v159;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
      v149 = 0;
      v147 = 0u;
      v148 = 0u;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::reserve((uint64_t *)&v147, 0xAAAAAAAAAAAAAAABLL * (((char *)v156.__end_ - (char *)v156.__begin_) >> 3));
      begin = v156.__begin_;
      end = v156.__end_;
      if (v156.__begin_ != v156.__end_)
      {
        while (1)
        {
          MEMORY[0x2348B2764](&v158, begin);
          if (DWORD2(v147))
          {
            v159.__r_.__value_.__r.__words[0] = (std::string::size_type)"vt/array.h";
            v159.__r_.__value_.__l.__size_ = (std::string::size_type)"emplace_back";
            v159.__r_.__value_.__r.__words[2] = 433;
            v160 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::emplace_ba"
                   "ck(Args &&...) [T = pxrInternal__aapl__pxrReserved__::TfToken, Args = <pxrInternal__aapl__pxrReserved__::TfToken>]";
            v161 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
            goto LABEL_47;
          }
          v36 = v147;
          v37 = v149;
          if (*((_QWORD *)&v148 + 1))
            break;
          if (v149)
          {
            v38 = atomic_load((unint64_t *)v149 - 2);
            v37 = v149;
            if (v38 != 1)
              break;
            v39 = *(v149 - 1);
          }
          else
          {
            v39 = 0;
          }
          if ((_QWORD)v147 == v39)
            break;
          v37[(_QWORD)v147] = v158;
          v158 = 0;
LABEL_46:
          *(_QWORD *)&v147 = v147 + 1;
LABEL_47:
          if ((v158 & 7) != 0)
          {
            v40 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
            do
              v41 = __ldxr(v40);
            while (__stlxr(v41 - 2, v40));
          }
          if (++begin == end)
            goto LABEL_56;
        }
        v42 = 1;
        do
        {
          v43 = v42;
          v42 *= 2;
        }
        while (v43 < (uint64_t)v147 + 1);
        Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)&v147, v37, v43, v147);
        Copy[v36] = v158;
        v158 = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v147);
        v149 = Copy;
        goto LABEL_46;
      }
LABEL_56:
      pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v144);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::SetAllowedTokens();
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v147);
      v29 = (unsigned __int8 *)MEMORY[0x2348B2704](&v144);
    }
  }
  v45 = (uint64_t)v154;
  if (*(char *)(v147 + 23) < 0)
  {
    v48 = *(_QWORD *)(v147 + 8);
    if (!v48)
      goto LABEL_70;
    std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)v147, v48);
  }
  else
  {
    if (!*(_BYTE *)(v147 + 23))
      goto LABEL_70;
    v47 = *(_OWORD *)v147;
    v159.__r_.__value_.__r.__words[2] = *(_QWORD *)(v147 + 16);
    *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v47;
  }
  size = HIBYTE(v159.__r_.__value_.__r.__words[2]);
  v50 = &v159;
  if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v159.__r_.__value_.__l.__size_;
    v50 = (std::string *)v159.__r_.__value_.__r.__words[0];
  }
  for (; size; --size)
  {
    if (v50->__r_.__value_.__s.__data_[0] == 47)
      v50->__r_.__value_.__s.__data_[0] = 58;
    v50 = (std::string *)((char *)v50 + 1);
  }
  v46 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdProperty::SetDisplayGroup();
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v159.__r_.__value_.__l.__data_);
LABEL_70:
  if ((*(char *)(v159.__r_.__value_.__r.__words[0] + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v159.__r_.__value_.__r.__words[0] + 23))
      goto LABEL_75;
    goto LABEL_74;
  }
  if (*(_QWORD *)(v159.__r_.__value_.__r.__words[0] + 8))
LABEL_74:
    pxrInternal__aapl__pxrReserved__::UsdObject::SetDisplayName();
LABEL_75:
  v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
  v52 = v155;
  if (!v155)
    goto LABEL_79;
  v53 = (unint64_t *)&v155->__shared_owners_;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (v54)
  {
LABEL_79:
    if (a5)
      goto LABEL_80;
LABEL_89:
    v61 = v146;
    if (*((char *)v146 + 23) < 0)
    {
      if (!v146[1])
        goto LABEL_114;
    }
    else if (!*((_BYTE *)v146 + 23))
    {
      goto LABEL_114;
    }
    v62 = *(_QWORD *)(a2 + 64);
    if (!v62)
      goto LABEL_100;
    v63 = a2 + 64;
    do
    {
      v64 = std::less<std::string>::operator()[abi:ne180100](a2 + 72, (const void **)(v62 + 32), v61);
      v65 = (uint64_t *)(v62 + 8);
      if (!v64)
      {
        v65 = (uint64_t *)v62;
        v63 = v62;
      }
      v62 = *v65;
    }
    while (*v65);
    if (v63 == a2 + 64 || std::less<std::string>::operator()[abi:ne180100](a2 + 72, v61, (const void **)(v63 + 32)))
    {
LABEL_100:
      v159.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
      v159.__r_.__value_.__l.__size_ = (std::string::size_type)"_AddInputCommon";
      v159.__r_.__value_.__r.__words[2] = 908;
      v160 = "UsdShadeInput realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_AddInputCommon(const mx::ConstVal"
             "ueElementPtr &, const UsdShadeConnectableAPI &, BOOL)";
      v161 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      goto LABEL_114;
    }
    v103 = v137;
    v144 = (RIO_MTLX *)v137;
    v145 = v138;
    if (v138)
    {
      v104 = (unint64_t *)&v138->__shared_owners_;
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::Input>((uint64_t)v103, &v147);
    if (!(_QWORD)v147)
      goto LABEL_169;
    if (SHIBYTE(v156.__begin_->__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v156.__begin_->__r_.__value_.__l.__size_)
      {
LABEL_164:
        if ((SHIBYTE(v156.__begin_->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (!*((_BYTE *)&v156.__begin_->__r_.__value_.__s + 23))
            goto LABEL_169;
          goto LABEL_168;
        }
        if (v156.__begin_->__r_.__value_.__l.__size_)
        {
LABEL_168:
          v159.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
          v159.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
          v159.__r_.__value_.__r.__words[2] = 1021;
          v160 = "void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::ConstElementPtr"
                 " &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeInput, D = pxrInternal__aapl__"
                 "pxrReserved__::UsdShadeInput]";
          v161 = 0;
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(v63 + 56), &v154);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v154);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v139, &v158);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v158);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v158);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v154);
        }
LABEL_169:
        v108 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
        if (*((_QWORD *)&v147 + 1))
        {
          v109 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(v63 + 56), &v159);
          v111 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v159);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v139, &v147);
          v112 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v147);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Getting referencedPrim for (%s) under (%s).\n", v113, v111, v112);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v147);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v159);
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(v63 + 56), &v158);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v147, &v140, &v141);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v156, (uint64_t *)(v63 + 64), (_DWORD *)(v63 + 72));
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v147, (uint64_t)&v159);
        if (LODWORD(v159.__r_.__value_.__l.__data_) == LODWORD(v156.__begin_)
          && *(_OWORD *)&v159.__r_.__value_.__r.__words[1] == *(_OWORD *)&v156.__end_
          && (v114 = (unint64_t)v160,
              ((unint64_t)v160 & 0xFFFFFFFFFFFFFFF8) == (v157 & 0xFFFFFFFFFFFFFFF8)))
        {
          v115 = 0;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v154 = (uint64_t *)(MEMORY[0x24BEE9D98] + 16);
          if (!v155 || (v155[2].__shared_owners_ & 0x800) != 0)
            v115 = 0;
          else
            v115 = (*(uint64_t (**)(uint64_t **))(MEMORY[0x24BEE9D98] + 48))(&v154);
          MEMORY[0x2348B2170](&v154);
          v114 = (unint64_t)v160;
        }
        if ((v114 & 7) != 0)
        {
          v116 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
          do
            v117 = __ldxr(v116);
          while (__stlxr(v117 - 2, v116));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v159.__r_.__value_.__r.__words[2]);
        v118 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v159.__r_.__value_.__l.__size_;
        if (v159.__r_.__value_.__l.__size_)
          v118 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v159.__r_.__value_.__l.__size_);
        if (v115)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v118);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
          {
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v147, (uint64_t)&v159);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v159, &v154);
            if ((v160 & 7) != 0)
            {
              v119 = (unsigned int *)((unint64_t)v160 & 0xFFFFFFFFFFFFFFF8);
              do
                v120 = __ldxr(v119);
              while (__stlxr(v120 - 2, v119));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v159.__r_.__value_.__r.__words[2]);
            if (v159.__r_.__value_.__l.__size_)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v159.__r_.__value_.__l.__size_);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v147, &v154);
          }
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v156, &v159);
          NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v159);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v154, NameToken);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v122 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v159);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v159, &v151);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(v63 + 56), &v150);
          v123 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v150);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v151, v123);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v158, &v152);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v158 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v150);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v151);
          if ((v160 & 7) != 0)
          {
            v124 = (unsigned int *)((unint64_t)v160 & 0xFFFFFFFFFFFFFFF8);
            do
              v125 = __ldxr(v124);
            while (__stlxr(v125 - 2, v124));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v159.__r_.__value_.__r.__words[2]);
          if (v159.__r_.__value_.__l.__size_)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v159.__r_.__value_.__l.__size_);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v153);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v154);
        }
        if ((MEMORY[0x2348B379C](&v139, &v158) & 1) != 0)
        {
          if (!pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
          {
LABEL_208:
            if ((v157 & 7) != 0)
            {
              v130 = (unsigned int *)(v157 & 0xFFFFFFFFFFFFFFF8);
              do
                v131 = __ldxr(v130);
              while (__stlxr(v131 - 2, v130));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v156.__end_cap_);
            if (v156.__end_)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v156.__end_);
            if ((BYTE8(v148) & 7) != 0)
            {
              v132 = (unsigned int *)(*((_QWORD *)&v148 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v133 = __ldxr(v132);
              while (__stlxr(v133 - 2, v132));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v148);
            if (*((_QWORD *)&v147 + 1))
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v147 + 1));
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v158);
            v134 = v145;
            if (v145)
            {
              v135 = (unint64_t *)&v145->__shared_owners_;
              do
                v136 = __ldaxr(v135);
              while (__stlxr(v136 - 1, v135));
              if (!v136)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v134);
              }
            }
            goto LABEL_114;
          }
          v126 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v158);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v139, &v159);
          v127 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v159);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    + Connected <%s> -> <%s>\n", v128, v126, v127);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v129 = &v159;
        }
        else
        {
          v159.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
          v159.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
          v159.__r_.__value_.__r.__words[2] = 1054;
          v160 = "void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::ConstElementPtr"
                 " &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeInput, D = pxrInternal__aapl__"
                 "pxrReserved__::UsdShadeInput]";
          v161 = 0;
          pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v158);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v139, &v154);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v154);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v129 = (std::string *)&v154;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v129);
        goto LABEL_208;
      }
    }
    else if (!*((_BYTE *)&v156.__begin_->__r_.__value_.__s + 23))
    {
      goto LABEL_164;
    }
    v159.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
    v159.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
    v159.__r_.__value_.__r.__words[2] = 1013;
    v160 = "void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::ConstElementPtr &, co"
           "nst U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeInput, D = pxrInternal__aapl__pxrReserved_"
           "_::UsdShadeInput]";
    v161 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(v63 + 56), &v154);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v154);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v139, &v158);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v158);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v158);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v107 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v154);
    goto LABEL_164;
  }
  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
  std::__shared_weak_count::__release_weak(v52);
  if (!a5)
    goto LABEL_89;
LABEL_80:
  v55 = v137;
  v56 = (const void **)(v137 + 6);
  v57 = *(_QWORD *)(a2 + 64);
  v58 = (std::string::size_type *)(a2 + 64);
  v59 = (std::string::size_type *)(a2 + 64);
  if (!v57)
    goto LABEL_102;
  v58 = (std::string::size_type *)(a2 + 64);
  while (1)
  {
    while (1)
    {
      v59 = (std::string::size_type *)v57;
      v60 = (const void **)(v57 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100](a2 + 72, v56, (const void **)(v57 + 32)))
        break;
      v57 = *v59;
      v58 = v59;
      if (!*v59)
        goto LABEL_102;
    }
    if (!std::less<std::string>::operator()[abi:ne180100](a2 + 72, v60, v56))
      break;
    v58 = v59 + 1;
    v57 = v59[1];
    if (!v57)
      goto LABEL_102;
  }
  v66 = *v58;
  if (!*v58)
  {
LABEL_102:
    v67 = (char *)operator new(0x58uLL);
    v159.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
    v159.__r_.__value_.__l.__size_ = a2 + 64;
    v159.__r_.__value_.__s.__data_[16] = 0;
    v68 = (std::string *)(v67 + 32);
    if (*((char *)v55 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v68, (const std::string::value_type *)v55[6], v55[7]);
    }
    else
    {
      v69 = *(_OWORD *)v56;
      *((_QWORD *)v67 + 6) = v56[2];
      *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
    }
    *((_DWORD *)v67 + 14) = 3;
    *((_QWORD *)v67 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *((_QWORD *)v67 + 10) = 0;
    v159.__r_.__value_.__s.__data_[16] = 1;
    *(_QWORD *)v67 = 0;
    *((_QWORD *)v67 + 1) = 0;
    *((_QWORD *)v67 + 2) = v59;
    *v58 = (std::string::size_type)v67;
    v70 = **(_QWORD **)(a2 + 56);
    if (v70)
    {
      *(_QWORD *)(a2 + 56) = v70;
      v67 = (char *)*v58;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 64), (uint64_t *)v67);
    ++*(_QWORD *)(a2 + 72);
    v66 = v159.__r_.__value_.__r.__words[0];
    v159.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,void *>>>>::reset[abi:ne180100]((uint64_t)&v159);
  }
  *(_DWORD *)(v66 + 56) = v139;
  v71 = v140;
  if (v140)
  {
    v72 = (unint64_t *)(v140 + 48);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = *(_QWORD *)(v66 + 64);
  *(_QWORD *)(v66 + 64) = v71;
  if (v74)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v74);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v66 + 72, &v141);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v66 + 76, &v142);
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)(v66 + 80), &v143);
LABEL_114:
  v75 = *a3;
  v77 = (uint64_t **)(a2 + 88);
  v76 = *(uint64_t **)(a2 + 88);
  if (v76)
  {
    while (1)
    {
      while (1)
      {
        v78 = (uint64_t **)v76;
        v79 = v76[4];
        if (v79 <= (unint64_t)v75)
          break;
        v76 = *v78;
        v77 = v78;
        if (!*v78)
          goto LABEL_122;
      }
      if (v79 >= (unint64_t)v75)
        break;
      v76 = v78[1];
      if (!v76)
      {
        v77 = v78 + 1;
        goto LABEL_122;
      }
    }
    v81 = (uint64_t *)v78;
  }
  else
  {
    v78 = (uint64_t **)(a2 + 88);
LABEL_122:
    v80 = (uint64_t *)operator new(0x50uLL);
    v81 = v80;
    v82 = a3[1];
    v80[4] = (uint64_t)v75;
    v80[5] = (uint64_t)v82;
    if (v82)
    {
      v83 = (unint64_t *)(v82 + 1);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    *((_DWORD *)v80 + 12) = 3;
    v80[7] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v81[9] = 0;
    *v81 = 0;
    v81[1] = 0;
    v81[2] = (uint64_t)v78;
    *v77 = v81;
    v85 = **(_QWORD **)(a2 + 80);
    v86 = v81;
    if (v85)
    {
      *(_QWORD *)(a2 + 80) = v85;
      v86 = *v77;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 88), v86);
    ++*(_QWORD *)(a2 + 96);
  }
  *((_DWORD *)v81 + 12) = v139;
  v87 = v140;
  v140 = 0;
  v88 = v81[7];
  v81[7] = v87;
  if (v88)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v88);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v81 + 8), &v141);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v81 + 68);
  if (&v139 != (int *)(v81 + 6))
  {
    v89 = v81[9];
    if ((v89 & 7) != 0)
    {
      v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
      do
        v91 = __ldxr(v90);
      while (__stlxr(v91 - 2, v90));
    }
    v81[9] = v143;
    v143 = 0;
  }
  *(_DWORD *)a1 = *((_DWORD *)v81 + 12);
  v92 = v81[7];
  *(_QWORD *)(a1 + 8) = v92;
  if (v92)
  {
    v93 = (unint64_t *)(v92 + 48);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)v81 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)v81 + 17);
  v95 = v81[9];
  *(_QWORD *)(a1 + 24) = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v143 & 7) != 0)
  {
    v98 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
    do
      v99 = __ldxr(v98);
    while (__stlxr(v99 - 2, v98));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v141);
  if (v140)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v140);
  v100 = v138;
  if (v138)
  {
    v101 = (unint64_t *)&v138->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
}

void sub_2301AFF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a33);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a21);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v33 - 152));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a14);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t **realityio::mtlx::`anonymous namespace'::_SetGlobalCoreUIAttributes(realityio::mtlx::_anonymous_namespace_ *a1, uint64_t *a2)
{
  uint64_t **result;
  uint64_t *v4;

  if (*((char *)v4 + 23) < 0)
  {
    if (!v4[1])
      return result;
  }
  else if (!*((_BYTE *)v4 + 23))
  {
    return result;
  }
  return (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdObject::SetDocumentation();
}

BOOL realityio::mtlx::`anonymous namespace'::_Value<float>(_DWORD *a1, uint64_t *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v6;
  const std::string *v8;
  int v9;

  v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(*a2 + 160), a3);
  if (v6)
  {
    v9 = 0;
    *a1 = v9;
  }
  return v6 != 0;
}

void realityio::mtlx::`anonymous namespace'::_MakeInput<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI const>(realityio::mtlx::_anonymous_namespace_ *a1, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2, std::string **a3)
{
  RIO_MTLX *v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *Data;
  unsigned int *v13;
  unsigned int v14;
  std::string *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  std::string *v26;
  std::__shared_weak_count *v27;
  std::string *v28;
  std::string *v29;

  v6 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&(*a3)[6].__r_.__value_.__r.__words[2], (unsigned __int8 *)&qword_255E55238);
  if (v6)
  {
    v7 = (uint64_t *)((char *)v6 + 40);
  }
  else
  {
    v6 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
    v7 = (uint64_t *)v6;
  }
  v8 = *((unsigned __int8 *)v7 + 23);
  v9 = v8;
  if ((v8 & 0x80u) != 0)
    v8 = v7[1];
  if (v8)
  {
    if ((v9 & 0x80) == 0)
      goto LABEL_8;
LABEL_25:
    if (v7[1])
      goto LABEL_9;
LABEL_26:
    *(_DWORD *)a1 = 3;
    *((_QWORD *)a1 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *((_QWORD *)a1 + 3) = 0;
    return;
  }
  v7 = RIO_MTLX::EMPTY_STRING(v6);
  v9 = *((_BYTE *)v7 + 23);
  if (v9 < 0)
    goto LABEL_25;
LABEL_8:
  if (!v9)
    goto LABEL_26;
LABEL_9:
  v29 = 0;
  realityio::mtlx::UsdMtlxGetUsdType((unsigned __int8 *)v7, (uint64_t)&v26);
  v28 = v26;
  if ((v27 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v28))
  {
    Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v28 = (std::string *)*((_QWORD *)Data + 11);
    MEMORY[0x2348B2764](&v26, v7);
    if ((v29 & 7) != 0)
    {
      v13 = (unsigned int *)((unint64_t)v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    v29 = v26;
  }
  v15 = *a3;
  v16 = (std::__shared_weak_count *)a3[1];
  v26 = v15;
  v27 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (v15)
  else
    v25 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v25, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v28);
  if ((v25 & 7) != 0)
  {
    v19 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
    v16 = v27;
  }
  if (v16)
  {
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v29)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
    if ((v29 & 7) != 0)
    {
      v23 = (unsigned int *)((unint64_t)v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
  }
}

void sub_2301B0550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v14;
  unsigned int v15;

  if ((a14 & 7) != 0)
  {
    v14 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::`anonymous namespace'::_CopyValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, void **a2)
{
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  realityio::mtlx::_anonymous_namespace_ *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  RIO_MTLX::Element *v15;
  const char *v16;
  void **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  RIO_MTLX::Element *v22;
  const char *v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t *v28;
  RIO_MTLX::Element *v29;
  const char *v30;
  void **v31;
  unint64_t *v32;
  uint64_t *ActiveColorSpace;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  int v45;
  int v46;
  _BOOL4 v47;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  RIO_MTLX::Element *v59;
  const char *v60;
  void **v61;
  unint64_t *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *v71[2];
  char v72;
  void *v73[2];
  char v74;
  void *__p;
  const char *v76;
  uint64_t v77;
  const char *v78;
  char v79;
  void *v80[2];
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  char v86[8];
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)a2[1];
  __p = *a2;
  v76 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  realityio::mtlx::UsdMtlxGetUsdValue((uint64_t)&__p, 0, (uint64_t)v86);
  v8 = (std::__shared_weak_count *)v76;
  if (v76)
  {
    v9 = (unint64_t *)(v76 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v87)
    v7 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
  if (*((char *)v85 + 23) < 0)
  {
    if (!v85[1])
      goto LABEL_65;
  }
  else if (!*((_BYTE *)v85 + 23))
  {
    goto LABEL_65;
  }
  if (*((char *)v84 + 23) < 0)
  {
    if (!v84[1])
      goto LABEL_65;
LABEL_19:
    realityio::mtlx::UsdMtlxGetPackedUsdValues((unsigned __int8 *)__p, &v82);
    if (v82 == v83)
    {
      __p = "CoreRealityIO/mtlxToUsdShade.cpp";
      v76 = "_CopyValue";
      v77 = 474;
      v78 = "void realityio::mtlx::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::ConstValueElementPtr &)";
      v79 = 0;
      v21 = v85;
      if (*((char *)v85 + 23) < 0)
        v21 = (uint64_t *)*v85;
      v22 = (RIO_MTLX::Element *)*a2;
      v63 = 0;
      v64 = 0;
      RIO_MTLX::Element::getNamePath(v22, (uint64_t)&v63, (uint64_t)v73);
      if (v74 >= 0)
        v24 = v73;
      else
        v24 = (void **)v73[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse valuecurve '%s' on '%s';  ignoring",
        v23,
        v21,
        v24);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      if (v81 < 0)
        operator delete(v80[0]);
      if (v74 < 0)
        operator delete(v73[0]);
      v25 = v64;
      if (v64)
      {
        p_shared_owners = (unint64_t *)&v64->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      goto LABEL_64;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "integer");
    realityio::mtlx::UsdMtlxGetPackedUsdValues((unsigned __int8 *)&__p, (uint64_t *)v80);
    if (SHIBYTE(v77) < 0)
      operator delete(__p);
    if ((void *)((char *)v80[1] - (char *)v80[0]) == (void *)32)
    {
      v13 = *(unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v80[0]);
      v14 = *(unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v80[0] + 16));
      if ((int)v14 >= (int)v13)
      {
        v56 = v82;
        v57 = v83;
        v58 = (v83 - v82) >> 4;
        if (v58 == (_DWORD)v14 - (_DWORD)v13 + 1)
        {
          while (v56 != v57)
          {
            pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
            LODWORD(v13) = v13 + 1;
            v56 += 16;
          }
LABEL_63:
          __p = v80;
          std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_64:
          __p = &v82;
          std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_65;
        }
        __p = "CoreRealityIO/mtlxToUsdShade.cpp";
        v76 = "_CopyValue";
        v77 = 461;
        v78 = "void realityio::mtlx::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::ConstValueElementPtr &)";
        v79 = 0;
        v59 = (RIO_MTLX::Element *)*a2;
        v67 = 0;
        v68 = 0;
        RIO_MTLX::Element::getNamePath(v59, (uint64_t)&v67, (uint64_t)v71);
        if (v72 >= 0)
          v61 = v71;
        else
          v61 = (void **)v71[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"valuerange [%d,%d] doesn't match valuecurve size %zd on '%s';  ignoring",
          v60,
          v13,
          v14,
          v58,
          v61);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
        if (v74 < 0)
          operator delete(v73[0]);
        if (v72 < 0)
          operator delete(v71[0]);
        v18 = v68;
        if (!v68)
          goto LABEL_63;
        v62 = (unint64_t *)&v68->__shared_owners_;
        do
          v20 = __ldaxr(v62);
        while (__stlxr(v20 - 1, v62));
      }
      else
      {
        __p = "CoreRealityIO/mtlxToUsdShade.cpp";
        v76 = "_CopyValue";
        v77 = 454;
        v78 = "void realityio::mtlx::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::ConstValueElementPtr &)";
        v79 = 0;
        v15 = (RIO_MTLX::Element *)*a2;
        v69 = 0;
        v70 = 0;
        RIO_MTLX::Element::getNamePath(v15, (uint64_t)&v69, (uint64_t)v71);
        if (v72 >= 0)
          v17 = v71;
        else
          v17 = (void **)v71[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid valuerange [%d,%d] on '%s';  ignoring",
          v16,
          v13,
          v14,
          v17);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
        if (v74 < 0)
          operator delete(v73[0]);
        if (v72 < 0)
          operator delete(v71[0]);
        v18 = v70;
        if (!v70)
          goto LABEL_63;
        v19 = (unint64_t *)&v70->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
      }
    }
    else
    {
      __p = "CoreRealityIO/mtlxToUsdShade.cpp";
      v76 = "_CopyValue";
      v77 = 470;
      v78 = "void realityio::mtlx::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::ConstValueElementPtr &)";
      v79 = 0;
      v28 = v84;
      if (*((char *)v84 + 23) < 0)
        v28 = (uint64_t *)*v84;
      v29 = (RIO_MTLX::Element *)*a2;
      v65 = 0;
      v66 = 0;
      RIO_MTLX::Element::getNamePath(v29, (uint64_t)&v65, (uint64_t)v71);
      if (v72 >= 0)
        v31 = v71;
      else
        v31 = (void **)v71[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Malformed valuerange '%s' on '%s';  ignoring",
        v30,
        v28,
        v31);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      if (v74 < 0)
        operator delete(v73[0]);
      if (v72 < 0)
        operator delete(v71[0]);
      v18 = v66;
      if (!v66)
        goto LABEL_63;
      v32 = (unint64_t *)&v66->__shared_owners_;
      do
        v20 = __ldaxr(v32);
      while (__stlxr(v20 - 1, v32));
    }
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_63;
  }
  if (*((_BYTE *)v84 + 23))
    goto LABEL_19;
LABEL_65:
  ActiveColorSpace = RIO_MTLX::Element::getActiveColorSpace((RIO_MTLX::Element *)*a2);
  v34 = ActiveColorSpace;
  v35 = *((unsigned __int8 *)ActiveColorSpace + 23);
  if ((v35 & 0x80u) != 0)
    v35 = ActiveColorSpace[1];
  if (v35)
  {
    RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)*a2, &__p);
    v36 = RIO_MTLX::Element::getActiveColorSpace((RIO_MTLX::Element *)__p);
    v38 = *((unsigned __int8 *)v34 + 23);
    if ((v38 & 0x80u) == 0)
      v39 = *((unsigned __int8 *)v34 + 23);
    else
      v39 = v34[1];
    v40 = *((unsigned __int8 *)v36 + 23);
    v41 = (char)v40;
    if ((v40 & 0x80u) != 0)
      v40 = v36[1];
    if (v39 == v40)
    {
      if (v41 >= 0)
        v37 = (unsigned __int8 *)v36;
      else
        v37 = (unsigned __int8 *)*v36;
      if ((v38 & 0x80) != 0)
      {
        v47 = memcmp((const void *)*v34, v37, v34[1]) != 0;
      }
      else if (*((_BYTE *)v34 + 23))
      {
        v42 = v38 - 1;
        v43 = v34;
        do
        {
          v45 = *(unsigned __int8 *)v43;
          v43 = (uint64_t *)((char *)v43 + 1);
          v44 = v45;
          v46 = *v37++;
          v47 = v44 != v46;
        }
        while (v44 == v46 && v42-- != 0);
      }
      else
      {
        v47 = 0;
      }
    }
    else
    {
      v47 = 1;
    }
    v49 = (std::__shared_weak_count *)v76;
    if (!v76)
      goto LABEL_93;
    v50 = (unint64_t *)(v76 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v49->__on_zero_shared)(v49, v37);
      std::__shared_weak_count::__release_weak(v49);
      if (!v47)
        goto LABEL_106;
    }
    else
    {
LABEL_93:
      if (!v47)
        goto LABEL_106;
    }
    v52 = (*(uint64_t (**)(void *, unsigned __int8 *))(*(_QWORD *)*a2 + 56))(*a2, v37);
    if (std::string::compare((const std::string *)v52, 0, 5uLL, "color"))
    {
      v53 = *(char *)(v52 + 23);
      if (v53 < 0)
      {
        if (*(_QWORD *)(v52 + 8) != 8)
          goto LABEL_106;
        v52 = *(_QWORD *)v52;
      }
      else if (v53 != 8)
      {
        goto LABEL_106;
      }
      if (*(_QWORD *)v52 != 0x656D616E656C6966)
        goto LABEL_106;
    }
    MEMORY[0x2348B2764](&__p, v34);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::SetColorSpace(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
    if ((__p & 7) != 0)
    {
      v54 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
  }
LABEL_106:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v86);
}

void sub_2301B0CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a33 = (void *)(v38 - 152);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = (void *)(v38 - 128);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v38 - 88));
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t realityio::mtlx::`anonymous namespace'::_AddReference(realityio::mtlx::_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  int v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__ *v10;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::UsdStage *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__ *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v31;
  pxrInternal__aapl__pxrReserved__ *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
  {
    *(_DWORD *)this = 1;
    *((_QWORD *)this + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *((_QWORD *)this + 3) = 0;
    return result;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a2);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v36);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, a3);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v31))
    goto LABEL_17;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v26 = MEMORY[0x24BEE9D98] + 16;
  if (!v27 || (v27[57] & 8) != 0)
  {
    MEMORY[0x2348B2170](&v26);
  }
  else
  {
    v7 = (*(uint64_t (**)(uint64_t *))(MEMORY[0x24BEE9D98] + 48))(&v26);
    MEMORY[0x2348B2170](&v26);
    if (v7)
    {
      *(_DWORD *)this = v31;
      *((_QWORD *)this + 1) = v32;
      v32 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 4, &v33);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 5, &v34);
      *((_QWORD *)this + 3) = v35;
      v35 = 0;
      goto LABEL_39;
    }
  }
  v10 = v32;
  if (!v32 || (*((_BYTE *)v32 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v32, v8);
  if (!**((_QWORD **)v10 + 3))
  {
LABEL_17:
    if ((v35 & 7) != 0)
    {
      v12 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
    if (v32)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v32);
    v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v36);
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v14, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26);
    if ((v26 & 7) != 0)
    {
      v15 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences(this);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v25);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v31, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
    if ((v29 & 7) != 0)
    {
      v17 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
    v19 = (pxrInternal__aapl__pxrReserved__ *)v27;
    if (!v27)
      goto LABEL_30;
    goto LABEL_29;
  }
  v26 = (uint64_t)"CoreRealityIO/mtlxToUsdShade.cpp";
  v27 = "_AddReference";
  v28 = 603;
  v29 = (unint64_t)"UsdPrim realityio::mtlx::(anonymous namespace)::_AddReference(const UsdPrim &, const SdfPath &)";
  v30 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
  if (!v32 || (*((_BYTE *)v32 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v32, v11);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_QWORD *)this + 3) = 0;
  if ((v35 & 7) != 0)
  {
    v23 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
LABEL_39:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
  v19 = v32;
  if (v32)
LABEL_29:
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v19);
LABEL_30:
  result = v37;
  if (v37)
  {
    v20 = (unsigned int *)(v37 + 8);
    do
    {
      v21 = __ldxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void realityio::mtlx::`anonymous namespace'::_GetNodeDef(RIO_MTLX *a1, std::string **a2)
{
  std::string *v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  RIO_MTLX *v8;
  uint64_t v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *v14;
  RIO_MTLX *v15;
  uint64_t v16;
  std::string::size_type v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  std::string *v21;
  RIO_MTLX *v22;
  uint64_t v23;
  std::string::size_type v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  std::string *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  std::string::size_type v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  std::string *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string *v54;
  std::__shared_weak_count *v55;
  std::string *v56;
  std::__shared_weak_count *v57;
  std::string v58;
  __int128 v59;

  v4 = *a2;
  v5 = RIO_MTLX::EMPTY_STRING(a1);
  RIO_MTLX::Node::getNodeDef(v4, (uint64_t)v5, 0, (RIO_MTLX::InterfaceElement **)&v58);
  v59 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
  if (v58.__r_.__value_.__r.__words[0])
  {
    *(_OWORD *)a1 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
    return;
  }
  v6 = (*(uint64_t (**)(std::string *))((*a2)->__r_.__value_.__r.__words[0] + 56))(*a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v58.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v7;
  }
  v8 = (RIO_MTLX *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING((RIO_MTLX *)v6);
  v9 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    size = v58.__r_.__value_.__l.__size_;
  v11 = *((unsigned __int8 *)v8 + 23);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v8 + 1);
  if (size == v11)
  {
    if (v12 >= 0)
      v13 = (unsigned __int8 *)v8;
    else
      v13 = *(unsigned __int8 **)v8;
    if ((*((_BYTE *)&v58.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v8 = (RIO_MTLX *)memcmp(v58.__r_.__value_.__l.__data_, v13, v58.__r_.__value_.__l.__size_);
      if (!(_DWORD)v8)
        goto LABEL_86;
    }
    else
    {
      if (!*((_BYTE *)&v58.__r_.__value_.__s + 23))
        goto LABEL_86;
      v14 = &v58;
      while (v14->__r_.__value_.__s.__data_[0] == *v13)
      {
        v14 = (std::string *)((char *)v14 + 1);
        ++v13;
        if (!--v9)
          goto LABEL_86;
      }
    }
  }
  v15 = (RIO_MTLX *)RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(v8);
  v16 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    v17 = v58.__r_.__value_.__l.__size_;
  v18 = *((unsigned __int8 *)v15 + 23);
  v19 = (char)v18;
  if ((v18 & 0x80u) != 0)
    v18 = *((_QWORD *)v15 + 1);
  if (v17 == v18)
  {
    if (v19 >= 0)
      v20 = (unsigned __int8 *)v15;
    else
      v20 = *(unsigned __int8 **)v15;
    if ((*((_BYTE *)&v58.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v15 = (RIO_MTLX *)memcmp(v58.__r_.__value_.__l.__data_, v20, v58.__r_.__value_.__l.__size_);
      if (!(_DWORD)v15)
        goto LABEL_86;
    }
    else
    {
      if (!*((_BYTE *)&v58.__r_.__value_.__s + 23))
        goto LABEL_86;
      v21 = &v58;
      while (v21->__r_.__value_.__s.__data_[0] == *v20)
      {
        v21 = (std::string *)((char *)v21 + 1);
        ++v20;
        if (!--v16)
          goto LABEL_86;
      }
    }
  }
  v22 = (RIO_MTLX *)RIO_MTLX::VOLUME_SHADER_TYPE_STRING(v15);
  v23 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    v24 = v58.__r_.__value_.__l.__size_;
  v25 = *((unsigned __int8 *)v22 + 23);
  v26 = (char)v25;
  if ((v25 & 0x80u) != 0)
    v25 = *((_QWORD *)v22 + 1);
  if (v24 == v25)
  {
    if (v26 >= 0)
      v27 = (unsigned __int8 *)v22;
    else
      v27 = *(unsigned __int8 **)v22;
    if ((*((_BYTE *)&v58.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v22 = (RIO_MTLX *)memcmp(v58.__r_.__value_.__l.__data_, v27, v58.__r_.__value_.__l.__size_);
      if (!(_DWORD)v22)
        goto LABEL_86;
    }
    else
    {
      if (!*((_BYTE *)&v58.__r_.__value_.__s + 23))
        goto LABEL_86;
      v28 = &v58;
      while (v28->__r_.__value_.__s.__data_[0] == *v27)
      {
        v28 = (std::string *)((char *)v28 + 1);
        ++v27;
        if (!--v23)
          goto LABEL_86;
      }
    }
  }
  v29 = (unsigned __int8 *)RIO_MTLX::LIGHT_SHADER_TYPE_STRING(v22);
  v30 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    v31 = v58.__r_.__value_.__l.__size_;
  v32 = v29[23];
  v33 = (char)v32;
  if ((v32 & 0x80u) != 0)
    v32 = *((_QWORD *)v29 + 1);
  if (v31 != v32)
  {
LABEL_71:
    v36 = (std::__shared_weak_count *)a2[1];
    v56 = *a2;
    v57 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(p_shared_owners);
      while (__stxr(v38 + 1, p_shared_owners));
    }
    realityio::mtlx::UsdMtlxGetVersion((RIO_MTLX::InterfaceElement **)&v56, 0);
    RIO_MTLX::InterfaceElement::getTarget((RIO_MTLX::InterfaceElement *)*a2);
    v39 = (std::__shared_weak_count *)a2[1];
    v54 = *a2;
    v55 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    if (v39)
    {
      v42 = (unint64_t *)&v39->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v44 = v57;
    if (!v57)
      goto LABEL_94;
    v45 = (unint64_t *)&v57->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    goto LABEL_92;
  }
  if (v33 >= 0)
    v34 = v29;
  else
    v34 = *(unsigned __int8 **)v29;
  if ((*((_BYTE *)&v58.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (!memcmp(v58.__r_.__value_.__l.__data_, v34, v58.__r_.__value_.__l.__size_))
      goto LABEL_86;
    goto LABEL_71;
  }
  if (*((_BYTE *)&v58.__r_.__value_.__s + 23))
  {
    v35 = &v58;
    while (v35->__r_.__value_.__s.__data_[0] == *v34)
    {
      v35 = (std::string *)((char *)v35 + 1);
      ++v34;
      if (!--v30)
        goto LABEL_86;
    }
    goto LABEL_71;
  }
LABEL_86:
  v47 = (std::__shared_weak_count *)a2[1];
  v56 = *a2;
  v57 = v47;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  realityio::mtlx::UsdMtlxGetVersion((RIO_MTLX::InterfaceElement **)&v56, 0);
  RIO_MTLX::InterfaceElement::getTarget((RIO_MTLX::InterfaceElement *)*a2);
  v54 = 0;
  v55 = 0;
  v44 = v57;
  if (!v57)
    goto LABEL_94;
  v50 = (unint64_t *)&v57->__shared_owners_;
  do
    v46 = __ldaxr(v50);
  while (__stlxr(v46 - 1, v50));
LABEL_92:
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
LABEL_94:
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_2301B17B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v20 - 48);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::_NodeGraphBuilder::_AddOutput(uint64_t a1, uint64_t a2, uint64_t a3, std::string **a4, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a5)
{
  RIO_MTLX *v10;
  uint64_t *v11;
  uint64_t v12;
  realityio::mtlx::_anonymous_namespace_ *v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  uint64_t **v17;
  unsigned __int8 *v18;
  realityio::mtlx::_anonymous_namespace_ *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  RIO_MTLX *v25;
  std::string *v26;
  int v27;
  BOOL v28;
  int v29;
  int data;
  int v31;
  BOOL v32;
  int v33;
  RIO_MTLX *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  uint64_t *v42;
  RIO_MTLX *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t *v49;
  RIO_MTLX *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned __int8 *v62;
  uint64_t *v63;
  std::string::size_type v64;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v65;
  RIO_MTLX::Element *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::string *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void **v86;
  void **v87;
  const void **v88;
  char *v89;
  uint64_t v90;
  uint64_t *v91;
  int v92;
  unsigned int *v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  std::string::size_type v104;
  RIO_MTLX::Element *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v120;
  unsigned int *v121;
  unsigned int v122;
  char *v123;
  char *v124;
  char *v125;
  std::string v126;
  __int128 v127;
  uint64_t v128;
  std::string v129;
  uint64_t v130;
  std::string::size_type v131;
  std::string::size_type v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  std::string v135;
  __int128 *v136;
  char v137;
  const std::string *v138;
  uint64_t *v139;
  uint64_t *v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v10 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(*(_QWORD *)a3 + 160), (unsigned __int8 *)&qword_255E55238);
  if (v10)
  {
    v11 = (uint64_t *)((char *)v10 + 40);
  }
  else
  {
    v10 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
    v11 = (uint64_t *)v10;
  }
  v12 = *((unsigned __int8 *)v11 + 23);
  if ((v12 & 0x80u) != 0)
    v12 = v11[1];
  if (!v12)
    v11 = RIO_MTLX::EMPTY_STRING(v10);
  memset(&v135, 0, sizeof(v135));
  RIO_MTLX::Element::getDocument(*(RIO_MTLX::Element **)a3, &v126);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::TypeDef>((uint64_t)v126.__r_.__value_.__l.__data_, (unsigned __int8 *)v11, &v133);
  size = (std::__shared_weak_count *)v126.__r_.__value_.__l.__size_;
  if (v126.__r_.__value_.__l.__size_)
  {
    v15 = (unint64_t *)(v126.__r_.__value_.__l.__size_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v133)
  {
    v18 = (unsigned __int8 *)v126.__r_.__value_.__r.__words[0];
    if (*(char *)(v126.__r_.__value_.__r.__words[0] + 23) < 0)
    {
      if (!*(_QWORD *)(v126.__r_.__value_.__r.__words[0] + 8))
        goto LABEL_34;
    }
    else if (!*(_BYTE *)(v126.__r_.__value_.__r.__words[0] + 23))
    {
      goto LABEL_34;
    }
    v19 = (realityio::mtlx::_anonymous_namespace_ *)RIO_MTLX::SHADER_SEMANTIC((RIO_MTLX *)v17);
    v20 = v18[23];
    if ((v20 & 0x80u) == 0)
      v21 = v18[23];
    else
      v21 = *((_QWORD *)v18 + 1);
    v22 = *((unsigned __int8 *)v19 + 23);
    v23 = (char)v22;
    if ((v22 & 0x80u) != 0)
      v22 = *((_QWORD *)v19 + 1);
    if (v21 == v22)
    {
      if (v23 >= 0)
        v24 = (unsigned __int8 *)v19;
      else
        v24 = *(unsigned __int8 **)v19;
      if ((v20 & 0x80) != 0)
      {
        v19 = (realityio::mtlx::_anonymous_namespace_ *)memcmp(*(const void **)v18, v24, *((_QWORD *)v18 + 1));
        if ((_DWORD)v19)
          goto LABEL_34;
      }
      else if (v18[23])
      {
        while (*v18 == *v24)
        {
          ++v18;
          ++v24;
          if (!--v20)
            goto LABEL_33;
        }
        goto LABEL_34;
      }
LABEL_33:
      std::string::operator=(&v135, v138);
    }
  }
LABEL_34:
  v132 = 0;
  v25 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v131);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
  {
    switch(v135.__r_.__value_.__l.__size_)
    {
      case 5uLL:
        v26 = (std::string *)v135.__r_.__value_.__r.__words[0];
LABEL_39:
        data = (int)v26->__r_.__value_.__l.__data_;
        v31 = v26->__r_.__value_.__s.__data_[4];
        v32 = data == 1751607660;
        v33 = 116;
        break;
      case 6uLL:
        v31 = *(unsigned __int16 *)(v135.__r_.__value_.__r.__words[0] + 4);
        v32 = *(_DWORD *)v135.__r_.__value_.__l.__data_ == 1970040694;
        v33 = 25965;
        break;
      case 7uLL:
        v31 = *(_DWORD *)(v135.__r_.__value_.__r.__words[0] + 3);
        v32 = *(_DWORD *)v135.__r_.__value_.__l.__data_ == 1718777203;
        v33 = 1701011814;
        break;
      case 0xCuLL:
        v31 = *(_DWORD *)(v135.__r_.__value_.__r.__words[0] + 8);
        v32 = *(_QWORD *)v135.__r_.__value_.__l.__data_ == 0x6563616C70736964;
        v33 = 1953391981;
        break;
      default:
        goto LABEL_55;
    }
    if (v32 && v31 == v33)
      goto LABEL_124;
  }
  else
  {
    v26 = &v135;
    switch(*((_BYTE *)&v135.__r_.__value_.__s + 23))
    {
      case 5:
        goto LABEL_39;
      case 6:
        v27 = WORD2(v135.__r_.__value_.__r.__words[0]);
        v28 = LODWORD(v135.__r_.__value_.__l.__data_) == 1970040694;
        v29 = 25965;
        break;
      case 7:
        v27 = *(_DWORD *)((char *)v135.__r_.__value_.__r.__words + 3);
        v28 = LODWORD(v135.__r_.__value_.__l.__data_) == 1718777203;
        v29 = 1701011814;
        break;
      case 0xC:
        v27 = v135.__r_.__value_.__r.__words[1];
        v28 = v135.__r_.__value_.__r.__words[0] == 0x6563616C70736964;
        v29 = 1953391981;
        break;
      default:
        goto LABEL_55;
    }
    if (v28 && v27 == v29)
      goto LABEL_124;
  }
LABEL_55:
  v36 = (RIO_MTLX *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING(v25);
  v37 = *((unsigned __int8 *)v11 + 23);
  if ((v37 & 0x80u) == 0)
    v38 = *((unsigned __int8 *)v11 + 23);
  else
    v38 = v11[1];
  v39 = *((unsigned __int8 *)v36 + 23);
  v40 = (char)v39;
  if ((v39 & 0x80u) != 0)
    v39 = *((_QWORD *)v36 + 1);
  if (v38 == v39)
  {
    if (v40 >= 0)
      v41 = (unsigned __int8 *)v36;
    else
      v41 = *(unsigned __int8 **)v36;
    if ((v37 & 0x80) != 0)
    {
      v36 = (RIO_MTLX *)memcmp((const void *)*v11, v41, v11[1]);
      if (!(_DWORD)v36)
        goto LABEL_124;
    }
    else
    {
      if (!*((_BYTE *)v11 + 23))
        goto LABEL_124;
      v42 = v11;
      while (*(unsigned __int8 *)v42 == *v41)
      {
        v42 = (uint64_t *)((char *)v42 + 1);
        ++v41;
        if (!--v37)
          goto LABEL_124;
      }
    }
  }
  v43 = (RIO_MTLX *)RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(v36);
  v44 = *((unsigned __int8 *)v11 + 23);
  if ((v44 & 0x80u) == 0)
    v45 = *((unsigned __int8 *)v11 + 23);
  else
    v45 = v11[1];
  v46 = *((unsigned __int8 *)v43 + 23);
  v47 = (char)v46;
  if ((v46 & 0x80u) != 0)
    v46 = *((_QWORD *)v43 + 1);
  if (v45 == v46)
  {
    if (v47 >= 0)
      v48 = (unsigned __int8 *)v43;
    else
      v48 = *(unsigned __int8 **)v43;
    if ((v44 & 0x80) != 0)
    {
      v43 = (RIO_MTLX *)memcmp((const void *)*v11, v48, v11[1]);
      if (!(_DWORD)v43)
        goto LABEL_124;
    }
    else
    {
      if (!*((_BYTE *)v11 + 23))
        goto LABEL_124;
      v49 = v11;
      while (*(unsigned __int8 *)v49 == *v48)
      {
        v49 = (uint64_t *)((char *)v49 + 1);
        ++v48;
        if (!--v44)
          goto LABEL_124;
      }
    }
  }
  v50 = (RIO_MTLX *)RIO_MTLX::VOLUME_SHADER_TYPE_STRING(v43);
  v51 = *((unsigned __int8 *)v11 + 23);
  if ((v51 & 0x80u) == 0)
    v52 = *((unsigned __int8 *)v11 + 23);
  else
    v52 = v11[1];
  v53 = *((unsigned __int8 *)v50 + 23);
  v54 = (char)v53;
  if ((v53 & 0x80u) != 0)
    v53 = *((_QWORD *)v50 + 1);
  if (v52 == v53)
  {
    if (v54 >= 0)
      v55 = (unsigned __int8 *)v50;
    else
      v55 = *(unsigned __int8 **)v50;
    if ((v51 & 0x80) != 0)
    {
      v50 = (RIO_MTLX *)memcmp((const void *)*v11, v55, v11[1]);
      if (!(_DWORD)v50)
        goto LABEL_124;
    }
    else
    {
      if (!*((_BYTE *)v11 + 23))
        goto LABEL_124;
      v56 = v11;
      while (*(unsigned __int8 *)v56 == *v55)
      {
        v56 = (uint64_t *)((char *)v56 + 1);
        ++v55;
        if (!--v51)
          goto LABEL_124;
      }
    }
  }
  v57 = (unsigned __int8 *)RIO_MTLX::LIGHT_SHADER_TYPE_STRING(v50);
  v58 = *((unsigned __int8 *)v11 + 23);
  if ((v58 & 0x80u) == 0)
    v59 = *((unsigned __int8 *)v11 + 23);
  else
    v59 = v11[1];
  v60 = v57[23];
  v61 = (char)v60;
  if ((v60 & 0x80u) != 0)
    v60 = *((_QWORD *)v57 + 1);
  if (v59 != v60)
    goto LABEL_119;
  if (v61 >= 0)
    v62 = v57;
  else
    v62 = *(unsigned __int8 **)v57;
  if ((v58 & 0x80) != 0)
  {
    if (memcmp((const void *)*v11, v62, v11[1]))
      goto LABEL_119;
LABEL_124:
    v65 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
    if (!v65)
LABEL_125:
      v65 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
LABEL_126:
    v131 = *((_QWORD *)v65 + 11);
    goto LABEL_127;
  }
  if (!*((_BYTE *)v11 + 23))
    goto LABEL_124;
  v63 = v11;
  while (*(unsigned __int8 *)v63 == *v62)
  {
    v63 = (uint64_t *)((char *)v63 + 1);
    ++v62;
    if (!--v58)
      goto LABEL_124;
  }
LABEL_119:
  v64 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v64 = v135.__r_.__value_.__l.__size_;
  if (v64)
  {
    v65 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
    if (!v65)
      goto LABEL_125;
    goto LABEL_126;
  }
  realityio::mtlx::UsdMtlxGetUsdType((unsigned __int8 *)v11, (uint64_t)&v126);
  v131 = v126.__r_.__value_.__r.__words[0];
  if ((v126.__r_.__value_.__s.__data_[8] & 7) != 0)
  {
    v118 = (unsigned int *)(v126.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8);
    do
      v119 = __ldxr(v118);
    while (__stlxr(v119 - 2, v118));
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v131))
  {
    v120 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
    if (!v120)
      v120 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    v131 = *((_QWORD *)v120 + 11);
    MEMORY[0x2348B2764](&v126, v11);
    if ((v132 & 7) != 0)
    {
      v121 = (unsigned int *)(v132 & 0xFFFFFFFFFFFFFFF8);
      do
        v122 = __ldxr(v121);
      while (__stlxr(v122 - 2, v121));
    }
    v132 = v126.__r_.__value_.__r.__words[0];
  }
LABEL_127:
  v66 = *(RIO_MTLX::Element **)a3;
  v67 = *(std::__shared_weak_count **)(a3 + 8);
  v126.__r_.__value_.__r.__words[0] = *(_QWORD *)a3;
  v126.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldxr(p_shared_owners);
    while (__stxr(v69 + 1, p_shared_owners));
  }
  if (v66)
  {
    if (!v67)
      goto LABEL_138;
  }
  else
  {
    v130 = 0;
    if (!v67)
      goto LABEL_138;
  }
  v70 = (unint64_t *)&v67->__shared_owners_;
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 - 1, v70));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
  }
LABEL_138:
  v72 = *a4;
  if (SHIBYTE((*a4)[2].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v129, v72[2].__r_.__value_.__l.__data_, v72[2].__r_.__value_.__l.__size_);
  else
    v129 = v72[2];
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput(a5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v130, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v131);
  v144 = *(_DWORD *)a1;
  v73 = *(_QWORD *)(a1 + 8);
  v145 = v73;
  if (v73)
  {
    v74 = (unint64_t *)(v73 + 48);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v146, (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v147, (_DWORD *)(a1 + 20));
  v76 = *(_QWORD *)(a1 + 24);
  v148 = v76;
  if ((v76 & 7) != 0)
  {
    v77 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 2, v77));
    if ((v78 & 1) == 0)
      v148 &= 0xFFFFFFFFFFFFFFF8;
  }
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v138 = (const std::string *)&v123;
  LOBYTE(v139) = 0;
  v123 = (char *)operator new(0x20uLL);
  v124 = v123;
  v79 = v123 + 32;
  v125 = v123 + 32;
  std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>((uint64_t)v123, (uint64_t)&v144);
  v124 = v79;
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v126, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
    v79 = v124;
  }
  else
  {
    v126 = v129;
  }
  v127 = 0uLL;
  v128 = 0;
  v80 = v123;
  v136 = &v127;
  v137 = 0;
  v81 = v79 - v123;
  if (v79 != v123)
  {
    if (v81 < 0)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    *(_QWORD *)&v127 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)&v128, v81 >> 5);
    *((_QWORD *)&v127 + 1) = v127;
    v128 = v127 + 32 * v82;
    v142 = v127;
    v143 = v127;
    v138 = (const std::string *)&v128;
    v139 = &v142;
    v140 = &v143;
    v83 = v127;
    v141 = 0;
    do
    {
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)&v128, v83, (uint64_t)v80);
      v80 += 32;
      v84 = v143;
      v83 = v143 + 32;
      v143 += 32;
    }
    while (v80 != v79);
    *((_QWORD *)&v127 + 1) = v84 + 32;
  }
  v86 = (void **)(a2 + 112);
  v85 = *(char **)(a2 + 112);
  if (v85)
  {
    while (1)
    {
      while (1)
      {
        v87 = (void **)v85;
        v88 = (const void **)(v85 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](a2 + 120, (const void **)&v126.__r_.__value_.__l.__data_, (const void **)v85 + 4))break;
        v85 = (char *)*v87;
        v86 = v87;
        if (!*v87)
          goto LABEL_165;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](a2 + 120, v88, (const void **)&v126.__r_.__value_.__l.__data_))break;
      v86 = v87 + 1;
      v85 = (char *)v87[1];
      if (!v85)
        goto LABEL_165;
    }
    v89 = (char *)*v86;
    if (*v86)
    {
      v92 = 1;
      goto LABEL_168;
    }
  }
  else
  {
    v87 = (void **)(a2 + 112);
  }
LABEL_165:
  v89 = (char *)operator new(0x50uLL);
  *(std::string *)(v89 + 32) = v126;
  memset(&v126, 0, sizeof(v126));
  *(_OWORD *)(v89 + 56) = v127;
  *((_QWORD *)v89 + 9) = v128;
  v128 = 0;
  v127 = 0uLL;
  *(_QWORD *)v89 = 0;
  *((_QWORD *)v89 + 1) = 0;
  *((_QWORD *)v89 + 2) = v87;
  *v86 = v89;
  v90 = **(_QWORD **)(a2 + 104);
  v91 = (uint64_t *)v89;
  if (v90)
  {
    *(_QWORD *)(a2 + 104) = v90;
    v91 = (uint64_t *)*v86;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 112), v91);
  v92 = 0;
  ++*(_QWORD *)(a2 + 120);
LABEL_168:
  v138 = (const std::string *)&v127;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  v138 = (const std::string *)&v123;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
  if ((v148 & 7) != 0)
  {
    v93 = (unsigned int *)(v148 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v146);
  if (v145)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v145);
  if (v92)
  {
    v95 = *((_QWORD *)v89 + 9);
    v96 = *((_QWORD *)v89 + 8);
    if (v96 >= v95)
    {
      v98 = *((_QWORD *)v89 + 7);
      v99 = (uint64_t)(v96 - v98) >> 5;
      if ((unint64_t)(v99 + 1) >> 59)
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      v100 = v95 - v98;
      v101 = v100 >> 4;
      if (v100 >> 4 <= (unint64_t)(v99 + 1))
        v101 = v99 + 1;
      if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFE0)
        v102 = 0x7FFFFFFFFFFFFFFLL;
      else
        v102 = v101;
      *((_QWORD *)&v127 + 1) = v89 + 72;
      if (v102)
        v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)(v89 + 72), v102);
      else
        v103 = 0;
      v104 = (std::string::size_type)&v103[32 * v99];
      v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
      v126.__r_.__value_.__l.__size_ = v104;
      *(_QWORD *)&v127 = &v103[32 * v102];
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>(v104, a1);
      v126.__r_.__value_.__r.__words[2] = v104 + 32;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__swap_out_circular_buffer((uint64_t *)v89 + 7, &v126);
      v97 = *((_QWORD *)v89 + 8);
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::~__split_buffer((void **)&v126.__r_.__value_.__l.__data_);
    }
    else
    {
      std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>(*((_QWORD *)v89 + 8), a1);
      v97 = v96 + 32;
      *((_QWORD *)v89 + 8) = v96 + 32;
    }
    *((_QWORD *)v89 + 8) = v97;
  }
  if (v132)
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v132);
  v105 = *(RIO_MTLX::Element **)a3;
  v106 = *(std::__shared_weak_count **)(a3 + 8);
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
  v126.__r_.__value_.__l.__size_ = (std::string::size_type)v106;
  if (v106)
  {
    v107 = (unint64_t *)&v106->__shared_owners_;
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
  }
  if (v106)
  {
    v109 = (unint64_t *)&v106->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if ((v130 & 7) != 0)
  {
    v111 = (unsigned int *)(v130 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  if ((v132 & 7) != 0)
  {
    v113 = (unsigned int *)(v132 & 0xFFFFFFFFFFFFFFF8);
    do
      v114 = __ldxr(v113);
    while (__stlxr(v114 - 2, v113));
  }
  v115 = v134;
  if (v134)
  {
    v116 = (unint64_t *)&v134->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
}

void sub_2301B23CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  unsigned int *v41;
  unsigned int v42;

  if ((a31 & 7) != 0)
  {
    v41 = (unsigned int *)(a31 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (a39 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::_FindMatchingNodeDef(_QWORD *a1, RIO_MTLX::Element **a2, RIO_MTLX::InterfaceElement **a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  uint64_t *Target;
  RIO_MTLX::InterfaceElement *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  RIO_MTLX::Element *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t *NodeDefString;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *__p[2];
  char v48;
  RIO_MTLX::InterfaceElement *v49;
  std::__shared_weak_count *v50;
  uint64_t Version;
  int v52;
  __int128 v53;

  RIO_MTLX::Element::getDocument(*a2, __p);
  v6 = (unsigned __int8 *)*a2 + 24;
  v7 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::Element *))(*(_QWORD *)*a2 + 56))(*a2);
  v8 = (std::__shared_weak_count *)a2[1];
  v49 = *a2;
  v50 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  Version = realityio::mtlx::UsdMtlxGetVersion(&v49, 0);
  v52 = v11;
  Target = RIO_MTLX::InterfaceElement::getTarget(*a2);
  v14 = v50;
  if (v50)
  {
    v15 = (unint64_t *)&v50->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v18 = (unint64_t *)((char *)__p[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v53;
  if ((_QWORD)v53)
    goto LABEL_15;
  v22 = atomic_load((unsigned __int8 *)&_MergedGlobals_56);
  if ((v22 & 1) == 0)
  {
    v13 = (RIO_MTLX::InterfaceElement *)__cxa_guard_acquire(&_MergedGlobals_56);
    if ((_DWORD)v13)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      realityio::mtlx::UsdMtlxGetDocument((uint64_t)__p, &qword_255E54F58);
      if (v48 < 0)
        operator delete(__p[0]);
      __cxa_guard_release(&_MergedGlobals_56);
    }
  }
  v23 = *a2;
  v24 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(v13);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v23 + 20, v24))goto LABEL_30;
  v25 = qword_255E54F58;
  NodeDefString = RIO_MTLX::InterfaceElement::getNodeDefString(*a2);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeDef>(v25, (unsigned __int8 *)NodeDefString, __p);
  v27 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  v53 = v27;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v32 = (unint64_t *)((char *)__p[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v20 = v53;
  if ((_QWORD)v53)
  {
LABEL_15:
    v21 = *((_QWORD *)&v53 + 1);
    *a1 = v20;
    a1[1] = v21;
  }
  else
  {
LABEL_30:
    v34 = (unsigned __int8 *)*a2 + 24;
    v35 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::Element *))(*(_QWORD *)*a2 + 56))(*a2);
    v36 = (unint64_t *)a2[1];
    __p[0] = *a2;
    __p[1] = v36;
    if (v36)
    {
      v37 = v36 + 1;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v49 = (RIO_MTLX::InterfaceElement *)realityio::mtlx::UsdMtlxGetVersion((RIO_MTLX::InterfaceElement **)__p, 0);
    LODWORD(v50) = v39;
    v40 = RIO_MTLX::InterfaceElement::getTarget(*a2);
    v41 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v42 = (unint64_t *)((char *)__p[1] + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
}

void sub_2301B2878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&_MergedGlobals_56);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::_FindMatchingNodeDef(_QWORD *a1, uint64_t a2, RIO_MTLX::InterfaceElement **a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *Target;
  RIO_MTLX::InterfaceElement *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char hasExactInputMatch;
  char v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t Version;
  char v34;
  char v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void **v40;
  std::__shared_weak_count *v41;
  char v42;
  RIO_MTLX::Element *v43;
  std::__shared_weak_count *v44;
  _QWORD v45[3];

  *a1 = 0;
  a1[1] = 0;
  RIO_MTLX::Document::getMatchingNodeDefs(a2, a4, (uint64_t)v45);
  v12 = (uint64_t *)v45[0];
  v13 = (uint64_t *)v45[1];
  while (v12 != v13)
  {
    Target = RIO_MTLX::InterfaceElement::getTarget((RIO_MTLX::InterfaceElement *)*v12);
    if ((RIO_MTLX::targetStringsMatch(a7, (uint64_t)Target) & 1) == 0)
      goto LABEL_48;
    v15 = *a3;
    if (*a3)
    {
      v16 = (std::__shared_weak_count *)v12[1];
      v43 = (RIO_MTLX::Element *)*v12;
      v44 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      hasExactInputMatch = RIO_MTLX::InterfaceElement::hasExactInputMatch(v15, &v43, 0);
      v20 = hasExactInputMatch;
      v21 = v44;
      if (!v44)
        goto LABEL_12;
      v22 = (unint64_t *)&v44->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        if ((v20 & 1) == 0)
          goto LABEL_48;
      }
      else
      {
LABEL_12:
        if ((hasExactInputMatch & 1) == 0)
          goto LABEL_48;
      }
    }
    v24 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v12 + 56))(*v12);
    v25 = v24[23];
    if ((v25 & 0x80u) == 0)
      v26 = v24[23];
    else
      v26 = *((_QWORD *)v24 + 1);
    v27 = a5[23];
    v28 = (char)v27;
    if ((v27 & 0x80u) != 0)
      v27 = *((_QWORD *)a5 + 1);
    if (v26 == v27)
    {
      if (v28 >= 0)
        v29 = a5;
      else
        v29 = *(unsigned __int8 **)a5;
      if ((v25 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v24, v29, *((_QWORD *)v24 + 1)))
          goto LABEL_48;
      }
      else if (v24[23])
      {
        while (*v24 == *v29)
        {
          ++v24;
          ++v29;
          if (!--v25)
            goto LABEL_30;
        }
        goto LABEL_48;
      }
LABEL_30:
      v42 = 0;
      v40 = (void **)*v12;
      v30 = (std::__shared_weak_count *)v12[1];
      v41 = v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      Version = realityio::mtlx::UsdMtlxGetVersion((RIO_MTLX::InterfaceElement **)&v40, &v42);
      v35 = v34;
      v36 = v41;
      if (v41)
      {
        v37 = (unint64_t *)&v41->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (*(_BYTE *)(a6 + 8))
      {
        if (v42)
        {
          std::shared_ptr<RIO_MTLX::Element const>::operator=[abi:ne180100](a1, *v12, v12[1]);
        }
        else if (v35)
        {
          goto LABEL_49;
        }
      }
      else if (*(_DWORD *)a6 == (_DWORD)Version && *(_DWORD *)(a6 + 4) == HIDWORD(Version))
      {
LABEL_49:
        std::shared_ptr<RIO_MTLX::Element const>::operator=[abi:ne180100](a1, *v12, v12[1]);
        break;
      }
    }
LABEL_48:
    v12 += 2;
  }
  v40 = (void **)v45;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v40);
}

void sub_2301B2B54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>,pxrInternal__aapl__pxrReserved__::UsdShadeOutput*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      v6 = *(_QWORD *)a1;
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

uint64_t realityio::mtlx::`anonymous namespace'::_NodeGraphBuilder::_ConnectPorts<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeInput>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  realityio::mtlx::_anonymous_namespace_ *v5;
  realityio::mtlx::_anonymous_namespace_ *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t Text;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v17;
  unsigned int *v18;
  unsigned int v19;
  const pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  realityio::mtlx::_anonymous_namespace_ *v21;
  const pxrInternal__aapl__pxrReserved__::TfToken *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  char **v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  int v34;
  int v35;
  int v36;
  _BYTE v37[8];
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  char *v50;
  const char *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;

  RIO_MTLX::Element::asA<RIO_MTLX::Input>(a1, &v44);
  if (!v44)
    goto LABEL_12;
  if ((*((char *)v40 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v40 + 23))
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v40[1])
  {
LABEL_6:
    v50 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v51 = "_ConnectPorts";
    v52 = 1013;
    v53 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::Cons"
                            "tElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeOutput, "
                            "D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v38);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v48);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v6 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
  }
LABEL_7:
  if ((*((char *)v40 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v40 + 23))
      goto LABEL_12;
    goto LABEL_11;
  }
  if (v40[1])
  {
LABEL_11:
    v50 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v51 = "_ConnectPorts";
    v52 = 1021;
    v53 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::Cons"
                            "tElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeOutput, "
                            "D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v38);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v48);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
  }
LABEL_12:
  v7 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v50);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v44);
    v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v44);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Getting referencedPrim for (%s) under (%s).\n", v12, Text, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v48);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v44, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v40, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v44, (uint64_t)&v50);
  if ((_DWORD)v50 == (_DWORD)v40
    && v51 == v41
    && v52 == v42
    && (v13 = v53, (v53 & 0xFFFFFFFFFFFFFFF8) == (v43 & 0xFFFFFFFFFFFFFFF8)))
  {
    v14 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v38 = MEMORY[0x24BEE9D98] + 16;
    if (!v39 || (*(_BYTE *)(v39 + 57) & 8) != 0)
      v14 = 0;
    else
      v14 = (*(uint64_t (**)(uint64_t *))(MEMORY[0x24BEE9D98] + 48))(&v38);
    MEMORY[0x2348B2170](&v38);
    v13 = v53;
  }
  if ((v13 & 7) != 0)
  {
    v15 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
  v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v51;
  if (v51)
    v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v51);
  if (v14)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v17);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v44, (uint64_t)&v50);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v50, &v38);
      if ((v53 & 7) != 0)
      {
        v18 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
      if (v51)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v51);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v44, &v38);
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v40, &v50);
    NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38, NameToken);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v21 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v50, &v35);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v34);
    v22 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v34);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, v22);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v48, &v36);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v49);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
    if ((v53 & 7) != 0)
    {
      v23 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
    if (v51)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v51);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v37);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
  }
  if ((MEMORY[0x2348B379C](a3, &v48) & 1) != 0)
  {
    if (!pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
      goto LABEL_52;
    v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v50);
    v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    + Connected <%s> -> <%s>\n", v27, v25, v26);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v28 = &v50;
  }
  else
  {
    v50 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v51 = "_ConnectPorts";
    v52 = 1054;
    v53 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::Cons"
                            "tElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeOutput, "
                            "D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v38);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v28 = (char **)&v38;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v28);
LABEL_52:
  if ((v43 & 7) != 0)
  {
    v29 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
  if (v41)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v41);
  if ((v47 & 7) != 0)
  {
    v31 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
  if (v45)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v45);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
}

void sub_2301B32EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 - 112));
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::`anonymous namespace'::_NodeGraphBuilder::_ConnectPorts<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  realityio::mtlx::_anonymous_namespace_ *v5;
  realityio::mtlx::_anonymous_namespace_ *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t Text;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v17;
  unsigned int *v18;
  unsigned int v19;
  const pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  realityio::mtlx::_anonymous_namespace_ *v21;
  const pxrInternal__aapl__pxrReserved__::TfToken *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  char **v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  int v34;
  int v35;
  int v36;
  _BYTE v37[8];
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  char *v50;
  const char *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;

  RIO_MTLX::Element::asA<RIO_MTLX::Input>(a1, &v44);
  if (!v44)
    goto LABEL_12;
  if ((*((char *)v40 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v40 + 23))
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v40[1])
  {
LABEL_6:
    v50 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v51 = "_ConnectPorts";
    v52 = 1013;
    v53 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::Cons"
                            "tElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeOutput, "
                            "D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v38);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v48);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v6 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
  }
LABEL_7:
  if ((*((char *)v40 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v40 + 23))
      goto LABEL_12;
    goto LABEL_11;
  }
  if (v40[1])
  {
LABEL_11:
    v50 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v51 = "_ConnectPorts";
    v52 = 1021;
    v53 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::Cons"
                            "tElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeOutput, "
                            "D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v38);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v48);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
  }
LABEL_12:
  v7 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v50);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v44);
    v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v44);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Getting referencedPrim for (%s) under (%s).\n", v12, Text, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v48);
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v44, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v40, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v44, (uint64_t)&v50);
  if ((_DWORD)v50 == (_DWORD)v40
    && v51 == v41
    && v52 == v42
    && (v13 = v53, (v53 & 0xFFFFFFFFFFFFFFF8) == (v43 & 0xFFFFFFFFFFFFFFF8)))
  {
    v14 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v38 = MEMORY[0x24BEE9D98] + 16;
    if (!v39 || (*(_BYTE *)(v39 + 57) & 8) != 0)
      v14 = 0;
    else
      v14 = (*(uint64_t (**)(uint64_t *))(MEMORY[0x24BEE9D98] + 48))(&v38);
    MEMORY[0x2348B2170](&v38);
    v13 = v53;
  }
  if ((v13 & 7) != 0)
  {
    v15 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
  v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v51;
  if (v51)
    v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v51);
  if (v14)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v17);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v44, (uint64_t)&v50);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v50, &v38);
      if ((v53 & 7) != 0)
      {
        v18 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
      if (v51)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v51);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v44, &v38);
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v40, &v50);
    NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38, NameToken);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v21 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v50, &v35);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v34);
    v22 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v34);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, v22);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v48, &v36);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v49);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
    if ((v53 & 7) != 0)
    {
      v23 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
    if (v51)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v51);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v37);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
  }
  if ((MEMORY[0x2348B38EC](a3, &v48) & 1) != 0)
  {
    if (!pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
      goto LABEL_52;
    v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v50);
    v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    + Connected <%s> -> <%s>\n", v27, v25, v26);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v28 = &v50;
  }
  else
  {
    v50 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v51 = "_ConnectPorts";
    v52 = 1054;
    v53 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::Cons"
                            "tElementPtr &, const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeOutput, "
                            "D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, &v38);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v28 = (char **)&v38;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v28);
LABEL_52:
  if ((v43 & 7) != 0)
  {
    v29 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
  if (v41)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v41);
  if ((v47 & 7) != 0)
  {
    v31 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
  if (v45)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v45);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
}

void sub_2301B3B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 - 112));
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void **)(a1 + 56);
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::Input const>,std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::shared_ptr<RIO_MTLX::Input const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::Input const>,std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::shared_ptr<RIO_MTLX::Input const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::Input const>,std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::shared_ptr<RIO_MTLX::Input const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(a1[1]);
    v2 = a1[9];
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 8));
    v5 = a1[7];
    if (v5)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::map<std::string,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  uint64_t **v3;
  const void ***v4;
  const void **v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  BOOL v9;
  uint64_t **v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  const void **v17;
  const void ***v18;
  _QWORD v20[2];
  char v21;
  _QWORD *v22;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3)
        break;
      v7 = v3;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t)v7[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v7;
          v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v8 + 32), v5 + 4))
      {
        if (!*v3)
          goto LABEL_9;
LABEL_11:
        v22 = (_QWORD *)v8;
        v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      v10 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>(a1, &v22, v5 + 4);
LABEL_13:
      if (!*v10)
        goto LABEL_14;
LABEL_23:
      v17 = (const void **)v5[1];
      if (v17)
      {
        do
        {
          v18 = (const void ***)v17;
          v17 = (const void **)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (const void ***)v5[2];
          v9 = *v18 == v5;
          v5 = (const void **)v18;
        }
        while (!v9);
      }
      v5 = (const void **)v18;
      if (v18 == v4)
        return a1;
    }
    v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      v22 = v3;
      v10 = v3;
LABEL_14:
      v11 = (uint64_t *)operator new(0x40uLL);
      v20[0] = v11;
      v20[1] = v3;
      v21 = 0;
      v12 = (std::string *)(v11 + 4);
      if (*((char *)v5 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v5[4], (std::string::size_type)v5[5]);
      }
      else
      {
        v13 = *((_OWORD *)v5 + 2);
        v11[6] = (uint64_t)v5[6];
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v14 = (uint64_t)v5[7];
      v11[7] = v14;
      if ((v14 & 7) != 0)
      {
        v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 2, v15));
        if ((v16 & 1) == 0)
          v11[7] &= 0xFFFFFFFFFFFFFFF8;
      }
      v21 = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v22, v10, v11);
      v20[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100]((uint64_t)v20);
      goto LABEL_23;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_2301B400C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD **v9;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(*v9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::`anonymous namespace'::_Context::GetMaterial(_QWORD *a1, uint64_t a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v4 = a2 + 136;
  v5 = *(_QWORD *)(a2 + 136);
  if (!v5)
    goto LABEL_8;
  v7 = a2 + 144;
  v8 = a2 + 136;
  do
  {
    v9 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), a3);
    v10 = (uint64_t *)(v5 + 8);
    if (!v9)
    {
      v10 = (uint64_t *)v5;
      v8 = v5;
    }
    v5 = *v10;
  }
  while (*v10);
  if (v8 == v4 || std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v8 + 32)))
  {
LABEL_8:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *a1 = MEMORY[0x24BEE9D88] + 16;
    if ((v15 & 7) != 0)
    {
      v11 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
    return 0;
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *a1 = MEMORY[0x24BEE9D88] + 16;
  }
  return result;
}

void sub_2301B4170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::GraphElement::getNodesOfType(RIO_MTLX *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  _QWORD v23[3];

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v6 = RIO_MTLX::EMPTY_STRING(a1);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Node>(a2, (unsigned __int8 *)v6, (uint64_t)v23);
  v7 = (uint64_t *)v23[0];
  v8 = (uint64_t *)v23[1];
  while (v7 != v8)
  {
    v9 = *v7;
    v10 = v7[1];
    *(_QWORD *)&v22 = *v7;
    *((_QWORD *)&v22 + 1) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
    v14 = v13[23];
    if ((v14 & 0x80u) == 0)
      v15 = v13[23];
    else
      v15 = *((_QWORD *)v13 + 1);
    v16 = a3[23];
    v17 = (char)v16;
    if ((v16 & 0x80u) != 0)
      v16 = *((_QWORD *)a3 + 1);
    if (v15 == v16)
    {
      if (v17 >= 0)
        v18 = a3;
      else
        v18 = *(unsigned __int8 **)a3;
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v13, v18, *((_QWORD *)v13 + 1)))
          goto LABEL_22;
LABEL_21:
        std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a1, &v22);
        goto LABEL_22;
      }
      if (!v13[23])
        goto LABEL_21;
      while (*v13 == *v18)
      {
        ++v13;
        ++v18;
        if (!--v14)
          goto LABEL_21;
      }
    }
LABEL_22:
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v7 += 2;
  }
  *(_QWORD *)&v22 = v23;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
}

void sub_2301B42E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  const void **v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t *v13;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD v18[2];
  char v19;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (!v5)
    goto LABEL_10;
  v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v10 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v10, a2))
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v12 = *a3;
    v13 = (uint64_t *)operator new(0x50uLL);
    v18[0] = v13;
    v18[1] = v6;
    v19 = 0;
    v14 = (std::string *)(v13 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v15 = *v12;
      v13[6] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    v13[9] = 0;
    v13[8] = 0;
    v13[7] = (uint64_t)(v13 + 8);
    v19 = 1;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v8;
    *v7 = v13;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_2301B4478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void realityio::mtlx::`anonymous namespace'::_TranslateShaderNodes(RIO_MTLX *a1, RIO_MTLX::InterfaceElement *a2, std::__shared_weak_count *a3, unsigned __int8 *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *i;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;
  _QWORD *v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  realityio::mtlx::_anonymous_namespace_ *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  void **v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  RIO_MTLX::InterfaceElement *v42;
  std::__shared_weak_count *v43;
  uint64_t *v44;
  uint64_t *v45;

  v42 = a2;
  v43 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = RIO_MTLX::EMPTY_STRING(a1);
  RIO_MTLX::getShaderNodes(&v42, a4, (uint64_t)v8, (uint64_t)&v44);
  v9 = v43;
  if (v43)
  {
    v10 = (unint64_t *)&v43->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v44;
  for (i = v45; v12 != i; v12 += 2)
  {
    v14 = *v12;
    v15 = (std::__shared_weak_count *)v12[1];
    v40 = *v12;
    v41 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
    {
      v19 = (_QWORD *)(v14 + 48);
      if (*(char *)(v14 + 71) < 0)
        v19 = (_QWORD *)*v19;
      if ((a4[23] & 0x80u) == 0)
        v20 = (uint64_t *)a4;
      else
        v20 = *(uint64_t **)a4;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding shaderNode '%s' type: '%s'\n", v18, v19, v20);
    }
    v32 = (void **)v14;
    v33 = (const char *)v15;
    if (v15)
    {
      v21 = (unint64_t *)&v15->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    if (v15)
    {
      v24 = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v39)
    {
      if ((*(_BYTE *)(v39 + 57) & 8) == 0)
      {
        v23 = (realityio::mtlx::_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t *))(v38 + 32))(&v38);
        if ((v23 & 1) != 0)
          goto LABEL_41;
      }
    }
    v26 = v40;
    if (*((char *)v37 + 23) < 0)
    {
      if (v37[1])
      {
LABEL_33:
        v32 = (void **)"CoreRealityIO/mtlxToUsdShade.cpp";
        v33 = "_TranslateShaderNodes";
        v34 = 2111;
        v35 = "void realityio::mtlx::(anonymous namespace)::_TranslateShaderNodes(_Context &, const mx::NodePtr &, const std::string &)";
        v36 = 0;
        goto LABEL_40;
      }
    }
    else if (*((_BYTE *)v37 + 23))
    {
      goto LABEL_33;
    }
    if (*((char *)v31 + 23) < 0)
    {
      if (!v31[1])
        goto LABEL_41;
LABEL_39:
      v32 = (void **)"CoreRealityIO/mtlxToUsdShade.cpp";
      v33 = "_TranslateShaderNodes";
      v34 = 2116;
      v35 = "void realityio::mtlx::(anonymous namespace)::_TranslateShaderNodes(_Context &, const mx::NodePtr &, const std::string &)";
      v36 = 0;
LABEL_40:
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      goto LABEL_41;
    }
    if (*((_BYTE *)v31 + 23))
      goto LABEL_39;
LABEL_41:
    MEMORY[0x2348B1EC4](&v38);
    v28 = v41;
    if (v41)
    {
      v29 = (unint64_t *)&v41->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  v32 = (void **)&v44;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v32);
}

void sub_2301B481C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::_Context::AddShaderNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  RIO_MTLX::InterfaceElement *v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  _BOOL8 v38;
  const char *v39;
  _QWORD *v40;
  uint64_t EmptyString;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t *v46;
  RIO_MTLX::InterfaceElement *v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t **v51;
  char *v52;
  char *v53;
  __int128 v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  std::string::size_type v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  RIO_MTLX *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  realityio::mtlx::_anonymous_namespace_ *v67;
  uint64_t *v68;
  uint64_t *j;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  RIO_MTLX *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v81;
  unsigned int *v82;
  unsigned int v83;
  std::string *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  realityio::mtlx::_anonymous_namespace_ *Input;
  unsigned int *v89;
  unsigned int v90;
  unint64_t *v91;
  unint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  RIO_MTLX *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v107;
  unsigned int *v108;
  unsigned int v109;
  std::string *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  unint64_t *v116;
  unint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  unint64_t *v120;
  unint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  RIO_MTLX *v130;
  uint64_t *v131;
  std::string::size_type *v132;
  uint64_t v133;
  std::string::size_type *v134;
  std::string::size_type v135;
  std::string::size_type v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  realityio::mtlx::_anonymous_namespace_ *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  RIO_MTLX::Element *v149;
  realityio::mtlx::_anonymous_namespace_ *v150;
  uint64_t v151;
  realityio::mtlx::_anonymous_namespace_ *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  RIO_MTLX::Element *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  RIO_MTLX::Element *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  unsigned int *v191;
  unsigned int v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  const void **v208;
  uint64_t *v209;
  unint64_t *v210;
  unint64_t v211;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int *v215;
  unsigned int v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  realityio::mtlx::_anonymous_namespace_ *v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v228;
  unint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int *v234;
  unsigned int v235;
  unint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int *v239;
  unsigned int v240;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v241;
  unint64_t v242;
  unsigned int *v243;
  unsigned int v244;
  unsigned int *v245;
  unsigned int v246;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v247;
  unint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  unsigned int *v251;
  unsigned int v252;
  const pxrInternal__aapl__pxrReserved__::TfToken *v253;
  const pxrInternal__aapl__pxrReserved__::TfToken *v254;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int *v258;
  unsigned int v259;
  uint64_t k;
  uint64_t v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  unsigned int *v266;
  unsigned int v267;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v268;
  uint64_t v269;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v270;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v271;
  _QWORD *v272;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v273;
  unsigned int *v274;
  unsigned int v275;
  unsigned int *v276;
  unsigned int v277;
  unsigned int *v278;
  unsigned int v279;
  unsigned int *v280;
  unsigned int v281;
  unsigned int *v282;
  unsigned int v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  unsigned int *v288;
  unsigned int v289;
  unsigned int *v290;
  unsigned int v291;
  unsigned int *v292;
  unsigned int v293;
  unsigned int *v294;
  unsigned int v295;
  unint64_t *v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  RIO_MTLX *v304;
  uint64_t *v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t *v308;
  realityio::mtlx::_anonymous_namespace_ *v309;
  uint64_t i;
  uint64_t v311;
  std::__shared_weak_count *v312;
  RIO_MTLX::Element *v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t v316;
  RIO_MTLX *v317;
  uint64_t *v318;
  uint64_t v319;
  realityio::mtlx::_anonymous_namespace_ *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t **v324;
  unsigned __int8 *v325;
  realityio::mtlx::_anonymous_namespace_ *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  unsigned __int8 *v331;
  uint64_t v332;
  const char *v333;
  _QWORD *v334;
  uint64_t v335;
  std::string *v336;
  int data;
  int v338;
  RIO_MTLX *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  unsigned __int8 *v345;
  uint64_t *v346;
  std::string *v347;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v348;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v349;
  const pxrInternal__aapl__pxrReserved__::TfToken *v350;
  std::string::size_type v351;
  int v352;
  RIO_MTLX *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  unsigned __int8 *v359;
  uint64_t *v360;
  std::string *v361;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v362;
  int v363;
  int v364;
  RIO_MTLX *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  unsigned __int8 *v371;
  uint64_t *v372;
  std::string *v373;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v374;
  int v375;
  int v376;
  unsigned __int8 *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  unsigned __int8 *v383;
  uint64_t *v384;
  std::string::size_type v385;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v386;
  unsigned int *v387;
  unsigned int v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  unsigned int *v392;
  unsigned int v393;
  uint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t *v399;
  uint64_t v401;
  uint64_t *v402;
  uint64_t *v403;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  char v410[8];
  RIO_MTLX::Element *v411;
  std::__shared_weak_count *v412;
  int v413;
  realityio::mtlx::_anonymous_namespace_ *v414;
  uint64_t v415;
  uint64_t v416;
  std::string::size_type v417;
  std::__shared_weak_count *v418;
  __int128 v419;
  __int128 v420;
  std::string v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  char v426[8];
  uint64_t v427;
  uint64_t v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  const std::string *v432;
  __int128 v433;
  int v434;
  _BYTE v435[12];
  __int128 v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  _QWORD *v440;
  _QWORD v441[3];

  v441[1] = *MEMORY[0x24BDAC8D0];
  v405 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)(a2 + 272);
  v4 = *(_QWORD *)(a2 + 280);
  if (!v4
    || (*(_BYTE *)(v4 + 57) & 8) != 0
    || (v5 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *))(*(_QWORD *)v405 + 32))(v405),
        (v5 & 1) == 0))
  {
    *(_QWORD *)&v436 = "CoreRealityIO/mtlxToUsdShade.cpp";
    *((_QWORD *)&v436 + 1) = "AddShaderNode";
    v437 = 1386;
    v438 = (unint64_t)"UsdShadeShader realityio::mtlx::(anonymous namespace)::_Context::AddShaderNode(const mx::ConstNodePtr &)";
    LOBYTE(v439) = 0;
    v5 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
    if ((v5 & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v436);
      *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase() = MEMORY[0x24BEE9D38] + 16;
      pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v436);
      return;
    }
  }
  v6 = (RIO_MTLX::InterfaceElement *)*a3;
  v7 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v5);
  RIO_MTLX::Node::getNodeDef((std::string *)v6, (uint64_t)v7, 0, (RIO_MTLX::InterfaceElement **)&v436);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
  v8 = v436;
  v429 = v436;
  if (!(_QWORD)v436)
  {
    v10 = a3[1];
    v421.__r_.__value_.__r.__words[0] = *a3;
    v421.__r_.__value_.__l.__size_ = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    realityio::mtlx::UsdMtlxGetVersion((RIO_MTLX::InterfaceElement **)&v421, 0);
    RIO_MTLX::InterfaceElement::getTarget((RIO_MTLX::InterfaceElement *)*a3);
    v433 = 0uLL;
    v420 = 0uLL;
    v13 = v436;
    v436 = 0uLL;
    v429 = v13;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
    if (*((_QWORD *)&v436 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
    if (*((_QWORD *)&v433 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v433 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (*((_QWORD *)&v420 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v420 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v420 + 1) + 16))(*((_QWORD *)&v420 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v420 + 1));
      }
    }
    size = (std::__shared_weak_count *)v421.__r_.__value_.__l.__size_;
    if (v421.__r_.__value_.__l.__size_)
    {
      v25 = (unint64_t *)(v421.__r_.__value_.__l.__size_ + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v8 = v429;
    if (!(_QWORD)v429)
    {
      v428 = 0;
      goto LABEL_77;
    }
  }
  MEMORY[0x2348B2764](&v428, v8 + 48);
  if (!v428)
  {
LABEL_77:
    LODWORD(v436) = 1;
    *((_QWORD *)&v436 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v438 = 0;
    *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase() = MEMORY[0x24BEE9D38] + 16;
    if ((v438 & 7) != 0)
    {
      v55 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
      do
        v56 = __ldxr(v55);
      while (__stlxr(v56 - 2, v55));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
    if (*((_QWORD *)&v436 + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
    goto LABEL_495;
  }
  v27 = v429;
  v436 = v429;
  if (*((_QWORD *)&v429 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v429 + 1) + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  if (!(_QWORD)v27)
  {
    v427 = 0;
    if (!*((_QWORD *)&v27 + 1))
      goto LABEL_46;
LABEL_42:
    v30 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v27 + 1) + 16))(*((_QWORD *)&v27 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v27 + 1));
    }
    goto LABEL_46;
  }
  if (*((_QWORD *)&v27 + 1))
    goto LABEL_42;
LABEL_46:
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 48), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v427);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get();
  v399 = a3;
  if (!*((_QWORD *)&v433 + 1)
    || (*(_BYTE *)(*((_QWORD *)&v433 + 1) + 57) & 8) != 0
    || ((*(uint64_t (**)(__int128 *))(v433 + 32))(&v433) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
    v32 = *((_QWORD *)&v436 + 1);
    if (*((_QWORD *)&v436 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 48);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v35 = a3;
    v36 = *((_QWORD *)&v433 + 1);
    *((_QWORD *)&v433 + 1) = v32;
    if (v36)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v434, &v437);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v435, (_DWORD *)&v437 + 1);
    if (!*((_QWORD *)&v433 + 1) || (*(_BYTE *)(*((_QWORD *)&v433 + 1) + 57) & 8) != 0)
    {
      MEMORY[0x2348B1EC4](&v436);
    }
    else
    {
      v37 = (*(uint64_t (**)(__int128 *))(v433 + 32))(&v433);
      MEMORY[0x2348B1EC4](&v436);
      if (v37)
      {
        v38 = pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>();
        if (v38)
        {
          v40 = (_QWORD *)(v429 + 48);
          if (*(char *)(v429 + 71) < 0)
            v40 = (_QWORD *)*v40;
          if ((v427 & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (v427 & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v38);
          if (*(char *)(EmptyString + 23) < 0)
            EmptyString = *(_QWORD *)EmptyString;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Created shader mtlx %s, as usd %s\n", v39, v40, EmptyString);
        }
        v287 = v428;
        if ((v428 & 7) != 0)
        {
          v288 = (unsigned int *)(v428 & 0xFFFFFFFFFFFFFFF8);
          do
            v289 = __ldxr(v288);
          while (__stxr(v289 + 2, v288));
          if ((v289 & 1) == 0)
            v287 &= 0xFFFFFFFFFFFFFFF8;
        }
        *(_QWORD *)&v436 = v287;
        *((_QWORD *)&v436 + 1) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                               + 1;
        if ((v287 & 7) != 0)
        {
          v290 = (unsigned int *)(v287 & 0xFFFFFFFFFFFFFFF8);
          do
            v291 = __ldxr(v290);
          while (__stxr(v291 + 2, v290));
          if ((v291 & 1) == 0)
            *(_QWORD *)&v436 = v436 & 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v433, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v436);
        if ((v425 & 7) != 0)
        {
          v292 = (unsigned int *)(v425 & 0xFFFFFFFFFFFFFFF8);
          do
            v293 = __ldxr(v292);
          while (__stlxr(v293 - 2, v292));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v424);
        if (v423)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v423);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v436);
        if ((v287 & 7) != 0)
        {
          v294 = (unsigned int *)(v287 & 0xFFFFFFFFFFFFFFF8);
          do
            v295 = __ldxr(v294);
          while (__stlxr(v295 - 2, v294));
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v433);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v421, (uint64_t *)&v433 + 1, &v434);
        v296 = (unint64_t *)MEMORY[0x24BEE8128];
        v297 = (std::__shared_weak_count *)v35[1];
        *(_QWORD *)&v420 = *v35;
        *((_QWORD *)&v420 + 1) = v297;
        if (v297)
        {
          v298 = (unint64_t *)&v297->__shared_owners_;
          do
            v299 = __ldxr(v298);
          while (__stxr(v299 + 1, v298));
        }
        if (v297)
        {
          v300 = (unint64_t *)&v297->__shared_owners_;
          do
            v301 = __ldaxr(v300);
          while (__stlxr(v301 - 1, v300));
          if (!v301)
          {
            ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
            std::__shared_weak_count::__release_weak(v297);
          }
        }
        if ((v422 & 7) != 0)
        {
          v302 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
          do
            v303 = __ldxr(v302);
          while (__stlxr(v303 - 2, v302));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421.__r_.__value_.__r.__words[2]);
        if (v421.__r_.__value_.__l.__size_)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v421.__r_.__value_.__l.__size_);
        v403 = (uint64_t *)*((_QWORD *)&v420 + 1);
        v305 = (uint64_t *)v420;
        if ((_QWORD)v420 != *((_QWORD *)&v420 + 1))
        {
          do
          {
            v306 = v305;
            v307 = *v305;
            v308 = RIO_MTLX::EMPTY_STRING(v304);
            RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v307, (unsigned __int8 *)v308, (uint64_t)&v419);
            v311 = *((_QWORD *)&v419 + 1);
            for (i = v419; i != v311; i += 16)
            {
              v313 = *(RIO_MTLX::Element **)i;
              v312 = *(std::__shared_weak_count **)(i + 8);
              v417 = *(_QWORD *)i;
              v418 = v312;
              if (v312)
              {
                v314 = (unint64_t *)&v312->__shared_owners_;
                do
                  v315 = __ldxr(v314);
                while (__stxr(v315 + 1, v314));
                v412 = v312;
                do
                  v316 = __ldxr(v314);
                while (__stxr(v316 + 1, v314));
              }
              else
              {
                v412 = 0;
              }
              v411 = v313;
              v317 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v313 + 20, (unsigned __int8 *)&qword_255E55238);
              if (v317)
              {
                v318 = (uint64_t *)((char *)v317 + 40);
              }
              else
              {
                v317 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
                v318 = (uint64_t *)v317;
              }
              v319 = *((unsigned __int8 *)v318 + 23);
              if ((v319 & 0x80u) != 0)
                v319 = v318[1];
              if (!v319)
                v318 = RIO_MTLX::EMPTY_STRING(v317);
              memset(&v421, 0, sizeof(v421));
              RIO_MTLX::Element::getDocument(v313, &v430);
              RIO_MTLX::Element::getChildOfType<RIO_MTLX::TypeDef>(v430, (unsigned __int8 *)v318, &v431);
              v321 = (std::__shared_weak_count *)*((_QWORD *)&v430 + 1);
              if (*((_QWORD *)&v430 + 1))
              {
                v322 = (unint64_t *)(*((_QWORD *)&v430 + 1) + 8);
                do
                  v323 = __ldaxr(v322);
                while (__stlxr(v323 - 1, v322));
                if (!v323)
                {
                  ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                  std::__shared_weak_count::__release_weak(v321);
                }
              }
              if ((_QWORD)v431)
              {
                v325 = (unsigned __int8 *)v430;
                if (*(char *)(v430 + 23) < 0)
                {
                  if (!*(_QWORD *)(v430 + 8))
                    goto LABEL_582;
                }
                else if (!*(_BYTE *)(v430 + 23))
                {
                  goto LABEL_582;
                }
                v326 = (realityio::mtlx::_anonymous_namespace_ *)RIO_MTLX::SHADER_SEMANTIC((RIO_MTLX *)v324);
                v327 = v325[23];
                if ((v327 & 0x80u) == 0)
                  v328 = v325[23];
                else
                  v328 = *((_QWORD *)v325 + 1);
                v329 = *((unsigned __int8 *)v326 + 23);
                v330 = (char)v329;
                if ((v329 & 0x80u) != 0)
                  v329 = *((_QWORD *)v326 + 1);
                if (v328 == v329)
                {
                  if (v330 >= 0)
                    v331 = (unsigned __int8 *)v326;
                  else
                    v331 = *(unsigned __int8 **)v326;
                  if ((v327 & 0x80) != 0)
                  {
                    v326 = (realityio::mtlx::_anonymous_namespace_ *)memcmp(*(const void **)v325, v331, *((_QWORD *)v325 + 1));
                    if ((_DWORD)v326)
                      goto LABEL_582;
LABEL_581:
                    std::string::operator=(&v421, v432);
                    goto LABEL_582;
                  }
                  if (!v325[23])
                    goto LABEL_581;
                  while (*v325 == *v331)
                  {
                    ++v325;
                    ++v331;
                    if (!--v327)
                      goto LABEL_581;
                  }
                }
              }
LABEL_582:
              v332 = pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>();
              if ((v332 & 1) != 0)
              {
                v334 = (_QWORD *)((char *)v411 + 48);
                if (*((char *)v411 + 71) < 0)
                  v334 = (_QWORD *)*v334;
                v335 = (uint64_t)v318;
                if (*((char *)v318 + 23) < 0)
                  v335 = *v318;
                v332 = pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add shader output %s of type %s\n", v333, v334, v335);
              }
              if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v421.__r_.__value_.__l.__size_ != 7)
                  goto LABEL_597;
                v336 = (std::string *)v421.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) != 7)
                  goto LABEL_597;
                v336 = &v421;
              }
              data = (int)v336->__r_.__value_.__l.__data_;
              v338 = *(_DWORD *)((char *)v336->__r_.__value_.__r.__words + 3);
              if (data == 1718777203 && v338 == 1701011814)
              {
LABEL_616:
                v348 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v296);
                if (!v348)
                  v348 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(v296);
                v349 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
                if (!v349)
                  v349 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
                v350 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v348 + 208);
LABEL_714:
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v436, v350, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v349 + 88));
                goto LABEL_715;
              }
LABEL_597:
              v340 = (RIO_MTLX *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING((RIO_MTLX *)v332);
              v341 = *((unsigned __int8 *)v318 + 23);
              if ((v341 & 0x80u) == 0)
                v342 = *((unsigned __int8 *)v318 + 23);
              else
                v342 = v318[1];
              v343 = *((unsigned __int8 *)v340 + 23);
              v344 = (char)v343;
              if ((v343 & 0x80u) != 0)
                v343 = *((_QWORD *)v340 + 1);
              if (v342 == v343)
              {
                if (v344 >= 0)
                  v345 = (unsigned __int8 *)v340;
                else
                  v345 = *(unsigned __int8 **)v340;
                if ((v341 & 0x80) != 0)
                {
                  v340 = (RIO_MTLX *)memcmp((const void *)*v318, v345, v318[1]);
                  if (!(_DWORD)v340)
                    goto LABEL_616;
                }
                else
                {
                  if (!*((_BYTE *)v318 + 23))
                    goto LABEL_616;
                  v346 = v318;
                  while (*(unsigned __int8 *)v346 == *v345)
                  {
                    v346 = (uint64_t *)((char *)v346 + 1);
                    ++v345;
                    if (!--v341)
                      goto LABEL_616;
                  }
                }
              }
              if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v421.__r_.__value_.__l.__size_ != 12)
                  goto LABEL_627;
                v347 = (std::string *)v421.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) != 12)
                  goto LABEL_627;
                v347 = &v421;
              }
              v351 = v347->__r_.__value_.__r.__words[0];
              v352 = v347->__r_.__value_.__r.__words[1];
              if (v351 == 0x6563616C70736964 && v352 == 1953391981)
              {
LABEL_646:
                v362 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v296);
                if (!v362)
                  v362 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(v296);
                v349 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
                if (!v349)
                  v349 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
                v350 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v362 + 32);
                goto LABEL_714;
              }
LABEL_627:
              v354 = (RIO_MTLX *)RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(v340);
              v355 = *((unsigned __int8 *)v318 + 23);
              if ((v355 & 0x80u) == 0)
                v356 = *((unsigned __int8 *)v318 + 23);
              else
                v356 = v318[1];
              v357 = *((unsigned __int8 *)v354 + 23);
              v358 = (char)v357;
              if ((v357 & 0x80u) != 0)
                v357 = *((_QWORD *)v354 + 1);
              if (v356 == v357)
              {
                if (v358 >= 0)
                  v359 = (unsigned __int8 *)v354;
                else
                  v359 = *(unsigned __int8 **)v354;
                if ((v355 & 0x80) != 0)
                {
                  v354 = (RIO_MTLX *)memcmp((const void *)*v318, v359, v318[1]);
                  if (!(_DWORD)v354)
                    goto LABEL_646;
                }
                else
                {
                  if (!*((_BYTE *)v318 + 23))
                    goto LABEL_646;
                  v360 = v318;
                  while (*(unsigned __int8 *)v360 == *v359)
                  {
                    v360 = (uint64_t *)((char *)v360 + 1);
                    ++v359;
                    if (!--v355)
                      goto LABEL_646;
                  }
                }
              }
              if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v421.__r_.__value_.__l.__size_ != 6)
                  goto LABEL_657;
                v361 = (std::string *)v421.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) != 6)
                  goto LABEL_657;
                v361 = &v421;
              }
              v363 = (int)v361->__r_.__value_.__l.__data_;
              v364 = WORD2(v361->__r_.__value_.__r.__words[0]);
              if (v363 == 1970040694 && v364 == 25965)
              {
LABEL_676:
                v374 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v296);
                if (!v374)
                  v374 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(v296);
                v349 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
                if (!v349)
                  v349 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
                v350 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v374 + 232);
                goto LABEL_714;
              }
LABEL_657:
              v366 = (RIO_MTLX *)RIO_MTLX::VOLUME_SHADER_TYPE_STRING(v354);
              v367 = *((unsigned __int8 *)v318 + 23);
              if ((v367 & 0x80u) == 0)
                v368 = *((unsigned __int8 *)v318 + 23);
              else
                v368 = v318[1];
              v369 = *((unsigned __int8 *)v366 + 23);
              v370 = (char)v369;
              if ((v369 & 0x80u) != 0)
                v369 = *((_QWORD *)v366 + 1);
              if (v368 == v369)
              {
                if (v370 >= 0)
                  v371 = (unsigned __int8 *)v366;
                else
                  v371 = *(unsigned __int8 **)v366;
                if ((v367 & 0x80) != 0)
                {
                  v366 = (RIO_MTLX *)memcmp((const void *)*v318, v371, v318[1]);
                  if (!(_DWORD)v366)
                    goto LABEL_676;
                }
                else
                {
                  if (!*((_BYTE *)v318 + 23))
                    goto LABEL_676;
                  v372 = v318;
                  while (*(unsigned __int8 *)v372 == *v371)
                  {
                    v372 = (uint64_t *)((char *)v372 + 1);
                    ++v371;
                    if (!--v367)
                      goto LABEL_676;
                  }
                }
              }
              if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v421.__r_.__value_.__l.__size_ != 5)
                  goto LABEL_687;
                v373 = (std::string *)v421.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) != 5)
                  goto LABEL_687;
                v373 = &v421;
              }
              v375 = (int)v373->__r_.__value_.__l.__data_;
              v376 = v373->__r_.__value_.__s.__data_[4];
              if (v375 == 1751607660 && v376 == 116)
              {
LABEL_712:
                v349 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
                if (!v349)
                  v349 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
                goto LABEL_714;
              }
LABEL_687:
              v378 = (unsigned __int8 *)RIO_MTLX::LIGHT_SHADER_TYPE_STRING(v366);
              v379 = *((unsigned __int8 *)v318 + 23);
              if ((v379 & 0x80u) == 0)
                v380 = *((unsigned __int8 *)v318 + 23);
              else
                v380 = v318[1];
              v381 = v378[23];
              v382 = (char)v381;
              if ((v381 & 0x80u) != 0)
                v381 = *((_QWORD *)v378 + 1);
              if (v380 == v381)
              {
                if (v382 >= 0)
                  v383 = v378;
                else
                  v383 = *(unsigned __int8 **)v378;
                if ((v379 & 0x80) != 0)
                {
                  if (!memcmp((const void *)*v318, v383, v318[1]))
                    goto LABEL_712;
                }
                else
                {
                  if (!*((_BYTE *)v318 + 23))
                    goto LABEL_712;
                  v384 = v318;
                  while (*(unsigned __int8 *)v384 == *v383)
                  {
                    v384 = (uint64_t *)((char *)v384 + 1);
                    ++v383;
                    if (!--v379)
                      goto LABEL_712;
                  }
                }
              }
              v385 = HIBYTE(v421.__r_.__value_.__r.__words[2]);
              if ((v421.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v385 = v421.__r_.__value_.__l.__size_;
              if (v385)
              {
                MEMORY[0x2348B2764](&v430, v318);
                v386 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
                if (!v386)
                  v386 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v436, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v430, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v386 + 88));
                if ((v430 & 7) != 0)
                {
                  v387 = (unsigned int *)(v430 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v388 = __ldxr(v387);
                  while (__stlxr(v388 - 2, v387));
                }
              }
              else
              {
                v413 = 3;
                v414 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
                v416 = 0;
              }
LABEL_715:
              v389 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
              if (*((_QWORD *)&v431 + 1))
              {
                v390 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
                do
                  v391 = __ldaxr(v390);
                while (__stlxr(v391 - 1, v390));
                if (!v391)
                {
                  ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
                  std::__shared_weak_count::__release_weak(v389);
                }
              }
              if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v421.__r_.__value_.__l.__data_);
              if ((v416 & 7) != 0)
              {
                v392 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
                do
                  v393 = __ldxr(v392);
                while (__stlxr(v393 - 2, v392));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v415);
              v309 = v414;
              if (v414)
                v309 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v414);
              if (v412)
              {
                v394 = &v412->__shared_owners_;
                do
                  v395 = __ldaxr((unint64_t *)v394);
                while (__stlxr(v395 - 1, (unint64_t *)v394));
                if (!v395)
                {
                  ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
                  std::__shared_weak_count::__release_weak(v412);
                }
              }
              v396 = v418;
              if (v418)
              {
                v397 = (unint64_t *)&v418->__shared_owners_;
                do
                  v398 = __ldaxr(v397);
                while (__stlxr(v398 - 1, v397));
                if (!v398)
                {
                  ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                  std::__shared_weak_count::__release_weak(v396);
                }
              }
            }
            v421.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419;
            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v421);
            v305 = v306 + 2;
          }
          while (v306 + 2 != v403);
        }
        v421.__r_.__value_.__r.__words[0] = (std::string::size_type)&v420;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v421);
        MEMORY[0x2348B2350](&v436);
        a3 = v399;
      }
    }
  }
  MEMORY[0x2348B1EC4](&v433);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(v405, &v436);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v436, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v427);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v436);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v421, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v421);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v433, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
  if ((v438 & 7) != 0)
  {
    v42 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
  if (*((_QWORD *)&v436 + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
  if ((v422 & 7) != 0)
  {
    v44 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421.__r_.__value_.__r.__words[2]);
  if (v421.__r_.__value_.__l.__size_)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v421.__r_.__value_.__l.__size_);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v422 = 0;
  v421.__r_.__value_.__r.__words[0] = MEMORY[0x24BEE9DC0] + 16;
  *(_QWORD *)&v436 = *(_QWORD *)(a2 + 256) + 48;
  v46 = std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 224), (const void **)v436, (__int128 **)&v436);
  v47 = (RIO_MTLX::InterfaceElement *)*a3;
  v48 = *a3 + 48;
  v49 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)(v46 + 7), &v420, (const void **)v48);
  v50 = *v49;
  if (!*v49)
  {
    v51 = v49;
    v52 = (char *)operator new(0x58uLL);
    v53 = v52;
    *(_QWORD *)&v433 = v52;
    *((_QWORD *)&v433 + 1) = v46 + 8;
    LOBYTE(v434) = 0;
    if (*((char *)v47 + 71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v52 + 32), *((const std::string::value_type **)v47 + 6), *((_QWORD *)v47 + 7));
    }
    else
    {
      v54 = *(_OWORD *)v48;
      *((_QWORD *)v52 + 6) = *(_QWORD *)(v48 + 16);
      *((_OWORD *)v52 + 2) = v54;
    }
    LODWORD(v436) = 1;
    *((_QWORD *)&v436 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v438 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *((_QWORD *)v53 + 10) = 0;
    *((_QWORD *)v53 + 7) = MEMORY[0x24BEE9DC0] + 16;
    if ((v438 & 7) != 0)
    {
      v57 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
    if (*((_QWORD *)&v436 + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
    LOBYTE(v434) = 1;
    v50 = (uint64_t *)v433;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)v46 + 7, v420, v51, (uint64_t *)v433);
    *(_QWORD *)&v433 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,void *>>>>::reset[abi:ne180100]((uint64_t)&v433);
  }
  v59 = v421.__r_.__value_.__l.__size_;
  if (v421.__r_.__value_.__l.__size_)
  {
    v60 = (unint64_t *)(v421.__r_.__value_.__l.__size_ + 48);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  v62 = v50[8];
  v50[8] = v59;
  if (v62)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v50 + 9), &v421.__r_.__value_.__r.__words[2]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v50 + 76, (_DWORD *)&v421.__r_.__value_.__r.__words[2] + 1);
  pxrInternal__aapl__pxrReserved__::TfToken::operator=(v50 + 10, &v422);
  MEMORY[0x2348B2350](&v421);
  v402 = (uint64_t *)*((_QWORD *)&v420 + 1);
  v64 = (uint64_t *)v420;
  if ((_QWORD)v420 != *((_QWORD *)&v420 + 1))
  {
LABEL_95:
    v65 = *v64;
    v66 = RIO_MTLX::EMPTY_STRING(v63);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>(v65, (unsigned __int8 *)v66, (uint64_t)&v419);
    v68 = (uint64_t *)*((_QWORD *)&v419 + 1);
    for (j = (uint64_t *)v419; ; j += 2)
    {
      if (j == v68)
      {
        *(_QWORD *)&v436 = &v419;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
        v64 += 2;
        if (v64 == v402)
          break;
        goto LABEL_95;
      }
      v71 = *j;
      v70 = (std::__shared_weak_count *)j[1];
      *(_QWORD *)&v431 = *j;
      *((_QWORD *)&v431 + 1) = v70;
      if (v70)
      {
        v72 = (unint64_t *)&v70->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
        *((_QWORD *)&v433 + 1) = v70;
        do
          v74 = __ldxr(v72);
        while (__stxr(v74 + 1, v72));
      }
      else
      {
        *((_QWORD *)&v433 + 1) = 0;
      }
      *(_QWORD *)&v433 = v71;
      v75 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v71 + 160), (unsigned __int8 *)&qword_255E55238);
      if (v75)
      {
        v76 = (uint64_t *)((char *)v75 + 40);
      }
      else
      {
        v75 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
        v76 = (uint64_t *)v75;
      }
      v77 = *((unsigned __int8 *)v76 + 23);
      if ((v77 & 0x80u) == 0)
        v78 = *((unsigned __int8 *)v76 + 23);
      else
        v78 = v76[1];
      if (v78)
      {
        if ((v77 & 0x80) == 0)
          goto LABEL_112;
      }
      else
      {
        v76 = RIO_MTLX::EMPTY_STRING(v75);
        v77 = *((unsigned __int8 *)v76 + 23);
        if ((v77 & 0x80) == 0)
        {
LABEL_112:
          if (!v77)
            goto LABEL_130;
          goto LABEL_113;
        }
      }
      if (!v76[1])
      {
LABEL_130:
        LODWORD(v436) = 3;
        *((_QWORD *)&v436 + 1) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        Input = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v438 = 0;
        if (!v70)
          goto LABEL_151;
LABEL_147:
        v95 = (unint64_t *)&v70->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
        goto LABEL_151;
      }
LABEL_113:
      *(_QWORD *)&v430 = 0;
      realityio::mtlx::UsdMtlxGetUsdType((unsigned __int8 *)v76, (uint64_t)&v421);
      v417 = v421.__r_.__value_.__r.__words[0];
      if ((v421.__r_.__value_.__s.__data_[8] & 7) != 0)
      {
        v79 = (unsigned int *)(v421.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8);
        do
          v80 = __ldxr(v79);
        while (__stlxr(v80 - 2, v79));
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v417))
      {
        v81 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
        if (!v81)
          v81 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
        v417 = *((_QWORD *)v81 + 11);
        MEMORY[0x2348B2764](&v421, v76);
        if ((v430 & 7) != 0)
        {
          v82 = (unsigned int *)(v430 & 0xFFFFFFFFFFFFFFF8);
          do
            v83 = __ldxr(v82);
          while (__stlxr(v83 - 2, v82));
        }
        *(_QWORD *)&v430 = v421.__r_.__value_.__r.__words[0];
      }
      v85 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
      v84 = (std::string *)v433;
      *(_OWORD *)&v421.__r_.__value_.__l.__data_ = v433;
      if (*((_QWORD *)&v433 + 1))
      {
        v86 = (unint64_t *)(*((_QWORD *)&v433 + 1) + 8);
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      if (v84)
      else
        v411 = 0;
      Input = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
      if ((v411 & 7) != 0)
      {
        v89 = (unsigned int *)((unint64_t)v411 & 0xFFFFFFFFFFFFFFF8);
        do
          v90 = __ldxr(v89);
        while (__stlxr(v90 - 2, v89));
        v85 = (std::__shared_weak_count *)v421.__r_.__value_.__l.__size_;
      }
      if (v85)
      {
        v91 = (unint64_t *)&v85->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if ((_QWORD)v430)
      {
        Input = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v436, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v430);
        if ((v430 & 7) != 0)
        {
          v93 = (unsigned int *)(v430 & 0xFFFFFFFFFFFFFFF8);
          do
            v94 = __ldxr(v93);
          while (__stlxr(v94 - 2, v93));
        }
      }
      v70 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
      if (*((_QWORD *)&v433 + 1))
        goto LABEL_147;
LABEL_151:
      v97 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
      v98 = v431;
      v430 = v431;
      if (*((_QWORD *)&v431 + 1))
      {
        v99 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }
      v101 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v98 + 160), (unsigned __int8 *)&qword_255E55238);
      if (v101)
      {
        v102 = (uint64_t *)((char *)v101 + 40);
      }
      else
      {
        v101 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
        v102 = (uint64_t *)v101;
      }
      v103 = *((unsigned __int8 *)v102 + 23);
      if ((v103 & 0x80u) == 0)
        v104 = *((unsigned __int8 *)v102 + 23);
      else
        v104 = v102[1];
      if (v104)
      {
        if ((v103 & 0x80) == 0)
          goto LABEL_162;
      }
      else
      {
        v102 = RIO_MTLX::EMPTY_STRING(v101);
        v103 = *((unsigned __int8 *)v102 + 23);
        if ((v103 & 0x80) == 0)
        {
LABEL_162:
          if (!v103)
            goto LABEL_180;
          goto LABEL_163;
        }
      }
      if (!v102[1])
      {
LABEL_180:
        LODWORD(v421.__r_.__value_.__l.__data_) = 3;
        v421.__r_.__value_.__l.__size_ = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v422 = 0;
        if (!v97)
          goto LABEL_201;
LABEL_197:
        v120 = (unint64_t *)&v97->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
        goto LABEL_201;
      }
LABEL_163:
      v417 = 0;
      realityio::mtlx::UsdMtlxGetUsdType((unsigned __int8 *)v102, (uint64_t)&v433);
      v411 = (RIO_MTLX::Element *)v433;
      if ((BYTE8(v433) & 7) != 0)
      {
        v105 = (unsigned int *)(*((_QWORD *)&v433 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v106 = __ldxr(v105);
        while (__stlxr(v106 - 2, v105));
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v411))
      {
        v107 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
        if (!v107)
          v107 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
        v411 = (RIO_MTLX::Element *)*((_QWORD *)v107 + 11);
        MEMORY[0x2348B2764](&v433, v102);
        if ((v417 & 7) != 0)
        {
          v108 = (unsigned int *)(v417 & 0xFFFFFFFFFFFFFFF8);
          do
            v109 = __ldxr(v108);
          while (__stlxr(v109 - 2, v108));
        }
        v417 = v433;
      }
      v111 = (std::__shared_weak_count *)*((_QWORD *)&v430 + 1);
      v110 = (std::string *)v430;
      v433 = v430;
      if (*((_QWORD *)&v430 + 1))
      {
        v112 = (unint64_t *)(*((_QWORD *)&v430 + 1) + 8);
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      if (v110)
      else
        v432 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateInput(v405, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v432, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v411);
      if ((v432 & 7) != 0)
      {
        v114 = (unsigned int *)((unint64_t)v432 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
        v111 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
      }
      if (v111)
      {
        v116 = (unint64_t *)&v111->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      if (v417)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v421, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v417);
        if ((v417 & 7) != 0)
        {
          v118 = (unsigned int *)(v417 & 0xFFFFFFFFFFFFFFF8);
          do
            v119 = __ldxr(v118);
          while (__stlxr(v119 - 2, v118));
        }
      }
      v97 = (std::__shared_weak_count *)*((_QWORD *)&v430 + 1);
      if (*((_QWORD *)&v430 + 1))
        goto LABEL_197;
LABEL_201:
      MEMORY[0x2348B37A8](&v436, &v421);
      if ((v422 & 7) != 0)
      {
        v122 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
        do
          v123 = __ldxr(v122);
        while (__stlxr(v123 - 2, v122));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421.__r_.__value_.__r.__words[2]);
      if (v421.__r_.__value_.__l.__size_)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v421.__r_.__value_.__l.__size_);
      if ((v438 & 7) != 0)
      {
        v124 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
        do
          v125 = __ldxr(v124);
        while (__stlxr(v125 - 2, v124));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
      v67 = (realityio::mtlx::_anonymous_namespace_ *)*((_QWORD *)&v436 + 1);
      if (*((_QWORD *)&v436 + 1))
        v67 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
      v126 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
      if (*((_QWORD *)&v431 + 1))
      {
        v127 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
    }
  }
  *(_QWORD *)&v436 = &v420;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
  v129 = *v399;
  v131 = RIO_MTLX::EMPTY_STRING(v130);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>(v129, (unsigned __int8 *)v131, (uint64_t)&v433);
  v132 = (std::string::size_type *)v433;
  v133 = MEMORY[0x24BEE9DC0];
  if ((_QWORD)v433 != *((_QWORD *)&v433 + 1))
  {
    v134 = (std::string::size_type *)*((_QWORD *)&v433 + 1);
    v401 = MEMORY[0x24BEE9DC0] + 16;
    while (1)
    {
      v135 = *v132;
      v136 = v132[1];
      *(_QWORD *)&v420 = *v132;
      *((_QWORD *)&v420 + 1) = v136;
      if (v136)
      {
        v137 = (unint64_t *)(v136 + 8);
        do
          v138 = __ldxr(v137);
        while (__stxr(v138 + 1, v137));
        v421.__r_.__value_.__l.__size_ = v136;
        do
          v139 = __ldxr(v137);
        while (__stxr(v139 + 1, v137));
      }
      else
      {
        v421.__r_.__value_.__l.__size_ = 0;
      }
      v421.__r_.__value_.__r.__words[0] = v135;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v438 = 0;
      *(_QWORD *)&v436 = v401;
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v406)
        && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
      {
        v140 = v409;
      }
      else
      {
        if ((v409 & 7) != 0)
        {
          v141 = (unsigned int *)(v409 & 0xFFFFFFFFFFFFFFF8);
          do
            v142 = __ldxr(v141);
          while (__stlxr(v142 - 2, v141));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v408);
        if (v407)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v407);
        v406 = 3;
        v407 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v140 = 0;
        v409 = 0;
      }
      if ((v140 & 7) != 0)
      {
        v143 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
        do
          v144 = __ldxr(v143);
        while (__stlxr(v144 - 2, v143));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v408);
      if (v407)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v407);
      v145 = (realityio::mtlx::_anonymous_namespace_ *)MEMORY[0x2348B2350](&v436);
      v146 = (std::__shared_weak_count *)v421.__r_.__value_.__l.__size_;
      if (v421.__r_.__value_.__l.__size_)
      {
        v147 = (unint64_t *)(v421.__r_.__value_.__l.__size_ + 8);
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      v149 = (RIO_MTLX::Element *)v420;
      if (*(char *)(v430 + 23) < 0)
      {
        if (!*(_QWORD *)(v430 + 8))
          goto LABEL_296;
      }
      else if (!*(_BYTE *)(v430 + 23))
      {
        goto LABEL_296;
      }
      RIO_MTLX::Element::getDocument(v149, &v436);
      v151 = v436;
      RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeGraph>(v151, (unsigned __int8 *)v421.__r_.__value_.__l.__data_, &v419);
      v153 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
      if (*((_QWORD *)&v436 + 1))
      {
        v154 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      v156 = (RIO_MTLX::Element *)v419;
      if (!(_QWORD)v419)
        break;
      v157 = (std::__shared_weak_count *)*((_QWORD *)&v419 + 1);
      v431 = v419;
      if (*((_QWORD *)&v419 + 1))
      {
        v158 = (unint64_t *)(*((_QWORD *)&v419 + 1) + 8);
        do
          v159 = __ldxr(v158);
        while (__stxr(v159 + 1, v158));
      }
      RIO_MTLX::Element::getDocument(v156, &v421);
      v160 = (std::__shared_weak_count *)v421.__r_.__value_.__l.__size_;
      if (!v421.__r_.__value_.__l.__size_)
        goto LABEL_263;
      v161 = (unint64_t *)(v421.__r_.__value_.__l.__size_ + 8);
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
        if (v157)
        {
LABEL_264:
          v163 = (unint64_t *)&v157->__shared_owners_;
          do
            v164 = __ldaxr(v163);
          while (__stlxr(v164 - 1, v163));
LABEL_275:
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }
      }
      else
      {
LABEL_263:
        if (v157)
          goto LABEL_264;
      }
LABEL_277:
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v436))
      {
        v169 = (std::__shared_weak_count *)*((_QWORD *)&v420 + 1);
        v431 = v420;
        if (*((_QWORD *)&v420 + 1))
        {
          v170 = (unint64_t *)(*((_QWORD *)&v420 + 1) + 8);
          do
            v171 = __ldxr(v170);
          while (__stxr(v171 + 1, v170));
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(v405, &v417);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v422 = 0;
        v421.__r_.__value_.__r.__words[0] = v133 + 16;
        MEMORY[0x2348B2350](&v421);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v417);
        if (v169)
        {
          v172 = (unint64_t *)&v169->__shared_owners_;
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
          }
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v441);
      std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(v440);
      if ((v438 & 7) != 0)
      {
        v174 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
        do
          v175 = __ldxr(v174);
        while (__stlxr(v175 - 2, v174));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
      v150 = (realityio::mtlx::_anonymous_namespace_ *)*((_QWORD *)&v436 + 1);
      if (*((_QWORD *)&v436 + 1))
        v150 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
      v176 = (std::__shared_weak_count *)*((_QWORD *)&v419 + 1);
      if (*((_QWORD *)&v419 + 1))
      {
        v177 = (unint64_t *)(*((_QWORD *)&v419 + 1) + 8);
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
      }
LABEL_296:
      v179 = (RIO_MTLX::Element *)v420;
      if (*(char *)(v431 + 23) < 0)
      {
        if (*(_QWORD *)(v431 + 8))
        {
LABEL_300:
          RIO_MTLX::Element::getDocument(v179, &v419);
          v180 = (std::__shared_weak_count *)*((_QWORD *)&v419 + 1);
          *(_OWORD *)&v421.__r_.__value_.__l.__data_ = v419;
          v419 = 0uLL;
          if (v180)
          {
            v181 = (unint64_t *)&v180->__shared_owners_;
            do
              v182 = __ldaxr(v181);
            while (__stlxr(v182 - 1, v181));
            if (!v182)
            {
              ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
              std::__shared_weak_count::__release_weak(v180);
            }
          }
          v183 = (std::__shared_weak_count *)*((_QWORD *)&v419 + 1);
          if (*((_QWORD *)&v419 + 1))
          {
            v184 = (unint64_t *)(*((_QWORD *)&v419 + 1) + 8);
            do
              v185 = __ldaxr(v184);
            while (__stlxr(v185 - 1, v184));
            if (!v185)
            {
              ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
              std::__shared_weak_count::__release_weak(v183);
            }
          }
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v436))
          {
            v186 = (std::__shared_weak_count *)*((_QWORD *)&v420 + 1);
            v419 = v420;
            if (*((_QWORD *)&v420 + 1))
            {
              v187 = (unint64_t *)(*((_QWORD *)&v420 + 1) + 8);
              do
                v188 = __ldxr(v187);
              while (__stxr(v188 + 1, v187));
            }
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(v405, &v430);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v422 = 0;
            v421.__r_.__value_.__r.__words[0] = v133 + 16;
            MEMORY[0x2348B2350](&v421);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v430);
            if (v186)
            {
              v189 = (unint64_t *)&v186->__shared_owners_;
              do
                v190 = __ldaxr(v189);
              while (__stlxr(v190 - 1, v189));
              if (!v190)
              {
                ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                std::__shared_weak_count::__release_weak(v186);
              }
            }
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v441);
          std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(v440);
          if ((v438 & 7) != 0)
          {
            v191 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
            do
              v192 = __ldxr(v191);
            while (__stlxr(v192 - 2, v191));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
          if (*((_QWORD *)&v436 + 1))
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
        }
      }
      else if (*(_BYTE *)(v431 + 23))
      {
        goto LABEL_300;
      }
      v193 = (std::__shared_weak_count *)*((_QWORD *)&v420 + 1);
      if (*((_QWORD *)&v420 + 1))
      {
        v194 = (unint64_t *)(*((_QWORD *)&v420 + 1) + 8);
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
      }
      v132 += 2;
      if (v132 == v134)
        goto LABEL_333;
    }
    RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)v420, &v431);
    v165 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
    *(_OWORD *)&v421.__r_.__value_.__l.__data_ = v431;
    v431 = 0uLL;
    if (v165)
    {
      v166 = (unint64_t *)&v165->__shared_owners_;
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    v157 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
    if (!*((_QWORD *)&v431 + 1))
      goto LABEL_277;
    v168 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
    do
      v164 = __ldaxr(v168);
    while (__stlxr(v164 - 1, v168));
    goto LABEL_275;
  }
LABEL_333:
  *(_QWORD *)&v436 = &v433;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v196 = MEMORY[0x24BEE9DB0];
  v422 = 0;
  v421.__r_.__value_.__r.__words[0] = MEMORY[0x24BEE9DB0] + 16;
  if (v421.__r_.__value_.__l.__size_)
  {
    if ((*(_BYTE *)(v421.__r_.__value_.__l.__size_ + 57) & 8) == 0)
    {
      v197 = (*(uint64_t (**)(std::string *))(MEMORY[0x24BEE9DB0] + 48))(&v421);
      if ((_DWORD)v197)
      {
        v198 = *(uint64_t **)(*v399 + 136);
        v199 = *(uint64_t **)(*v399 + 144);
        if (v198 != v199)
        {
          v200 = v196 + 16;
          while (1)
          {
            v201 = *v198;
            v202 = (std::__shared_weak_count *)v198[1];
            *(_QWORD *)&v420 = *v198;
            *((_QWORD *)&v420 + 1) = v202;
            if (v202)
            {
              v203 = (unint64_t *)&v202->__shared_owners_;
              do
                v204 = __ldxr(v203);
              while (__stxr(v204 + 1, v203));
            }
            v205 = *(unsigned __int8 *)(v201 + 47);
            if ((v205 & 0x80u) == 0)
              v206 = *(unsigned __int8 *)(v201 + 47);
            else
              v206 = *(_QWORD *)(v201 + 32);
            v207 = byte_255E55237;
            if (byte_255E55237 < 0)
              v207 = qword_255E55228;
            if (v206 != v207)
              goto LABEL_384;
            v208 = (const void **)(v201 + 24);
            v209 = byte_255E55237 >= 0 ? &qword_255E55220 : (uint64_t *)qword_255E55220;
            if ((v205 & 0x80) == 0)
              break;
            v197 = memcmp(*v208, v209, *(_QWORD *)(v201 + 32));
            if (!(_DWORD)v197)
              goto LABEL_356;
LABEL_384:
            if (v202)
            {
              v225 = (unint64_t *)&v202->__shared_owners_;
              do
                v226 = __ldaxr(v225);
              while (__stlxr(v226 - 1, v225));
              if (!v226)
              {
                ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                std::__shared_weak_count::__release_weak(v202);
              }
            }
            v198 += 2;
            if (v198 == v199)
              goto LABEL_390;
          }
          if (*(_BYTE *)(v201 + 47))
          {
            while (*(unsigned __int8 *)v208 == *(unsigned __int8 *)v209)
            {
              v208 = (const void **)((char *)v208 + 1);
              v209 = (uint64_t *)((char *)v209 + 1);
              if (!--v205)
                goto LABEL_356;
            }
            goto LABEL_384;
          }
LABEL_356:
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          *(_QWORD *)&v435[4] = 0;
          *(_QWORD *)&v433 = v200;
          *(_QWORD *)&v419 = v201;
          *((_QWORD *)&v419 + 1) = v202;
          if (v202)
          {
            v210 = (unint64_t *)&v202->__shared_owners_;
            do
              v211 = __ldxr(v210);
            while (__stxr(v211 + 1, v210));
          }
          if (v201)
          else
            *(_QWORD *)&v431 = 0;
          v212 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
          if (!v212)
            v212 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
          *(_QWORD *)&v430 = 0;
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v433, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v431, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v212 + 80), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v430);
          if ((v430 & 7) != 0)
          {
            v213 = (unsigned int *)(v430 & 0xFFFFFFFFFFFFFFF8);
            do
              v214 = __ldxr(v213);
            while (__stlxr(v214 - 2, v213));
          }
          if ((v431 & 7) != 0)
          {
            v215 = (unsigned int *)(v431 & 0xFFFFFFFFFFFFFFF8);
            do
              v216 = __ldxr(v215);
            while (__stlxr(v216 - 2, v215));
          }
          v217 = (std::__shared_weak_count *)*((_QWORD *)&v419 + 1);
          if (*((_QWORD *)&v419 + 1))
          {
            v218 = (unint64_t *)(*((_QWORD *)&v419 + 1) + 8);
            do
              v219 = __ldaxr(v218);
            while (__stlxr(v219 - 1, v218));
            if (!v219)
            {
              ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
              std::__shared_weak_count::__release_weak(v217);
            }
          }
          v220 = (realityio::mtlx::_anonymous_namespace_ *)MEMORY[0x2348B21DC](&v433);
          *((_QWORD *)&v433 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
          pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy((std::string **)&v433, v419);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v433);
          if ((v439 & 7) != 0)
          {
            v221 = (unsigned int *)(v439 & 0xFFFFFFFFFFFFFFF8);
            do
              v222 = __ldxr(v221);
            while (__stlxr(v222 - 2, v221));
          }
          if ((v438 & 7) != 0)
          {
            v223 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
            do
              v224 = __ldxr(v223);
            while (__stlxr(v224 - 2, v223));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
          v197 = *((_QWORD *)&v436 + 1);
          if (*((_QWORD *)&v436 + 1))
            v197 = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
          v202 = (std::__shared_weak_count *)*((_QWORD *)&v420 + 1);
          goto LABEL_384;
        }
      }
    }
  }
LABEL_390:
  MEMORY[0x2348B21DC](&v421);
  v227 = (unint64_t *)MEMORY[0x24BEE8128];
  v228 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!v228)
    v228 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v228 + 208));
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput(v405, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v229 + 8));
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
    if ((v422 & 7) != 0)
    {
      v230 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
      do
        v231 = __ldxr(v230);
      while (__stlxr(v231 - 2, v230));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421.__r_.__value_.__r.__words[2]);
    if (v421.__r_.__value_.__l.__size_)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v421.__r_.__value_.__l.__size_);
  }
  if ((v438 & 7) != 0)
  {
    v232 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
    do
      v233 = __ldxr(v232);
    while (__stlxr(v233 - 2, v232));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
  if (*((_QWORD *)&v436 + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
  MEMORY[0x2348B274C](&v421, "out");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v421);
  if ((v421.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    v234 = (unsigned int *)(v421.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v235 = __ldxr(v234);
    while (__stlxr(v235 - 2, v234));
  }
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput(v405, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v236 + 8));
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
    if ((v422 & 7) != 0)
    {
      v237 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
      do
        v238 = __ldxr(v237);
      while (__stlxr(v238 - 2, v237));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421.__r_.__value_.__r.__words[2]);
    if (v421.__r_.__value_.__l.__size_)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v421.__r_.__value_.__l.__size_);
  }
  if ((v438 & 7) != 0)
  {
    v239 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
    do
      v240 = __ldxr(v239);
    while (__stlxr(v240 - 2, v239));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
  if (*((_QWORD *)&v436 + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
  v241 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v227);
  if (!v241)
    v241 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v241 + 32));
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateDisplacementOutput(v405, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v242 + 8));
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
    if ((v422 & 7) != 0)
    {
      v243 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
      do
        v244 = __ldxr(v243);
      while (__stlxr(v244 - 2, v243));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421.__r_.__value_.__r.__words[2]);
    if (v421.__r_.__value_.__l.__size_)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v421.__r_.__value_.__l.__size_);
  }
  if ((v438 & 7) != 0)
  {
    v245 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
    do
      v246 = __ldxr(v245);
    while (__stlxr(v246 - 2, v245));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
  if (*((_QWORD *)&v436 + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
  v247 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v227);
  if (!v247)
    v247 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v247 + 232));
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateVolumeOutput(v405, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v248 + 8));
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
    if ((v422 & 7) != 0)
    {
      v249 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
      do
        v250 = __ldxr(v249);
      while (__stlxr(v250 - 2, v249));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421.__r_.__value_.__r.__words[2]);
    if (v421.__r_.__value_.__l.__size_)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v421.__r_.__value_.__l.__size_);
  }
  if ((v438 & 7) != 0)
  {
    v251 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
    do
      v252 = __ldxr(v251);
    while (__stlxr(v252 - 2, v251));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
  if (*((_QWORD *)&v436 + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a1, v253);
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
  {
    v255 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
    if (!v255)
      v255 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(v405, v254, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v255 + 88));
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
    if ((v422 & 7) != 0)
    {
      v256 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
      do
        v257 = __ldxr(v256);
      while (__stlxr(v257 - 2, v256));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421.__r_.__value_.__r.__words[2]);
    if (v421.__r_.__value_.__l.__size_)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v421.__r_.__value_.__l.__size_);
  }
  if ((v438 & 7) != 0)
  {
    v258 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
    do
      v259 = __ldxr(v258);
    while (__stlxr(v259 - 2, v258));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
  if (*((_QWORD *)&v436 + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a1);
  v261 = *((_QWORD *)&v433 + 1);
  for (k = v433; k != v261; k += 32)
  {
    LODWORD(v436) = *(_DWORD *)k;
    v262 = *(_QWORD *)(k + 8);
    *((_QWORD *)&v436 + 1) = v262;
    if (v262)
    {
      v263 = (unint64_t *)(v262 + 48);
      do
        v264 = __ldxr(v263);
      while (__stxr(v264 + 1, v263));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v437, (_DWORD *)(k + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v437 + 1, (_DWORD *)(k + 20));
    v265 = *(_QWORD *)(k + 24);
    v438 = v265;
    if ((v265 & 7) != 0)
    {
      v266 = (unsigned int *)(v265 & 0xFFFFFFFFFFFFFFF8);
      do
        v267 = __ldxr(v266);
      while (__stxr(v267 + 2, v266));
      if ((v267 & 1) == 0)
        v438 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v436);
    v268 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v227);
    if (!v268)
      v268 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(v227);
    v269 = v420;
    if ((v420 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v268 + 26) & 0xFFFFFFFFFFFFFFF8))
    {
      v270 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v227);
      if (!v270)
        v270 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(v227);
      v269 = v420;
      if ((v420 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v270 + 4) & 0xFFFFFFFFFFFFFFF8))
      {
        v271 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v227);
        if (!v271)
          v271 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(v227);
        v269 = v420;
        if ((v420 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v271 + 29) & 0xFFFFFFFFFFFFFFF8))
        {
          v269 = v420;
          if ((v420 & 0xFFFFFFFFFFFFFFF8) != (*v272 & 0xFFFFFFFFFFFFFFF8))
          {
            v273 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
            if (!v273)
              v273 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
            pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(v405, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v420, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v273 + 88));
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
            if ((v422 & 7) != 0)
            {
              v274 = (unsigned int *)(v422 & 0xFFFFFFFFFFFFFFF8);
              do
                v275 = __ldxr(v274);
              while (__stlxr(v275 - 2, v274));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v421.__r_.__value_.__r.__words[2]);
            if (v421.__r_.__value_.__l.__size_)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v421.__r_.__value_.__l.__size_);
            v269 = v420;
          }
        }
      }
    }
    if ((v269 & 7) != 0)
    {
      v276 = (unsigned int *)(v269 & 0xFFFFFFFFFFFFFFF8);
      do
        v277 = __ldxr(v276);
      while (__stlxr(v277 - 2, v276));
    }
    if ((v438 & 7) != 0)
    {
      v278 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
      do
        v279 = __ldxr(v278);
      while (__stlxr(v279 - 2, v278));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v437);
    if (*((_QWORD *)&v436 + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v436 + 1));
  }
  *(_QWORD *)&v436 = &v433;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v436);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v410);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v426);
  if ((v427 & 7) != 0)
  {
    v280 = (unsigned int *)(v427 & 0xFFFFFFFFFFFFFFF8);
    do
      v281 = __ldxr(v280);
    while (__stlxr(v281 - 2, v280));
  }
LABEL_495:
  if ((v428 & 7) != 0)
  {
    v282 = (unsigned int *)(v428 & 0xFFFFFFFFFFFFFFF8);
    do
      v283 = __ldxr(v282);
    while (__stlxr(v283 - 2, v282));
  }
  v284 = (std::__shared_weak_count *)*((_QWORD *)&v429 + 1);
  if (*((_QWORD *)&v429 + 1))
  {
    v285 = (unint64_t *)(*((_QWORD *)&v429 + 1) + 8);
    do
      v286 = __ldaxr(v285);
    while (__stlxr(v286 - 1, v285));
    if (!v286)
    {
      ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
      std::__shared_weak_count::__release_weak(v284);
    }
  }
}

void sub_2301B7204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;

  v55 = *(_QWORD *)(v53 - 216);
  if ((v55 & 7) != 0)
  {
    v56 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  MEMORY[0x2348B21DC](v53 - 192);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  MEMORY[0x2348B21DC](&__p);
  MEMORY[0x2348B1EC4](a19);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a25);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a51);
  if ((a52 & 7) != 0)
  {
    v58 = (unsigned int *)(a52 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  if ((a53 & 7) != 0)
  {
    v60 = (unsigned int *)(a53 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v53 - 256);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::`anonymous namespace'::_Context::AddImplicitNodeGraph(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
}

void sub_2301B79D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::`anonymous namespace'::_Context::_BindNodeGraph(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a3, uint64_t a4)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t String;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  realityio::mtlx::_anonymous_namespace_ *IsValid;
  unint64_t v24;
  const char *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *v31;
  _QWORD *v32;
  _QWORD **v33;
  _QWORD **v34;
  _QWORD *v35;
  _BOOL4 v36;
  _QWORD *v37;
  const void **v38;
  const char *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  const pxrInternal__aapl__pxrReserved__::TfToken *v45;
  realityio::mtlx::_anonymous_namespace_ *IsOutput;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t *Data;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  const char *v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[8];
  uint64_t v100;
  uint64_t *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  int v114;
  _BYTE v115[8];
  uint64_t v116;
  uint64_t v117;

  std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>((uint64_t)&v106, a4);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v106, &v87);
  NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v87);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, NameToken);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87);
  if ((v110 & 7) != 0)
  {
    v9 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
  if (v107)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107);
  if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
  {
    v11 = (_QWORD *)(*a1 + 48);
    if (*(char *)(*a1 + 71) < 0)
      v11 = (_QWORD *)*v11;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v115);
    if (*(char *)(String + 23) >= 0)
      v14 = String;
    else
      v14 = *(_QWORD *)String;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_BindNodeGraph %s - %s\n", v13, v11, v14);
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a4) & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v87))
    {
      v106 = *(_DWORD *)a4;
      v15 = *(_QWORD *)(a4 + 8);
      v107 = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 48);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v108, (_DWORD *)(a4 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v109, (_DWORD *)(a4 + 20));
      v18 = *(_QWORD *)(a4 + 24);
      v110 = v18;
      if ((v18 & 7) != 0)
      {
        v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 2, v19));
        if ((v20 & 1) == 0)
          v110 &= 0xFFFFFFFFFFFFFFF8;
      }
      std::map<std::string,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100]((uint64_t)&v111, (const void ***)(a4 + 32));
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v87, &v114);
    }
    else
    {
    }
    if ((v90 & 7) != 0)
    {
      v21 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v89);
    if (v88)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v88);
  }
  else
  {
  }
  IsValid = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v106);
  if ((IsValid & 1) != 0)
  {
    v24 = v87;
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v106);
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get();
      v25 = v88;
      if (v88)
      {
        v26 = (unsigned int *)(v88 + 8);
        do
        {
          v27 = __ldxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
          (*(void (**)(const char *))(*(_QWORD *)v25 + 8))(v25);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v94 = MEMORY[0x24BEE9D98] + 16;
    }
    if (v95 && (*(_BYTE *)(v95 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v94 + 32))(&v94))
    {
      MEMORY[0x2348B2764](&v87, v24);
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v94, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v87);
      if ((v87 & 7) != 0)
      {
        v29 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
LABEL_76:
      MEMORY[0x2348B2170](&v94);
      IsOutput = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput();
      if ((_DWORD)IsOutput)
      {
        v47 = a1[1];
        v94 = *a1;
        v95 = v47;
        if (v47)
        {
          v48 = (unint64_t *)(v47 + 8);
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
        if ((v90 & 7) != 0)
        {
          v50 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
          do
            v51 = __ldxr(v50);
          while (__stlxr(v51 - 2, v50));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v89);
        if (v88)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v88);
        v52 = (std::__shared_weak_count *)v95;
        if (v95)
        {
          v53 = (unint64_t *)(v95 + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        goto LABEL_135;
      }
      if (*((char *)v101 + 23) < 0)
      {
        if (v101[1])
        {
LABEL_92:
          if (*(char *)(v24 + 23) < 0)
          {
            if (*(_QWORD *)(v24 + 8))
              goto LABEL_94;
          }
          else if (*(_BYTE *)(v24 + 23))
          {
LABEL_94:
            MEMORY[0x2348B2764](&v100, v24);
LABEL_95:
            MEMORY[0x2348B2764](&v87, v101);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v115, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v87);
            if ((v87 & 7) != 0)
            {
              v55 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
              do
                v56 = __ldxr(v55);
              while (__stlxr(v56 - 2, v55));
            }
            std::allocator<pxrInternal__aapl__pxrReserved__::UsdRelationship>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdRelationship,pxrInternal__aapl__pxrReserved__::UsdRelationship const&>((uint64_t)&v87, a4);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v87);
            MEMORY[0x2348B2764](&v98, v101);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v115, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v98);
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v92);
            if ((v98 & 7) != 0)
            {
              v57 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
              do
                v58 = __ldxr(v57);
              while (__stlxr(v58 - 2, v57));
            }
            v59 = v95;
            if (v95)
            {
              v60 = (unsigned int *)(v95 + 8);
              do
              {
                v61 = __ldxr(v60);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, v60));
              if (!v62)
                (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
            }
            if ((v90 & 7) != 0)
            {
              v63 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
              do
                v64 = __ldxr(v63);
              while (__stlxr(v64 - 2, v63));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v89);
            if (v88)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v88);
            if (v117
              && (*(_BYTE *)(v117 + 57) & 8) == 0
              && (*(unsigned int (**)(uint64_t *))(v116 + 32))(&v116))
            {
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v116, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v100);
              if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
              {
                v65 = a1[1];
                v92 = *a1;
                v93 = (std::__shared_weak_count *)v65;
                if (v65)
                {
                  v66 = (unint64_t *)(v65 + 8);
                  do
                    v67 = __ldxr(v66);
                  while (__stxr(v67 + 1, v66));
                }
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource();
                if ((v90 & 7) != 0)
                {
                  v68 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v69 = __ldxr(v68);
                  while (__stlxr(v69 - 2, v68));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v89);
                if (v88)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v88);
                v70 = v93;
                if (v93)
                {
                  p_shared_owners = (unint64_t *)&v93->__shared_owners_;
                  do
                    v72 = __ldaxr(p_shared_owners);
                  while (__stlxr(v72 - 1, p_shared_owners));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
              }
              else
              {
                v87 = (unint64_t)"CoreRealityIO/mtlxToUsdShade.cpp";
                v88 = "_BindNodeGraph";
                v89 = 1763;
                v90 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_Context::_BindNodeGraph(const mx::"
                                        "ConstInputPtr &, const SdfPath &, const UsdShadeConnectableAPI &, const _NodeGraph &)";
                v91 = 0;
                pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v99);
                pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
              }
              if ((v97 & 7) != 0)
              {
                v84 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
                do
                  v85 = __ldxr(v84);
                while (__stlxr(v85 - 2, v84));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v96);
              if (v95)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v95);
            }
            else
            {
              v87 = (unint64_t)"CoreRealityIO/mtlxToUsdShade.cpp";
              v88 = "_BindNodeGraph";
              v89 = 1766;
              v90 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_Context::_BindNodeGraph(const mx::Co"
                                      "nstInputPtr &, const SdfPath &, const UsdShadeConnectableAPI &, const _NodeGraph &)";
              v91 = 0;
              pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v99);
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
            }
            MEMORY[0x2348B1EC4](&v116);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v99);
            if ((v100 & 7) != 0)
            {
              v73 = (unsigned int *)(v100 & 0xFFFFFFFFFFFFFFF8);
              do
                v74 = __ldxr(v73);
              while (__stlxr(v74 - 2, v73));
            }
            goto LABEL_135;
          }
          Data = (uint64_t *)atomic_load(&realityio::mtlx::UsdMtlxTokens);
          if (!Data)
            Data = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::mtlx::UsdMtlxTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::mtlx::UsdMtlxTokens_StaticTokenType>>::_TryToCreateData();
          v81 = *Data;
          v100 = v81;
          if ((v81 & 7) != 0)
          {
            v82 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 2, v82));
            if ((v83 & 1) == 0)
              v100 &= 0xFFFFFFFFFFFFFFF8;
          }
          goto LABEL_95;
        }
      }
      else if (*((_BYTE *)v101 + 23))
      {
        goto LABEL_92;
      }
      v87 = (unint64_t)"CoreRealityIO/mtlxToUsdShade.cpp";
      v88 = "_BindNodeGraph";
      v89 = 1772;
      v90 = (unint64_t)"void realityio::mtlx::(anonymous namespace)::_Context::_BindNodeGraph(const mx::ConstInput"
                              "Ptr &, const SdfPath &, const UsdShadeConnectableAPI &, const _NodeGraph &)";
      v91 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(a3, &v94);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v94);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94);
LABEL_135:
      if ((v105 & 7) != 0)
      {
        v75 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
        do
          v76 = __ldxr(v75);
        while (__stlxr(v76 - 2, v75));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v104);
      if (v103)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v103);
      goto LABEL_140;
    }
    v86 = a1;
    v31 = a3;
    v32 = v112;
    if (v112)
    {
      v33 = &v112;
      do
      {
        v34 = v33;
        v35 = v32 + 4;
        v36 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v113, (const void **)v32 + 4, (const void **)v24);
        v37 = v32 + 1;
        if (!v36)
        {
          v37 = v32;
          v33 = (_QWORD **)v32;
        }
        v32 = (_QWORD *)*v37;
      }
      while (*v37);
      if (v33 != &v112)
      {
        v38 = v36 ? (const void **)(v34 + 4) : (const void **)v35;
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v113, (const void **)v24, v38))
        {
          if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v106);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v114, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v33 + 7));
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v92);
            v39 = v88;
            if (v88)
            {
              v40 = (unsigned int *)(v88 + 8);
              do
              {
                v41 = __ldxr(v40);
                v42 = v41 - 1;
              }
              while (__stlxr(v42, v40));
              if (!v42)
                (*(void (**)(const char *))(*(_QWORD *)v39 + 8))(v39);
            }
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v106, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v33 + 7));
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v116 = MEMORY[0x24BEE9D38] + 16;
            if ((v90 & 7) != 0)
            {
              v43 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
              do
                v44 = __ldxr(v43);
              while (__stlxr(v44 - 2, v43));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v89);
            if (v88)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v88);
          }
          if (v117
            && (*(_BYTE *)(v117 + 57) & 8) == 0
            && (*(unsigned int (**)(uint64_t *))(v116 + 32))(&v116))
          {
            v45 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::mtlx::UsdMtlxTokens);
            if (!v45)
              v45 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::mtlx::UsdMtlxTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::mtlx::UsdMtlxTokens_StaticTokenType>>::_TryToCreateData();
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v116, v45);
            MEMORY[0x2348B1EC4](&v116);
            goto LABEL_75;
          }
          MEMORY[0x2348B1EC4](&v116);
        }
      }
    }
    v102 = 3;
    v103 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v105 = 0;
LABEL_75:
    a3 = v31;
    a1 = v86;
    goto LABEL_76;
  }
LABEL_140:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v114);
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(v112);
  if ((v110 & 7) != 0)
  {
    v77 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v78 = __ldxr(v77);
    while (__stlxr(v78 - 2, v77));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
  if (v107)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v115);
}

void sub_2301B853C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  unsigned int *v34;
  unsigned int v35;

  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a13);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a20);
  MEMORY[0x2348B1EC4](v32 - 112);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a25);
  if ((a26 & 7) != 0)
  {
    v34 = (unsigned int *)(a26 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a28);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v32 - 120));
  _Unwind_Resume(a1);
}

void sub_2301B8ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      MEMORY[0x2348B4E1C](v14, 0x60C40F64FA5DBLL);
      _Unwind_Resume(a1);
    }
  }
}

void realityio::mtlx::`anonymous namespace'::_Context::_AddInput(realityio::mtlx::_anonymous_namespace_ *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::string *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::string *v16;
  std::__shared_weak_count *v17;

  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = *(std::string **)a2;
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v10 = *(std::string **)a2;
  v11 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = v10;
  v17 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_2301B8C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v9;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput(v9);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::`anonymous namespace'::_Context::_AddNodeGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  _QWORD *v9;
  uint64_t String;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  std::string *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char *v33[2];
  _QWORD v34[14];

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v8) & 1) == 0)
  {
    if (*(_QWORD *)a3)
    {
      if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
      {
        v9 = (_QWORD *)(*(_QWORD *)a3 + 48);
        if (*(char *)(*(_QWORD *)a3 + 71) < 0)
          v9 = (_QWORD *)*v9;
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 40));
        if (*(char *)(String + 23) >= 0)
          v12 = String;
        else
          v12 = *(_QWORD *)String;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add node graph: %s at path %s\n", v11, v9, v12);
      }
      v13 = *(_QWORD *)a3;
      v14 = *(std::__shared_weak_count **)(a3 + 8);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        std::shared_ptr<RIO_MTLX::Element const>::operator=[abi:ne180100](v34, v13, (uint64_t)v14);
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      else
      {
        std::shared_ptr<RIO_MTLX::Element const>::operator=[abi:ne180100](v34, v13, 0);
      }
      v26 = *(std::string **)a3;
      v27 = *(std::__shared_weak_count **)(a3 + 8);
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      if (v27)
      {
        v30 = (unint64_t *)&v27->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
      {
        v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 40));
        if (*(char *)(v18 + 23) >= 0)
          v20 = v18;
        else
          v20 = *(_QWORD *)v18;
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add implicit node graph at path %s\n", v19, v20);
      }
      v21 = *a4;
      v22 = (std::__shared_weak_count *)a4[1];
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        std::shared_ptr<RIO_MTLX::Element const>::operator=[abi:ne180100](v34, v21, (uint64_t)v22);
        do
          v25 = __ldaxr(v23);
        while (__stlxr(v25 - 1, v23));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      else
      {
        std::shared_ptr<RIO_MTLX::Element const>::operator=[abi:ne180100](v34, v21, 0);
      }
    }
  }
}

void sub_2301B8EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::mtlx::UsdMtlxTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::mtlx::UsdMtlxTokens_StaticTokenType>>::_TryToCreateData()
{
  void **v0;
  unsigned int *v2;
  unsigned int v3;
  void **v5;

  v0 = (void **)operator new();
  realityio::mtlx::UsdMtlxTokens_StaticTokenType::UsdMtlxTokens_StaticTokenType((realityio::mtlx::UsdMtlxTokens_StaticTokenType *)v0);
  while (!__ldaxr(&realityio::mtlx::UsdMtlxTokens))
  {
    if (!__stlxr((unint64_t)v0, &realityio::mtlx::UsdMtlxTokens))
      return (unint64_t)v0;
  }
  __clrex();
  v5 = v0 + 1;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (((unint64_t)*v0 & 7) != 0)
  {
    v2 = (unsigned int *)((unint64_t)*v0 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  MEMORY[0x2348B4E1C](v0, 0x60C405399E965);
  return atomic_load(&realityio::mtlx::UsdMtlxTokens);
}

void sub_2301B8FC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C405399E965);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t realityio::mtlx::`anonymous namespace'::_Context::_AddCollection(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *a1, uint64_t a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  unsigned int *v20;
  unsigned int v21;
  std::string *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t **v30;
  _QWORD *v31;
  std::string *v32;
  __int128 v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t result;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *v43;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *v44;
  uint64_t *v45;
  unsigned int *v46;
  unsigned int v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  realityio::mtlx::_anonymous_namespace_ *v57;
  uint64_t **v58;
  std::string *v59;
  unsigned __int8 **v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *ActiveGeomPrefix;
  uint64_t **v75;
  std::string *v76;
  unsigned __int8 **v77;
  const void **v78;
  const void **v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t **v82;
  std::string *v83;
  unsigned __int8 **v84;
  const void **v85;
  const void **v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  unsigned __int8 *v97;
  std::__shared_weak_count *v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  uint64_t *v111;
  std::__shared_weak_count *v112;
  char v113;
  char v114;
  uint64_t v115;
  uint64_t *v116[2];

  v8 = (uint64_t *)*a3;
  v9 = a3[1];
  v11 = a4 + 1;
  v10 = a4[1];
  if (!v10)
  {
    v12 = a4 + 1;
LABEL_9:
    v14 = (uint64_t *)operator new(0x30uLL);
    v15 = v14;
    v14[4] = (uint64_t)v8;
    v14[5] = v9;
    if (v9)
    {
      v16 = (unint64_t *)(v9 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    *v14 = 0;
    v14[1] = 0;
    v14[2] = (uint64_t)v12;
    *v11 = v14;
    v18 = (uint64_t *)**a4;
    if (v18)
    {
      *a4 = v18;
      v15 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a4[1], v15);
    a4[2] = (uint64_t *)((char *)a4[2] + 1);
    v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)a2);
    v106 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v106);
    if ((v106 & 7) != 0)
    {
      v20 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    v22 = (std::string *)*a3;
    v23 = (std::__shared_weak_count *)a3[1];
    v94 = (std::string *)*a3;
    v95 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    if (v22)
    else
      v96 = 0;
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply();
    v26 = *a3;
    v27 = *a3 + 48;
    v28 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>(a2 + 152, &v115, (const void **)v27);
    v29 = *v28;
    if (!*v28)
    {
      v30 = v28;
      v31 = operator new(0x58uLL);
      v111 = v31;
      v112 = (std::__shared_weak_count *)(a2 + 160);
      v113 = 0;
      v32 = (std::string *)(v31 + 4);
      if (*(char *)(v26 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)(v26 + 48), *(_QWORD *)(v26 + 56));
      }
      else
      {
        v33 = *(_OWORD *)v27;
        v31[6] = *(_QWORD *)(v27 + 16);
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
      }
      LODWORD(v106) = 1;
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v109 = 0;
      v116[0] = 0;
      *pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)(v31 + 7), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v106, (const pxrInternal__aapl__pxrReserved__::TfToken *)v116) = MEMORY[0x24BEE9D60] + 16;
      if ((v109 & 7) != 0)
      {
        v37 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
      if (v107)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107);
      v113 = 1;
      v29 = v111;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)(a2 + 152), v115, v30, v111);
      v111 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>>>>::reset[abi:ne180100]((uint64_t)&v111);
    }
    v39 = (uint64_t)v98;
    if (v98)
    {
      v40 = (unint64_t *)&v98[2];
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = v29[8];
    v29[8] = v39;
    v43 = a1;
    if (v42)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v42);
    v44 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v29 + 7);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v29 + 9), &v99);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v29 + 76, &v100);
    v45 = v29 + 10;
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(v29 + 10, &v101);
    MEMORY[0x2348B2038](&v97);
    if ((v96 & 7) != 0)
    {
      v46 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
      v23 = v95;
    }
    if (v23)
    {
      v48 = (unint64_t *)&v23->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v29 + 7));
    v50 = (std::__shared_weak_count *)a3[1];
    v97 = (unsigned __int8 *)*a3;
    v98 = v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    if (v50)
    {
      v53 = (unint64_t *)&v50->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if ((v109 & 7) != 0)
    {
      v55 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
      do
        v56 = __ldxr(v55);
      while (__stlxr(v56 - 2, v55));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
    v57 = (realityio::mtlx::_anonymous_namespace_ *)v107;
    if (v107)
      v57 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107);
    v59 = (std::string *)v116[0];
    if (*((char *)v116[0] + 23) < 0)
    {
      if (!v116[0][1])
        goto LABEL_96;
    }
    else if (!*((_BYTE *)v116[0] + 23))
    {
      goto LABEL_96;
    }
    v60 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS((RIO_MTLX *)v58);
    RIO_MTLX::splitString(v59, v60, (uint64_t)&v97);
    v61 = v97;
    v62 = (unsigned __int8 *)v98;
    if (v97 != (unsigned __int8 *)v98)
    {
      do
      {
        RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)*a3, &v106);
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Collection>(v106, v61, &v111);
        v63 = (std::__shared_weak_count *)v107;
        if (v107)
        {
          v64 = (unint64_t *)(v107 + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        if (v111)
        {
          v66 = v112;
          v94 = (std::string *)v111;
          v95 = v112;
          if (v112)
          {
            v67 = (unint64_t *)&v112->__shared_owners_;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          if (v66)
          {
            v69 = (unint64_t *)&v66->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          if (v107
            && (*(_BYTE *)(v107 + 57) & 8) == 0
            && (*(unsigned int (**)(uint64_t *))(v106 + 32))(&v106))
          {
            pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v106);
            pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IncludePath(v44, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v94);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94);
          }
          MEMORY[0x2348B2038](&v106);
        }
        v71 = v112;
        if (v112)
        {
          v72 = (unint64_t *)&v112->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v61 += 24;
      }
      while (v61 != v62);
    }
    v106 = (uint64_t)&v97;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
LABEL_96:
    ActiveGeomPrefix = RIO_MTLX::Element::getActiveGeomPrefix((RIO_MTLX::Element *)*a3);
    v76 = v94;
    if (SHIBYTE(v94->__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v94->__r_.__value_.__l.__size_)
        goto LABEL_110;
    }
    else if (!*((_BYTE *)&v94->__r_.__value_.__s + 23))
    {
      goto LABEL_110;
    }
    v77 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS((RIO_MTLX *)v75);
    RIO_MTLX::splitString(v76, v77, (uint64_t)&v97);
    v79 = (const void **)v97;
    v78 = (const void **)&v98->__vftable;
    if (v97 != (unsigned __int8 *)v98)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(v44);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)ActiveGeomPrefix, v79, (uint64_t)&v111);
        if (v114 < 0)
          operator delete(v111);
        if ((v109 & 7) != 0)
        {
          v80 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
          do
            v81 = __ldxr(v80);
          while (__stlxr(v81 - 2, v80));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
        if (v107)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107);
        v79 += 3;
      }
      while (v79 != v78);
    }
    v106 = (uint64_t)&v97;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
LABEL_110:
    v83 = v94;
    if (SHIBYTE(v94->__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v94->__r_.__value_.__l.__size_)
        goto LABEL_124;
    }
    else if (!*((_BYTE *)&v94->__r_.__value_.__s + 23))
    {
      goto LABEL_124;
    }
    v84 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS((RIO_MTLX *)v82);
    RIO_MTLX::splitString(v83, v84, (uint64_t)&v97);
    v86 = (const void **)v97;
    v85 = (const void **)&v98->__vftable;
    if (v97 != (unsigned __int8 *)v98)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExcludesRel(v44);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)ActiveGeomPrefix, v86, (uint64_t)&v111);
        if (v114 < 0)
          operator delete(v111);
        if ((v109 & 7) != 0)
        {
          v87 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
          do
            v88 = __ldxr(v87);
          while (__stlxr(v88 - 2, v87));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
        if (v107)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107);
        v86 += 3;
      }
      while (v86 != v85);
    }
    v106 = (uint64_t)&v97;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
LABEL_124:
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(_QWORD *)v43 = MEMORY[0x24BEE9D58] + 16;
    v89 = *v45;
    *((_QWORD *)v43 + 3) = *v45;
    if ((v89 & 7) != 0)
    {
      v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 2, v90));
      if ((v91 & 1) == 0)
        *((_QWORD *)v43 + 3) &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)v43 = MEMORY[0x24BEE9D60] + 16;
    if ((v105 & 7) != 0)
    {
      v92 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
      do
        v93 = __ldxr(v92);
      while (__stlxr(v93 - 2, v92));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v104);
    result = v103;
    if (!v103)
      return result;
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  while (1)
  {
    while (1)
    {
      v12 = (uint64_t **)v10;
      v13 = v10[4];
      if (v13 <= (unint64_t)v8)
        break;
      v10 = *v12;
      v11 = v12;
      if (!*v12)
        goto LABEL_9;
    }
    if (v13 >= (unint64_t)v8)
      break;
    v10 = v12[1];
    if (!v10)
    {
      v11 = v12 + 1;
      goto LABEL_9;
    }
  }
  v106 = (uint64_t)"CoreRealityIO/mtlxToUsdShade.cpp";
  v108 = 1605;
  v109 = (unint64_t)"UsdCollectionAPI realityio::mtlx::(anonymous namespace)::_Context::_AddCollection(const mx::C"
                           "onstCollectionPtr &, std::set<mx::ConstCollectionPtr> *)";
  v110 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
  LODWORD(v106) = 1;
  v107 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v109 = 0;
  v102 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v106, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v102);
  *(_QWORD *)a1 = MEMORY[0x24BEE9D60] + 16;
  if ((v109 & 7) != 0)
  {
    v34 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
  result = v107;
  if (v107)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

void sub_2301B9A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>>>>::reset[abi:ne180100](v3 - 128);
  MEMORY[0x2348B2038]((uint64_t *)va1);
  if ((v10 & 7) != 0)
  {
    v5 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va2);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::_Context::_AddGeom(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  _QWORD v8[4];
  char v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString())
  {
    v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)MEMORY[0x2348B26F8](&v10, a3);
    v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  else
  {
    v8[0] = "CoreRealityIO/mtlxToUsdShade.cpp";
    v8[1] = "_AddGeom";
    v8[2] = 1692;
    v8[3] = "void realityio::mtlx::(anonymous namespace)::_Context::_AddGeom(const UsdRelationship &, const std::string &) const";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (SHIBYTE(v13) < 0)
    operator delete(v11);
}

void sub_2301B9D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 - 33) < 0)
    operator delete(*(void **)(v17 - 56));
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  _QWORD *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *result = MEMORY[0x24BEE9D58] + 16;
  v5 = *(_QWORD *)a3;
  result[3] = *(_QWORD *)a3;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      result[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  const void **v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const void **v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  const void **v23;
  const void **v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  BOOL v31;
  __int128 v32;
  const void **v33;
  _BOOL4 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  const void **v45;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  const void **v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  const void *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v89;
  const void **v90;
  __int128 v91;
  uint64_t v92;
  void **v93;
  BOOL v94;
  int v95;
  uint64_t v96;
  __int128 v97;
  const void *v98;
  const void **v99;
  char v100;
  unint64_t v101;
  const void **v102;
  const void **v103;
  int64_t v104;
  __int128 v105;
  const void *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v10 = a2 - 3;
  v101 = (unint64_t)a2;
  v103 = a2 - 6;
  v99 = a2 - 9;
  v11 = a1;
  while (2)
  {
    a1 = v11;
    v12 = (uint64_t)a2 - v11;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (std::less<std::string>::operator()[abi:ne180100](a3, v10, (const void **)a1))
        {
          v42 = *(_OWORD *)a1;
          v106 = *(const void **)(a1 + 16);
          v105 = v42;
          v43 = *(_OWORD *)v10;
          *(_QWORD *)(a1 + 16) = v10[2];
          *(_OWORD *)a1 = v43;
          v44 = v105;
          v10[2] = v106;
          *(_OWORD *)v10 = v44;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), v10, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)v10, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)v10, a3);
        return;
      default:
        if (v12 <= 575)
        {
          v45 = (const void **)(a1 + 24);
          v47 = (const void **)a1 == a2 || v45 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = a1;
              do
              {
                v50 = (const void **)v49;
                v49 = (uint64_t)v45;
                if (std::less<std::string>::operator()[abi:ne180100](a3, v45, v50))
                {
                  v51 = *(_OWORD *)v49;
                  v106 = *(const void **)(v49 + 16);
                  v105 = v51;
                  *(_QWORD *)(v49 + 8) = 0;
                  *(_QWORD *)(v49 + 16) = 0;
                  *(_QWORD *)v49 = 0;
                  v52 = v48;
                  do
                  {
                    v53 = a1 + v52;
                    v54 = (void **)(a1 + v52 + 24);
                    if (*(char *)(a1 + v52 + 47) < 0)
                      operator delete(*v54);
                    *(_OWORD *)v54 = *(_OWORD *)v53;
                    *(_QWORD *)(a1 + v52 + 40) = *(_QWORD *)(v53 + 16);
                    *(_BYTE *)(v53 + 23) = 0;
                    *(_BYTE *)v53 = 0;
                    if (!v52)
                    {
                      v56 = a1;
                      goto LABEL_83;
                    }
                    v52 -= 24;
                  }
                  while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v105, (const void **)(v52 + a1)));
                  v55 = *(char *)(a1 + v52 + 47);
                  v56 = a1 + v52 + 24;
                  if (v55 < 0)
                    operator delete(*(void **)v56);
LABEL_83:
                  a2 = (const void **)v101;
                  v57 = v105;
                  *(_QWORD *)(v56 + 16) = v106;
                  *(_OWORD *)v56 = v57;
                }
                v45 = (const void **)(v49 + 24);
                v48 += 24;
              }
              while ((const void **)(v49 + 24) != a2);
            }
          }
          else if (!v47)
          {
            v89 = a1 - 24;
            do
            {
              v90 = (const void **)a1;
              a1 = (uint64_t)v45;
              if (std::less<std::string>::operator()[abi:ne180100](a3, v45, v90))
              {
                v91 = *(_OWORD *)a1;
                v106 = *(const void **)(a1 + 16);
                v105 = v91;
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v92 = v89;
                do
                {
                  v93 = (void **)(v92 + 48);
                  if (*(char *)(v92 + 71) < 0)
                    operator delete(*v93);
                  *(_OWORD *)v93 = *(_OWORD *)(v92 + 24);
                  *(_QWORD *)(v92 + 64) = *(_QWORD *)(v92 + 40);
                  *(_BYTE *)(v92 + 47) = 0;
                  *(_BYTE *)(v92 + 24) = 0;
                  v94 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v105, (const void **)v92);
                  v92 -= 24;
                }
                while (v94);
                v95 = *(char *)(v92 + 71);
                v96 = v92 + 48;
                if (v95 < 0)
                  operator delete(*(void **)v96);
                v97 = v105;
                *(_QWORD *)(v96 + 16) = v106;
                *(_OWORD *)v96 = v97;
              }
              v45 = (const void **)(a1 + 24);
              v89 += 24;
            }
            while ((const void **)(a1 + 24) != a2);
          }
          return;
        }
        if (!a4)
        {
          if ((const void **)a1 != a2)
          {
            v58 = (v13 - 2) >> 1;
            v104 = v58;
            do
            {
              v59 = v58;
              if (v104 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = a1 + 24 * v60;
                if (2 * v58 + 2 < (uint64_t)v13
                  && std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 + 24 * v60), (const void **)(v61 + 24)))
                {
                  v61 += 24;
                  v60 = 2 * v59 + 2;
                }
                v62 = a1 + 24 * v59;
                if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v61, (const void **)v62))
                {
                  v63 = *(_OWORD *)v62;
                  v106 = *(const void **)(v62 + 16);
                  v105 = v63;
                  *(_QWORD *)(v62 + 8) = 0;
                  *(_QWORD *)(v62 + 16) = 0;
                  *(_QWORD *)v62 = 0;
                  while (1)
                  {
                    v64 = v61;
                    if (*(char *)(v62 + 23) < 0)
                      operator delete(*(void **)v62);
                    v65 = *(_OWORD *)v61;
                    *(_QWORD *)(v62 + 16) = *(_QWORD *)(v61 + 16);
                    *(_OWORD *)v62 = v65;
                    *(_BYTE *)(v61 + 23) = 0;
                    *(_BYTE *)v61 = 0;
                    if (v104 < v60)
                      break;
                    v66 = (2 * v60) | 1;
                    v61 = a1 + 24 * v66;
                    v67 = 2 * v60 + 2;
                    if (v67 < (uint64_t)v13
                      && std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 + 24 * v66), (const void **)(v61 + 24)))
                    {
                      v61 += 24;
                      v66 = v67;
                    }
                    v62 = v64;
                    v60 = v66;
                    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v61, (const void **)&v105))
                    {
                      if (*(char *)(v64 + 23) < 0)
                        operator delete(*(void **)v64);
                      break;
                    }
                  }
                  v68 = v105;
                  *(_QWORD *)(v64 + 16) = v106;
                  *(_OWORD *)v64 = v68;
                  a2 = (const void **)v101;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            v69 = v12 / 0x18uLL;
            do
            {
              v70 = 0;
              v98 = *(const void **)a1;
              *(_QWORD *)&v107 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)((char *)&v107 + 7) = *(_QWORD *)(a1 + 15);
              v100 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v71 = v69 - 2;
              v102 = a2;
              if (v69 < 2)
                v71 = v69 - 1;
              v72 = v71 >> 1;
              v73 = a1;
              do
              {
                v74 = v73 + 24 * v70 + 24;
                v75 = 2 * v70;
                v70 = (2 * v70) | 1;
                v76 = v75 + 2;
                if (v75 + 2 < v69
                  && std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v74, (const void **)(v74 + 24)))
                {
                  v74 += 24;
                  v70 = v76;
                }
                if (*(char *)(v73 + 23) < 0)
                  operator delete(*(void **)v73);
                v77 = *(_OWORD *)v74;
                *(_QWORD *)(v73 + 16) = *(_QWORD *)(v74 + 16);
                *(_OWORD *)v73 = v77;
                *(_BYTE *)(v74 + 23) = 0;
                *(_BYTE *)v74 = 0;
                v73 = v74;
              }
              while (v70 <= v72);
              a2 = v102 - 3;
              if ((const void **)v74 == v102 - 3)
              {
                *(_QWORD *)v74 = v98;
                v87 = *(_QWORD *)((char *)&v107 + 7);
                *(_QWORD *)(v74 + 8) = v107;
                *(_QWORD *)(v74 + 15) = v87;
                *(_BYTE *)(v74 + 23) = v100;
              }
              else
              {
                v78 = *(_OWORD *)a2;
                *(_QWORD *)(v74 + 16) = *(v102 - 1);
                *(_OWORD *)v74 = v78;
                *(v102 - 3) = v98;
                v79 = (const void *)v107;
                *(const void **)((char *)v102 - 9) = *(const void **)((char *)&v107 + 7);
                *(v102 - 2) = v79;
                *((_BYTE *)v102 - 1) = v100;
                v80 = v74 - a1 + 24;
                if (v80 >= 25)
                {
                  v81 = (v80 / 0x18uLL - 2) >> 1;
                  v82 = a1 + 24 * v81;
                  if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v82, (const void **)v74))
                  {
                    v83 = *(_OWORD *)v74;
                    v106 = *(const void **)(v74 + 16);
                    v105 = v83;
                    *(_QWORD *)(v74 + 8) = 0;
                    *(_QWORD *)(v74 + 16) = 0;
                    *(_QWORD *)v74 = 0;
                    while (1)
                    {
                      v84 = v82;
                      if (*(char *)(v74 + 23) < 0)
                        operator delete(*(void **)v74);
                      v85 = *(_OWORD *)v82;
                      *(_QWORD *)(v74 + 16) = *(_QWORD *)(v82 + 16);
                      *(_OWORD *)v74 = v85;
                      *(_BYTE *)(v82 + 23) = 0;
                      *(_BYTE *)v82 = 0;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = a1 + 24 * v81;
                      v74 = v84;
                      if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v82, (const void **)&v105))
                      {
                        if (*(char *)(v84 + 23) < 0)
                          operator delete(*(void **)v84);
                        break;
                      }
                    }
                    v86 = v105;
                    *(_QWORD *)(v84 + 16) = v106;
                    *(_OWORD *)v84 = v86;
                  }
                }
              }
            }
            while (v69-- > 2);
          }
          return;
        }
        v14 = a1 + 24 * (v13 >> 1);
        if ((unint64_t)v12 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 24 * (v13 >> 1)), (const void **)a1, v10, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24 * (v13 >> 1)), v10, a3);
          v15 = 3 * (v13 >> 1);
          v16 = (const void **)(a1 + 24 * (v13 >> 1) - 24);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 24), v16, v103, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 48), (const void **)(a1 + 24 + 8 * v15), v99, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v16, (const void **)v14, (const void **)(a1 + 24 + 8 * v15), a3);
          v17 = *(_OWORD *)a1;
          v106 = *(const void **)(a1 + 16);
          v105 = v17;
          v18 = *(_QWORD *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_QWORD *)(a1 + 16) = v18;
          v19 = v105;
          *(_QWORD *)(v14 + 16) = v106;
          *(_OWORD *)v14 = v19;
        }
        --a4;
        a2 = (const void **)v101;
        if ((a5 & 1) == 0
          && !std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 - 24), (const void **)a1))
        {
          v32 = *(_OWORD *)a1;
          v108 = *(_QWORD *)(a1 + 16);
          v107 = v32;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v107, v10))
          {
            v11 = a1;
            do
              v11 += 24;
            while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v107, (const void **)v11));
          }
          else
          {
            v33 = (const void **)(a1 + 24);
            do
            {
              v11 = (unint64_t)v33;
              if ((unint64_t)v33 >= v101)
                break;
              v34 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v107, v33);
              v33 = (const void **)(v11 + 24);
            }
            while (!v34);
          }
          v35 = v101;
          if (v11 < v101)
          {
            v35 = v101;
            do
              v35 -= 24;
            while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v107, (const void **)v35));
          }
          while (v11 < v35)
          {
            v36 = *(_OWORD *)v11;
            v106 = *(const void **)(v11 + 16);
            v105 = v36;
            v37 = *(_OWORD *)v35;
            *(_QWORD *)(v11 + 16) = *(_QWORD *)(v35 + 16);
            *(_OWORD *)v11 = v37;
            v38 = v105;
            *(_QWORD *)(v35 + 16) = v106;
            *(_OWORD *)v35 = v38;
            do
              v11 += 24;
            while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v107, (const void **)v11));
            do
              v35 -= 24;
            while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v107, (const void **)v35));
          }
          v39 = (__int128 *)(v11 - 24);
          if (v11 - 24 == a1)
          {
            if (*(char *)(v11 - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v40 = *v39;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v11 - 8);
            *(_OWORD *)a1 = v40;
            *(_BYTE *)(v11 - 1) = 0;
            *(_BYTE *)(v11 - 24) = 0;
          }
          a5 = 0;
          v41 = v107;
          *(_QWORD *)(v11 - 8) = v108;
          *v39 = v41;
          continue;
        }
        v20 = 0;
        v21 = *(_OWORD *)a1;
        v108 = *(_QWORD *)(a1 + 16);
        v107 = v21;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        do
          v20 += 24;
        while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(v20 + a1), (const void **)&v107));
        v22 = a1 + v20;
        v23 = (const void **)v101;
        if (v20 == 24)
        {
          v23 = (const void **)v101;
          do
          {
            if (v22 >= (unint64_t)v23)
              break;
            v23 -= 3;
          }
          while (!std::less<std::string>::operator()[abi:ne180100](a3, v23, (const void **)&v107));
        }
        else
        {
          do
            v23 -= 3;
          while (!std::less<std::string>::operator()[abi:ne180100](a3, v23, (const void **)&v107));
        }
        v11 = a1 + v20;
        if (v22 < (unint64_t)v23)
        {
          v24 = v23;
          do
          {
            v25 = *(_OWORD *)v11;
            v106 = *(const void **)(v11 + 16);
            v105 = v25;
            v26 = *(_OWORD *)v24;
            *(_QWORD *)(v11 + 16) = v24[2];
            *(_OWORD *)v11 = v26;
            v27 = v105;
            v24[2] = v106;
            *(_OWORD *)v24 = v27;
            do
              v11 += 24;
            while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v11, (const void **)&v107));
            do
              v24 -= 3;
            while (!std::less<std::string>::operator()[abi:ne180100](a3, v24, (const void **)&v107));
          }
          while (v11 < (unint64_t)v24);
        }
        v28 = (__int128 *)(v11 - 24);
        if (v11 - 24 == a1)
        {
          if (*(char *)(v11 - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v29 = *v28;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v11 - 8);
          *(_OWORD *)a1 = v29;
          *(_BYTE *)(v11 - 1) = 0;
          *(_BYTE *)(v11 - 24) = 0;
        }
        v30 = v107;
        *(_QWORD *)(v11 - 8) = v108;
        *v28 = v30;
        if (v22 < (unint64_t)v23)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v11 - 24, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v11 - 24, a3);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v11, v101, a3))
        {
          if (v31)
            continue;
          goto LABEL_34;
        }
        a2 = (const void **)(v11 - 24);
        if (!v31)
          goto LABEL_2;
        return;
    }
  }
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8;
  _BOOL8 result;
  const void *v10;
  __int128 v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;

  v8 = std::less<std::string>::operator()[abi:ne180100](a4, a2, a1);
  result = std::less<std::string>::operator()[abi:ne180100](a4, a3, a2);
  if (v8)
  {
    if (result)
    {
      v10 = a1[2];
      v11 = *(_OWORD *)a1;
      v12 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v12;
    }
    else
    {
      v19 = a1[2];
      v20 = *(_OWORD *)a1;
      v21 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v21;
      *(_OWORD *)a2 = v20;
      a2[2] = v19;
      result = std::less<std::string>::operator()[abi:ne180100](a4, a3, a2);
      if (!result)
        return result;
      v10 = a2[2];
      v11 = *(_OWORD *)a2;
      v22 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v22;
    }
    *(_OWORD *)a3 = v11;
    a3[2] = v10;
  }
  else if (result)
  {
    v13 = a2[2];
    v14 = *(_OWORD *)a2;
    v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    result = std::less<std::string>::operator()[abi:ne180100](a4, a2, a1);
    if (result)
    {
      v16 = a1[2];
      v17 = *(_OWORD *)a1;
      v18 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v18;
      *(_OWORD *)a2 = v17;
      a2[2] = v16;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 24;
      if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a2 - 24), (const void **)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        *(_QWORD *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a2 - 24), a3);
      return 1;
    default:
      v12 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v13, v12))
    {
      v22 = *(_OWORD *)v13;
      v23 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v16 = v14;
      do
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 48);
        *(_QWORD *)(a1 + v16 + 88) = *(_QWORD *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          v21 = a1;
          goto LABEL_15;
        }
        v19 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      v20 = *(char *)(a1 + v16 + 95);
      v21 = a1 + v16 + 72;
      if (v20 < 0)
        operator delete(*(void **)v21);
LABEL_15:
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(v21 + 16) = v23;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  const void *v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  const void *v18;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2, a3, a5);
  if (std::less<std::string>::operator()[abi:ne180100](a5, (const void **)a4, a3))
  {
    v11 = a3[2];
    v12 = *(_OWORD *)a3;
    v13 = (const void *)*((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((_QWORD *)a4 + 2) = v11;
    if (std::less<std::string>::operator()[abi:ne180100](a5, a3, a2))
    {
      v14 = a2[2];
      v15 = *(_OWORD *)a2;
      v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (std::less<std::string>::operator()[abi:ne180100](a5, a2, (const void **)a1))
      {
        v17 = *(const void **)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4, a6);
  if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a5, (const void **)a4))
  {
    v13 = *((_QWORD *)a4 + 2);
    v14 = *a4;
    v15 = *((_QWORD *)a5 + 2);
    *a4 = *a5;
    *((_QWORD *)a4 + 2) = v15;
    *a5 = v14;
    *((_QWORD *)a5 + 2) = v13;
    if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a4, a3))
    {
      v16 = a3[2];
      v17 = *(_OWORD *)a3;
      v18 = (const void *)*((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((_QWORD *)a4 + 2) = v16;
      if (std::less<std::string>::operator()[abi:ne180100](a6, a3, a2))
      {
        v19 = a2[2];
        v20 = *(_OWORD *)a2;
        v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (std::less<std::string>::operator()[abi:ne180100](a6, a2, (const void **)a1))
        {
          v22 = *(const void **)(a1 + 16);
          result = *(__n128 *)a1;
          v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

void realityio::mtlx::`anonymous namespace'::VariantAssignments::_Compose(uint64_t a1, const void **a2, const void **a3)
{
  const void **v4;
  uint64_t **v6;
  std::allocator<std::pair<std::string, std::string>> *v7;
  std::vector<std::pair<std::string, std::string>> *v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::pair<std::string, std::string> *v17;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = (uint64_t **)(a1 + 96);
    v7 = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 88);
    v8 = (std::vector<std::pair<std::string, std::string>> *)(a1 + 72);
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v6, v4, (uint64_t)v4);
      if ((v9 & 1) != 0)
      {
        v11 = *(_QWORD *)(a1 + 80);
        v10 = *(_QWORD *)(a1 + 88);
        if (v11 >= v10)
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (unint64_t)v8->__begin_) >> 4);
          v14 = v13 + 1;
          if (v13 + 1 > 0x555555555555555)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (unint64_t)v8->__begin_) >> 4);
          if (2 * v15 > v14)
            v14 = 2 * v15;
          if (v15 >= 0x2AAAAAAAAAAAAAALL)
            v16 = 0x555555555555555;
          else
            v16 = v14;
          __v.__end_cap_.__value_ = v7;
          if (v16)
            v17 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)v7, v16);
          else
            v17 = 0;
          __v.__first_ = v17;
          __v.__begin_ = v17 + v13;
          __v.__end_ = __v.__begin_;
          __v.__end_cap_.__value_ = &v17[v16];
          std::pair<std::string,std::string>::pair[abi:ne180100](&__v.__begin_->first, (__int128 *)v4);
          ++__v.__end_;
          std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(v8, &__v);
          v12 = *(_QWORD *)(a1 + 80);
          std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
        }
        else
        {
          std::pair<std::string,std::string>::pair[abi:ne180100](*(std::string **)(a1 + 80), (__int128 *)v4);
          v12 = v11 + 48;
          *(_QWORD *)(a1 + 80) = v12;
        }
        *(_QWORD *)(a1 + 80) = v12;
      }
      v4 += 6;
    }
    while (v4 != a3);
  }
}

void sub_2301BB044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::pair<std::string, std::string>> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 80) = v11;
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::`anonymous namespace'::VariantAssignments::_Get(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t **v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  std::pair<std::string, std::string> *v30;
  __int128 *v31;
  uint64_t v32;
  unint64_t i;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__split_buffer<std::pair<std::string, std::string>> __v;
  const void **v45;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v7 = *a3;
  v8 = *(__int128 **)(*a3 + 136);
  v9 = *(__int128 **)(v7 + 144);
  if (v8 == v9)
    goto LABEL_40;
  do
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)v8 + 47);
    if ((v10 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(*(_QWORD *)v8 + 47);
    else
      v11 = *(_QWORD *)(*(_QWORD *)v8 + 32);
    v12 = byte_255E5533F;
    if (byte_255E5533F < 0)
      v12 = qword_255E55330;
    if (v11 == v12)
    {
      v13 = (const void **)(*(_QWORD *)v8 + 24);
      if (byte_255E5533F >= 0)
        v14 = &qword_255E55328;
      else
        v14 = (uint64_t *)qword_255E55328;
      if ((v10 & 0x80) != 0)
      {
        v6 = memcmp(*v13, v14, *(_QWORD *)(*(_QWORD *)v8 + 32));
        if ((_DWORD)v6)
          goto LABEL_18;
LABEL_17:
        v6 = std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100](&v41, v8);
        goto LABEL_18;
      }
      if (!*(_BYTE *)(*(_QWORD *)v8 + 47))
        goto LABEL_17;
      while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v14)
      {
        v13 = (const void **)((char *)v13 + 1);
        v14 = (uint64_t *)((char *)v14 + 1);
        if (!--v10)
          goto LABEL_17;
      }
    }
LABEL_18:
    ++v8;
  }
  while (v8 != v9);
  v15 = (uint64_t *)v41;
  v16 = (uint64_t *)v42;
  if (v41 != v42)
  {
    v17 = (uint64_t *)(v42 - 16);
    if (v42 - 16 > v41)
    {
      do
      {
        v18 = *v15;
        *v15 = *v17;
        *v17 = v18;
        v19 = v15[1];
        v15[1] = v17[1];
        v17[1] = v19;
        v15 += 2;
        v17 -= 2;
      }
      while (v15 < v17);
      v15 = (uint64_t *)v41;
      v16 = (uint64_t *)v42;
    }
  }
  if (v15 != v16)
  {
    v20 = (uint64_t **)(a2 + 96);
    do
    {
      v6 = (uint64_t)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v20, v45, (uint64_t)v45);
      if ((v22 & 1) != 0)
      {
        v24 = a1[1];
        v23 = a1[2];
        if (v24 >= v23)
        {
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *a1) >> 4);
          v27 = v26 + 1;
          if (v26 + 1 > 0x555555555555555)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a1) >> 4);
          if (2 * v28 > v27)
            v27 = 2 * v28;
          if (v28 >= 0x2AAAAAAAAAAAAAALL)
            v29 = 0x555555555555555;
          else
            v29 = v27;
          __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
          if (v29)
            v30 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)(a1 + 2), v29);
          else
            v30 = 0;
          __v.__first_ = v30;
          __v.__begin_ = v30 + v26;
          __v.__end_ = __v.__begin_;
          __v.__end_cap_.__value_ = &v30[v29];
          ++__v.__end_;
          std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer((std::vector<std::pair<std::string, std::string>> *)a1, &__v);
          v25 = a1[1];
          std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
        }
        else
        {
          v25 = v24 + 48;
          a1[1] = v25;
        }
        a1[1] = v25;
      }
      v15 += 2;
    }
    while (v15 != v16);
  }
LABEL_40:
  v31 = (__int128 *)*a1;
  v32 = a1[1];
  if (*a1 != v32)
  {
    for (i = v32 - 48; (unint64_t)v31 < i; i -= 48)
    {
      v34 = *((_QWORD *)v31 + 2);
      v35 = *v31;
      v36 = *(_QWORD *)(i + 16);
      *v31 = *(_OWORD *)i;
      *((_QWORD *)v31 + 2) = v36;
      *(_OWORD *)i = v35;
      *(_QWORD *)(i + 16) = v34;
      v37 = *((_QWORD *)v31 + 5);
      v38 = *(__int128 *)((char *)v31 + 24);
      v39 = *(_QWORD *)(i + 40);
      *(__int128 *)((char *)v31 + 24) = *(_OWORD *)(i + 24);
      *((_QWORD *)v31 + 5) = v39;
      *(_OWORD *)(i + 24) = v38;
      *(_QWORD *)(i + 40) = v37;
      v31 += 3;
    }
  }
  __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v41;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_2301BB390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__split_buffer<std::pair<std::string, std::string>> *a13)
{
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void std::allocator_traits<std::allocator<std::pair<std::string,std::string>>>::construct[abi:ne180100]<std::pair<std::string,std::string>,realityio::mtlx::`anonymous namespace'::_Attr &,realityio::mtlx::`anonymous namespace'::_Attr &,void>(std::string *this, __int128 *a2, __int128 **a3)
{
  __int128 v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  v7 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v8 = *v7;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_2301BB474(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return a1;
}

void std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(a1[1]);
    std::__tree<std::pair<std::string,std::string>>::destroy((_QWORD *)a1[7]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::pair<std::string,std::string>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::pair<std::string,std::string>>::destroy(*a1);
    std::__tree<std::pair<std::string,std::string>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t **realityio::mtlx::`anonymous namespace'::_Attr::_Attr<RIO_MTLX::MaterialAssign const>(uint64_t **a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a2 + 160), (unsigned __int8 *)&qword_255E55160);
  if (v3)
    v4 = (uint64_t *)(v3 + 40);
  else
    v4 = RIO_MTLX::EMPTY_STRING(0);
  v5 = *((unsigned __int8 *)v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = v4[1];
  if (!v5)
    v4 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v4);
  *a1 = v4;
  return a1;
}

uint64_t std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](const void **a1, const void **a2)
{
  int v4;
  int v5;
  size_t v6;
  const void *v7;
  size_t v8;
  const void *v9;
  size_t v10;
  int v11;
  BOOL v12;
  int v14;
  BOOL v15;
  const void **v16;
  const void **v17;
  const void **v18;
  int v19;
  const void **v20;
  const void **v21;
  const void **v22;
  int v23;
  size_t v24;
  const void **v25;
  size_t v26;
  const void **v27;
  size_t v28;
  int v29;

  v4 = *((char *)a2 + 23);
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  if (v5 >= 0)
    v7 = a1;
  else
    v7 = *a1;
  if (v4 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v4 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = memcmp(v7, v9, v10);
  v12 = v6 < v8;
  if (v11)
    v12 = v11 < 0;
  if (v12)
    return 1;
  v14 = memcmp(v9, v7, v10);
  v15 = v8 < v6;
  if (v14)
    v15 = v14 < 0;
  if (v15)
    return 0;
  v18 = (const void **)a2[3];
  v17 = a2 + 3;
  v16 = v18;
  v19 = *((char *)v17 + 23);
  v22 = (const void **)a1[3];
  v21 = a1 + 3;
  v20 = v22;
  v23 = *((char *)v21 + 23);
  if (v23 >= 0)
    v24 = *((unsigned __int8 *)v21 + 23);
  else
    v24 = (size_t)v21[1];
  if (v23 >= 0)
    v25 = v21;
  else
    v25 = v20;
  if (v19 >= 0)
    v26 = *((unsigned __int8 *)v17 + 23);
  else
    v26 = (size_t)v17[1];
  if (v19 >= 0)
    v27 = v17;
  else
    v27 = v16;
  if (v26 >= v24)
    v28 = v24;
  else
    v28 = v26;
  v29 = memcmp(v25, v27, v28);
  if (v29)
    return v29 < 0;
  else
    return v24 < v26;
}

void std::unique_ptr<std::__tree_node<std::pair<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::pair<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,realityio::mtlx::`anonymous namespace'::VariantAssignments>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,realityio::mtlx::`anonymous namespace'::VariantAssignments>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,realityio::mtlx::`anonymous namespace'::VariantAssignments>>>::destroy(char *a1)
{
  void **v2;

  if (a1)
  {
    std::__tree<std::string>::destroy((uint64_t)(a1 + 144), *((char **)a1 + 19));
    v2 = (void **)(a1 + 120);
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(*((_QWORD **)a1 + 13));
    v2 = (void **)(a1 + 72);
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
    v2 = (void **)(a1 + 48);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 32));
    operator delete(a1);
  }
}

uint64_t *realityio::mtlx::`anonymous namespace'::VariantAssignments::GetVariantSelections(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  unsigned __int8 v9;
  uint64_t *result;

  v4 = *(_QWORD **)(a1 + 56);
  v2 = (_QWORD *)(a1 + 56);
  v3 = v4;
  if (v4)
  {
    v5 = v2;
    do
    {
      v6 = v3[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (v7)
        v5 = v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != v2 && v5[4] <= a2)
      return v5 + 6;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_255E54F40);
  result = &qword_255E54F98;
  if ((v9 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_255E54F40))
    {
      qword_255E54FA8 = 0;
      qword_255E54FA0 = 0;
      qword_255E54F98 = (uint64_t)&qword_255E54FA0;
      __cxa_guard_release(&qword_255E54F40);
    }
    return &qword_255E54F98;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v8 = *a3;
    v9 = (uint64_t *)operator new(0x30uLL);
    v6 = v9;
    v10 = *v8;
    v9[4] = *v8;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v9[4] &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_DWORD *)v9 + 10) = 0;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v14, v7, v9);
  }
  return v6;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::destroy(a1[1]);
    v2 = a1[4];
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    operator delete(a1);
  }
}

uint64_t RIOBuilderGetTypeID()
{
  if (RIOBuilderGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderGetTypeID::onceToken, &__block_literal_global_35);
  return RIOBuilderGetTypeID::typeID;
}

uint64_t RIOBuilderCreateWithBuilderInfo(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  return RIOBuilderCreateWithImplementation(a1, a2, a4, a5, a6, a7, a8);
}

uint64_t RIOBuilderCreateWithImplementation(uint64_t a1, __CFString *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t Instance;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  int v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  std::string v67;
  char v68[8];
  std::string v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *__p[2];
  char v73;
  _QWORD v74[3];
  _QWORD *v75;
  _QWORD v76[3];
  _QWORD *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _BYTE v82[24];
  _BYTE *v83;
  _BYTE v84[24];
  _BYTE *v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  if (!a1 || (realityio::CFStringCopyUTF8String(a2, (uint64_t)v68), !v68[0]))
  {
    v17 = 0;
    goto LABEL_99;
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v67, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  else
    v67 = v69;
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(std::__shared_weak_count **)(a3 + 24);
  v65 = v18;
  v66 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v59 = (void *)MEMORY[0x2348B5260](v13);
    v58 = (void *)MEMORY[0x2348B5260](v14);
    v60 = (void *)MEMORY[0x2348B5260](v15);
    v61 = (void *)MEMORY[0x2348B5260](v16);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24), &v62);
    v22 = (std::__shared_weak_count *)operator new(0x170uLL);
    v22->__shared_owners_ = 0;
    v23 = (unint64_t *)&v22->__shared_owners_;
    v22->__shared_weak_owners_ = 0;
    v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFC820;
    if (v19)
    {
      v24 = (unint64_t *)&v19->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = MEMORY[0x2348B5260](v59);
    v80[0] = &off_24FDFC870;
    v80[1] = v26;
    v81 = v80;
    v27 = MEMORY[0x2348B5260](v58);
    v78[0] = &off_24FDFC8F0;
    v78[1] = v27;
    v79 = v78;
    v28 = MEMORY[0x2348B5260](v60);
    v76[0] = &off_24FDFC970;
    v76[1] = v28;
    v77 = v76;
    v29 = MEMORY[0x2348B5260](v61);
    v74[0] = &off_24FDFCA00;
    v74[1] = v29;
    v75 = v74;
    std::string::basic_string[abi:ne180100]<0>(__p, "CustomBuilder");
    v70 = v18;
    v71 = v19;
    if (v19)
    {
      v30 = (unint64_t *)&v19->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = (uint64_t)v81;
    if (v81)
    {
      if (v81 == v80)
      {
        v85 = v84;
        (*(void (**)(_QWORD *, _BYTE *))(v80[0] + 24))(v80, v84);
LABEL_24:
        v33 = (uint64_t)v79;
        if (v79)
        {
          if (v79 == v78)
          {
            v83 = v82;
            (*(void (**)(_QWORD *, _BYTE *))(v78[0] + 24))(v78, v82);
LABEL_29:
            realityio::DynamicBuilder::DynamicBuilder((realityio::Builder *)&v22[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, (uint64_t)__p, (uint64_t)&v67, &v70, (uint64_t)v84, (uint64_t)v82);
            v34 = v83;
            if (v83 == v82)
            {
              v35 = 4;
              v34 = v82;
            }
            else
            {
              if (!v83)
                goto LABEL_34;
              v35 = 5;
            }
            (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_34:
            v36 = v85;
            if (v85 == v84)
            {
              v37 = 4;
              v36 = v84;
            }
            else
            {
              if (!v85)
              {
LABEL_39:
                v38 = v71;
                if (v71)
                {
                  v39 = (unint64_t *)&v71->__shared_owners_;
                  do
                    v40 = __ldaxr(v39);
                  while (__stlxr(v40 - 1, v39));
                  if (!v40)
                  {
                    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                    std::__shared_weak_count::__release_weak(v38);
                  }
                }
                if (v73 < 0)
                  operator delete(__p[0]);
                v22[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFCA80;
                v41 = (uint64_t)v77;
                if (v77)
                {
                  if (v77 == v76)
                  {
                    v22[13].__shared_weak_owners_ = (uint64_t)&v22[12].__shared_weak_owners_;
                    (*(void (**)(_QWORD *, uint64_t *))(v76[0] + 24))(v76, &v22[12].__shared_weak_owners_);
LABEL_51:
                    if (!v75)
                    {
                      v22[15].__vftable = 0;
                      goto LABEL_61;
                    }
                    if (v75 == v74)
                    {
                      v22[15].__vftable = (std::__shared_weak_count_vtbl *)&v22[14];
                      (*(void (**)(_QWORD *))(v74[0] + 24))(v74);
                    }
                    else
                    {
                      v22[15].__vftable = (std::__shared_weak_count_vtbl *)(*(uint64_t (**)(void))(*v75 + 16))();
                    }
                    v42 = v75;
                    if (v75 == v74)
                    {
                      v43 = 4;
                      v42 = v74;
                    }
                    else
                    {
                      if (!v75)
                        goto LABEL_61;
                      v43 = 5;
                    }
                    (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_61:
                    v44 = v77;
                    if (v77 == v76)
                    {
                      v45 = 4;
                      v44 = v76;
                    }
                    else
                    {
                      if (!v77)
                        goto LABEL_66;
                      v45 = 5;
                    }
                    (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_66:
                    v46 = v79;
                    if (v79 == v78)
                    {
                      v47 = 4;
                      v46 = v78;
                    }
                    else
                    {
                      if (!v79)
                        goto LABEL_71;
                      v47 = 5;
                    }
                    (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_71:
                    v48 = v81;
                    if (v81 == v80)
                    {
                      v49 = 4;
                      v48 = v80;
                    }
                    else
                    {
                      if (!v81)
                      {
LABEL_76:
                        if (v19)
                        {
                          v50 = (unint64_t *)&v19->__shared_owners_;
                          do
                            v51 = __ldaxr(v50);
                          while (__stlxr(v51 - 1, v50));
                          if (!v51)
                          {
                            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                            std::__shared_weak_count::__release_weak(v19);
                          }
                        }
                        v63 = v22 + 1;
                        v64 = v22;
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
                        if (RIOBuilderGetTypeID::onceToken != -1)
                          dispatch_once(&RIOBuilderGetTypeID::onceToken, &__block_literal_global_35);
                        Instance = _CFRuntimeCreateInstance();
                        v17 = Instance;
                        if (Instance)
                        {
                          *(_QWORD *)(Instance + 16) = v22 + 1;
                          *(_QWORD *)(Instance + 24) = v22;
                          do
                            v53 = __ldxr(v23);
                          while (__stxr(v53 + 1, v23));
                        }
                        do
                          v54 = __ldaxr(v23);
                        while (__stlxr(v54 - 1, v23));
                        if (!v54)
                        {
                          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                          std::__shared_weak_count::__release_weak(v22);
                        }

                        v19 = v66;
                        if (!v66)
                          goto LABEL_94;
                        goto LABEL_90;
                      }
                      v49 = 5;
                    }
                    (*(void (**)(void))(*v48 + 8 * v49))();
                    goto LABEL_76;
                  }
                  v41 = (*(uint64_t (**)(void))(*v77 + 16))();
                }
                v22[13].__shared_weak_owners_ = v41;
                goto LABEL_51;
              }
              v37 = 5;
            }
            (*(void (**)(void))(*v36 + 8 * v37))();
            goto LABEL_39;
          }
          v33 = (*(uint64_t (**)(_QWORD *))(*v79 + 16))(v79);
        }
        v83 = (_BYTE *)v33;
        goto LABEL_29;
      }
      v32 = (*(uint64_t (**)(_QWORD *))(*v81 + 16))(v81);
    }
    v85 = (_BYTE *)v32;
    goto LABEL_24;
  }
  v17 = 0;
  if (v19)
  {
LABEL_90:
    v55 = (unint64_t *)&v19->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_94:
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (v68[0] && SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
LABEL_99:

  return v17;
}

void sub_2301BC098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  void *v50;
  void *v51;
  void *v52;
  void *v53;

  if (a28)
  {
    if (a34 < 0)
      operator delete(__p);
  }

  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderCopyIdentifier(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t v7;
  uint64_t EmptyString;
  unsigned int *v9;
  unsigned int v10;
  CFStringRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[2];
  std::__shared_weak_count *v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  v16[1] = v2;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v2 + 24))(v16);
  v7 = v16[0];
  if ((v16[0] & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    EmptyString = (v16[0] & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    v7 = v16[0];
  }
  if ((v7 & 7) != 0)
  {
    v9 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  if (*(char *)(EmptyString + 23) < 0)
    EmptyString = *(_QWORD *)EmptyString;
  v11 = CFStringCreateWithCString(0, (const char *)EmptyString, 0x8000100u);
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_2301BC418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderCopyBuildOrder()
{
  return 2;
}

uint64_t RIOBuilderCopyDirtyStageSubscription(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  v16 = v2;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 32))(&v14);
  v6 = RIOBuilderDirtyStageSubscriptionCreate<std::shared_ptr<realityio::DirtyStageSubscription const> &>(&v14);
  v7 = v15;
  if (v15)
  {
    v8 = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v6;
}

void sub_2301BC53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDirtyStageSubscriptionCreate<std::shared_ptr<realityio::DirtyStageSubscription const> &>(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (RIOBuilderDirtyStageSubscriptionGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderDirtyStageSubscriptionGetTypeID::onceToken, &__block_literal_global_37);
  result = _CFRuntimeCreateInstance();
  if (result)
  {
    v3 = a1[1];
    *(_QWORD *)(result + 16) = *a1;
    *(_QWORD *)(result + 24) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
  }
  return result;
}

uint64_t RIOBuilderCopyInputsDescriptor(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t Instance;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  v20 = v2;
  v21 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 40))(&v18);
  if (RIOBuilderInputsDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderInputsDescriptorGetTypeID::onceToken, &__block_literal_global_16);
  Instance = _CFRuntimeCreateInstance();
  v7 = Instance;
  if (Instance)
  {
    v8 = v19;
    *(_QWORD *)(Instance + 16) = v18;
    *(_QWORD *)(Instance + 24) = v8;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v7;
}

void sub_2301BC730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderCopyOutputsDescriptor(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t Instance;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  v20 = v2;
  v21 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 48))(&v18);
  if (RIOBuilderOutputsDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderOutputsDescriptorGetTypeID::onceToken, &__block_literal_global_15);
  Instance = _CFRuntimeCreateInstance();
  v7 = Instance;
  if (Instance)
  {
    v8 = v19;
    *(_QWORD *)(Instance + 16) = v18;
    *(_QWORD *)(Instance + 24) = v8;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v7;
}

void sub_2301BC898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderCopyPrim(uint64_t a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(std::__shared_weak_count **)(a1 + 24);
  v17 = v2;
  v18 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(_QWORD *)(v2 + 168);
  if (!v5)
  {
    v7 = 0;
    if (!v1)
      return v7;
    goto LABEL_13;
  }
  v13 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v13);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v13);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 8));
  v19 = 1;
  v7 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v13, &v19);
  if ((v16 & 7) != 0)
  {
    v8 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (v14)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  v1 = v18;
  if (v18)
  {
LABEL_13:
    v10 = (unint64_t *)&v1->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  return v7;
}

void sub_2301BC9F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderCopyPrimPath(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0)
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(v1 + 8));
  else
    return 0;
}

uint64_t RIOBuilderGetSwiftObject(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2)
    return *(_QWORD *)(v1 + 32);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  v5 = *(_QWORD *)(v1 + 32);
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v5;
}

void RIOBuilderSetSwiftObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(std::__shared_weak_count **)(a1 + 24);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
        *(_QWORD *)(v2 + 32) = a2;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      else
      {
        *(_QWORD *)(v2 + 32) = a2;
      }
    }
  }
}

uint64_t RIOBuilderOutputsCreate(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t Instance;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  v18 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(v1 + 16);
  v5 = *(std::__shared_weak_count **)(v1 + 24);
  if (v5)
  {
    v7 = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  if (RIOBuilderOutputsGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderOutputsGetTypeID::onceToken, &__block_literal_global_36);
  Instance = _CFRuntimeCreateInstance();
  v10 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 16) = v6;
    *(_QWORD *)(Instance + 24) = v5;
    if (!v5)
      goto LABEL_19;
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  else if (!v5)
  {
    goto LABEL_19;
  }
  v13 = (unint64_t *)&v5->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_19:
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v10;
}

void sub_2301BCC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void RIOBuilderAddComponent(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(uint64_t **)(a1 + 16);
  v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  realityio::Builder::addComponent(v3, a2);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2301BCD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIOBuilderAddComponentByClass(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v8 = a2;
  std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(v2 + 40), (unint64_t *)&v8, &v8);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2301BCDD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _RIOBuilderCFFinalize(const void *a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
}

BOOL _RIOBuilderCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilder %p>"), a1);
}

CFStringRef _RIOBuilderCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilder %p>"), a1);
}

void std::__shared_ptr_emplace<realityio::CustomBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFC820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::CustomBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFC820;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::CustomBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24FDFC870;
  v2[1] = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDFC870;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  char *v7;

  v3 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
  if (v3)
  {
    v4 = v3[3];
    *a2 = v3[2];
    a2[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    CFRelease(v3);
  }
  else
  {
    v7 = (char *)operator new(0x40uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_24FDE1E30;
    *(_OWORD *)(v7 + 40) = 0u;
    *((_DWORD *)v7 + 14) = 1065353216;
    a2[1] = v7;
    *(_OWORD *)(v7 + 24) = 0u;
    *a2 = v7 + 24;
  }
}

void sub_2301BD088(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RIOBuilderCreateWithImplementation::$_0,std::allocator<RIOBuilderCreateWithImplementation::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24FDFC8F0;
  v2[1] = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDFC8F0;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  char *v7;

  v3 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
  if (v3)
  {
    v4 = v3[3];
    *a2 = v3[2];
    a2[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    CFRelease(v3);
  }
  else
  {
    v7 = (char *)operator new(0x68uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_24FDE1F10;
    *(_OWORD *)(v7 + 40) = 0u;
    *((_DWORD *)v7 + 14) = 1065353216;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_DWORD *)v7 + 24) = 1065353216;
    a2[1] = v7;
    *(_OWORD *)(v7 + 24) = 0u;
    *a2 = v7 + 24;
  }
}

void sub_2301BD27C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RIOBuilderCreateWithImplementation::$_1,std::allocator<RIOBuilderCreateWithImplementation::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24FDFC970;
  v2[1] = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDFC970;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::operator()(uint64_t a1, uint64_t *a2)
{
  const void *v3;
  uint64_t v4;

  v4 = *a2;
  v3 = (const void *)RIOBuilderInputsCreate<realityio::Inputs *&>(&v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
  CFRelease(v3);
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RIOBuilderCreateWithImplementation::$_2,std::allocator<RIOBuilderCreateWithImplementation::$_2>,void ()(realityio::Inputs *)>::target_type()
{
}

uint64_t RIOBuilderInputsCreate<realityio::Inputs *&>(_QWORD *a1)
{
  uint64_t result;

  if (RIOBuilderInputsGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderInputsGetTypeID::onceToken, &__block_literal_global_18);
  result = _CFRuntimeCreateInstance();
  if (result)
    *(_QWORD *)(result + 16) = *a1;
  return result;
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24FDFCA00;
  v2[1] = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDFCA00;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

void std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::operator()(uint64_t a1, uint64_t *a2)
{
  const void *v3;
  uint64_t v4;

  v4 = *a2;
  v3 = (const void *)RIOBuilderInputsCreate<realityio::Inputs *&>(&v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
  CFRelease(v3);
}

uint64_t std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<RIOBuilderCreateWithImplementation::$_3,std::allocator<RIOBuilderCreateWithImplementation::$_3>,void ()(realityio::Inputs *)>::target_type()
{
}

void realityio::CustomBuilder::~CustomBuilder(realityio::CustomBuilder *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  realityio::CustomBuilder *v5;
  uint64_t v6;
  realityio::CustomBuilder *v7;
  uint64_t v8;
  realityio::CustomBuilder *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;

  *(_QWORD *)this = &off_24FDFCA80;
  v2 = (char *)this + 312;
  v3 = (char *)*((_QWORD *)this + 42);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (realityio::CustomBuilder *)*((_QWORD *)this + 38);
  if (v5 == (realityio::CustomBuilder *)((char *)this + 280))
  {
    v6 = 4;
    v5 = (realityio::CustomBuilder *)((char *)this + 280);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  *(_QWORD *)this = off_24FDE1CA0;
  v7 = (realityio::CustomBuilder *)*((_QWORD *)this + 34);
  if (v7 == (realityio::CustomBuilder *)((char *)this + 248))
  {
    v8 = 4;
    v7 = (realityio::CustomBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (realityio::CustomBuilder *)*((_QWORD *)this + 30);
  if (v9 == (realityio::CustomBuilder *)((char *)this + 216))
  {
    v10 = 4;
    v9 = (realityio::CustomBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v11 = *((_QWORD *)this + 24);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 23);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  realityio::Builder::~Builder(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  realityio::CustomBuilder *v5;
  uint64_t v6;
  realityio::CustomBuilder *v7;
  uint64_t v8;
  realityio::CustomBuilder *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;

  *(_QWORD *)this = &off_24FDFCA80;
  v2 = (char *)this + 312;
  v3 = (char *)*((_QWORD *)this + 42);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (realityio::CustomBuilder *)*((_QWORD *)this + 38);
  if (v5 == (realityio::CustomBuilder *)((char *)this + 280))
  {
    v6 = 4;
    v5 = (realityio::CustomBuilder *)((char *)this + 280);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  *(_QWORD *)this = off_24FDE1CA0;
  v7 = (realityio::CustomBuilder *)*((_QWORD *)this + 34);
  if (v7 == (realityio::CustomBuilder *)((char *)this + 248))
  {
    v8 = 4;
    v7 = (realityio::CustomBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (realityio::CustomBuilder *)*((_QWORD *)this + 30);
  if (v9 == (realityio::CustomBuilder *)((char *)this + 216))
  {
    v10 = 4;
    v9 = (realityio::CustomBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v11 = *((_QWORD *)this + 24);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 23);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  realityio::Builder::~Builder(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::CustomBuilder::run(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 304);
  if (result)
  {
    v3 = a2;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 48))(result, &v3);
  }
  return result;
}

uint64_t realityio::CustomBuilder::clear(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = *(_QWORD *)(a1 + 336);
  if (result)
  {
    v3 = a2;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 48))(result, &v3);
  }
  return result;
}

uint64_t realityio::replication::LayerStateDelegate::New@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *v3;
  uint64_t result;

  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SdfLayerStateDelegateBase(v3);
  *(_QWORD *)v3 = &off_24FDFCAF8;
  *((_BYTE *)v3 + 40) = 0;
  *((_BYTE *)v3 + 48) = 0;
  *a1 = v3;
  return result;
}

void sub_2301BD9D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x10E1C40126BA3C1);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::Receive(realityio::replication::LayerStateDelegate *this, const char *a2, uint64_t a3)
{
  NSObject *v5;
  realityio *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  realityio *v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v14;
  uint8_t __sb[16];
  const char *v16;
  const char *v17;
  _QWORD v18[4];
  int v19;
  const char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::ios_base v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = *(NSObject **)(realityio::logObjects(this) + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__sb = 134217984;
    *(_QWORD *)&__sb[4] = a3;
    _os_log_debug_impl(&dword_22FF26000, v5, OS_LOG_TYPE_DEBUG, "Received message of size %zu", __sb, 0xCu);
  }
  v24.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB898] + 16);
  std::streambuf::basic_streambuf();
  v19 = 12;
  v20 = a2;
  v21 = a3;
  v17 = a2;
  v18[0] = &a2[a3];
  v16 = a2;
  *(_QWORD *)__sb = &off_24FDFCBC0;
  v23 = 0;
  v24.__vftable = (std::ios_base_vtbl *)&unk_24FDFCCE8;
  v22 = &unk_24FDFCCC0;
  std::ios_base::init(&v24, __sb);
  v25 = 0;
  v26 = -1;
  *(_QWORD *)__sb = &off_24FDFCBC0;
  v22 = &unk_24FDFCC48;
  v24.__vftable = (std::ios_base_vtbl *)&unk_24FDFCC70;
  v6 = (realityio *)std::istream::read();
  if ((*((_BYTE *)v18 + *(_QWORD *)(*(_QWORD *)__sb - 24)) & 5) != 0)
  {
    v7 = *(NSObject **)(realityio::logObjects(v6) + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v8 = "Failed to read version";
LABEL_14:
      _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, v8, buf, 2u);
    }
  }
  else
  {
    v9 = *(NSObject **)(realityio::logObjects(v6) + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v14 = 0;
      _os_log_debug_impl(&dword_22FF26000, v9, OS_LOG_TYPE_DEBUG, "Version %llu", buf, 0xCu);
    }
    v10 = (realityio *)std::istream::read();
    if ((*((_BYTE *)&v24.__precision_ + *(v22 - 3)) & 5) == 0)
    {
      v11 = 1;
      goto LABEL_11;
    }
    v7 = *(NSObject **)(realityio::logObjects(v10) + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v8 = "Failed to read";
      goto LABEL_14;
    }
  }
  v11 = 0;
LABEL_11:
  boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream((uint64_t)__sb);
  return v11;
}

void sub_2301BE20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  boost::optional_detail::optional_base<realityio::replication::PopChildOperation_TfToken>::~optional_base((uint64_t)va);
  boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(uint64_t a1)
{
  std::istream::~istream();
  std::streambuf::~streambuf();
  MEMORY[0x2348B4DA4](a1 + 104);
  return a1;
}

uint64_t realityio::replication::LayerStateDelegate::_IsDirty(realityio::replication::LayerStateDelegate *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t realityio::replication::LayerStateDelegate::_MarkCurrentStateAsClean(uint64_t this)
{
  *(_BYTE *)(this + 40) = 0;
  return this;
}

uint64_t realityio::replication::LayerStateDelegate::_MarkCurrentStateAsDirty(uint64_t this)
{
  *(_BYTE *)(this + 40) = 1;
  return this;
}

uint64_t realityio::replication::LayerStateDelegate::_OnSetField(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD v18[6];
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  void *__p;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(this + 40) = 1;
  if (*(_BYTE *)(this + 48))
  {
    v7 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v29, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v29 + 1, (_DWORD *)a2 + 1);
    v30 = *(_QWORD *)a3;
    if ((v30 & 7) != 0)
    {
      v8 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 2, v8));
      if ((v9 & 1) == 0)
        v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v31, a4);
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v18);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::SetFieldOperation::Serialize(&v29, (pxrInternal__aapl__pxrReserved__::TfToken *)v18);
    if ((v22 & 0x10) != 0)
    {
      v12 = v25;
      v13 = v20;
      if (v25 < v20)
      {
        v25 = v20;
        v12 = v20;
      }
      v10 = __p;
      v11 = v24;
      v14 = v12 - v19;
      if (v24 - (_BYTE *)__p > v12 - v19)
      {
        v11 = (char *)__p + v14;
        v24 = (char *)__p + v14;
        v13 = v19 + (int)v20 - (int)v19;
        v20 = v13;
        v21 = v12;
      }
      if (v12 < v13)
      {
        v25 = v13;
        v14 = v13 - v19;
      }
      if (v11 - (_BYTE *)__p > v14)
      {
        v11 = (char *)__p + v14;
        v24 = (char *)__p + v14;
        v20 = v19 + (int)v13 - (int)v19;
        v21 = v19 + v14;
      }
    }
    else
    {
      v10 = __p;
      v11 = v24;
    }
    v15 = *(_QWORD *)(v7 + 80);
    v27 = v11 - v10;
    v28 = v10;
    if (!v15)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE **, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v28, &v27);
    v18[1] = &off_24FDFCEE8;
    if (__p)
    {
      v24 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2348B4DA4](&v26);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v31);
    if ((v30 & 7) != 0)
    {
      v16 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  }
  return this;
}

void sub_2301BE5E8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void realityio::replication::LayerStateDelegate::_OnSetField(uint64_t a1, uint64_t a2, uint64_t a3, void (***a4)(_QWORD, _BYTE *))
{
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  (**a4)(a4, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 48))(a1, a2, a3, v7);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
}

void sub_2301BE6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::_OnSetFieldDictValueByKey(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _BYTE v24[8];
  uint64_t (**v25)();
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  void *__p;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v39[2] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(this + 40) = 1;
  if (*(_BYTE *)(this + 48))
  {
    v9 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v36, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v36 + 1, (_DWORD *)a2 + 1);
    v37 = *(_QWORD *)a3;
    if ((v37 & 7) != 0)
    {
      v10 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 2, v10));
      if ((v11 & 1) == 0)
        v37 &= 0xFFFFFFFFFFFFFFF8;
    }
    v38 = *(_QWORD *)a4;
    if ((v38 & 7) != 0)
    {
      v12 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v38 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v39, a5);
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v24);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::SetFieldDictValueByKeyOperation::Serialize(&v36, (pxrInternal__aapl__pxrReserved__::TfToken *)v24);
    if ((v29 & 0x10) != 0)
    {
      v16 = v32;
      v17 = v27;
      if (v32 < v27)
      {
        v32 = v27;
        v16 = v27;
      }
      v14 = __p;
      v15 = v31;
      v18 = v16 - v26;
      if (v31 - (_BYTE *)__p > v16 - v26)
      {
        v15 = (char *)__p + v18;
        v31 = (char *)__p + v18;
        v17 = v26 + (int)v27 - (int)v26;
        v27 = v17;
        v28 = v16;
      }
      if (v16 < v17)
      {
        v32 = v17;
        v18 = v17 - v26;
      }
      if (v15 - (_BYTE *)__p > v18)
      {
        v15 = (char *)__p + v18;
        v31 = (char *)__p + v18;
        v27 = v26 + (int)v17 - (int)v26;
        v28 = v26 + v18;
      }
    }
    else
    {
      v14 = __p;
      v15 = v31;
    }
    v19 = *(_QWORD *)(v9 + 80);
    v34 = v15 - v14;
    v35 = v14;
    if (!v19)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE **, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v35, &v34);
    v25 = &off_24FDFCEE8;
    if (__p)
    {
      v31 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2348B4DA4](&v33);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v39);
    if ((v38 & 7) != 0)
    {
      v20 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((v37 & 7) != 0)
    {
      v22 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
  }
  return this;
}

void sub_2301BE9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void realityio::replication::LayerStateDelegate::_OnSetFieldDictValueByKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (***a5)(_QWORD, _BYTE *))
{
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  (**a5)(a5, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 64))(a1, a2, a3, a4, v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
}

void sub_2301BEAD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::_OnSetTimeSample(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[6];
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  void *__p;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  int v26;
  double v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(this + 40) = 1;
  if (*(_BYTE *)(this + 48))
  {
    v7 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v26, (_DWORD *)a2 + 1);
    v27 = a3;
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v28, a4);
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v14);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::SetTimeSampleOperation::Serialize((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__::TfToken *)v14);
    if ((v18 & 0x10) != 0)
    {
      v10 = v21;
      v11 = v16;
      if (v21 < v16)
      {
        v21 = v16;
        v10 = v16;
      }
      v8 = __p;
      v9 = v20;
      v12 = v10 - v15;
      if (v20 - (_BYTE *)__p > v10 - v15)
      {
        v9 = (char *)__p + v12;
        v20 = (char *)__p + v12;
        v11 = v15 + (int)v16 - (int)v15;
        v16 = v11;
        v17 = v10;
      }
      if (v10 < v11)
      {
        v21 = v11;
        v12 = v11 - v15;
      }
      if (v9 - (_BYTE *)__p > v12)
      {
        v9 = (char *)__p + v12;
        v20 = (char *)__p + v12;
        v16 = v15 + (int)v11 - (int)v15;
        v17 = v15 + v12;
      }
    }
    else
    {
      v8 = __p;
      v9 = v20;
    }
    v13 = *(_QWORD *)(v7 + 80);
    v23 = v9 - v8;
    v24 = v8;
    if (!v13)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE **, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v24, &v23);
    v14[1] = &off_24FDFCEE8;
    if (__p)
    {
      v20 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2348B4DA4](&v22);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  }
  return this;
}

void sub_2301BECF4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void realityio::replication::LayerStateDelegate::_OnSetTimeSample(uint64_t a1, uint64_t a2, void (***a3)(_QWORD, _BYTE *), double a4)
{
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  (**a3)(a3, v7);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, double))(*(_QWORD *)a1 + 80))(a1, a2, v7, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
}

void sub_2301BEDD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::_OnCreateSpec(uint64_t result, _DWORD *a2, int a3, char a4)
{
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD v15[2];
  char v16;
  _BYTE v17[8];
  uint64_t (**v18)();
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  void *__p;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;

  *(_BYTE *)(result + 40) = 1;
  if (*(_BYTE *)(result + 48))
  {
    v7 = result;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v15, a2 + 1);
    v15[1] = a3;
    v16 = a4;
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v17);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::CreateSpecOperation::Serialize((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14);
    if ((v22 & 0x10) != 0)
    {
      v10 = v25;
      v11 = v20;
      if (v25 < v20)
      {
        v25 = v20;
        v10 = v20;
      }
      v8 = __p;
      v9 = v24;
      v12 = v10 - v19;
      if (v24 - (_BYTE *)__p > v10 - v19)
      {
        v9 = (char *)__p + v12;
        v24 = (char *)__p + v12;
        v11 = v19 + (int)v20 - (int)v19;
        v20 = v11;
        v21 = v10;
      }
      if (v10 < v11)
      {
        v25 = v11;
        v12 = v11 - v19;
      }
      if (v9 - (_BYTE *)__p > v12)
      {
        v9 = (char *)__p + v12;
        v24 = (char *)__p + v12;
        v20 = v19 + (int)v11 - (int)v19;
        v21 = v19 + v12;
      }
    }
    else
    {
      v8 = __p;
      v9 = v24;
    }
    v13 = *(_QWORD *)(v7 + 80);
    v27 = v9 - v8;
    v28 = v8;
    if (!v13)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE **, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v28, &v27);
    v18 = &off_24FDFCEE8;
    if (__p)
    {
      v24 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2348B4DA4](&v26);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  }
  return result;
}

void sub_2301BEFAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::replication::CreateSpecOperation::~CreateSpecOperation((realityio::replication::CreateSpecOperation *)va);
  _Unwind_Resume(a1);
}

void realityio::replication::CreateSpecOperation::~CreateSpecOperation(realityio::replication::CreateSpecOperation *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::replication::LayerStateDelegate::_OnDeleteSpec(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char a3)
{
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  _BYTE v15[8];
  uint64_t (**v16)();
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  void *__p;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;

  *(_BYTE *)(this + 40) = 1;
  if (*(_BYTE *)(this + 48))
  {
    v5 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, (_DWORD *)a2 + 1);
    v14 = a3;
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v15);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::DeleteSpecOperation::Serialize((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
    if ((v20 & 0x10) != 0)
    {
      v8 = v23;
      v9 = v18;
      if (v23 < v18)
      {
        v23 = v18;
        v8 = v18;
      }
      v6 = __p;
      v7 = v22;
      v10 = v8 - v17;
      if (v22 - (_BYTE *)__p > v8 - v17)
      {
        v7 = (char *)__p + v10;
        v22 = (char *)__p + v10;
        v9 = v17 + (int)v18 - (int)v17;
        v18 = v9;
        v19 = v8;
      }
      if (v8 < v9)
      {
        v23 = v9;
        v10 = v9 - v17;
      }
      if (v7 - (_BYTE *)__p > v10)
      {
        v7 = (char *)__p + v10;
        v22 = (char *)__p + v10;
        v18 = v17 + (int)v9 - (int)v17;
        v19 = v17 + v10;
      }
    }
    else
    {
      v6 = __p;
      v7 = v22;
    }
    v11 = *(_QWORD *)(v5 + 80);
    v25 = v7 - v6;
    v26 = v6;
    if (!v11)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE **, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v26, &v25);
    v16 = &off_24FDFCEE8;
    if (__p)
    {
      v22 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2348B4DA4](&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  }
  return this;
}

void sub_2301BF1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  realityio::replication::DeleteSpecOperation::~DeleteSpecOperation((realityio::replication::DeleteSpecOperation *)&a11);
  _Unwind_Resume(a1);
}

void realityio::replication::DeleteSpecOperation::~DeleteSpecOperation(realityio::replication::DeleteSpecOperation *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t realityio::replication::LayerStateDelegate::_OnMoveSpec(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _BYTE v16[8];
  uint64_t (**v17)();
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  void *__p;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;

  *(_BYTE *)(this + 40) = 1;
  if (*(_BYTE *)(this + 48))
  {
    v5 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, (_DWORD *)a3 + 1);
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v16);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::MoveSpecOperation::Serialize((uint64_t)&v12);
    if ((v21 & 0x10) != 0)
    {
      v8 = v24;
      v9 = v19;
      if (v24 < v19)
      {
        v24 = v19;
        v8 = v19;
      }
      v6 = __p;
      v7 = v23;
      v10 = v8 - v18;
      if (v23 - (_BYTE *)__p > v8 - v18)
      {
        v7 = (char *)__p + v10;
        v23 = (char *)__p + v10;
        v9 = v18 + (int)v19 - (int)v18;
        v19 = v9;
        v20 = v8;
      }
      if (v8 < v9)
      {
        v24 = v9;
        v10 = v9 - v18;
      }
      if (v7 - (_BYTE *)__p > v10)
      {
        v7 = (char *)__p + v10;
        v23 = (char *)__p + v10;
        v19 = v18 + (int)v9 - (int)v18;
        v20 = v18 + v10;
      }
    }
    else
    {
      v6 = __p;
      v7 = v23;
    }
    v11 = *(_QWORD *)(v5 + 80);
    v26 = v7 - v6;
    v27 = v6;
    if (!v11)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE **, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v27, &v26);
    v17 = &off_24FDFCEE8;
    if (__p)
    {
      v23 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2348B4DA4](&v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  }
  return this;
}

void sub_2301BF3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::replication::MoveSpecOperation::~MoveSpecOperation((realityio::replication::MoveSpecOperation *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::_OnPushChild(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[8];
  uint64_t (**v29)();
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  void *__p;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;

  *(_BYTE *)(this + 40) = 1;
  if (*(_BYTE *)(this + 48))
  {
    v7 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, (_DWORD *)a2 + 1);
    v8 = *(_QWORD *)a3;
    v26 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    v11 = *(_QWORD *)a4;
    v27 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v28);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::PushChildOperation_TfToken::Serialize((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, (pxrInternal__aapl__pxrReserved__::TfToken *)v28);
    if ((v33 & 0x10) != 0)
    {
      v16 = v36;
      v17 = v31;
      if (v36 < v31)
      {
        v36 = v31;
        v16 = v31;
      }
      v14 = __p;
      v15 = v35;
      v18 = v16 - v30;
      if (v35 - (_BYTE *)__p > v16 - v30)
      {
        v15 = (char *)__p + v18;
        v35 = (char *)__p + v18;
        v17 = v30 + (int)v31 - (int)v30;
        v31 = v17;
        v32 = v16;
      }
      if (v16 < v17)
      {
        v36 = v17;
        v18 = v17 - v30;
      }
      if (v15 - (_BYTE *)__p > v18)
      {
        v15 = (char *)__p + v18;
        v35 = (char *)__p + v18;
        v31 = v30 + (int)v17 - (int)v30;
        v32 = v30 + v18;
      }
    }
    else
    {
      v14 = __p;
      v15 = v35;
    }
    v19 = *(_QWORD *)(v7 + 80);
    v38 = v15 - v14;
    v39 = v14;
    if (!v19)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE **, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v39, &v38);
    v29 = &off_24FDFCEE8;
    if (__p)
    {
      v35 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2348B4DA4](&v37);
    if ((v27 & 7) != 0)
    {
      v20 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((v26 & 7) != 0)
    {
      v22 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
  }
  return this;
}

void sub_2301BF680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  realityio::replication::PushChildOperation_TfToken::~PushChildOperation_TfToken((realityio::replication::PushChildOperation_TfToken *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::_OnPushChild(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  _BYTE v23[8];
  uint64_t (**v24)();
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  void *__p;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;

  *(_BYTE *)(this + 40) = 1;
  if (*(_BYTE *)(this + 48))
  {
    v7 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v19 + 1, (_DWORD *)a2 + 1);
    v8 = *(_QWORD *)a3;
    v20 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, (_DWORD *)a4 + 1);
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v23);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::PushChildOperation_SdfPath::Serialize(&v19, (pxrInternal__aapl__pxrReserved__::TfToken *)v23);
    if ((v28 & 0x10) != 0)
    {
      v13 = v31;
      v14 = v26;
      if (v31 < v26)
      {
        v31 = v26;
        v13 = v26;
      }
      v11 = __p;
      v12 = v30;
      v15 = v13 - v25;
      if (v30 - (_BYTE *)__p > v13 - v25)
      {
        v12 = (char *)__p + v15;
        v30 = (char *)__p + v15;
        v14 = v25 + (int)v26 - (int)v25;
        v26 = v14;
        v27 = v13;
      }
      if (v13 < v14)
      {
        v31 = v14;
        v15 = v14 - v25;
      }
      if (v12 - (_BYTE *)__p > v15)
      {
        v12 = (char *)__p + v15;
        v30 = (char *)__p + v15;
        v26 = v25 + (int)v14 - (int)v25;
        v27 = v25 + v15;
      }
    }
    else
    {
      v11 = __p;
      v12 = v30;
    }
    v16 = *(_QWORD *)(v7 + 80);
    v33 = v12 - v11;
    v34 = v11;
    if (!v16)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE **, uint64_t *))(*(_QWORD *)v16 + 48))(v16, &v34, &v33);
    v24 = &off_24FDFCEE8;
    if (__p)
    {
      v30 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2348B4DA4](&v32);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
    if ((v20 & 7) != 0)
    {
      v17 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  }
  return this;
}

void sub_2301BF8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  realityio::replication::PushChildOperation_SdfPath::~PushChildOperation_SdfPath((realityio::replication::PushChildOperation_SdfPath *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::_OnPopChild(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[8];
  uint64_t (**v29)();
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  void *__p;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;

  *(_BYTE *)(this + 40) = 1;
  if (*(_BYTE *)(this + 48))
  {
    v7 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, (_DWORD *)a2 + 1);
    v8 = *(_QWORD *)a3;
    v26 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    v11 = *(_QWORD *)a4;
    v27 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v28);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::PushChildOperation_TfToken::Serialize((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, (pxrInternal__aapl__pxrReserved__::TfToken *)v28);
    if ((v33 & 0x10) != 0)
    {
      v16 = v36;
      v17 = v31;
      if (v36 < v31)
      {
        v36 = v31;
        v16 = v31;
      }
      v14 = __p;
      v15 = v35;
      v18 = v16 - v30;
      if (v35 - (_BYTE *)__p > v16 - v30)
      {
        v15 = (char *)__p + v18;
        v35 = (char *)__p + v18;
        v17 = v30 + (int)v31 - (int)v30;
        v31 = v17;
        v32 = v16;
      }
      if (v16 < v17)
      {
        v36 = v17;
        v18 = v17 - v30;
      }
      if (v15 - (_BYTE *)__p > v18)
      {
        v15 = (char *)__p + v18;
        v35 = (char *)__p + v18;
        v31 = v30 + (int)v17 - (int)v30;
        v32 = v30 + v18;
      }
    }
    else
    {
      v14 = __p;
      v15 = v35;
    }
    v19 = *(_QWORD *)(v7 + 80);
    v38 = v15 - v14;
    v39 = v14;
    if (!v19)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE **, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v39, &v38);
    v29 = &off_24FDFCEE8;
    if (__p)
    {
      v35 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2348B4DA4](&v37);
    if ((v27 & 7) != 0)
    {
      v20 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((v26 & 7) != 0)
    {
      v22 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
  }
  return this;
}

void sub_2301BFB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  realityio::replication::PopChildOperation_TfToken::~PopChildOperation_TfToken((realityio::replication::PopChildOperation_TfToken *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::LayerStateDelegate::_OnPopChild(uint64_t this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  _BYTE v23[8];
  uint64_t (**v24)();
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  void *__p;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;

  *(_BYTE *)(this + 40) = 1;
  if (*(_BYTE *)(this + 48))
  {
    v7 = this;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v19 + 1, (_DWORD *)a2 + 1);
    v8 = *(_QWORD *)a3;
    v20 = v8;
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 2, v9));
      if ((v10 & 1) == 0)
        v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, (_DWORD *)a4 + 1);
    boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream((uint64_t)v23);
    std::ostream::write();
    std::ostream::write();
    realityio::replication::PushChildOperation_SdfPath::Serialize(&v19, (pxrInternal__aapl__pxrReserved__::TfToken *)v23);
    if ((v28 & 0x10) != 0)
    {
      v13 = v31;
      v14 = v26;
      if (v31 < v26)
      {
        v31 = v26;
        v13 = v26;
      }
      v11 = __p;
      v12 = v30;
      v15 = v13 - v25;
      if (v30 - (_BYTE *)__p > v13 - v25)
      {
        v12 = (char *)__p + v15;
        v30 = (char *)__p + v15;
        v14 = v25 + (int)v26 - (int)v25;
        v26 = v14;
        v27 = v13;
      }
      if (v13 < v14)
      {
        v31 = v14;
        v15 = v14 - v25;
      }
      if (v12 - (_BYTE *)__p > v15)
      {
        v12 = (char *)__p + v15;
        v30 = (char *)__p + v15;
        v26 = v25 + (int)v14 - (int)v25;
        v27 = v25 + v15;
      }
    }
    else
    {
      v11 = __p;
      v12 = v30;
    }
    v16 = *(_QWORD *)(v7 + 80);
    v33 = v12 - v11;
    v34 = v11;
    if (!v16)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE **, uint64_t *))(*(_QWORD *)v16 + 48))(v16, &v34, &v33);
    v24 = &off_24FDFCEE8;
    if (__p)
    {
      v30 = (char *)__p;
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2348B4DA4](&v32);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
    if ((v20 & 7) != 0)
    {
      v17 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  }
  return this;
}

void sub_2301BFDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  realityio::replication::PopChildOperation_SdfPath::~PopChildOperation_SdfPath((realityio::replication::PopChildOperation_SdfPath *)&a9);
  _Unwind_Resume(a1);
}

void realityio::replication::LayerStateDelegate::~LayerStateDelegate(realityio::replication::LayerStateDelegate *this)
{
  realityio::replication::LayerStateDelegate *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24FDFCAF8;
  if (*((_BYTE *)this + 48))
  {
    v2 = (realityio::replication::LayerStateDelegate *)*((_QWORD *)this + 10);
    if (v2 == (realityio::replication::LayerStateDelegate *)((char *)this + 56))
    {
      v3 = 4;
      v2 = (realityio::replication::LayerStateDelegate *)((char *)this + 56);
    }
    else
    {
      if (!v2)
      {
LABEL_7:
        *((_BYTE *)this + 48) = 0;
        goto LABEL_8;
      }
      v3 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
    goto LABEL_7;
  }
LABEL_8:
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::~SdfLayerStateDelegateBase(this);
}

void realityio::replication::LayerStateDelegate::~LayerStateDelegate(realityio::replication::LayerStateDelegate **this)
{
  realityio::replication::LayerStateDelegate *v2;
  uint64_t v3;

  *this = (realityio::replication::LayerStateDelegate *)&off_24FDFCAF8;
  if (!*((_BYTE *)this + 48))
  {
LABEL_8:
    pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::~SdfLayerStateDelegateBase((pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)this);
    JUMPOUT(0x2348B4E1CLL);
  }
  v2 = this[10];
  if (v2 == (realityio::replication::LayerStateDelegate *)(this + 7))
  {
    v3 = 4;
    v2 = (realityio::replication::LayerStateDelegate *)(this + 7);
  }
  else
  {
    if (!v2)
    {
LABEL_7:
      *((_BYTE *)this + 48) = 0;
      goto LABEL_8;
    }
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  goto LABEL_7;
}

_QWORD *boost::optional_detail::optional_base<realityio::replication::LayerStateDelegate::Sender>::emplace_assign<std::function<void ()(char const*,unsigned long)> const&>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    v4 = *(_QWORD **)(a1 + 32);
    if (v4 == (_QWORD *)(a1 + 8))
    {
      v5 = 4;
      v4 = (_QWORD *)(a1 + 8);
    }
    else
    {
      if (!v4)
      {
LABEL_7:
        *(_BYTE *)a1 = 0;
        goto LABEL_8;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_7;
  }
LABEL_8:
  result = (_QWORD *)a2[3];
  if (!result)
    goto LABEL_14;
  if (result == a2)
  {
    v9 = v8;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v8);
    result = v9;
    if (v9)
      goto LABEL_11;
LABEL_14:
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_21;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  v9 = result;
  if (!result)
    goto LABEL_14;
LABEL_11:
  if (result == v8)
  {
    *(_QWORD *)(a1 + 32) = a1 + 8;
    (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
    goto LABEL_20;
  }
  if (v9)
  {
    v7 = 5;
LABEL_20:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
LABEL_21:
  *(_BYTE *)a1 = 1;
  return result;
}

void sub_2301C004C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(uint64_t a1)
{
  boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(a1);
  JUMPOUT(0x2348B4E1CLL);
}

double boost::interprocess::basic_bufferbuf<char,std::char_traits<char>>::seekoff@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((a4 & 0x18) == 0x18)
  {
    if ((a3 & 0xFFFFFFFD) != 0)
      goto LABEL_18;
  }
  else if ((a4 & 8) == 0)
  {
    if ((a4 & 0x10) == 0)
      goto LABEL_18;
    v5 = 0;
    v6 = *(_DWORD *)(a1 + 64);
LABEL_11:
    if ((v6 & 0x10) == 0 || a2 && !*(_QWORD *)(a1 + 48))
      goto LABEL_18;
    v7 = 1;
    if (a3)
      goto LABEL_15;
    goto LABEL_21;
  }
  v6 = *(_DWORD *)(a1 + 64);
  if ((v6 & 8) == 0 || a2 && !*(_QWORD *)(a1 + 24))
    goto LABEL_18;
  v5 = 1;
  if ((a4 & 0x18) == 0x18)
    goto LABEL_11;
  v7 = 0;
  if (a3)
  {
LABEL_15:
    if (a3 == 1)
    {
      if (!v5)
      {
        v11 = *(_QWORD *)(a1 + 48) + a2 - *(_QWORD *)(a1 + 40);
        if (!v7)
        {
LABEL_35:
          v9 = v11;
          goto LABEL_19;
        }
        goto LABEL_32;
      }
      v12 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24) + a2 - v12;
      goto LABEL_26;
    }
    if (a3 == 2)
    {
      v8 = *(_QWORD *)(a1 + 80);
      goto LABEL_22;
    }
LABEL_18:
    v9 = -1;
    goto LABEL_19;
  }
LABEL_21:
  v8 = a3;
LABEL_22:
  v11 = v8 + a2;
  if (v5)
  {
    v12 = *(_QWORD *)(a1 + 16);
LABEL_26:
    v9 = -1;
    if (v11 < 0 || v11 > *(_QWORD *)(a1 + 32) - v12)
      goto LABEL_19;
    v13 = v12 + v11;
    v14 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 32) = v14;
  }
  if (!v7)
    goto LABEL_35;
LABEL_32:
  v9 = -1;
  if ((v11 & 0x8000000000000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 40);
    if (v11 <= *(_QWORD *)(a1 + 56) - v15)
    {
      v16 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v15 + (int)v11;
      *(_QWORD *)(a1 + 56) = v16;
      goto LABEL_35;
    }
  }
LABEL_19:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v9;
  return result;
}

uint64_t boost::interprocess::basic_bufferbuf<char,std::char_traits<char>>::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 128), 0, a3);
}

uint64_t boost::interprocess::basic_bufferbuf<char,std::char_traits<char>>::underflow(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 24);
  if (v1 == *(unsigned __int8 **)(a1 + 32))
    return 0xFFFFFFFFLL;
  else
    return *v1;
}

uint64_t boost::interprocess::basic_bufferbuf<char,std::char_traits<char>>::pbackfail(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 != *(_QWORD *)(a1 + 16))
  {
    if ((_DWORD)a2 == -1)
    {
      a2 = 0;
      v3 = (_BYTE *)(v2 - 1);
    }
    else
    {
      v4 = *(unsigned __int8 *)(v2 - 1);
      v3 = (_BYTE *)(v2 - 1);
      if (v4 != a2)
      {
        if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
        {
          *(_QWORD *)(a1 + 24) = v3;
          *v3 = a2;
          return a2;
        }
        return 0xFFFFFFFFLL;
      }
    }
    *(_QWORD *)(a1 + 24) = v3;
    return a2;
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::interprocess::basic_bufferbuf<char,std::char_traits<char>>::overflow(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;

  if ((*(_BYTE *)(a1 + 64) & 0x10) == 0)
    return 0xFFFFFFFFLL;
  if ((_DWORD)a2 == -1)
    return 0;
  v2 = *(_BYTE **)(a1 + 48);
  if (v2 == *(_BYTE **)(a1 + 56))
    return 0xFFFFFFFFLL;
  *v2 = a2;
  ++*(_QWORD *)(a1 + 48);
  return a2;
}

uint64_t `non-virtual thunk to'boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(uint64_t a1)
{
  return boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(a1 - 88);
}

void `non-virtual thunk to'boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(uint64_t a1)
{
  boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(a1 - 88);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t `virtual thunk to'boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(_QWORD *a1)
{
  return boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream(_QWORD *a1)
{
  boost::interprocess::basic_ibufferstream<char,std::char_traits<char>>::~basic_ibufferstream((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t boost::optional_detail::optional_base<realityio::replication::SetFieldOperation>::~optional_base(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
    v2 = *(_QWORD *)(a1 + 16);
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

uint64_t boost::optional_detail::optional_base<realityio::replication::SetFieldDictValueByKeyOperation>::~optional_base(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 32));
    v2 = *(_QWORD *)(a1 + 24);
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    v5 = *(_QWORD *)(a1 + 16);
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

_BYTE *boost::optional_detail::optional_base<realityio::replication::SetTimeSampleOperation>::~optional_base(_BYTE *a1)
{
  if (*a1)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 8));
    *a1 = 0;
  }
  return a1;
}

_BYTE *boost::optional_detail::optional_base<realityio::replication::CreateSpecOperation>::~optional_base(_BYTE *a1)
{
  if (*a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    *a1 = 0;
  }
  return a1;
}

_BYTE *boost::optional_detail::optional_base<realityio::replication::DeleteSpecOperation>::~optional_base(_BYTE *a1)
{
  if (*a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    *a1 = 0;
  }
  return a1;
}

_BYTE *boost::optional_detail::optional_base<realityio::replication::MoveSpecOperation>::~optional_base(_BYTE *a1)
{
  if (*a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 12));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::optional_detail::optional_base<realityio::replication::PushChildOperation_TfToken>::~optional_base(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    v5 = *(_QWORD *)(a1 + 16);
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

uint64_t boost::optional_detail::optional_base<realityio::replication::PushChildOperation_SdfPath>::~optional_base(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  if (*(_BYTE *)a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 24);
    v2 = *(_QWORD *)(a1 + 16);
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

uint64_t boost::optional_detail::optional_base<realityio::replication::PopChildOperation_TfToken>::~optional_base(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if ((v2 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    v5 = *(_QWORD *)(a1 + 16);
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

uint64_t boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::basic_ovectorstream(uint64_t a1)
{
  std::ios_base *v2;

  *(_QWORD *)(a1 + 112) = &unk_24FDFCE78;
  v2 = (std::ios_base *)(a1 + 112);
  *(_QWORD *)a1 = &unk_24FDFCE50;
  std::ios_base::init((std::ios_base *)(a1 + 112), 0);
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  std::streambuf::basic_streambuf();
  *(_DWORD *)(a1 + 72) = 20;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = &unk_24FDFCE08;
  *(_QWORD *)a1 = &off_24FDFCD60;
  *(_QWORD *)(a1 + 8) = &unk_24FDFCD80;
  *(_QWORD *)(a1 + 152) = a1 + 8;
  std::ios_base::clear(v2, 0);
  return a1;
}

void sub_2301C0744(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::~basic_vectorbuf(v2);
  std::ostream::~ostream();
  MEMORY[0x2348B4DA4](v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::~basic_ovectorstream(_QWORD *a1)
{
  void *v2;

  a1[1] = &off_24FDFCEE8;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2348B4DA4](a1 + 14);
  return a1;
}

uint64_t boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::~basic_vectorbuf(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FDFCEE8;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  return std::streambuf::~streambuf();
}

{
  void *v2;

  *a1 = &off_24FDFCEE8;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  return std::streambuf::~streambuf();
}

void boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::~basic_ovectorstream(_QWORD *a1)
{
  void *v2;

  a1[1] = &off_24FDFCEE8;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2348B4DA4](a1 + 14);
  JUMPOUT(0x2348B4E1CLL);
}

void `non-virtual thunk to'boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::~basic_ovectorstream(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FDFCEE8;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  JUMPOUT(0x2348B4DA4);
}

{
  void *v2;

  *a1 = &off_24FDFCEE8;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2348B4DA4](a1 + 13);
  JUMPOUT(0x2348B4E1CLL);
}

double boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::seekoff@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((a4 & 0x18) == 0 || a3 == 1 && (a4 & 0x18) == 0x18)
    goto LABEL_24;
  v5 = *(_DWORD *)(a1 + 64);
  if ((a4 & 8) != 0 && ((v5 & 8) == 0 || a2 && !*(_QWORD *)(a1 + 24)))
    goto LABEL_24;
  if ((a4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || a2 && !*(_QWORD *)(a1 + 48))
      goto LABEL_24;
  }
  else if ((v5 & 0x10) == 0)
  {
    v6 = (_QWORD *)(a1 + 72);
    v7 = *(_QWORD *)(a1 + 80);
    goto LABEL_21;
  }
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 48);
  if (v7 < v8)
  {
    *(_QWORD *)(a1 + 96) = v8;
    v7 = v8;
  }
  if ((v5 & 8) != 0 && *(_QWORD *)(a1 + 32) < v7)
    *(_QWORD *)(a1 + 32) = v7;
  v6 = (_QWORD *)(a1 + 40);
LABEL_21:
  v9 = v7 - *v6;
  if (a3)
  {
    if (a3 == 1)
    {
      if ((a4 & 8) != 0)
      {
        v14 = *(_QWORD *)(a1 + 16);
        v13 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        v14 = *(_QWORD *)(a1 + 40);
        v13 = *(_QWORD *)(a1 + 48);
      }
      v10 = v13 - v14;
    }
    else
    {
      v10 = v9;
      if (a3 != 2)
      {
LABEL_24:
        v11 = -1;
        goto LABEL_25;
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = -1;
  v15 = v10 + a2;
  if (v15 >= 0 && v15 <= v9 && ((a4 & 0x10) == 0 || (v5 & 1) == 0 || v15 == v9))
  {
    if ((a4 & 8) != 0)
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + v15;
    if ((a4 & 0x10) != 0)
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40) + (int)v15;
    v11 = v15;
  }
LABEL_25:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v11;
  return result;
}

uint64_t boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 128), 0, a3);
}

uint64_t boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::underflow(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(unsigned __int8 **)(a1 + 24);
  if (!v1)
    return 0xFFFFFFFFLL;
  if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 96);
    v4 = *(_QWORD *)(a1 + 48);
    if (v3 < v4)
    {
      *(_QWORD *)(a1 + 96) = v4;
      v3 = v4;
    }
    v2 = *(_QWORD *)(a1 + 32);
    if (v2 < v3)
    {
      *(_QWORD *)(a1 + 32) = v3;
      v2 = v3;
    }
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 32);
  }
  if ((unint64_t)v1 < v2)
    return *v1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::pbackfail(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 != *(_QWORD *)(a1 + 16))
  {
    if ((_DWORD)a2 == -1)
    {
      a2 = 0;
      v3 = (_BYTE *)(v2 - 1);
    }
    else
    {
      v4 = *(unsigned __int8 *)(v2 - 1);
      v3 = (_BYTE *)(v2 - 1);
      if (v4 != a2)
      {
        if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
        {
          *(_QWORD *)(a1 + 24) = v3;
          *v3 = a2;
          return a2;
        }
        return 0xFFFFFFFFLL;
      }
    }
    *(_QWORD *)(a1 + 24) = v3;
    return a2;
  }
  return 0xFFFFFFFFLL;
}

uint64_t boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::overflow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::vector<char> *v7;
  unint64_t v8;
  std::vector<char>::pointer v9;
  uint64_t v10;
  std::vector<char>::pointer begin;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  if ((*(_BYTE *)(a1 + 64) & 0x10) == 0)
    return 0xFFFFFFFFLL;
  v2 = a2;
  if ((_DWORD)a2 == -1)
    return 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48) - v4;
  if (*(_QWORD *)(a1 + 96) - v4 <= v5)
    v6 = v5 + 1;
  else
    v6 = *(_QWORD *)(a1 + 96) - v4;
  v7 = (std::vector<char> *)(a1 + 72);
  v9 = *(std::vector<char>::pointer *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  if ((unint64_t)v9 >= v8)
  {
    begin = v7->__begin_;
    v12 = v9 - v7->__begin_;
    v13 = v12 + 1;
    if (v12 + 1 < 0)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v14 = v8 - (_QWORD)begin;
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v17 = (char *)v16 + v15;
    *((_BYTE *)v16 + v12) = v2;
    v10 = (uint64_t)v16 + v12 + 1;
    if (v9 == begin)
    {
      v16 = (char *)v16 + v12;
    }
    else
    {
      v18 = &v9[~(unint64_t)begin];
      do
      {
        v19 = *--v9;
        (v18--)[(_QWORD)v16] = v19;
      }
      while (v9 != begin);
      v9 = v7->__begin_;
    }
    *(_QWORD *)(a1 + 72) = v16;
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v17;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = a2;
    v10 = (uint64_t)(v9 + 1);
  }
  *(_QWORD *)(a1 + 80) = v10;
  v20 = *(_QWORD *)(a1 + 72);
  v21 = *(_QWORD *)(a1 + 88) - v20;
  if (*(_QWORD *)(a1 + 88) != v10 && v21 >= v10 - v20)
  {
    std::vector<char>::__append(v7, *(_QWORD *)(a1 + 88) - v10);
    v20 = *(_QWORD *)(a1 + 72);
    v10 = *(_QWORD *)(a1 + 80);
  }
  else if (v21 < v10 - v20)
  {
    v10 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v10;
  }
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 96) = v20 + v6;
  if ((*(_BYTE *)(a1 + 64) & 8) != 0)
  {
    v22 = v20 + *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(a1 + 24) = v22;
    *(_QWORD *)(a1 + 32) = v20 + v6;
  }
  *(_QWORD *)(a1 + 48) = v20 + (int)v5 + 1;
  return v2;
}

void `virtual thunk to'boost::interprocess::basic_ovectorstream<std::vector<char>,std::char_traits<char>>::~basic_ovectorstream(_QWORD *a1)
{
  _QWORD *v1;
  void *v2;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1[1] = &off_24FDFCEE8;
  v2 = (void *)v1[10];
  if (v2)
  {
    v1[11] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  JUMPOUT(0x2348B4DA4);
}

{
  _QWORD *v1;
  void *v2;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1[1] = &off_24FDFCEE8;
  v2 = (void *)v1[10];
  if (v2)
  {
    v1[11] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2348B4DA4](v1 + 14);
  JUMPOUT(0x2348B4E1CLL);
}

void boost::interprocess::basic_vectorbuf<std::vector<char>,std::char_traits<char>>::~basic_vectorbuf(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FDFCEE8;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t RIOBuilderOutputsGetTypeID()
{
  if (RIOBuilderOutputsGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderOutputsGetTypeID::onceToken, &__block_literal_global_36);
  return RIOBuilderOutputsGetTypeID::typeID;
}

BOOL RIOBuilderOutputsHasValueWithName(uint64_t a1, __CFString *this)
{
  _BOOL8 v2;
  std::mutex *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::mutex *v8;
  unint64_t *v9;
  unint64_t v10;
  std::string v12;
  _BYTE v13[8];
  std::string __p;

  v2 = 0;
  if (a1 && this)
  {
    realityio::CFStringCopyUTF8String(this, (uint64_t)v13);
    if (v13[0])
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v12 = __p;
      v4 = *(std::mutex **)(a1 + 16);
      v5 = *(std::__shared_weak_count **)(a1 + 24);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v8 = v4 + 1;
      std::mutex::lock(v4 + 1);
      v2 = &v4->__m_.__opaque[40] != (char *)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v4->__m_.__opaque[32], (const void **)&v12.__r_.__value_.__l.__data_);
      std::mutex::unlock(v8);
      if (v5)
      {
        v9 = (unint64_t *)&v5->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      if (v13[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_2301C1004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  operator delete(v19);
  _Unwind_Resume(a1);
}

std::mutex *RIOBuilderOutputsGetValueWithName(uint64_t a1, __CFString *this)
{
  std::mutex *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v18;
  std::string v19;
  _BYTE v20[8];
  std::string __p;
  uint64_t (***v22)(_QWORD);
  std::__shared_weak_count *v23;

  v2 = 0;
  if (!a1 || !this)
    return v2;
  realityio::CFStringCopyUTF8String(this, (uint64_t)v20);
  if (!v20[0])
    return 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v19 = __p;
  v2 = *(std::mutex **)(a1 + 16);
  v4 = *(std::__shared_weak_count **)(a1 + 24);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = v2 + 1;
  std::mutex::lock(v2 + 1);
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v2->__m_.__opaque[32], (const void **)&v19.__r_.__value_.__l.__data_);
  if (&v2->__m_.__opaque[40] != (char *)v8)
  {
    v9 = *(uint64_t (****)(_QWORD))(v8 + 56);
    v10 = *(std::__shared_weak_count **)(v8 + 64);
    v22 = v9;
    v23 = v10;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if (v9)
    {
      v2 = (std::mutex *)(**v9)(v9);
      if (!v10)
        goto LABEL_23;
    }
    else if (!v10)
    {
      goto LABEL_23;
    }
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_23:
    if (v9)
      goto LABEL_25;
  }
  v2 = 0;
LABEL_25:
  std::mutex::unlock(v7);
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v20[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v2;
}

void sub_2301C120C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19)
{
  std::mutex *v19;
  int v20;
  uint64_t v21;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v21 - 64);
  std::mutex::unlock(v19);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  if (v20 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

BOOL RIOBuilderOutputsStoreValueWithName(uint64_t a1, uint64_t a2, __CFString *this)
{
  _BOOL8 v3;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v18;
  _BYTE v19[8];
  std::string __p;
  __int128 v21;
  std::string *v22;

  v3 = 0;
  if (a1)
  {
    if (this)
    {
      realityio::CFStringCopyUTF8String(this, (uint64_t)v19);
      v3 = v19[0] != 0;
      if (v19[0])
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v18 = __p;
        v7 = *(_QWORD *)(a1 + 16);
        v6 = *(std::__shared_weak_count **)(a1 + 24);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        std::mutex::lock((std::mutex *)(v7 + 64));
        v10 = operator new(0x28uLL);
        v10[1] = 0;
        v10[2] = 0;
        *v10 = &off_24FDF67A8;
        v10[3] = &off_24FDF67F8;
        v10[4] = a2;
        *(_QWORD *)&v21 = v10 + 3;
        *((_QWORD *)&v21 + 1) = v10;
        v22 = &v18;
        v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v7 + 40), (const void **)&v18.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v22);
        std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v11 + 7), &v21);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
        if (*((_QWORD *)&v21 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v7, (unsigned __int8 *)&v18, (uint64_t)&v18);
        std::mutex::unlock((std::mutex *)(v7 + 64));
        if (v6)
        {
          v15 = (unint64_t *)&v6->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        if (v19[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  return v3;
}

void sub_2301C1434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a18)
  {
    if (a24 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL RIOBuilderOutputsRemoveValueWithName(uint64_t a1, __CFString *this)
{
  _BOOL8 v2;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::string v11;
  _BYTE v12[8];
  std::string __p;

  v2 = 0;
  if (a1)
  {
    if (this)
    {
      realityio::CFStringCopyUTF8String(this, (uint64_t)v12);
      v2 = v12[0] != 0;
      if (v12[0])
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v11 = __p;
        v5 = *(_QWORD *)(a1 + 16);
        v4 = *(std::__shared_weak_count **)(a1 + 24);
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        std::mutex::lock((std::mutex *)(v5 + 64));
        if (v5 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v5 + 40, (const void **)&v11.__r_.__value_.__l.__data_))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v5 + 40), (const void **)&v11.__r_.__value_.__l.__data_);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v5, (unsigned __int8 *)&v11);
        std::mutex::unlock((std::mutex *)(v5 + 64));
        if (v4)
        {
          v8 = (unint64_t *)&v4->__shared_owners_;
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v11.__r_.__value_.__l.__data_);
        if (v12[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  return v2;
}

void sub_2301C15F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  operator delete(v19);
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderOutputsCopyAllKeys(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  const char *v8;
  CFStringRef v9;
  unint64_t *v10;
  unint64_t v11;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = (uint64_t *)(v3 + 16);
    while (1)
    {
      v7 = (uint64_t *)*v7;
      if (!v7)
        break;
      if (*((char *)v7 + 39) >= 0)
        v8 = (const char *)(v7 + 2);
      else
        v8 = (const char *)v7[2];
      v9 = CFStringCreateWithCString(0, v8, 0x8000100u);
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
    }
    if (v4)
    {
      v10 = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return Mutable;
}

void sub_2301C1730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderOutputsGetSwiftObject(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2)
    return *(_QWORD *)(v1 + 128);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  v5 = *(_QWORD *)(v1 + 128);
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v5;
}

void RIOBuilderOutputsSetSwiftObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(std::__shared_weak_count **)(a1 + 24);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
        *(_QWORD *)(v2 + 128) = a2;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      else
      {
        *(_QWORD *)(v2 + 128) = a2;
      }
    }
  }
}

uint64_t _RIOBuilderOutputsCFFinalize(const void *a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
}

BOOL _RIOBuilderOutputsCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderOutputsCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderOutputsCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderOutputs %p>"), a1);
}

CFStringRef _RIOBuilderOutputsCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderOutputs %p>"), a1);
}

void RIO_MTLX::getEnviron(const char *a1@<X0>, std::string *a2@<X8>)
{
  char *v3;
  uint64_t *v4;
  __int128 v5;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v3 = getenv(a1);
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, v3);
  }
  else
  {
    v4 = RIO_MTLX::EMPTY_STRING(0);
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v4, v4[1]);
    }
    else
    {
      v5 = *(_OWORD *)v4;
      a2->__r_.__value_.__r.__words[2] = v4[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
    }
  }
}

uint64_t realityio::PhysicsColliderAssetBuilder::kOutputName(realityio::PhysicsColliderAssetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "physics_collider_asset");
    realityio::PhysicsColliderAssetBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::PhysicsColliderAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_2301C19F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::PhysicsColliderAssetBuilder *realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(realityio::PhysicsColliderAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "PhysicsColliderAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kPhysicsColliderAssetBuilderIdentifier);
  realityio::generatePhysicsColliderDirtyStageSubscription(&v12);
  v20[0] = &off_24FDFD060;
  v21 = v20;
  v18[0] = &off_24FDFD0E0;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDFCFE8;
  *((_QWORD *)this + 35) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::PhysicsColliderAssetBuilder *)((char *)this + 288));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_2301C1BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  realityio::DynamicBuilder *v27;
  _QWORD *v28;
  _QWORD *v29;

  v29 = v28;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v29);
  realityio::DynamicBuilder::~DynamicBuilder(v27);
  _Unwind_Resume(a1);
}

uint64_t realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v18 = a3;
  v19 = a2;
  v17 = a7;
  v16 = 0;
  v11 = *(_QWORD *)(a2 + 48);
  v12 = operator new(0x48uLL);
  *v12 = &off_24FDFD160;
  v12[1] = &v16;
  v12[2] = a1;
  v12[3] = &v19;
  v12[4] = &v18;
  v12[5] = a4;
  v12[6] = a5;
  v12[7] = a6;
  v12[8] = &v17;
  v21 = v12;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 16))(v11, v20);
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
    goto LABEL_5;
  }
  if (v21)
  {
    v14 = 5;
LABEL_5:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return v16;
}

void sub_2301C1DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t realityio::PhysicsColliderAssetBuilder::run(realityio::PhysicsColliderAssetBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  realityio *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t ServiceLocator;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *Data;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  char *v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  _OWORD *v51;
  unint64_t v52;
  __int128 v53;
  char *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  realityio *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t Text;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  realityio::PhysicsColliderAssetBuilder *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  __int128 *v79;
  unint64_t *v80;
  unint64_t v81;
  char *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t result;
  realityio::PhysicsColliderAssetBuilder *v88;
  unint64_t v89;
  realityio::Inputs *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint8_t buf[8];
  uint64_t v108;
  _BYTE v109[4];
  _BYTE v110[4];
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  __int128 v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  v6 = (realityio *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  v7 = *(id *)(realityio::logObjects(v6) + 24);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22FF26000, v7, OS_LOG_TYPE_INFO, "Creating and saving physics collider reference", buf, 2u);
  }

  *(_QWORD *)buf = 0;
  v8 = *((_QWORD *)this + 35);
  if (v8)
  {
    *((_QWORD *)this + 35) = 0;
    *(_QWORD *)buf = v8;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(buf);
  ServiceLocator = REEngineGetServiceLocator();
  v91 = MEMORY[0x2348B1264](ServiceLocator);
  v112 = 0;
  v113 = 0;
  v114 = 0;
  *(_DWORD *)buf = 4;
  v108 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v111 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v106 = 0;
  v104 = MEMORY[0x24BEE9DD0] + 16;
  if (v105
    && (*(_BYTE *)(v105 + 57) & 8) == 0
    && (*(unsigned int (**)(uint64_t *))(MEMORY[0x24BEE9DD0] + 48))(&v104))
  {
    pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::GetPreliminaryPhysicsColliderConvexShapeRel((pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *)&v104);
    *(_DWORD *)buf = v120;
    v10 = *((_QWORD *)&v120 + 1);
    *((_QWORD *)&v120 + 1) = 0;
    v11 = v108;
    v108 = v10;
    if (v11)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v109, &v121);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v110);
    if ((v111 & 7) != 0)
    {
      v12 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
  }
  else
  {
    Data = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(MEMORY[0x24BEE83A0]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v115, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)Data + 24));
    *(_DWORD *)buf = v120;
    v15 = *((_QWORD *)&v120 + 1);
    *((_QWORD *)&v120 + 1) = 0;
    v16 = v108;
    v108 = v15;
    if (v16)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v109, &v121);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v110);
    if ((v111 & 7) != 0)
    {
      v17 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v111 = v123;
  v123 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v121);
  if (*((_QWORD *)&v120 + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v120 + 1));
  v88 = this;
  v90 = a2;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)buf))
  {
    v93 = 0uLL;
    *(_QWORD *)&v94 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
    v19 = 0;
    v20 = 0;
    v89 = 0;
    *(_QWORD *)&v120 = &v93;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v89 = 0;
  }
  LODWORD(v120) = v115;
  *((_QWORD *)&v120 + 1) = v116;
  if (v116)
  {
    v21 = (unint64_t *)(v116 + 48);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v121, &v117);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v122, &v118);
  v123 = v119;
  if ((v119 & 7) != 0)
  {
    v23 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 2, v23));
    if ((v24 & 1) == 0)
      v123 &= 0xFFFFFFFFFFFFFFF8;
  }
  v25 = MEMORY[0x24BEE9D70];
  v26 = *(uint64_t (**)(uint64_t *))(MEMORY[0x24BEE9D70] + 48);
  while ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v120) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v120);
    v27 = v99;
    if (v100 != v99)
    {
      v28 = 0;
      do
      {
        MEMORY[0x2348B274C](&v101, "PhysicsCollisionAPI");
        v29 = *(_QWORD *)(v27 + 8 * v28);
        v30 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
        if ((v101 & 7) != 0)
        {
          do
            v31 = __ldxr(v30);
          while (__stlxr(v31 - 2, v30));
        }
        if ((unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8) == v30)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v97 = v25 + 16;
          if (v98 && (*(_BYTE *)(v98 + 57) & 8) == 0 && (v26(&v97) & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetPurposeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&v97);
            v96 = 0;
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
            v32 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
            if (!v32)
              v32 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
            v33 = v96;
            if ((v96 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v32 + 49) & 0xFFFFFFFFFFFFFFF8))
            {
              v95 = 0;
              if (realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset((uint64_t)this, (uint64_t)v90, v91, (uint64_t)&v120, (uint64_t)&v95, (uint64_t)&v93, 1))
              {
                v34 = v95;
                v35 = v113;
                if (v113 >= v114)
                {
                  v37 = (v113 - v112) >> 3;
                  if ((unint64_t)(v37 + 1) >> 61)
                    std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
                  v38 = (v114 - v112) >> 2;
                  if (v38 <= v37 + 1)
                    v38 = v37 + 1;
                  if ((unint64_t)(v114 - v112) >= 0x7FFFFFFFFFFFFFF8)
                    v39 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v39 = v38;
                  if (v39)
                    v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v114, v39);
                  else
                    v40 = 0;
                  v41 = &v40[8 * v37];
                  *(_QWORD *)v41 = v34;
                  v36 = v41 + 8;
                  v43 = v112;
                  v42 = v113;
                  if (v113 == v112)
                  {
                    this = v88;
                  }
                  else
                  {
                    this = v88;
                    do
                    {
                      v44 = *((_QWORD *)v42 - 1);
                      v42 -= 8;
                      *((_QWORD *)v41 - 1) = v44;
                      v41 -= 8;
                    }
                    while (v42 != v43);
                    v42 = v112;
                  }
                  v112 = v41;
                  v113 = v36;
                  v114 = &v40[8 * v39];
                  if (v42)
                    operator delete(v42);
                }
                else
                {
                  *(_QWORD *)v113 = v95;
                  v36 = v35 + 8;
                  this = v88;
                }
                v113 = v36;
                RERetain();
                if ((unint64_t)v20 >= v89)
                {
                  v46 = (v20 - v19) >> 5;
                  v47 = v46 + 1;
                  if ((unint64_t)(v46 + 1) >> 59)
                    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v89 - (_QWORD)v19) >> 4 > v47)
                    v47 = (uint64_t)(v89 - (_QWORD)v19) >> 4;
                  if (v89 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
                    v48 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v48 = v47;
                  if (v48)
                    v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<REPoseF>>(v48);
                  else
                    v49 = 0;
                  v50 = v94;
                  v51 = (_OWORD *)(v48 + 32 * v46);
                  *v51 = v93;
                  v51[1] = v50;
                  if (v20 == v19)
                  {
                    v54 = (char *)(v48 + 32 * v46);
                  }
                  else
                  {
                    v52 = v48 + 32 * v46;
                    do
                    {
                      v53 = *((_OWORD *)v20 - 1);
                      v54 = (char *)(v52 - 32);
                      *(_OWORD *)(v52 - 32) = *((_OWORD *)v20 - 2);
                      *(_OWORD *)(v52 - 16) = v53;
                      v20 -= 32;
                      v52 -= 32;
                    }
                    while (v20 != v19);
                  }
                  v89 = v48 + 32 * v49;
                  v20 = (char *)(v51 + 2);
                  if (v19)
                    operator delete(v19);
                  v19 = v54;
                }
                else
                {
                  v45 = v94;
                  *(_OWORD *)v20 = v93;
                  *((_OWORD *)v20 + 1) = v45;
                  v20 += 32;
                }
              }
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v95);
              v33 = v96;
            }
            if ((v33 & 7) != 0)
            {
              v55 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
              do
                v56 = __ldxr(v55);
              while (__stlxr(v56 - 2, v55));
            }
            if ((BYTE8(v103) & 7) != 0)
            {
              v57 = (unsigned int *)(*((_QWORD *)&v103 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v58 = __ldxr(v57);
              while (__stlxr(v58 - 2, v57));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v103);
            if (v102)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v102);
          }
          MEMORY[0x2348B205C](&v97);
        }
        ++v28;
        v27 = v99;
      }
      while (v28 < (v100 - v99) >> 3);
    }
    v101 = (unint64_t)&v99;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetNextSibling((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v120);
    LODWORD(v120) = v101;
    v59 = v102;
    v102 = 0;
    v60 = *((_QWORD *)&v120 + 1);
    *((_QWORD *)&v120 + 1) = v59;
    if (v60)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v121, (int *)&v103);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v122);
    if ((v123 & 7) != 0)
    {
      v61 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
      do
        v62 = __ldxr(v61);
      while (__stlxr(v62 - 2, v61));
    }
    v123 = *((_QWORD *)&v103 + 1);
    *((_QWORD *)&v103 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v103);
    if (v102)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v102);
  }
  if ((v123 & 7) != 0)
  {
    v63 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v121);
  v65 = (realityio *)*((_QWORD *)&v120 + 1);
  if (*((_QWORD *)&v120 + 1))
    v65 = (realityio *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v120 + 1));
  if (v112 != v113 && v19 != v20 && (v113 - v112) >> 3 == (v20 - v19) >> 5)
  {
    if (v113 - v112 == 8 && (RECollisionShapeAssetGetType() & 0xFFFFFFFE) == 6)
    {
      *(_QWORD *)&v120 = *(_QWORD *)v112;
      if ((_QWORD)v120)
      {
        RERetain();
        v66 = v120;
      }
      else
      {
        v66 = 0;
      }
      v71 = *((_QWORD *)this + 35);
      if (v71 != v66)
      {
        *((_QWORD *)this + 35) = v66;
        *(_QWORD *)&v120 = v71;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v120);
    }
    if (*((_QWORD *)this + 35))
    {
      v92 = *((_QWORD *)this + 35);
    }
    else
    {
      *(_QWORD *)&v120 = REAssetManagerCollisionShapeAssetCreateCompound();
      if ((_QWORD)v120)
      {
        RERetain();
        v72 = v120;
      }
      else
      {
        v72 = 0;
      }
      v73 = *((_QWORD *)this + 35);
      if (v73 != v72)
      {
        *((_QWORD *)this + 35) = v72;
        *(_QWORD *)&v120 = v73;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v120);
      RERelease();
      v92 = *((_QWORD *)this + 35);
      if (!v92)
      {
LABEL_135:
        realityio::Builder::addAsset((uint64_t *)this, &v92, 0);
        v74 = (realityio::PhysicsColliderAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v92);
        v76 = *((_QWORD *)this + 2);
        v75 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
        *(_QWORD *)&v120 = v76;
        *((_QWORD *)&v120 + 1) = v75;
        if (v75)
        {
          p_shared_owners = (unint64_t *)&v75->__shared_owners_;
          do
            v78 = __ldxr(p_shared_owners);
          while (__stxr(v78 + 1, p_shared_owners));
        }
        v79 = (__int128 *)realityio::PhysicsColliderAssetBuilder::kOutputName(v74);
        v101 = *((_QWORD *)this + 35);
        realityio::Outputs::storeValue<REAsset *>(v76, v79, &v101);
        if (v75)
        {
          v80 = (unint64_t *)&v75->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v69 = v112;
        v82 = v113;
        if (v112 != v113)
        {
          do
          {
            if (*(_QWORD *)v69)
              RERelease();
            v69 += 8;
          }
          while (v69 != v82);
LABEL_147:
          v69 = v112;
          goto LABEL_148;
        }
        goto LABEL_148;
      }
    }
    RERetain();
    goto LABEL_135;
  }
  v67 = *(id *)(realityio::logObjects(v65) + 24);
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v115, &v101);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v101);
    LODWORD(v120) = 136315138;
    *(_QWORD *)((char *)&v120 + 4) = Text;
    _os_log_impl(&dword_22FF26000, v67, OS_LOG_TYPE_DEFAULT, "No physics collider asset was created for %s", (uint8_t *)&v120, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
  }

  v69 = v112;
  v70 = v113;
  if (v112 != v113)
  {
    do
    {
      if (*(_QWORD *)v69)
        RERelease();
      v69 += 8;
    }
    while (v69 != v70);
    goto LABEL_147;
  }
LABEL_148:
  v113 = v69;
  MEMORY[0x2348B25D8](&v104);
  if ((v111 & 7) != 0)
  {
    v83 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
    do
      v84 = __ldxr(v83);
    while (__stlxr(v84 - 2, v83));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v109);
  if (v108)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v108);
  if (v19)
    operator delete(v19);
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  if ((v119 & 7) != 0)
  {
    v85 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v86 = __ldxr(v85);
    while (__stlxr(v86 - 2, v85));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v117);
  result = v116;
  if (v116)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v116);
  return result;
}

void sub_2301C2B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  uint64_t v38;
  void *v40;

  MEMORY[0x2348B25D8](&a37);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)(v38 - 224));
  if (v37)
    operator delete(v37);
  v40 = *(void **)(v38 - 184);
  if (v40)
  {
    *(_QWORD *)(v38 - 176) = v40;
    operator delete(v40);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v38 - 160));
  _Unwind_Resume(a1);
}

void realityio::PhysicsColliderAssetBuilder::clear(realityio::PhysicsColliderAssetBuilder *this, realityio::Inputs *a2)
{
  char v2;
  std::__shared_weak_count *v4;
  std::mutex *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void **v8;
  realityio::PhysicsColliderAssetBuilder *v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  const void **v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::string v21;
  _QWORD v22[3];
  std::string __p;

  v5 = (std::mutex *)*((_QWORD *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (const void **)realityio::PhysicsColliderAssetBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<REAsset *>(v5, v8, (uint64_t)v22);
  v10 = LOBYTE(v22[0]);
  if (!LOBYTE(v22[0]))
  {
    v9 = (realityio::PhysicsColliderAssetBuilder *)&v21;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v5 = (std::mutex *)v21.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      if (!LOBYTE(v22[0]) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v21 = __p;
      v5 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (!v4)
    goto LABEL_14;
  v11 = (unint64_t *)&v4->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v10)
      goto LABEL_15;
  }
  else
  {
LABEL_14:
    if (v10)
    {
LABEL_15:
      v14 = *((_QWORD *)this + 2);
      v13 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
      v22[0] = v14;
      v22[1] = v13;
      if (v13)
      {
        v15 = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = (const void **)realityio::PhysicsColliderAssetBuilder::kOutputName(v9);
      std::mutex::lock((std::mutex *)(v14 + 64));
      if (v14 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v14 + 40, v17))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v14 + 40), v17);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v14, (unsigned __int8 *)v17);
      std::mutex::unlock((std::mutex *)(v14 + 64));
      if (v13)
      {
        v18 = (unint64_t *)&v13->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v22[0] = 0;
      v20 = *((_QWORD *)this + 35);
      if (v20)
      {
        *((_QWORD *)this + 35) = 0;
        v22[0] = v20;
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(v22);
      return;
    }
  }
  if (v2 < 0)
    operator delete(v5);
}

void sub_2301C2EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a17 && a25 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void realityio::PhysicsColliderAssetBuilder::~PhysicsColliderAssetBuilder(void **this)
{
  realityio::PhysicsColliderAssetBuilder::~PhysicsColliderAssetBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::PhysicsColliderAssetBuilder *v2;
  uint64_t v3;
  realityio::PhysicsColliderAssetBuilder *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *this = &off_24FDFCFE8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 42));
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this + 35);
  *this = off_24FDE1CA0;
  v2 = (realityio::PhysicsColliderAssetBuilder *)this[34];
  if (v2 == (realityio::PhysicsColliderAssetBuilder *)(this + 31))
  {
    v3 = 4;
    v2 = (realityio::PhysicsColliderAssetBuilder *)(this + 31);
  }
  else
  {
    if (!v2)
      goto LABEL_10;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_10:
  v4 = (realityio::PhysicsColliderAssetBuilder *)this[30];
  if (v4 == (realityio::PhysicsColliderAssetBuilder *)(this + 27))
  {
    v5 = 4;
    v4 = (realityio::PhysicsColliderAssetBuilder *)(this + 27);
  }
  else
  {
    if (!v4)
      goto LABEL_15;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_15:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  v6 = (unint64_t)this[24];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = (unint64_t)this[23];
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder((realityio::Builder *)this);
}

void std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFD060;
  return result;
}

void std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFD060;
}

char *std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFD0E0;
  return result;
}

void std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFD0E0;
}

void std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::PhysicsColliderAssetBuilder::kOutputName((realityio::PhysicsColliderAssetBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 17, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2301C3328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderAssetBuilder::PhysicsColliderAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<REPoseF>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

void std::__function::__func<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24FDFD160;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDFD160;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  realityio *v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  __int128 v10;
  float v11;
  float32x2_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomCube *IsA;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t Capsule;
  unsigned int *v26;
  unsigned int v27;
  unint64_t *v28;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *Data;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v30;
  BOOL v31;
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere *v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v36;
  unsigned int *v37;
  unsigned int v38;
  pxrInternal__aapl__pxrReserved__ *isSceneGroundPlane;
  unint64_t *v40;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v41;
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *v42;
  _BOOL4 v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t *UsdPrimDefaultPredicate;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __int128 v75;
  _OWORD *v76;
  unint64_t v77;
  __int128 v78;
  char *v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t Empty;
  char *v83;
  char *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  float32x2_t v89;
  uint64_t v90;
  float32x2_t *v91;
  uint64_t v92;
  __int128 v93;
  void *v94[2];
  uint64_t v95;
  char v96;
  float32x2_t v97;
  uint64_t v98;
  void *v99[2];
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  __int128 v104;
  uint64_t v105;
  void *v106;
  char *v107;
  _QWORD v108[2];
  __int128 v109;
  __int128 v110;
  char v111;
  char v112[8];
  uint64_t v113;
  uint64_t v114;
  void *v115;
  char v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  char v120;
  _QWORD v121[3];
  __int128 v122;
  uint64_t v123;
  float64x2_t v124;
  double v125;
  uint64_t v126;
  uint64_t v127;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = **(_QWORD **)(a1 + 24);
  v4 = *(realityio **)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  v91 = *(float32x2_t **)(a1 + 48);
  v92 = **(_QWORD **)(a1 + 32);
  v6 = **(unsigned __int8 **)(a1 + 64);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  result = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (!(_DWORD)result)
  {
    v31 = 0;
    goto LABEL_176;
  }
  REPoseIdentity();
  *(_DWORD *)(v5 + 8) = v8;
  *(_QWORD *)v5 = v9;
  *(_OWORD *)(v5 + 16) = v10;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v126 = MEMORY[0x24BEE9D78] + 16;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v123, 1.0);
  if (v127 && (*(_BYTE *)(v127 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v126 + 32))(&v126))
  {
    MEMORY[0x2348B2068](&v97, &v126);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation();
    *(_QWORD *)&v122 = &v97;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v122, 1.0);
  v97 = vcvt_f32_f64(v124);
  v11 = v125;
  *(float *)&v98 = v11;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslateOnly();
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v123);
  v97 = v12;
  v98 = v13;
  v99[0] = v14;
  v99[1] = v15;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v122, (const pxrInternal__aapl__pxrReserved__::GfRotation *)&v97);
  v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)REMakePose();
  *(_DWORD *)(v5 + 8) = v17;
  *(_QWORD *)v5 = v18;
  *(_OWORD *)(v5 + 16) = v19;
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(v16);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomCube *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((_DWORD)IsA)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v121[0] = MEMORY[0x24BEE9D30] + 16;
    pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v121);
    realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v97, (uint64_t)&v117);
    if (((uint64_t)v99[1] & 7) != 0)
    {
      v21 = (unsigned int *)((unint64_t)v99[1] & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v99);
    if (v98)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v98);
    pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetHeightAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v121);
    realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v97, (uint64_t)v112);
    if (((uint64_t)v99[1] & 7) != 0)
    {
      v23 = (unsigned int *)((unint64_t)v99[1] & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v99);
    if (v98)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v98);
    Capsule = 0;
    if ((_BYTE)v117 && v112[0])
      Capsule = REAssetManagerCollisionShapeAssetCreateCapsule();
    pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetAxisAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v121);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v97, (uint64_t)&v109);
    if (((uint64_t)v99[1] & 7) != 0)
    {
      v26 = (unsigned int *)((unint64_t)v99[1] & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v99);
    if (v98)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v98);
    if ((_BYTE)v109)
    {
      v28 = (unint64_t *)MEMORY[0x24BEE7FE8];
      Data = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
      if ((*((_QWORD *)&v109 + 1) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 166) & 0xFFFFFFFFFFFFFFF8))
      {
        v106 = 0;
        v107 = 0;
        v108[0] = 0x3FF0000000000000;
        goto LABEL_61;
      }
      v30 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v28);
      if (!v30)
        v30 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
      if ((*((_QWORD *)&v109 + 1) & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v30 + 169) & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_62;
    }
    v107 = 0;
    v108[0] = 0;
    v106 = (void *)0x3FF0000000000000;
LABEL_61:
    v108[1] = 0x4056800000000000;
LABEL_62:
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v97, 1.0);
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v97, (const pxrInternal__aapl__pxrReserved__::GfRotation *)&v106);
    MEMORY[0x2348B199C](&v93, &v97);
    REMakePose();
    REPoseMultiply();
    *(_DWORD *)(v5 + 8) = v44;
    *(_QWORD *)v5 = v45;
    *(_OWORD *)(v5 + 16) = v46;
    if ((_BYTE)v109)
    {
      if ((BYTE8(v109) & 7) != 0)
      {
        v47 = (unsigned int *)(*((_QWORD *)&v109 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
    }
    else if (v111 < 0)
    {
      operator delete(*((void **)&v110 + 1));
    }
    if (!v112[0] && v116 < 0)
      operator delete(v115);
    if (!(_BYTE)v117 && v120 < 0)
      operator delete(*((void **)&v118 + 1));
    MEMORY[0x2348B1E4C](v121);
    goto LABEL_171;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(IsA);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  v32 = (pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((_DWORD)v32)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(_QWORD *)&v93 = MEMORY[0x24BEE9CE8] + 16;
    *(_QWORD *)&v117 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomCube::GetSizeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCube *)&v93);
    v33 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
    if (((uint64_t)v99[1] & 7) != 0)
    {
      v34 = (unsigned int *)((unint64_t)v99[1] & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v99);
    if (v98)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v98);
    if (v33)
      Capsule = REAssetManagerCollisionShapeAssetCreateBox();
    else
      Capsule = 0;
    MEMORY[0x2348B1AC8](&v93);
    goto LABEL_171;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(v32);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
  {
    isSceneGroundPlane = (pxrInternal__aapl__pxrReserved__ *)realityio::isSceneGroundPlane(v4, v36);
    if (!(_DWORD)isSceneGroundPlane)
    {
      v106 = 0;
      v107 = 0;
      v108[0] = 0;
      UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(isSceneGroundPlane);
      v51 = *UsdPrimDefaultPredicate;
      v50 = UsdPrimDefaultPredicate[1];
      v52 = (void *)UsdPrimDefaultPredicate[2];
      if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
        && ((v51 & 0x2000) != 0 || (v50 & 0x2000) == 0))
      {
        v51 |= 0x2000uLL;
        v50 &= ~0x2000uLL;
      }
      *(_QWORD *)&v93 = v51;
      *((_QWORD *)&v93 + 1) = v50;
      v94[0] = v52;
      pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)v4, (uint64_t *)&v93, (uint64_t)&v97);
      *(float32x2_t *)&v93 = v97;
      v90 = v1;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v93 + 2, &v98);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v93 + 3, (_DWORD *)&v98 + 1);
      *(_OWORD *)v94 = *(_OWORD *)v99;
      v95 = v100;
      *(_QWORD *)&v117 = v101;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v117 + 2, &v102);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v117 + 3, &v103);
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v118 = v104;
      v119 = v105;
      while (v93 != v117 || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)v94, (uint64_t)&v118))
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v93, (uint64_t)v112);
        v121[0] = 0;
        v109 = 0u;
        v110 = 0u;
        REPoseIdentity();
        DWORD2(v109) = v56;
        *(_QWORD *)&v109 = v57;
        v110 = v58;
        if (realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(v2, v3, v92, (uint64_t)v112, (uint64_t)v121, (uint64_t)&v109, v6 != 0))
        {
          v59 = v121[0];
          v60 = v107;
          if ((unint64_t)v107 >= v108[0])
          {
            v62 = (v107 - (_BYTE *)v106) >> 3;
            if ((unint64_t)(v62 + 1) >> 61)
              std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
            v63 = (uint64_t)(v108[0] - (_QWORD)v106) >> 2;
            if (v63 <= v62 + 1)
              v63 = v62 + 1;
            if (v108[0] - (_QWORD)v106 >= 0x7FFFFFFFFFFFFFF8uLL)
              v64 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v64 = v63;
            if (v64)
              v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)v108, v64);
            else
              v65 = 0;
            v66 = &v65[8 * v62];
            *(_QWORD *)v66 = v59;
            v61 = v66 + 8;
            v68 = (char *)v106;
            v67 = v107;
            if (v107 != v106)
            {
              do
              {
                v69 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v66 - 1) = v69;
                v66 -= 8;
              }
              while (v67 != v68);
              v67 = (char *)v106;
            }
            v106 = v66;
            v107 = v61;
            v108[0] = &v65[8 * v64];
            if (v67)
              operator delete(v67);
          }
          else
          {
            *(_QWORD *)v107 = v121[0];
            v61 = v60 + 8;
          }
          v107 = v61;
          RERetain();
          if ((unint64_t)v54 >= v55)
          {
            v71 = (v54 - v53) >> 5;
            v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 59)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v55 - (_QWORD)v53) >> 4 > v72)
              v72 = (uint64_t)(v55 - (_QWORD)v53) >> 4;
            if (v55 - (unint64_t)v53 >= 0x7FFFFFFFFFFFFFE0)
              v73 = 0x7FFFFFFFFFFFFFFLL;
            else
              v73 = v72;
            if (v73)
              v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<REPoseF>>(v73);
            else
              v74 = 0;
            v75 = v110;
            v76 = (_OWORD *)(v73 + 32 * v71);
            *v76 = v109;
            v76[1] = v75;
            if (v54 == v53)
            {
              v79 = (char *)(v73 + 32 * v71);
            }
            else
            {
              v77 = v73 + 32 * v71;
              do
              {
                v78 = *((_OWORD *)v54 - 1);
                v79 = (char *)(v77 - 32);
                *(_OWORD *)(v77 - 32) = *((_OWORD *)v54 - 2);
                *(_OWORD *)(v77 - 16) = v78;
                v54 -= 32;
                v77 -= 32;
              }
              while (v54 != v53);
            }
            v55 = v73 + 32 * v74;
            v54 = (char *)(v76 + 2);
            if (v53)
              operator delete(v53);
            v53 = v79;
          }
          else
          {
            v70 = v110;
            *(_OWORD *)v54 = v109;
            *((_OWORD *)v54 + 1) = v70;
            v54 += 32;
          }
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(v121);
        if ((v115 & 7) != 0)
        {
          v80 = (unsigned int *)((unint64_t)v115 & 0xFFFFFFFFFFFFFFF8);
          do
            v81 = __ldxr(v80);
          while (__stlxr(v81 - 2, v80));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v114);
        if (v113)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v113);
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v93);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v117 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v93 + 8);
      if (v106 == v107 && v53 == v54)
        Empty = REAssetManagerCollisionShapeAssetCreateEmpty();
      else
        Empty = REAssetManagerCollisionShapeAssetCreateCompound();
      Capsule = Empty;
      v83 = (char *)v106;
      v84 = v107;
      if (v106 != v107)
      {
        do
        {
          if (*(_QWORD *)v83)
            RERelease();
          v83 += 8;
        }
        while (v83 != v84);
        v83 = (char *)v106;
      }
      v107 = v83;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
      if (v53)
        operator delete(v53);
      if (v106)
      {
        v107 = (char *)v106;
        operator delete(v106);
      }
      v1 = v90;
      goto LABEL_171;
    }
    v40 = (unint64_t *)MEMORY[0x24BEE83A0];
    v41 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(MEMORY[0x24BEE83A0]);
    if (!v41)
      v41 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(v4, v41);
    v42 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load(v40);
    if (!v42)
      v42 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData(MEMORY[0x24BEE83A0]);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(v4, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v42 + 16));
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::UsdObject *)v112, (uint64_t)&v97);
    if (v97.i8[0])
    {
      v43 = 1;
    }
    else
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::UsdObject *)v112, (uint64_t)&v93);
      v43 = (_BYTE)v93 != 0;
      if (!(_BYTE)v93 && v96 < 0)
        operator delete(v94[1]);
    }
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v109, (uint64_t)&v93);
    if ((_BYTE)v93)
    {
      if (v43)
        goto LABEL_151;
    }
    else
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v109, (uint64_t)&v117);
      if ((_BYTE)v117)
      {
        if (v43)
        {
LABEL_151:
          Capsule = REAssetManagerCollisionShapeAssetCreatePlane();
          goto LABEL_155;
        }
      }
      else if (v120 < 0)
      {
        operator delete(*((void **)&v118 + 1));
      }
    }
    Capsule = 0;
LABEL_155:
    if (!(_BYTE)v93 && v96 < 0)
      operator delete(v94[1]);
    if (!v97.i8[0] && SHIBYTE(v101) < 0)
      operator delete(v99[1]);
    if ((BYTE8(v110) & 7) != 0)
    {
      v85 = (unsigned int *)(*((_QWORD *)&v110 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v86 = __ldxr(v85);
      while (__stlxr(v86 - 2, v85));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
    if (*((_QWORD *)&v109 + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v109 + 1));
    if ((v115 & 7) != 0)
    {
      v87 = (unsigned int *)((unint64_t)v115 & 0xFFFFFFFFFFFFFFF8);
      do
        v88 = __ldxr(v87);
      while (__stlxr(v88 - 2, v87));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v114);
    if (v113)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v113);
    goto LABEL_171;
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *(_QWORD *)&v117 = MEMORY[0x24BEE9D20] + 16;
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)&v117);
  realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v93, (uint64_t)&v97);
  if (((uint64_t)v94[1] & 7) != 0)
  {
    v37 = (unsigned int *)((unint64_t)v94[1] & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v94);
  if (*((_QWORD *)&v93 + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v93 + 1));
  if (!v97.i8[0])
  {
    Capsule = 0;
    goto LABEL_129;
  }
  Capsule = REAssetManagerCollisionShapeAssetCreateSphere();
  if (!v97.i8[0])
  {
LABEL_129:
    if (SHIBYTE(v101) < 0)
      operator delete(v99[1]);
  }
  MEMORY[0x2348B1D20](&v117);
LABEL_171:
  v31 = Capsule != 0;
  if (Capsule)
  {
    v97 = (float32x2_t)Capsule;
    RERetain();
    v89 = *v91;
    if (*v91 != *(_QWORD *)&v97)
    {
      *v91 = v97;
      v97 = v89;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v97);
    RERelease();
  }
  result = MEMORY[0x2348B2080](&v126);
LABEL_176:
  **(_BYTE **)(v1 + 8) = v31;
  return result;
}

void sub_2301C41F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a65;
  void *a68;
  char a72;
  char a73;
  void *a74;
  uint64_t v74;
  unsigned int *v76;
  unsigned int v77;

  if (a55)
  {
    if ((a56 & 7) != 0)
    {
      v76 = (unsigned int *)(a56 & 0xFFFFFFFFFFFFFFF8);
      do
        v77 = __ldxr(v76);
      while (__stlxr(v77 - 2, v76));
    }
  }
  else if (a63 < 0)
  {
    operator delete(__p);
  }
  if (!a65 && a72 < 0)
    operator delete(a68);
  if (!a73 && SLOBYTE(STACK[0x207]) < 0)
    operator delete(a74);
  MEMORY[0x2348B1E4C](&STACK[0x208]);
  MEMORY[0x2348B2080](v74 - 152);
  _Unwind_Resume(a1);
}

void sub_2301C45D8()
{
  JUMPOUT(0x2301C4630);
}

uint64_t std::__function::__func<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0,std::allocator<realityio::PhysicsColliderAssetBuilder::createPrimColliderShapeAsset(realityio::Inputs *,REAssetManager *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::WrappedRERef<REAsset *> &,REPoseF &,BOOL)::$_0>,void ()(void)>::target_type()
{
}

realityio::tokens::SphereMeshBuilderTokens_StaticTokenType *realityio::tokens::SphereMeshBuilderTokens_StaticTokenType::SphereMeshBuilderTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(MEMORY[0x2348B2758](this, "Sphere", 0) + 8);
  MEMORY[0x2348B2758](v2, "radius", 0);
  MEMORY[0x2348B2758](this + 2, "material:binding", 0);
  v3 = *this;
  v23 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v23 = v4;
  }
  v6 = *v2;
  v24 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v24 = v7;
  }
  v9 = this[2];
  v25 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v25 = v10;
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  v12 = (unsigned int *)operator new(0x18uLL);
  v13 = 0;
  this[3] = v12;
  this[4] = v12;
  this[5] = v12 + 6;
  do
  {
    v14 = (&v23)[v13];
    *(_QWORD *)v12 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *(_QWORD *)v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v13;
    v12 += 2;
  }
  while (v13 != 3);
  v17 = (unsigned int **)&v26;
  this[4] = v12;
  do
  {
    v19 = (uint64_t)*--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
  }
  while (v17 != &v23);
  return (realityio::tokens::SphereMeshBuilderTokens_StaticTokenType *)this;
}

void sub_2301C48B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::getSphereMeshBuilderDirtyStageDescriptor(uint64_t *a1@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count_vtbl *v4;
  uint64_t *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v6;
  unsigned int **v7;
  uint64_t v8;
  realityio::AnyValueDirtyPropertyDescriptor *v9;
  unsigned int **v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t i;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32[3];
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38[3];
  void **v39;
  char v40;
  void **v41[7];

  v41[6] = *(void ***)MEMORY[0x24BDAC8D0];
  v3 = operator new();
  memset(v38, 0, sizeof(v38));
  v4 = (std::__shared_weak_count_vtbl *)operator new();
  Data = (uint64_t *)atomic_load(&realityio::tokens::SphereMeshBuilderTokens);
  if (!Data)
    Data = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SphereMeshBuilderTokens);
  memset(v32, 0, sizeof(v32));
  v6 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v7 = (unsigned int **)atomic_load(&realityio::tokens::SphereMeshBuilderTokens);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SphereMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 1));
  v8 = operator new();
  *(_QWORD *)v8 = &off_24FDE24C0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = v6;
  v41[0] = (void **)v6;
  v41[1] = (void **)v8;
  v9 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v10 = (unsigned int **)atomic_load(&realityio::tokens::SphereMeshBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SphereMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 2));
  v11 = operator new();
  *(_QWORD *)v11 = &off_24FDE24C0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v9;
  v41[2] = (void **)v9;
  v41[3] = (void **)v11;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v39 = (void **)&v29;
  v40 = 0;
  v12 = operator new(0x20uLL);
  v13 = 0;
  v14 = 0;
  v29 = v12;
  v30 = v12;
  v31 = v12 + 4;
  do
  {
    v15 = v13;
    v16 = *(_OWORD *)&v41[2 * v14];
    *(_OWORD *)v12 = v16;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v12 += 2;
    v13 = 1;
    v14 = 1;
  }
  while ((v15 & 1) == 0);
  v30 = v12;
  realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v4, Data, v32, &v29);
  v33 = v4;
  v19 = (std::__shared_weak_count *)operator new();
  v19->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2538;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = v4;
  v41[4] = (void **)&v4->~__shared_weak_count;
  v41[5] = (void **)&v19->__vftable;
  v33 = 0;
  v34 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v39 = (void **)&v35;
  v40 = 0;
  v21 = operator new(0x10uLL);
  v35 = v21;
  v37 = v21 + 2;
  *v21 = v4;
  v21[1] = v19;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v36 = v21 + 2;
  realityio::DirtyStageDescriptor::DirtyStageDescriptor(v3, v38, &v35);
  v23 = (_QWORD *)operator new();
  *v23 = &off_24FDE25B0;
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = v3;
  *a1 = v3;
  a1[1] = (uint64_t)v23;
  v39 = (void **)&v35;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v39);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v25 = v34;
  if (v34)
  {
    v26 = (unint64_t *)&v34->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v39 = (void **)&v29;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v39);
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v41[i]);
  v41[0] = (void **)v32;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v41);
  v41[0] = (void **)v38;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v41);
}

void sub_2301C4D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  MEMORY[0x2348B4E1C](v26, 0x10A1C40F82F910ELL);
  *(_QWORD *)(v27 - 120) = &a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 120));
  MEMORY[0x2348B4E1C](v25, 0x10A1C401BF1BAA1);
  _Unwind_Resume(a1);
}

void realityio::getAnimInputControlsFromInputs(uint64_t *a1, _QWORD *a2, double *a3, _QWORD *a4, _QWORD *a5, double *a6)
{
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  void *__p[2];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v12 = atomic_load((unsigned __int8 *)&qword_255E553A8);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_255E553A8))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__stage.layerData.mapper[/startTimeCode]");
    MEMORY[0x2348B26F8](&_MergedGlobals_57, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_255E553A8);
  }
  v13 = atomic_load((unsigned __int8 *)&qword_255E553B8);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_255E553B8))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__stage.layerData.mapper[/endTimeCode]");
    MEMORY[0x2348B26F8](&qword_255E553B0, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_255E553B8);
  }
  v14 = atomic_load((unsigned __int8 *)&qword_255E553C8);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_255E553C8))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__stage.layerData.mapper[/framesPerSecond]");
    MEMORY[0x2348B26F8](&qword_255E553C0, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_255E553C8);
  }
  v15 = atomic_load((unsigned __int8 *)&qword_255E553D8);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_255E553D8))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "/__stage.layerData.mapper[/timeCodesPerSecond]");
    MEMORY[0x2348B26F8](&qword_255E553D0, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_255E553D8);
  }
  *a3 = 24.0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 24.0;
  v16 = *a1;
  if (a1[1] == *a1)
  {
    v20 = 24.0;
    goto LABEL_19;
  }
  v17 = 0;
  v18 = 0;
  do
  {
    v19 = *(_QWORD *)(v16 + 8 * v18);
    if (v19 == _MergedGlobals_57)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a2 + v17));
      *a4 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
    }
    else if (v19 == qword_255E553B0)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a2 + v17));
      *a5 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
    }
    else if (v19 == qword_255E553C0)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a2 + v17));
      *a3 = *(double *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
    }
    else
    {
      if (v19 != qword_255E553D0)
        goto LABEL_16;
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a2 + v17));
      *a6 = *(double *)pxrInternal__aapl__pxrReserved__::VtValue::Get<double>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
    }
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
LABEL_16:
    ++v18;
    v16 = *a1;
    v17 += 16;
  }
  while (v18 < (a1[1] - *a1) >> 3);
  v20 = *a6;
LABEL_19:
  *a3 = v20;
}

void sub_2301C52E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255E553D8);
  _Unwind_Resume(a1);
}

void realityio::getSampledValueAtTime(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  int v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  double v30;
  double v31;
  int v32;
  double v33;
  realityio *v34;
  NSObject *v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  void **v41;
  void *__p;
  char *v43;
  char v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  void **v48;
  _QWORD v49[3];

  v49[2] = *MEMORY[0x24BDAC8D0];
  v49[1] = 0;
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_70;
  v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24);
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24)))
  {
    v7 = *(_QWORD *)(a1 + 32);
    if ((v7 & 4) != 0)
      v8 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v8 = *(_QWORD *)v6;
    v9 = *(_QWORD *)v8;
    if (*(_QWORD *)v8)
    {
      v10 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        LODWORD(v9) = **(_DWORD **)(v8 + 32);
      }
      else if (*(double *)(a1 + 8) > a3
             && (v11 = *(double *)(a1 + 16), v12 = (int)((a3 - v10) / v11), v9 - 2 >= (unint64_t)v12))
      {
        v33 = (a3 - (v10 + (double)v12 * v11)) / v11;
        LODWORD(v9) = (int)(v33 * (double)*(int *)(*(_QWORD *)(v8 + 32) + 4 * (v12 + 1))
                          + (1.0 - v33) * (double)*(int *)(*(_QWORD *)(v8 + 32) + 4 * v12));
      }
      else
      {
        LODWORD(v9) = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 4 * v9 - 4);
      }
    }
    v43 = (char *)&unk_24FDE9B5B;
    LODWORD(__p) = v9;
    goto LABEL_69;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>(v6))
  {
    v13 = *(_QWORD *)(a1 + 32);
    if ((v13 & 4) != 0)
      v14 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v14 = *(_QWORD *)v6;
    v15 = *(_QWORD *)v14;
    if (*(_QWORD *)v14)
    {
      v16 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v19 = **(float **)(v14 + 32);
      }
      else if (*(double *)(a1 + 8) > a3
             && (v17 = *(double *)(a1 + 16), v18 = (int)((a3 - v16) / v17), v15 - 2 >= (unint64_t)v18))
      {
        v36 = (a3 - (v16 + (double)v18 * v17)) / v17;
        v19 = v36 * *(float *)(*(_QWORD *)(v14 + 32) + 4 * (v18 + 1))
            + (1.0 - v36) * *(float *)(*(_QWORD *)(v14 + 32) + 4 * v18);
      }
      else
      {
        v19 = *(float *)(*(_QWORD *)(v14 + 32) + 4 * v15 - 4);
      }
    }
    else
    {
      v19 = 0.0;
    }
    v43 = (char *)&unk_24FDE5F5B;
    *(float *)&__p = v19;
    goto LABEL_69;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>(v6))
  {
    v20 = *(_QWORD *)(a1 + 32);
    if ((v20 & 4) != 0)
      v21 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v21 = *(_QWORD *)v6;
    v22 = *(_QWORD *)v21;
    if (*(_QWORD *)v21)
    {
      v23 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v26 = **(double **)(v21 + 32);
      }
      else if (*(double *)(a1 + 8) > a3
             && (v24 = *(double *)(a1 + 16), v25 = (int)((a3 - v23) / v24), v22 - 2 >= (unint64_t)v25))
      {
        v37 = (a3 - (v23 + (double)v25 * v24)) / v24;
        v26 = v37 * *(double *)(*(_QWORD *)(v21 + 32) + 8 * (v25 + 1))
            + (1.0 - v37) * *(double *)(*(_QWORD *)(v21 + 32) + 8 * v25);
      }
      else
      {
        v26 = *(double *)(*(_QWORD *)(v21 + 32) + 8 * v22 - 8);
      }
    }
    else
    {
      v26 = 0.0;
    }
    v43 = (char *)&unk_24FDE5B2B;
    __p = *(void **)&v26;
    goto LABEL_69;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(v6))
  {
    v27 = *(_QWORD *)(a1 + 32);
    if ((v27 & 4) != 0)
      v28 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v27 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v28 = *(_QWORD *)v6;
    v29 = *(_QWORD *)v28;
    if (*(_QWORD *)v28)
    {
      v30 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v29 = **(_QWORD **)(v28 + 32);
      }
      else if (*(double *)(a1 + 8) > a3 && (v31 = *(double *)(a1 + 16), v32 = (int)((a3 - v30) / v31), v29 - 2 >= v32))
      {
        v38 = v32;
        v39 = (a3 - (v30 + (double)v32 * v31)) / v31;
        v40 = *(_QWORD *)(v28 + 32);
        v29 = ((int)(v39 * (double)*(int *)(v40 + 8 * ((int)v38 + 1)))
                           + (int)((1.0 - v39) * (double)*(int *)(v40 + 8 * v38))) | ((unint64_t)((int)(v39 * (double)*(int *)(v40 + 8 * ((int)v38 + 1) + 4)) + (int)((1.0 - v39) * (double)*(int *)(v40 + 8 * v38 + 4))) << 32);
      }
      else
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 8 * v29 - 8);
      }
    }
    __p = (void *)v29;
    v43 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>(void)::ti
        + 3;
    goto LABEL_69;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(v6))
  {
    v43 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>(void)::ti
        + 3;
    LODWORD(__p) = TimeSampledDataT::getValueAtTime<pxrInternal__aapl__pxrReserved__::GfVec2h>(a1, a3);
LABEL_69:
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(v49, &__p);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
LABEL_70:
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a2, v49);
    goto LABEL_71;
  }
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec2f>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec2d>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3i>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3h>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3d>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4i>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4h>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4d>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfQuath>(a1, v49, a3))
    goto LABEL_70;
  if (getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfQuatf>(a1, v49, a3))
    goto LABEL_70;
  v34 = (realityio *)getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfQuatd>(a1, v49, a3);
  if ((_DWORD)v34)
    goto LABEL_70;
  v35 = *(id *)(realityio::logObjects(v34) + 24);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(v6);
    v41 = v44 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 134218242;
    v46 = a3;
    v47 = 2080;
    v48 = v41;
    _os_log_error_impl(&dword_22FF26000, v35, OS_LOG_TYPE_ERROR, "unhandled getSampledValueAtTime %g %s  \n", buf, 0x16u);
    if (v44 < 0)
      operator delete(__p);
  }

  a2[1] = 0;
LABEL_71:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v49);
}

void sub_2301C5A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  float32x2_t v14;
  double v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t *)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v14 = **(float32x2_t **)(v9 + 32);
      }
      else if (*(double *)(a1 + 8) > a3
             && (v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      {
        v16 = (a3 - (v11 + (double)v13 * v12)) / v12;
        v14 = vadd_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(v9 + 32) + 8 * v13)), 1.0 - v16)), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(v9 + 32) + 8 * (v13 + 1))), v16)));
      }
      else
      {
        v14 = *(float32x2_t *)(*(_QWORD *)(v9 + 32) + 8 * v10 - 8);
      }
    }
    else
    {
      v14 = 0;
    }
    v17[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(void)::ti
           + 3;
    v17[0] = v14;
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v17);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  float64x2_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  double v19;
  float64x2_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (*v9)
    {
      v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v14 = *(float64x2_t *)v9[4];
      }
      else if (*(double *)(a1 + 8) > a3
             && (v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      {
        v19 = (a3 - (v11 + (double)v13 * v12)) / v12;
        v14 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v9[4] + 16 * v13), 1.0 - v19), vmulq_n_f64(*(float64x2_t *)(v9[4] + 16 * (v13 + 1)), v19));
      }
      else
      {
        v14 = *(float64x2_t *)(v9[4] + 16 * v10 - 16);
      }
    }
    else
    {
      v14 = 0uLL;
    }
    v20 = v14;
    v21[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>(void)::ti
           + 2;
    v15 = operator new();
    *(float64x2_t *)v15 = v20;
    v16 = (unsigned int *)(v15 + 16);
    atomic_store(0, (unsigned int *)(v15 + 16));
    v21[0] = v15;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v21);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v21);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  int v22;
  double v23;
  uint64_t v24;
  int *v25;
  int *v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (*v9)
    {
      v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v17 = v9[4];
        v15 = *(_QWORD *)v17;
        v16 = *(_DWORD *)(v17 + 8);
      }
      else if (*(double *)(a1 + 8) > a3
             && (v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      {
        v22 = (int)((a3 - v11) / v12);
        v23 = (a3 - (v11 + (double)v13 * v12)) / v12;
        v24 = v9[4];
        v25 = (int *)(v24 + 12 * v22);
        v26 = (int *)(v24 + 12 * (v22 + 1));
        v16 = (int)(v23 * (double)v26[2]) + (int)((1.0 - v23) * (double)v25[2]);
        v15 = ((int)(v23 * (double)*v26) + (int)((1.0 - v23) * (double)*v25)) | ((unint64_t)((int)(v23 * (double)v26[1]) + (int)((1.0 - v23) * (double)v25[1])) << 32);
      }
      else
      {
        v14 = v9[4] + 12 * v10;
        v15 = *(_QWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
      }
    }
    else
    {
      v16 = 0;
      v15 = 0;
    }
    v27[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>(void)::ti
           + 2;
    v18 = operator new();
    *(_QWORD *)v18 = v15;
    *(_DWORD *)(v18 + 8) = v16;
    v19 = (unsigned int *)(v18 + 12);
    atomic_store(0, (unsigned int *)(v18 + 12));
    v27[0] = v18;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v27);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v27);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, _QWORD *a2, double a3)
{
  unint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  double v11;
  double v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  int v19;
  double v20;
  unint64_t v21;
  int *v22;
  int v23;
  unsigned __int16 *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  int v30;
  unsigned __int16 *v31;
  int v32;
  unsigned __int16 v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v6 = (unint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (unint64_t *)(*(uint64_t (**)(unint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (!*v9)
      goto LABEL_11;
    v11 = *(double *)a1;
    if (*(double *)a1 >= a3)
    {
      v17 = (unsigned int *)v9[4];
      v15 = *((unsigned __int16 *)v17 + 2);
      v16 = *v17;
    }
    else
    {
      if (*(double *)(a1 + 8) > a3)
      {
        v12 = *(double *)(a1 + 16);
        v13 = (int)((a3 - v11) / v12);
        if (v10 - 2 >= v13)
        {
          v19 = (int)((a3 - v11) / v12);
          v20 = (a3 - (v11 + (double)v13 * v12)) / v12;
          v21 = v9[4];
          v22 = (int *)(v21 + 6 * v13);
          v23 = *v22;
          WORD2(v34[0]) = *((_WORD *)v22 + 2);
          LODWORD(v34[0]) = v23;
          v24 = pxrInternal__aapl__pxrReserved__::GfVec3h::operator*=((unsigned __int16 *)v34, 1.0 - v20);
          v25 = (int *)(v21 + 6 * (v19 + 1));
          v26 = v24[2];
          v27 = *(unsigned int *)v24;
          v28 = *v25;
          WORD2(v34[0]) = *((_WORD *)v25 + 2);
          LODWORD(v34[0]) = v28;
          v29 = pxrInternal__aapl__pxrReserved__::GfVec3h::operator*=((unsigned __int16 *)v34, v20);
          v30 = *(_DWORD *)v29;
          v33 = v29[2];
          v32 = v30;
          WORD2(v34[0]) = (v27 | (unint64_t)(v26 << 32)) >> 32;
          LODWORD(v34[0]) = v27;
          v31 = pxrInternal__aapl__pxrReserved__::GfVec3h::operator+=((unsigned __int16 *)v34, (unsigned __int16 *)&v32);
          v10 = *(unsigned int *)v31 | ((unint64_t)v31[2] << 32);
          goto LABEL_11;
        }
      }
      v14 = v9[4] + 6 * v10;
      v15 = *(unsigned __int16 *)(v14 - 2);
      v16 = *(unsigned int *)(v14 - 6);
    }
    v10 = v16 | (v15 << 32);
LABEL_11:
    v34[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>(void)::ti
           + 3;
    LODWORD(v34[0]) = v10;
    WORD2(v34[0]) = WORD2(v10);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v34);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  uint64_t v14;
  float32x2_t v15;
  float v16;
  float32x2_t *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  int v22;
  double v23;
  uint64_t v24;
  float32x2_t *v25;
  float32x2_t *v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (*v9)
    {
      v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v17 = (float32x2_t *)v9[4];
        v15 = *v17;
        v16 = v17[1].f32[0];
      }
      else if (*(double *)(a1 + 8) > a3
             && (v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      {
        v22 = (int)((a3 - v11) / v12);
        v23 = (a3 - (v11 + (double)v13 * v12)) / v12;
        v24 = v9[4];
        v25 = (float32x2_t *)(v24 + 12 * v22);
        v26 = (float32x2_t *)(v24 + 12 * (v22 + 1));
        v27 = (1.0 - v23) * v25[1].f32[0];
        v28 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v25), 1.0 - v23));
        v29 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v26), v23));
        *(float *)&v23 = v23 * v26[1].f32[0];
        v15 = vadd_f32(v28, v29);
        v16 = v27 + *(float *)&v23;
      }
      else
      {
        v14 = v9[4] + 12 * v10;
        v15 = *(float32x2_t *)(v14 - 12);
        v16 = *(float *)(v14 - 4);
      }
    }
    else
    {
      v15 = 0;
      v16 = 0.0;
    }
    v30[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
           + 2;
    v18 = operator new();
    *(float32x2_t *)v18 = v15;
    *(float *)(v18 + 8) = v16;
    v19 = (unsigned int *)(v18 + 12);
    atomic_store(0, (unsigned int *)(v18 + 12));
    v30[0] = v18;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v30);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v30);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  uint64_t v14;
  double v15;
  float64x2_t *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  int v21;
  double v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (*v9)
    {
      v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v16 = (float64x2_t *)v9[4];
        v26 = *v16;
        v15 = v16[1].f64[0];
      }
      else if (*(double *)(a1 + 8) > a3
             && (v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      {
        v21 = (int)((a3 - v11) / v12);
        v22 = (a3 - (v11 + (double)v13 * v12)) / v12;
        v23 = v9[4];
        v24 = (float64x2_t *)(v23 + 24 * v21);
        v25 = (float64x2_t *)(v23 + 24 * (v21 + 1));
        v26 = vaddq_f64(vmulq_n_f64(*v24, 1.0 - v22), vmulq_n_f64(*v25, v22));
        v15 = (1.0 - v22) * v24[1].f64[0] + v22 * v25[1].f64[0];
      }
      else
      {
        v14 = v9[4] + 24 * v10;
        v26 = *(float64x2_t *)(v14 - 24);
        v15 = *(double *)(v14 - 8);
      }
    }
    else
    {
      v26 = 0u;
      v15 = 0.0;
    }
    v27[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>(void)::ti
           + 2;
    v17 = operator new();
    *(float64x2_t *)v17 = v26;
    *(double *)(v17 + 16) = v15;
    v18 = (unsigned int *)(v17 + 24);
    atomic_store(0, (unsigned int *)(v17 + 24));
    v27[0] = v17;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v27);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v27);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  int8x16_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v19;
  double v20;
  uint64_t v21;
  int64x2_t v22;
  int32x2_t v23;
  int64x2_t v24;
  int32x2_t v25;
  int64x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (*v9)
    {
      v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v14 = *(int8x16_t *)v9[4];
      }
      else if (*(double *)(a1 + 8) > a3
             && (v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      {
        v19 = v13;
        v20 = (a3 - (v11 + (double)v13 * v12)) / v12;
        v21 = v9[4];
        v22 = *(int64x2_t *)(v21 + 16 * v19);
        v23 = vmovn_s64(v22);
        v24.i64[0] = v23.i32[0];
        v24.i64[1] = v23.i32[1];
        v25 = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v24), 1.0 - v20)));
        *(int32x2_t *)v22.i8 = vshrn_n_s64(v22, 0x20uLL);
        v24.i64[0] = v22.i32[0];
        v24.i64[1] = v22.i32[1];
        v26 = *(int64x2_t *)(v21 + 16 * ((int)v19 + 1));
        v27 = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v24), 1.0 - v20)));
        v28 = vmovn_s64(v26);
        v24.i64[0] = v28.i32[0];
        v24.i64[1] = v28.i32[1];
        v29 = vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v24), v20)));
        *(int32x2_t *)v26.i8 = vshrn_n_s64(v26, 0x20uLL);
        v24.i64[0] = v26.i32[0];
        v24.i64[1] = v26.i32[1];
        *(int32x2_t *)v26.i8 = vadd_s32(v29, v25);
        v30 = (int8x16_t)vshll_n_s32(vadd_s32(vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v24), v20))), v27), 0x20uLL);
        v24.i64[0] = v26.u32[0];
        v24.i64[1] = v26.u32[1];
        v14 = vorrq_s8(v30, (int8x16_t)v24);
      }
      else
      {
        v14 = *(int8x16_t *)(v9[4] + 16 * v10 - 16);
      }
    }
    else
    {
      v14 = 0uLL;
    }
    v31 = v14;
    v32[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>(void)::ti
           + 2;
    v15 = operator new();
    *(int8x16_t *)v15 = v31;
    v16 = (unsigned int *)(v15 + 16);
    atomic_store(0, (unsigned int *)(v15 + 16));
    v32[0] = v15;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v32);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v32);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  int v13;
  int v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  unsigned int v22;
  float v23;
  unsigned int v24;
  float v25;
  unsigned int v26;
  float v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t *)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v10 = **(_QWORD **)(v9 + 32);
      }
      else if (*(double *)(a1 + 8) > a3 && (v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= v13))
      {
        v15 = (int)((a3 - v11) / v12);
        v16 = (a3 - (v11 + (double)v13 * v12)) / v12;
        v17 = *(_QWORD *)(v9 + 32);
        v29[0] = *(_QWORD *)(v17 + 8 * v13);
        pxrInternal__aapl__pxrReserved__::GfVec4h::operator*=((unsigned __int16 *)v29, 1.0 - v16);
        v18 = v29[0];
        v29[0] = *(_QWORD *)(v17 + 8 * (v15 + 1));
        pxrInternal__aapl__pxrReserved__::GfVec4h::operator*=((unsigned __int16 *)v29, v16);
        v19 = v29[0];
        v20 = MEMORY[0x24BEE8B20];
        v21 = *(float *)(MEMORY[0x24BEE8B20] + 4 * (unsigned __int16)v18)
            + *(float *)(MEMORY[0x24BEE8B20] + 4 * LOWORD(v29[0]));
        if (v21 == 0.0)
        {
          v22 = HIWORD(LODWORD(v21));
        }
        else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v21) >> 23)))
        {
          v22 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v21) >> 23))
              + (((LODWORD(v21) & 0x7FFFFF) + ((LODWORD(v21) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v22) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v21));
        }
        v23 = *(float *)(v20 + 4 * WORD1(v18)) + *(float *)(v20 + 4 * WORD1(v19));
        if (v23 == 0.0)
        {
          v24 = HIWORD(LODWORD(v23));
        }
        else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v23) >> 23)))
        {
          v24 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v23) >> 23))
              + (((LODWORD(v23) & 0x7FFFFF) + ((LODWORD(v23) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v24) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v23));
        }
        v25 = *(float *)(v20 + 4 * WORD2(v18)) + *(float *)(v20 + 4 * WORD2(v19));
        if (v25 == 0.0)
        {
          v26 = HIWORD(LODWORD(v25));
        }
        else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v25) >> 23)))
        {
          v26 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v25) >> 23))
              + (((LODWORD(v25) & 0x7FFFFF) + ((LODWORD(v25) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v26) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v25));
        }
        v27 = *(float *)(v20 + 4 * HIWORD(v18)) + *(float *)(v20 + 4 * HIWORD(v19));
        if (v27 == 0.0)
        {
          v28 = HIWORD(LODWORD(v27));
        }
        else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v27) >> 23)))
        {
          v28 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v27) >> 23))
              + (((LODWORD(v27) & 0x7FFFFF) + ((LODWORD(v27) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          v28 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v27));
        }
        v10 = ((unint64_t)(unsigned __int16)v26 << 32) | (v28 << 48) | ((unint64_t)(unsigned __int16)v24 << 16) | (unsigned __int16)v22;
      }
      else
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10 - 8);
      }
    }
    v29[0] = v10;
    v29[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>(void)::ti
           + 3;
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v29);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v29);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  float32x4_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v19;
  double v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (*v9)
    {
      v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v14 = *(float32x4_t *)v9[4];
      }
      else if (*(double *)(a1 + 8) > a3
             && (v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      {
        v19 = v13;
        v20 = (a3 - (v11 + (double)v13 * v12)) / v12;
        v21 = v9[4];
        v22 = *(float32x4_t *)(v21 + 16 * ((int)v19 + 1));
        v14 = vaddq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(v21 + 16 * v19)), 1.0 - v20)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)(v21 + 16 * v19)), 1.0 - v20)), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v22.f32), v20)), vmulq_n_f64(vcvt_hight_f64_f32(v22), v20)));
      }
      else
      {
        v14 = *(float32x4_t *)(v9[4] + 16 * v10 - 16);
      }
    }
    else
    {
      v14 = 0uLL;
    }
    v23 = v14;
    v24[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(void)::ti
           + 2;
    v15 = operator new();
    *(float32x4_t *)v15 = v23;
    v16 = (unsigned int *)(v15 + 16);
    atomic_store(0, (unsigned int *)(v15 + 16));
    v24[0] = v15;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v24);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v24);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v21;
  double v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (*v9)
    {
      v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v16 = (float64x2_t *)v9[4];
        v27 = *v16;
        v15 = v16[1];
      }
      else if (*(double *)(a1 + 8) > a3
             && (v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      {
        v21 = v13;
        v22 = (a3 - (v11 + (double)v13 * v12)) / v12;
        v23 = v9[4];
        v24 = (float64x2_t *)(v23 + 32 * v21);
        v25 = (float64x2_t *)(v23 + 32 * ((int)v21 + 1));
        v27 = vaddq_f64(vmulq_n_f64(*v24, 1.0 - v22), vmulq_n_f64(*v25, v22));
        v15 = vaddq_f64(vmulq_n_f64(v24[1], 1.0 - v22), vmulq_n_f64(v25[1], v22));
      }
      else
      {
        v14 = v9[4] + 32 * v10;
        v27 = *(float64x2_t *)(v14 - 32);
        v15 = *(float64x2_t *)(v14 - 16);
      }
    }
    else
    {
      v15 = 0uLL;
      v27 = 0u;
    }
    v26 = v15;
    v28[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>(void)::ti
           + 2;
    v17 = operator new();
    *(float64x2_t *)v17 = v27;
    *(float64x2_t *)(v17 + 16) = v26;
    v18 = (unsigned int *)(v17 + 32);
    atomic_store(0, (unsigned int *)(v17 + 32));
    v28[0] = v17;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v28);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t result;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    return 0;
  v7 = (uint64_t **)(a1 + 24);
  if (*(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 16) != 28)
  {
    if ((v3 & 4) != 0)
    {
      if (!(_DWORD)result)
        return result;
      v3 = *(_QWORD *)(a1 + 32);
      if ((v3 & 4) == 0)
        goto LABEL_4;
LABEL_14:
      v8 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      goto LABEL_5;
    }
    return 0;
  }
  if ((v3 & 4) != 0)
    goto LABEL_14;
LABEL_4:
  v8 = *v7;
LABEL_5:
  v9 = *v8;
  if (*v8)
  {
    if (*(double *)a1 >= a3)
    {
      v11 = *(_OWORD *)v8[4];
    }
    else if (*(double *)(a1 + 8) > a3
           && (v10 = (int)((a3 - *(double *)a1) / *(double *)(a1 + 16)), v9 - 2 >= (unint64_t)v10))
    {
      v16 = (int)((a3 - *(double *)a1) / *(double *)(a1 + 16));
      v17 = v8[4];
      v20 = *(_OWORD *)(v17 + 16 * v10);
      v19 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator*=();
      v20 = *(_OWORD *)(v17 + 16 * (v16 + 1));
      pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator*=();
      pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator+=();
      v11 = v19;
    }
    else
    {
      v11 = *(_OWORD *)(v8[4] + 16 * v9 - 16);
    }
  }
  else
  {
    v11 = 0uLL;
  }
  v18 = v11;
  *((_QWORD *)&v20 + 1) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2f>(void)::ti
                        + 2;
  v13 = operator new();
  *(_OWORD *)v13 = v18;
  v14 = (unsigned int *)(v13 + 16);
  atomic_store(0, (unsigned int *)(v13 + 16));
  *(_QWORD *)&v20 = v13;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, &v20);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v20);
  return 1;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 *v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (*v9)
    {
      if (*(double *)a1 >= a3)
      {
        v14 = (__int128 *)v9[4];
        v27 = *v14;
        v13 = v14[1];
      }
      else if (*(double *)(a1 + 8) > a3
             && (v11 = (int)((a3 - *(double *)a1) / *(double *)(a1 + 16)), v10 - 2 >= (unint64_t)v11))
      {
        v19 = (__int128 *)(v9[4] + 32 * v11);
        v20 = v19[1];
        v28 = *v19;
        v29 = v20;
        v21 = (uint64_t *)pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=();
        v22 = *v21;
        v23 = v21[1];
        v24 = v21[2];
        v25 = v21[3];
        pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=();
        *(_QWORD *)&v28 = v22;
        *((_QWORD *)&v28 + 1) = v23;
        *(_QWORD *)&v29 = v24;
        *((_QWORD *)&v29 + 1) = v25;
        pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=();
        v27 = v28;
        v13 = v29;
      }
      else
      {
        v12 = v9[4] + 32 * v10;
        v27 = *(_OWORD *)(v12 - 32);
        v13 = *(_OWORD *)(v12 - 16);
      }
    }
    else
    {
      v13 = 0uLL;
      v27 = 0u;
    }
    v26 = v13;
    *((_QWORD *)&v28 + 1) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(void)::ti
                          + 2;
    v15 = operator new();
    *(_OWORD *)v15 = v27;
    *(_OWORD *)(v15 + 16) = v26;
    v16 = (unsigned int *)(v15 + 32);
    atomic_store(0, (unsigned int *)(v15 + 32));
    *(_QWORD *)&v28 = v15;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, &v28);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v28);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t **v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    return 0;
  v7 = (uint64_t **)(a1 + 24);
  if (*(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 16) == 27)
  {
LABEL_7:
    if ((v3 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v9 = *v7;
    v10 = *v9;
    if (!*v9)
    {
      v22 = 0;
      v20 = 0u;
      v21 = 0u;
      goto LABEL_17;
    }
    if (*(double *)a1 >= a3)
    {
      v15 = (__int128 *)v9[4];
      v12 = *((_DWORD *)v15 + 8);
      v14 = *v15;
      v13 = v15[1];
    }
    else
    {
      if (*(double *)(a1 + 8) > a3 && v10 - 2 >= (unint64_t)(int)((a3 - *(double *)a1) / *(double *)(a1 + 16)))
      {
        v19 = pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
        v23 = *(_OWORD *)v19;
        v24 = *(_OWORD *)(v19 + 16);
        v25 = *(_DWORD *)(v19 + 32);
        pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=();
        v20 = v23;
        v21 = v24;
        v22 = v25;
        pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator+=();
LABEL_17:
        *((_QWORD *)&v23 + 1) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(void)::ti
                              + 2;
        v16 = operator new();
        *(_OWORD *)v16 = v20;
        *(_OWORD *)(v16 + 16) = v21;
        *(_DWORD *)(v16 + 32) = v22;
        v17 = (unsigned int *)(v16 + 36);
        atomic_store(0, (unsigned int *)(v16 + 36));
        *(_QWORD *)&v23 = v16;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, &v23);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v23);
        return 1;
      }
      v11 = v9[4] + 36 * v10;
      v12 = *(_DWORD *)(v11 - 4);
      v13 = *(_OWORD *)(v11 - 20);
      v14 = *(_OWORD *)(v11 - 36);
    }
    v20 = v14;
    v21 = v13;
    v22 = v12;
    goto LABEL_17;
  }
  if ((v3 & 4) == 0)
    return 0;
  if ((_DWORD)result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    goto LABEL_7;
  }
  return result;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (!*v9)
    {
      v23 = 0;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      goto LABEL_12;
    }
    if (*(double *)a1 >= a3)
    {
      v13 = (__int128 *)v9[4];
      v19 = *v13;
      v12 = v13[1];
      v23 = *((_QWORD *)v13 + 8);
      v21 = v13[2];
      v22 = v13[3];
    }
    else
    {
      if (*(double *)(a1 + 8) > a3 && v10 - 2 >= (unint64_t)(int)((a3 - *(double *)a1) / *(double *)(a1 + 16)))
      {
        v18 = pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=();
        v25 = *(_OWORD *)(v18 + 16);
        v26 = *(_OWORD *)(v18 + 32);
        v27 = *(_OWORD *)(v18 + 48);
        v28 = *(_QWORD *)(v18 + 64);
        v24 = *(_OWORD *)v18;
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=();
        v21 = v26;
        v22 = v27;
        v23 = v28;
        v19 = v24;
        v20 = v25;
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=();
LABEL_12:
        *((_QWORD *)&v24 + 1) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(void)::ti
                              + 2;
        v14 = operator new();
        *(_OWORD *)(v14 + 32) = v21;
        *(_OWORD *)(v14 + 48) = v22;
        *(_QWORD *)(v14 + 64) = v23;
        *(_OWORD *)v14 = v19;
        *(_OWORD *)(v14 + 16) = v20;
        v15 = (unsigned int *)(v14 + 72);
        atomic_store(0, (unsigned int *)(v14 + 72));
        *(_QWORD *)&v24 = v14;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, &v24);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
        return v7;
      }
      v11 = v9[4] + 72 * v10;
      v19 = *(_OWORD *)(v11 - 72);
      v12 = *(_OWORD *)(v11 - 56);
      v23 = *(_QWORD *)(v11 - 8);
      v21 = *(_OWORD *)(v11 - 40);
      v22 = *(_OWORD *)(v11 - 24);
    }
    v20 = v12;
    goto LABEL_12;
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t v3;
  uint64_t **v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    return 0;
  v7 = (uint64_t **)(a1 + 24);
  if (*(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 16) == 26)
  {
LABEL_7:
    if ((v3 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    else
      v9 = *v7;
    v10 = *v9;
    if (!*v9)
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      goto LABEL_17;
    }
    if (*(double *)a1 >= a3)
    {
      v16 = (__int128 *)v9[4];
      v12 = v16[2];
      v13 = v16[3];
      v15 = *v16;
      v14 = v16[1];
    }
    else
    {
      if (*(double *)(a1 + 8) > a3 && v10 - 2 >= (unint64_t)(int)((a3 - *(double *)a1) / *(double *)(a1 + 16)))
      {
        v20 = (__int128 *)pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
        v25 = *v20;
        v26 = v20[1];
        v27 = v20[2];
        v28 = v20[3];
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
        v21 = v25;
        v22 = v26;
        v23 = v27;
        v24 = v28;
        pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator+=();
LABEL_17:
        *((_QWORD *)&v25 + 1) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(void)::ti
                              + 2;
        v17 = operator new();
        *(_OWORD *)v17 = v21;
        *(_OWORD *)(v17 + 16) = v22;
        *(_OWORD *)(v17 + 32) = v23;
        *(_OWORD *)(v17 + 48) = v24;
        v18 = (unsigned int *)(v17 + 64);
        atomic_store(0, (unsigned int *)(v17 + 64));
        *(_QWORD *)&v25 = v17;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, &v25);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v25);
        return 1;
      }
      v11 = v9[4] + (v10 << 6);
      v12 = *(_OWORD *)(v11 - 32);
      v13 = *(_OWORD *)(v11 - 16);
      v15 = *(_OWORD *)(v11 - 64);
      v14 = *(_OWORD *)(v11 - 48);
    }
    v21 = v15;
    v22 = v14;
    v23 = v12;
    v24 = v13;
    goto LABEL_17;
  }
  if ((v3 & 4) == 0)
    return 0;
  if ((_DWORD)result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    goto LABEL_7;
  }
  return result;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (!*v9)
    {
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      goto LABEL_12;
    }
    if (*(double *)a1 >= a3)
    {
      v16 = (__int128 *)v9[4];
      v22 = *v16;
      v23 = v16[1];
      v24 = v16[2];
      v25 = v16[3];
      v12 = v16[4];
      v13 = v16[5];
      v14 = v16[6];
      v15 = v16[7];
    }
    else
    {
      if (*(double *)(a1 + 8) > a3 && v10 - 2 >= (unint64_t)(int)((a3 - *(double *)a1) / *(double *)(a1 + 16)))
      {
        v21 = (__int128 *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=();
        v34 = v21[4];
        v35 = v21[5];
        v36 = v21[6];
        v37 = v21[7];
        v30 = *v21;
        v31 = v21[1];
        v32 = v21[2];
        v33 = v21[3];
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=();
        v26 = v34;
        v27 = v35;
        v28 = v36;
        v29 = v37;
        v22 = v30;
        v23 = v31;
        v24 = v32;
        v25 = v33;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=();
LABEL_12:
        *((_QWORD *)&v30 + 1) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(void)::ti
                              + 2;
        v17 = operator new();
        *(_OWORD *)(v17 + 64) = v26;
        *(_OWORD *)(v17 + 80) = v27;
        *(_OWORD *)(v17 + 96) = v28;
        *(_OWORD *)(v17 + 112) = v29;
        *(_OWORD *)v17 = v22;
        *(_OWORD *)(v17 + 16) = v23;
        *(_OWORD *)(v17 + 32) = v24;
        *(_OWORD *)(v17 + 48) = v25;
        v18 = (unsigned int *)(v17 + 128);
        atomic_store(0, (unsigned int *)(v17 + 128));
        *(_QWORD *)&v30 = v17;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, &v30);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v30);
        return v7;
      }
      v11 = v9[4] + (v10 << 7);
      v22 = *(_OWORD *)(v11 - 128);
      v23 = *(_OWORD *)(v11 - 112);
      v24 = *(_OWORD *)(v11 - 96);
      v25 = *(_OWORD *)(v11 - 80);
      v12 = *(_OWORD *)(v11 - 64);
      v13 = *(_OWORD *)(v11 - 48);
      v14 = *(_OWORD *)(v11 - 32);
      v15 = *(_OWORD *)(v11 - 16);
    }
    v28 = v14;
    v29 = v15;
    v26 = v12;
    v27 = v13;
    goto LABEL_12;
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  uint64_t v15;
  double v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  unint64_t v20;
  float v21;
  unsigned int v22;
  float v23;
  unsigned int v24;
  unint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t *)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v10 = **(_QWORD **)(v9 + 32);
      }
      else if (*(double *)(a1 + 8) > a3
             && (v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      {
        v15 = v13;
        v16 = (a3 - (v11 + (double)v13 * v12)) / v12;
        v17 = *(_QWORD *)(v9 + 32);
        v18 = 1.0 - v16;
        if (v18 == 0.0)
        {
          v19 = HIWORD(LODWORD(v18));
        }
        else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v18) >> 23)))
        {
          v19 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v18) >> 23))
              + (((LODWORD(v18) & 0x7FFFFF) + ((LODWORD(v18) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v19) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v18));
        }
        v26[0] = *(_QWORD *)(v17 + 8 * v15);
        pxrInternal__aapl__pxrReserved__::GfQuath::operator*=((unsigned __int16 *)v26, v19);
        v20 = v26[0];
        v21 = v16;
        if (v21 == 0.0)
        {
          v22 = HIWORD(LODWORD(v21));
        }
        else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v21) >> 23)))
        {
          v22 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v21) >> 23))
              + (((LODWORD(v21) & 0x7FFFFF) + ((LODWORD(v21) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v22) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v21));
        }
        v26[0] = *(_QWORD *)(v17 + 8 * ((int)v15 + 1));
        pxrInternal__aapl__pxrReserved__::GfQuath::operator*=((unsigned __int16 *)v26, v22);
        v25 = v26[0];
        v26[0] = v20;
        v23 = *(float *)(MEMORY[0x24BEE8B20] + ((v20 >> 46) & 0x3FFFC))
            + *(float *)(MEMORY[0x24BEE8B20] + ((v25 >> 46) & 0x3FFFC));
        if (v23 == 0.0)
        {
          v24 = HIWORD(LODWORD(v23));
        }
        else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v23) >> 23)))
        {
          v24 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v23) >> 23))
              + (((LODWORD(v23) & 0x7FFFFF) + ((LODWORD(v23) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v24) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v23));
        }
        HIWORD(v26[0]) = v24;
        pxrInternal__aapl__pxrReserved__::GfVec3h::operator+=((unsigned __int16 *)v26, (unsigned __int16 *)&v25);
        v10 = v26[0];
      }
      else
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v10 - 8);
      }
    }
    v26[0] = v10;
    v26[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>(void)::ti
           + 1;
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v26);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v26);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  float32x4_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  double v19;
  float v20;
  float32x4_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (*v9)
    {
      v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v14 = *(float32x4_t *)v9[4];
      }
      else if (*(double *)(a1 + 8) > a3
             && (v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      {
        v19 = (a3 - (v11 + (double)v13 * v12)) / v12;
        v20 = 1.0 - v19;
        *(float *)&v19 = v19;
        v14 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v9[4] + 16 * v13), v20), vmulq_n_f32(*(float32x4_t *)(v9[4] + 16 * (v13 + 1)), *(float *)&v19));
      }
      else
      {
        v14 = *(float32x4_t *)(v9[4] + 16 * v10 - 16);
      }
      v21 = v14;
    }
    v22[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>(void)::ti;
    v15 = operator new();
    *(float32x4_t *)v15 = v21;
    v16 = (unsigned int *)(v15 + 16);
    atomic_store(0, (unsigned int *)(v15 + 16));
    v22[0] = v15;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v22);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v22);
  }
  return v7;
}

uint64_t getSampledValueAtTimeHelper<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1, _QWORD *a2, double a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v21;
  double v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t **)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 24));
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    else
      v9 = *v6;
    v10 = *v9;
    if (*v9)
    {
      v11 = *(double *)a1;
      if (*(double *)a1 >= a3)
      {
        v16 = (float64x2_t *)v9[4];
        v27 = *v16;
        v15 = v16[1];
      }
      else if (*(double *)(a1 + 8) > a3
             && (v12 = *(double *)(a1 + 16), v13 = (int)((a3 - v11) / v12), v10 - 2 >= (unint64_t)v13))
      {
        v21 = v13;
        v22 = (a3 - (v11 + (double)v13 * v12)) / v12;
        v23 = v9[4];
        v24 = (float64x2_t *)(v23 + 32 * v21);
        v25 = (float64x2_t *)(v23 + 32 * ((int)v21 + 1));
        v27 = vaddq_f64(vmulq_n_f64(*v24, 1.0 - v22), vmulq_n_f64(*v25, v22));
        v15 = vaddq_f64(vmulq_n_f64(v24[1], 1.0 - v22), vmulq_n_f64(v25[1], v22));
      }
      else
      {
        v14 = v9[4] + 32 * v10;
        v27 = *(float64x2_t *)(v14 - 32);
        v15 = *(float64x2_t *)(v14 - 16);
      }
      v26 = v15;
    }
    v28[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>(void)::ti;
    v17 = operator new();
    *(float64x2_t *)v17 = v27;
    *(float64x2_t *)(v17 + 16) = v26;
    v18 = (unsigned int *)(v17 + 32);
    atomic_store(0, (unsigned int *)(v17 + 32));
    v28[0] = v17;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v28);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v28);
  }
  return v7;
}

uint64_t TimeSampledDataT::getValueAtTime<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, double a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  int v10;
  double v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  unsigned int v22;
  float v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  v4 = (uint64_t *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 4) != 0)
    v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
  else
    v6 = *v4;
  v7 = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
    return 0;
  v8 = *(double *)a1;
  if (*(double *)a1 >= a2)
    return **(unsigned int **)(v6 + 32);
  if (*(double *)(a1 + 8) <= a2)
    return *(unsigned int *)(*(_QWORD *)(v6 + 32) + 4 * v7 - 4);
  v9 = *(double *)(a1 + 16);
  v10 = (int)((a2 - v8) / v9);
  if (v7 - 2 < (unint64_t)v10)
    return *(unsigned int *)(*(_QWORD *)(v6 + 32) + 4 * v7 - 4);
  v13 = (a2 - (v8 + (double)v10 * v9)) / v9;
  v14 = *(_QWORD *)(v6 + 32);
  v15 = v10 + 1;
  v25 = *(_DWORD *)(v14 + 4 * v10);
  pxrInternal__aapl__pxrReserved__::GfVec2h::operator*=((unsigned __int16 *)&v25, 1.0 - v13);
  v16 = v25;
  v26 = *(_DWORD *)(v14 + 4 * v15);
  pxrInternal__aapl__pxrReserved__::GfVec2h::operator*=((unsigned __int16 *)&v26, v13);
  v17 = (unint64_t)v26 >> 16;
  v18 = v16 >> 16;
  v19 = (unsigned __int16)v16;
  v20 = MEMORY[0x24BEE8B20];
  v21 = *(float *)(MEMORY[0x24BEE8B20] + 4 * v19) + *(float *)(MEMORY[0x24BEE8B20] + 4 * (unsigned __int16)v26);
  if (v21 == 0.0)
  {
    v22 = HIWORD(LODWORD(v21));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v21) >> 23)))
  {
    v22 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v21) >> 23))
        + (((LODWORD(v21) & 0x7FFFFF) + ((LODWORD(v21) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v22) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v21));
  }
  v23 = *(float *)(v20 + 4 * v18) + *(float *)(v20 + 4 * v17);
  if (v23 == 0.0)
  {
    v24 = HIWORD(LODWORD(v23));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v23) >> 23)))
  {
    v24 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v23) >> 23))
        + (((LODWORD(v23) & 0x7FFFFF) + ((LODWORD(v23) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v24) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v23));
  }
  return (unsigned __int16)v22 | ((unsigned __int16)v24 << 16);
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfVec2h::operator*=(unsigned __int16 *a1, double a2)
{
  float v3;
  uint64_t v4;
  float v5;
  unsigned int v6;
  float v7;
  unsigned int v8;

  v3 = a2;
  v4 = MEMORY[0x24BEE8B20];
  v5 = *(float *)(MEMORY[0x24BEE8B20] + 4 * *a1) * v3;
  if (v5 == 0.0)
  {
    v6 = HIWORD(LODWORD(v5));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v5) >> 23)))
  {
    v6 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v5) >> 23))
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  *a1 = v6;
  v7 = *(float *)(v4 + 4 * a1[1]) * v3;
  if (v7 == 0.0)
  {
    v8 = HIWORD(LODWORD(v7));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v7) >> 23)))
  {
    v8 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v7) >> 23))
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  a1[1] = v8;
  return a1;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfVec4h::operator*=(unsigned __int16 *a1, double a2)
{
  float v3;
  uint64_t v4;
  float v5;
  unsigned int v6;
  float v7;
  unsigned int v8;
  float v9;
  unsigned int v10;
  float v11;
  unsigned int v12;

  v3 = a2;
  v4 = MEMORY[0x24BEE8B20];
  v5 = *(float *)(MEMORY[0x24BEE8B20] + 4 * *a1) * v3;
  if (v5 == 0.0)
  {
    v6 = HIWORD(LODWORD(v5));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v5) >> 23)))
  {
    v6 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v5) >> 23))
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  *a1 = v6;
  v7 = *(float *)(v4 + 4 * a1[1]) * v3;
  if (v7 == 0.0)
  {
    v8 = HIWORD(LODWORD(v7));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v7) >> 23)))
  {
    v8 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v7) >> 23))
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  a1[1] = v8;
  v9 = *(float *)(v4 + 4 * a1[2]) * v3;
  if (v9 == 0.0)
  {
    v10 = HIWORD(LODWORD(v9));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v9) >> 23)))
  {
    v10 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v9) >> 23))
        + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
  }
  a1[2] = v10;
  v11 = *(float *)(v4 + 4 * a1[3]) * v3;
  if (v11 == 0.0)
  {
    v12 = HIWORD(LODWORD(v11));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v11) >> 23)))
  {
    v12 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v11) >> 23))
        + (((LODWORD(v11) & 0x7FFFFF) + ((LODWORD(v11) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v12) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v11));
  }
  a1[3] = v12;
  return a1;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfQuath::operator*=(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  unsigned int v6;

  v3 = MEMORY[0x24BEE8B20];
  v4 = a2;
  v5 = *(float *)(MEMORY[0x24BEE8B20] + 4 * a1[3]) * *(float *)(MEMORY[0x24BEE8B20] + 4 * a2);
  if (v5 == 0.0)
  {
    v6 = HIWORD(LODWORD(v5));
  }
  else if (*(_WORD *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v5) >> 23)))
  {
    v6 = *(unsigned __int16 *)(MEMORY[0x24BEE8B10] + 2 * (LODWORD(v5) >> 23))
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  a1[3] = v6;
  pxrInternal__aapl__pxrReserved__::GfVec3h::operator*=(a1, *(float *)(v3 + 4 * v4));
  return a1;
}

_QWORD *RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(RIO_MTLX::PortElement *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v, "nodename");
  }
  return RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v;
}

void sub_2301C8734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(RIO_MTLX::PortElement *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v, "nodegraph");
  }
  return RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v;
}

void sub_2301C87B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(RIO_MTLX::PortElement *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(void)::v, "output");
  }
  return RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(void)::v;
}

void sub_2301C882C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(RIO_MTLX::PortElement *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(void)::v, "channels");
  }
  return RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(void)::v;
}

void sub_2301C88A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(RIO_MTLX::InterfaceElement *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(void)::v, "nodedef");
  }
  return RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(void)::v;
}

void sub_2301C8924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE(RIO_MTLX::InterfaceElement *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE(void)::v, "target");
  }
  return RIO_MTLX::InterfaceElement::TARGET_ATTRIBUTE(void)::v;
}

void sub_2301C89A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(RIO_MTLX::InterfaceElement *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(void)::v, "version");
  }
  return RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(void)::v;
}

void sub_2301C8A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::InterfaceElement::DEFAULT_VERSION_ATTRIBUTE(RIO_MTLX::InterfaceElement *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::InterfaceElement::DEFAULT_VERSION_ATTRIBUTE(void)::v, "isdefaultversion");
  }
  return RIO_MTLX::InterfaceElement::DEFAULT_VERSION_ATTRIBUTE(void)::v;
}

void sub_2301C8A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RIO_MTLX::Input::DEFAULT_GEOM_PROP_ATTRIBUTE(RIO_MTLX::Input *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_58);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_58))
    {
      std::string::basic_string[abi:ne180100]<0>(qword_255E553F8, "defaultgeomprop");
      __cxa_guard_release(&_MergedGlobals_58);
    }
  }
}

void sub_2301C8B10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_58);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::Output::DEFAULT_INPUT_ATTRIBUTE(RIO_MTLX::Output *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::Output::DEFAULT_INPUT_ATTRIBUTE(void)::v, "defaultinput");
  }
  return RIO_MTLX::Output::DEFAULT_INPUT_ATTRIBUTE(void)::v;
}

void sub_2301C8B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__int128 *RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(RIO_MTLX::PortElement *this)
{
  unsigned __int8 v1;
  unint64_t i;
  _DWORD v4[2];
  uint64_t v5[3];
  void *__p[2];
  char v7;
  _DWORD v8[2];
  uint64_t v9[3];
  void *v10[2];
  char v11;
  int v12;
  uint64_t v13[3];
  void *v14[2];
  char v15;
  _DWORD v16[2];
  uint64_t v17[3];
  void *v18[2];
  char v19;
  _DWORD v20[2];
  uint64_t v21[3];
  void *v22[2];
  char v23;
  int v24;
  uint64_t v25[3];
  void *v26[2];
  char v27;
  std::string v28[2];
  std::string v29[2];
  std::string v30[2];
  std::string v31[2];
  std::string v32[2];
  std::string v33[2];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "float");
    v24 = 2020749616;
    std::set<char>::set[abi:ne180100](v25, (char *)&v24, 4);
    std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(v28, (__int128 *)v26, v25);
    std::string::basic_string[abi:ne180100]<0>(v22, "color3");
    qmemcpy(v20, "01rgb", 5);
    std::set<char>::set[abi:ne180100](v21, (char *)v20, 5);
    std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(v29, (__int128 *)v22, v21);
    std::string::basic_string[abi:ne180100]<0>(v18, "color4");
    qmemcpy(v16, "01rgba", 6);
    std::set<char>::set[abi:ne180100](v17, (char *)v16, 6);
    std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(v30, (__int128 *)v18, v17);
    std::string::basic_string[abi:ne180100]<0>(v14, "vector2");
    v12 = 2037920048;
    std::set<char>::set[abi:ne180100](v13, (char *)&v12, 4);
    std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(v31, (__int128 *)v14, v13);
    std::string::basic_string[abi:ne180100]<0>(v10, "vector3");
    qmemcpy(v8, "01xyz", 5);
    std::set<char>::set[abi:ne180100](v9, (char *)v8, 5);
    std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(v32, (__int128 *)v10, v9);
    std::string::basic_string[abi:ne180100]<0>(__p, "vector4");
    qmemcpy(v4, "01xyzw", 6);
    std::set<char>::set[abi:ne180100](v5, (char *)v4, 6);
    std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(v33, (__int128 *)__p, v5);
    std::unordered_map<std::string,std::set<char>>::unordered_map((uint64_t)v28, 6);
    for (i = 240; i != -48; i -= 48)
      std::pair<std::string const,std::set<char>>::~pair((uint64_t)&v28[i / 0x18]);
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((_QWORD *)v5[1]);
    if (v7 < 0)
      operator delete(__p[0]);
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((_QWORD *)v9[1]);
    if (v11 < 0)
      operator delete(v10[0]);
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((_QWORD *)v13[1]);
    if (v15 < 0)
      operator delete(v14[0]);
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((_QWORD *)v17[1]);
    if (v19 < 0)
      operator delete(v18[0]);
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((_QWORD *)v21[1]);
    if (v23 < 0)
      operator delete(v22[0]);
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((_QWORD *)v25[1]);
    if (v27 < 0)
      operator delete(v26[0]);
  }
  return &RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v;
}

void sub_2301C8E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,_QWORD *a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,_QWORD *a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,_QWORD *a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,_QWORD *a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a64;
  void *a66;
  char a71;
  uint64_t v71;
  uint64_t i;

  for (i = 240; i != -48; i -= 48)
    std::pair<std::string const,std::set<char>>::~pair(v71 + i);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a14);
  if (a21 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a24);
  if (a31 < 0)
    operator delete(a26);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a34);
  if (a41 < 0)
    operator delete(a36);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a44);
  if (a51 < 0)
    operator delete(a46);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a54);
  if (a61 < 0)
    operator delete(a56);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a64);
  if (a71 < 0)
    operator delete(a66);
  _Unwind_Resume(a1);
}

void sub_2301C9004()
{
  JUMPOUT(0x2301C8FA0);
}

void sub_2301C9010()
{
  JUMPOUT(0x2301C8FB0);
}

void sub_2301C901C()
{
  JUMPOUT(0x2301C8FB0);
}

void sub_2301C902C()
{
  JUMPOUT(0x2301C8FB8);
}

void sub_2301C903C()
{
  JUMPOUT(0x2301C8FF0);
}

uint64_t std::pair<std::string const,std::set<char>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

__int128 *RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(RIO_MTLX::PortElement *this)
{
  unsigned __int8 v1;
  uint64_t i;
  _QWORD v4[4];
  _QWORD v5[4];
  _QWORD v6[4];
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "float");
    v4[3] = 1;
    std::string::basic_string[abi:ne180100]<0>(v5, "color3");
    v5[3] = 3;
    std::string::basic_string[abi:ne180100]<0>(v6, "color4");
    v6[3] = 4;
    std::string::basic_string[abi:ne180100]<0>(v7, "vector2");
    v7[3] = 2;
    std::string::basic_string[abi:ne180100]<0>(v8, "vector3");
    v8[3] = 3;
    std::string::basic_string[abi:ne180100]<0>(v9, "vector4");
    v9[3] = 4;
    std::unordered_map<std::string,unsigned long>::unordered_map((uint64_t)v4, 6);
    for (i = 0; i != -24; i -= 4)
    {
      if (SHIBYTE(v9[i + 2]) < 0)
        operator delete((void *)v9[i]);
    }
  }
  return &RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv;
}

void sub_2301C91EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 183) < 0)
      operator delete(*(void **)(v1 + v3 + 160));
    v3 -= 32;
    if (v3 == -192)
    {
      _Unwind_Resume(a1);
    }
  }
}

void sub_2301C9260()
{
  JUMPOUT(0x2301C924CLL);
}

void RIO_MTLX::PortElement::setConnectedNode(RIO_MTLX::PortElement *a1, const std::string **a2)
{
  const std::string *v3;

  if (*a2)
  {
    v3 = *a2 + 2;
    RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(a1);
    RIO_MTLX::Element::setAttribute((uint64_t *)a1, (__int128 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v, v3);
  }
  else
  {
    RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(a1);
    RIO_MTLX::Element::removeAttribute(a1, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v);
  }
}

void RIO_MTLX::PortElement::getConnectedNode(RIO_MTLX::PortElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *NodeName;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::GraphElement>((uint64_t)this, &v9);
  v4 = v9;
  if (v9)
  {
    NodeName = RIO_MTLX::PortElement::getNodeName(this);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Node>(v4, (unsigned __int8 *)NodeName, a2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2301C9358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::PortElement::validate(RIO_MTLX::PortElement *a1, std::string *a2)
{
  RIO_MTLX::PortElement *v4;
  std::string *NodeName;
  std::string *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *OutputString;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  std::string *v14;
  uint64_t *v15;
  size_t *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  char v29;
  char v30;
  uint64_t *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  void *v34;
  std::string *NodeGraph;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  size_t *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  int v48;
  unsigned __int8 *v49;
  __int128 v50;
  unint64_t *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned __int8 *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  char v64;
  char v65;
  unint64_t *v66;
  uint64_t v67;
  RIO_MTLX::PortElement *v68;
  uint64_t *Channels;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  const void **v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned __int8 *v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  char v85;
  char v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unsigned int v90;
  int v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  void *v96[2];
  char v97;
  const void *v98[2];
  char v99;
  const void *v100[2];
  char v101;
  const void *v102[2];
  char v103;
  void *v104[2];
  char v105;
  void *__p[2];
  char v107;
  void *v108[2];
  char v109;
  __int128 v110;
  __int128 v111;
  const void *v112[2];
  char v113;
  __int128 v114;
  std::string *v115;
  std::__shared_weak_count *v116;
  unsigned __int8 v117;

  v117 = 1;
  v4 = (RIO_MTLX::PortElement *)(*(_QWORD *(**)(std::string **__return_ptr))(*(_QWORD *)a1 + 64))(&v115);
  RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(v4);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v)|| (RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(0), std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(void)::v)))
  {
    NodeName = (std::string *)RIO_MTLX::PortElement::getNodeName(a1);
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeGraph>((uint64_t)a1, NodeName, &v114);
    if (!(_QWORD)v114)
    {
      v6 = v115;
      std::string::basic_string[abi:ne180100]<0>(v112, "Invalid port connection");
      RIO_MTLX::Element::validateRequire((uint64_t)a1, v6 != 0, &v117, a2, v112);
      if (v113 < 0)
        operator delete((void *)v112[0]);
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
    if (*((_QWORD *)&v114 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  if (v115)
  {
    OutputString = RIO_MTLX::PortElement::getOutputString(a1);
    v11 = (unsigned __int8 *)OutputString;
    v12 = *((unsigned __int8 *)OutputString + 23);
    if ((v12 & 0x80u) != 0)
      v12 = OutputString[1];
    if (v12)
    {
      v114 = 0uLL;
      RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)OutputString);
      v13 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v);
      if (v13)
      {
        v14 = v115;
        v15 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v13);
        RIO_MTLX::Node::getNodeDef(v14, (uint64_t)v15, 0, (RIO_MTLX::InterfaceElement **)&v111);
        if ((_QWORD)v111)
        {
          RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(v111, v11, &v110);
          v114 = v110;
          if ((_QWORD)v110)
          {
            v16 = (size_t *)(*(uint64_t (**)(std::string *))(v115->__r_.__value_.__r.__words[0] + 56))(v115);
            v17 = (unsigned __int8 *)RIO_MTLX::MULTI_OUTPUT_TYPE_STRING((RIO_MTLX *)v16);
            v18 = *((unsigned __int8 *)v16 + 23);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v16 + 23);
            else
              v19 = v16[1];
            v20 = v17[23];
            v21 = (char)v20;
            if ((v20 & 0x80u) != 0)
              v20 = *((_QWORD *)v17 + 1);
            if (v19 == v20)
            {
              if (v21 >= 0)
                v22 = v17;
              else
                v22 = *(unsigned __int8 **)v17;
              if ((v18 & 0x80) != 0)
              {
                v30 = memcmp((const void *)*v16, v22, v16[1]) == 0;
              }
              else if (*((_BYTE *)v16 + 23))
              {
                v23 = v18 - 1;
                do
                {
                  v25 = *(unsigned __int8 *)v16;
                  v16 = (size_t *)((char *)v16 + 1);
                  v24 = v25;
                  v27 = *v22++;
                  v26 = v27;
                  v28 = v23-- != 0;
                  v29 = v28;
                  v30 = v24 == v26;
                }
                while (v24 == v26 && (v29 & 1) != 0);
              }
              else
              {
                v30 = 1;
              }
            }
            else
            {
              v30 = 0;
            }
            std::string::basic_string[abi:ne180100]<0>(v108, "Multi-output type expected in port connection");
            RIO_MTLX::Element::validateRequire((uint64_t)a1, v30, &v117, a2, (const void **)v108);
            if (v109 < 0)
              operator delete(v108[0]);
          }
        }
        else
        {
          v114 = 0uLL;
        }
        v40 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
        if (*((_QWORD *)&v111 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
          do
            v42 = __ldaxr(v66);
          while (__stlxr(v42 - 1, v66));
          goto LABEL_101;
        }
      }
      else
      {
        RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(0);
        if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v))
        {
          RIO_MTLX::Element::getDocument(a1, &v110);
          RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(v110, v11, &v111);
          v50 = v111;
          v111 = 0uLL;
          v114 = v50;
          v40 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
          if (!*((_QWORD *)&v110 + 1))
            goto LABEL_103;
          v51 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
          do
            v42 = __ldaxr(v51);
          while (__stlxr(v42 - 1, v51));
          goto LABEL_101;
        }
        NodeGraph = (std::string *)RIO_MTLX::Implementation::getNodeGraph(a1);
        RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeGraph>((uint64_t)a1, NodeGraph, &v111);
        if ((_QWORD)v111)
        {
          RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(v111, v11, &v110);
          v114 = v110;
          RIO_MTLX::NodeGraph::getNodeDef((std::string *)v111, &v110);
          v36 = v110;
          if (*((_QWORD *)&v110 + 1))
          {
            v37 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 16))(*((_QWORD *)&v36 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v36 + 1));
            }
          }
          if ((_QWORD)v36)
          {
            v39 = *(_QWORD *)(v111 + 264);
            std::string::basic_string[abi:ne180100]<0>(__p, "Multi-output type expected in port connection");
            RIO_MTLX::Element::validateRequire((uint64_t)a1, v39 > 1, &v117, a2, (const void **)__p);
            if (v107 < 0)
              operator delete(__p[0]);
          }
        }
        v40 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
        if (*((_QWORD *)&v111 + 1))
        {
          v41 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
LABEL_101:
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
LABEL_103:
      v67 = v114;
      std::string::basic_string[abi:ne180100]<0>(v104, "No output found for port connection");
      RIO_MTLX::Element::validateRequire((uint64_t)a1, v67 != 0, &v117, a2, (const void **)v104);
      if (v105 < 0)
      {
        operator delete(v104[0]);
        if (!v67)
          goto LABEL_134;
      }
      else if (!v67)
      {
        goto LABEL_134;
      }
      RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(v68);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(void)::v))
      {
        v73 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::PortElement *))(*(_QWORD *)a1 + 56))(a1);
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 56))(v67);
        v75 = v73[23];
        if ((v75 & 0x80u) == 0)
          v76 = v73[23];
        else
          v76 = *((_QWORD *)v73 + 1);
        v77 = *(unsigned __int8 *)(v74 + 23);
        v78 = (char)v77;
        if ((v77 & 0x80u) != 0)
          v77 = *(_QWORD *)(v74 + 8);
        if (v76 == v77)
        {
          if (v78 >= 0)
            v79 = (unsigned __int8 *)v74;
          else
            v79 = *(unsigned __int8 **)v74;
          if ((v75 & 0x80) != 0)
          {
            v86 = memcmp(*(const void **)v73, v79, *((_QWORD *)v73 + 1)) == 0;
          }
          else if (v73[23])
          {
            v80 = v75 - 1;
            do
            {
              v82 = *v73++;
              v81 = v82;
              v84 = *v79++;
              v83 = v84;
              v28 = v80-- != 0;
              v85 = v28;
              v86 = v81 == v83;
            }
            while (v81 == v83 && (v85 & 1) != 0);
          }
          else
          {
            v86 = 1;
          }
        }
        else
        {
          v86 = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(v100, "Mismatched types in port connection");
        RIO_MTLX::Element::validateRequire((uint64_t)a1, v86, &v117, a2, v100);
        if ((v101 & 0x80000000) == 0)
          goto LABEL_134;
        v72 = v100;
        goto LABEL_133;
      }
      Channels = RIO_MTLX::PortElement::getChannels(a1);
      v70 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 56))(v67);
      v71 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::PortElement *))(*(_QWORD *)a1 + 56))(a1);
      LOBYTE(Channels) = RIO_MTLX::PortElement::validChannelsString((uint64_t)Channels, v70, v71);
      std::string::basic_string[abi:ne180100]<0>(v102, "Invalid channels string in port connection");
      RIO_MTLX::Element::validateRequire((uint64_t)a1, (char)Channels, &v117, a2, v102);
      if (v103 < 0)
      {
        v72 = v102;
LABEL_133:
        operator delete((void *)*v72);
      }
LABEL_134:
      v87 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (*((_QWORD *)&v114 + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      goto LABEL_143;
    }
    RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE((RIO_MTLX::PortElement *)OutputString);
    if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(void)::v))
    {
      v31 = RIO_MTLX::PortElement::getChannels(a1);
      v32 = (unsigned __int8 *)(*(uint64_t (**)(std::string *))(v115->__r_.__value_.__r.__words[0] + 56))(v115);
      v33 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::PortElement *))(*(_QWORD *)a1 + 56))(a1);
      LOBYTE(v31) = RIO_MTLX::PortElement::validChannelsString((uint64_t)v31, v32, v33);
      std::string::basic_string[abi:ne180100]<0>(v98, "Invalid channels string in port connection");
      RIO_MTLX::Element::validateRequire((uint64_t)a1, (char)v31, &v117, a2, v98);
      if ((v99 & 0x80000000) == 0)
        goto LABEL_143;
      v34 = (void *)v98[0];
LABEL_142:
      operator delete(v34);
      goto LABEL_143;
    }
    v43 = (size_t *)(*(uint64_t (**)(std::string *))(v115->__r_.__value_.__r.__words[0] + 56))(v115);
    v44 = (unsigned __int8 *)RIO_MTLX::MULTI_OUTPUT_TYPE_STRING((RIO_MTLX *)v43);
    v45 = *((unsigned __int8 *)v43 + 23);
    if ((v45 & 0x80u) == 0)
      v46 = *((unsigned __int8 *)v43 + 23);
    else
      v46 = v43[1];
    v47 = v44[23];
    v48 = (char)v47;
    if ((v47 & 0x80u) != 0)
      v47 = *((_QWORD *)v44 + 1);
    if (v46 == v47)
    {
      if (v48 >= 0)
        v49 = v44;
      else
        v49 = *(unsigned __int8 **)v44;
      if ((v45 & 0x80) != 0)
      {
        if (!memcmp((const void *)*v43, v49, v43[1]))
          goto LABEL_143;
      }
      else
      {
        if (!*((_BYTE *)v43 + 23))
          goto LABEL_143;
        while (*(unsigned __int8 *)v43 == *v49)
        {
          v43 = (size_t *)((char *)v43 + 1);
          ++v49;
          if (!--v45)
            goto LABEL_143;
        }
      }
    }
    v52 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::PortElement *))(*(_QWORD *)a1 + 56))(a1);
    v53 = (*(uint64_t (**)(std::string *))(v115->__r_.__value_.__r.__words[0] + 56))(v115);
    v54 = v52[23];
    if ((v54 & 0x80u) == 0)
      v55 = v52[23];
    else
      v55 = *((_QWORD *)v52 + 1);
    v56 = *(unsigned __int8 *)(v53 + 23);
    v57 = (char)v56;
    if ((v56 & 0x80u) != 0)
      v56 = *(_QWORD *)(v53 + 8);
    if (v55 == v56)
    {
      if (v57 >= 0)
        v58 = (unsigned __int8 *)v53;
      else
        v58 = *(unsigned __int8 **)v53;
      if ((v54 & 0x80) != 0)
      {
        v65 = memcmp(*(const void **)v52, v58, *((_QWORD *)v52 + 1)) == 0;
      }
      else if (v52[23])
      {
        v59 = v54 - 1;
        do
        {
          v61 = *v52++;
          v60 = v61;
          v63 = *v58++;
          v62 = v63;
          v28 = v59-- != 0;
          v64 = v28;
          v65 = v60 == v62;
        }
        while (v60 == v62 && (v64 & 1) != 0);
      }
      else
      {
        v65 = 1;
      }
    }
    else
    {
      v65 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v96, "Mismatched types in port connection");
    RIO_MTLX::Element::validateRequire((uint64_t)a1, v65, &v117, a2, (const void **)v96);
    if (v97 < 0)
    {
      v34 = v96[0];
      goto LABEL_142;
    }
  }
LABEL_143:
  v90 = RIO_MTLX::ValueElement::validate((uint64_t)a1, a2);
  v91 = v117;
  v92 = v116;
  if (v116)
  {
    p_shared_owners = (unint64_t *)&v116->__shared_owners_;
    do
      v94 = __ldaxr(p_shared_owners);
    while (__stlxr(v94 - 1, p_shared_owners));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if (v91)
    return v90;
  else
    return 0;
}

void sub_2301C9BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  uint64_t v52;

  if (a45 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v52 - 160);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v52 - 112);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v52 - 88);
  _Unwind_Resume(a1);
}

RIO_MTLX::PortElement *RIO_MTLX::PortElement::validChannelsString(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  RIO_MTLX::PortElement *result;
  unsigned __int8 *v6;
  uint64_t v7;

  result = (RIO_MTLX::PortElement *)RIO_MTLX::PortElement::validChannelsCharacters((RIO_MTLX::PortElement *)a1, a2);
  if ((_DWORD)result)
  {
    RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(result);
    result = (RIO_MTLX::PortElement *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv, a3);
    if (result)
    {
      RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(result);
      v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv, a3);
      if (!v6)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v7 = *(unsigned __int8 *)(a1 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(a1 + 8);
      return (RIO_MTLX::PortElement *)(*((_QWORD *)v6 + 5) == v7);
    }
  }
  return result;
}

uint64_t RIO_MTLX::PortElement::validChannelsCharacters(RIO_MTLX::PortElement *a1, unsigned __int8 *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  RIO_MTLX::PortElement *v8;
  uint64_t v9;
  uint64_t **v10;
  char *v11;
  int v12;
  uint64_t **v13;
  int v14;

  RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(a1);
  result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v, a2);
  if (result)
  {
    RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET((RIO_MTLX::PortElement *)result);
    v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v, a2);
    if (!v5)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v6 = *((char *)a1 + 23);
    v7 = v6 < 0;
    if (v6 >= 0)
      v8 = a1;
    else
      v8 = *(RIO_MTLX::PortElement **)a1;
    if (v7)
      v9 = *((_QWORD *)a1 + 1);
    else
      v9 = *((unsigned __int8 *)a1 + 23);
    if (v9)
    {
      v10 = (uint64_t **)*((_QWORD *)v5 + 6);
      if (!v10)
        return 0;
      v11 = (char *)v8 + v9;
      result = 1;
      while (1)
      {
        v12 = *(char *)v8;
        v13 = v10;
        while (1)
        {
          v14 = *((char *)v13 + 25);
          if (v12 >= v14)
            break;
LABEL_16:
          v13 = (uint64_t **)*v13;
          if (!v13)
            return 0;
        }
        if (v14 < v12)
          break;
        v8 = (RIO_MTLX::PortElement *)((char *)v8 + 1);
        if (v8 == (RIO_MTLX::PortElement *)v11)
          return result;
      }
      ++v13;
      goto LABEL_16;
    }
    return 1;
  }
  return result;
}

void RIO_MTLX::Input::getConnectedNode(RIO_MTLX::Input *this@<X0>, _QWORD *a2@<X8>)
{
  RIO_MTLX::PortElement *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t *NodeName;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  RIO_MTLX::Input::getInterfaceInput(this, &v28);
  v5 = v28;
  if (v28)
  {
    RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(v4);
    if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v5 + 160), (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v)|| (v6 = v28, RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(0), std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v6 + 160), (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v)))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 64))(v28);
      goto LABEL_32;
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v7)
  {
    v7 = std::__shared_weak_count::lock(v7);
    v8 = v7;
    if (v7)
      v9 = *((_QWORD *)this + 28);
    else
      v9 = 0;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v26 = v9;
  v27 = v8;
  v10 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v7);
  v11 = RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(v9, (unsigned __int8 *)v10);
  v12 = v11;
  if (!v8)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v12)
    {
LABEL_23:
      (*(void (**)(uint64_t *__return_ptr, RIO_MTLX::Input *))(*(_QWORD *)this + 72))(&v26, this);
      if (v26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 64))(v26);
        if (*a2)
        {
LABEL_27:
          v20 = v27;
          if (v27)
          {
            v21 = (unint64_t *)&v27->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          goto LABEL_32;
        }
        std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a2);
      }
      RIO_MTLX::PortElement::getConnectedNode(this, a2);
      goto LABEL_27;
    }
  }
  else
  {
LABEL_14:
    if (!v11)
      goto LABEL_23;
  }
  RIO_MTLX::Element::getDocument(this, &v26);
  v15 = v26;
  NodeName = RIO_MTLX::PortElement::getNodeName(this);
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Node>(v15, (unsigned __int8 *)NodeName, a2);
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (!*a2)
  {
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a2);
    goto LABEL_23;
  }
LABEL_32:
  v23 = v29;
  if (v29)
  {
    v24 = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_2301CA0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Input::getInterfaceInput(RIO_MTLX::Input *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *InterfaceName;
  uint64_t v5;
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  InterfaceName = RIO_MTLX::ValueElement::getInterfaceName(this);
  v5 = *((unsigned __int8 *)InterfaceName + 23);
  if ((v5 & 0x80u) != 0)
    v5 = InterfaceName[1];
  if (!v5)
    goto LABEL_15;
  v6 = (unsigned __int8 *)InterfaceName;
  RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::NodeGraph>((uint64_t)this, &v13);
  if (!v13)
  {
    v10 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(v13, v6, a2);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_2301CA1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Input::setConnectedOutput(RIO_MTLX::PortElement *a1, const std::string **a2)
{
  const std::string *v4;
  const std::string *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const std::string *size;
  RIO_MTLX::PortElement *v9;
  uint64_t *v10;
  _BOOL8 v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (*a2)
  {
    v4 = *a2 + 2;
    RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(a1);
    RIO_MTLX::Element::setAttribute((uint64_t *)a1, (__int128 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(void)::v, v4);
    v5 = *a2;
    v6 = (std::__shared_weak_count *)(*a2)[9].__r_.__value_.__r.__words[2];
    if (v6)
    {
      v6 = std::__shared_weak_count::lock(v6);
      v7 = v6;
      if (v6)
        size = (const std::string *)v5[9].__r_.__value_.__l.__size_;
      else
        size = 0;
    }
    else
    {
      size = 0;
      v7 = 0;
    }
    v10 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v6);
    v11 = RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>((uint64_t)size, (unsigned __int8 *)v10);
    if (v11)
    {
      RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE((RIO_MTLX::PortElement *)v11);
      RIO_MTLX::Element::setAttribute((uint64_t *)a1, (__int128 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v, size + 2);
    }
    else
    {
      RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE((RIO_MTLX::PortElement *)v11);
      RIO_MTLX::Element::removeAttribute(a1, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v);
    }
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(a1);
    RIO_MTLX::Element::removeAttribute(a1, (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(void)::v);
    RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(v9);
    RIO_MTLX::Element::removeAttribute(a1, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v);
  }
}

void sub_2301CA33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Input::getConnectedOutput(RIO_MTLX::Input *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *OutputString;
  std::string *NodeGraph;
  RIO_MTLX *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *NodeName;
  std::__shared_weak_count *v14;
  RIO_MTLX *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  RIO_MTLX *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  std::__shared_weak_count *v51;

  OutputString = RIO_MTLX::PortElement::getOutputString(this);
  *a2 = 0;
  a2[1] = 0;
  RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE((RIO_MTLX::PortElement *)OutputString);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE(void)::v))
  {
    NodeGraph = (std::string *)RIO_MTLX::Implementation::getNodeGraph(this);
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeGraph>((uint64_t)this, NodeGraph, &v50);
    v7 = v50;
    if (v50)
    {
      v8 = RIO_MTLX::EMPTY_STRING(v6);
      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v7, (unsigned __int8 *)v8, (uint64_t)&v49);
      if ((_QWORD)v49 != *((_QWORD *)&v49 + 1))
      {
        v9 = *((unsigned __int8 *)OutputString + 23);
        if ((v9 & 0x80u) != 0)
          v9 = OutputString[1];
        if (v9)
        {
          RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(v50, (unsigned __int8 *)OutputString, &v48);
          std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a2, &v48);
          v10 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
          if (*((_QWORD *)&v48 + 1))
          {
            v11 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 - 1, v11));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
        }
        else
        {
          std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](a2, (uint64_t *)v49);
        }
      }
      *(_QWORD *)&v48 = &v49;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
    }
    v21 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        v24 = v21;
LABEL_27:
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(0);
    if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, (unsigned __int8 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(void)::v))
    {
      NodeName = RIO_MTLX::PortElement::getNodeName(this);
      v14 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
      if (v14)
      {
        v15 = (RIO_MTLX *)std::__shared_weak_count::lock(v14);
        if (v15)
        {
          v16 = (std::__shared_weak_count *)v15;
          v17 = *((_QWORD *)this + 28);
          v50 = v17;
          v51 = (std::__shared_weak_count *)v15;
          if (!v17)
            goto LABEL_55;
          v18 = RIO_MTLX::EMPTY_STRING(v15);
          if (RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(v17, (unsigned __int8 *)v18))
          {
            v19 = *(std::__shared_weak_count **)(v17 + 232);
            if (v19 && (v19 = std::__shared_weak_count::lock(v19)) != 0)
              v20 = *(_QWORD *)(v17 + 224);
            else
              v20 = 0;
            v50 = v20;
            v51 = v19;
            v25 = (unint64_t *)&v16->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          if (v50)
          {
            RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::GraphElement>(v50, &v48);
            if ((_QWORD)v48)
            {
              RIO_MTLX::Element::getChildOfType<RIO_MTLX::Node>(v48, (unsigned __int8 *)NodeName, &v46);
              v28 = v46;
              if (v46)
              {
                v29 = RIO_MTLX::EMPTY_STRING(v27);
                RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v28, (unsigned __int8 *)v29, (uint64_t)&v49);
                if ((_QWORD)v49 != *((_QWORD *)&v49 + 1))
                {
                  v30 = *((unsigned __int8 *)OutputString + 23);
                  if ((v30 & 0x80u) != 0)
                    v30 = OutputString[1];
                  if (v30)
                  {
                    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(v46, (unsigned __int8 *)OutputString, &v45);
                    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a2, &v45);
                    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v45);
                  }
                  else
                  {
                    std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](a2, (uint64_t *)v49);
                  }
                }
                *(_QWORD *)&v45 = &v49;
                std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
              }
            }
            else
            {
              v46 = 0;
              v47 = 0;
            }
            v31 = v47;
            if (v47)
            {
              v32 = (unint64_t *)&v47->__shared_owners_;
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            v34 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
            if (*((_QWORD *)&v48 + 1))
            {
              v35 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
          }
          v16 = v51;
          if (v51)
          {
LABEL_55:
            v37 = (unint64_t *)&v16->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              v24 = v16;
              goto LABEL_27;
            }
          }
        }
      }
    }
  }
  if (!*a2)
  {
    RIO_MTLX::Element::getDocument(this, &v50);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(v50, (unsigned __int8 *)OutputString, &v49);
    std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)a2, &v49);
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
    if (*((_QWORD *)&v49 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v51;
    if (v51)
    {
      v43 = (unint64_t *)&v51->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
}

void sub_2301CA754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  a10 = (void **)&a16;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v17 - 64);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::Input::validate(RIO_MTLX::Input *a1, std::string *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::string *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  RIO_MTLX::Element *v23;
  uint64_t *InterfaceName;
  uint64_t v25;
  RIO_MTLX::PortElement *v26;
  uint64_t *Channels;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  const void **v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  BOOL v48;
  char v49;
  unint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t result;
  void *v58[2];
  char v59;
  const void *v60[2];
  char v61;
  const void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  void *__p[2];
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  char v70;
  RIO_MTLX::Element *v71;
  std::__shared_weak_count *v72;
  std::string *v73;
  std::__shared_weak_count *v74;

  v70 = 1;
  RIO_MTLX::Input::DEFAULT_GEOM_PROP_ATTRIBUTE(a1);
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)qword_255E553F8);
  if (!v4)
    goto LABEL_35;
  RIO_MTLX::Input::DEFAULT_GEOM_PROP_ATTRIBUTE((RIO_MTLX::Input *)v4);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)qword_255E553F8);
  if (v5)
    v6 = (uint64_t *)(v5 + 40);
  else
    v6 = RIO_MTLX::EMPTY_STRING(0);
  if (*((char *)v6 + 23) < 0)
  {
    if (v6[1])
    {
LABEL_7:
      RIO_MTLX::Element::getDocument(a1, &v71);
      v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v71 + 12, (unsigned __int8 *)v6);
      v8 = v7;
      if (v7)
      {
        v9 = (std::string *)*((_QWORD *)v7 + 5);
        v10 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
        v73 = v9;
        v74 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        if (v9)
        {
          RIO_MTLX::Element::asA<RIO_MTLX::GeomPropDef>((uint64_t)v9, &v68);
          if (!v10)
          {
LABEL_22:
            v16 = v72;
            if (v72)
            {
              v17 = (unint64_t *)&v72->__shared_owners_;
              do
                v18 = __ldaxr(v17);
              while (__stlxr(v18 - 1, v17));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
            }
            v13 = v68;
            goto LABEL_28;
          }
LABEL_18:
          v14 = (unint64_t *)&v10->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          goto LABEL_22;
        }
      }
      else
      {
        v10 = 0;
        v73 = 0;
        v74 = 0;
      }
      v68 = 0;
      v69 = 0;
      if (!v10)
        goto LABEL_22;
      goto LABEL_18;
    }
  }
  else if (*((_BYTE *)v6 + 23))
  {
    goto LABEL_7;
  }
  v13 = 0;
  v68 = 0;
  v69 = 0;
LABEL_28:
  std::string::basic_string[abi:ne180100]<0>(__p, "Invalid defaultgeomprop string");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, v13 != 0, &v70, a2, (const void **)__p);
  if (v67 < 0)
    operator delete(__p[0]);
  v19 = v69;
  if (v69)
  {
    v20 = (unint64_t *)&v69->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_35:
  v22 = (unsigned __int8 *)RIO_MTLX::ValueElement::INTERFACE_NAME_ATTRIBUTE((RIO_MTLX::ValueElement *)v4);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, v22))goto LABEL_90;
  RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::NodeGraph>((uint64_t)a1, &v73);
  if (!v73)
  {
    v71 = 0;
    v72 = 0;
    goto LABEL_45;
  }
  RIO_MTLX::NodeGraph::getNodeDef(v73, &v71);
  v23 = v71;
  if (!v71)
  {
LABEL_45:
    RIO_MTLX::Input::getInterfaceInput(a1, &v68);
    v31 = v68;
    std::string::basic_string[abi:ne180100]<0>(v58, "Interface name not found in containing NodeGraph");
    RIO_MTLX::Element::validateRequire((uint64_t)a1, v31 != 0, &v70, a2, (const void **)v58);
    if (v59 < 0)
      operator delete(v58[0]);
    v32 = v69;
    if (!v69)
      goto LABEL_80;
    v33 = (unint64_t *)&v69->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    goto LABEL_78;
  }
  InterfaceName = RIO_MTLX::ValueElement::getInterfaceName(a1);
  RIO_MTLX::InterfaceElement::getActiveInput(v23, (unsigned __int8 *)InterfaceName, &v68);
  v25 = v68;
  std::string::basic_string[abi:ne180100]<0>(v64, "Interface name not found in referenced NodeDef");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, v25 != 0, &v70, a2, (const void **)v64);
  if (v65 < 0)
    operator delete(v64[0]);
  if (v68)
  {
    RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(v26);
    if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)RIO_MTLX::PortElement::CHANNELS_ATTRIBUTE(void)::v))
    {
      Channels = RIO_MTLX::PortElement::getChannels(a1);
      v28 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 56))(v68);
      v29 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::Input *))(*(_QWORD *)a1 + 56))(a1);
      LOBYTE(Channels) = RIO_MTLX::PortElement::validChannelsString((uint64_t)Channels, v28, v29);
      std::string::basic_string[abi:ne180100]<0>(v62, "Invalid channels string for interface name");
      RIO_MTLX::Element::validateRequire((uint64_t)a1, (char)Channels, &v70, a2, v62);
      if ((v63 & 0x80000000) == 0)
        goto LABEL_75;
      v30 = v62;
      goto LABEL_74;
    }
    v35 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::Input *))(*(_QWORD *)a1 + 56))(a1);
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 56))(v68);
    v37 = v35[23];
    if ((v37 & 0x80u) == 0)
      v38 = v35[23];
    else
      v38 = *((_QWORD *)v35 + 1);
    v39 = *(unsigned __int8 *)(v36 + 23);
    v40 = (char)v39;
    if ((v39 & 0x80u) != 0)
      v39 = *(_QWORD *)(v36 + 8);
    if (v38 == v39)
    {
      if (v40 >= 0)
        v41 = (unsigned __int8 *)v36;
      else
        v41 = *(unsigned __int8 **)v36;
      if ((v37 & 0x80) != 0)
      {
        v49 = memcmp(*(const void **)v35, v41, *((_QWORD *)v35 + 1)) == 0;
      }
      else if (v35[23])
      {
        v42 = v37 - 1;
        do
        {
          v44 = *v35++;
          v43 = v44;
          v46 = *v41++;
          v45 = v46;
          v48 = v42-- != 0;
          v49 = v43 == v45;
        }
        while (v43 == v45 && v48);
      }
      else
      {
        v49 = 1;
      }
    }
    else
    {
      v49 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v60, "Interface name refers to input of a different type");
    RIO_MTLX::Element::validateRequire((uint64_t)a1, v49, &v70, a2, v60);
    if (v61 < 0)
    {
      v30 = v60;
LABEL_74:
      operator delete((void *)*v30);
    }
  }
LABEL_75:
  v32 = v69;
  if (v69)
  {
    v50 = (unint64_t *)&v69->__shared_owners_;
    do
      v34 = __ldaxr(v50);
    while (__stlxr(v34 - 1, v50));
LABEL_78:
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
LABEL_80:
  v51 = v72;
  if (v72)
  {
    v52 = (unint64_t *)&v72->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v74;
  if (v74)
  {
    v55 = (unint64_t *)&v74->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
LABEL_90:
  LODWORD(result) = RIO_MTLX::PortElement::validate(a1, a2);
  if (v70)
    return result;
  else
    return 0;
}

void sub_2301CAD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v38 - 88);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v38 - 64);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v38 - 48);
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::getActiveInput(RIO_MTLX::Element *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38[4];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41[4];
  uint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD *v44[3];
  uint64_t v45;

  RIO_MTLX::Element::traverseInheritance(a1, (uint64_t)&v42);
  v45 = 0;
  v39 = v42;
  v40 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v41, (uint64_t)v44);
  v41[3] = v45;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v7);
  v36 = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v37 = *(std::__shared_weak_count **)algn_255E542B8;
  if (*(_QWORD *)algn_255E542B8)
  {
    v8 = (unint64_t *)(*(_QWORD *)algn_255E542B8 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v38, (uint64_t)&unk_255E542C0);
  v38[3] = qword_255E542D8;
  while (1)
  {
    v10 = v39;
    v11 = v36;
    if (v39 == v36)
      break;
    v34 = v39;
    v35 = v40;
    if (v40)
    {
      v12 = (unint64_t *)&v40->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(v10, &v32);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>(v32, a2, a3);
    v14 = v33;
    if (v33)
    {
      v15 = (unint64_t *)&v33->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (*a3)
    {
      v20 = v35;
      if (v35)
      {
        v21 = (unint64_t *)&v35->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      break;
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a3);
    v17 = v35;
    if (v35)
    {
      v18 = (unint64_t *)&v35->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v39);
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v38, (_QWORD *)v38[1]);
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v41, (_QWORD *)v41[1]);
  v26 = v40;
  if (v40)
  {
    v27 = (unint64_t *)&v40->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v44, v44[1]);
  v29 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v10 == v11)
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_2301CB0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)va1);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)va2);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Output::getUpstreamEdge(RIO_MTLX::Output *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  RIO_MTLX *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v6 = (RIO_MTLX *)(*(uint64_t (**)(RIO_MTLX::Output *))(*(_QWORD *)this + 24))(this);
  if ((unint64_t)v6 <= a2)
  {
    v24 = RIO_MTLX::NULL_EDGE(v6);
    v25 = *((_QWORD *)v24 + 1);
    *a3 = *(_QWORD *)v24;
    a3[1] = v25;
    if (v25)
    {
      v26 = (unint64_t *)(v25 + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = *((_QWORD *)v24 + 3);
    a3[2] = *((_QWORD *)v24 + 2);
    a3[3] = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = *((_QWORD *)v24 + 5);
    a3[4] = *((_QWORD *)v24 + 4);
    a3[5] = v31;
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
  }
  else
  {
    RIO_MTLX::Element::getSelfNonConst(this, &v38);
    v36 = 0;
    v37 = 0;
    (*(void (**)(uint64_t *__return_ptr, RIO_MTLX::Output *))(*(_QWORD *)this + 64))(&v34, this);
    v7 = v34;
    v8 = v35;
    v34 = 0;
    v35 = 0;
    v9 = v39;
    *a3 = v38;
    a3[1] = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    a3[2] = 0;
    a3[3] = 0;
    a3[4] = v7;
    a3[5] = v8;
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v15 = v35;
    if (v35)
    {
      v16 = (unint64_t *)&v35->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v37;
    if (v37)
    {
      v19 = (unint64_t *)&v37->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v39;
    if (v39)
    {
      v22 = (unint64_t *)&v39->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_2301CB330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::Output::validate(RIO_MTLX::Element *a1, std::string *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t result;
  void *__p[2];
  char v24;
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  _QWORD v30[4];
  uint64_t v31[3];
  _QWORD v32[3];
  __int128 v33;
  uint64_t v34[4];
  uint64_t v35[3];
  _QWORD v36[3];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  __int128 v45;

  v25 = 1;
  RIO_MTLX::Element::traverseGraph(a1, (uint64_t)&v38);
  if (v43 == v44)
    RIO_MTLX::GraphIterator::operator++((RIO_MTLX *)&v38);
  *((_QWORD *)&v45 + 1) = 0;
  v34[0] = v38;
  v34[1] = v39;
  if (v39)
  {
    v4 = (unint64_t *)(v39 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v34[2] = v40;
  v34[3] = v41;
  if (v41)
  {
    v6 = (unint64_t *)(v41 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::set<std::shared_ptr<RIO_MTLX::Element>>::set[abi:ne180100](v35, (uint64_t)&v42);
  memset(v36, 0, sizeof(v36));
  v8 = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)v36, v43, v44, 0xAAAAAAAAAAAAAAABLL * (v44 - v43));
  v37 = v45;
  RIO_MTLX::NULL_GRAPH_ITERATOR((RIO_MTLX *)v8);
  v30[0] = RIO_MTLX::NULL_GRAPH_ITERATOR(void)::v;
  v30[1] = unk_255E54250;
  if (unk_255E54250)
  {
    v9 = (unint64_t *)(unk_255E54250 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v30[2] = qword_255E54258;
  v30[3] = unk_255E54260;
  if (unk_255E54260)
  {
    v11 = (unint64_t *)(unk_255E54260 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::set<std::shared_ptr<RIO_MTLX::Element>>::set[abi:ne180100](v31, (uint64_t)&qword_255E54268);
  memset(v32, 0, sizeof(v32));
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>((char *)v32, (_QWORD *)qword_255E54280, *(_QWORD **)algn_255E54288, 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)algn_255E54288 - qword_255E54280) >> 3));
  v33 = xmmword_255E54298;
  while (!RIO_MTLX::GraphIterator::operator==((uint64_t)v34, (uint64_t)v30))
  {
    RIO_MTLX::GraphIterator::operator*(v34, &v26);
    v13 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v28;
    if (v28)
    {
      v17 = (unint64_t *)&v28->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v27;
    if (v27)
    {
      v20 = (unint64_t *)&v27->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    RIO_MTLX::GraphIterator::operator++((RIO_MTLX *)v34);
  }
  RIO_MTLX::GraphIterator::~GraphIterator((RIO_MTLX::GraphIterator *)v30);
  RIO_MTLX::GraphIterator::~GraphIterator((RIO_MTLX::GraphIterator *)v34);
  RIO_MTLX::GraphIterator::~GraphIterator((RIO_MTLX::GraphIterator *)&v38);
  std::string::basic_string[abi:ne180100]<0>(__p, "Cycle in upstream path");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, 1, &v25, a2, (const void **)__p);
  if (v24 < 0)
    operator delete(__p[0]);
  LODWORD(result) = RIO_MTLX::PortElement::validate(a1, a2);
  if (v25)
    return result;
  else
    return 0;
}

void sub_2301CB620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  RIO_MTLX::GraphIterator::~GraphIterator((RIO_MTLX::GraphIterator *)(v39 - 144));
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::getActiveInputs(RIO_MTLX::InterfaceElement *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void **v11;
  RIO_MTLX *v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  char v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  std::__shared_weak_count *v33;
  _QWORD v34[4];
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38[4];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41[4];
  uint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD *v44[3];
  uint64_t v45;
  char **v46;
  char *v47[2];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v47[0] = 0;
  v47[1] = 0;
  v46 = v47;
  RIO_MTLX::Element::traverseInheritance(this, (uint64_t)&v42);
  v45 = 0;
  v39 = v42;
  v40 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v41, (uint64_t)v44);
  v41[3] = v45;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v5);
  v36 = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v37 = *(std::__shared_weak_count **)algn_255E542B8;
  if (*(_QWORD *)algn_255E542B8)
  {
    v6 = (unint64_t *)(*(_QWORD *)algn_255E542B8 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v38, (uint64_t)&unk_255E542C0);
  v38[3] = qword_255E542D8;
  while (1)
  {
    v8 = v39;
    if (v39 == v36)
      break;
    v34[3] = v39;
    v35 = v40;
    if (v40)
    {
      v9 = (unint64_t *)&v40->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(v8, &v32);
    v11 = v32;
    v13 = RIO_MTLX::EMPTY_STRING(v12);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>((uint64_t)v11, (unsigned __int8 *)v13, (uint64_t)v34);
    v14 = v33;
    if (v33)
    {
      v15 = (unint64_t *)&v33->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (__int128 *)v34[0];
    v18 = (__int128 *)v34[1];
    while (v17 != v18)
    {
      if (*(_QWORD *)v17)
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v46, (const void **)(*(_QWORD *)v17 + 48), *(_QWORD *)v17 + 48);
        if ((v19 & 1) != 0)
          std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a2, v17);
      }
      ++v17;
    }
    v32 = (void **)v34;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v32);
    v20 = v35;
    if (v35)
    {
      v21 = (unint64_t *)&v35->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v39);
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v38, (_QWORD *)v38[1]);
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v41, (_QWORD *)v41[1]);
  v26 = v40;
  if (v40)
  {
    v27 = (unint64_t *)&v40->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v44, v44[1]);
  v29 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v46, v47[0]);
}

void sub_2301CB9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)va1);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)(v8 - 136));
  std::__tree<std::string>::destroy(v8 - 88, *(char **)(v8 - 80));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::getActiveOutputs(RIO_MTLX::InterfaceElement *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void **v11;
  RIO_MTLX *v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  char v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  std::__shared_weak_count *v33;
  _QWORD v34[4];
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38[4];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41[4];
  uint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD *v44[3];
  uint64_t v45;
  char **v46;
  char *v47[2];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v47[0] = 0;
  v47[1] = 0;
  v46 = v47;
  RIO_MTLX::Element::traverseInheritance(this, (uint64_t)&v42);
  v45 = 0;
  v39 = v42;
  v40 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v41, (uint64_t)v44);
  v41[3] = v45;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v5);
  v36 = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v37 = *(std::__shared_weak_count **)algn_255E542B8;
  if (*(_QWORD *)algn_255E542B8)
  {
    v6 = (unint64_t *)(*(_QWORD *)algn_255E542B8 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v38, (uint64_t)&unk_255E542C0);
  v38[3] = qword_255E542D8;
  while (1)
  {
    v8 = v39;
    if (v39 == v36)
      break;
    v34[3] = v39;
    v35 = v40;
    if (v40)
    {
      v9 = (unint64_t *)&v40->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(v8, &v32);
    v11 = v32;
    v13 = RIO_MTLX::EMPTY_STRING(v12);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>((uint64_t)v11, (unsigned __int8 *)v13, (uint64_t)v34);
    v14 = v33;
    if (v33)
    {
      v15 = (unint64_t *)&v33->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (__int128 *)v34[0];
    v18 = (__int128 *)v34[1];
    while (v17 != v18)
    {
      if (*(_QWORD *)v17)
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v46, (const void **)(*(_QWORD *)v17 + 48), *(_QWORD *)v17 + 48);
        if ((v19 & 1) != 0)
          std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a2, v17);
      }
      ++v17;
    }
    v32 = (void **)v34;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v32);
    v20 = v35;
    if (v35)
    {
      v21 = (unint64_t *)&v35->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v39);
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v38, (_QWORD *)v38[1]);
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v41, (_QWORD *)v41[1]);
  v26 = v40;
  if (v40)
  {
    v27 = (unint64_t *)&v40->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v44, v44[1]);
  v29 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v46, v47[0]);
}

void sub_2301CBD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)va1);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)(v8 - 136));
  std::__tree<std::string>::destroy(v8 - 88, *(char **)(v8 - 80));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::getActiveTokens(RIO_MTLX::InterfaceElement *this@<X0>, void ***a2@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void **v12;
  RIO_MTLX *v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void **v18;
  void **v19;
  uint64_t v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  void **v33;
  void **v34;
  void **v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  void **v39;
  void **v40;
  void **v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void **v46;
  __int128 v47;
  void **v48;
  void **v49;
  void **v50;
  void **v51;
  void **v52;
  void **i;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void **v77;
  void **v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83[4];
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86[4];
  uint64_t v87;
  std::__shared_weak_count *v88;
  _QWORD *v89[3];
  uint64_t v90;
  void **v91;
  std::__shared_weak_count *v92;
  unint64_t v93;
  void **v94;
  _QWORD *v95;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  RIO_MTLX::Element::traverseInheritance(this, (uint64_t)&v87);
  v90 = 0;
  v84 = v87;
  v85 = v88;
  if (v88)
  {
    p_shared_owners = (unint64_t *)&v88->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v86, (uint64_t)v89);
  v86[3] = v90;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v5);
  v81 = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v82 = *(std::__shared_weak_count **)algn_255E542B8;
  if (*(_QWORD *)algn_255E542B8)
  {
    v6 = (unint64_t *)(*(_QWORD *)algn_255E542B8 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v83, (uint64_t)&unk_255E542C0);
  v83[3] = qword_255E542D8;
  v8 = (uint64_t *)(a2 + 2);
  while (1)
  {
    v9 = v84;
    if (v84 == v81)
      break;
    v79 = v84;
    v80 = v85;
    if (v85)
    {
      v10 = (unint64_t *)&v85->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::InterfaceElement>(v9, &v91);
    v12 = v91;
    v14 = RIO_MTLX::EMPTY_STRING(v13);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Token>((uint64_t)v12, (unsigned __int8 *)v14, (uint64_t)&v77);
    v15 = v92;
    if (v92)
    {
      v16 = (unint64_t *)&v92->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v19 = v77;
    v18 = v78;
    if ((char *)v78 - (char *)v77 >= 1)
    {
      v20 = ((char *)v78 - (char *)v77) >> 4;
      v22 = *a2;
      v21 = (unint64_t)a2[1];
      v23 = v21 - (_QWORD)*a2;
      v24 = (unint64_t)*a2 + (v23 & 0xFFFFFFFFFFFFFFF0);
      v25 = *v8;
      if (v20 > (uint64_t)(*v8 - v21) >> 4)
      {
        v26 = v23 >> 4;
        v27 = (v23 >> 4) + v20;
        if (v27 >> 60)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v28 = v25 - (_QWORD)v22;
        v29 = (v25 - (uint64_t)v22) >> 3;
        if (v29 > v27)
          v27 = v29;
        if (v28 >= 0x7FFFFFFFFFFFFFF0)
          v30 = 0xFFFFFFFFFFFFFFFLL;
        else
          v30 = v27;
        v95 = a2 + 2;
        if (v30)
          v31 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a2 + 2), v30);
        else
          v31 = 0;
        v39 = &v31[2 * v26];
        v91 = v31;
        v94 = &v31[2 * v30];
        v40 = &v39[2 * v20];
        v41 = v39;
        do
        {
          *v41 = *v19;
          v42 = (unint64_t *)v19[1];
          v41[1] = v42;
          if (v42)
          {
            v43 = v42 + 1;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          v41 += 2;
          v19 += 2;
        }
        while (v41 != v40);
        v45 = *a2;
        if (*a2 != (void **)v24)
        {
          v46 = (void **)v24;
          do
          {
            v47 = *((_OWORD *)v46 - 1);
            v46 -= 2;
            *((_OWORD *)v39 - 1) = v47;
            v39 -= 2;
            *v46 = 0;
            v46[1] = 0;
          }
          while (v46 != v45);
        }
        v92 = (std::__shared_weak_count *)v39;
        v48 = a2[1];
        if (v48 != (void **)v24)
        {
          do
          {
            *(_OWORD *)v40 = *(_OWORD *)v24;
            v40 += 2;
            *(_QWORD *)v24 = 0;
            *(_QWORD *)(v24 + 8) = 0;
            v24 += 16;
          }
          while ((void **)v24 != v48);
          v39 = (void **)&v92->__vftable;
          v24 = (unint64_t)a2[1];
        }
        v49 = *a2;
        *a2 = v39;
        a2[1] = v40;
        v50 = a2[2];
        a2[2] = v94;
        v93 = v24;
        v94 = v50;
        v91 = v49;
        v92 = (std::__shared_weak_count *)v49;
        std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)&v91);
        goto LABEL_70;
      }
      v32 = (uint64_t)(v21 - v24) >> 4;
      if (v32 >= v20)
      {
        v33 = &v77[2 * v20];
        v35 = a2[1];
LABEL_51:
        v51 = &v35[-2 * v20];
        v52 = v35;
        for (i = v51; (unint64_t)i < v21; i += 2)
        {
          *(_OWORD *)v52 = *(_OWORD *)i;
          v52 += 2;
          *i = 0;
          i[1] = 0;
        }
        a2[1] = v52;
        if (v35 != (void **)(v24 + 16 * v20))
        {
          do
          {
            v54 = *((_OWORD *)v51 - 1);
            v51 -= 2;
            *v51 = 0;
            v51[1] = 0;
            v55 = (std::__shared_weak_count *)*(v35 - 1);
            *((_OWORD *)v35 - 1) = v54;
            v35 -= 2;
            if (v55)
            {
              v56 = (unint64_t *)&v55->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
          }
          while (v51 != (void **)v24);
        }
        for (; v19 != v33; v24 += 16)
        {
          v59 = *v19;
          v58 = (char *)v19[1];
          if (v58)
          {
            v60 = (unint64_t *)(v58 + 8);
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          v62 = *(std::__shared_weak_count **)(v24 + 8);
          *(_QWORD *)v24 = v59;
          *(_QWORD *)(v24 + 8) = v58;
          if (v62)
          {
            v63 = (unint64_t *)&v62->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          v19 += 2;
        }
        goto LABEL_70;
      }
      v33 = &v77[2 * v32];
      if (v33 == v78)
      {
        v35 = a2[1];
      }
      else
      {
        v34 = &v77[2 * v32];
        v35 = a2[1];
        do
        {
          *v35 = *v34;
          v36 = (unint64_t *)v34[1];
          v35[1] = v36;
          if (v36)
          {
            v37 = v36 + 1;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          v34 += 2;
          v35 += 2;
        }
        while (v34 != v18);
      }
      a2[1] = v35;
      if ((uint64_t)(v21 - v24) >= 1)
        goto LABEL_51;
    }
LABEL_70:
    v91 = (void **)&v77;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v91);
    v65 = v80;
    if (v80)
    {
      v66 = (unint64_t *)&v80->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v84);
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v83, (_QWORD *)v83[1]);
  v68 = v82;
  if (v82)
  {
    v69 = (unint64_t *)&v82->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v86, (_QWORD *)v86[1]);
  v71 = v85;
  if (v85)
  {
    v72 = (unint64_t *)&v85->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v89, v89[1]);
  v74 = v88;
  if (v88)
  {
    v75 = (unint64_t *)&v88->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
}

void sub_2301CC340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&a24);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&a30);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a24);
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::getActiveValueElement(RIO_MTLX::Element *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28[4];
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31[4];
  uint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD *v34[3];
  uint64_t v35;

  RIO_MTLX::Element::traverseInheritance(a1, (uint64_t)&v32);
  v35 = 0;
  v29 = v32;
  v30 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v31, (uint64_t)v34);
  v31[3] = v35;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v7);
  v26 = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v27 = *(std::__shared_weak_count **)algn_255E542B8;
  if (*(_QWORD *)algn_255E542B8)
  {
    v8 = (unint64_t *)(*(_QWORD *)algn_255E542B8 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v28, (uint64_t)&unk_255E542C0);
  v28[3] = qword_255E542D8;
  while (1)
  {
    v10 = v29;
    if (v29 == v26)
      break;
    v11 = v30;
    if (v30)
    {
      v12 = (unint64_t *)&v30->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::ValueElement>(v10, a2, a3);
    if (*a3)
    {
      if (v11)
      {
        v16 = (unint64_t *)&v11->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      break;
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a3);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v29);
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v28, (_QWORD *)v28[1]);
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v31, (_QWORD *)v31[1]);
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v34, v34[1]);
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v10 == v26)
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_2301CC658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)va1);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)va2);
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::getActiveValueElements(RIO_MTLX::InterfaceElement *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  RIO_MTLX *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  __int128 *v14;
  __int128 *v15;
  char v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD v28[5];
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31[4];
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34[4];
  uint64_t v35;
  std::__shared_weak_count *v36;
  _QWORD *v37[3];
  uint64_t v38;
  char **v39;
  char *v40[2];
  void **v41;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v40[0] = 0;
  v40[1] = 0;
  v39 = v40;
  RIO_MTLX::Element::traverseInheritance(this, (uint64_t)&v35);
  v38 = 0;
  v32 = v35;
  v33 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v34, (uint64_t)v37);
  v34[3] = v38;
  RIO_MTLX::NULL_INHERITANCE_ITERATOR((RIO_MTLX *)v5);
  v29 = RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
  v30 = *(std::__shared_weak_count **)algn_255E542B8;
  if (*(_QWORD *)algn_255E542B8)
  {
    v6 = (unint64_t *)(*(_QWORD *)algn_255E542B8 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (RIO_MTLX *)std::set<std::shared_ptr<RIO_MTLX::Element const>>::set[abi:ne180100](v31, (uint64_t)&unk_255E542C0);
  v31[3] = qword_255E542D8;
  while (1)
  {
    v9 = v32;
    if (v32 == v29)
      break;
    v10 = v33;
    v28[3] = v32;
    v28[4] = v33;
    if (v33)
    {
      v11 = (unint64_t *)&v33->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = RIO_MTLX::EMPTY_STRING(v8);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::ValueElement>(v9, (unsigned __int8 *)v13, (uint64_t)v28);
    v14 = (__int128 *)v28[0];
    v15 = (__int128 *)v28[1];
    while (v14 != v15)
    {
      if (*(_QWORD *)v14)
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v39, (const void **)(*(_QWORD *)v14 + 48), *(_QWORD *)v14 + 48);
        if ((v16 & 1) != 0)
          std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a2, v14);
      }
      ++v14;
    }
    v41 = (void **)v28;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v41);
    if (v10)
    {
      v17 = (unint64_t *)&v10->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v8 = (RIO_MTLX *)RIO_MTLX::InheritanceIterator::operator++((uint64_t)&v32);
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v31, (_QWORD *)v31[1]);
  v19 = v30;
  if (v30)
  {
    v20 = (unint64_t *)&v30->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v34, (_QWORD *)v34[1]);
  v22 = v33;
  if (v33)
  {
    v23 = (unint64_t *)&v33->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)v37, v37[1]);
  v25 = v36;
  if (v36)
  {
    v26 = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v39, v40[0]);
}

void sub_2301CC958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&a21);
  RIO_MTLX::InheritanceIterator::~InheritanceIterator((RIO_MTLX::InheritanceIterator *)&a27);
  std::__tree<std::string>::destroy(v27 - 112, *(char **)(v27 - 104));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::setVersionIntegers(RIO_MTLX::InterfaceElement *this, int __val, int a3)
{
  std::string *v5;
  __int128 v6;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::to_string(&v12, __val);
  v5 = std::string::append(&v12, ".");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE((RIO_MTLX::InterfaceElement *)v9);
  RIO_MTLX::Element::setAttribute((uint64_t *)this, (__int128 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(void)::v, &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_2301CCAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

unint64_t RIO_MTLX::InterfaceElement::getVersionIntegers(RIO_MTLX::InterfaceElement *this)
{
  std::string *VersionString;
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  const std::string *v8[3];

  VersionString = (std::string *)RIO_MTLX::InterfaceElement::getVersionString(this);
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  RIO_MTLX::splitString(VersionString, (unsigned __int8 **)__p, (uint64_t)v8);
  if (v7 < 0)
    operator delete(__p[0]);
  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8[1] - (char *)v8[0]) >> 3);
  if (v2 == 1)
  {
    v3 = std::stoi(v8[0], 0, 10);
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  if (v2 != 2)
  {
    v3 = 0;
    goto LABEL_8;
  }
  v3 = std::stoi(v8[0], 0, 10);
  v4 = std::stoi(v8[0] + 1, 0, 10);
LABEL_9:
  __p[0] = v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v3 | (unint64_t)(v4 << 32);
}

void sub_2301CCC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL RIO_MTLX::InterfaceElement::registerChildElement(char **a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  RIO_MTLX *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _BOOL8 result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = a2[1];
  v17 = *a2;
  v18 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (RIO_MTLX *)RIO_MTLX::Element::registerChildElement(a1, &v17);
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *a2;
  v12 = RIO_MTLX::EMPTY_STRING(v7);
  result = RIO_MTLX::Element::isA<RIO_MTLX::Input>(v11, (unsigned __int8 *)v12);
  if (result)
  {
    v14 = a1 + 32;
  }
  else
  {
    v15 = *a2;
    v16 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)result);
    result = RIO_MTLX::Element::isA<RIO_MTLX::Output>(v15, (unsigned __int8 *)v16);
    if (!result)
      return result;
    v14 = a1 + 33;
  }
  ++*v14;
  return result;
}

void sub_2301CCD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL RIO_MTLX::InterfaceElement::unregisterChildElement(RIO_MTLX::Element *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  RIO_MTLX *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _BOOL8 result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD v16[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v16[0] = *a2;
  v16[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (RIO_MTLX *)RIO_MTLX::Element::unregisterChildElement(a1, (uint64_t)v16);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v10 = *a2;
  v11 = RIO_MTLX::EMPTY_STRING(v7);
  result = RIO_MTLX::Element::isA<RIO_MTLX::Input>(v10, (unsigned __int8 *)v11);
  if (result)
  {
    v13 = (_QWORD *)((char *)a1 + 256);
  }
  else
  {
    v14 = *a2;
    v15 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)result);
    result = RIO_MTLX::Element::isA<RIO_MTLX::Output>(v14, (unsigned __int8 *)v15);
    if (!result)
      return result;
    v13 = (_QWORD *)((char *)a1 + 264);
  }
  --*v13;
  return result;
}

void sub_2301CCE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::InterfaceElement::getDeclaration(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t RIO_MTLX::InterfaceElement::hasExactInputMatch(RIO_MTLX::InterfaceElement *a1, RIO_MTLX::Element **a2, std::string *a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unsigned __int8 *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  std::string::size_type v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::string v36;
  void *__p[2];
  int64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unsigned __int8 *v41;
  std::__shared_weak_count *v42;
  _QWORD v43[3];

  RIO_MTLX::InterfaceElement::getActiveInputs(a1, (uint64_t)v43);
  v5 = v43[0];
  v6 = v43[1];
  while (1)
  {
    if (v5 == v6)
    {
      v34 = 1;
      goto LABEL_56;
    }
    v8 = *(unsigned __int8 **)v5;
    v7 = *(std::__shared_weak_count **)(v5 + 8);
    v41 = *(unsigned __int8 **)v5;
    v42 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    RIO_MTLX::InterfaceElement::getActiveInput(*a2, v8 + 48, &v39);
    if (!v39)
      break;
    v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 56))(v39);
    v12 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v8 + 56))(v8);
    v13 = v11[23];
    if ((v13 & 0x80u) == 0)
      v14 = v11[23];
    else
      v14 = *((_QWORD *)v11 + 1);
    v15 = *(unsigned __int8 *)(v12 + 23);
    v16 = (char)v15;
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(v12 + 8);
    if (v14 != v15)
      break;
    if (v16 >= 0)
      v17 = (unsigned __int8 *)v12;
    else
      v17 = *(unsigned __int8 **)v12;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((_QWORD *)v11 + 1)))
        break;
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13)
          goto LABEL_22;
      }
      break;
    }
LABEL_22:
    v18 = v40;
    if (v40)
    {
      v19 = (unint64_t *)&v40->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v18->__on_zero_shared)(v18, v17);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v42;
    if (v42)
    {
      v22 = (unint64_t *)&v42->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v21->__on_zero_shared)(v21, v17);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v5 += 16;
  }
  if (a3)
  {
    std::operator+<char>();
    v24 = std::string::append(&v36, "' doesn't match declaration");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v38 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (v38 >= 0)
      v26 = __p;
    else
      v26 = (void **)__p[0];
    if (v38 >= 0)
      v27 = HIBYTE(v38);
    else
      v27 = (std::string::size_type)__p[1];
    std::string::append(a3, (const std::string::value_type *)v26, v27);
    if (SHIBYTE(v38) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  v28 = v40;
  if (v40)
  {
    v29 = (unint64_t *)&v40->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v42;
  if (v42)
  {
    v32 = (unint64_t *)&v42->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = 0;
LABEL_56:
  __p[0] = v43;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v34;
}

void sub_2301CD104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  __p = &a26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void RIO_MTLX::PortElement::~PortElement(RIO_MTLX::PortElement *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

void RIO_MTLX::Input::~Input(RIO_MTLX::Input *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

void RIO_MTLX::Output::~Output(RIO_MTLX::Output *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t RIO_MTLX::Output::getUpstreamEdgeCount(RIO_MTLX::Output *this)
{
  return 1;
}

void RIO_MTLX::InterfaceElement::~InterfaceElement(RIO_MTLX::InterfaceElement *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

std::string *std::pair<std::string const,std::set<char>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, _QWORD *a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::set<char>::set[abi:ne180100]((uint64_t *)&this[1], a3);
  return this;
}

void sub_2301CD270(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<char>::set[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  a1[1] = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<char>::__emplace_hint_unique_key_args<char,char const&>(a1, v3, *((_BYTE *)v5 + 25), *((_BYTE *)v5 + 25));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_2301CD320(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<char>::__emplace_hint_unique_key_args<char,char const&>(uint64_t *result, uint64_t *a2, char a3, char a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t *v25;

  v5 = a2;
  v6 = result;
  v7 = (uint64_t **)(result + 1);
  if (result + 1 != a2)
  {
    v8 = *((char *)a2 + 25);
    if (v8 <= a3)
    {
      if (v8 >= a3)
        return result;
      v13 = a2 + 1;
      v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
          v5 = v13;
          v14 = v13;
        }
        while (v12);
      }
      else
      {
        v14 = a2;
        do
        {
          v20 = v14;
          v14 = (uint64_t *)v14[2];
        }
        while ((uint64_t *)*v14 != v20);
      }
      if (v14 == (uint64_t *)v7)
        goto LABEL_42;
      if (*((char *)v14 + 25) > a3)
        goto LABEL_42;
      v21 = *v7;
      v13 = result + 1;
      v5 = result + 1;
      if (!*v7)
        goto LABEL_42;
      while (1)
      {
        while (1)
        {
          v5 = v21;
          v22 = *((char *)v21 + 25);
          if (v22 <= a3)
            break;
          v21 = (uint64_t *)*v21;
          v13 = v5;
          if (!*v5)
            goto LABEL_42;
        }
        if (v22 >= a3)
          return result;
        v21 = (uint64_t *)v21[1];
        if (!v21)
        {
LABEL_30:
          v13 = v5 + 1;
          goto LABEL_42;
        }
      }
    }
  }
  v9 = *a2;
  if ((uint64_t *)*result == a2)
  {
    v11 = a2;
  }
  else
  {
    if (v9)
    {
      v10 = (uint64_t *)*a2;
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (uint64_t *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    if (*((char *)v11 + 25) >= a3)
    {
      v18 = *v7;
      v13 = result + 1;
      v5 = result + 1;
      if (!*v7)
        goto LABEL_42;
      while (1)
      {
        while (1)
        {
          v5 = v18;
          v19 = *((char *)v18 + 25);
          if (v19 <= a3)
            break;
          v18 = (uint64_t *)*v18;
          v13 = v5;
          if (!*v5)
            goto LABEL_42;
        }
        if (v19 >= a3)
          return result;
        v18 = (uint64_t *)v18[1];
        if (!v18)
          goto LABEL_30;
      }
    }
  }
  if (v9)
    v17 = v11;
  else
    v17 = a2;
  if (v9)
    v13 = v11 + 1;
  else
    v13 = a2;
  if (!*v13)
  {
    v5 = v17;
LABEL_42:
    v23 = operator new(0x20uLL);
    v23[25] = a4;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v5;
    *v13 = (uint64_t)v23;
    v24 = *(_QWORD *)*v6;
    if (v24)
    {
      *v6 = v24;
      v25 = (uint64_t *)*v13;
    }
    else
    {
      v25 = (uint64_t *)v23;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], v25);
    ++v6[2];
  }
  return result;
}

uint64_t *std::set<char>::set[abi:ne180100](uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    v5 = a3;
    do
    {
      std::__tree<char>::__emplace_hint_unique_key_args<char,char const&>(a1, v4, *a2, *a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2301CD570(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::unordered_map<std::string,std::set<char>>::unordered_map(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *i;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[2];
  char v37;

  RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v = 0u;
  *(_OWORD *)&qword_255E54450 = 0u;
  dword_255E54460 = 1065353216;
  if (a2)
  {
    v2 = a1;
    v35 = a1 + 48 * a2;
    while (1)
    {
      v3 = (unint64_t)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8;
      v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_255E54458, v2);
      v5 = v4;
      v6 = *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1);
      if (*((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8));
        v7.i16[0] = vaddlv_u8(v7);
        v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          v3 = v4;
          if (v4 >= *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1))
            v3 = v4 % *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1);
        }
        else
        {
          v3 = (*((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1) - 1) & v4;
        }
        v9 = *(unsigned __int8 ***)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v3);
        if (v9)
        {
          for (i = *v9; i; i = *(unsigned __int8 **)i)
          {
            v11 = *((_QWORD *)i + 1);
            if (v11 == v5)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_255E54460, i + 16, (unsigned __int8 *)v2) & 1) != 0)goto LABEL_78;
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6)
                  v11 %= v6;
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v3)
                break;
            }
          }
        }
      }
      v12 = (char *)operator new(0x40uLL);
      v13 = (uint64_t *)v12;
      v36[0] = v12;
      v36[1] = &qword_255E54450;
      v37 = 0;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = v5;
      if (*(char *)(v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v12 + 16), *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v2;
        *((_QWORD *)v12 + 4) = *(_QWORD *)(v2 + 16);
        *((_OWORD *)v12 + 1) = v14;
      }
      std::set<char>::set[abi:ne180100](v13 + 5, (_QWORD *)(v2 + 24));
      v37 = 1;
      v15 = (float)(unint64_t)(qword_255E54458 + 1);
      if (!v6 || (float)(*(float *)&dword_255E54460 * (float)v6) < v15)
        break;
LABEL_68:
      v31 = *(uint64_t **)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v3);
      v32 = v36[0];
      if (v31)
      {
        *(_QWORD *)v36[0] = *v31;
      }
      else
      {
        *(_QWORD *)v36[0] = qword_255E54450;
        qword_255E54450 = v32;
        *(_QWORD *)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v3) = &qword_255E54450;
        if (!*(_QWORD *)v32)
          goto LABEL_77;
        v33 = *(_QWORD *)(*(_QWORD *)v32 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6)
            v33 %= v6;
        }
        else
        {
          v33 &= v6 - 1;
        }
        v31 = (uint64_t *)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v33);
      }
      *v31 = v32;
LABEL_77:
      v36[0] = 0;
      ++qword_255E54458;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<char>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<char>>,void *>>>>::reset[abi:ne180100]((uint64_t)v36);
LABEL_78:
      v2 += 48;
      if (v2 == v35)
        return;
    }
    v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v16 = 1;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_255E54460);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v6 = *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1))
      goto LABEL_34;
    if (*(_QWORD *)&prime < *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1))
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)qword_255E54458 / *(float *)&dword_255E54460);
      if (*((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1) < 3uLL
        || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v;
          *(_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1) = prime;
          do
            *(_QWORD *)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD **)qword_255E54450;
          if (qword_255E54450)
          {
            v24 = *(_QWORD *)(qword_255E54450 + 8);
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v24) = &qword_255E54450;
            for (j = *v23; j; v24 = v30)
            {
              v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(_QWORD *)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v30))
                {
                  *(_QWORD *)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *v23 = (_QWORD *)*j;
                *j = **(_QWORD **)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v30);
                **(_QWORD **)(RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 8 * v30) = j;
                j = v23;
              }
              v30 = v24;
LABEL_59:
              v23 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        v34 = (void *)RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v;
        *(_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_2301CDA4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<char>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<char>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::set<char>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<char>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<char>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<char>>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<char>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<char>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<char>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<char>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::set<char>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<char>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<char>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<char>>>>::~__hash_table()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;

  v0 = (_QWORD *)qword_255E54450;
  if (qword_255E54450)
  {
    do
    {
      v1 = (_QWORD *)*v0;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<char>>,0>((uint64_t)(v0 + 2));
      operator delete(v0);
      v0 = v1;
    }
    while (v1);
  }
  v2 = (void *)RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v;
  *(_QWORD *)&RIO_MTLX::PortElement::CHANNELS_CHARACTER_SET(void)::v = 0;
  if (v2)
    operator delete(v2);
}

void std::unordered_map<std::string,unsigned long>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *i;
  unint64_t v11;
  _QWORD *v12;
  std::string *v13;
  __int128 v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;

  RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv = 0u;
  *(_OWORD *)&qword_255E54478 = 0u;
  dword_255E54488 = 1065353216;
  if (a2)
  {
    v3 = a1;
    v35 = a1 + 32 * a2;
    while (1)
    {
      v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_255E54480, v3);
      v5 = v4;
      v6 = *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1);
      if (*((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1))
      {
        v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8));
        v7.i16[0] = vaddlv_u8(v7);
        v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          v2 = v4;
          if (v4 >= *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1))
            v2 = v4 % *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1);
        }
        else
        {
          v2 = (*((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1) - 1) & v4;
        }
        v9 = *(unsigned __int8 ***)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v2);
        if (v9)
        {
          for (i = *v9; i; i = *(unsigned __int8 **)i)
          {
            v11 = *((_QWORD *)i + 1);
            if (v11 == v5)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_255E54488, i + 16, (unsigned __int8 *)v3) & 1) != 0)goto LABEL_78;
            }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6)
                  v11 %= v6;
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v2)
                break;
            }
          }
        }
      }
      v12 = operator new(0x30uLL);
      *v12 = 0;
      v12[1] = v5;
      v13 = (std::string *)(v12 + 2);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v3;
        v12[4] = *(_QWORD *)(v3 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      v12[5] = *(_QWORD *)(v3 + 24);
      v15 = (float)(unint64_t)(qword_255E54480 + 1);
      if (!v6 || (float)(*(float *)&dword_255E54488 * (float)v6) < v15)
        break;
LABEL_68:
      v31 = RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv;
      v32 = *(_QWORD **)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v2);
      if (v32)
      {
        *v12 = *v32;
      }
      else
      {
        *v12 = qword_255E54478;
        qword_255E54478 = (uint64_t)v12;
        *(_QWORD *)(v31 + 8 * v2) = &qword_255E54478;
        if (!*v12)
          goto LABEL_77;
        v33 = *(_QWORD *)(*v12 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v33 >= v6)
            v33 %= v6;
        }
        else
        {
          v33 &= v6 - 1;
        }
        v32 = (_QWORD *)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v33);
      }
      *v32 = v12;
LABEL_77:
      ++qword_255E54480;
LABEL_78:
      v3 += 32;
      if (v3 == v35)
        return;
    }
    v16 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3)
      v16 = 1;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_255E54488);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v6 = *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1))
      goto LABEL_34;
    if (*(_QWORD *)&prime < *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1))
    {
      v26 = vcvtps_u32_f32((float)(unint64_t)qword_255E54480 / *(float *)&dword_255E54488);
      if (*((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1) < 3uLL
        || (v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8)),
            v27.i16[0] = vaddlv_u8(v27),
            v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = (void *)RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv;
          *(_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1) = prime;
          do
            *(_QWORD *)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD **)qword_255E54478;
          if (qword_255E54478)
          {
            v24 = *(_QWORD *)(qword_255E54478 + 8);
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v24) = &qword_255E54478;
            for (j = *v23; j; v24 = v30)
            {
              v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*(_QWORD *)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v30))
                {
                  *(_QWORD *)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v30) = v23;
                  goto LABEL_59;
                }
                *v23 = (_QWORD *)*j;
                *j = **(_QWORD **)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v30);
                **(_QWORD **)(RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 8 * v30) = j;
                j = v23;
              }
              v30 = v24;
LABEL_59:
              v23 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_63;
        }
        v34 = (void *)RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv;
        *(_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *((_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv + 1) = 0;
      }
    }
LABEL_63:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v2 = v5 % v6;
      else
        v2 = v5;
    }
    else
    {
      v2 = (v6 - 1) & v5;
    }
    goto LABEL_68;
  }
}

void sub_2301CDFF4(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Element> (*)(std::shared_ptr<RIO_MTLX::Element>,std::string const&)>,void *>>>::operator()[abi:ne180100](1, v1);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table()
{
  void **v0;
  void **v1;
  void *v2;

  v0 = (void **)qword_255E54478;
  if (qword_255E54478)
  {
    do
    {
      v1 = (void **)*v0;
      if (*((char *)v0 + 39) < 0)
        operator delete(v0[2]);
      operator delete(v0);
      v0 = v1;
    }
    while (v1);
  }
  v2 = (void *)RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv;
  *(_QWORD *)&RIO_MTLX::PortElement::CHANNELS_PATTERN_LENGTH(void)::vv = 0;
  if (v2)
    operator delete(v2);
}

realityio::StageSceneLibraryAssetBuilder *realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(realityio::StageSceneLibraryAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t Data;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *__p[2];
  char v25;
  void *v26[2];
  char v27;
  void **v28[3];
  __int128 v29;
  _QWORD *v30[3];
  __int128 v31;
  _QWORD *v32[3];
  uint64_t v33;
  uint64_t v34;
  void ***v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v26, "StageSceneLibraryAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kStageSceneLibraryAssetBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E55420);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E55420))
  {
    v15 = operator new();
    v16 = operator new();
    v17 = operator new();
    Data = atomic_load(MEMORY[0x24BEE7E98]);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
    v19 = *(_QWORD *)(Data + 96);
    *(_QWORD *)v17 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      v19 = *(_QWORD *)v17;
      if ((v21 & 1) == 0)
      {
        v19 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v17 = v19;
      }
    }
    *(_BYTE *)(v17 + 8) = v19 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v29, v17);
    v40 = v29;
    v29 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::vector[abi:ne180100](v30, &v40, 1uLL);
    memset(v28, 0, sizeof(v28));
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v30, v28);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v31, v16);
    v41 = v31;
    v31 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v32, &v41, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v32);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v33, v15);
    _MergedGlobals_59 = v33;
    *(_QWORD *)algn_255E55418 = v34;
    v33 = 0;
    v34 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
    v35 = (void ***)v32;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v41);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v31);
    v35 = v28;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    v28[0] = (void **)v30;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v28);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v40);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v29);
    __cxa_guard_release(&qword_255E55420);
  }
  v22 = _MergedGlobals_59;
  v23 = *(std::__shared_weak_count **)algn_255E55418;
  if (*(_QWORD *)algn_255E55418)
  {
    v5 = (unint64_t *)(*(_QWORD *)algn_255E55418 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v39 = v38;
  v36[0] = &off_24FDFD4F0;
  v37 = v36;
  v38[0] = &off_24FDFD470;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v26, (uint64_t)__p, &v22, (uint64_t)v38, (uint64_t)v36);
  v7 = v37;
  if (v37 == v36)
  {
    v8 = 4;
    v7 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_10:
  v9 = v39;
  if (v39 == v38)
  {
    v10 = 4;
    v9 = v38;
    goto LABEL_14;
  }
  if (v39)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v11 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v25 < 0)
    operator delete(__p[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  *(_QWORD *)this = &off_24FDFD3F8;
  *((_QWORD *)this + 35) = 850045863;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 42) = 0;
  realityio::ImportedScene::ImportedScene((realityio::StageSceneLibraryAssetBuilder *)((char *)this + 344));
  return this;
}

void sub_2301CE458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  MEMORY[0x2348B4E1C](v35, 0x1060C40E5A1EACFLL);
  MEMORY[0x2348B4E1C](v34, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v33, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E55420);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void realityio::StageSceneLibraryAssetBuilder::getImportedScene(realityio::StageSceneLibraryAssetBuilder *this@<X0>, std::string *a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 280);
  std::mutex::lock((std::mutex *)((char *)this + 280));
  realityio::ImportedScene::ImportedScene(a2, (uint64_t)this + 344);
  std::mutex::unlock(v4);
}

void sub_2301CE670(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::StageSceneLibraryAssetBuilder::run(realityio::StageSceneLibraryAssetBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t IsPseudoRoot;
  uint64_t *UsdPrimDefaultPredicate;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v11;
  char isSceneLibrary;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t result;
  realityio::EntityBuilder *v18;
  uint64_t v19;
  realityio *v20;
  uint64_t ServiceLocator;
  uint64_t v22;
  _QWORD *v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  realityio::Inputs *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  realityio *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  realityio *v37;
  __int128 v38;
  uint64_t v39;
  realityio *v40;
  int v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  char v45[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t buf[8];
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  IsPseudoRoot = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)v45);
  if ((IsPseudoRoot & 1) != 0)
  {
    UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate((pxrInternal__aapl__pxrReserved__ *)IsPseudoRoot);
    v9 = *UsdPrimDefaultPredicate;
    v8 = UsdPrimDefaultPredicate[1];
    v10 = UsdPrimDefaultPredicate[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v9 & 0x2000) != 0 || (v8 & 0x2000) == 0))
    {
      v9 |= 0x2000uLL;
      v8 &= ~0x2000uLL;
    }
    *(_QWORD *)buf = v9;
    v50 = v8;
    *(_QWORD *)&v51 = v10;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)v45, (uint64_t *)buf, (uint64_t)&v36);
    v27 = a2;
    *(_QWORD *)buf = v36;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, &v37);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v50 + 1, (_DWORD *)&v37 + 1);
    v51 = v38;
    v52 = v39;
    v32 = v40;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v33, &v41);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v33 + 1, &v42);
    v34 = v43;
    v35 = v44;
    while (*(realityio **)buf != v32
         || v50 != v33
         || (pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v51, (uint64_t)&v34) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)buf, (uint64_t)&v28);
      isSceneLibrary = realityio::isSceneLibrary((realityio *)&v28, v11);
      if ((v31 & 7) != 0)
      {
        v13 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
      if (v29)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
      if ((isSceneLibrary & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
        goto LABEL_18;
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)buf);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v18 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
    v19 = realityio::EntityBuilder::kInputName(v18);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)v27, v19, (uint64_t)&v36);
    if ((_BYTE)v36)
    {
      v20 = v37;
      v32 = v37;
      if (v37)
      {
        v20 = (realityio *)RERetain();
        if (v32)
        {
          ServiceLocator = REEngineGetServiceLocator();
          v28 = MEMORY[0x2348B1264](ServiceLocator);
          v22 = *((_QWORD *)v27 + 6);
          v23 = operator new(0x20uLL);
          *v23 = &off_24FDFD570;
          v23[1] = this;
          v23[2] = &v32;
          v23[3] = &v28;
          *((_QWORD *)&v51 + 1) = v23;
          (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v22 + 16))(v22, buf);
          v24 = (uint8_t *)*((_QWORD *)&v51 + 1);
          if (*((uint8_t **)&v51 + 1) == buf)
          {
            v25 = 4;
            v24 = buf;
          }
          else
          {
            if (!*((_QWORD *)&v51 + 1))
            {
LABEL_35:
              realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v32);
              realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v36);
              goto LABEL_18;
            }
            v25 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
          goto LABEL_35;
        }
      }
    }
    else
    {
      v32 = 0;
    }
    v26 = *(NSObject **)(realityio::logObjects(v20) + 24);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22FF26000, v26, OS_LOG_TYPE_DEFAULT, "Stopping operation to export single USD scene for root without a scene library.", buf, 2u);
    }
    goto LABEL_35;
  }
LABEL_18:
  if ((v48 & 7) != 0)
  {
    v15 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
  result = v46;
  if (v46)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v46);
  return result;
}

void sub_2301CEA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v13 = *(_QWORD **)(v11 - 120);
  if (v13 == v10)
  {
    v14 = 4;
    v13 = (_QWORD *)(v11 - 144);
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v11 - 176));
  _Unwind_Resume(a1);
}

void realityio::StageSceneLibraryAssetBuilder::clear(realityio::StageSceneLibraryAssetBuilder *this, realityio::Inputs *a2)
{
  std::mutex *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _OWORD *v7;
  int v8;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  __int128 __p;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  v3 = (std::mutex *)((char *)this + 280);
  std::mutex::lock((std::mutex *)((char *)this + 280));
  realityio::ImportedScene::ImportedScene((realityio::ImportedScene *)v9);
  *((_BYTE *)this + 344) = v9[0];
  v4 = *((_QWORD *)this + 44);
  if (v4 != v10)
  {
    *((_QWORD *)this + 44) = v10;
    v10 = v4;
  }
  v5 = *((_QWORD *)this + 45);
  if (v5 != v11)
  {
    *((_QWORD *)this + 45) = v11;
    v11 = v5;
  }
  v6 = (void **)((char *)this + 368);
  if (*((char *)this + 391) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = __p;
  *((_QWORD *)this + 48) = v13;
  HIBYTE(v13) = 0;
  LOBYTE(__p) = 0;
  v7 = (_OWORD *)((char *)this + 392);
  if (*((char *)this + 415) < 0)
  {
    operator delete(*((void **)this + 49));
    v8 = SHIBYTE(v13);
    *v7 = v14;
    *((_QWORD *)this + 51) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    *((_BYTE *)this + 416) = v16;
    if (v8 < 0)
      operator delete((void *)__p);
  }
  else
  {
    *v7 = v14;
    *((_QWORD *)this + 51) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    *((_BYTE *)this + 416) = v16;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v11);
  realityio::WrappedRERef<void *>::~WrappedRERef(&v10);
  std::mutex::unlock(v3);
}

void sub_2301CECA8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::StageSceneLibraryAssetBuilder::~StageSceneLibraryAssetBuilder(realityio::StageSceneLibraryAssetBuilder *this)
{
  realityio::StageSceneLibraryAssetBuilder::~StageSceneLibraryAssetBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::StageSceneLibraryAssetBuilder *v2;
  uint64_t v3;
  realityio::StageSceneLibraryAssetBuilder *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_QWORD *)this = &off_24FDFD3F8;
  if (*((char *)this + 415) < 0)
    operator delete(*((void **)this + 49));
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)this + 45);
  realityio::WrappedRERef<void *>::~WrappedRERef((_QWORD *)this + 44);
  std::mutex::~mutex((std::mutex *)((char *)this + 280));
  *(_QWORD *)this = off_24FDE1CA0;
  v2 = (realityio::StageSceneLibraryAssetBuilder *)*((_QWORD *)this + 34);
  if (v2 == (realityio::StageSceneLibraryAssetBuilder *)((char *)this + 248))
  {
    v3 = 4;
    v2 = (realityio::StageSceneLibraryAssetBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v2)
      goto LABEL_10;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_10:
  v4 = (realityio::StageSceneLibraryAssetBuilder *)*((_QWORD *)this + 30);
  if (v4 == (realityio::StageSceneLibraryAssetBuilder *)((char *)this + 216))
  {
    v5 = 4;
    v4 = (realityio::StageSceneLibraryAssetBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v4)
      goto LABEL_15;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_15:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v6 = *((_QWORD *)this + 24);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = *((_QWORD *)this + 23);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder(this);
}

realityio::ImportedScene *realityio::ImportedScene::ImportedScene(realityio::ImportedScene *this)
{
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 3, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 6, "");
  *((_BYTE *)this + 72) = 0;
  return this;
}

void sub_2301CED44(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v3);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(v1 + 16));
  realityio::WrappedRERef<void *>::~WrappedRERef(v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFD470;
  return result;
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFD470;
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22[2];
  uint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  uint64_t v27;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v22[0]) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)v22, __p);
  v6 = (std::__shared_weak_count *)__p[1];
  v24 = __p[0];
  v25 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v7 = (unint64_t *)((char *)__p[1] + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v24);
  v9 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "end_of_update");
  v12 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v12)
    v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v13 = (std::__shared_weak_count *)operator new(0x48uLL);
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2A20;
  *(_OWORD *)__p = *(_OWORD *)v22;
  v27 = v23;
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  realityio::CurrentPrimInputDescriptor::CurrentPrimInputDescriptor(&v13[1].__vftable, (uint64_t)__p, (uint64_t *)v12 + 7, 0);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
  __p[0] = &v13[1];
  __p[1] = v13;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  realityio::InputsDescriptor::addInputDescriptor(v3, __p);
  v16 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v17 = (unint64_t *)((char *)__p[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  do
    v19 = __ldaxr(v14);
  while (__stlxr(v19 - 1, v14));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v6)
  {
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2301CF160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;

  if (a15 < 0)
    operator delete(__p);
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  do
    v29 = __ldaxr(v25);
  while (__stlxr(v29 - 1, v25));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDFD4F0;
  return result;
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDFD4F0;
}

char *std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::StageSceneLibraryAssetBuilder::StageSceneLibraryAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDFD570;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDFD570;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  std::mutex *v2;
  std::string::size_type v3;
  std::string::size_type v4;
  void **v5;
  char v6;
  void **v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  int v14;
  int v15;
  realityio *v16;
  NSObject *v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  std::string buf;
  __int128 __p;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (std::mutex *)(v1 + 280);
  std::mutex::lock((std::mutex *)(v1 + 280));
  realityio::ImportedScene::ImportedScene((realityio::ImportedScene *)&buf);
  *(_BYTE *)(v1 + 344) = buf.__r_.__value_.__s.__data_[0];
  v3 = *(_QWORD *)(v1 + 352);
  if (v3 != buf.__r_.__value_.__l.__size_)
  {
    *(_QWORD *)(v1 + 352) = buf.__r_.__value_.__l.__size_;
    buf.__r_.__value_.__l.__size_ = v3;
  }
  v4 = *(_QWORD *)(v1 + 360);
  if (v4 != buf.__r_.__value_.__r.__words[2])
  {
    *(_QWORD *)(v1 + 360) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
    buf.__r_.__value_.__r.__words[2] = v4;
  }
  v5 = (void **)(v1 + 368);
  if (*(char *)(v1 + 391) < 0)
    operator delete(*v5);
  v6 = 0;
  *(_OWORD *)v5 = __p;
  *(_QWORD *)(v1 + 384) = v24;
  HIBYTE(v24) = 0;
  LOBYTE(__p) = 0;
  v7 = (void **)(v1 + 392);
  if (*(char *)(v1 + 415) < 0)
  {
    operator delete(*v7);
    v6 = HIBYTE(v24);
  }
  *(_OWORD *)v7 = v25;
  *(_QWORD *)(v1 + 408) = v26;
  HIBYTE(v26) = 0;
  LOBYTE(v25) = 0;
  *(_BYTE *)(v1 + 416) = v27;
  if (v6 < 0)
    operator delete((void *)__p);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&buf.__r_.__value_.__r.__words[2]);
  realityio::WrappedRERef<void *>::~WrappedRERef(&buf.__r_.__value_.__l.__size_);
  v8 = RESceneCreate();
  REEntityGetParent();
  RESceneAddEntity();
  v9 = REAssetManagerSceneAssetCreate();
  if (v9)
  {
    realityio::Builder::addAsset((uint64_t *)v1, v9, 0);
    std::string::basic_string[abi:ne180100]<0>(v20, "RootScene");
    std::string::basic_string[abi:ne180100]<0>(v18, "memory:RootScene.rescene");
    realityio::ImportedScene::ImportedScene(&buf, 1, v8, v9, (__int128 *)v20, (__int128 *)v18, 1);
    *(_BYTE *)(v1 + 344) = buf.__r_.__value_.__s.__data_[0];
    v10 = *(_QWORD *)(v1 + 352);
    if (v10 != buf.__r_.__value_.__l.__size_)
    {
      *(_QWORD *)(v1 + 352) = buf.__r_.__value_.__l.__size_;
      buf.__r_.__value_.__l.__size_ = v10;
    }
    v11 = *(_QWORD *)(v1 + 360);
    if (v11 != buf.__r_.__value_.__r.__words[2])
    {
      *(_QWORD *)(v1 + 360) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      buf.__r_.__value_.__r.__words[2] = v11;
    }
    if (*(char *)(v1 + 391) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = __p;
    *(_QWORD *)(v1 + 384) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(__p) = 0;
    if (*(char *)(v1 + 415) < 0)
    {
      operator delete(*(void **)(v1 + 392));
      v14 = SHIBYTE(v24);
      *(_OWORD *)v7 = v25;
      *(_QWORD *)(v1 + 408) = v26;
      HIBYTE(v26) = 0;
      LOBYTE(v25) = 0;
      *(_BYTE *)(v1 + 416) = v27;
      if (v14 < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_OWORD *)v7 = v25;
      *(_QWORD *)(v1 + 408) = v26;
      HIBYTE(v26) = 0;
      LOBYTE(v25) = 0;
      *(_BYTE *)(v1 + 416) = v27;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&buf.__r_.__value_.__r.__words[2]);
    realityio::WrappedRERef<void *>::~WrappedRERef(&buf.__r_.__value_.__l.__size_);
    if (v19 < 0)
      operator delete(v18[0]);
    v2 = (std::mutex *)(v1 + 280);
    if (v21 < 0)
      operator delete(v20[0]);
    RERelease();
  }
  else
  {
    realityio::ImportedScene::ImportedScene((realityio::ImportedScene *)&buf);
    *(_BYTE *)(v1 + 344) = buf.__r_.__value_.__s.__data_[0];
    v12 = *(_QWORD *)(v1 + 352);
    if (v12 != buf.__r_.__value_.__l.__size_)
    {
      *(_QWORD *)(v1 + 352) = buf.__r_.__value_.__l.__size_;
      buf.__r_.__value_.__l.__size_ = v12;
    }
    v13 = *(_QWORD *)(v1 + 360);
    if (v13 != buf.__r_.__value_.__r.__words[2])
    {
      *(_QWORD *)(v1 + 360) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      buf.__r_.__value_.__r.__words[2] = v13;
    }
    if (*(char *)(v1 + 391) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = __p;
    *(_QWORD *)(v1 + 384) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(__p) = 0;
    if (*(char *)(v1 + 415) < 0)
    {
      operator delete(*(void **)(v1 + 392));
      v15 = SHIBYTE(v24);
      *(_OWORD *)v7 = v25;
      *(_QWORD *)(v1 + 408) = v26;
      HIBYTE(v26) = 0;
      LOBYTE(v25) = 0;
      *(_BYTE *)(v1 + 416) = v27;
      if (v15 < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_OWORD *)v7 = v25;
      *(_QWORD *)(v1 + 408) = v26;
      HIBYTE(v26) = 0;
      LOBYTE(v25) = 0;
      *(_BYTE *)(v1 + 416) = v27;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&buf.__r_.__value_.__r.__words[2]);
    v16 = (realityio *)realityio::WrappedRERef<void *>::~WrappedRERef(&buf.__r_.__value_.__l.__size_);
    v17 = *(NSObject **)(realityio::logObjects(v16) + 24);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_22FF26000, v17, OS_LOG_TYPE_DEFAULT, "Unable to create root scene asset from USD", (uint8_t *)&buf, 2u);
    }
  }
  if (v8)
    RERelease();
  REEntitySetParent();
  std::mutex::unlock(v2);
}

void sub_2301CF8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::mutex *v22;

  std::mutex::unlock(v22);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::StageSceneLibraryAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t RIOBuilderDirtyStageSubscriptionGetTypeID()
{
  if (RIOBuilderDirtyStageSubscriptionGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderDirtyStageSubscriptionGetTypeID::onceToken, &__block_literal_global_37);
  return RIOBuilderDirtyStageSubscriptionGetTypeID::typeID;
}

uint64_t RIOBuilderDirtyStageSubscriptionCreateWithDirtyStageDescriptors(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex i;
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v38;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v4 = *((_OWORD *)CFArrayGetValueAtIndex(a1, i) + 1);
      v35 = v4;
      v5 = *((_QWORD *)&v4 + 1);
      if (*((_QWORD *)&v4 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
        v8 = v37;
        v9 = v38;
        if (v37 >= v38)
        {
LABEL_13:
          v34 = v4;
          v12 = (v8 - v36) >> 4;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60)
            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
          v14 = v9 - v36;
          if (v14 >> 3 > v13)
            v13 = v14 >> 3;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
            v15 = 0xFFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v38, v15);
          v18 = &v16[16 * v12];
          *(_OWORD *)v18 = v34;
          if (v5)
          {
            v19 = (unint64_t *)(v5 + 8);
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          v21 = v36;
          v22 = v37;
          if (v37 == v36)
          {
            v11 = v18 + 16;
            v36 = &v16[16 * v12];
            v37 = v18 + 16;
            v38 = &v16[16 * v17];
          }
          else
          {
            v23 = &v16[16 * v12];
            do
            {
              v24 = *((_OWORD *)v22 - 1);
              v22 -= 16;
              *((_OWORD *)v23 - 1) = v24;
              v23 -= 16;
              *(_QWORD *)v22 = 0;
              *((_QWORD *)v22 + 1) = 0;
            }
            while (v22 != v21);
            v22 = v36;
            v25 = (uint64_t)v37;
            v11 = v18 + 16;
            v36 = v23;
            v37 = v18 + 16;
            v38 = &v16[16 * v17];
            while ((char *)v25 != v22)
            {
              v25 -= 16;
              std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v25);
            }
          }
          if (v22)
            operator delete(v22);
          goto LABEL_31;
        }
        *(_OWORD *)v37 = v4;
        do
          v10 = __ldxr(v6);
        while (__stxr(v10 + 1, v6));
      }
      else
      {
        v8 = v37;
        v9 = v38;
        if (v37 >= v38)
          goto LABEL_13;
        *(_QWORD *)v37 = v4;
        *((_QWORD *)v8 + 1) = 0;
      }
      v11 = v8 + 16;
LABEL_31:
      v37 = v11;
      if (*((_QWORD *)&v35 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
        }
      }
    }
  }
  v28 = operator new(0x40uLL);
  v28[1] = 0;
  v28[2] = 0;
  *v28 = &off_24FDFD670;
  *(_QWORD *)&v35 = realityio::DirtyStageSubscription::DirtyStageSubscription((uint64_t)(v28 + 3), (_QWORD **)&v36);
  *((_QWORD *)&v35 + 1) = v28;
  v29 = RIOBuilderDirtyStageSubscriptionCreate<std::shared_ptr<realityio::DirtyStageSubscription const> &>(&v35);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_QWORD *)&v35 = &v36;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  return v29;
}

void sub_2301CFC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  a11 = (void **)&a14;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderDirtyStageSubscriptionCopyDirtyStageDescriptors(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void **v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(std::__shared_weak_count **)(a1 + 24);
    v24 = v3;
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    if (v3)
    {
      v22 = 0;
      v23 = 0;
      v21 = 0;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyStageDescriptor const>*,std::shared_ptr<realityio::DirtyStageDescriptor const>*>((char *)&v21, *(_QWORD **)(v3 + 8), *(_QWORD **)(v3 + 16), (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 4);
      v7 = v21;
      v8 = v22;
      if (v21 != v22)
      {
        do
        {
          v9 = *(std::__shared_weak_count **)(v7 + 8);
          v19 = *(void ***)v7;
          v20 = v9;
          if (v9)
          {
            v10 = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          v12 = (const void *)RIOBuilderDirtyStageDescriptorCreate<std::shared_ptr<realityio::DirtyStageDescriptor const> &>(&v19);
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v12);
          v13 = v20;
          if (v20)
          {
            v14 = (unint64_t *)&v20->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
        v4 = v25;
      }
      v19 = (void **)&v21;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    if (v4)
    {
      v16 = (unint64_t *)&v4->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return Mutable;
}

void sub_2301CFE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _RIOBuilderDirtyStageSubscriptionCFFinalize(const void *a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
}

BOOL _RIOBuilderDirtyStageSubscriptionCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderDirtyStageSubscriptionCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderDirtyStageSubscriptionCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderDirtyStageSubscription %p>"), a1);
}

CFStringRef _RIOBuilderDirtyStageSubscriptionCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderDirtyStageSubscription %p>"), a1);
}

void std::__shared_ptr_emplace<realityio::DirtyStageSubscription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFD670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::DirtyStageSubscription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDFD670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::DirtyStageSubscription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void realityio::tokens::OutputIdentifiers_StaticTokenType::~OutputIdentifiers_StaticTokenType(realityio::tokens::OutputIdentifiers_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  void **v130;

  v130 = (void **)((char *)this + 344);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v130);
  v2 = *((_QWORD *)this + 42);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 41);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 40);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 39);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 38);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 37);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 36);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 35);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 34);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 33);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 32);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 31);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 30);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 29);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 28);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *((_QWORD *)this + 27);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *((_QWORD *)this + 26);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *((_QWORD *)this + 25);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *((_QWORD *)this + 24);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *((_QWORD *)this + 23);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *((_QWORD *)this + 22);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *((_QWORD *)this + 21);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *((_QWORD *)this + 20);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *((_QWORD *)this + 19);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *((_QWORD *)this + 18);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *((_QWORD *)this + 17);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *((_QWORD *)this + 16);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *((_QWORD *)this + 15);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *((_QWORD *)this + 14);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *((_QWORD *)this + 13);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *((_QWORD *)this + 12);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *((_QWORD *)this + 11);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *((_QWORD *)this + 10);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *((_QWORD *)this + 9);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *((_QWORD *)this + 8);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *((_QWORD *)this + 7);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *((_QWORD *)this + 6);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  v113 = *((_QWORD *)this + 5);
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stlxr(v115 - 2, v114));
  }
  v116 = *((_QWORD *)this + 4);
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = *((_QWORD *)this + 3);
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stlxr(v121 - 2, v120));
  }
  v122 = *((_QWORD *)this + 2);
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stlxr(v124 - 2, v123));
  }
  v125 = *((_QWORD *)this + 1);
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stlxr(v127 - 2, v126));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v128 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v129 = __ldxr(v128);
    while (__stlxr(v129 - 2, v128));
  }
}

realityio::tokens::OutputIdentifiers_StaticTokenType *realityio::tokens::OutputIdentifiers_StaticTokenType::OutputIdentifiers_StaticTokenType(realityio::tokens::OutputIdentifiers_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;

  v186 = *MEMORY[0x24BDAC8D0];
  v142 = (uint64_t *)(MEMORY[0x2348B2758](this, "audioFileAsset", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 272, "submeshPathsOutput", 0);
  MEMORY[0x2348B2758]((char *)this + 280, "textEntity", 0);
  MEMORY[0x2348B2758]((char *)this + 288, "textMeshAsset", 0);
  MEMORY[0x2348B2758]((char *)this + 296, "textureAsset", 0);
  MEMORY[0x2348B2758]((char *)this + 304, "transformAnimationAsset", 0);
  MEMORY[0x2348B2758]((char *)this + 312, "transformAnimationLibraryAsset", 0);
  MEMORY[0x2348B2758]((char *)this + 320, "transformAnimationSceneData", 0);
  MEMORY[0x2348B2758]((char *)this + 328, "audioAnimationSceneData", 0);
  MEMORY[0x2348B2758]((char *)this + 336, "acousticMeshSceneData", 0);
  v2 = *(_QWORD *)this;
  v143 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v143 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v142;
  v144 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v144 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v145 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v145 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v146 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v146 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v147 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v147 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v148 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v148 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v149 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v149 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v150 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v150 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v151 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v151 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v152 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v152 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v153 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v153 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v154 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v154 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v155 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v155 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v156 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v156 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v157 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v157 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v158 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v158 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v159 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v159 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v160 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v160 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v161 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v161 &= 0xFFFFFFFFFFFFFFF8;
  }
  v59 = *((_QWORD *)this + 19);
  v162 = v59;
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 2, v60));
    if ((v61 & 1) == 0)
      v162 &= 0xFFFFFFFFFFFFFFF8;
  }
  v62 = *((_QWORD *)this + 20);
  v163 = v62;
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 2, v63));
    if ((v64 & 1) == 0)
      v163 &= 0xFFFFFFFFFFFFFFF8;
  }
  v65 = *((_QWORD *)this + 21);
  v164 = v65;
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 2, v66));
    if ((v67 & 1) == 0)
      v164 &= 0xFFFFFFFFFFFFFFF8;
  }
  v68 = *((_QWORD *)this + 22);
  v165 = v68;
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 2, v69));
    if ((v70 & 1) == 0)
      v165 &= 0xFFFFFFFFFFFFFFF8;
  }
  v71 = *((_QWORD *)this + 23);
  v166 = v71;
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 2, v72));
    if ((v73 & 1) == 0)
      v166 &= 0xFFFFFFFFFFFFFFF8;
  }
  v74 = *((_QWORD *)this + 24);
  v167 = v74;
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 2, v75));
    if ((v76 & 1) == 0)
      v167 &= 0xFFFFFFFFFFFFFFF8;
  }
  v77 = *((_QWORD *)this + 25);
  v168 = v77;
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 2, v78));
    if ((v79 & 1) == 0)
      v168 &= 0xFFFFFFFFFFFFFFF8;
  }
  v80 = *((_QWORD *)this + 26);
  v169 = v80;
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 2, v81));
    if ((v82 & 1) == 0)
      v169 &= 0xFFFFFFFFFFFFFFF8;
  }
  v83 = *((_QWORD *)this + 27);
  v170 = v83;
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 2, v84));
    if ((v85 & 1) == 0)
      v170 &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = *((_QWORD *)this + 28);
  v171 = v86;
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 2, v87));
    if ((v88 & 1) == 0)
      v171 &= 0xFFFFFFFFFFFFFFF8;
  }
  v89 = *((_QWORD *)this + 29);
  v172 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v172 &= 0xFFFFFFFFFFFFFFF8;
  }
  v92 = *((_QWORD *)this + 30);
  v173 = v92;
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 2, v93));
    if ((v94 & 1) == 0)
      v173 &= 0xFFFFFFFFFFFFFFF8;
  }
  v95 = *((_QWORD *)this + 31);
  v174 = v95;
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 2, v96));
    if ((v97 & 1) == 0)
      v174 &= 0xFFFFFFFFFFFFFFF8;
  }
  v98 = *((_QWORD *)this + 32);
  v175 = v98;
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 2, v99));
    if ((v100 & 1) == 0)
      v175 &= 0xFFFFFFFFFFFFFFF8;
  }
  v101 = *((_QWORD *)this + 33);
  v176 = v101;
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 2, v102));
    if ((v103 & 1) == 0)
      v176 &= 0xFFFFFFFFFFFFFFF8;
  }
  v104 = *((_QWORD *)this + 34);
  v177 = v104;
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 2, v105));
    if ((v106 & 1) == 0)
      v177 &= 0xFFFFFFFFFFFFFFF8;
  }
  v107 = *((_QWORD *)this + 35);
  v178 = v107;
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 2, v108));
    if ((v109 & 1) == 0)
      v178 &= 0xFFFFFFFFFFFFFFF8;
  }
  v110 = *((_QWORD *)this + 36);
  v179 = v110;
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 2, v111));
    if ((v112 & 1) == 0)
      v179 &= 0xFFFFFFFFFFFFFFF8;
  }
  v113 = *((_QWORD *)this + 37);
  v180 = v113;
  if ((v113 & 7) != 0)
  {
    v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 2, v114));
    if ((v115 & 1) == 0)
      v180 &= 0xFFFFFFFFFFFFFFF8;
  }
  v116 = *((_QWORD *)this + 38);
  v181 = v116;
  if ((v116 & 7) != 0)
  {
    v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 2, v117));
    if ((v118 & 1) == 0)
      v181 &= 0xFFFFFFFFFFFFFFF8;
  }
  v119 = *((_QWORD *)this + 39);
  v182 = v119;
  if ((v119 & 7) != 0)
  {
    v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 2, v120));
    if ((v121 & 1) == 0)
      v182 &= 0xFFFFFFFFFFFFFFF8;
  }
  v122 = *((_QWORD *)this + 40);
  v183 = v122;
  if ((v122 & 7) != 0)
  {
    v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 2, v123));
    if ((v124 & 1) == 0)
      v183 &= 0xFFFFFFFFFFFFFFF8;
  }
  v125 = *((_QWORD *)this + 41);
  v184 = v125;
  if ((v125 & 7) != 0)
  {
    v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v127 = __ldxr(v126);
    while (__stxr(v127 + 2, v126));
    if ((v127 & 1) == 0)
      v184 &= 0xFFFFFFFFFFFFFFF8;
  }
  v128 = *((_QWORD *)this + 42);
  v185 = v128;
  if ((v128 & 7) != 0)
  {
    v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 2, v129));
    if ((v130 & 1) == 0)
      v185 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  v131 = operator new(0x158uLL);
  v132 = 0;
  *((_QWORD *)this + 43) = v131;
  *((_QWORD *)this + 44) = v131;
  *((_QWORD *)this + 45) = v131 + 43;
  do
  {
    v133 = *(&v143 + v132);
    *v131 = v133;
    if ((v133 & 7) != 0)
    {
      v134 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFF8);
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 2, v134));
      if ((v135 & 1) == 0)
        *v131 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v132;
    ++v131;
  }
  while (v132 != 43);
  v136 = &v186;
  *((_QWORD *)this + 44) = v131;
  do
  {
    v138 = *--v136;
    v137 = v138;
    if ((v138 & 7) != 0)
    {
      v139 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
      do
        v140 = __ldxr(v139);
      while (__stlxr(v140 - 2, v139));
    }
  }
  while (v136 != &v143);
  return this;
}

void sub_2301D1350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, _QWORD *a20,_QWORD *a21,_QWORD *a22,_QWORD *a23,_QWORD *a24,_QWORD *a25,_QWORD *a26,_QWORD *a27,_QWORD *a28,_QWORD *a29,_QWORD *a30,_QWORD *a31,_QWORD *a32,_QWORD *a33,_QWORD *a34,_QWORD *a35,_QWORD *a36,_QWORD *a37,_QWORD *a38,_QWORD *a39,_QWORD *a40,_QWORD *a41,_QWORD *a42,_QWORD *a43,void **a44,uint64_t a45,char a46)
{
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int v146;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a44);
  v56 = (char *)&STACK[0x280];
  while (1)
  {
    v58 = *((_QWORD *)v56 - 1);
    v56 -= 8;
    v57 = v58;
    if ((v58 & 7) != 0)
    {
      v59 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
      do
        v60 = __ldxr(v59);
      while (__stlxr(v60 - 2, v59));
    }
    if (v56 == &a46)
    {
      if ((*v52 & 7) != 0)
      {
        v61 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v62 = __ldxr(v61);
        while (__stlxr(v62 - 2, v61));
      }
      if ((*v51 & 7) != 0)
      {
        v63 = (unsigned int *)(*v51 & 0xFFFFFFFFFFFFFFF8);
        do
          v64 = __ldxr(v63);
        while (__stlxr(v64 - 2, v63));
      }
      if ((*v50 & 7) != 0)
      {
        v65 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v66 = __ldxr(v65);
        while (__stlxr(v66 - 2, v65));
      }
      if ((*v49 & 7) != 0)
      {
        v67 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v68 = __ldxr(v67);
        while (__stlxr(v68 - 2, v67));
      }
      if ((*v48 & 7) != 0)
      {
        v69 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v70 = __ldxr(v69);
        while (__stlxr(v70 - 2, v69));
      }
      if ((*v47 & 7) != 0)
      {
        v71 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v72 = __ldxr(v71);
        while (__stlxr(v72 - 2, v71));
      }
      if ((*v55 & 7) != 0)
      {
        v73 = (unsigned int *)(*v55 & 0xFFFFFFFFFFFFFFF8);
        do
          v74 = __ldxr(v73);
        while (__stlxr(v74 - 2, v73));
      }
      if ((*v54 & 7) != 0)
      {
        v75 = (unsigned int *)(*v54 & 0xFFFFFFFFFFFFFFF8);
        do
          v76 = __ldxr(v75);
        while (__stlxr(v76 - 2, v75));
      }
      if ((*v53 & 7) != 0)
      {
        v77 = (unsigned int *)(*v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v78 = __ldxr(v77);
        while (__stlxr(v78 - 2, v77));
      }
      if ((*a11 & 7) != 0)
      {
        v79 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v80 = __ldxr(v79);
        while (__stlxr(v80 - 2, v79));
      }
      if ((*a12 & 7) != 0)
      {
        v81 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v82 = __ldxr(v81);
        while (__stlxr(v82 - 2, v81));
      }
      if ((*a13 & 7) != 0)
      {
        v83 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v84 = __ldxr(v83);
        while (__stlxr(v84 - 2, v83));
      }
      if ((*a14 & 7) != 0)
      {
        v85 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v86 = __ldxr(v85);
        while (__stlxr(v86 - 2, v85));
      }
      if ((*a15 & 7) != 0)
      {
        v87 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v88 = __ldxr(v87);
        while (__stlxr(v88 - 2, v87));
      }
      if ((*a16 & 7) != 0)
      {
        v89 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v90 = __ldxr(v89);
        while (__stlxr(v90 - 2, v89));
      }
      if ((*a17 & 7) != 0)
      {
        v91 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v92 = __ldxr(v91);
        while (__stlxr(v92 - 2, v91));
      }
      if ((*a18 & 7) != 0)
      {
        v93 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v94 = __ldxr(v93);
        while (__stlxr(v94 - 2, v93));
      }
      if ((*a19 & 7) != 0)
      {
        v95 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v96 = __ldxr(v95);
        while (__stlxr(v96 - 2, v95));
      }
      if ((*a20 & 7) != 0)
      {
        v97 = (unsigned int *)(*a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v98 = __ldxr(v97);
        while (__stlxr(v98 - 2, v97));
      }
      if ((*a21 & 7) != 0)
      {
        v99 = (unsigned int *)(*a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v100 = __ldxr(v99);
        while (__stlxr(v100 - 2, v99));
      }
      if ((*a22 & 7) != 0)
      {
        v101 = (unsigned int *)(*a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v102 = __ldxr(v101);
        while (__stlxr(v102 - 2, v101));
      }
      if ((*a23 & 7) != 0)
      {
        v103 = (unsigned int *)(*a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v104 = __ldxr(v103);
        while (__stlxr(v104 - 2, v103));
      }
      if ((*a24 & 7) != 0)
      {
        v105 = (unsigned int *)(*a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v106 = __ldxr(v105);
        while (__stlxr(v106 - 2, v105));
      }
      if ((*a25 & 7) != 0)
      {
        v107 = (unsigned int *)(*a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v108 = __ldxr(v107);
        while (__stlxr(v108 - 2, v107));
      }
      if ((*a26 & 7) != 0)
      {
        v109 = (unsigned int *)(*a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v110 = __ldxr(v109);
        while (__stlxr(v110 - 2, v109));
      }
      if ((*a27 & 7) != 0)
      {
        v111 = (unsigned int *)(*a27 & 0xFFFFFFFFFFFFFFF8);
        do
          v112 = __ldxr(v111);
        while (__stlxr(v112 - 2, v111));
      }
      if ((*a28 & 7) != 0)
      {
        v113 = (unsigned int *)(*a28 & 0xFFFFFFFFFFFFFFF8);
        do
          v114 = __ldxr(v113);
        while (__stlxr(v114 - 2, v113));
      }
      if ((*a29 & 7) != 0)
      {
        v115 = (unsigned int *)(*a29 & 0xFFFFFFFFFFFFFFF8);
        do
          v116 = __ldxr(v115);
        while (__stlxr(v116 - 2, v115));
      }
      if ((*a30 & 7) != 0)
      {
        v117 = (unsigned int *)(*a30 & 0xFFFFFFFFFFFFFFF8);
        do
          v118 = __ldxr(v117);
        while (__stlxr(v118 - 2, v117));
      }
      if ((*a31 & 7) != 0)
      {
        v119 = (unsigned int *)(*a31 & 0xFFFFFFFFFFFFFFF8);
        do
          v120 = __ldxr(v119);
        while (__stlxr(v120 - 2, v119));
      }
      if ((*a32 & 7) != 0)
      {
        v121 = (unsigned int *)(*a32 & 0xFFFFFFFFFFFFFFF8);
        do
          v122 = __ldxr(v121);
        while (__stlxr(v122 - 2, v121));
      }
      if ((*a33 & 7) != 0)
      {
        v123 = (unsigned int *)(*a33 & 0xFFFFFFFFFFFFFFF8);
        do
          v124 = __ldxr(v123);
        while (__stlxr(v124 - 2, v123));
      }
      if ((*a34 & 7) != 0)
      {
        v125 = (unsigned int *)(*a34 & 0xFFFFFFFFFFFFFFF8);
        do
          v126 = __ldxr(v125);
        while (__stlxr(v126 - 2, v125));
      }
      if ((*a35 & 7) != 0)
      {
        v127 = (unsigned int *)(*a35 & 0xFFFFFFFFFFFFFFF8);
        do
          v128 = __ldxr(v127);
        while (__stlxr(v128 - 2, v127));
      }
      if ((*a36 & 7) != 0)
      {
        v129 = (unsigned int *)(*a36 & 0xFFFFFFFFFFFFFFF8);
        do
          v130 = __ldxr(v129);
        while (__stlxr(v130 - 2, v129));
      }
      if ((*a37 & 7) != 0)
      {
        v131 = (unsigned int *)(*a37 & 0xFFFFFFFFFFFFFFF8);
        do
          v132 = __ldxr(v131);
        while (__stlxr(v132 - 2, v131));
      }
      if ((*a38 & 7) != 0)
      {
        v133 = (unsigned int *)(*a38 & 0xFFFFFFFFFFFFFFF8);
        do
          v134 = __ldxr(v133);
        while (__stlxr(v134 - 2, v133));
      }
      if ((*a39 & 7) != 0)
      {
        v135 = (unsigned int *)(*a39 & 0xFFFFFFFFFFFFFFF8);
        do
          v136 = __ldxr(v135);
        while (__stlxr(v136 - 2, v135));
      }
      if ((*a40 & 7) != 0)
      {
        v137 = (unsigned int *)(*a40 & 0xFFFFFFFFFFFFFFF8);
        do
          v138 = __ldxr(v137);
        while (__stlxr(v138 - 2, v137));
      }
      if ((*a41 & 7) != 0)
      {
        v139 = (unsigned int *)(*a41 & 0xFFFFFFFFFFFFFFF8);
        do
          v140 = __ldxr(v139);
        while (__stlxr(v140 - 2, v139));
      }
      if ((*a42 & 7) != 0)
      {
        v141 = (unsigned int *)(*a42 & 0xFFFFFFFFFFFFFFF8);
        do
          v142 = __ldxr(v141);
        while (__stlxr(v142 - 2, v141));
      }
      if ((*a43 & 7) != 0)
      {
        v143 = (unsigned int *)(*a43 & 0xFFFFFFFFFFFFFFF8);
        do
          v144 = __ldxr(v143);
        while (__stlxr(v144 - 2, v143));
      }
      if ((*v46 & 7) != 0)
      {
        v145 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v146 = __ldxr(v145);
        while (__stlxr(v146 - 2, v145));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_2301D19B8()
{
  JUMPOUT(0x2301D14ECLL);
}

void sub_2301D19C0()
{
  JUMPOUT(0x2301D1510);
}

void sub_2301D19C8()
{
  JUMPOUT(0x2301D1534);
}

void sub_2301D19D0()
{
  JUMPOUT(0x2301D1558);
}

void sub_2301D19D8()
{
  JUMPOUT(0x2301D157CLL);
}

void sub_2301D19E0()
{
  JUMPOUT(0x2301D15A0);
}

void sub_2301D19E8()
{
  JUMPOUT(0x2301D15C4);
}

void sub_2301D19F0()
{
  JUMPOUT(0x2301D15E8);
}

void sub_2301D19F8()
{
  JUMPOUT(0x2301D160CLL);
}

void sub_2301D1A00()
{
  JUMPOUT(0x2301D1630);
}

void sub_2301D1A08()
{
  JUMPOUT(0x2301D1654);
}

void sub_2301D1A10()
{
  JUMPOUT(0x2301D1678);
}

void sub_2301D1A18()
{
  JUMPOUT(0x2301D169CLL);
}

void sub_2301D1A20()
{
  JUMPOUT(0x2301D16C0);
}

void sub_2301D1A28()
{
  JUMPOUT(0x2301D16E4);
}

void sub_2301D1A30()
{
  JUMPOUT(0x2301D1708);
}

void sub_2301D1A38()
{
  JUMPOUT(0x2301D172CLL);
}

void sub_2301D1A40()
{
  JUMPOUT(0x2301D1750);
}

void sub_2301D1A48()
{
  JUMPOUT(0x2301D1774);
}

void sub_2301D1A50()
{
  JUMPOUT(0x2301D1798);
}

void sub_2301D1A58()
{
  JUMPOUT(0x2301D17BCLL);
}

void sub_2301D1A60()
{
  JUMPOUT(0x2301D17E0);
}

void sub_2301D1A68()
{
  JUMPOUT(0x2301D1804);
}

void sub_2301D1A70()
{
  JUMPOUT(0x2301D1828);
}

void sub_2301D1A78()
{
  JUMPOUT(0x2301D184CLL);
}

void sub_2301D1A80()
{
  JUMPOUT(0x2301D1870);
}

void sub_2301D1A88()
{
  JUMPOUT(0x2301D1894);
}

void sub_2301D1A90()
{
  JUMPOUT(0x2301D18B8);
}

void sub_2301D1A98()
{
  JUMPOUT(0x2301D18DCLL);
}

void sub_2301D1AA0()
{
  JUMPOUT(0x2301D1900);
}

void sub_2301D1AA8()
{
  JUMPOUT(0x2301D1924);
}

void sub_2301D1AB0()
{
  JUMPOUT(0x2301D1948);
}

void sub_2301D1AB8()
{
  JUMPOUT(0x2301D196CLL);
}

void sub_2301D1AC0()
{
  JUMPOUT(0x2301D1990);
}

uint64_t TgECS::TgECS(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 850045863;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = &off_24FDFD6C0;
  *(_QWORD *)(a1 + 88) = *a3;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(a1 + 88));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_BYTE *)(a1 + 104) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)(a1 + 120) = 850045863;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  MEMORY[0x2348B1C0C]();
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)(a1 + 408));
  *(_QWORD *)(a1 + 456) = a1 + 464;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = a1 + 488;
  return a1;
}

void sub_2301D1C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD **a17, uint64_t a18, pxrInternal__aapl__pxrReserved__::SdfPath *a19, pxrInternal__aapl__pxrReserved__::SdfPath *a20,unsigned int **a21)
{
  _QWORD *v21;
  _QWORD **v22;
  _QWORD **v23;
  _QWORD **v24;
  uint64_t v25;
  std::mutex *v26;
  _QWORD **v27;
  uint64_t v28;
  _QWORD **v29;
  _QWORD **v30;
  uint64_t v31;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a11, *v24);
  pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::~SdfPathTable(a12);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a13, *v27);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v25, *v30);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a14, *v29);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a15, *v22);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a16, *v23);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v28, *a17);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a18);
  std::mutex::~mutex(v26);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a19);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a20);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(a21);
  *v21 = &unk_24FDF4530;
  std::mutex::~mutex(*(std::mutex **)(v31 - 88));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtValue *TgECS::eval@<X0>(TgECS *this@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  realityio::tokens::ActionTokens_StaticTokenType *v6;
  unint64_t v7;
  char *v8;
  realityio::tokens::ActionTokens_StaticTokenType *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *p_p;
  char v15;
  char v16;
  _BYTE v17[8];
  void *__p;
  void *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (TgECS *)((char *)this + 96);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "/__root");
    MEMORY[0x2348B26F8](&p_p, &__p);
    Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&p_p);
    if (SHIBYTE(v20) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "/__root.__entity");
    MEMORY[0x2348B26F8](&p_p, &__p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v4, (int *)&p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 100);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&p_p);
    if (SHIBYTE(v20) < 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v23, &v21);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, &v22);
    __p = 0;
    v19 = 0;
    v20 = 0;
    p_p = &__p;
    v15 = 0;
    __p = operator new(8uLL);
    v19 = __p;
    v20 = (char *)__p + 8;
    v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v20, &v23, &v25, __p);
    v6 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v6)
      v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v7 = *((_QWORD *)v6 + 19) & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      v8 = (char *)(v7 + 16);
      if (*(char *)(v7 + 39) < 0)
        v8 = *(char **)v8;
    }
    else
    {
      v8 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&p_p, v8);
    MEMORY[0x2348B26F8](v17, &p_p);
    TgBase::emitTarget((uint64_t)this, v4, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v17);
    if (v16 < 0)
      operator delete(p_p);
    p_p = &__p;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
    __p = 0;
    v19 = 0;
    v20 = 0;
    v9 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v9)
      v9 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v10 = *((_QWORD *)v9 + 18) & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      v11 = (char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0)
        v11 = *(char **)v11;
    }
    else
    {
      v11 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&p_p, v11);
    MEMORY[0x2348B26F8](&v23, &p_p);
    TgBase::emitTarget((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
    if (v16 < 0)
      operator delete(p_p);
    p_p = &__p;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  }
  v12 = *((_QWORD *)this + 1);
  *(_BYTE *)(v12 + 193) = 0;
  Exec::execGraphSerial((std::chrono::steady_clock::time_point *)v12, v4);
  ++*(_QWORD *)(v12 + 280);
  return Exec::getValue((Exec *)v12, v4, a2);
}

void sub_2301D2084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::genECSPath(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  unsigned int **Data;
  unint64_t v7;
  char *v8;
  void *__p[2];
  char v11;
  int v12;
  int v13;
  int v14;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, a2);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, (_DWORD *)a2 + 1);
  if (*(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5))
  {
    Data = (unsigned int **)atomic_load(&realityio::tokens::StageTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::StageTokens);
    v7 = (unint64_t)Data[1] & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      v8 = (char *)(v7 + 16);
      if (*(char *)(v7 + 39) < 0)
        v8 = *(char **)v8;
    }
    else
    {
      v8 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v8);
    MEMORY[0x2348B26F8](&v12, __p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v13, &v12);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
}

void sub_2301D22C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a17);
  _Unwind_Resume(a1);
}

uint64_t TgECS::update(TgECS *this)
{
  _QWORD *v2;
  char **v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdStage *v9;
  unsigned int *v10;
  unsigned int v11;
  char *v12;
  pxrInternal__aapl__pxrReserved__::UsdStage *v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  pxrInternal__aapl__pxrReserved__ *v15;
  uint64_t v16;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  realityio::tokens::EcsTokens_StaticTokenType *v18;
  unsigned int *v19;
  unsigned int v20;
  char *v21;
  int v22;
  realityio::tokens::EcsTokens_StaticTokenType *v23;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v24;
  uint64_t EmptyString;
  unint64_t *v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v32;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v33;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v34;
  __int128 v35;
  realityio::tokens::ActionTokens_StaticTokenType *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64x2_t v49;
  char *v50;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v51;
  uint64_t v52;
  __int128 v53;
  realityio::tokens::ActionTokens_StaticTokenType *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  char *v68;
  _DWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  realityio::tokens::ActionTokens_StaticTokenType *v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  realityio::tokens::ActionTokens_StaticTokenType *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64x2_t v91;
  char *v92;
  realityio *v93;
  NSObject *v94;
  std::string *v95;
  unsigned int *v96;
  unsigned int v97;
  char *v98;
  char *v99;
  BOOL v100;
  uint64_t Text;
  realityio::tokens::EcsTokens_StaticTokenType *v102;
  realityio::tokens::ActionTokens_StaticTokenType *v103;
  uint64_t v104;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v105;
  uint64_t v106;
  __int128 v107;
  realityio::tokens::ActionTokens_StaticTokenType *v108;
  unint64_t v109;
  char *v110;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v111;
  uint64_t v112;
  __int128 v113;
  realityio::tokens::ActionTokens_StaticTokenType *v114;
  unint64_t v115;
  char *v116;
  _DWORD *v118;
  TgECS *v119;
  char *v120;
  pxrInternal__aapl__pxrReserved__::SdfPath *v121;
  uint64_t *v122;
  pxrInternal__aapl__pxrReserved__::SdfPath *v123;
  int v124;
  int v125;
  int v126;
  int v127;
  char *v128;
  char *v129;
  unint64_t v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int64x2_t v136;
  char *v137;
  unsigned int *v138;
  int v139;
  int v140;
  int v141;
  int v142;
  pxrInternal__aapl__pxrReserved__ *v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  pxrInternal__aapl__pxrReserved__ *v148;
  int v149;
  int v150;
  uint64_t v151;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v152;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v153;
  unint64_t v154;
  char v155[8];
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159[8];
  char v160[8];
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164[2];
  char v165;
  std::string *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int64x2_t v171;
  _QWORD v172[2];
  std::string v173;
  char *v174;
  char **v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v173, "/__root.__entity");
  MEMORY[0x2348B26F8](&v166, &v173);
  v123 = (TgECS *)((char *)this + 96);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 96, (int *)&v166);
  v118 = (_DWORD *)((char *)this + 100);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 100);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v166);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 34) = (char *)this + 280;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  *((_QWORD *)this + 25) = (char *)this + 208;
  *((_QWORD *)this + 26) = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 27) = 0;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 224, v2);
  *((_QWORD *)this + 28) = (char *)this + 232;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 248, *((_QWORD **)this + 32));
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 31) = (char *)this + 256;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 384, *((_QWORD **)this + 49));
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = (char *)this + 392;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 320, *((_QWORD **)this + 41));
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 40) = (char *)this + 328;
  v3 = (char **)((char *)this + 296);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  v120 = (char *)this + 304;
  *((_QWORD *)this + 37) = (char *)this + 304;
  MEMORY[0x2348B211C]((char *)this + 408);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 456, *((_QWORD **)this + 58));
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 57) = (char *)this + 464;
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 480, *((_QWORD **)this + 61));
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 60) = (char *)this + 488;
  v122 = (uint64_t *)((char *)this + 88);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)this + 11);
  if (pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v122);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::SetTime();
  }
  v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v122);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v6);
  TgECS::preTraversalSkeletonConnections((uint64_t **)this, (uint64_t)v160);
  if ((v163 & 7) != 0)
  {
    v7 = (unsigned int *)(v163 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v162);
  if (v161)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v161);
  v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v122);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v9);
  TgECS::buildECSTopologyInfo((_anonymous_namespace_ *)v159, (uint64_t)this, (uint64_t)v155);
  if ((v158 & 7) != 0)
  {
    v10 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v157);
  if (v156)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v156);
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v12 = *v3;
  if (*v3 != v120)
  {
    v119 = this;
    do
    {
      v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v122);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 36));
      v121 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 28);
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v147))
        goto LABEL_23;
      v15 = v148;
      if (!v148 || (v16 = *((_QWORD *)v148 + 7), (v16 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v148, v14);
        v16 = *((_QWORD *)v15 + 7);
      }
      if ((v16 & 0x40) != 0)
      {
        v142 = v147;
        v143 = v148;
        if (v148)
        {
          v26 = (unint64_t *)((char *)v148 + 48);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v144, &v149);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v145, &v150);
        v146 = v151;
        if ((v151 & 7) != 0)
        {
          v28 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 2, v28));
          if ((v29 & 1) == 0)
            v146 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v140, v121);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v141, (_DWORD *)v12 + 8);
        TgECS::ecsEntitySubTree((_anonymous_namespace_ *)&v173, (uint64_t)this, (uint64_t)&v142, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v140);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v140);
        if ((v146 & 7) != 0)
        {
          v30 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
          do
            v31 = __ldxr(v30);
          while (__stlxr(v31 - 2, v30));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v144);
        if (v143)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v143);
        if (realityio::isScene((realityio *)&v147, v32))
        {
          v33 = v153;
          if ((unint64_t)v153 >= v154)
          {
            v34 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v152, &v173);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v153, &v173);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v33 + 1, (_DWORD *)v173.__r_.__value_.__r.__words + 1);
            v34 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8);
          }
          v153 = v34;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v95 = &v173;
      }
      else
      {
LABEL_23:
        v138 = (unsigned int *)*v122;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v138);
        getDefaultPrimPathOrFirst(&v139, (uint64_t *)&v138);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v138);
        v136 = 0uLL;
        v137 = 0;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v123);
        Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
        if (!Data)
          Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v173);
        v18 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
        if (!v18)
          v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v123);
        MEMORY[0x2348B274C](&v166, "__childEntities");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v173, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v166);
        if ((v166 & 7) != 0)
        {
          v19 = (unsigned int *)((unint64_t)v166 & 0xFFFFFFFFFFFFFFF8);
          do
            v20 = __ldxr(v19);
          while (__stlxr(v20 - 2, v19));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v173);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v171, &v132);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v171.i32[1], &v133);
        memset(&v173, 0, sizeof(v173));
        v166 = &v173;
        LOBYTE(v167) = 0;
        v173.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(8uLL);
        v173.__r_.__value_.__l.__size_ = v173.__r_.__value_.__r.__words[0];
        v173.__r_.__value_.__r.__words[2] = v173.__r_.__value_.__r.__words[0] + 8;
        v173.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v173.__r_.__value_.__r.__words[2], &v171, &v171.i32[2], v173.__r_.__value_.__l.__data_);
        TgBase::emitArray((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v131, (uint64_t)&v173);
        v166 = &v173;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v171);
        v128 = 0;
        v129 = 0;
        v130 = 0;
        v21 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v128, &v131);
        v22 = *((unsigned __int8 *)this + 104);
        v129 = v21;
        if (v22)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v124, v123);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v125, v118);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v124);
          v23 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
          if (!v23)
            v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v173);
          v171 = 0uLL;
          v172[0] = 0;
          v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
          if (!v24)
            v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
          if ((*((_QWORD *)v24 + 148) & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (*((_QWORD *)v24 + 148) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v24);
          if (*(char *)(EmptyString + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
          }
          else
          {
            v35 = *(_OWORD *)EmptyString;
            v173.__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
            *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v35;
          }
          if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v173.__r_.__value_.__l.__data_);
          v167 = 0;
          v168 = 0;
          v169 = 0;
          v36 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
          if (!v36)
            v36 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
          v37 = *((_QWORD *)v36 + 20) & 0xFFFFFFFFFFFFFFF8;
          if (v37)
          {
            v38 = (char *)(v37 + 16);
            if (*(char *)(v37 + 39) < 0)
              v38 = *(char **)v38;
          }
          else
          {
            v38 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(v164, v38);
          MEMORY[0x2348B26F8](&v170, v164);
          v39 = v171.i64[1];
          if (v171.i64[1] >= v172[0])
          {
            v41 = 0xCCCCCCCCCCCCCCCDLL * ((v171.i64[1] - v171.i64[0]) >> 3);
            v42 = v41 + 1;
            if (v41 + 1 > 0x666666666666666)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((v172[0] - v171.i64[0]) >> 3) > v42)
              v42 = 0x999999999999999ALL * ((v172[0] - v171.i64[0]) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((v172[0] - v171.i64[0]) >> 3) >= 0x333333333333333)
              v43 = 0x666666666666666;
            else
              v43 = v42;
            v175 = (char **)v172;
            if (v43)
            {
              if (v43 > 0x666666666666666)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v44 = (char *)operator new(40 * v43);
            }
            else
            {
              v44 = 0;
            }
            v45 = (uint64_t)&v44[40 * v41];
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v45, (uint64_t)&v166);
            v47 = v171.i64[1];
            v46 = v171.i64[0];
            if (v171.i64[1] == v171.i64[0])
            {
              v49 = vdupq_n_s64(v171.u64[1]);
              v48 = (uint64_t)&v44[40 * v41];
            }
            else
            {
              v48 = (uint64_t)&v44[40 * v41];
              do
              {
                v48 -= 40;
                v47 -= 40;
                std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v48, v47);
              }
              while (v47 != v46);
              v49 = v171;
            }
            v40 = v45 + 40;
            v171.i64[0] = v48;
            v171.i64[1] = v45 + 40;
            *(int64x2_t *)&v173.__r_.__value_.__r.__words[1] = v49;
            v50 = (char *)v172[0];
            v172[0] = &v44[40 * v43];
            v174 = v50;
            v173.__r_.__value_.__r.__words[0] = v49.i64[0];
            std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)&v173);
            this = v119;
          }
          else
          {
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v171.i64[1], (uint64_t)&v166);
            v40 = v39 + 40;
          }
          v171.i64[1] = v40;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v170);
          v173.__r_.__value_.__r.__words[0] = (std::string::size_type)&v167;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v166);
          if (v165 < 0)
            operator delete(v164[0]);
          v51 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
          if (!v51)
            v51 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
          if ((*((_QWORD *)v51 + 70) & 0xFFFFFFFFFFFFFFF8) != 0)
            v52 = (*((_QWORD *)v51 + 70) & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v52 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v51);
          if (*(char *)(v52 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)v52, *(_QWORD *)(v52 + 8));
          }
          else
          {
            v53 = *(_OWORD *)v52;
            v173.__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 16);
            *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v53;
          }
          if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v173.__r_.__value_.__l.__data_);
          v167 = 0;
          v168 = 0;
          v169 = 0;
          v54 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
          if (!v54)
            v54 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
          v55 = *((_QWORD *)v54 + 20) & 0xFFFFFFFFFFFFFFF8;
          if (v55)
          {
            v56 = (char *)(v55 + 16);
            if (*(char *)(v55 + 39) < 0)
              v56 = *(char **)v56;
          }
          else
          {
            v56 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(v164, v56);
          MEMORY[0x2348B26F8](&v170, v164);
          v57 = v171.i64[1];
          if (v171.i64[1] >= v172[0])
          {
            v59 = 0xCCCCCCCCCCCCCCCDLL * ((v171.i64[1] - v171.i64[0]) >> 3);
            v60 = v59 + 1;
            if (v59 + 1 > 0x666666666666666)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((v172[0] - v171.i64[0]) >> 3) > v60)
              v60 = 0x999999999999999ALL * ((v172[0] - v171.i64[0]) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((v172[0] - v171.i64[0]) >> 3) >= 0x333333333333333)
              v61 = 0x666666666666666;
            else
              v61 = v60;
            v175 = (char **)v172;
            if (v61)
            {
              if (v61 > 0x666666666666666)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v62 = (char *)operator new(40 * v61);
            }
            else
            {
              v62 = 0;
            }
            v63 = (uint64_t)&v62[40 * v59];
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v63, (uint64_t)&v166);
            v65 = v171.i64[1];
            v64 = v171.i64[0];
            if (v171.i64[1] == v171.i64[0])
            {
              v67 = vdupq_n_s64(v171.u64[1]);
              v66 = v63;
            }
            else
            {
              v66 = v63;
              do
              {
                v66 -= 40;
                v65 -= 40;
                std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v66, v65);
              }
              while (v65 != v64);
              v67 = v171;
            }
            v58 = v63 + 40;
            v171.i64[0] = v66;
            v171.i64[1] = v63 + 40;
            *(int64x2_t *)&v173.__r_.__value_.__r.__words[1] = v67;
            v68 = (char *)v172[0];
            v172[0] = &v62[40 * v61];
            v174 = v68;
            v173.__r_.__value_.__r.__words[0] = v67.i64[0];
            std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)&v173);
            this = v119;
          }
          else
          {
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v171.i64[1], (uint64_t)&v166);
            v58 = v57 + 40;
          }
          v171.i64[1] = v58;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v170);
          v173.__r_.__value_.__r.__words[0] = (std::string::size_type)&v167;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v166);
          if (v165 < 0)
            operator delete(v164[0]);
          TgBase::emitTargets((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v171);
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&v173, 0xCCCCCCCCCCCCCCCDLL * ((v171.i64[1] - v171.i64[0]) >> 3));
          v69 = (_DWORD *)v171.i64[1];
          v70 = (_DWORD *)v171.i64[0];
          if (v171.i64[0] != v171.i64[1])
          {
            v71 = v173.__r_.__value_.__r.__words[0];
            do
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v166, v70);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v166 + 1, v70 + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v71, (int *)&v166);
              v72 = v71 + 4;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v72);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v166);
              v70 += 10;
              v71 = v72 + 4;
            }
            while (v70 != v69);
          }
          v73 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
          if (!v73)
            v73 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
          v74 = *((_QWORD *)v73 + 47) & 0xFFFFFFFFFFFFFFF8;
          if (v74)
          {
            v75 = (char *)(v74 + 16);
            if (*(char *)(v74 + 39) < 0)
              v75 = *(char **)v75;
          }
          else
          {
            v75 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&v166, v75);
          MEMORY[0x2348B26F8](v164, &v166);
          TgBase::emitTarget((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v126, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v173, (pxrInternal__aapl__pxrReserved__::SdfPath *)v164);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v164);
          if (SHIBYTE(v168) < 0)
            operator delete(v166);
          v166 = &v173;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
          v173.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
          std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
          v76 = v129;
          if ((unint64_t)v129 >= v130)
          {
            v77 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v128, &v126);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v129, &v126);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v76 + 1, &v127);
            v77 = v76 + 8;
          }
          v129 = v77;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v126);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v124);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v166, &v134);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v166 + 1, &v135);
        v167 = 0;
        v168 = 0;
        v169 = 0;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(&v167, v128, v129, (v129 - v128) >> 3);
        v78 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
        if (!v78)
          v78 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
        v79 = *((_QWORD *)v78 + 18) & 0xFFFFFFFFFFFFFFF8;
        if (v79)
        {
          v80 = (char *)(v79 + 16);
          if (*(char *)(v79 + 39) < 0)
            v80 = *(char **)v80;
        }
        else
        {
          v80 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(&v171, v80);
        MEMORY[0x2348B26F8](&v170, &v171);
        v81 = v136.i64[1];
        if (v136.i64[1] >= (unint64_t)v137)
        {
          v83 = 0xCCCCCCCCCCCCCCCDLL * ((v136.i64[1] - v136.i64[0]) >> 3);
          v84 = v83 + 1;
          if (v83 + 1 > 0x666666666666666)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((uint64_t)&v137[-v136.i64[0]] >> 3) > v84)
            v84 = 0x999999999999999ALL * ((uint64_t)&v137[-v136.i64[0]] >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v137[-v136.i64[0]] >> 3) >= 0x333333333333333)
            v85 = 0x666666666666666;
          else
            v85 = v84;
          v175 = &v137;
          if (v85)
          {
            if (v85 > 0x666666666666666)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v86 = (char *)operator new(40 * v85);
          }
          else
          {
            v86 = 0;
          }
          v87 = (uint64_t)&v86[40 * v83];
          std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v87, (uint64_t)&v166);
          v89 = v136.i64[1];
          v88 = v136.i64[0];
          if (v136.i64[1] == v136.i64[0])
          {
            v91 = vdupq_n_s64(v136.u64[1]);
            v90 = v87;
          }
          else
          {
            v90 = v87;
            do
            {
              v90 -= 40;
              v89 -= 40;
              std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v90, v89);
            }
            while (v89 != v88);
            v91 = v136;
          }
          v82 = v87 + 40;
          v136.i64[0] = v90;
          v136.i64[1] = v87 + 40;
          *(int64x2_t *)&v173.__r_.__value_.__r.__words[1] = v91;
          v92 = v137;
          v137 = &v86[40 * v85];
          v174 = v92;
          v173.__r_.__value_.__r.__words[0] = v91.i64[0];
          std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)&v173);
          this = v119;
        }
        else
        {
          std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v136.i64[1], (uint64_t)&v166);
          v82 = v81 + 40;
        }
        v136.i64[1] = v82;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v170);
        v173.__r_.__value_.__r.__words[0] = (std::string::size_type)&v167;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v166);
        if (SHIBYTE(v172[0]) < 0)
          operator delete((void *)v171.i64[0]);
        TgBase::emitTargets((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v136);
        v94 = *(id *)(realityio::logObjects(v93) + 24);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v121);
          LODWORD(v173.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v173.__r_.__value_.__r.__words + 4) = Text;
          _os_log_error_impl(&dword_22FF26000, v94, OS_LOG_TYPE_ERROR, "ERROR - mismatch entity prim path (\"%s\")\n", (uint8_t *)&v173, 0xCu);
        }

        v173.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v131);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v132);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v134);
        v173.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
        std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v95 = (std::string *)&v139;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v95);
      if ((v151 & 7) != 0)
      {
        v96 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v149);
      if (v148)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v148);
      v98 = (char *)*((_QWORD *)v12 + 1);
      if (v98)
      {
        do
        {
          v99 = v98;
          v98 = *(char **)v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          v99 = (char *)*((_QWORD *)v12 + 2);
          v100 = *(_QWORD *)v99 == (_QWORD)v12;
          v12 = v99;
        }
        while (!v100);
      }
      v12 = v99;
    }
    while (v99 != v120);
    if (v152 != v153)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v123);
      v102 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v102)
        v102 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v166, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v102 + 336));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v166);
      v103 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v103)
        v103 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      if ((*((_QWORD *)v103 + 34) & 0xFFFFFFFFFFFFFFF8) != 0)
        v104 = (*((_QWORD *)v103 + 34) & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v104 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v103);
      MEMORY[0x2348B26F8](&v166, v104);
      TgBase::emitTarget((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v173, &v152, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v166);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v166);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v173);
    }
  }
  v105 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
  if (!v105)
    v105 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
  if ((*((_QWORD *)v105 + 148) & 0xFFFFFFFFFFFFFFF8) != 0)
    v106 = (*((_QWORD *)v105 + 148) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v106 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v105);
  if (*(char *)(v106 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)v106, *(_QWORD *)(v106 + 8));
  }
  else
  {
    v107 = *(_OWORD *)v106;
    v173.__r_.__value_.__r.__words[2] = *(_QWORD *)(v106 + 16);
    *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v107;
  }
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  memset(&v173, 0, sizeof(v173));
  v108 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v108)
    v108 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v109 = *((_QWORD *)v108 + 20) & 0xFFFFFFFFFFFFFFF8;
  if (v109)
  {
    v110 = (char *)(v109 + 16);
    if (*(char *)(v109 + 39) < 0)
      v110 = *(char **)v110;
  }
  else
  {
    v110 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v166, v110);
  MEMORY[0x2348B26F8](&v171, &v166);
  TgBase::emitTarget((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v147, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v173, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v171);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v171);
  if (SHIBYTE(v168) < 0)
    operator delete(v166);
  v166 = &v173;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v147);
  v111 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
  if (!v111)
    v111 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
  if ((*((_QWORD *)v111 + 70) & 0xFFFFFFFFFFFFFFF8) != 0)
    v112 = (*((_QWORD *)v111 + 70) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v112 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v111);
  if (*(char *)(v112 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)v112, *(_QWORD *)(v112 + 8));
  }
  else
  {
    v113 = *(_OWORD *)v112;
    v173.__r_.__value_.__r.__words[2] = *(_QWORD *)(v112 + 16);
    *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v113;
  }
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  memset(&v173, 0, sizeof(v173));
  v114 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v114)
    v114 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v115 = *((_QWORD *)v114 + 20) & 0xFFFFFFFFFFFFFFF8;
  if (v115)
  {
    v116 = (char *)(v115 + 16);
    if (*(char *)(v115 + 39) < 0)
      v116 = *(char **)v116;
  }
  else
  {
    v116 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v166, v116);
  MEMORY[0x2348B26F8](&v171, &v166);
  TgBase::emitTarget((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v147, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v173, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v171);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v171);
  if (SHIBYTE(v168) < 0)
    operator delete(v166);
  v166 = &v173;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v147);
  v173.__r_.__value_.__r.__words[0] = (std::string::size_type)&v152;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v159);
}

void sub_2301D3730(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t TgECS::preTraversalSkeletonConnections(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int8x16_t *v6;
  uint64_t v7;
  int8x16_t v8;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange *v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  BOOL v13;
  pxrInternal__aapl__pxrReserved__::UsdSkelRoot *v14;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *IsA;
  pxrInternal__aapl__pxrReserved__ *v16;
  int8x16_t *UsdPrimDefaultPredicate;
  uint64_t v18;
  __int128 v19;
  pxrInternal__aapl__pxrReserved__ *v20;
  int8x16_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v25;
  uint64_t v26;
  uint64_t *v27;
  int *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  int HasSkelAnimationSource;
  unsigned int *v36;
  unsigned int v37;
  char IsPseudoRoot;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  char v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  char v57;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v58;
  unsigned int *v59;
  unsigned int v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  int v65;
  unsigned int *v66;
  unsigned int v67;
  char v68;
  unsigned int *v69;
  unsigned int v70;
  pxrInternal__aapl__pxrReserved__ *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *v76;
  unsigned int *v77;
  unsigned int v78;
  char v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  uint64_t v98;
  uint64_t i;
  uint64_t **v100;
  uint64_t **v101;
  const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v106;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v107;
  uint64_t v108;
  uint64_t v109;
  int8x16_t v110;
  __int128 v111;
  uint64_t v112;
  int8x16_t v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  uint64_t v126;
  unsigned int *v127;
  int8x16_t v128;
  __int128 v129;
  _QWORD v130[2];
  int v131;
  int v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139[3];
  int v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  int v147;
  char v148;
  char v149;
  char v150[8];
  uint64_t v151;
  uint64_t v152;

  v128 = 0uLL;
  LOBYTE(v129) = 0;
  v4 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v128, 0);
  *(_QWORD *)&v114 = *(_QWORD *)(v4 + 16);
  v113 = *(int8x16_t *)v4;
  v128 = v113;
  LOBYTE(v129) = v114;
  v5 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v128, 1);
  *(_QWORD *)&v111 = *(_QWORD *)(v5 + 16);
  v110 = *(int8x16_t *)v5;
  v128 = v110;
  LOBYTE(v129) = v111;
  v6 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v128, 0x100000005);
  v7 = v6[1].i64[0];
  v8.i64[0] = -8193;
  v8.i64[0] = vandq_s8(*v6, v8).u64[0];
  v8.i64[1] = vorrq_s8(*v6, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  v128 = v8;
  *(_QWORD *)&v129 = v7;
  v9 = (pxrInternal__aapl__pxrReserved__::UsdPrimRange *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v150, a2, &v128);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin(v9, (uint64_t)&v145);
  v101 = a1 + 31;
  v100 = a1 + 34;
  v10 = (uint64_t)(a1 + 25);
  v11 = (uint64_t)(a1 + 28);
  v12.i64[0] = -8193;
  v97 = v12;
  v95 = v12;
  v96 = (int8x16_t)vdupq_n_s64(0x2000uLL);
  v98 = MEMORY[0x24BEE9D00] + 16;
  while (1)
  {
    v128.i64[0] = v151;
    v128.i64[1] = (uint64_t)v150;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    DWORD2(v129) = 0;
    WORD6(v129) = 0;
    if (v145 == *(_OWORD *)&v128)
    {
      v13 = 1;
      if (v146 == (_QWORD)v129 && !v147 && !v148)
        v13 = v149 != 0;
    }
    else
    {
      v13 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v129);
    if (!v13)
      break;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v145, (uint64_t)&v140);
    v14 = (pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v139[0] = v98;
    pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(v14);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((_DWORD)IsA)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v145);
      v16 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v106 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(MEMORY[0x24BEE9D00] + 16);
      UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v16);
      v18 = UsdPrimDefaultPredicate[1].i64[0];
      *(_QWORD *)&v19 = vandq_s8(*UsdPrimDefaultPredicate, v97).u64[0];
      *((_QWORD *)&v19 + 1) = vorrq_s8(*UsdPrimDefaultPredicate, v96).i64[1];
      v137 = v19;
      v138 = v18;
      v20 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate();
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v21 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v20);
      v22 = v21[1].i64[0];
      *(_QWORD *)&v23 = vandq_s8(*v21, v95).u64[0];
      *((_QWORD *)&v23 + 1) = vorrq_s8(*v21, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
      v135 = v23;
      v136 = v22;
      pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings();
      v25 = v102;
      v24 = v103;
      for (i = v103; ; v24 = i)
      {
        if (v25 == (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v24)
        {
          v128.i64[0] = (uint64_t)&v102;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
          MEMORY[0x2348B1B1C](&v106);
          goto LABEL_159;
        }
        pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)(a1 + 23), v25);
        v26 = *((_QWORD *)v25 + 3);
        if (v26)
        {
          v27 = (uint64_t *)*((_QWORD *)v25 + 7);
          v28 = (int *)&v27[50 * v26];
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&v128);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v113, &v110);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v27, &v127);
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v10, &v110, &v127);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v27, &v110);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v113, &v127);
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v11, &v110, &v127);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            v122 = *(_DWORD *)v27;
            v29 = v27[1];
            v123 = v29;
            if (v29)
            {
              v30 = (unint64_t *)(v29 + 48);
              do
                v31 = __ldxr(v30);
              while (__stxr(v31 + 1, v30));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v124, (_DWORD *)v27 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v125, (_DWORD *)v27 + 5);
            v32 = v27[3];
            v126 = v32;
            if ((v32 & 7) != 0)
            {
              v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
              do
                v34 = __ldxr(v33);
              while (__stxr(v34 + 2, v33));
              if ((v34 & 1) == 0)
                v126 &= 0xFFFFFFFFFFFFFFF8;
            }
            HasSkelAnimationSource = boundPrimHasSkelAnimationSource((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v122);
            if ((v126 & 7) != 0)
            {
              v36 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
              do
                v37 = __ldxr(v36);
              while (__stlxr(v37 - 2, v36));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v124);
            if (v123)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v123);
            if (HasSkelAnimationSource)
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v113, &v110);
              std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v101, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v110, &v110);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v113, (uint64_t)&v110);
              IsPseudoRoot = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v110);
              if ((BYTE8(v111) & 7) != 0)
              {
                v39 = (unsigned int *)(*((_QWORD *)&v111 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v40 = __ldxr(v39);
                while (__stlxr(v40 - 2, v39));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v111);
              if (v110.i64[1])
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v110.i64[1]);
              if ((IsPseudoRoot & 1) != 0)
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v113, &v110);
                std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v100, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v110, &v110);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v113, (uint64_t)&v110);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v110, &v121);
                std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v100, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v121, &v121);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v121);
                if ((BYTE8(v111) & 7) != 0)
                {
                  v41 = (unsigned int *)(*((_QWORD *)&v111 + 1) & 0xFFFFFFFFFFFFFFF8);
                  do
                    v42 = __ldxr(v41);
                  while (__stlxr(v42 - 2, v41));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v111);
                if (v110.i64[1])
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v110.i64[1]);
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
            if ((BYTE8(v114) & 7) != 0)
            {
              v43 = (unsigned int *)(*((_QWORD *)&v114 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v44 = __ldxr(v43);
              while (__stlxr(v44 - 2, v43));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v114);
            if (v113.i64[1])
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v113.i64[1]);
            v27 += 50;
          }
          while (v27 != (uint64_t *)v28);
        }
        v45 = *(unsigned int **)pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&v128);
        v127 = v45;
        if (v45)
          break;
LABEL_64:
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr(&v127);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v130);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr((unsigned int **)&v128.i64[1]);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr((unsigned int **)&v128);
        v25 = (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)((char *)v25 + 64);
      }
      v46 = v45 + 2;
      v47 = v45[2];
      if ((v47 & 0x80000000) == 0)
      {
        do
          v48 = __ldxr(v46);
        while (__stxr(v48 + 1, v46));
LABEL_45:
        if ((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::JointTransformsMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)&v127) & 1) != 0
          || pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::BlendShapeWeightsMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)&v127))
        {
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)&v128);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v113, &v110);
          std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v101, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v110, &v110);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v113, (uint64_t)&v110);
          v49 = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v110);
          if ((BYTE8(v111) & 7) != 0)
          {
            v50 = (unsigned int *)(*((_QWORD *)&v111 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v51 = __ldxr(v50);
            while (__stlxr(v51 - 2, v50));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v111);
          if (v110.i64[1])
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v110.i64[1]);
          if ((v49 & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v113, &v110);
            std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v100, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v110, &v110);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v113, (uint64_t)&v110);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v110, &v121);
            std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v100, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v121, &v121);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v121);
            if ((BYTE8(v111) & 7) != 0)
            {
              v52 = (unsigned int *)(*((_QWORD *)&v111 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v53 = __ldxr(v52);
              while (__stlxr(v53 - 2, v52));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v111);
            if (v110.i64[1])
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v110.i64[1]);
          }
          if ((BYTE8(v114) & 7) != 0)
          {
            v54 = (unsigned int *)(*((_QWORD *)&v114 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v55 = __ldxr(v54);
            while (__stlxr(v55 - 2, v54));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v114);
          if (v113.i64[1])
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v113.i64[1]);
        }
        goto LABEL_64;
      }
      if (v47 == -1)
        goto LABEL_73;
      v56 = __ldxr(v46);
      if (v56 == v47)
      {
        if (!__stxr(v47 - 1, v46))
        {
          v57 = 1;
LABEL_72:
          if ((v57 & 1) != 0)
            goto LABEL_45;
LABEL_73:
          pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
          if (!v127)
            goto LABEL_64;
          goto LABEL_45;
        }
      }
      else
      {
        __clrex();
      }
      v57 = 0;
      goto LABEL_72;
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(IsA);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    v58 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((_DWORD)v58)
    {
      MEMORY[0x2348B274C](&v113, "skel:skeleton");
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v140, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v113);
      if ((v113.i8[0] & 7) != 0)
      {
        v59 = (unsigned int *)(v113.i64[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v128))
      {
        v106 = 0;
        v107 = 0;
        v108 = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets() && v107 != v106)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v140, v106);
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v113))
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v113, &v110);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v140, &v102);
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v10, &v110, &v102);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v140, &v110);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v113, &v102);
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v11, &v110, &v102);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            v116 = v140;
            v117 = v141;
            if (v141)
            {
              v61 = (unint64_t *)(v141 + 48);
              do
                v62 = __ldxr(v61);
              while (__stxr(v62 + 1, v61));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v118, &v142);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v119, &v143);
            v120 = v144;
            if ((v144 & 7) != 0)
            {
              v63 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
              do
                v64 = __ldxr(v63);
              while (__stxr(v64 + 2, v63));
              if ((v64 & 1) == 0)
                v120 &= 0xFFFFFFFFFFFFFFF8;
            }
            v65 = boundPrimHasSkelAnimationSource((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v116);
            if ((v120 & 7) != 0)
            {
              v66 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
              do
                v67 = __ldxr(v66);
              while (__stlxr(v67 - 2, v66));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v118);
            if (v117)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v117);
            if (v65)
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v113, &v110);
              std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v101, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v110, &v110);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v113, (uint64_t)&v110);
              v68 = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v110);
              if ((BYTE8(v111) & 7) != 0)
              {
                v69 = (unsigned int *)(*((_QWORD *)&v111 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v70 = __ldxr(v69);
                while (__stlxr(v70 - 2, v69));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v111);
              if (v110.i64[1])
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v110.i64[1]);
              if ((v68 & 1) != 0)
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v113, &v110);
                std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v100, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v110, &v110);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v113, (uint64_t)&v110);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v110, &v127);
                std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v100, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v127, &v127);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
                if ((BYTE8(v111) & 7) != 0)
                {
                  v86 = (unsigned int *)(*((_QWORD *)&v111 + 1) & 0xFFFFFFFFFFFFFFF8);
                  do
                    v87 = __ldxr(v86);
                  while (__stlxr(v87 - 2, v86));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v111);
                if (v110.i64[1])
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v110.i64[1]);
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
          }
          if ((BYTE8(v114) & 7) != 0)
          {
            v88 = (unsigned int *)(*((_QWORD *)&v114 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v89 = __ldxr(v88);
            while (__stlxr(v89 - 2, v88));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v114);
          if (v113.i64[1])
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v113.i64[1]);
        }
        v113.i64[0] = (uint64_t)&v106;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
      }
      if ((BYTE8(v129) & 7) != 0)
      {
        v90 = (unsigned int *)(*((_QWORD *)&v129 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v129);
      if (v128.i64[1])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v128.i64[1]);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(v58);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      v71 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if ((_DWORD)v71)
      {
        v72 = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v71);
        v74 = *v72;
        v73 = v72[1];
        v75 = v72[2];
        if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
          && ((v74 & 0x2000) != 0 || (v73 & 0x2000) == 0))
        {
          v74 |= 0x2000uLL;
          v73 &= ~0x2000uLL;
        }
        v113.i64[0] = v74;
        v113.i64[1] = v73;
        *(_QWORD *)&v114 = v75;
        pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v140, v113.i64, (uint64_t)&v128);
        v113.i64[0] = v128.i64[0];
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v113.i32[2], &v128.i32[2]);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v113.i32[3], &v128.i32[3]);
        v114 = v129;
        v115 = v130[0];
        v110.i64[0] = v130[1];
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v110.i32[2], &v131);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v110.i32[3], &v132);
        v111 = v133;
        v112 = v134;
        while (*(_OWORD *)&v113 != *(_OWORD *)&v110
             || (pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v114, (uint64_t)&v111) & 1) == 0)
        {
          v76 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v113, (uint64_t)&v106);
          pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(v76);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v140, &v102);
            std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v101, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v102, &v102);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v140, (uint64_t)&v102);
            v79 = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v102);
            if ((v105 & 7) != 0)
            {
              v80 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
              do
                v81 = __ldxr(v80);
              while (__stlxr(v81 - 2, v80));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v104);
            if (v103)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v103);
            if ((v79 & 1) != 0)
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v140, &v102);
              std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v100, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v102, &v102);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v140, (uint64_t)&v102);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v102, &v127);
              std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v100, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v127, &v127);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127);
              if ((v105 & 7) != 0)
              {
                v82 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
                do
                  v83 = __ldxr(v82);
                while (__stlxr(v83 - 2, v82));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v104);
              if (v103)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v103);
            }
            if ((v109 & 7) != 0)
            {
              v84 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
              do
                v85 = __ldxr(v84);
              while (__stlxr(v85 - 2, v84));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
            if (v107)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v107);
            break;
          }
          if ((v109 & 7) != 0)
          {
            v77 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
            do
              v78 = __ldxr(v77);
            while (__stlxr(v78 - 2, v77));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
          if (v107)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v107);
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v113);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v110.i64[1]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v113.i64[1]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v131);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v128.i64[1]);
      }
    }
LABEL_159:
    MEMORY[0x2348B1B1C](v139);
    if ((v144 & 7) != 0)
    {
      v92 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
      do
        v93 = __ldxr(v92);
      while (__stlxr(v93 - 2, v92));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v142);
    if (v141)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v141);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v145);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v146);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v152);
}

void sub_2301D4BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x218]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a55);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a47);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a61);
  a55 = (void **)&a51;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a55);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&STACK[0x220]);
  MEMORY[0x2348B1B1C](v61 - 232);
  v63 = *(_QWORD *)(v61 - 184);
  if ((v63 & 7) != 0)
  {
    v64 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
    do
      v65 = __ldxr(v64);
    while (__stlxr(v65 - 2, v64));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a31);
  v66 = *(_QWORD *)(v61 - 200);
  if (v66)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v66);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v61 - 128);
  _Unwind_Resume(a1);
}

uint64_t TgECS::buildECSTopologyInfo(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t **v10;
  uint64_t **v11;
  unsigned int **v12;
  uint64_t EmptyString;
  uint64_t **v14;
  unsigned int **Data;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t *v22;
  pxrInternal__aapl__pxrReserved__::SdfPath *v23;
  uint64_t **v24;
  pxrInternal__aapl__pxrReserved__::SdfPath *v25;
  unsigned int **v26;
  unint64_t v27;
  char *v28;
  uint64_t **v29;
  _DWORD *v30;
  uint64_t *v31;
  char *v32;
  uint64_t **v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  BOOL v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __int16 v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v68;
  unsigned int *v69;
  unsigned int v70;
  char PrimEntityProvidingSetting;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v72;
  int v73;
  pxrInternal__aapl__pxrReserved__ *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  char IsPseudoRoot;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v80;
  char v81;
  pxrInternal__aapl__pxrReserved__ *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t *v88;
  uint64_t *v89;
  int v90;
  uint64_t **v91;
  int v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t **v97;
  unint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  _DWORD *v101;
  uint64_t **v102;
  pxrInternal__aapl__pxrReserved__::SdfPath *v103;
  uint64_t *v104;
  uint64_t **v105;
  pxrInternal__aapl__pxrReserved__::UsdObject *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t v115;
  realityio::tokens::EcsTokens_StaticTokenType *v116;
  void *v117;
  void *v118;
  uint64_t **v120;
  _anonymous_namespace_ *v121;
  uint64_t **v122;
  uint64_t v123;
  unsigned int (*v124)(char **);
  uint64_t v125;
  uint64_t v126;
  unint64_t v128;
  uint64_t **v129;
  _DWORD v130[2];
  _DWORD v131[2];
  _DWORD v132[2];
  _DWORD v133[2];
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *__s;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  void *__p;
  pxrInternal__aapl__pxrReserved__ *v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  int v151;
  char v152;
  char v153;
  unsigned int *v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _OWORD v158[2];
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  int8x16_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int16 v169;
  uint64_t v170;
  _BYTE v171[40];
  _WORD v172[280];
  _BYTE v173[560];
  __int128 v174;
  uint64_t v175;
  unint64_t v176;
  char v177;

  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::concurrent_unordered_base((uint64_t)v173, 8uLL, v172);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::concurrent_unordered_base((uint64_t)v172, 8uLL, &v169);
  v174 = 0uLL;
  LOBYTE(v175) = 0;
  v5 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v174, 0);
  v166 = *(_OWORD *)v5;
  *(_QWORD *)&v167 = *(_QWORD *)(v5 + 16);
  v174 = v166;
  LOBYTE(v175) = v167;
  v6 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v174, 1);
  v160 = *(_OWORD *)v6;
  *(_QWORD *)&v161 = *(_QWORD *)(v6 + 16);
  v174 = v160;
  LOBYTE(v175) = v161;
  v7 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v174, 0x100000005);
  v8 = v7[1].i64[0];
  v9.i64[0] = -8193;
  v9.i64[0] = vandq_s8(*v7, v9).u64[0];
  v9.i64[1] = vorrq_s8(*v7, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  v163 = v9;
  *(_QWORD *)&v164 = v8;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)&v169, a3, &v163);
  v171[36] = 1;
  v167 = 0u;
  v168 = 0u;
  v165 = 0u;
  v166 = 0u;
  v163 = 0u;
  v164 = 0u;
  v161 = 0u;
  v162 = 0u;
  v159 = 0u;
  v160 = 0u;
  memset(v158, 0, sizeof(v158));
  v156 = 0u;
  v157 = 0u;
  v155 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v174, "/");
  MEMORY[0x2348B26F8](&v149, &v174);
  std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(&v160, &v149);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v149);
  if (SHIBYTE(v175) < 0)
    operator delete((void *)v174);
  std::string::basic_string[abi:ne180100]<0>(&v174, "/");
  MEMORY[0x2348B26F8](&v149, &v174);
  std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(v158, &v149);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v149);
  if (SHIBYTE(v175) < 0)
    operator delete((void *)v174);
  v121 = a1;
  LOBYTE(v174) = 0;
  std::deque<BOOL>::push_back(&v155, &v174);
  v10 = (uint64_t **)(a2 + 304);
  v122 = (uint64_t **)(a2 + 296);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a2 + 296, *(_QWORD **)(a2 + 304));
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a2 + 296) = a2 + 304;
  v11 = (uint64_t **)(a2 + 320);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a2 + 320, *(_QWORD **)(a2 + 328));
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 320) = a2 + 328;
  if (!*(_BYTE *)(a2 + 104))
  {
    v14 = (uint64_t **)(a2 + 320);
    Data = (unsigned int **)atomic_load(&realityio::tokens::StageTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::StageTokens);
    v16 = (unint64_t)Data[1] & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      v17 = (char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0)
        v17 = *(char **)v17;
    }
    else
    {
      v17 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "/");
    MEMORY[0x2348B26F8](&v139, &__p);
    __s = v17;
    LODWORD(v142) = v139;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
    HIDWORD(v142) = HIDWORD(v139);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
    v21 = operator new(0x30uLL);
    *(_QWORD *)&v149 = v21;
    *((_QWORD *)&v149 + 1) = a2 + 304;
    LOBYTE(v150) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v174, __s);
    MEMORY[0x2348B26F8](v21 + 7, &v174);
    if (SHIBYTE(v175) < 0)
      operator delete((void *)v174);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v21 + 9, &v142);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v21 + 10, (_DWORD *)&v142 + 1);
    LOBYTE(v150) = 1;
    v22 = *v10;
    if (*v10)
    {
      v23 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v149 + 28);
      while (1)
      {
        while (1)
        {
          v24 = (uint64_t **)v22;
          v25 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v22 + 28);
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v23, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v22 + 28)))break;
          v22 = *v24;
          v10 = v24;
          if (!*v24)
            goto LABEL_31;
        }
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v25, v23))
          break;
        v10 = v24 + 1;
        v22 = v24[1];
        if (!v22)
          goto LABEL_31;
      }
      if (*v10)
        goto LABEL_32;
    }
    else
    {
      v24 = (uint64_t **)(a2 + 304);
    }
LABEL_31:
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v122, (uint64_t)v24, v10, (uint64_t *)v149);
    *(_QWORD *)&v149 = 0;
LABEL_32:
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)&v149, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v142);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v139);
    if (SHIBYTE(v147) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "/");
    MEMORY[0x2348B26F8](&v137, &__p);
    v26 = (unsigned int **)atomic_load(&realityio::tokens::StageTokens);
    v11 = (uint64_t **)(a2 + 320);
    if (!v26)
      v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::StageTokens);
    v27 = (unint64_t)v26[1] & 0xFFFFFFFFFFFFFFF8;
    if (v27)
    {
      v28 = (char *)(v27 + 16);
      if (*(char *)(v27 + 39) < 0)
        v28 = *(char **)v28;
    }
    else
    {
      v28 = "";
    }
    LODWORD(__s) = v137;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
    HIDWORD(__s) = HIDWORD(v137);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
    v142 = v28;
    v29 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v14, &v139, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__s);
    if (!*v29)
    {
      v30 = operator new(0x30uLL);
      *(_QWORD *)&v149 = v30;
      *((_QWORD *)&v149 + 1) = a2 + 328;
      LOBYTE(v150) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v30 + 7, &__s);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v30 + 8, (_DWORD *)&__s + 1);
      std::string::basic_string[abi:ne180100]<0>(&v174, v142);
      MEMORY[0x2348B26F8](v30 + 9, &v174);
      if (SHIBYTE(v175) < 0)
        operator delete((void *)v174);
      LOBYTE(v150) = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v14, v139, v29, (uint64_t *)v149);
      *(_QWORD *)&v149 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)&v149, 0);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__s);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v137);
    if (SHIBYTE(v147) < 0)
      operator delete(__p);
    goto LABEL_46;
  }
  std::string::basic_string[abi:ne180100]<0>(&v174, "/");
  MEMORY[0x2348B26F8](&v149, &v174);
  if (SHIBYTE(v175) < 0)
    operator delete((void *)v174);
  __p = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v12 = (unsigned int **)atomic_load(&realityio::tokens::StageTokens);
  if (!v12)
    v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::StageTokens);
  if (((unint64_t)v12[1] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = ((unint64_t)v12[1] & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v12);
  MEMORY[0x2348B26F8](&__s, EmptyString);
  v154 = *(unsigned int **)(a2 + 88);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v154);
  getDefaultPrimPathOrFirst(&v139, (uint64_t *)&v154);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v154);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(&v174, &__s, &__p);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(v122, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v174, &v174);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v18 = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(v18, &__p, &__s);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t **)(a2 + 320), (pxrInternal__aapl__pxrReserved__::SdfPath *)&v174, &v174);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v19 = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(v19, &v139, &v149);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(v122, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v174, &v174);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v20 = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(v20, &v149, &v139);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t **)(a2 + 320), (pxrInternal__aapl__pxrReserved__::SdfPath *)&v174, &v174);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v139);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__s);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v149);
LABEL_46:
  LOBYTE(v174) = 0;
  std::deque<BOOL>::push_back(&v166, &v174);
  LOBYTE(v174) = 1;
  std::deque<BOOL>::push_back(&v163, &v174);
  v120 = v11;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&v169, (uint64_t)&v149);
  v31 = &v175;
  v32 = (char *)&v175 + 4;
  v33 = (uint64_t **)(a2 + 272);
  v34 = (_DWORD *)&v174 + 1;
  v35 = a2 + 344;
  v124 = *(unsigned int (**)(char **))(MEMORY[0x24BEE9D78] + 48);
  v36 = (uint64_t *)(a2 + 232);
  v126 = MEMORY[0x24BEE9D68] + 16;
  v125 = MEMORY[0x24BEE9D28] + 16;
  v123 = MEMORY[0x24BEE9DC8] + 16;
  v129 = (uint64_t **)(a2 + 232);
  while (1)
  {
    *(_QWORD *)&v174 = v170;
    *((_QWORD *)&v174 + 1) = &v169;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    LODWORD(v176) = 0;
    WORD2(v176) = 0;
    if (v149 == v174)
    {
      v37 = 1;
      if (v150 == v175 && !v151 && !v152)
        v37 = v153 != 0;
    }
    else
    {
      v37 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v31);
    if (!v37)
      break;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v149, (uint64_t)&__p);
    if (v153)
    {
      v38 = v157;
      --*((_QWORD *)&v157 + 1);
      v39 = (((_QWORD)v156 - *((_QWORD *)&v155 + 1)) << 9) - 1;
      if ((_QWORD)v156 == *((_QWORD *)&v155 + 1))
        v39 = 0;
      if ((unint64_t)(v39 - (*((_QWORD *)&v38 + 1) + v38) - 0x1FFF) <= 0xFFFFFFFFFFFFDFFFLL)
      {
        operator delete(*(void **)(v156 - 8));
        *(_QWORD *)&v156 = v156 - 8;
      }
      std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::pop_back(&v160);
      std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::pop_back(v158);
      v40 = *((_QWORD *)&v168 + 1) - 1;
      v41 = v168;
      v42 = *((_QWORD *)&v166 + 1);
      v43 = *((_QWORD *)&v168 + 1) - 1 + v168;
      if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v166 + 1) + ((v43 >> 9) & 0x7FFFFFFFFFFFF8)) + (v43 & 0xFFF)))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v174);
        std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v33, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v174, &v174);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
        *(_BYTE *)pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::operator[](v35, (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v158[0] + 1)+ (((unint64_t)(*((_QWORD *)&v159 + 1) + v159 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((_QWORD *)&v159 + 1) + v159 - 1) & 0x1FF))) = 1;
        v41 = v168;
        v42 = *((_QWORD *)&v166 + 1);
        v40 = *((_QWORD *)&v168 + 1) - 1;
        v43 = *((_QWORD *)&v168 + 1) - 1 + v168;
        v44 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v166 + 1) + ((v43 >> 9) & 0x7FFFFFFFFFFFF8)) + (v43 & 0xFFF));
      }
      else
      {
        v44 = 0;
      }
      v53 = (((_QWORD)v167 - v42) << 9) - 1;
      *((_QWORD *)&v168 + 1) = v40;
      if ((_QWORD)v167 == v42)
        v53 = 0;
      if (v53 - v43 >= 0x2000)
      {
        operator delete(*(void **)(v167 - 8));
        v42 = *((_QWORD *)&v166 + 1);
        *(_QWORD *)&v167 = v167 - 8;
        v40 = *((_QWORD *)&v168 + 1);
        v41 = v168;
      }
      v54 = v164;
      v55 = v40 + v41 - 1;
      v56 = *(_QWORD *)(v42 + ((v55 >> 9) & 0x7FFFFFFFFFFFF8));
      v57 = v55 & 0xFFF;
      if ((_QWORD)v164 == v163.i64[1])
        v58 = 0;
      else
        v58 = (((_QWORD)v164 - v163.i64[1]) << 9) - 1;
      *(_BYTE *)(v56 + v57) |= v44;
      v59 = (*((_QWORD *)&v165 + 1))--;
      if ((unint64_t)(v58 - (v59 + v165) - 0x1FFF) <= 0xFFFFFFFFFFFFDFFFLL)
      {
        operator delete(*(void **)(v54 - 8));
        *(_QWORD *)&v164 = v164 - 8;
      }
      goto LABEL_167;
    }
    LOBYTE(v174) = 0;
    std::deque<BOOL>::push_back(&v166, &v174);
    v45 = v163.i64[1];
    v46 = (((_QWORD)v164 - v163.i64[1]) << 9) - 1;
    v47 = *((_QWORD *)&v165 + 1);
    v48 = v165 + *((_QWORD *)&v165 + 1);
    if ((_QWORD)v164 == v163.i64[1])
      v46 = 0;
    v49 = v48 - 1;
    v50 = *(_QWORD *)(v163.i64[1] + (((v48 - 1) >> 9) & 0x7FFFFFFFFFFFF8));
    if (v46 == v48)
    {
      std::deque<BOOL>::__add_back_capacity(&v163);
      v47 = *((_QWORD *)&v165 + 1);
      v45 = v163.i64[1];
      v48 = v165 + *((_QWORD *)&v165 + 1);
    }
    *(_BYTE *)(*(_QWORD *)(v45 + ((v48 >> 9) & 0x7FFFFFFFFFFFF8)) + (v48 & 0xFFF)) = *(_BYTE *)(v50 + (v49 & 0xFFF));
    *((_QWORD *)&v165 + 1) = v47 + 1;
    MEMORY[0x2348B274C](&v139, "visibility");
    MEMORY[0x2348B274C](&v137, "inherited");
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v149, (uint64_t)&__s);
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__s, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v139, (uint64_t)&v174);
    if ((_BYTE)v174)
    {
      v128 = *((_QWORD *)&v174 + 1);
      if ((BYTE8(v174) & 7) != 0)
      {
        v51 = (unsigned int *)(*((_QWORD *)&v174 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 2, v51));
        goto LABEL_83;
      }
    }
    else
    {
      v128 = v137;
      if ((v137 & 7) != 0)
      {
        v51 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 2, v51));
LABEL_83:
        if ((v52 & 1) == 0)
          v128 = (unint64_t)v51;
      }
    }
    if ((_BYTE)v174)
    {
      if ((BYTE8(v174) & 7) != 0)
      {
        v60 = (unsigned int *)(*((_QWORD *)&v174 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
    }
    else if (v177 < 0)
    {
      operator delete((void *)v176);
    }
    if ((v144 & 7) != 0)
    {
      v62 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
      do
        v63 = __ldxr(v62);
      while (__stlxr(v63 - 2, v62));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v143);
    if (v142)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v142);
    if ((v137 & 7) != 0)
    {
      v64 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
      do
        v65 = __ldxr(v64);
      while (__stlxr(v65 - 2, v64));
    }
    if ((v139 & 7) != 0)
    {
      v66 = (unsigned int *)(v139 & 0xFFFFFFFFFFFFFFF8);
      do
        v67 = __ldxr(v66);
      while (__stlxr(v67 - 2, v66));
    }
    MEMORY[0x2348B274C](&v174, "invisible");
    if ((v174 & 7) != 0)
    {
      v69 = (unsigned int *)(v174 & 0xFFFFFFFFFFFFFFF8);
      do
        v70 = __ldxr(v69);
      while (__stlxr(v70 - 2, v69));
    }
    PrimEntityProvidingSetting = realityio::getPrimEntityProvidingSetting((realityio *)&__p, v68);
    LOBYTE(v174) = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v155 + 1)
                                        + (((unint64_t)(*((_QWORD *)&v157 + 1) + v157 - 1) >> 9) & 0x7FFFFFFFFFFFF8))
                            + ((*((_QWORD *)&v157 + 1) + v157 - 1) & 0xFFF)) | PrimEntityProvidingSetting;
    std::deque<BOOL>::push_back(&v155, &v174);
    v73 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)&v155 + 1)
                                         + (((unint64_t)(*((_QWORD *)&v157 + 1) + v157 - 1) >> 9) & 0x7FFFFFFFFFFFF8))
                             + ((*((_QWORD *)&v157 + 1) + v157 - 1) & 0xFFF));
    v74 = v146;
    if (!v146 || (v75 = *((_QWORD *)v146 + 7), (v75 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v146, v72);
      v75 = *((_QWORD *)v74 + 7);
    }
    v76 = *((_QWORD *)&v165 + 1) + v165 - 1;
    v77 = v76 >> 12;
    if ((v75 & 0x40) != 0)
    {
      v78 = *(unsigned __int8 *)(*(_QWORD *)(v163.i64[1] + 8 * v77) + (v76 & 0xFFF));
    }
    else
    {
      v78 = 0;
      *(_BYTE *)(*(_QWORD *)(v163.i64[1] + 8 * v77) + (v76 & 0xFFF)) = 0;
    }
    if (*(_BYTE *)(a2 + 104)
      || !realityio::isEntityProviding((realityio *)&__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(v73 != 0)))
    {
      goto LABEL_122;
    }
    IsPseudoRoot = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p);
    v81 = v78 ? IsPseudoRoot : 1;
    if ((v81 & 1) != 0)
      goto LABEL_122;
    v82 = v146;
    if (!v146 || (v83 = *((_QWORD *)v146 + 7), (v83 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v146, v80);
      v83 = *((_QWORD *)v82 + 7);
    }
    if ((v83 & 0x40) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v174);
      std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(&v160, &v174);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &__s);
      *(_BYTE *)pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::operator[](v35, &__s) = 0;
      std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(v158, &__s);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v139);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v174, &__s);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v34, (_DWORD *)&__s + 1);
      DWORD2(v174) = v139;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
      HIDWORD(v174) = HIDWORD(v139);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(v122, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v174, &v174);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v139);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v139);
      LODWORD(v174) = v139;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
      DWORD1(v174) = HIDWORD(v139);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v174 + 2, &__s);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v174 + 3, (_DWORD *)&__s + 1);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(v120, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v174, &v174);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v139);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__s);
    }
    else
    {
LABEL_122:
      std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(&v160, (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v160 + 1)+ (((unint64_t)(*((_QWORD *)&v162 + 1) + v162 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((_QWORD *)&v162 + 1) + v162 - 1) & 0x1FF)));
      std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(v158, (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v158[0] + 1)+ (((unint64_t)(*((_QWORD *)&v159 + 1) + v159 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((_QWORD *)&v159 + 1) + v159 - 1) & 0x1FF)));
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    __s = (char *)(MEMORY[0x24BEE9D78] + 16);
    if (v142
      && (v142[57] & 8) == 0
      && v124(&__s)
      && pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&__s))
    {
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v166 + 1)
                           + (((unint64_t)(*((_QWORD *)&v168 + 1) + v168 - 1) >> 9) & 0x7FFFFFFFFFFFF8))
               + ((*((_QWORD *)&v168 + 1) + v168 - 1) & 0xFFF)) = 1;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v174);
    v84 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v33, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v174);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
    v85 = *((_QWORD *)&v168 + 1) + v168 - 1;
    v86 = v85 >> 12;
    if (v84)
    {
      v87 = 1;
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v166 + 1) + 8 * v86) + (v85 & 0xFFF)) = 1;
    }
    else
    {
      v87 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)&v166 + 1) + 8 * v86) + (v85 & 0xFFF));
    }
    *(_BYTE *)pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::operator[](v35, (_DWORD *)(*(_QWORD *)(*((_QWORD *)&v158[0] + 1)+ (((unint64_t)(*((_QWORD *)&v159 + 1) + v159 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((_QWORD *)&v159 + 1) + v159 - 1) & 0x1FF))) = v87;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v174);
    v88 = (uint64_t *)*v36;
    v89 = v36;
    if (!*v36)
      goto LABEL_137;
    do
    {
      v90 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v88 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v174);
      v91 = (uint64_t **)(v88 + 1);
      if (!v90)
      {
        v91 = (uint64_t **)v88;
        v36 = v88;
      }
      v88 = *v91;
    }
    while (*v91);
    v89 = (uint64_t *)(a2 + 232);
    if (v36 == (uint64_t *)v129
      || (v92 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v174, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v36 + 28)), v89 = (uint64_t *)(a2 + 232), v92))
    {
LABEL_137:
      v36 = v89;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174);
    if (v129 != (uint64_t **)v36)
    {
      v93 = v32;
      v94 = v31;
      v95 = v35;
      v96 = v34;
      v97 = v33;
      v98 = *((_QWORD *)&v159 + 1) + v159 - 1;
      v99 = *(_QWORD *)(*((_QWORD *)&v158[0] + 1) + ((v98 >> 6) & 0x3FFFFFFFFFFFFF8));
      v100 = operator new(0x30uLL);
      v101 = (_DWORD *)(v99 + 8 * (v98 & 0x1FF));
      v102 = (uint64_t **)(a2 + 232);
      *(_QWORD *)&v174 = v100;
      *((_QWORD *)&v174 + 1) = a2 + 232;
      v103 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v100 + 7);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v100 + 7, v101);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v100 + 8, v101 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v100 + 9, (_DWORD *)v36 + 9);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v100 + 10, (_DWORD *)v36 + 10);
      LOBYTE(v175) = 1;
      v104 = *v129;
      v105 = (uint64_t **)(a2 + 232);
      v33 = v97;
      v34 = v96;
      v35 = v95;
      v31 = v94;
      v32 = v93;
      if (*v129)
      {
        do
        {
          while (1)
          {
            v105 = (uint64_t **)v104;
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v103, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v104 + 28)))break;
            v104 = *v105;
            v102 = v105;
            if (!*v105)
              goto LABEL_145;
          }
          v104 = v105[1];
        }
        while (v104);
        v102 = v105 + 1;
      }
LABEL_145:
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)(a2 + 224), (uint64_t)v105, v102, (uint64_t *)v174);
      *(_QWORD *)&v174 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)&v174, 0);
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v139 = v126;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v36 = (uint64_t *)(a2 + 232);
    v137 = v125;
    if (v140
      && (*(_BYTE *)(v140 + 57) & 8) == 0
      && ((*(uint64_t (**)(uint64_t *))(v139 + 32))(&v139) & 1) != 0
      || v138 && (*(_BYTE *)(v138 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v137 + 32))(&v137))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v176 = 0;
      *(_QWORD *)&v174 = v123;
      if (!atomic_load(MEMORY[0x24BEE8128]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
      MEMORY[0x2348B24C4](&v174);
      if (v135 && (*(_BYTE *)(v135 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v134 + 32))(&v134))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, v131);
        v107 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v174, &v135, &v136);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v107, v130);
        v132[0] = v131[0];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
        v132[1] = v131[1];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
        v133[0] = v130[0];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
        v133[1] = v130[1];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t **)(a2 + 384), (pxrInternal__aapl__pxrReserved__::SdfPath *)v132, v132);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v133);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v132);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v130);
        if ((v176 & 7) != 0)
        {
          v108 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
          do
            v109 = __ldxr(v108);
          while (__stlxr(v109 - 2, v108));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v31);
        if (*((_QWORD *)&v174 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v174 + 1));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v131);
      }
      MEMORY[0x2348B20B0](&v134);
    }
    MEMORY[0x2348B1D44](&v137);
    MEMORY[0x2348B2044](&v139);
    MEMORY[0x2348B2080](&__s);
    if ((v128 & 7) != 0)
    {
      v110 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
      do
        v111 = __ldxr(v110);
      while (__stlxr(v111 - 2, v110));
    }
LABEL_167:
    if ((v148 & 7) != 0)
    {
      v112 = (unsigned int *)(v148 & 0xFFFFFFFFFFFFFFF8);
      do
        v113 = __ldxr(v112);
      while (__stlxr(v113 - 2, v112));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v147);
    if (v146)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v146);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v149);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v150);
  v114 = *((_QWORD *)&v162 + 1) + v162 - 1;
  v115 = *(_QWORD *)(*((_QWORD *)&v160 + 1) + ((v114 >> 6) & 0x3FFFFFFFFFFFFF8));
  v116 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
  if (!v116)
    v116 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
  std::deque<BOOL>::~deque[abi:ne180100]((uint64_t)&v155);
  std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::~deque[abi:ne180100](v158);
  std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::~deque[abi:ne180100](&v160);
  std::deque<BOOL>::~deque[abi:ne180100]((uint64_t)&v163);
  std::deque<BOOL>::~deque[abi:ne180100]((uint64_t)&v166);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v171);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base((uint64_t)v172, v117);
  return tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base((uint64_t)v173, v118);
}

void sub_2301D6670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  __int16 a68;
  uint64_t a72;
  void *v73;
  void *v74;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a46);
  if (a61 < 0)
    operator delete(__p);
  std::deque<BOOL>::~deque[abi:ne180100]((uint64_t)&a68);
  std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::~deque[abi:ne180100](&a72);
  std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::~deque[abi:ne180100](&STACK[0x220]);
  std::deque<BOOL>::~deque[abi:ne180100]((uint64_t)&STACK[0x250]);
  std::deque<BOOL>::~deque[abi:ne180100]((uint64_t)&STACK[0x280]);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&STACK[0x2B8]);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base((uint64_t)&STACK[0x2F0], v73);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base((uint64_t)&STACK[0x520], v74);
  _Unwind_Resume(a1);
}

uint64_t TgECS::ecsEntitySubTree(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  realityio::tokens::EcsTokens_StaticTokenType *v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t *v10;
  uint64_t v11;
  int8x16_t v12;
  char v13;
  BOOL v14;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v15;
  int IsA;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v31;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  realityio::tokens::EcsTokens_StaticTokenType *v40;
  _DWORD *v41;
  _DWORD *v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t *v47;
  uint64_t v48;
  int8x16_t v49;
  BOOL v50;
  _BOOL4 v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  realityio::tokens::EcsTokens_StaticTokenType *v56;
  _DWORD *v57;
  _DWORD *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  realityio::tokens::EcsTokens_StaticTokenType *v67;
  unint64_t *v68;
  unint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unint64_t *v74;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v75;
  uint64_t EmptyString;
  __int128 v77;
  realityio::tokens::ActionTokens_StaticTokenType *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64x2_t v91;
  char *v92;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v93;
  uint64_t v94;
  __int128 v95;
  realityio::tokens::ActionTokens_StaticTokenType *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int64x2_t v109;
  char *v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  uint64_t v114;
  realityio::tokens::ActionTokens_StaticTokenType *v115;
  unint64_t v116;
  char *v117;
  unsigned int *v118;
  unsigned int v119;
  char *v120;
  char *v121;
  uint64_t v122;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v123;
  BOOL RealityKitStage;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  realityio::tokens::EcsTokens_StaticTokenType *v135;
  unsigned int *v136;
  unsigned int v137;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v138;
  realityio::tokens::ActionTokens_StaticTokenType *v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int64x2_t v152;
  char *v153;
  realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *v154;
  realityio::tokens::ActionTokens_StaticTokenType *v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int64x2_t v168;
  char *v169;
  double v170;
  double v171;
  uint64_t v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int v175;
  float v176;
  realityio::tokens::EcsTokens_StaticTokenType *v177;
  realityio::tokens::EcsTokens_StaticTokenType *v178;
  realityio::tokens::EcsTokens_StaticTokenType *v179;
  realityio::tokens::EcsTokens_StaticTokenType *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  float v184;
  float v185;
  unsigned int *v186;
  unsigned int v187;
  char *v188;
  char *v189;
  uint64_t v190;
  unsigned int *v191;
  unsigned int v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unsigned int *v196;
  unsigned int v197;
  char *v198;
  char *v199;
  realityio::tokens::EcsTokens_StaticTokenType *v200;
  realityio::tokens::EcsTokens_StaticTokenType *v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  _DWORD *v206;
  _DWORD *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  realityio::tokens::ActionTokens_StaticTokenType *v214;
  unint64_t v215;
  char *v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  unsigned int *v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  uint64_t v235;
  unint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int *v239;
  unsigned int v240;
  char *v241;
  char *v242;
  uint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int *v249;
  unsigned int v250;
  char *v251;
  char *v252;
  pxrInternal__aapl__pxrReserved__::UsdSkelRoot *v253;
  char v254;
  _DWORD *v255;
  _DWORD *j;
  realityio::tokens::EcsTokens_StaticTokenType *v257;
  uint64_t v258;
  uint64_t v259;
  realityio::tokens::EcsTokens_StaticTokenType *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  unsigned int *v270;
  unsigned int v271;
  _DWORD *v272;
  _DWORD *v273;
  std::string *v274;
  uint64_t v275;
  char *PrimPath;
  realityio::tokens::EcsTokens_StaticTokenType *v277;
  uint64_t v278;
  uint64_t v279;
  _DWORD *v280;
  _DWORD *i;
  realityio::tokens::EcsTokens_StaticTokenType *v282;
  uint64_t v283;
  uint64_t v284;
  realityio::tokens::EcsTokens_StaticTokenType *v285;
  uint64_t v286;
  uint64_t v287;
  realityio::tokens::EcsTokens_StaticTokenType *v288;
  realityio::tokens::ActionTokens_StaticTokenType *v289;
  unint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  char *v297;
  realityio::tokens::ActionTokens_StaticTokenType *v298;
  unint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int64x2_t v305;
  char *v306;
  unsigned int *v307;
  unsigned int v308;
  _DWORD *v309;
  _DWORD *v310;
  uint64_t v311;
  uint64_t v312;
  realityio::tokens::ActionTokens_StaticTokenType *v313;
  unint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  _QWORD *v319;
  _BOOL4 v320;
  _QWORD *v321;
  _QWORD *v322;
  int v323;
  _QWORD *v324;
  _QWORD *v325;
  int v326;
  _QWORD *v327;
  pxrInternal__aapl__pxrReserved__ *v328;
  uint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  _DWORD *v332;
  _DWORD *v333;
  uint64_t v334;
  unsigned int *v335;
  unsigned int v336;
  unsigned int *v337;
  unsigned int v338;
  uint64_t v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  unsigned int *v343;
  unsigned int v344;
  unsigned int *v345;
  unsigned int v346;
  realityio::tokens::EcsTokens_StaticTokenType *v347;
  uint64_t v348;
  unsigned int *v349;
  unsigned int v350;
  realityio::tokens::EcsTokens_StaticTokenType *v351;
  realityio::tokens::EcsTokens_StaticTokenType *v352;
  realityio::tokens::EcsTokens_StaticTokenType *v353;
  _DWORD *v354;
  _DWORD *v355;
  char *v356;
  char *v357;
  realityio::tokens::ActionTokens_StaticTokenType *v358;
  unint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int64x2_t v371;
  char *v372;
  realityio::tokens::ActionTokens_StaticTokenType *v373;
  unint64_t v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  char *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int64x2_t v386;
  char *v387;
  unsigned int *v388;
  unsigned int v389;
  int v390;
  int v391;
  char *v392;
  char *v393;
  char *v394;
  char *v395;
  uint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t v399;
  unsigned int *v400;
  unsigned int v401;
  unsigned int *v402;
  unsigned int v403;
  char *v404;
  char *v405;
  uint64_t v406;
  unint64_t *v407;
  unint64_t v408;
  uint64_t v409;
  unsigned int *v410;
  unsigned int v411;
  unsigned int *v412;
  unsigned int v413;
  char *v414;
  char *v415;
  uint64_t v416;
  unint64_t *v417;
  unint64_t v418;
  _DWORD *v419;
  _DWORD *v420;
  uint64_t v421;
  unsigned int *v422;
  unsigned int v423;
  realityio::tokens::EcsTokens_StaticTokenType *v424;
  _DWORD *v425;
  _DWORD *v426;
  realityio::tokens::ActionTokens_StaticTokenType *v427;
  unint64_t v428;
  char *v429;
  realityio::tokens::ActionTokens_StaticTokenType *v430;
  unint64_t v431;
  char *v432;
  unsigned int *v433;
  unsigned int v434;
  uint64_t v435;
  unint64_t *v436;
  unint64_t v437;
  uint64_t v438;
  unsigned int *v439;
  unsigned int v440;
  realityio::tokens::EcsTokens_StaticTokenType *v441;
  realityio::tokens::ActionTokens_StaticTokenType *v442;
  unint64_t v443;
  char *v444;
  unsigned int *v445;
  unsigned int v446;
  char *v447;
  char *v448;
  uint64_t v449;
  unint64_t *v450;
  unint64_t v451;
  uint64_t v452;
  unsigned int *v453;
  unsigned int v454;
  realityio::tokens::EcsTokens_StaticTokenType *v455;
  realityio::tokens::ActionTokens_StaticTokenType *v456;
  unint64_t v457;
  char *v458;
  unsigned int *v459;
  unsigned int v460;
  char *v461;
  char *v462;
  uint64_t *UsdPrimDefaultPredicate;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v467;
  uint64_t v468;
  _QWORD *v469;
  _QWORD *v470;
  uint64_t v471;
  _QWORD *v472;
  unint64_t v473;
  std::string *v474;
  char *v475;
  std::string *v476;
  realityio::tokens::EcsTokens_StaticTokenType *v477;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v478;
  realityio::tokens::ActionTokens_StaticTokenType *v479;
  uint64_t v480;
  uint64_t v481;
  char *v482;
  char *v483;
  unsigned int *v484;
  unsigned int v485;
  unsigned int *v486;
  unsigned int v487;
  char *v488;
  char *v489;
  realityio::tokens::EcsTokens_StaticTokenType *v490;
  char *v491;
  char *v492;
  uint64_t v493;
  unint64_t v494;
  realityio::tokens::EcsTokens_StaticTokenType *v496;
  pxrInternal__aapl__pxrReserved__::TfToken *v497;
  unint64_t v498;
  char *v499;
  char *v500;
  unsigned int *v501;
  unsigned int v502;
  unsigned int *v503;
  unsigned int v504;
  realityio::tokens::ActionTokens_StaticTokenType *v505;
  unint64_t v506;
  char *v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  char *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  int64x2_t v518;
  char *v519;
  char *v520;
  char *v521;
  realityio::tokens::ActionTokens_StaticTokenType *v522;
  unint64_t v523;
  char *v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unint64_t v528;
  unint64_t v529;
  char *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int64x2_t v535;
  char *v536;
  pxrInternal__aapl__pxrReserved__::SdfPath *v538;
  pxrInternal__aapl__pxrReserved__::SdfPath *v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  uint64_t v544;
  __int32 v546;
  uint64_t v547;
  int v548;
  int v549;
  uint64_t v550;
  __int32 v551;
  uint64_t v552;
  int v553;
  int v554;
  uint64_t v555;
  __int32 v556;
  uint64_t v557;
  int v558;
  int v559;
  uint64_t v560;
  __int32 v561;
  uint64_t v562;
  int v563;
  int v564;
  uint64_t v565;
  int v566;
  uint64_t v567;
  int v568;
  int v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  int v574;
  uint64_t v575;
  __int32 v576;
  uint64_t v577;
  int v578;
  int v579;
  uint64_t v580;
  __int32 v581;
  uint64_t v582;
  int v583;
  int v584;
  uint64_t v585;
  int v586;
  uint64_t v587;
  int v588;
  int v589;
  uint64_t v590;
  __int32 v591;
  uint64_t v592;
  int v593;
  int v594;
  uint64_t v595;
  __int32 v596;
  uint64_t v597;
  int v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  __int32 v602;
  uint64_t v603;
  int v604;
  int v605;
  uint64_t v606;
  char *v607;
  char *v608;
  unint64_t v609;
  char v610[8];
  uint64_t v611;
  uint64_t v612;
  _DWORD *v613;
  _DWORD *v614;
  unint64_t v615;
  char v616[8];
  uint64_t v617;
  uint64_t v618;
  char *v619;
  char *v620;
  unint64_t v621;
  char *v622;
  char *v623;
  unint64_t v624;
  uint64_t v625;
  _DWORD *v626;
  unint64_t v627;
  uint64_t v628;
  unint64_t v629;
  unint64_t v630;
  int64x2_t v631;
  char *v632;
  uint64_t v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int v639;
  int v640;
  int v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  int64x2_t v645;
  char *v646;
  uint64_t v647;
  void **v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  void *v654;
  char *v655;
  unint64_t v656;
  int64x2_t v657;
  char *v658;
  void *v659;
  void *v660;
  char *v661;
  uint64_t v662;
  int v663;
  int v664;
  uint64_t v665;
  int v666;
  __int128 __p;
  __int128 v668;
  _QWORD v669[13];
  int v670;
  int v671;
  _BYTE v672[32];
  _QWORD v673[2];
  int v674;
  int v675;
  __int128 v676;
  uint64_t v677;
  int8x16_t v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  std::string *v682;
  char *v683;
  unint64_t v684;
  int v685;
  int v686;
  int v687;
  int v688;
  int v689;
  uint64_t v690;

  v690 = *MEMORY[0x24BDAC8D0];
  Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
  v538 = a1;
  v7 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
  v631 = 0uLL;
  v632 = 0;
  v629 = 0;
  v628 = 0;
  v630 = 0;
  v626 = 0;
  v625 = 0;
  v627 = 0;
  v623 = 0;
  v622 = 0;
  v624 = 0;
  v620 = 0;
  v619 = 0;
  v621 = 0;
  memset(v672, 0, 17);
  v8 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v672, 0);
  __p = *(_OWORD *)v8;
  *(_QWORD *)&v668 = *(_QWORD *)(v8 + 16);
  *(_OWORD *)v672 = __p;
  v672[16] = v668;
  v9 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v672, 1);
  v645 = *(int64x2_t *)v9;
  v646 = *(char **)(v9 + 16);
  *(int64x2_t *)v672 = v645;
  v672[16] = (_BYTE)v646;
  v10 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v672, 0x100000005);
  v11 = v10[1].i64[0];
  v12.i64[0] = -8193;
  v12.i64[0] = vandq_s8(*v10, v12).u64[0];
  v12.i64[1] = vorrq_s8(*v10, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  v678 = v12;
  *(_QWORD *)&v679 = v11;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v616, a3, &v678);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)v616, (uint64_t)v672);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v672);
  v540 = a4;
  __p = *(_OWORD *)v672;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v668, &v672[16]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v668 + 1, &v672[20]);
  DWORD2(v668) = *(_DWORD *)&v672[24];
  WORD6(v668) = *(_WORD *)&v672[28];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v672[16]);
  v13 = 0;
  while (1)
  {
    *(_QWORD *)v672 = v617;
    *(_QWORD *)&v672[8] = v616;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(_DWORD *)&v672[24] = 0;
    *(_WORD *)&v672[28] = 0;
    if (__p == *(_OWORD *)v672)
    {
      v14 = 1;
      if ((_QWORD)v668 == *(_QWORD *)&v672[16] && !DWORD2(v668) && !BYTE12(v668))
        v14 = BYTE13(v668) != 0;
    }
    else
    {
      v14 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v672[16]);
    if (!v14)
      break;
    v15 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)v672);
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(v15);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((v672[24] & 7) != 0)
    {
      v17 = (unsigned int *)(*(_QWORD *)&v672[24] & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v672[16]);
    if (*(_QWORD *)&v672[8])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v672[8]);
    if (IsA)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&__p, (uint64_t)&v678);
      v19 = v629;
      if (v629 >= v630)
      {
        v21 = (uint64_t)(v629 - v628) >> 5;
        if ((unint64_t)(v21 + 1) >> 59)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v22 = (uint64_t)(v630 - v628) >> 4;
        if (v22 <= v21 + 1)
          v22 = v21 + 1;
        if (v630 - v628 >= 0x7FFFFFFFFFFFFFE0)
          v23 = 0x7FFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        v673[0] = &v630;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)&v630, v23);
        else
          v24 = 0;
        v25 = (uint64_t)&v24[32 * v21];
        *(_QWORD *)v672 = v24;
        *(_QWORD *)&v672[8] = v25;
        *(_QWORD *)&v672[24] = &v24[32 * v23];
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput>((uint64_t)&v630, v25, (uint64_t)&v678);
        *(_QWORD *)&v672[16] = v25 + 32;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__swap_out_circular_buffer(&v628, v672);
        v20 = v629;
        std::__split_buffer<pxrInternal__aapl__pxrReserved__::UsdPrim>::~__split_buffer((void **)v672);
      }
      else
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput>((uint64_t)&v630, v629, (uint64_t)&v678);
        v20 = v19 + 32;
      }
      v629 = v20;
      if ((BYTE8(v679) & 7) != 0)
      {
        v26 = (unsigned int *)(*((_QWORD *)&v679 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v679);
      if (v678.i64[1])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v678.i64[1]);
      v13 = 1;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)v672);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v672, &v678);
    v28 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(*(_QWORD **)(a2 + 328), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v678);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678);
    if ((v672[24] & 7) != 0)
    {
      v29 = (unsigned int *)(*(_QWORD *)&v672[24] & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v672[16]);
    if (*(_QWORD *)&v672[8])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v672[8]);
    if (v28)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&__p, (uint64_t)v672);
      if (realityio::isScene((realityio *)v672, v31))
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v678);
        v33 = v678.i64[1];
        if (!v678.i64[1] || (v34 = *(_QWORD *)(v678.i64[1] + 56), (v34 & 0x800) != 0))
        {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v678.i64[1], v32);
          v34 = *(_QWORD *)(v33 + 56);
        }
        if ((BYTE8(v679) & 7) != 0)
        {
          v35 = (unsigned int *)(*((_QWORD *)&v679 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v679);
        if (v678.i64[1])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v678.i64[1]);
        v37 = (v34 >> 6) & 1;
      }
      else
      {
        LODWORD(v37) = 1;
      }
      if ((v672[24] & 7) != 0)
      {
        v38 = (unsigned int *)(*(_QWORD *)&v672[24] & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v672[16]);
      if (*(_QWORD *)&v672[8])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v672[8]);
      if ((_DWORD)v37)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&__p, (uint64_t)v672);
        v40 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
        if (!v40)
          v40 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
        TgECS::genECSPath((TgECS *)&v678, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v672, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v40 + 152));
        v41 = v626;
        if ((unint64_t)v626 >= v627)
        {
          v42 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(&v625, &v678);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v626, &v678);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v41 + 1, &v678.i32[1]);
          v42 = v41 + 2;
        }
        v626 = v42;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678);
        if ((v672[24] & 7) != 0)
        {
          v43 = (unsigned int *)(*(_QWORD *)&v672[24] & 0xFFFFFFFFFFFFFFF8);
          do
            v44 = __ldxr(v43);
          while (__stlxr(v44 - 2, v43));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v672[16]);
        if (*(_QWORD *)&v672[8])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v672[8]);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&__p);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v668);
  v614 = 0;
  v613 = 0;
  v615 = 0;
  memset(v672, 0, 17);
  v45 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v672, 0);
  __p = *(_OWORD *)v45;
  *(_QWORD *)&v668 = *(_QWORD *)(v45 + 16);
  *(_OWORD *)v672 = __p;
  v672[16] = v668;
  v46 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v672, 1);
  v645 = *(int64x2_t *)v46;
  v646 = *(char **)(v46 + 16);
  *(int64x2_t *)v672 = v645;
  v672[16] = (_BYTE)v646;
  v47 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v672, 0x100000005);
  v48 = v47[1].i64[0];
  v49.i64[0] = -8193;
  v49.i64[0] = vandq_s8(*v47, v49).u64[0];
  v49.i64[1] = vorrq_s8(*v47, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  v678 = v49;
  *(_QWORD *)&v679 = v48;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v610, a3, &v678);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)v610, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&__p);
  *(_OWORD *)v672 = __p;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v672[16], &v668);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v672[20], (_DWORD *)&v668 + 1);
  *(_DWORD *)&v672[24] = DWORD2(v668);
  *(_WORD *)&v672[28] = WORD6(v668);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v668);
  v544 = a2 + 272;
  while (1)
  {
    *(_QWORD *)&__p = v611;
    *((_QWORD *)&__p + 1) = v610;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    DWORD2(v668) = 0;
    WORD6(v668) = 0;
    if (*(_OWORD *)v672 == __p)
    {
      v50 = 1;
      if (*(_QWORD *)&v672[16] == (_QWORD)v668 && !*(_DWORD *)&v672[24] && !v672[28])
        v50 = v672[29] != 0;
    }
    else
    {
      v50 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v668);
    if (!v50)
      break;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)v672, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&__p);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v645);
    if (std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(*(_QWORD **)(a2 + 328), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v645))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)v672, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v678);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v678, &v682);
      v51 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(v544, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v682) != 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v682);
      if ((BYTE8(v679) & 7) != 0)
      {
        v52 = (unsigned int *)(*((_QWORD *)&v679 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v679);
      if (v678.i64[1])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v678.i64[1]);
    }
    else
    {
      v51 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v645);
    if ((BYTE8(v668) & 7) != 0)
    {
      v54 = (unsigned int *)(*((_QWORD *)&v668 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v668);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    if (v51)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v672, (uint64_t)&__p);
      v56 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v56)
        v56 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      TgECS::genECSPath((TgECS *)&v678, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v56 + 152));
      v57 = v614;
      if ((unint64_t)v614 >= v615)
      {
        v58 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v613, &v678);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v614, &v678);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v57 + 1, &v678.i32[1]);
        v58 = v57 + 2;
      }
      v614 = v58;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678);
      if ((BYTE8(v668) & 7) != 0)
      {
        v59 = (unsigned int *)(*((_QWORD *)&v668 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v668);
      if (*((_QWORD *)&__p + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v672);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v672[16]);
  v608 = 0;
  v607 = 0;
  v609 = 0;
  if (!*(_BYTE *)(a2 + 104)
    || (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)a3) & 1) == 0)
  {
    v602 = *(_DWORD *)a3;
    v61 = *(_QWORD *)(a3 + 8);
    v603 = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 48);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v604, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v605, (_DWORD *)(a3 + 20));
    v64 = *(_QWORD *)(a3 + 24);
    v606 = v64;
    if ((v64 & 7) != 0)
    {
      v65 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 2, v65));
      if ((v66 & 1) == 0)
        v606 &= 0xFFFFFFFFFFFFFFF8;
    }
    v67 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!v67)
      v67 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    TgECS::genECSPath((TgECS *)&v659, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v602, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v67 + 400));
    v645 = 0uLL;
    v646 = 0;
    v678.i32[0] = v602;
    v678.i64[1] = v603;
    if (v603)
    {
      v68 = (unint64_t *)(v603 + 48);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v679, &v604);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v679 + 1, &v605);
    *((_QWORD *)&v679 + 1) = v606;
    if ((v606 & 7) != 0)
    {
      v70 = (unsigned int *)(v606 & 0xFFFFFFFFFFFFFFF8);
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 2, v70));
      if ((v71 & 1) == 0)
        *((_QWORD *)&v679 + 1) &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((BYTE8(v679) & 7) != 0)
    {
      v72 = (unsigned int *)(*((_QWORD *)&v679 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v73 = __ldxr(v72);
      while (__stlxr(v73 - 2, v72));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v679);
    if (v678.i64[1])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v678.i64[1]);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v602)
      && !*(_BYTE *)(a2 + 104))
    {
      v74 = (unint64_t *)MEMORY[0x24BEE7FE8];
      v75 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
      if (!v75)
        v75 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
      if ((*((_QWORD *)v75 + 148) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (*((_QWORD *)v75 + 148) & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v75);
      if (*(char *)(EmptyString + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v672, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
      }
      else
      {
        v77 = *(_OWORD *)EmptyString;
        *(_QWORD *)&v672[16] = *(_QWORD *)(EmptyString + 16);
        *(_OWORD *)v672 = v77;
      }
      if ((v672[23] & 0x80000000) != 0)
        operator delete(*(void **)v672);
      *((_QWORD *)&__p + 1) = 0;
      v668 = 0uLL;
      v78 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v78)
        v78 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v79 = *((_QWORD *)v78 + 20) & 0xFFFFFFFFFFFFFFF8;
      if (v79)
      {
        v80 = (char *)(v79 + 16);
        if (*(char *)(v79 + 39) < 0)
          v80 = *(char **)v80;
      }
      else
      {
        v80 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v682, v80);
      MEMORY[0x2348B26F8](v669, &v682);
      v81 = v645.i64[1];
      if (v645.i64[1] >= (unint64_t)v646)
      {
        v83 = 0xCCCCCCCCCCCCCCCDLL * ((v645.i64[1] - v645.i64[0]) >> 3);
        if (v83 + 1 > 0x666666666666666)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v84 = 0x999999999999999ALL * ((uint64_t)&v646[-v645.i64[0]] >> 3);
        if (v84 <= v83 + 1)
          v84 = v83 + 1;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v646[-v645.i64[0]] >> 3) >= 0x333333333333333)
          v85 = 0x666666666666666;
        else
          v85 = v84;
        v673[0] = &v646;
        if (v85)
        {
          if (v85 > 0x666666666666666)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v86 = (char *)operator new(40 * v85);
        }
        else
        {
          v86 = 0;
        }
        v87 = (uint64_t)&v86[40 * v83];
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v87, (uint64_t)&__p);
        v88 = v645.i64[1];
        v89 = v645.i64[0];
        if (v645.i64[1] == v645.i64[0])
        {
          v91 = vdupq_n_s64(v645.u64[1]);
          v90 = v87;
        }
        else
        {
          v90 = v87;
          do
          {
            v90 -= 40;
            v88 -= 40;
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v90, v88);
          }
          while (v88 != v89);
          v91 = v645;
        }
        v82 = v87 + 40;
        v645.i64[0] = v90;
        v645.i64[1] = v82;
        *(int64x2_t *)&v672[8] = v91;
        v92 = v646;
        v646 = &v86[40 * v85];
        *(_QWORD *)&v672[24] = v92;
        *(_QWORD *)v672 = v91.i64[0];
        std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v672);
        v74 = (unint64_t *)MEMORY[0x24BEE7FE8];
      }
      else
      {
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v645.i64[1], (uint64_t)&__p);
        v82 = v81 + 40;
      }
      v645.i64[1] = v82;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v669);
      *(_QWORD *)v672 = (char *)&__p + 8;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      if (SHIBYTE(v684) < 0)
        operator delete(v682);
      v93 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v74);
      if (!v93)
        v93 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
      if ((*((_QWORD *)v93 + 70) & 0xFFFFFFFFFFFFFFF8) != 0)
        v94 = (*((_QWORD *)v93 + 70) & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v94 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v93);
      if (*(char *)(v94 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v672, *(const std::string::value_type **)v94, *(_QWORD *)(v94 + 8));
      }
      else
      {
        v95 = *(_OWORD *)v94;
        *(_QWORD *)&v672[16] = *(_QWORD *)(v94 + 16);
        *(_OWORD *)v672 = v95;
      }
      if ((v672[23] & 0x80000000) != 0)
        operator delete(*(void **)v672);
      *((_QWORD *)&__p + 1) = 0;
      v668 = 0uLL;
      v96 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v96)
        v96 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v97 = *((_QWORD *)v96 + 20) & 0xFFFFFFFFFFFFFFF8;
      if (v97)
      {
        v98 = (char *)(v97 + 16);
        if (*(char *)(v97 + 39) < 0)
          v98 = *(char **)v98;
      }
      else
      {
        v98 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v682, v98);
      MEMORY[0x2348B26F8](v669, &v682);
      v99 = v645.i64[1];
      if (v645.i64[1] >= (unint64_t)v646)
      {
        v101 = 0xCCCCCCCCCCCCCCCDLL * ((v645.i64[1] - v645.i64[0]) >> 3);
        if (v101 + 1 > 0x666666666666666)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v102 = 0x999999999999999ALL * ((uint64_t)&v646[-v645.i64[0]] >> 3);
        if (v102 <= v101 + 1)
          v102 = v101 + 1;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v646[-v645.i64[0]] >> 3) >= 0x333333333333333)
          v103 = 0x666666666666666;
        else
          v103 = v102;
        v673[0] = &v646;
        if (v103)
        {
          if (v103 > 0x666666666666666)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v104 = (char *)operator new(40 * v103);
        }
        else
        {
          v104 = 0;
        }
        v105 = (uint64_t)&v104[40 * v101];
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v105, (uint64_t)&__p);
        v106 = v645.i64[1];
        v107 = v645.i64[0];
        if (v645.i64[1] == v645.i64[0])
        {
          v109 = vdupq_n_s64(v645.u64[1]);
          v108 = v105;
        }
        else
        {
          v108 = v105;
          do
          {
            v108 -= 40;
            v106 -= 40;
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v108, v106);
          }
          while (v106 != v107);
          v109 = v645;
        }
        v100 = v105 + 40;
        v645.i64[0] = v108;
        v645.i64[1] = v100;
        *(int64x2_t *)&v672[8] = v109;
        v110 = v646;
        v646 = &v104[40 * v103];
        *(_QWORD *)&v672[24] = v110;
        *(_QWORD *)v672 = v109.i64[0];
        std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v672);
      }
      else
      {
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v645.i64[1], (uint64_t)&__p);
        v100 = v99 + 40;
      }
      v645.i64[1] = v100;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v669);
      *(_QWORD *)v672 = (char *)&__p + 8;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      if (SHIBYTE(v684) < 0)
        operator delete(v682);
    }
    TgBase::emitTargets(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v645);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(v672, 0xCCCCCCCCCCCCCCCDLL * ((v645.i64[1] - v645.i64[0]) >> 3));
    v112 = (_DWORD *)v645.i64[1];
    v111 = (_DWORD *)v645.i64[0];
    if (v645.i64[0] != v645.i64[1])
    {
      v113 = *(_QWORD *)v672;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v111);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, v111 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v113, (int *)&__p);
        v114 = v113 + 4;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v114);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
        v111 += 10;
        v113 = v114 + 4;
      }
      while (v111 != v112);
    }
    v115 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v115)
      v115 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v116 = *((_QWORD *)v115 + 47) & 0xFFFFFFFFFFFFFFF8;
    if (v116)
    {
      v117 = (char *)(v116 + 16);
      if (*(char *)(v116 + 39) < 0)
        v117 = *(char **)v117;
    }
    else
    {
      v117 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v117);
    MEMORY[0x2348B26F8](&v682, &__p);
    TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v659, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v672, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v682);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v682);
    if (SBYTE7(v668) < 0)
      operator delete((void *)__p);
    *(_QWORD *)&__p = v672;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    *(_QWORD *)v672 = &v645;
    std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
    if ((v606 & 7) != 0)
    {
      v118 = (unsigned int *)(v606 & 0xFFFFFFFFFFFFFFF8);
      do
        v119 = __ldxr(v118);
      while (__stlxr(v119 - 2, v118));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v604);
    if (v603)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v603);
    v120 = v608;
    if ((unint64_t)v608 >= v609)
    {
      v121 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v607, &v659);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v608, &v659);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v120 + 1, (_DWORD *)&v659 + 1);
      v121 = v120 + 8;
    }
    v608 = v121;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v659);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)a3);
  v122 = *(_QWORD *)&v672[8];
  if (*(_QWORD *)&v672[8])
  {
    if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&v672[8])
                  + 14))
      v122 = *(_QWORD *)v672;
    else
      v122 = 0;
  }
  *(_QWORD *)&__p = v122;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&__p);
  v123 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
  if (!v123)
    v123 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
  v678.i8[0] = 0;
  RealityKitStage = realityio::getRealityKitStageMetadata<BOOL>((uint64_t *)&__p, (_QWORD *)v123 + 7, (pxrInternal__aapl__pxrReserved__::VtValue *)&v678);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&__p);
  v125 = *(_QWORD *)&v672[8];
  if (*(_QWORD *)&v672[8])
  {
    v126 = (unsigned int *)(*(_QWORD *)&v672[8] + 8);
    do
    {
      v127 = __ldxr(v126);
      v128 = v127 - 1;
    }
    while (__stlxr(v128, v126));
    if (!v128)
      (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  }
  if (!RealityKitStage)
  {
    v596 = *(_DWORD *)a3;
    v129 = *(_QWORD *)(a3 + 8);
    v597 = v129;
    if (v129)
    {
      v130 = (unint64_t *)(v129 + 48);
      do
        v131 = __ldxr(v130);
      while (__stxr(v131 + 1, v130));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v598, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v599, (_DWORD *)(a3 + 20));
    v132 = *(_QWORD *)(a3 + 24);
    v600 = v132;
    if ((v132 & 7) != 0)
    {
      v133 = (unsigned int *)(v132 & 0xFFFFFFFFFFFFFFF8);
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 2, v133));
      if ((v134 & 1) == 0)
        v600 &= 0xFFFFFFFFFFFFFFF8;
    }
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v596))
    {
      v601 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    else
    {
      v135 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v135)
        v135 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      TgECS::genECSPath((TgECS *)&v663, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v596, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v135 + 8));
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v663);
      MEMORY[0x2348B274C](&__p, "__anchoringInputs");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v672, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
      if ((__p & 7) != 0)
      {
        v136 = (unsigned int *)(__p & 0xFFFFFFFFFFFFFFF8);
        do
          v137 = __ldxr(v136);
        while (__stlxr(v137 - 2, v136));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
      v138 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v138)
        v138 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v596, (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)((char *)v138 + 64));
      if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v659) & 1) != 0)
      {
        v657 = 0uLL;
        v658 = 0;
        v655 = 0;
        v654 = 0;
        v656 = 0;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v659, &__p);
        v668 = 0uLL;
        *((_QWORD *)&__p + 1) = 0;
        v139 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
        if (!v139)
          v139 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
        v140 = *((_QWORD *)v139 + 20) & 0xFFFFFFFFFFFFFFF8;
        if (v140)
        {
          v141 = (char *)(v140 + 16);
          if (*(char *)(v140 + 39) < 0)
            v141 = *(char **)v141;
        }
        else
        {
          v141 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(&v678, v141);
        MEMORY[0x2348B26F8](v669, &v678);
        v142 = v657.i64[1];
        if (v657.i64[1] >= (unint64_t)v658)
        {
          v144 = 0xCCCCCCCCCCCCCCCDLL * ((v657.i64[1] - v657.i64[0]) >> 3);
          if (v144 + 1 > 0x666666666666666)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v145 = 0x999999999999999ALL * ((uint64_t)&v658[-v657.i64[0]] >> 3);
          if (v145 <= v144 + 1)
            v145 = v144 + 1;
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v658[-v657.i64[0]] >> 3) >= 0x333333333333333)
            v146 = 0x666666666666666;
          else
            v146 = v145;
          v673[0] = &v658;
          if (v146)
          {
            if (v146 > 0x666666666666666)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v147 = (char *)operator new(40 * v146);
          }
          else
          {
            v147 = 0;
          }
          v148 = (uint64_t)&v147[40 * v144];
          std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v148, (uint64_t)&__p);
          v149 = v657.i64[1];
          v150 = v657.i64[0];
          if (v657.i64[1] == v657.i64[0])
          {
            v152 = vdupq_n_s64(v657.u64[1]);
            v151 = v148;
          }
          else
          {
            v151 = v148;
            do
            {
              v151 -= 40;
              v149 -= 40;
              std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v151, v149);
            }
            while (v149 != v150);
            v152 = v657;
          }
          v143 = v148 + 40;
          v657.i64[0] = v151;
          v657.i64[1] = v143;
          *(int64x2_t *)&v672[8] = v152;
          v153 = v658;
          v658 = &v147[40 * v146];
          *(_QWORD *)&v672[24] = v153;
          *(_QWORD *)v672 = v152.i64[0];
          std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v672);
        }
        else
        {
          std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v657.i64[1], (uint64_t)&__p);
          v143 = v142 + 40;
        }
        v657.i64[1] = v143;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v669);
        *(_QWORD *)v672 = (char *)&__p + 8;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
        if (SBYTE7(v679) < 0)
          operator delete((void *)v678.i64[0]);
        v154 = (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)atomic_load(&realityio::tokens::TransformBuilderTokens);
        if (!v154)
          v154 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TransformBuilderTokens);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v596, (realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType *)((char *)v154 + 72));
        if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v650))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v650, &__p);
          v668 = 0uLL;
          *((_QWORD *)&__p + 1) = 0;
          v155 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
          if (!v155)
            v155 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
          v156 = *((_QWORD *)v155 + 20) & 0xFFFFFFFFFFFFFFF8;
          if (v156)
          {
            v157 = (char *)(v156 + 16);
            if (*(char *)(v156 + 39) < 0)
              v157 = *(char **)v157;
          }
          else
          {
            v157 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&v678, v157);
          MEMORY[0x2348B26F8](v669, &v678);
          v158 = v657.i64[1];
          if (v657.i64[1] >= (unint64_t)v658)
          {
            v160 = 0xCCCCCCCCCCCCCCCDLL * ((v657.i64[1] - v657.i64[0]) >> 3);
            if (v160 + 1 > 0x666666666666666)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v161 = 0x999999999999999ALL * ((uint64_t)&v658[-v657.i64[0]] >> 3);
            if (v161 <= v160 + 1)
              v161 = v160 + 1;
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v658[-v657.i64[0]] >> 3) >= 0x333333333333333)
              v162 = 0x666666666666666;
            else
              v162 = v161;
            v673[0] = &v658;
            if (v162)
            {
              if (v162 > 0x666666666666666)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v163 = (char *)operator new(40 * v162);
            }
            else
            {
              v163 = 0;
            }
            v164 = (uint64_t)&v163[40 * v160];
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v164, (uint64_t)&__p);
            v165 = v657.i64[1];
            v166 = v657.i64[0];
            if (v657.i64[1] == v657.i64[0])
            {
              v168 = vdupq_n_s64(v657.u64[1]);
              v167 = v164;
            }
            else
            {
              v167 = v164;
              do
              {
                v167 -= 40;
                v165 -= 40;
                std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v167, v165);
              }
              while (v165 != v166);
              v168 = v657;
            }
            v159 = v164 + 40;
            v657.i64[0] = v167;
            v657.i64[1] = v159;
            *(int64x2_t *)&v672[8] = v168;
            v169 = v658;
            v658 = &v163[40 * v162];
            *(_QWORD *)&v672[24] = v169;
            *(_QWORD *)v672 = v168.i64[0];
            std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v672);
          }
          else
          {
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v657.i64[1], (uint64_t)&__p);
            v159 = v158 + 40;
          }
          v657.i64[1] = v159;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v669);
          *(_QWORD *)v672 = (char *)&__p + 8;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          if (SBYTE7(v679) < 0)
            operator delete((void *)v678.i64[0]);
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v648 = (void **)(MEMORY[0x24BEE9D78] + 16);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&__p, 1.0);
        if (v649 && (*(_BYTE *)(v649 + 57) & 8) == 0 && ((unsigned int (*)(void ***))v648[4])(&v648))
        {
          MEMORY[0x2348B2068](v672, &v648);
          pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation();
          v678.i64[0] = (uint64_t)v672;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100]((void ***)&v678);
        }
        MEMORY[0x2348B199C](&v645, &__p);
        DWORD2(v644) = 0;
        *(_QWORD *)&v644 = 0;
        DWORD2(v642) = 0;
        *(_QWORD *)&v642 = 0;
        REDecomposeMatrix();
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v596);
        pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
        v171 = v170;
        v172 = *(_QWORD *)&v672[8];
        if (*(_QWORD *)&v672[8])
        {
          v173 = (unsigned int *)(*(_QWORD *)&v672[8] + 8);
          do
          {
            v174 = __ldxr(v173);
            v175 = v174 - 1;
          }
          while (__stlxr(v175, v173));
          if (!v175)
            (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
        }
        pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)&v682);
        v680 = 0u;
        v681 = 0u;
        v678 = 0u;
        v679 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform();
        MEMORY[0x2348B199C](&v678, v672);
        *(_DWORD *)&v672[8] = 0;
        *(_QWORD *)v672 = 0;
        v666 = 0;
        v665 = 0;
        REDecomposeMatrix();
        v176 = *(float *)&v672[4];
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::~__hash_table((uint64_t)&v682);
        v177 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
        if (!v177)
          v177 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v670, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v177 + 16));
        v178 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
        if (!v178)
          v178 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v670, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v178 + 24));
        v179 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
        if (!v179)
          v179 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v670, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v179 + 32));
        v180 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
        if (!v180)
          v180 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v670, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v180 + 40));
        v181 = v655;
        if ((unint64_t)v655 >= v656)
        {
          v182 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v654, &v685);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v655, &v685);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v181 + 1, &v686);
          v182 = v181 + 8;
        }
        v655 = v182;
        v541 = v644;
        *(_QWORD *)&v672[8] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
                            + 2;
        v183 = operator new();
        v184 = v171;
        v185 = v176 * v184;
        *(_QWORD *)v183 = v541;
        *(_DWORD *)(v183 + 8) = DWORD2(v541);
        v186 = (unsigned int *)(v183 + 12);
        atomic_store(0, (unsigned int *)(v183 + 12));
        *(_QWORD *)v672 = v183;
        do
          v187 = __ldxr(v186);
        while (__stxr(v187 + 1, v186));
        TgBase::emitConstant((Exec **)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v685, (const pxrInternal__aapl__pxrReserved__::VtValue *)v672);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v672);
        v188 = v655;
        if ((unint64_t)v655 >= v656)
        {
          v189 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v654, &v665);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v655, &v665);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v188 + 1, (_DWORD *)&v665 + 1);
          v189 = v188 + 8;
        }
        v655 = v189;
        v542 = v643;
        *(_QWORD *)&v672[8] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(void)::ti
                            + 2;
        v190 = operator new();
        *(_OWORD *)v190 = v542;
        v191 = (unsigned int *)(v190 + 16);
        atomic_store(0, (unsigned int *)(v190 + 16));
        *(_QWORD *)v672 = v190;
        do
          v192 = __ldxr(v191);
        while (__stxr(v192 + 1, v191));
        TgBase::emitConstant((Exec **)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v665, (const pxrInternal__aapl__pxrReserved__::VtValue *)v672);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v672);
        v193 = v655;
        if ((unint64_t)v655 >= v656)
        {
          v194 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v654, &v640);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v655, &v640);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v193 + 1, &v641);
          v194 = v193 + 8;
        }
        v655 = v194;
        v543 = v642;
        *(_QWORD *)&v672[8] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
                            + 2;
        v195 = operator new();
        *(_QWORD *)v195 = v543;
        *(_DWORD *)(v195 + 8) = DWORD2(v543);
        v196 = (unsigned int *)(v195 + 12);
        atomic_store(0, (unsigned int *)(v195 + 12));
        *(_QWORD *)v672 = v195;
        do
          v197 = __ldxr(v196);
        while (__stxr(v197 + 1, v196));
        TgBase::emitConstant((Exec **)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v640, (const pxrInternal__aapl__pxrReserved__::VtValue *)v672);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v672);
        v198 = v655;
        if ((unint64_t)v655 >= v656)
        {
          v199 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v654, &v638);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v655, &v638);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v198 + 1, &v639);
          v199 = v198 + 8;
        }
        v655 = v199;
        *(_QWORD *)&v672[8] = &unk_24FDE5F5B;
        *(float *)v672 = v185;
        TgBase::emitConstant((Exec **)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v638, (const pxrInternal__aapl__pxrReserved__::VtValue *)v672);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v672);
        memset(v672, 0, 24);
        v678 = 0uLL;
        *(_QWORD *)&v679 = 0;
        v200 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
        if (!v200)
          v200 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v670, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v200 + 48));
        v201 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
        if (!v201)
          v201 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v670, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v201 + 56));
        v202 = v655;
        if ((unint64_t)v655 >= v656)
        {
          v203 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v654, &v636);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v655, &v636);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v202 + 1, &v637);
          v203 = v202 + 8;
        }
        v655 = v203;
        v683 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy(&v682, (uint64_t)v672);
        TgBase::emitConstant((Exec **)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v636, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v682);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v682);
        v204 = v655;
        if ((unint64_t)v655 >= v656)
        {
          v205 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v654, &v634);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v655, &v634);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v204 + 1, &v635);
          v205 = v204 + 8;
        }
        v655 = v205;
        v683 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy(&v682, (uint64_t)&v678);
        TgBase::emitConstant((Exec **)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v634, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v682);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v682);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v634);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v636);
        if (SBYTE7(v679) < 0)
          operator delete((void *)v678.i64[0]);
        if ((v672[23] & 0x80000000) != 0)
          operator delete(*(void **)v672);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v638);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v640);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v665);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v685);
        MEMORY[0x2348B2080](&v648);
        TgBase::emitTargets(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v657);
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(v672, 0xCCCCCCCCCCCCCCCDLL * ((v657.i64[1] - v657.i64[0]) >> 3));
        v207 = (_DWORD *)v657.i64[1];
        v206 = (_DWORD *)v657.i64[0];
        if (v657.i64[0] != v657.i64[1])
        {
          v208 = *(_QWORD *)v672;
          do
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v206);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, v206 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v208, (int *)&__p);
            v209 = v208 + 4;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v209);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
            v206 += 10;
            v208 = v209 + 4;
          }
          while (v206 != v207);
        }
        v210 = (char *)v654;
        v211 = v655;
        if (v654 != v655)
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v210);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, (_DWORD *)v210 + 1);
            v212 = *(_QWORD *)&v672[8];
            if (*(_QWORD *)&v672[8] >= *(_QWORD *)&v672[16])
            {
              v213 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)v672, &__p);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*(_DWORD **)&v672[8], &__p);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v212 + 4), (_DWORD *)&__p + 1);
              v213 = v212 + 8;
            }
            *(_QWORD *)&v672[8] = v213;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
            v210 += 8;
          }
          while (v210 != v211);
        }
        v214 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
        if (!v214)
          v214 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
        v215 = *((_QWORD *)v214 + 1) & 0xFFFFFFFFFFFFFFF8;
        if (v215)
        {
          v216 = (char *)(v215 + 16);
          if (*(char *)(v215 + 39) < 0)
            v216 = *(char **)v216;
        }
        else
        {
          v216 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, v216);
        MEMORY[0x2348B26F8](&v678, &__p);
        TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v663, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v672, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v678);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678);
        if (SBYTE7(v668) < 0)
          operator delete((void *)__p);
        LODWORD(v601) = v663;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
        HIDWORD(v601) = v664;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
        *(_QWORD *)&__p = v672;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if ((v653 & 7) != 0)
        {
          v217 = (unsigned int *)(v653 & 0xFFFFFFFFFFFFFFF8);
          do
            v218 = __ldxr(v217);
          while (__stlxr(v218 - 2, v217));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v652);
        if (v651)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v651);
        *(_QWORD *)v672 = &v654;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
        *(_QWORD *)v672 = &v657;
        std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
      }
      else
      {
        v601 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      }
      if ((v662 & 7) != 0)
      {
        v219 = (unsigned int *)(v662 & 0xFFFFFFFFFFFFFFF8);
        do
          v220 = __ldxr(v219);
        while (__stlxr(v220 - 2, v219));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v661);
      if (v660)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v660);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v670);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v663);
    }
    if ((v600 & 7) != 0)
    {
      v221 = (unsigned int *)(v600 & 0xFFFFFFFFFFFFFFF8);
      do
        v222 = __ldxr(v221);
      while (__stlxr(v222 - 2, v221));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v598);
    if (v597)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v597);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      v223 = v608;
      if ((unint64_t)v608 >= v609)
      {
        v224 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v607, &v601);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v608, &v601);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v223 + 1, (_DWORD *)&v601 + 1);
        v224 = v223 + 8;
      }
      v608 = v224;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v601);
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)a3) & 1) == 0)
  {
    v591 = *(_DWORD *)a3;
    v225 = *(_QWORD *)(a3 + 8);
    v592 = v225;
    if (v225)
    {
      v226 = (unint64_t *)(v225 + 48);
      do
        v227 = __ldxr(v226);
      while (__stxr(v227 + 1, v226));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v593, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v594, (_DWORD *)(a3 + 20));
    v228 = *(_QWORD *)(a3 + 24);
    v595 = v228;
    if ((v228 & 7) != 0)
    {
      v229 = (unsigned int *)(v228 & 0xFFFFFFFFFFFFFFF8);
      do
        v230 = __ldxr(v229);
      while (__stxr(v230 + 2, v229));
      if ((v230 & 1) == 0)
        v595 &= 0xFFFFFFFFFFFFFFF8;
    }
    v231 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v678.i64[0] = MEMORY[0x24BEE9D70] + 16;
    if (!v678.i64[1]
      || (*(_BYTE *)(v678.i64[1] + 57) & 8) != 0
      || !(*(unsigned int (**)(uint64_t))(MEMORY[0x24BEE9D70] + 48))(v231))
    {
      goto LABEL_417;
    }
    *(_QWORD *)&__p = 0x7FF8000000000000;
    pxrInternal__aapl__pxrReserved__::UsdGeomImageable::ComputeVisibility((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&v678, (const pxrInternal__aapl__pxrReserved__::UsdTimeCode *)&__p);
    MEMORY[0x2348B274C](&v645, "invisible");
    v232 = *(_QWORD *)v672;
    v233 = (unsigned int *)(v645.i64[0] & 0xFFFFFFFFFFFFFFF8);
    if ((v645.i8[0] & 7) != 0)
    {
      do
        v234 = __ldxr(v233);
      while (__stlxr(v234 - 2, v233));
      v235 = *(_QWORD *)v672;
    }
    else
    {
      v235 = *(_QWORD *)v672;
    }
    v236 = v232 & 0xFFFFFFFFFFFFFFF8;
    if ((v235 & 7) != 0)
    {
      v237 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
      do
        v238 = __ldxr(v237);
      while (__stlxr(v238 - 2, v237));
    }
    if ((unsigned int *)v236 == v233)
    {
      v288 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v288)
        v288 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      TgECS::genECSPath((TgECS *)&v657, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v591, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v288 + 328));
      v645 = 0uLL;
      v646 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v591, &v659);
      MEMORY[0x2348B274C](&v650, "visibility");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v659, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v650);
      v668 = 0uLL;
      *((_QWORD *)&__p + 1) = 0;
      v289 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v289)
        v289 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v290 = *((_QWORD *)v289 + 20) & 0xFFFFFFFFFFFFFFF8;
      if (v290)
      {
        v291 = (char *)(v290 + 16);
        if (*(char *)(v290 + 39) < 0)
          v291 = *(char **)v291;
      }
      else
      {
        v291 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v682, v291);
      MEMORY[0x2348B26F8](v669, &v682);
      v292 = v645.i64[1];
      if (v645.i64[1] >= (unint64_t)v646)
      {
        v294 = 0xCCCCCCCCCCCCCCCDLL * ((v645.i64[1] - v645.i64[0]) >> 3);
        if (v294 + 1 > 0x666666666666666)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v295 = 0x999999999999999ALL * ((uint64_t)&v646[-v645.i64[0]] >> 3);
        if (v295 <= v294 + 1)
          v295 = v294 + 1;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v646[-v645.i64[0]] >> 3) >= 0x333333333333333)
          v296 = 0x666666666666666;
        else
          v296 = v295;
        v673[0] = &v646;
        if (v296)
        {
          if (v296 > 0x666666666666666)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v297 = (char *)operator new(40 * v296);
        }
        else
        {
          v297 = 0;
        }
        v301 = (uint64_t)&v297[40 * v294];
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v301, (uint64_t)&__p);
        v302 = v645.i64[1];
        v303 = v645.i64[0];
        if (v645.i64[1] == v645.i64[0])
        {
          v305 = vdupq_n_s64(v645.u64[1]);
          v304 = v301;
        }
        else
        {
          v304 = v301;
          do
          {
            v304 -= 40;
            v302 -= 40;
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v304, v302);
          }
          while (v302 != v303);
          v305 = v645;
        }
        v293 = v301 + 40;
        v645.i64[0] = v304;
        v645.i64[1] = v293;
        *(int64x2_t *)&v672[8] = v305;
        v306 = v646;
        v646 = &v297[40 * v296];
        *(_QWORD *)&v672[24] = v306;
        *(_QWORD *)v672 = v305.i64[0];
        std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v672);
      }
      else
      {
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v645.i64[1], (uint64_t)&__p);
        v293 = v292 + 40;
      }
      v645.i64[1] = v293;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v669);
      *(_QWORD *)v672 = (char *)&__p + 8;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      if (SHIBYTE(v684) < 0)
        operator delete(v682);
      if ((v650 & 7) != 0)
      {
        v307 = (unsigned int *)(v650 & 0xFFFFFFFFFFFFFFF8);
        do
          v308 = __ldxr(v307);
        while (__stlxr(v308 - 2, v307));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v659);
      TgBase::emitTargets(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v645);
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(v672, 0xCCCCCCCCCCCCCCCDLL * ((v645.i64[1] - v645.i64[0]) >> 3));
      v310 = (_DWORD *)v645.i64[1];
      v309 = (_DWORD *)v645.i64[0];
      if (v645.i64[0] != v645.i64[1])
      {
        v311 = *(_QWORD *)v672;
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v309);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, v309 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v311, (int *)&__p);
          v312 = v311 + 4;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v312);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          v309 += 10;
          v311 = v312 + 4;
        }
        while (v309 != v310);
      }
      v313 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v313)
        v313 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v314 = *((_QWORD *)v313 + 32) & 0xFFFFFFFFFFFFFFF8;
      if (v314)
      {
        v315 = (char *)(v314 + 16);
        if (*(char *)(v314 + 39) < 0)
          v315 = *(char **)v315;
      }
      else
      {
        v315 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v315);
      MEMORY[0x2348B26F8](&v682, &__p);
      TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v657, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v672, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v682);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v682);
      if (SBYTE7(v668) < 0)
        operator delete((void *)__p);
      *(_QWORD *)&__p = v672;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      *(_QWORD *)v672 = &v645;
      std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
    }
    else
    {
LABEL_417:
      v657.i64[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    MEMORY[0x2348B205C](&v678);
    if ((v595 & 7) != 0)
    {
      v239 = (unsigned int *)(v595 & 0xFFFFFFFFFFFFFFF8);
      do
        v240 = __ldxr(v239);
      while (__stlxr(v240 - 2, v239));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v593);
    if (v592)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v592);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      v241 = v608;
      if ((unint64_t)v608 >= v609)
      {
        v242 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v607, &v657);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v608, &v657);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v241 + 1, &v657.i32[1]);
        v242 = v241 + 8;
      }
      v608 = v242;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v657);
  }
  v651 = 0;
  v650 = 0;
  v652 = 0;
  v657 = 0uLL;
  v658 = 0;
  if ((v13 & 1) != 0)
  {
    v586 = *(_DWORD *)a3;
    v243 = *(_QWORD *)(a3 + 8);
    v587 = v243;
    if (v243)
    {
      v244 = (unint64_t *)(v243 + 48);
      do
        v245 = __ldxr(v244);
      while (__stxr(v245 + 1, v244));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v588, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v589, (_DWORD *)(a3 + 20));
    v246 = *(_QWORD *)(a3 + 24);
    v590 = v246;
    if ((v246 & 7) != 0)
    {
      v247 = (unsigned int *)(v246 & 0xFFFFFFFFFFFFFFF8);
      do
        v248 = __ldxr(v247);
      while (__stxr(v248 + 2, v247));
      if ((v248 & 1) == 0)
        v590 &= 0xFFFFFFFFFFFFFFF8;
    }
    TgECS::gatherBoundMeshes((TgECS *)v672, (Exec **)a2, &v586, v538, (uint64_t *)&v607, v657.i64, &v628, &v650);
    if ((v590 & 7) != 0)
    {
      v249 = (unsigned int *)(v590 & 0xFFFFFFFFFFFFFFF8);
      do
        v250 = __ldxr(v249);
      while (__stlxr(v250 - 2, v249));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v588);
    if (v587)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v587);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      v251 = v620;
      if ((unint64_t)v620 >= v621)
      {
        v252 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v619, v672);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v620, v672);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v251 + 1, &v672[4]);
        v252 = v251 + 8;
      }
      v620 = v252;
    }
    v280 = v613;
    for (i = v614; v280 != i; v280 += 2)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v280);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, v280 + 1);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      v282 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v282)
        v282 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      v283 = v657.i64[1];
      if (v657.i64[1] >= (unint64_t)v658)
      {
        v284 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(v657.i64, &v678);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v657.i64[1], &v678);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v283 + 4), &v678.i32[1]);
        v284 = v283 + 8;
      }
      v657.i64[1] = v284;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v645);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      v285 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v285)
        v285 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      v286 = v657.i64[1];
      if (v657.i64[1] >= (unint64_t)v658)
      {
        v287 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(v657.i64, &v678);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v657.i64[1], &v678);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v286 + 4), &v678.i32[1]);
        v287 = v286 + 8;
      }
      v657.i64[1] = v287;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v645);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
  }
  else
  {
    __p = 0uLL;
    *(_QWORD *)&v668 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, v672);
    v253 = (pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(v544, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v672);
    if (v253)
    {
      pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(v253);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      v254 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
      if ((v254 & 1) == 0)
      {
        v255 = v613;
        for (j = v614; v255 != j; v255 += 2)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v672, v255);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v672[4], v255 + 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v672);
          v257 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
          if (!v257)
            v257 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
          v258 = v657.i64[1];
          if (v657.i64[1] >= (unint64_t)v658)
          {
            v259 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(v657.i64, &v678);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v657.i64[1], &v678);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v258 + 4), &v678.i32[1]);
            v259 = v258 + 8;
          }
          v657.i64[1] = v259;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v645);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v672);
          v260 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
          if (!v260)
            v260 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
          v261 = v657.i64[1];
          if (v657.i64[1] >= (unint64_t)v658)
          {
            v262 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(v657.i64, &v678);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v657.i64[1], &v678);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v261 + 4), &v678.i32[1]);
            v262 = v261 + 8;
          }
          v657.i64[1] = v262;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v645);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
        }
        v263 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v678.i64[0] = MEMORY[0x24BEE9D78] + 16;
        if (v678.i64[1]
          && (*(_BYTE *)(v678.i64[1] + 57) & 8) == 0
          && (*(unsigned int (**)(uint64_t))(MEMORY[0x24BEE9D78] + 48))(v263)
          && pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v678))
        {
          v645 = 0uLL;
          v646 = 0;
          v581 = *(_DWORD *)a3;
          v264 = *(_QWORD *)(a3 + 8);
          v582 = v264;
          if (v264)
          {
            v265 = (unint64_t *)(v264 + 48);
            do
              v266 = __ldxr(v265);
            while (__stxr(v266 + 1, v265));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v583, (_DWORD *)(a3 + 16));
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v584, (_DWORD *)(a3 + 20));
          v267 = *(_QWORD *)(a3 + 24);
          v585 = v267;
          if ((v267 & 7) != 0)
          {
            v268 = (unsigned int *)(v267 & 0xFFFFFFFFFFFFFFF8);
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 2, v268));
            if ((v269 & 1) == 0)
              v585 &= 0xFFFFFFFFFFFFFFF8;
          }
          if ((v585 & 7) != 0)
          {
            v270 = (unsigned int *)(v585 & 0xFFFFFFFFFFFFFFF8);
            do
              v271 = __ldxr(v270);
            while (__stlxr(v271 - 2, v270));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v583);
          if (v582)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v582);
          TgBase::emitTargets(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v645);
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&v682, 0xCCCCCCCCCCCCCCCDLL * ((v645.i64[1] - v645.i64[0]) >> 3));
          v273 = (_DWORD *)v645.i64[1];
          v272 = (_DWORD *)v645.i64[0];
          if (v645.i64[0] != v645.i64[1])
          {
            v274 = v682;
            do
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v672, v272);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v672[4], v272 + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v274, (int *)v672);
              v275 = (uint64_t)v274->__r_.__value_.__r.__words + 4;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v275);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
              v272 += 10;
              v274 = (std::string *)(v275 + 4);
            }
            while (v272 != v273);
          }
          PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3);
          v277 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
          if (!v277)
            v277 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
          v278 = v657.i64[1];
          if (v657.i64[1] >= (unint64_t)v658)
          {
            v279 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v657.i64, &v648);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v657.i64[1], &v648);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v278 + 4), (_DWORD *)&v648 + 1);
            v279 = v278 + 8;
          }
          v657.i64[1] = v279;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v672, &v648);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v672[4], (_DWORD *)&v648 + 1);
          memset(&v672[8], 0, 24);
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(&v672[8], v682, v683, (v683 - (char *)v682) >> 3);
          v298 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
          if (!v298)
            v298 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
          v299 = *((_QWORD *)v298 + 46) & 0xFFFFFFFFFFFFFFF8;
          if (v299)
          {
            v300 = (char *)(v299 + 16);
            if (*(char *)(v299 + 39) < 0)
              v300 = *(char **)v300;
          }
          else
          {
            v300 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&v659, v300);
          MEMORY[0x2348B26F8](v673, &v659);
          v316 = v631.i64[1];
          if (v631.i64[1] >= (unint64_t)v632)
          {
            v317 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(v631.i64, (uint64_t)v672);
          }
          else
          {
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v631.i64[1], (uint64_t)v672);
            v317 = v316 + 40;
          }
          v631.i64[1] = v317;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v673);
          v654 = &v672[8];
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v654);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
          if (SHIBYTE(v661) < 0)
            operator delete(v659);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v648);
          *(_QWORD *)v672 = &v682;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
          *(_QWORD *)v672 = &v645;
          std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
        }
        MEMORY[0x2348B2080](&v678);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
    }
    *(_QWORD *)v672 = &__p;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, v672);
  v318 = (_QWORD *)(a2 + 232);
  v319 = *(_QWORD **)(a2 + 232);
  if (!v319)
  {
LABEL_565:
    v320 = 1;
    goto LABEL_576;
  }
  while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)v672, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v319 + 28)) & 1) != 0)
  {
    v318 = v319;
LABEL_564:
    v319 = (_QWORD *)*v319;
    if (!v319)
      goto LABEL_565;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v319 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v672))
  {
    ++v319;
    goto LABEL_564;
  }
  v321 = (_QWORD *)*v319;
  v322 = v319;
  if (*v319)
  {
    v322 = v319;
    do
    {
      v323 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v321 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v672);
      v324 = v321 + 1;
      if (!v323)
      {
        v324 = v321;
        v322 = v321;
      }
      v321 = (_QWORD *)*v324;
    }
    while (*v324);
  }
  v325 = (_QWORD *)v319[1];
  if (v325)
  {
    do
    {
      v326 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)v672, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v325 + 28));
      v327 = v325 + 1;
      if (v326)
      {
        v327 = v325;
        v318 = v325;
      }
      v325 = (_QWORD *)*v327;
    }
    while (*v327);
  }
  v320 = v322 == v318;
LABEL_576:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v328 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
  if (v320)
  {
    LOBYTE(v640) = 0;
    v576 = *(_DWORD *)a3;
    v329 = *(_QWORD *)(a3 + 8);
    v577 = v329;
    if (v329)
    {
      v330 = (unint64_t *)(v329 + 48);
      do
        v331 = __ldxr(v330);
      while (__stxr(v331 + 1, v330));
    }
    v332 = (_DWORD *)(a3 + 16);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v578, (_DWORD *)(a3 + 16));
    v333 = (_DWORD *)(a3 + 20);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v579, (_DWORD *)(a3 + 20));
    v334 = *(_QWORD *)(a3 + 24);
    v580 = v334;
    if ((v334 & 7) != 0)
    {
      v335 = (unsigned int *)(v334 & 0xFFFFFFFFFFFFFFF8);
      do
        v336 = __ldxr(v335);
      while (__stxr(v336 + 2, v335));
      if ((v336 & 1) == 0)
        v580 &= 0xFFFFFFFFFFFFFFF8;
    }
    TgECS::meshesUnderAndIncluding(v678.i64, a2, (uint64_t)&v576, &v640);
    if ((v580 & 7) != 0)
    {
      v337 = (unsigned int *)(v580 & 0xFFFFFFFFFFFFFFF8);
      do
        v338 = __ldxr(v337);
      while (__stlxr(v338 - 2, v337));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v578);
    if (v577)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v577);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    LOBYTE(v638) = 0;
    LODWORD(v571) = *(_DWORD *)a3;
    v339 = *(_QWORD *)(a3 + 8);
    v572 = v339;
    if (v339)
    {
      v340 = (unint64_t *)(v339 + 48);
      do
        v341 = __ldxr(v340);
      while (__stxr(v341 + 1, v340));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v573, v332);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v574, v333);
    v342 = *(_QWORD *)(a3 + 24);
    v575 = v342;
    if ((v342 & 7) != 0)
    {
      v343 = (unsigned int *)(v342 & 0xFFFFFFFFFFFFFFF8);
      do
        v344 = __ldxr(v343);
      while (__stxr(v344 + 2, v343));
      if ((v344 & 1) == 0)
        v575 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_OWORD *)&v672[8] = 0uLL;
    *(_QWORD *)v672 = &v672[8];
    TgECS::ecsMeshes((TgECS *)&v665, (Exec **)a2, &v571, v538, v678.i64, (uint64_t)v672, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v648, &v650, (uint64_t)&v685, &v638);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)v672, *(_QWORD **)&v672[8]);
    if ((v575 & 7) != 0)
    {
      v345 = (unsigned int *)(v575 & 0xFFFFFFFFFFFFFFF8);
      do
        v346 = __ldxr(v345);
      while (__stlxr(v346 - 2, v345));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v573);
    if (v572)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v572);
    if ((_BYTE)v638)
    {
      v347 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v347)
        v347 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      v348 = *((_QWORD *)v347 + 51);
      *(_QWORD *)&v644 = v348;
      if ((v348 & 7) != 0)
      {
        v349 = (unsigned int *)(v348 & 0xFFFFFFFFFFFFFFF8);
        do
          v350 = __ldxr(v349);
        while (__stxr(v350 + 2, v349));
        if ((v350 & 1) == 0)
          *(_QWORD *)&v644 = v644 & 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v540, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v644);
      v351 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v351)
        v351 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v540, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v644);
      v352 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v352)
        v352 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v540, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v644);
      v353 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v353)
        v353 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
      v354 = v626;
      if ((unint64_t)v626 >= v627)
      {
        v355 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v625, &v642);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v626, &v642);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v354 + 1, (_DWORD *)&v642 + 1);
        v355 = v354 + 2;
      }
      v626 = v355;
      v645 = 0uLL;
      v646 = 0;
      v682 = 0;
      v683 = 0;
      v684 = 0;
      v660 = 0;
      v659 = 0;
      v661 = 0;
      v683 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v682, &v643);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        v356 = v683;
        if ((unint64_t)v683 >= v684)
        {
          v357 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v682, &v665);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v683, &v665);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v356 + 1, (_DWORD *)&v665 + 1);
          v357 = v356 + 8;
        }
        v683 = v357;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v540);
      *(_QWORD *)&v672[8] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
                          + 1;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v672, &__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v672[4], (_DWORD *)&__p + 1);
      TgBase::emitConstant((Exec **)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v663, (const pxrInternal__aapl__pxrReserved__::VtValue *)v672);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v672);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, &v643);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, (_DWORD *)&v643 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v670, &v663);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v671, &v664);
      v668 = 0uLL;
      *((_QWORD *)&__p + 1) = 0;
      *(_QWORD *)v672 = (char *)&__p + 8;
      v672[8] = 0;
      *((_QWORD *)&__p + 1) = operator new(8uLL);
      *(_QWORD *)&v668 = *((_QWORD *)&__p + 1);
      *((_QWORD *)&v668 + 1) = *((_QWORD *)&__p + 1) + 8;
      *(_QWORD *)&v668 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v668 + 8, &v670, v672, *((_DWORD **)&__p + 1));
      v358 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v358)
        v358 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v359 = *((_QWORD *)v358 + 18) & 0xFFFFFFFFFFFFFFF8;
      if (v359)
      {
        v360 = (char *)(v359 + 16);
        if (*(char *)(v359 + 39) < 0)
          v360 = *(char **)v360;
      }
      else
      {
        v360 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v654, v360);
      MEMORY[0x2348B26F8](v669, &v654);
      v361 = v631.i64[1];
      if (v631.i64[1] >= (unint64_t)v632)
      {
        v363 = 0xCCCCCCCCCCCCCCCDLL * ((v631.i64[1] - v631.i64[0]) >> 3);
        if (v363 + 1 > 0x666666666666666)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v364 = 0x999999999999999ALL * ((uint64_t)&v632[-v631.i64[0]] >> 3);
        if (v364 <= v363 + 1)
          v364 = v363 + 1;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v632[-v631.i64[0]] >> 3) >= 0x333333333333333)
          v365 = 0x666666666666666;
        else
          v365 = v364;
        v673[0] = &v632;
        if (v365)
        {
          if (v365 > 0x666666666666666)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v366 = (char *)operator new(40 * v365);
        }
        else
        {
          v366 = 0;
        }
        v367 = (uint64_t)&v366[40 * v363];
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v367, (uint64_t)&__p);
        v368 = v631.i64[1];
        v369 = v631.i64[0];
        if (v631.i64[1] == v631.i64[0])
        {
          v371 = vdupq_n_s64(v631.u64[1]);
          v370 = (uint64_t)&v366[40 * v363];
        }
        else
        {
          v370 = (uint64_t)&v366[40 * v363];
          do
          {
            v370 -= 40;
            v368 -= 40;
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v370, v368);
          }
          while (v368 != v369);
          v371 = v631;
        }
        v362 = v367 + 40;
        v631.i64[0] = v370;
        v631.i64[1] = v362;
        *(int64x2_t *)&v672[8] = v371;
        v372 = v632;
        v632 = &v366[40 * v365];
        *(_QWORD *)&v672[24] = v372;
        *(_QWORD *)v672 = v371.i64[0];
        std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v672);
      }
      else
      {
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v631.i64[1], (uint64_t)&__p);
        v362 = v361 + 40;
      }
      v631.i64[1] = v362;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v669);
      *(_QWORD *)v672 = (char *)&__p + 8;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      if (SHIBYTE(v656) < 0)
        operator delete(v654);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v670);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, &v642);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, (_DWORD *)&v642 + 1);
      v668 = 0uLL;
      *((_QWORD *)&__p + 1) = 0;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)&__p + 1, v682, v683, (v683 - (char *)v682) >> 3);
      v373 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v373)
        v373 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v374 = *((_QWORD *)v373 + 19) & 0xFFFFFFFFFFFFFFF8;
      if (v374)
      {
        v375 = (char *)(v374 + 16);
        if (*(char *)(v374 + 39) < 0)
          v375 = *(char **)v375;
      }
      else
      {
        v375 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v654, v375);
      MEMORY[0x2348B26F8](v669, &v654);
      v376 = v631.i64[1];
      if (v631.i64[1] >= (unint64_t)v632)
      {
        v378 = 0xCCCCCCCCCCCCCCCDLL * ((v631.i64[1] - v631.i64[0]) >> 3);
        if (v378 + 1 > 0x666666666666666)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v379 = 0x999999999999999ALL * ((uint64_t)&v632[-v631.i64[0]] >> 3);
        if (v379 <= v378 + 1)
          v379 = v378 + 1;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v632[-v631.i64[0]] >> 3) >= 0x333333333333333)
          v380 = 0x666666666666666;
        else
          v380 = v379;
        v673[0] = &v632;
        if (v380)
        {
          if (v380 > 0x666666666666666)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v381 = (char *)operator new(40 * v380);
        }
        else
        {
          v381 = 0;
        }
        v382 = (uint64_t)&v381[40 * v378];
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v382, (uint64_t)&__p);
        v383 = v631.i64[1];
        v384 = v631.i64[0];
        if (v631.i64[1] == v631.i64[0])
        {
          v386 = vdupq_n_s64(v631.u64[1]);
          v385 = (uint64_t)&v381[40 * v378];
        }
        else
        {
          v385 = (uint64_t)&v381[40 * v378];
          do
          {
            v385 -= 40;
            v383 -= 40;
            std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v385, v383);
          }
          while (v383 != v384);
          v386 = v631;
        }
        v377 = v382 + 40;
        v631.i64[0] = v385;
        v631.i64[1] = v382 + 40;
        *(int64x2_t *)&v672[8] = v386;
        v387 = v632;
        v632 = &v381[40 * v380];
        *(_QWORD *)&v672[24] = v387;
        *(_QWORD *)v672 = v386.i64[0];
        std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v672);
      }
      else
      {
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v631.i64[1], (uint64_t)&__p);
        v377 = v376 + 40;
      }
      v631.i64[1] = v377;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v669);
      *(_QWORD *)v672 = (char *)&__p + 8;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      if (SHIBYTE(v656) < 0)
        operator delete(v654);
      *(_QWORD *)v672 = &v659;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
      *(_QWORD *)v672 = &v682;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
      *(_QWORD *)v672 = &v645;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v663);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v642);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v643);
      if ((v644 & 7) != 0)
      {
        v388 = (unsigned int *)(v644 & 0xFFFFFFFFFFFFFFF8);
        do
          v389 = __ldxr(v388);
        while (__stlxr(v389 - 2, v388));
      }
    }
    v390 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
    if ((_BYTE)v638)
      v391 = 0;
    else
      v391 = v390;
    if (v391 == 1)
    {
      v392 = v620;
      if ((unint64_t)v620 >= v621)
      {
        v393 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v619, &v665);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v620, &v665);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v392 + 1, (_DWORD *)&v665 + 1);
        v393 = v392 + 8;
      }
      v620 = v393;
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      v394 = v608;
      if ((unint64_t)v608 >= v609)
      {
        v395 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v607, &v685);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v608, &v685);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v394 + 1, &v686);
        v395 = v394 + 8;
      }
      v608 = v395;
    }
    v566 = *(_DWORD *)a3;
    v396 = *(_QWORD *)(a3 + 8);
    v567 = v396;
    if (v396)
    {
      v397 = (unint64_t *)(v396 + 48);
      do
        v398 = __ldxr(v397);
      while (__stxr(v398 + 1, v397));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v568, v332);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v569, v333);
    v399 = *(_QWORD *)(a3 + 24);
    v570 = v399;
    if ((v399 & 7) != 0)
    {
      v400 = (unsigned int *)(v399 & 0xFFFFFFFFFFFFFFF8);
      do
        v401 = __ldxr(v400);
      while (__stxr(v401 + 2, v400));
      if ((v401 & 1) == 0)
        v570 &= 0xFFFFFFFFFFFFFFF8;
    }
    memset(v672, 0, 24);
    TgECS::ecsMeshDeformation((TgECS *)&v645, a2, &v566, v672, v640);
    *(_QWORD *)&__p = v672;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if ((v570 & 7) != 0)
    {
      v402 = (unsigned int *)(v570 & 0xFFFFFFFFFFFFFFF8);
      do
        v403 = __ldxr(v402);
      while (__stlxr(v403 - 2, v402));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v568);
    if (v567)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v567);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      v404 = v608;
      if ((unint64_t)v608 >= v609)
      {
        v405 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v607, &v645);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v608, &v645);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v404 + 1, &v645.i32[1]);
        v405 = v404 + 8;
      }
      v608 = v405;
    }
    v561 = *(_DWORD *)a3;
    v406 = *(_QWORD *)(a3 + 8);
    v562 = v406;
    if (v406)
    {
      v407 = (unint64_t *)(v406 + 48);
      do
        v408 = __ldxr(v407);
      while (__stxr(v408 + 1, v407));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v563, v332);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v564, v333);
    v409 = *(_QWORD *)(a3 + 24);
    v565 = v409;
    if ((v409 & 7) != 0)
    {
      v410 = (unsigned int *)(v409 & 0xFFFFFFFFFFFFFFF8);
      do
        v411 = __ldxr(v410);
      while (__stxr(v411 + 2, v410));
      if ((v411 & 1) == 0)
        v565 &= 0xFFFFFFFFFFFFFFF8;
    }
    TgECS::ecsBlendShapeWeights((TgECS *)v672, a2, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v561, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v678);
    if ((v565 & 7) != 0)
    {
      v412 = (unsigned int *)(v565 & 0xFFFFFFFFFFFFFFF8);
      do
        v413 = __ldxr(v412);
      while (__stlxr(v413 - 2, v412));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v563);
    if (v562)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v562);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      v414 = v608;
      if ((unint64_t)v608 >= v609)
      {
        v415 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v607, v672);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v608, v672);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v414 + 1, &v672[4]);
        v415 = v414 + 8;
      }
      v608 = v415;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v645);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v665);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v685);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v648);
    *(_QWORD *)v672 = &v678;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  }
  if (v657.i64[0] != v657.i64[1])
  {
    v556 = *(_DWORD *)a3;
    v416 = *(_QWORD *)(a3 + 8);
    v557 = v416;
    if (v416)
    {
      v417 = (unint64_t *)(v416 + 48);
      do
        v418 = __ldxr(v417);
      while (__stxr(v418 + 1, v417));
    }
    v419 = (_DWORD *)(a3 + 16);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v558, (_DWORD *)(a3 + 16));
    v420 = (_DWORD *)(a3 + 20);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v559, (_DWORD *)(a3 + 20));
    v421 = *(_QWORD *)(a3 + 24);
    v560 = v421;
    if ((v421 & 7) != 0)
    {
      v422 = (unsigned int *)(v421 & 0xFFFFFFFFFFFFFFF8);
      do
        v423 = __ldxr(v422);
      while (__stxr(v423 + 2, v422));
      if ((v423 & 1) == 0)
        v560 &= 0xFFFFFFFFFFFFFFF8;
    }
    if (v657.i64[0] == v657.i64[1])
    {
      v659 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    else
    {
      v424 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v424)
        v424 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      TgECS::genAssetPath((TgECS *)&v659, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v556, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v424 + 72));
      memset(v672, 0, 24);
      v426 = *(_DWORD **)&v672[8];
      v425 = *(_DWORD **)v672;
      if (*(_QWORD *)v672 != *(_QWORD *)&v672[8])
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v645, v425);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v645.i32[1], v425 + 1);
          __p = 0uLL;
          *(_QWORD *)&v668 = 0;
          v427 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
          if (!v427)
            v427 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
          v428 = *((_QWORD *)v427 + 20) & 0xFFFFFFFFFFFFFFF8;
          if (v428)
          {
            v429 = (char *)(v428 + 16);
            if (*(char *)(v428 + 39) < 0)
              v429 = *(char **)v429;
          }
          else
          {
            v429 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&v678, v429);
          MEMORY[0x2348B26F8](&v682, &v678);
          TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v645, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v682);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v682);
          if (SBYTE7(v679) < 0)
            operator delete((void *)v678.i64[0]);
          v678.i64[0] = (uint64_t)&__p;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v678);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v645);
          v425 += 2;
        }
        while (v425 != v426);
        v425 = *(_DWORD **)&v672[8];
      }
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>((uint64_t *)v672, v425, v657.i64[0], (_DWORD *)v657.i64[1], (v657.i64[1] - v657.i64[0]) >> 3);
      v430 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v430)
        v430 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v431 = *((_QWORD *)v430 + 3) & 0xFFFFFFFFFFFFFFF8;
      if (v431)
      {
        v432 = (char *)(v431 + 16);
        if (*(char *)(v431 + 39) < 0)
          v432 = *(char **)v432;
      }
      else
      {
        v432 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v432);
      MEMORY[0x2348B26F8](&v678, &__p);
      TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v659, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v672, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v678);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678);
      if (SBYTE7(v668) < 0)
        operator delete((void *)__p);
      *(_QWORD *)&__p = v672;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    if ((v560 & 7) != 0)
    {
      v433 = (unsigned int *)(v560 & 0xFFFFFFFFFFFFFFF8);
      do
        v434 = __ldxr(v433);
      while (__stlxr(v434 - 2, v433));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v558);
    if (v557)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v557);
    v551 = *(_DWORD *)a3;
    v435 = *(_QWORD *)(a3 + 8);
    v552 = v435;
    if (v435)
    {
      v436 = (unint64_t *)(v435 + 48);
      do
        v437 = __ldxr(v436);
      while (__stxr(v437 + 1, v436));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v553, v419);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v554, v420);
    v438 = *(_QWORD *)(a3 + 24);
    v555 = v438;
    if ((v438 & 7) != 0)
    {
      v439 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFFFF8);
      do
        v440 = __ldxr(v439);
      while (__stxr(v440 + 2, v439));
      if ((v440 & 1) == 0)
        v555 &= 0xFFFFFFFFFFFFFFF8;
    }
    v441 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!v441)
      v441 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    TgECS::genECSPath((TgECS *)&v682, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v551, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v441 + 80));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v678, &v659);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v678.i32[1], (_DWORD *)&v659 + 1);
    memset(v672, 0, 24);
    *(_QWORD *)&__p = v672;
    BYTE8(__p) = 0;
    *(_QWORD *)v672 = operator new(8uLL);
    *(_QWORD *)&v672[8] = *(_QWORD *)v672;
    *(_QWORD *)&v672[16] = *(_QWORD *)v672 + 8;
    *(_QWORD *)&v672[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v672[16], &v678, &v678.i32[2], *(_DWORD **)v672);
    v442 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v442)
      v442 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v443 = *((_QWORD *)v442 + 4) & 0xFFFFFFFFFFFFFFF8;
    if (v443)
    {
      v444 = (char *)(v443 + 16);
      if (*(char *)(v443 + 39) < 0)
        v444 = *(char **)v444;
    }
    else
    {
      v444 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v444);
    MEMORY[0x2348B26F8](&v645, &__p);
    TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v682, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v672, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v645);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v645);
    if (SBYTE7(v668) < 0)
      operator delete((void *)__p);
    *(_QWORD *)&__p = v672;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678);
    if ((v555 & 7) != 0)
    {
      v445 = (unsigned int *)(v555 & 0xFFFFFFFFFFFFFFF8);
      do
        v446 = __ldxr(v445);
      while (__stlxr(v446 - 2, v445));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v553);
    if (v552)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v552);
    v447 = v608;
    if ((unint64_t)v608 >= v609)
    {
      v448 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v607, &v682);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v608, &v682);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v447 + 1, (_DWORD *)&v682 + 1);
      v448 = v447 + 8;
    }
    v608 = v448;
    v546 = *(_DWORD *)a3;
    v449 = *(_QWORD *)(a3 + 8);
    v547 = v449;
    if (v449)
    {
      v450 = (unint64_t *)(v449 + 48);
      do
        v451 = __ldxr(v450);
      while (__stxr(v451 + 1, v450));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v548, v419);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v549, v420);
    v452 = *(_QWORD *)(a3 + 24);
    v550 = v452;
    if ((v452 & 7) != 0)
    {
      v453 = (unsigned int *)(v452 & 0xFFFFFFFFFFFFFFF8);
      do
        v454 = __ldxr(v453);
      while (__stxr(v454 + 2, v453));
      if ((v454 & 1) == 0)
        v550 &= 0xFFFFFFFFFFFFFFF8;
    }
    v455 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!v455)
      v455 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    TgECS::genECSPath((TgECS *)&v654, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v546, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v455 + 64));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v678, &v659);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v678.i32[1], (_DWORD *)&v659 + 1);
    memset(v672, 0, 24);
    *(_QWORD *)&__p = v672;
    BYTE8(__p) = 0;
    *(_QWORD *)v672 = operator new(8uLL);
    *(_QWORD *)&v672[8] = *(_QWORD *)v672;
    *(_QWORD *)&v672[16] = *(_QWORD *)v672 + 8;
    *(_QWORD *)&v672[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v672[16], &v678, &v678.i32[2], *(_DWORD **)v672);
    v456 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v456)
      v456 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v457 = *((_QWORD *)v456 + 2) & 0xFFFFFFFFFFFFFFF8;
    if (v457)
    {
      v458 = (char *)(v457 + 16);
      if (*(char *)(v457 + 39) < 0)
        v458 = *(char **)v458;
    }
    else
    {
      v458 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v458);
    MEMORY[0x2348B26F8](&v645, &__p);
    TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v654, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v672, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v645);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v645);
    if (SBYTE7(v668) < 0)
      operator delete((void *)__p);
    *(_QWORD *)&__p = v672;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678);
    if ((v550 & 7) != 0)
    {
      v459 = (unsigned int *)(v550 & 0xFFFFFFFFFFFFFFF8);
      do
        v460 = __ldxr(v459);
      while (__stlxr(v460 - 2, v459));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v548);
    if (v547)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v547);
    v461 = v608;
    if ((unint64_t)v608 >= v609)
    {
      v462 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v607, &v654);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v608, &v654);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v461 + 1, (_DWORD *)&v654 + 1);
      v462 = v461 + 8;
    }
    v608 = v462;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v654);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v682);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v328 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v659);
  }
  v655 = 0;
  v654 = 0;
  v656 = 0;
  UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v328);
  v465 = *UsdPrimDefaultPredicate;
  v464 = UsdPrimDefaultPredicate[1];
  v466 = UsdPrimDefaultPredicate[2];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v465 & 0x2000) != 0 || (v464 & 0x2000) == 0))
  {
    v465 |= 0x2000uLL;
    v464 &= ~0x2000uLL;
  }
  *(_QWORD *)&__p = v465;
  *((_QWORD *)&__p + 1) = v464;
  *(_QWORD *)&v668 = v466;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(a3, (uint64_t *)&__p, (uint64_t)v672);
  *(_QWORD *)&__p = *(_QWORD *)v672;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 2, &v672[8]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 3, &v672[12]);
  v668 = *(_OWORD *)&v672[16];
  v669[0] = v673[0];
  v678.i64[0] = v673[1];
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v678.i32[2], &v674);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v678.i32[3], &v675);
  v679 = v676;
  *(_QWORD *)&v680 = v677;
  while (__p != *(_OWORD *)&v678
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v668, (uint64_t)&v679))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&__p, (uint64_t)&v645);
    v468 = v645.i64[1];
    if (!v645.i64[1] || (*(_BYTE *)(v645.i64[1] + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v645.i64[1], v467);
    v469 = *(_QWORD **)(v468 + 24);
    v470 = (_QWORD *)atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v470)
      v470 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    if ((*v469 & 0xFFFFFFFFFFFFFFF8) == (*v470 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_840;
    v471 = v645.i64[1];
    if (!v645.i64[1] || (*(_BYTE *)(v645.i64[1] + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v645.i64[1], v467);
    v472 = *(_QWORD **)(v471 + 24);
    v473 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v473)
      v473 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    if ((*v472 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v473 + 16) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_840:
      v682 = 0;
      v683 = 0;
      v684 = 0;
      componentInputs(&v665, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v645, (uint64_t *)&v682);
      v474 = v682;
      v475 = v683;
      while (v474 != (std::string *)v475)
      {
        v476 = (std::string *)&v474->__r_.__value_.__r.__words[1];
        TgBase::emitGroup(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v474, &v474->__r_.__value_.__l.__size_);
        v474 = v476 + 1;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v645, &v659);
      v477 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v477)
        v477 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v659, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v477 + 136));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v659);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v645, &v659);
      v478 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
      if (!v478)
        v478 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v659, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v478 + 64));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v659);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v685, &v665);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v686, (_DWORD *)&v665 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v687, &v644);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v688, (_DWORD *)&v644 + 1);
      v660 = 0;
      v659 = 0;
      v661 = 0;
      v648 = &v659;
      LOBYTE(v649) = 0;
      v659 = operator new(0x10uLL);
      v660 = v659;
      v661 = (char *)v659 + 16;
      v660 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v661, &v685, &v689, v659);
      v479 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v479)
        v479 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      if ((*((_QWORD *)v479 + 14) & 0xFFFFFFFFFFFFFFF8) != 0)
        v480 = (*((_QWORD *)v479 + 14) & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v480 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v479);
      MEMORY[0x2348B26F8](&v648, v480);
      TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v643, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v659, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v648);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v648);
      v648 = &v659;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v648);
      v481 = 16;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v481 -= 8;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v685 + v481);
      }
      while (v481);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v644);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v665);
      v659 = &v682;
      std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v659);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        v482 = v655;
        if ((unint64_t)v655 >= v656)
        {
          v483 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v654, &v643);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v655, &v643);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v482 + 1, (_DWORD *)&v643 + 1);
          v483 = v482 + 8;
        }
        v655 = v483;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v643);
    }
    if ((v647 & 7) != 0)
    {
      v484 = (unsigned int *)(v647 & 0xFFFFFFFFFFFFFFF8);
      do
        v485 = __ldxr(v484);
      while (__stlxr(v485 - 2, v484));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v646);
    if (v645.i64[1])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v645.i64[1]);
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678.i64[1]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v674);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v672[8]);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>((uint64_t *)&v622, v623, v654, v655, (v655 - (_BYTE *)v654) >> 3);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v538);
  MEMORY[0x2348B274C](&__p, "__childEntities");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v672, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0)
  {
    v486 = (unsigned int *)(__p & 0xFFFFFFFFFFFFFFF8);
    do
      v487 = __ldxr(v486);
    while (__stlxr(v487 - 2, v486));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
  v488 = v623;
  if ((unint64_t)v623 >= v624)
  {
    v489 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v622, &v645);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v623, &v645);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v488 + 1, &v645.i32[1]);
    v489 = v488 + 8;
  }
  v623 = v489;
  TgBase::emitArray(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v645, (uint64_t)&v625);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>((uint64_t *)&v622, v623, v607, v608, (v608 - v607) >> 3);
  if (v633 == *(_QWORD *)(a2 + 96))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 96));
    v490 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!v490)
      v490 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v490 + 336));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
    v491 = v623;
    if ((unint64_t)v623 >= v624)
    {
      v492 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v622, v672);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v623, v672);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v491 + 1, &v672[4]);
      v492 = v491 + 8;
    }
    v623 = v492;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v672);
  }
  if (*(_BYTE *)(a2 + 104))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenNames((pxrInternal__aapl__pxrReserved__::UsdPrim *)a3);
    v493 = *(_QWORD *)&v672[8] - *(_QWORD *)v672;
    *(_QWORD *)&__p = v672;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v493 == 8)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenNames((pxrInternal__aapl__pxrReserved__::UsdPrim *)a3);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild((pxrInternal__aapl__pxrReserved__::UsdPrim *)a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
      v678.i64[0] = (uint64_t)&__p;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v678);
      v678.i64[0] = 0;
      v494 = atomic_load(MEMORY[0x24BEE7E98]);
      if (!v494)
        v494 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
      if (!atomic_load(&realityio::tokens::EntityBuilderTokens))
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v672, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v494 + 72)))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v538);
        v496 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
        if (!v496)
          v496 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v496 + 168));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v497 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
        if ((v678.i64[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          v498 = (v678.i64[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v498 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v497);
        *((_QWORD *)&__p + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy((std::string **)&__p, v498);
        TgBase::emitConstant((Exec **)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v682, (const pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
        v499 = v623;
        if ((unint64_t)v623 >= v624)
        {
          v500 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v622, &v682);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v623, &v682);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v499 + 1, (_DWORD *)&v682 + 1);
          v500 = v499 + 8;
        }
        v623 = v500;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v682);
      }
      if ((v678.i8[0] & 7) != 0)
      {
        v501 = (unsigned int *)(v678.i64[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v502 = __ldxr(v501);
        while (__stlxr(v502 - 2, v501));
      }
      if ((v672[24] & 7) != 0)
      {
        v503 = (unsigned int *)(*(_QWORD *)&v672[24] & 0xFFFFFFFFFFFFFFF8);
        do
          v504 = __ldxr(v503);
        while (__stlxr(v504 - 2, v503));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v672[16]);
      if (*(_QWORD *)&v672[8])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v672[8]);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v538);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, (_DWORD *)v538 + 1);
  v668 = 0uLL;
  *((_QWORD *)&__p + 1) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)&__p + 1, v622, v623, (v623 - v622) >> 3);
  v505 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v505)
    v505 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v506 = *((_QWORD *)v505 + 18) & 0xFFFFFFFFFFFFFFF8;
  if (v506)
  {
    v507 = (char *)(v506 + 16);
    if (*(char *)(v506 + 39) < 0)
      v507 = *(char **)v507;
  }
  else
  {
    v507 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v678, v507);
  MEMORY[0x2348B26F8](v669, &v678);
  v508 = v631.i64[1];
  if (v631.i64[1] >= (unint64_t)v632)
  {
    v510 = 0xCCCCCCCCCCCCCCCDLL * ((v631.i64[1] - v631.i64[0]) >> 3);
    if (v510 + 1 > 0x666666666666666)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v511 = 0x999999999999999ALL * ((uint64_t)&v632[-v631.i64[0]] >> 3);
    if (v511 <= v510 + 1)
      v511 = v510 + 1;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v632[-v631.i64[0]] >> 3) >= 0x333333333333333)
      v512 = 0x666666666666666;
    else
      v512 = v511;
    v673[0] = &v632;
    if (v512)
    {
      if (v512 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v513 = (char *)operator new(40 * v512);
    }
    else
    {
      v513 = 0;
    }
    v514 = (uint64_t)&v513[40 * v510];
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v514, (uint64_t)&__p);
    v515 = v631.i64[1];
    v516 = v631.i64[0];
    if (v631.i64[1] == v631.i64[0])
    {
      v518 = vdupq_n_s64(v631.u64[1]);
      v517 = v514;
    }
    else
    {
      v517 = v514;
      do
      {
        v517 -= 40;
        v515 -= 40;
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v517, v515);
      }
      while (v515 != v516);
      v518 = v631;
    }
    v509 = v514 + 40;
    v631.i64[0] = v517;
    v631.i64[1] = v509;
    *(int64x2_t *)&v672[8] = v518;
    v519 = v632;
    v632 = &v513[40 * v512];
    *(_QWORD *)&v672[24] = v519;
    *(_QWORD *)v672 = v518.i64[0];
    std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v672);
  }
  else
  {
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v631.i64[1], (uint64_t)&__p);
    v509 = v508 + 40;
  }
  v631.i64[1] = v509;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v669);
  *(_QWORD *)v672 = (char *)&__p + 8;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  if (SBYTE7(v679) < 0)
    operator delete((void *)v678.i64[0]);
  v520 = v620;
  if ((unint64_t)v620 >= v621)
  {
    v521 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v619, v538);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v620, v538);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v520 + 1, (_DWORD *)v538 + 1);
    v521 = v520 + 8;
  }
  v620 = v521;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, &v633);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, (_DWORD *)&v633 + 1);
  v668 = 0uLL;
  *((_QWORD *)&__p + 1) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((_QWORD *)&__p + 1, v619, v620, (v620 - v619) >> 3);
  v522 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v522)
    v522 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v523 = *((_QWORD *)v522 + 19) & 0xFFFFFFFFFFFFFFF8;
  if (v523)
  {
    v524 = (char *)(v523 + 16);
    if (*(char *)(v523 + 39) < 0)
      v524 = *(char **)v524;
  }
  else
  {
    v524 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v678, v524);
  MEMORY[0x2348B26F8](v669, &v678);
  v525 = v631.i64[1];
  if (v631.i64[1] >= (unint64_t)v632)
  {
    v527 = 0xCCCCCCCCCCCCCCCDLL * ((v631.i64[1] - v631.i64[0]) >> 3);
    if (v527 + 1 > 0x666666666666666)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v528 = 0x999999999999999ALL * ((uint64_t)&v632[-v631.i64[0]] >> 3);
    if (v528 <= v527 + 1)
      v528 = v527 + 1;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v632[-v631.i64[0]] >> 3) >= 0x333333333333333)
      v529 = 0x666666666666666;
    else
      v529 = v528;
    v673[0] = &v632;
    if (v529)
    {
      if (v529 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v530 = (char *)operator new(40 * v529);
    }
    else
    {
      v530 = 0;
    }
    v531 = (uint64_t)&v530[40 * v527];
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v531, (uint64_t)&__p);
    v532 = v631.i64[1];
    v533 = v631.i64[0];
    if (v631.i64[1] == v631.i64[0])
    {
      v535 = vdupq_n_s64(v631.u64[1]);
      v534 = v531;
    }
    else
    {
      v534 = v531;
      do
      {
        v534 -= 40;
        v532 -= 40;
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v534, v532);
      }
      while (v532 != v533);
      v535 = v631;
    }
    v526 = v531 + 40;
    v631.i64[0] = v534;
    v631.i64[1] = v526;
    *(int64x2_t *)&v672[8] = v535;
    v536 = v632;
    v632 = &v530[40 * v529];
    *(_QWORD *)&v672[24] = v536;
    *(_QWORD *)v672 = v535.i64[0];
    std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v672);
  }
  else
  {
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v631.i64[1], (uint64_t)&__p);
    v526 = v525 + 40;
  }
  v631.i64[1] = v526;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v669);
  *(_QWORD *)v672 = (char *)&__p + 8;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  if (SBYTE7(v679) < 0)
    operator delete((void *)v678.i64[0]);
  TgBase::emitTargets(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v631);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v645);
  *(_QWORD *)v672 = &v654;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  *(_QWORD *)v672 = &v657;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  *(_QWORD *)v672 = &v650;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  *(_QWORD *)v672 = &v607;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v612);
  *(_QWORD *)v672 = &v613;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v618);
  *(_QWORD *)v672 = &v619;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  *(_QWORD *)v672 = &v622;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  *(_QWORD *)v672 = &v625;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  *(_QWORD *)v672 = &v628;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  *(_QWORD *)v672 = &v631;
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)v672);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v633);
}

void sub_2301DC380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, pxrInternal__aapl__pxrReserved__::SdfPath *a19)
{
  uint64_t v19;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x480]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 - 144));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x3F0]);
  STACK[0x490] = v19 - 256;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x490]);
  *(_QWORD *)(v19 - 256) = &STACK[0x440];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 256));
  *(_QWORD *)(v19 - 256) = &STACK[0x408];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 256));
  STACK[0x458] = (unint64_t)&STACK[0x240];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x458]);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&STACK[0x258]);
  STACK[0x258] = (unint64_t)&STACK[0x290];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x258]);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&STACK[0x2A8]);
  STACK[0x2A8] = (unint64_t)&STACK[0x2E0];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  STACK[0x2A8] = (unint64_t)&STACK[0x2F8];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  STACK[0x2A8] = (unint64_t)&STACK[0x310];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  STACK[0x2A8] = (unint64_t)&STACK[0x328];
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  STACK[0x2A8] = (unint64_t)&STACK[0x340];
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x358]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a19);
  _Unwind_Resume(a1);
}

void getDefaultPrimPathOrFirst(_DWORD *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  unsigned int *v6;
  unsigned int v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdStage *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  _BYTE v16[8];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::TfToken *v20[3];
  void *__p;
  uint64_t v22;
  _BYTE v23[8];
  uint64_t v24;

  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  if (pxrInternal__aapl__pxrReserved__::UsdStage::HasDefaultPrim(v4))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetDefaultPrim(v5);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
    if ((v24 & 7) != 0)
    {
      v6 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
    if (v22)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  }
  else
  {
    v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v8);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenNames((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p);
    if ((v24 & 7) != 0)
    {
      v9 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
    if (v22)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
    if (v20[1] == v20[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/model");
      MEMORY[0x2348B26F8](a1, &__p);
      if ((v23[7] & 0x80000000) != 0)
        operator delete(__p);
    }
    else
    {
      v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v11);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild((pxrInternal__aapl__pxrReserved__::UsdPrim *)v16, v20[0]);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
      if ((v24 & 7) != 0)
      {
        v12 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
      if (v22)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
      if ((v19 & 7) != 0)
      {
        v14 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
      if (v17)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
    }
    __p = v20;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
}

void sub_2301DD8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  __p = &a14;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void TgBase::TargetInfoT::~TargetInfoT(TgBase::TargetInfoT *this)
{
  void **v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 32);
  v2 = (void **)((char *)this + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void TgECS::ecsMeshAsset(_DWORD *a1, Exec **a2, pxrInternal__aapl__pxrReserved__::UsdObject *a3, uint64_t *a4, _DWORD *a5, uint64_t a6, uint64_t a7, _BYTE *a8, _BYTE *a9)
{
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::UsdStage *v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  realityio::tokens::EcsTokens_StaticTokenType *v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  int BlendShapeNameAndTargetPaths;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  char *v67;
  __int128 v68;
  __int128 v69;
  unsigned int *v70;
  unsigned int v71;
  _DWORD *v72;
  _DWORD *v73;
  realityio::tokens::ActionTokens_StaticTokenType *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v78;
  char *v79;
  char *v80;
  pxrInternal__aapl__pxrReserved__ *v81;
  uint64_t *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v86;
  uint64_t *v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  pxrInternal__aapl__pxrReserved__::UsdObject *v101;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  pxrInternal__aapl__pxrReserved__::TfToken *v111;
  uint64_t EmptyString;
  size_t v113;
  void **v114;
  const void *v115;
  unsigned int *v116;
  unsigned int v117;
  char *v118;
  char *v119;
  unsigned int *v120;
  unsigned int v121;
  pxrInternal__aapl__pxrReserved__ *v122;
  _QWORD *v123;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v124;
  unint64_t v125;
  pxrInternal__aapl__pxrReserved__ *v126;
  _QWORD *v127;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v128;
  unint64_t v129;
  pxrInternal__aapl__pxrReserved__ *v130;
  _QWORD *v131;
  unsigned int *v132;
  _BOOL4 v133;
  unsigned int v134;
  uint64_t *v135;
  uint64_t *v136;
  unsigned int *v137;
  unsigned int v138;
  void *v139;
  unsigned int *v140;
  unsigned int v141;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v142;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v143;
  _QWORD *v159;
  std::string::size_type size;
  pxrInternal__aapl__pxrReserved__::TfToken *v161;
  const std::string *v162;
  pxrInternal__aapl__pxrReserved__::TfToken *v163;
  const std::string *v164;
  unsigned int *v165;
  unsigned int v166;
  std::string::size_type v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int *v170;
  unsigned int v171;
  char *v172;
  char *v173;
  _QWORD *v174;
  _QWORD *v175;
  pxrInternal__aapl__pxrReserved__::UsdStage *v176;
  void *v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  unint64_t *v181;
  unint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  unint64_t *v185;
  unint64_t v186;
  unsigned int *v187;
  unsigned int v188;
  pxrInternal__aapl__pxrReserved__ *v189;
  uint64_t v190;
  __int128 v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int *v194;
  unsigned int v195;
  unint64_t *v196;
  unint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int *v208;
  unsigned int v209;
  unsigned int *v210;
  unsigned int v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int *v230;
  unsigned int v231;
  std::__shared_weak_count *v232;
  unint64_t *p_shared_owners;
  unint64_t v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int *v241;
  unsigned int v242;
  unsigned int *v243;
  unsigned int v244;
  unsigned int *v245;
  unsigned int v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int *v249;
  unsigned int v250;
  realityio::tokens::EcsTokens_StaticTokenType *v251;
  _QWORD *v252;
  int v253;
  realityio::tokens::EcsTokens_StaticTokenType *v254;
  pxrInternal__aapl__pxrReserved__ *v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int *v258;
  unsigned int v259;
  uint64_t UsdPrimDefaultPredicate;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v264;
  unsigned int *v265;
  unsigned int v266;
  _DWORD *v267;
  _DWORD *v268;
  realityio::tokens::ActionTokens_StaticTokenType *v269;
  unint64_t v270;
  char *v271;
  uint64_t *NameToken;
  unsigned int *v273;
  unsigned int v274;
  _QWORD *v275;
  int v276;
  realityio::tokens::EcsTokens_StaticTokenType *v277;
  uint64_t Name;
  char *v279;
  size_t v280;
  void **v281;
  char *v282;
  unsigned int *v283;
  unsigned int v284;
  unsigned int *v285;
  unsigned int v286;
  unsigned int *v287;
  unsigned int v288;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v289;
  char *v290;
  realityio::tokens::ActionTokens_StaticTokenType *v291;
  unint64_t v292;
  char *v293;
  char *v294;
  char *v295;
  unint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int64x2_t v308;
  void *v309;
  unsigned int *v310;
  unsigned int v311;
  unsigned int *v312;
  unsigned int v313;
  uint64_t *v314;
  int *v315;
  _DWORD *v316;
  _DWORD *v317;
  pxrInternal__aapl__pxrReserved__::UsdStage *v318;
  void *v319;
  unsigned int *v320;
  unsigned int v321;
  unsigned int v322;
  unint64_t *v323;
  unint64_t v324;
  unsigned int *v325;
  unsigned int v326;
  realityio::tokens::EcsTokens_StaticTokenType *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int *v334;
  unsigned int v335;
  unsigned int *v336;
  unsigned int v337;
  unsigned int *v338;
  unsigned int v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  _DWORD *v343;
  _DWORD *v344;
  int *v345;
  _DWORD *v346;
  _DWORD *i;
  realityio::tokens::ActionTokens_StaticTokenType *v348;
  unint64_t v349;
  char *v350;
  realityio::tokens::ActionTokens_StaticTokenType *v351;
  unint64_t v352;
  char *v353;
  char *v354;
  char *v355;
  unsigned int *v356;
  unsigned int v357;
  unsigned int *v358;
  unsigned int v359;
  uint64_t *v360;
  uint64_t *v361;
  BOOL v362;
  _DWORD *v363;
  _DWORD *j;
  char *v365;
  char *v366;
  realityio::tokens::EcsTokens_StaticTokenType *v367;
  char *v368;
  char *v369;
  realityio::tokens::EcsTokens_StaticTokenType *v370;
  char *v371;
  char *v372;
  _DWORD *v373;
  realityio::tokens::ActionTokens_StaticTokenType *v374;
  unint64_t v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int64x2_t v387;
  void *v388;
  _DWORD *v389;
  uint64_t v390;
  unsigned int (*v392)(uint64_t *);
  unsigned int (*v395)(uint64_t *);
  void *v396;
  uint64_t v397;
  uint64_t **v399;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v400;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v402;
  char *v403;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  _QWORD *v410;
  int v412;
  void *v413;
  int v414;
  int v415;
  uint64_t v416;
  int v417;
  pxrInternal__aapl__pxrReserved__ *v418;
  int v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  int v428;
  int v429;
  int v430;
  std::string v431;
  void *v432;
  uint64_t v433;
  char v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  char v439[8];
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  char v443[8];
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  char v447[8];
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  char v451[8];
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  _QWORD v459[3];
  uint64_t v460;
  uint64_t *v461;
  _QWORD *v462[2];
  char *v463;
  char *v464;
  unint64_t v465;
  int v466;
  pxrInternal__aapl__pxrReserved__ *v467;
  int v468;
  int v469;
  uint64_t v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  int v475;
  pxrInternal__aapl__pxrReserved__ *v476;
  int v477;
  int v478;
  uint64_t v479;
  uint64_t *v480;
  _QWORD *v481[2];
  char v482[8];
  char v483[8];
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  pxrInternal__aapl__pxrReserved__ *v492;
  pxrInternal__aapl__pxrReserved__ *v493;
  int v494;
  int v495;
  uint64_t v496;
  _OWORD v497[8];
  uint64_t *v498;
  _QWORD *v499[2];
  _DWORD *v500;
  _DWORD *v501;
  unint64_t v502;
  char *v503;
  char *v504;
  unint64_t v505;
  int64x2_t v506;
  _QWORD v507[2];
  unint64_t v508;
  pxrInternal__aapl__pxrReserved__ *v509;
  int v510;
  int v511;
  uint64_t v512;
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v513[2];
  __int128 v514;
  __int128 v515;
  _OWORD v516[3];
  _BYTE v517[80];
  _BYTE v518[224];
  _QWORD v519[4];
  __int128 v520;
  __int128 v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  char v525[8];
  std::__shared_weak_count *v526;
  int v527;
  int v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  int v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  void *v542;
  uint64_t v543;
  _BYTE v544[8];
  uint64_t v545;
  uint64_t v546;
  std::__shared_weak_count *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  _DWORD *v551;
  unint64_t v552;
  uint64_t v553;
  __int128 v554;
  __int128 v555;
  uint64_t v556;
  void *v557[2];
  __int128 v558;
  __int128 v559;
  __int128 v560;
  void *v561[2];
  __int128 v562;
  uint64_t v563;
  void *__p[4];
  __int128 v565;
  _OWORD v566[22];
  uint64_t v567;

  v567 = *MEMORY[0x24BDAC8D0];
  v506 = 0uLL;
  v507[0] = 0;
  v504 = 0;
  v503 = 0;
  v505 = 0;
  v501 = 0;
  v500 = 0;
  v502 = 0;
  v499[1] = 0;
  v499[0] = 0;
  v498 = (uint64_t *)v499;
  *a8 = 0;
  memset(v497, 0, sizeof(v497));
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform();
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__p, 0, 0.0);
  v10 = *a4;
  if (a4[1] != *a4)
  {
    v407 = 0;
    v397 = MEMORY[0x24BEE9CF0] + 16;
    v396 = (void *)(MEMORY[0x24BEE9DC8] + 16);
    v390 = MEMORY[0x24BEE9DA0] + 16;
    v408 = MEMORY[0x24BEE9D28] + 16;
    v399 = (uint64_t **)(a2 + 60);
    v395 = *(unsigned int (**)(uint64_t *))(MEMORY[0x24BEE9DB0] + 48);
    v392 = *(unsigned int (**)(uint64_t *))(MEMORY[0x24BEE9D50] + 48);
    v410 = (_QWORD *)(a7 + 8);
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a3);
      v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)__p);
      v400 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 8 * v407);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v11, v400);
      v12 = __p[1];
      if (__p[1])
      {
        v13 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v14 = __ldxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimInPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v492, (uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)__p, &v490);
        if (((uint64_t)__p[3] & 7) != 0)
        {
          v16 = (unsigned int *)((unint64_t)__p[3] & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stlxr(v17 - 2, v16));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[2]);
        if (__p[1])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p[1]);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v492, &v490);
      }
      v405 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v399, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v490);
      if (!v405)
        std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v399, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v490, &v490);
      MEMORY[0x2348B274C](__p, "__meshDescriptor");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v490, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v18 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v492, __p);
      Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)Data + 264));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v492, __p);
      v21 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v21)
        v21 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v21 + 272));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      MEMORY[0x2348B274C](v513, "xform");
      __p[0] = v513[0];
      v513[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p[1], &v484);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p[1] + 1, &v485);
      MEMORY[0x2348B274C](v557, "descriptor");
      __p[2] = v557[0];
      v557[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p[3], &v488);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p[3] + 1, &v489);
      MEMORY[0x2348B274C](&v471, "providingPrim");
      *(_QWORD *)&v565 = v471;
      *(_QWORD *)&v471 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v565 + 2, &v490);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v565 + 3, &v491);
      v22 = 0;
      v481[0] = 0;
      v481[1] = 0;
      v480 = (uint64_t *)v481;
      do
      {
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::SdfPath> const&>(&v480, v481, (uint64_t *)&__p[v22], (uint64_t *)&__p[v22]);
        v22 += 2;
      }
      while (v22 != 6);
      v23 = (void **)v566;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(v23 - 1));
        v24 = (uint64_t)*(v23 - 2);
        if ((v24 & 7) != 0)
        {
          v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        v23 -= 2;
      }
      while (v23 != __p);
      if ((v471 & 7) != 0)
      {
        v27 = (unsigned int *)(v471 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      if (((uint64_t)v557[0] & 7) != 0)
      {
        v29 = (unsigned int *)((unint64_t)v557[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      if (((uint64_t)v513[0] & 7) != 0)
      {
        v31 = (unsigned int *)((unint64_t)v513[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      v475 = (int)v492;
      v476 = v493;
      if (v493)
      {
        v33 = (unint64_t *)((char *)v493 + 48);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v477, &v494);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v478, &v495);
      v479 = v496;
      if ((v496 & 7) != 0)
      {
        v35 = (unsigned int *)(v496 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 2, v35));
        if ((v36 & 1) == 0)
          v479 &= 0xFFFFFFFFFFFFFFF8;
      }
      if ((v479 & 7) != 0)
      {
        v38 = (unsigned int *)(v479 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v477);
      if (v476)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v476);
      if (BlendShapeNameAndTargetPaths)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationshipAtPath((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v492, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v483);
        *((_QWORD *)&v471 + 1) = 0;
        *(_QWORD *)&v472 = 0;
        *(_QWORD *)&v471 = (char *)&v471 + 8;
        *(_QWORD *)&v565 = 0;
        memset(__p, 0, sizeof(__p));
        v554 = 0uLL;
        *(_QWORD *)&v555 = 0;
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributeAtPath((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v492, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v483);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v557))
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
        if ((BYTE8(v558) & 7) != 0)
        {
          v40 = (unsigned int *)(*((_QWORD *)&v558 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v558);
        if (v557[1])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v557[1]);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationshipAtPath((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v492, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v482);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v557))
          pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
        if ((BYTE8(v558) & 7) != 0)
        {
          v42 = (unsigned int *)(*((_QWORD *)&v558 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v43 = __ldxr(v42);
          while (__stlxr(v43 - 2, v42));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v558);
        if (v557[1])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v557[1]);
        if (__p[0] && __p[0] == (void *)((uint64_t)(*((_QWORD *)&v554 + 1) - v554) >> 3))
        {
          v44 = 0;
          do
          {
            v45 = v554;
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
            v46 = (_DWORD *)(v45 + 8 * (_QWORD)v44);
            v47 = v565;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v557, v46);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v557 + 1, v46 + 1);
            v48 = *(_QWORD *)(v47 + 8 * (_QWORD)v44);
            v557[1] = (void *)v48;
            if ((v48 & 7) != 0)
            {
              v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
              do
                v50 = __ldxr(v49);
              while (__stxr(v50 + 2, v49));
              if ((v50 & 1) == 0)
                v557[1] = (void *)((unint64_t)v557[1] & 0xFFFFFFFFFFFFFFF8);
            }
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t **)&v471, (pxrInternal__aapl__pxrReserved__::SdfPath *)v557, (uint64_t)v557);
            if (((uint64_t)v557[1] & 7) != 0)
            {
              v51 = (unsigned int *)((unint64_t)v557[1] & 0xFFFFFFFFFFFFFFF8);
              do
                v52 = __ldxr(v51);
              while (__stlxr(v52 - 2, v51));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v557);
            v44 = (char *)v44 + 1;
          }
          while (__p[0] > v44);
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v488);
        MEMORY[0x2348B274C](&v520, "__meshBlendShapeInfo");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v557, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v520);
        if ((v520 & 7) != 0)
        {
          v53 = (unsigned int *)(v520 & 0xFFFFFFFFFFFFFFF8);
          do
            v54 = __ldxr(v53);
          while (__stlxr(v54 - 2, v53));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v557);
        MEMORY[0x2348B274C](&v520, "blendShapeInfo");
        v557[0] = (void *)v520;
        *(_QWORD *)&v520 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v557[1], v561);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v557[1] + 1, (_DWORD *)v561 + 1);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v480, (uint64_t *)v557, (uint64_t)v557);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v557[1]);
        if (((uint64_t)v557[0] & 7) != 0)
        {
          v55 = (unsigned int *)((unint64_t)v557[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v56 = __ldxr(v55);
          while (__stlxr(v56 - 2, v55));
        }
        if ((v520 & 7) != 0)
        {
          v57 = (unsigned int *)(v520 & 0xFFFFFFFFFFFFFFF8);
          do
            v58 = __ldxr(v57);
          while (__stlxr(v58 - 2, v57));
        }
        v557[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy((uint64_t *)v557, (uint64_t)&v471);
        TgBase::emitConstant(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v561, (const pxrInternal__aapl__pxrReserved__::VtValue *)v557);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v557);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v561);
        v557[0] = &v554;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v557);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(__p);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy((uint64_t)&v471, *((_QWORD **)&v471 + 1));
        if ((BYTE8(v514) & 7) != 0)
        {
          v59 = (unsigned int *)(*((_QWORD *)&v514 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v60 = __ldxr(v59);
          while (__stlxr(v60 - 2, v59));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v514);
        if (v513[1])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v513[1]);
      }
      TgBase::emitGroup((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v486, &v480);
      v474 = 0u;
      v473 = 0u;
      v472 = 0u;
      v471 = 0u;
      v466 = (int)v492;
      v467 = v493;
      if (v493)
      {
        v61 = (unint64_t *)((char *)v493 + 48);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v468, &v494);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v469, &v495);
      v470 = v496;
      if ((v496 & 7) != 0)
      {
        v63 = (unsigned int *)(v496 & 0xFFFFFFFFFFFFFFF8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 2, v63));
        if ((v64 & 1) == 0)
          v470 &= 0xFFFFFFFFFFFFFFF8;
      }
      memset(v566, 0, 80);
      v565 = 0u;
      memset(__p, 0, sizeof(__p));
      pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform();
      v516[0] = 0u;
      v515 = 0u;
      v514 = 0u;
      *(_OWORD *)v513 = 0u;
      MEMORY[0x2348B199C](v513, __p);
      v560 = 0u;
      v559 = 0u;
      v558 = 0u;
      *(_OWORD *)v557 = 0u;
      MEMORY[0x2348B199C](v557, v497);
      v471 = *(_OWORD *)v557;
      v472 = v558;
      v473 = v559;
      v474 = v560;
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
      if ((v470 & 7) != 0)
      {
        v65 = (unsigned int *)(v470 & 0xFFFFFFFFFFFFFFF8);
        do
          v66 = __ldxr(v65);
        while (__stlxr(v66 - 2, v65));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v468);
      if (v467)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v467);
      __p[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(void)::ti
             + 2;
      v67 = (char *)operator new();
      v68 = v472;
      *(_OWORD *)v67 = v471;
      *((_OWORD *)v67 + 1) = v68;
      v69 = v474;
      *((_OWORD *)v67 + 2) = v473;
      *((_OWORD *)v67 + 3) = v69;
      v70 = (unsigned int *)(v67 + 64);
      atomic_store(0, (unsigned int *)v67 + 16);
      __p[0] = v67;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
      TgBase::emitConstant(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v484, (const pxrInternal__aapl__pxrReserved__::VtValue *)__p);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
      v72 = v501;
      if ((unint64_t)v501 >= v502)
      {
        v73 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v500, &v486);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v501, &v486);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v72 + 1, &v487);
        v73 = v72 + 2;
      }
      v501 = v73;
      v464 = 0;
      v463 = 0;
      v465 = 0;
      v462[0] = 0;
      v462[1] = 0;
      v461 = (uint64_t *)v462;
      v74 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v74)
        v74 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v75 = *((_QWORD *)v74 + 28);
      v460 = v75;
      if ((v75 & 7) != 0)
      {
        v76 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 2, v76));
        if ((v77 & 1) == 0)
          v460 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v74);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
        break;
      v81 = v493;
      if (a4[1] - *a4 == 8)
      {
        if (!v493 || (*((_BYTE *)v493 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v493, v78);
        v82 = (uint64_t *)*((_QWORD *)v81 + 3);
        MEMORY[0x2348B274C](__p, "Preliminary_Text");
        v83 = *v82;
        v84 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        if (((uint64_t)__p[0] & 7) != 0)
        {
          do
            v85 = __ldxr(v84);
          while (__stlxr(v85 - 2, v84));
        }
        if ((unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8) == v84)
        {
          *a8 = 1;
          gatherTextShapeInputs(&v492, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v460, (uint64_t *)&v463);
        }
        else
        {
          gatherPrimitiveShapeInputs((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)&v492, &v460, (uint64_t *)&v463);
        }
        v122 = v493;
        if (!v493 || (*((_BYTE *)v493 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v493, v86);
        v123 = (_QWORD *)*((_QWORD *)v122 + 3);
        MEMORY[0x2348B274C](__p, "Capsule");
        v125 = (unint64_t)__p[0];
        if ((*v123 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8))
        {
          v133 = 1;
        }
        else
        {
          v126 = v493;
          if (!v493 || (*((_BYTE *)v493 + 57) & 8) != 0)
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v493, v124);
          v127 = (_QWORD *)*((_QWORD *)v126 + 3);
          MEMORY[0x2348B274C](v513, "Cone");
          v129 = (unint64_t)v513[0];
          if ((*v127 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v513[0] & 0xFFFFFFFFFFFFFFF8))
          {
            v133 = 1;
          }
          else
          {
            v130 = v493;
            if (!v493 || (*((_BYTE *)v493 + 57) & 8) != 0)
              pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v493, v128);
            v131 = (_QWORD *)*((_QWORD *)v130 + 3);
            MEMORY[0x2348B274C](v557, "Cylinder");
            v132 = (unsigned int *)((unint64_t)v557[0] & 0xFFFFFFFFFFFFFFF8);
            v133 = (*v131 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v557[0] & 0xFFFFFFFFFFFFFFF8);
            if (((uint64_t)v557[0] & 7) != 0)
            {
              do
                v134 = __ldxr(v132);
              while (__stlxr(v134 - 2, v132));
            }
            v129 = (unint64_t)v513[0];
          }
          if ((v129 & 7) != 0)
          {
            v192 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFF8);
            do
              v193 = __ldxr(v192);
            while (__stlxr(v193 - 2, v192));
          }
          v125 = (unint64_t)__p[0];
        }
        if ((v125 & 7) != 0)
        {
          v194 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
          do
            v195 = __ldxr(v194);
          while (__stlxr(v195 - 2, v194));
        }
        if (v133)
          *a9 = 1;
      }
      else
      {
        if (!v493 || (*((_BYTE *)v493 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v493, v78);
        v87 = (uint64_t *)*((_QWORD *)v81 + 3);
        MEMORY[0x2348B274C](__p, "Preliminary_Text");
        v88 = *v87;
        v89 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        if (((uint64_t)__p[0] & 7) != 0)
        {
          do
            v90 = __ldxr(v89);
          while (__stlxr(v90 - 2, v89));
        }
        if ((unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8) == v89)
          gatherTextShapeInputs(&v492, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v460, (uint64_t *)&v463);
        else
          gatherPrimitiveShapeInputs((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)&v492, &v460, (uint64_t *)&v463);
      }
LABEL_509:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v488);
      v251 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v251)
        v251 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v251 + 224));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      *((_QWORD *)&v520 + 1) = 0;
      *(_QWORD *)&v521 = 0;
      *(_QWORD *)&v520 = (char *)&v520 + 8;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v492, __p);
      v252 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      if (v410 == v252)
        v253 = -1;
      else
        v253 = *((_DWORD *)v252 + 10);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v492, __p);
      v254 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v254)
        v254 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v254 + 280));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      __p[1] = &unk_24FDE9B5B;
      LODWORD(__p[0]) = v253;
      TgBase::emitConstant(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v532, (const pxrInternal__aapl__pxrReserved__::VtValue *)__p);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
      MEMORY[0x2348B274C](v513, "meshMaterialIndex");
      __p[0] = v513[0];
      v513[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p[1], &v532);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p[1] + 1, &v533);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t **)&v520, (uint64_t *)__p, (uint64_t)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      v255 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[1]);
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v256 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v257 = __ldxr(v256);
        while (__stlxr(v257 - 2, v256));
      }
      if (((uint64_t)v513[0] & 7) != 0)
      {
        v258 = (unsigned int *)((unint64_t)v513[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v259 = __ldxr(v258);
        while (__stlxr(v259 - 2, v258));
      }
      v551 = 0;
      v550 = 0;
      v552 = 0;
      UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v255);
      v262 = *(_QWORD *)UsdPrimDefaultPredicate;
      v261 = *(_QWORD *)(UsdPrimDefaultPredicate + 8);
      v263 = *(_QWORD *)(UsdPrimDefaultPredicate + 16);
      if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
        && ((v262 & 0x2000) != 0 || (v261 & 0x2000) == 0))
      {
        v262 |= 0x2000uLL;
        v261 &= ~0x2000uLL;
      }
      v513[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v262;
      v513[1] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v261;
      *(_QWORD *)&v514 = v263;
      pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v492, (uint64_t *)v513, (uint64_t)__p);
      v513[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)__p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v513[1], &__p[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v513[1] + 1, (_DWORD *)&__p[1] + 1);
      v514 = *(_OWORD *)&__p[2];
      v557[0] = *((void **)&v565 + 1);
      *(_QWORD *)&v515 = v565;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v557[1], v566);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v557[1] + 1, (_DWORD *)v566 + 1);
      v558 = *(_OWORD *)((char *)v566 + 8);
      *(_QWORD *)&v559 = *((_QWORD *)&v566[1] + 1);
      while (v513[0] != v557[0]
           || v513[1] != v557[1]
           || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v514, (uint64_t)&v558))
      {
        v264 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)v513, (uint64_t)&v554);
        pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v264);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v546 = v408;
          pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)&v546);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v561, &v527);
          if ((BYTE8(v562) & 7) != 0)
          {
            v265 = (unsigned int *)(*((_QWORD *)&v562 + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v266 = __ldxr(v265);
            while (__stlxr(v266 - 2, v265));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v562);
          if (v561[1])
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v561[1]);
          v267 = v551;
          if ((unint64_t)v551 >= v552)
          {
            v268 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v550, &v527);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v551, &v527);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v267 + 1, &v528);
            v268 = v267 + 2;
          }
          v551 = v268;
          v561[1] = 0;
          v561[0] = 0;
          *(_QWORD *)&v562 = 0;
          v269 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
          if (!v269)
            v269 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
          v270 = *((_QWORD *)v269 + 20) & 0xFFFFFFFFFFFFFFF8;
          if (v270)
          {
            v271 = (char *)(v270 + 16);
            if (*(char *)(v270 + 39) < 0)
              v271 = *(char **)v271;
          }
          else
          {
            v271 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&v542, v271);
          MEMORY[0x2348B26F8](v519, &v542);
          TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v527, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v561, (pxrInternal__aapl__pxrReserved__::SdfPath *)v519);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v519);
          if ((v544[7] & 0x80000000) != 0)
            operator delete(v542);
          v542 = v561;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v542);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v554, &v542);
          NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v542);
          std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>((uint64_t)v561, NameToken, &v527);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t **)&v520, (uint64_t *)v561, (uint64_t)v561);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v561[1]);
          if (((uint64_t)v561[0] & 7) != 0)
          {
            v273 = (unsigned int *)((unint64_t)v561[0] & 0xFFFFFFFFFFFFFFF8);
            do
              v274 = __ldxr(v273);
            while (__stlxr(v274 - 2, v273));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v542);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v554, v561);
          v275 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v561);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v561);
          if (v410 != v275)
          {
            v276 = *((_DWORD *)v275 + 10);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v554, v561);
            v277 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
            if (!v277)
              v277 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v561, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v277 + 280));
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v561);
            v561[1] = &unk_24FDE9B5B;
            LODWORD(v561[0]) = v276;
            TgBase::emitConstant(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v519, (const pxrInternal__aapl__pxrReserved__::VtValue *)v561);
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v561);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v554, &v455);
            Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v455);
            v279 = (char *)Name;
            if (*(char *)(Name + 23) >= 0)
              v280 = *(unsigned __int8 *)(Name + 23);
            else
              v280 = *(_QWORD *)(Name + 8);
            std::string::basic_string[abi:ne180100]((uint64_t)v561, v280 + 15);
            if ((SBYTE7(v562) & 0x80u) == 0)
              v281 = v561;
            else
              v281 = (void **)v561[0];
            if (v280)
            {
              if (v279[23] >= 0)
                v282 = v279;
              else
                v282 = *(char **)v279;
              memmove(v281, v282, v280);
            }
            strcpy((char *)v281 + v280, "_materialOffset");
            MEMORY[0x2348B2764](&v508, v561);
            v542 = (void *)v508;
            v508 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v543, v519);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v543 + 1, (_DWORD *)v519 + 1);
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t **)&v520, (uint64_t *)&v542, (uint64_t)&v542);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v543);
            if ((v542 & 7) != 0)
            {
              v283 = (unsigned int *)((unint64_t)v542 & 0xFFFFFFFFFFFFFFF8);
              do
                v284 = __ldxr(v283);
              while (__stlxr(v284 - 2, v283));
            }
            if ((v508 & 7) != 0)
            {
              v285 = (unsigned int *)(v508 & 0xFFFFFFFFFFFFFFF8);
              do
                v286 = __ldxr(v285);
              while (__stlxr(v286 - 2, v285));
            }
            if (SBYTE7(v562) < 0)
              operator delete(v561[0]);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v455);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v519);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v527);
          MEMORY[0x2348B1D44](&v546);
        }
        if ((BYTE8(v555) & 7) != 0)
        {
          v287 = (unsigned int *)(*((_QWORD *)&v555 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v288 = __ldxr(v287);
          while (__stlxr(v288 - 2, v287));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v555);
        if (*((_QWORD *)&v554 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v554 + 1));
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)v513);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v557[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v513[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v566);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[1]);
      v289 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v463;
      v290 = v464;
      while (v289 != (const pxrInternal__aapl__pxrReserved__::SdfPath *)v290)
      {
        if (!std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v461, v289))
        {
          memset(__p, 0, 24);
          v291 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
          if (!v291)
            v291 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
          v292 = *((_QWORD *)v291 + 20) & 0xFFFFFFFFFFFFFFF8;
          if (v292)
          {
            v293 = (char *)(v292 + 16);
            if (*(char *)(v292 + 39) < 0)
              v293 = *(char **)v293;
          }
          else
          {
            v293 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(v513, v293);
          MEMORY[0x2348B26F8](v557, v513);
          TgBase::emitTarget((uint64_t)a2, v289, (const pxrInternal__aapl__pxrReserved__::SdfPath **)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)v557);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v557);
          if (SBYTE7(v514) < 0)
            operator delete(v513[0]);
          v513[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)__p;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v513);
        }
        v289 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v289 + 8);
      }
      TgBase::emitGroup((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v537, &v520);
      v294 = v464;
      if ((unint64_t)v464 >= v465)
      {
        v295 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v463, &v537);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, &v537);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v294 + 1, &v538);
        v295 = v294 + 8;
      }
      v464 = v295;
      if (!v405)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v513, &v488);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v513 + 1, &v489);
        v513[1] = 0;
        v514 = 0uLL;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(&v513[1], v463, v464, (v464 - v463) >> 3);
        v296 = v460 & 0xFFFFFFFFFFFFFFF8;
        if ((v460 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v297 = (char *)(v296 + 16);
          if (*(char *)(v296 + 39) < 0)
            v297 = *(char **)v297;
        }
        else
        {
          v297 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(v557, v297);
        MEMORY[0x2348B26F8](&v515, v557);
        v298 = v506.i64[1];
        if (v506.i64[1] >= v507[0])
        {
          v300 = 0xCCCCCCCCCCCCCCCDLL * ((v506.i64[1] - v506.i64[0]) >> 3);
          v301 = v300 + 1;
          if (v300 + 1 > 0x666666666666666)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((v507[0] - v506.i64[0]) >> 3) > v301)
            v301 = 0x999999999999999ALL * ((v507[0] - v506.i64[0]) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((v507[0] - v506.i64[0]) >> 3) >= 0x333333333333333)
            v302 = 0x666666666666666;
          else
            v302 = v301;
          *(_QWORD *)&v565 = v507;
          v406 = v302;
          if (v302)
          {
            if (v302 > 0x666666666666666)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v303 = (char *)operator new(40 * v302);
          }
          else
          {
            v303 = 0;
          }
          v403 = v303;
          v304 = (uint64_t)&v303[40 * v300];
          std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v304, (uint64_t)v513);
          v305 = v506.i64[1];
          v306 = v506.i64[0];
          if (v506.i64[1] == v506.i64[0])
          {
            v308 = vdupq_n_s64(v506.u64[1]);
            v307 = v304;
          }
          else
          {
            v307 = v304;
            do
            {
              v307 -= 40;
              v305 -= 40;
              std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v307, v305);
            }
            while (v305 != v306);
            v308 = v506;
          }
          v299 = v304 + 40;
          v506.i64[0] = v307;
          v506.i64[1] = v299;
          *(int64x2_t *)&__p[1] = v308;
          v309 = (void *)v507[0];
          v507[0] = &v403[40 * v406];
          __p[3] = v309;
          __p[0] = (void *)v308.i64[0];
          std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)__p);
        }
        else
        {
          std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v506.i64[1], (uint64_t)v513);
          v299 = v298 + 40;
        }
        v506.i64[1] = v299;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v515);
        __p[0] = &v513[1];
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v513);
        if (SBYTE7(v558) < 0)
          operator delete(v557[0]);
      }
      __p[0] = &v550;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v532);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v520, *((_QWORD **)&v520 + 1));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v537);
      if ((v460 & 7) != 0)
      {
        v310 = (unsigned int *)(v460 & 0xFFFFFFFFFFFFFFF8);
        do
          v311 = __ldxr(v310);
        while (__stlxr(v311 - 2, v310));
      }
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v461, v462[0]);
      __p[0] = &v463;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v480, v481[0]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v482);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v483);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v484);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v486);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v488);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v490);
      if ((v496 & 7) != 0)
      {
        v312 = (unsigned int *)(v496 & 0xFFFFFFFFFFFFFFF8);
        do
          v313 = __ldxr(v312);
        while (__stlxr(v313 - 2, v312));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v494);
      if (v493)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v493);
      v10 = *a4;
      if (++v407 >= (unint64_t)((a4[1] - *a4) >> 3))
        goto LABEL_630;
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v459[0] = v397;
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v459);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v455, __p);
    v79 = v464;
    if ((unint64_t)v464 >= v465)
    {
      v80 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, __p);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, __p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v79 + 1, (_DWORD *)__p + 1);
      v80 = v79 + 8;
    }
    v464 = v80;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)v459);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v451))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v451, __p);
      v91 = v464;
      if ((unint64_t)v464 >= v465)
      {
        v92 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, __p);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, __p);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v91 + 1, (_DWORD *)__p + 1);
        v92 = v91 + 8;
      }
      v464 = v92;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v451, v557);
      std::string::basic_string[abi:ne180100]<0>(__p, "interpolation");
      v93 = v464;
      if ((unint64_t)v464 >= v465)
      {
        v94 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, v513);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, v513);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v93 + 1, (_DWORD *)v513 + 1);
        v94 = v93 + 8;
      }
      v464 = v94;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v513);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v557);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v459);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v447, __p);
    v95 = v464;
    if ((unint64_t)v464 >= v465)
    {
      v96 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, __p);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, __p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v95 + 1, (_DWORD *)__p + 1);
      v96 = v95 + 8;
    }
    v464 = v96;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v459);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v443, __p);
    v97 = v464;
    if ((unint64_t)v464 >= v465)
    {
      v98 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, __p);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, __p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v97 + 1, (_DWORD *)__p + 1);
      v98 = v97 + 8;
    }
    v464 = v98;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetOrientationAttr((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v459);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v439))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v439, __p);
      v99 = v464;
      if ((unint64_t)v464 >= v465)
      {
        v100 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, __p);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, __p);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v99 + 1, (_DWORD *)__p + 1);
        v100 = v99 + 8;
      }
      v464 = v100;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v438 = 0;
    v436 = MEMORY[0x24BEE9DB0] + 16;
    if (v437 && (*(_BYTE *)(v437 + 57) & 8) == 0 && v395(&v436))
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v436);
      v101 = v513[0];
      v102 = v513[1];
      v402 = v513[1];
      while (v101 != v102)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v101, __p);
        v103 = v464;
        if ((unint64_t)v464 >= v465)
        {
          v104 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, __p);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, __p);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v103 + 1, (_DWORD *)__p + 1);
          v104 = v103 + 8;
        }
        v464 = v104;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v101, &v554);
        std::string::basic_string[abi:ne180100]<0>(__p, "interpolation");
        v105 = v464;
        if ((unint64_t)v464 >= v465)
        {
          v106 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, v557);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, v557);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v105 + 1, (_DWORD *)v557 + 1);
          v106 = v105 + 8;
        }
        v464 = v106;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v557);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v554);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v101, &v554);
        std::string::basic_string[abi:ne180100]<0>(__p, "elementSize");
        v107 = v464;
        if ((unint64_t)v464 >= v465)
        {
          v108 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, v557);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, v557);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v107 + 1, (_DWORD *)v557 + 1);
          v108 = v107 + 8;
        }
        v464 = v108;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v557);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v554);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v101, &v554);
        std::string::basic_string[abi:ne180100]<0>(__p, "__typeName");
        v109 = v464;
        if ((unint64_t)v464 >= v465)
        {
          v110 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, v557);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, v557);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v109 + 1, (_DWORD *)v557 + 1);
          v110 = v109 + 8;
        }
        v464 = v110;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v557);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v554);
        v111 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v101);
        if ((*(_QWORD *)v111 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (*(_QWORD *)v111 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v111);
        if (*(char *)(EmptyString + 23) >= 0)
          v113 = *(unsigned __int8 *)(EmptyString + 23);
        else
          v113 = *(_QWORD *)(EmptyString + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)v557, v113 + 8);
        if ((SBYTE7(v558) & 0x80u) == 0)
          v114 = v557;
        else
          v114 = (void **)v557[0];
        if (v113)
        {
          if (*(char *)(EmptyString + 23) >= 0)
            v115 = (const void *)EmptyString;
          else
            v115 = *(const void **)EmptyString;
          memmove(v114, v115, v113);
        }
        strcpy((char *)v114 + v113, ":indices");
        MEMORY[0x2348B2764](&v554, v557);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v492, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v554);
        if ((v554 & 7) != 0)
        {
          v116 = (unsigned int *)(v554 & 0xFFFFFFFFFFFFFFF8);
          do
            v117 = __ldxr(v116);
          while (__stlxr(v117 - 2, v116));
        }
        if (SBYTE7(v558) < 0)
          operator delete(v557[0]);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)__p))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)__p, v557);
          v118 = v464;
          if ((unint64_t)v464 >= v465)
          {
            v119 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, v557);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, v557);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v118 + 1, (_DWORD *)v557 + 1);
            v119 = v118 + 8;
          }
          v464 = v119;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v557);
        }
        if (((uint64_t)__p[3] & 7) != 0)
        {
          v120 = (unsigned int *)((unint64_t)__p[3] & 0xFFFFFFFFFFFFFFF8);
          do
            v121 = __ldxr(v120);
          while (__stlxr(v121 - 2, v120));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[2]);
        if (__p[1])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p[1]);
        v101 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v101 + 48);
        v102 = v402;
      }
      __p[0] = v513;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    MEMORY[0x2348B274C](&v435, "primvars:st");
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    __p[3] = 0;
    __p[0] = v396;
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)__p);
    v135 = (uint64_t *)v557[0];
    v136 = (uint64_t *)v557[1];
    if (v557[0] == v557[1])
    {
    }
    else
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v513, v135 + 1, (_DWORD *)v135 + 4);
        if ((BYTE8(v514) & 7) != 0)
        {
          v137 = (unsigned int *)(*((_QWORD *)&v514 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v138 = __ldxr(v137);
          while (__stlxr(v138 - 2, v137));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v514);
        if (v513[1])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v513[1]);
        if (v434 < 0)
        {
          if (v433)
            goto LABEL_244;
          operator delete(v432);
        }
        else if (v434)
        {
          goto LABEL_244;
        }
        v135 += 3;
      }
      while (v135 != v136);
      std::string::basic_string[abi:ne180100]<0>(&v432, "");
    }
LABEL_244:
    v513[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)v557;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)v513);
    MEMORY[0x2348B24C4](__p);
    if (v434 < 0)
    {
      if (!v433)
        goto LABEL_253;
      v139 = v432;
    }
    else
    {
      if (!v434)
        goto LABEL_253;
      v139 = &v432;
    }
    MEMORY[0x2348B274C](__p, v139);
    if ((v435 & 7) != 0)
    {
      v140 = (unsigned int *)(v435 & 0xFFFFFFFFFFFFFFF8);
      do
        v141 = __ldxr(v140);
      while (__stlxr(v141 - 2, v140));
    }
    v435 = (unint64_t)__p[0];
LABEL_253:
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    __p[3] = 0;
    __p[0] = (void *)(MEMORY[0x24BEE9DB0] + 16);
    memset(&v431, 0, sizeof(v431));
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)__p);
    v142 = v513[0];
    v143 = v513[1];
    while (v142 != v143)
    {
      v561[0] = (void *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v142);
      *(_QWORD *)&v554 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v561);
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      v561[0] = (void *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v142);
      *(_QWORD *)&v554 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v561);
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      v561[0] = (void *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v142);
      *(_QWORD *)&v554 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v561);
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_300;
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
LABEL_300:
        v159 = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v142);
        if ((*v159 & 0xFFFFFFFFFFFFFFF8) == (v435 & 0xFFFFFFFFFFFFFFF8))
        {
          v163 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v142);
          if ((*(_QWORD *)v163 & 0xFFFFFFFFFFFFFFF8) != 0)
            v164 = (const std::string *)((*(_QWORD *)v163 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            v164 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v163);
          std::string::operator=(&v431, v164);
          break;
        }
        size = HIBYTE(v431.__r_.__value_.__r.__words[2]);
        if ((v431.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v431.__r_.__value_.__l.__size_;
        if (!size)
        {
          v161 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v142);
          if ((*(_QWORD *)v161 & 0xFFFFFFFFFFFFFFF8) != 0)
            v162 = (const std::string *)((*(_QWORD *)v161 & 0xFFFFFFFFFFFFFFF8) + 16);
          else
            v162 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v161);
          std::string::operator=(&v431, v162);
        }
      }
      v142 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)((char *)v142 + 48);
    }
    v557[0] = v513;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100]((void ***)v557);
    MEMORY[0x2348B21DC](__p);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v492, __p);
    MEMORY[0x2348B274C](v513, "__defaultUV");
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)v513);
    if (((uint64_t)v513[0] & 7) != 0)
    {
      v165 = (unsigned int *)((unint64_t)v513[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v166 = __ldxr(v165);
      while (__stlxr(v166 - 2, v165));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    v167 = HIBYTE(v431.__r_.__value_.__r.__words[2]);
    if ((v431.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v167 = v431.__r_.__value_.__l.__size_;
    if (!v167)
      MEMORY[0x2348B4AD4](&v431, "primvars:st");
    MEMORY[0x2348B2764](v513, &v431);
    __p[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
           + 1;
    __p[0] = v513[0];
    if (((uint64_t)v513[0] & 7) != 0)
    {
      v168 = (unsigned int *)((unint64_t)v513[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v169 = __ldxr(v168);
      while (__stxr(v169 + 2, v168));
      if ((v169 & 1) == 0)
        __p[0] = (void *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    }
    TgBase::emitConstant(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v429, (const pxrInternal__aapl__pxrReserved__::VtValue *)__p);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
    if (((uint64_t)v513[0] & 7) != 0)
    {
      v170 = (unsigned int *)((unint64_t)v513[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v171 = __ldxr(v170);
      while (__stlxr(v171 - 2, v170));
    }
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v461, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v429, &v429);
    v172 = v464;
    if ((unint64_t)v464 >= v465)
    {
      v173 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v463, &v429);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, &v429);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v172 + 1, &v430);
      v173 = v172 + 8;
    }
    v464 = v173;
    v174 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a6, v400);
    v175 = v174;
    if ((_QWORD *)(a6 + 8) != v174)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v427, (_DWORD *)v174 + 9);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v428, (_DWORD *)v175 + 10);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a3);
      v176 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)__p);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v176, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v427);
      v177 = __p[1];
      if (__p[1])
      {
        v178 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v179 = __ldxr(v178);
          v180 = v179 - 1;
        }
        while (__stlxr(v180, v178));
        if (!v180)
          (*(void (**)(void *))(*(_QWORD *)v177 + 8))(v177);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v422 = MEMORY[0x24BEE9D50] + 16;
      if (v423 && (*(_BYTE *)(v423 + 57) & 8) == 0 && v392(&v422))
      {
        v417 = (int)v492;
        v418 = v493;
        if (v493)
        {
          v181 = (unint64_t *)((char *)v493 + 48);
          do
            v182 = __ldxr(v181);
          while (__stxr(v182 + 1, v181));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v419, &v494);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v420, &v495);
        v421 = v496;
        if ((v496 & 7) != 0)
        {
          v183 = (unsigned int *)(v496 & 0xFFFFFFFFFFFFFFF8);
          do
            v184 = __ldxr(v183);
          while (__stxr(v184 + 2, v183));
          if ((v184 & 1) == 0)
            v421 &= 0xFFFFFFFFFFFFFFF8;
        }
        MEMORY[0x2348B1C0C](v525);
        pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Find();
        pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v525, (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v422);
        if (v557[0])
        {
          v522 = 0;
          v521 = 0u;
          v520 = 0u;
          pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)v557);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v520);
          v520 = *(_OWORD *)__p;
          v521 = *(_OWORD *)&__p[2];
          memset(__p, 0, sizeof(__p));
          v522 = v565;
          *(_QWORD *)&v565 = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(__p);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v519[3] = 0;
          v519[0] = v390;
          MEMORY[0x2348B2290](v513);
          LODWORD(v508) = v417;
          v509 = v418;
          if (v418)
          {
            v185 = (unint64_t *)((char *)v418 + 48);
            do
              v186 = __ldxr(v185);
            while (__stxr(v186 + 1, v185));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v510, &v419);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v511, &v420);
          v512 = v421;
          if ((v421 & 7) != 0)
          {
            v187 = (unsigned int *)(v421 & 0xFFFFFFFFFFFFFFF8);
            do
              v188 = __ldxr(v187);
            while (__stxr(v188 + 2, v187));
            if ((v188 & 1) == 0)
              v512 &= 0xFFFFFFFFFFFFFFF8;
          }
          if (v524
            && (*(_BYTE *)(v524 + 57) & 8) == 0
            && (v189 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(uint64_t *))(v523 + 32))(&v523),
                (_DWORD)v189))
          {
            v190 = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v189);
            v191 = *(_OWORD *)v190;
            *(_QWORD *)&v555 = *(_QWORD *)(v190 + 16);
            v554 = v191;
            pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate();
            pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)v525, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v508);
            pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::operator=((uint64_t)v513, (uint64_t)__p);
            pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)__p);
          }
          else
          {
            v554 = v520;
            v555 = v521;
            v556 = v522;
            if (v522)
            {
              v196 = (unint64_t *)(v522 - 16);
              if (*((_QWORD *)&v555 + 1))
                v196 = (unint64_t *)*((_QWORD *)&v555 + 1);
              do
                v197 = __ldxr(v196);
              while (__stxr(v197 + 1, v196));
            }
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v519);
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v519);
            pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v519);
            v563 = 0;
            v562 = 0u;
            *(_OWORD *)v561 = 0u;
            v537 = 3;
            v539 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            v541 = 0;
            v532 = 3;
            v534 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            v536 = 0;
            v527 = 4;
            v529 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            v531 = 0;
            pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery();
            pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::operator=((uint64_t)v513, (uint64_t)__p);
            pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)__p);
            if ((v531 & 7) != 0)
            {
              v198 = (unsigned int *)(v531 & 0xFFFFFFFFFFFFFFF8);
              do
                v199 = __ldxr(v198);
              while (__stlxr(v199 - 2, v198));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v530);
            if (v529)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v529);
            if ((v536 & 7) != 0)
            {
              v200 = (unsigned int *)(v536 & 0xFFFFFFFFFFFFFFF8);
              do
                v201 = __ldxr(v200);
              while (__stlxr(v201 - 2, v200));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v535);
            if (v534)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v534);
            if ((v541 & 7) != 0)
            {
              v202 = (unsigned int *)(v541 & 0xFFFFFFFFFFFFFFF8);
              do
                v203 = __ldxr(v202);
              while (__stlxr(v203 - 2, v202));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v540);
            if (v539)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v539);
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v561);
            if ((v545 & 7) != 0)
            {
              v204 = (unsigned int *)(v545 & 0xFFFFFFFFFFFFFFF8);
              do
                v205 = __ldxr(v204);
              while (__stlxr(v205 - 2, v204));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v544);
            if (v543)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v543);
            if ((v549 & 7) != 0)
            {
              v206 = (unsigned int *)(v549 & 0xFFFFFFFFFFFFFFF8);
              do
                v207 = __ldxr(v206);
              while (__stlxr(v207 - 2, v206));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v548);
            if (v547)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v547);
            if ((v553 & 7) != 0)
            {
              v208 = (unsigned int *)(v553 & 0xFFFFFFFFFFFFFFF8);
              do
                v209 = __ldxr(v208);
              while (__stlxr(v209 - 2, v208));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v552);
            if (v551)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v551);
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v554);
          }
          if ((v512 & 7) != 0)
          {
            v210 = (unsigned int *)(v512 & 0xFFFFFFFFFFFFFFF8);
            do
              v211 = __ldxr(v210);
            while (__stlxr(v211 - 2, v210));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v510);
          if (v509)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v509);
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v513))
          {
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v517))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v517, __p);
              v212 = v464;
              if ((unint64_t)v464 >= v465)
              {
                v213 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, __p);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, __p);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v212 + 1, (_DWORD *)__p + 1);
                v213 = v212 + 8;
              }
              v464 = v213;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v517, v561);
              std::string::basic_string[abi:ne180100]<0>(__p, "elementSize");
              v214 = v464;
              if ((unint64_t)v464 >= v465)
              {
                v215 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, &v554);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, &v554);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v214 + 1, (_DWORD *)&v554 + 1);
                v215 = v214 + 8;
              }
              v464 = v215;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v554);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v561);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v517, v561);
              std::string::basic_string[abi:ne180100]<0>(__p, "interpolation");
              v216 = v464;
              if ((unint64_t)v464 >= v465)
              {
                v217 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, &v554);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, &v554);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v216 + 1, (_DWORD *)&v554 + 1);
                v217 = v216 + 8;
              }
              v464 = v217;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v554);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v561);
            }
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v516))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v516, __p);
              v218 = v464;
              if ((unint64_t)v464 >= v465)
              {
                v219 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, __p);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, __p);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v218 + 1, (_DWORD *)__p + 1);
                v219 = v218 + 8;
              }
              v464 = v219;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v516, v561);
              std::string::basic_string[abi:ne180100]<0>(__p, "elementSize");
              v220 = v464;
              if ((unint64_t)v464 >= v465)
              {
                v221 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, &v554);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, &v554);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v220 + 1, (_DWORD *)&v554 + 1);
                v221 = v220 + 8;
              }
              v464 = v221;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v554);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v561);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v516, v561);
              std::string::basic_string[abi:ne180100]<0>(__p, "interpolation");
              v222 = v464;
              if ((unint64_t)v464 >= v465)
              {
                v223 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, &v554);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, &v554);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v222 + 1, (_DWORD *)&v554 + 1);
                v223 = v222 + 8;
              }
              v464 = v223;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v554);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v561);
            }
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v518))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v518, __p);
              v224 = v464;
              if ((unint64_t)v464 >= v465)
              {
                v225 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, __p);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, __p);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v224 + 1, (_DWORD *)__p + 1);
                v225 = v224 + 8;
              }
              v464 = v225;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
            }
            MEMORY[0x2348B274C](v561, "skel:skeleton");
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v417, (const pxrInternal__aapl__pxrReserved__::TfToken *)v561);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)__p, &v554);
            v226 = v464;
            if ((unint64_t)v464 >= v465)
            {
              v227 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v463, &v554);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v464, &v554);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v226 + 1, (_DWORD *)&v554 + 1);
              v227 = v226 + 8;
            }
            v464 = v227;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v554);
            if (((uint64_t)__p[3] & 7) != 0)
            {
              v228 = (unsigned int *)((unint64_t)__p[3] & 0xFFFFFFFFFFFFFFF8);
              do
                v229 = __ldxr(v228);
              while (__stlxr(v229 - 2, v228));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[2]);
            if (__p[1])
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p[1]);
            if (((uint64_t)v561[0] & 7) != 0)
            {
              v230 = (unsigned int *)((unint64_t)v561[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v231 = __ldxr(v230);
              while (__stlxr(v231 - 2, v230));
            }
          }
          pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery((pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)v513);
          MEMORY[0x2348B217C](v519);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v520);
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v559);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr((unsigned int **)&v557[1]);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr((unsigned int **)v557);
        MEMORY[0x2348B1B1C](&v523);
        v232 = v526;
        if (v526)
        {
          p_shared_owners = (unint64_t *)&v526->__shared_owners_;
          do
            v234 = __ldaxr(p_shared_owners);
          while (__stlxr(v234 - 1, p_shared_owners));
          if (!v234)
          {
            ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
            std::__shared_weak_count::__release_weak(v232);
          }
        }
        if ((v421 & 7) != 0)
        {
          v235 = (unsigned int *)(v421 & 0xFFFFFFFFFFFFFFF8);
          do
            v236 = __ldxr(v235);
          while (__stlxr(v236 - 2, v235));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v419);
        if (v418)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v418);
        std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v498, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v427, &v427);
      }
      MEMORY[0x2348B1F9C](&v422);
      if ((v426 & 7) != 0)
      {
        v237 = (unsigned int *)(v426 & 0xFFFFFFFFFFFFFFF8);
        do
          v238 = __ldxr(v237);
        while (__stlxr(v238 - 2, v237));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v425);
      if (v424)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v424);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v427);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v429);
    if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v431.__r_.__value_.__l.__data_);
    if (v434 < 0)
      operator delete(v432);
    if ((v435 & 7) != 0)
    {
      v239 = (unsigned int *)(v435 & 0xFFFFFFFFFFFFFFF8);
      do
        v240 = __ldxr(v239);
      while (__stlxr(v240 - 2, v239));
    }
    MEMORY[0x2348B21DC](&v436);
    if ((v442 & 7) != 0)
    {
      v241 = (unsigned int *)(v442 & 0xFFFFFFFFFFFFFFF8);
      do
        v242 = __ldxr(v241);
      while (__stlxr(v242 - 2, v241));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v441);
    if (v440)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v440);
    if ((v446 & 7) != 0)
    {
      v243 = (unsigned int *)(v446 & 0xFFFFFFFFFFFFFFF8);
      do
        v244 = __ldxr(v243);
      while (__stlxr(v244 - 2, v243));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v445);
    if (v444)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v444);
    if ((v450 & 7) != 0)
    {
      v245 = (unsigned int *)(v450 & 0xFFFFFFFFFFFFFFF8);
      do
        v246 = __ldxr(v245);
      while (__stlxr(v246 - 2, v245));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v449);
    if (v448)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v448);
    if ((v454 & 7) != 0)
    {
      v247 = (unsigned int *)(v454 & 0xFFFFFFFFFFFFFFF8);
      do
        v248 = __ldxr(v247);
      while (__stlxr(v248 - 2, v247));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v453);
    if (v452)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v452);
    if ((v458 & 7) != 0)
    {
      v249 = (unsigned int *)(v458 & 0xFFFFFFFFFFFFFFF8);
      do
        v250 = __ldxr(v249);
      while (__stlxr(v250 - 2, v249));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v457);
    if (v456)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v456);
    MEMORY[0x2348B1AF8](v459);
    goto LABEL_509;
  }
LABEL_630:
  v314 = v498;
  if (v498 != (uint64_t *)v499)
  {
    v315 = &v538;
    v316 = (_DWORD *)&v562 + 1;
    v317 = (_DWORD *)&v554 + 1;
    v409 = MEMORY[0x24BEE9D50] + 16;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v537, (_DWORD *)v314 + 7);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v315, (_DWORD *)v314 + 8);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a3);
      v318 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)__p);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v318, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v537);
      v319 = __p[1];
      if (__p[1])
      {
        v320 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v321 = __ldxr(v320);
          v322 = v321 - 1;
        }
        while (__stlxr(v322, v320));
        if (!v322)
          (*(void (**)(void *))(*(_QWORD *)v319 + 8))(v319);
      }
      v412 = (int)v561[0];
      v413 = v561[1];
      if (v561[1])
      {
        v323 = (unint64_t *)((char *)v561[1] + 48);
        do
          v324 = __ldxr(v323);
        while (__stxr(v324 + 1, v323));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v414, &v562);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v415, v316);
      v416 = *((_QWORD *)&v562 + 1);
      if ((BYTE8(v562) & 7) != 0)
      {
        v325 = (unsigned int *)(*((_QWORD *)&v562 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v326 = __ldxr(v325);
        while (__stxr(v326 + 2, v325));
        if ((v326 & 1) == 0)
          v416 &= 0xFFFFFFFFFFFFFFF8;
      }
      v327 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v327)
        v327 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      TgECS::genECSPath((TgECS *)&v532, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v412, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v327 + 184));
      v520 = 0uLL;
      *(_QWORD *)&v521 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v550 = v409;
      MEMORY[0x2348B1C0C](&v546);
      pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v546, (const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v550);
      if (__p[0])
      {
        *(_QWORD *)&v515 = 0;
        v514 = 0u;
        *(_OWORD *)v513 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder((pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *)__p);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v513);
        *(_OWORD *)v513 = *(_OWORD *)v557;
        v514 = v558;
        *(_OWORD *)v557 = 0u;
        v558 = 0u;
        *(_QWORD *)&v515 = v559;
        *(_QWORD *)&v559 = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v557);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v550);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v557, &v471);
        v328 = *((_QWORD *)&v520 + 1);
        if (*((_QWORD *)&v520 + 1) >= (unint64_t)v521)
        {
          v329 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v520, &v471);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v520 + 1), &v471);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v328 + 4), (_DWORD *)&v471 + 1);
          v329 = v328 + 8;
        }
        *((_QWORD *)&v520 + 1) = v329;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v471);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v550);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v471, &v554);
        v330 = *((_QWORD *)&v520 + 1);
        if (*((_QWORD *)&v520 + 1) >= (unint64_t)v521)
        {
          v331 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v520, &v554);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v520 + 1), &v554);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v330 + 4), v317);
          v331 = v330 + 8;
        }
        *((_QWORD *)&v520 + 1) = v331;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v554);
        pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr((pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)&v550);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v554, &v542);
        v332 = *((_QWORD *)&v520 + 1);
        if (*((_QWORD *)&v520 + 1) >= (unint64_t)v521)
        {
          v333 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v520, &v542);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v520 + 1), &v542);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v332 + 4), (_DWORD *)&v542 + 1);
          v333 = v332 + 8;
        }
        *((_QWORD *)&v520 + 1) = v333;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v542);
        if ((BYTE8(v555) & 7) != 0)
        {
          v334 = (unsigned int *)(*((_QWORD *)&v555 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v335 = __ldxr(v334);
          while (__stlxr(v335 - 2, v334));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v555);
        if (*((_QWORD *)&v554 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v554 + 1));
        if ((BYTE8(v472) & 7) != 0)
        {
          v336 = (unsigned int *)(*((_QWORD *)&v472 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v337 = __ldxr(v336);
          while (__stlxr(v337 - 2, v336));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v472);
        if (*((_QWORD *)&v471 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v471 + 1));
        if ((BYTE8(v558) & 7) != 0)
        {
          v338 = (unsigned int *)(*((_QWORD *)&v558 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v339 = __ldxr(v338);
          while (__stlxr(v339 - 2, v338));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v558);
        if (v557[1])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v557[1]);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v513);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v565);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr((unsigned int **)&__p[1]);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_SkelDefinition>::~TfRefPtr((unsigned int **)__p);
      v340 = v547;
      if (v547)
      {
        v341 = (unint64_t *)&v547->__shared_owners_;
        do
          v342 = __ldaxr(v341);
        while (__stlxr(v342 - 1, v341));
        if (!v342)
        {
          ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
          std::__shared_weak_count::__release_weak(v340);
        }
      }
      v343 = v316;
      v344 = v317;
      v345 = v315;
      v346 = (_DWORD *)*((_QWORD *)&v520 + 1);
      for (i = (_DWORD *)v520; i != v346; i += 2)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v557, i);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v557 + 1, i + 1);
        memset(__p, 0, 24);
        v348 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
        if (!v348)
          v348 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
        v349 = *((_QWORD *)v348 + 20) & 0xFFFFFFFFFFFFFFF8;
        if (v349)
        {
          v350 = (char *)(v349 + 16);
          if (*(char *)(v349 + 39) < 0)
            v350 = *(char **)v350;
        }
        else
        {
          v350 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(v513, v350);
        MEMORY[0x2348B26F8](&v471, v513);
        TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v557, (const pxrInternal__aapl__pxrReserved__::SdfPath **)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v471);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v471);
        if (SBYTE7(v514) < 0)
          operator delete(v513[0]);
        v513[0] = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)__p;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v513);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v557);
      }
      v351 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v351)
        v351 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v352 = *((_QWORD *)v351 + 37) & 0xFFFFFFFFFFFFFFF8;
      if (v352)
      {
        v353 = (char *)(v352 + 16);
        if (*(char *)(v352 + 39) < 0)
          v353 = *(char **)v353;
      }
      else
      {
        v353 = "";
      }
      v315 = v345;
      std::string::basic_string[abi:ne180100]<0>(__p, v353);
      MEMORY[0x2348B26F8](v513, __p);
      TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v532, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v520, (pxrInternal__aapl__pxrReserved__::SdfPath *)v513);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v513);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      MEMORY[0x2348B1F9C](&v550);
      __p[0] = &v520;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v354 = v504;
      if ((unint64_t)v504 >= v505)
      {
        v355 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v503, &v532);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v504, &v532);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v354 + 1, &v533);
        v355 = v354 + 8;
      }
      v317 = v344;
      v504 = v355;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      v316 = v343;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v532);
      if ((v416 & 7) != 0)
      {
        v356 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFF8);
        do
          v357 = __ldxr(v356);
        while (__stlxr(v357 - 2, v356));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v414);
      if (v413)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v413);
      if ((BYTE8(v562) & 7) != 0)
      {
        v358 = (unsigned int *)(*((_QWORD *)&v562 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v359 = __ldxr(v358);
        while (__stlxr(v359 - 2, v358));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v562);
      if (v561[1])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v561[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v537);
      v360 = (uint64_t *)v314[1];
      if (v360)
      {
        do
        {
          v361 = v360;
          v360 = (uint64_t *)*v360;
        }
        while (v360);
      }
      else
      {
        do
        {
          v361 = (uint64_t *)v314[2];
          v362 = *v361 == (_QWORD)v314;
          v314 = v361;
        }
        while (!v362);
      }
      v314 = v361;
    }
    while (v361 != (uint64_t *)v499);
  }
  v363 = v500;
  for (j = v501; v363 != j; v363 += 2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, v363);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)__p + 1, v363 + 1);
    v365 = v504;
    if ((unint64_t)v504 >= v505)
    {
      v366 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v503, __p);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v504, __p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v365 + 1, (_DWORD *)__p + 1);
      v366 = v365 + 8;
    }
    v504 = v366;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
  }
  v367 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
  if (!v367)
    v367 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
  TgECS::genECSPath((TgECS *)__p, a3, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v367 + 208));
  v368 = v504;
  if ((unint64_t)v504 >= v505)
  {
    v369 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v503, __p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v504, __p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v368 + 1, (_DWORD *)__p + 1);
    v369 = v368 + 8;
  }
  v504 = v369;
  v370 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
  if (!v370)
    v370 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
  TgECS::genECSPath((TgECS *)v513, a3, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v370 + 216));
  v371 = v504;
  if ((unint64_t)v504 >= v505)
  {
    v372 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v503, v513);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v504, v513);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v371 + 1, (_DWORD *)v513 + 1);
    v372 = v371 + 8;
  }
  v504 = v372;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v513);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v513, a5);
  v373 = a5 + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v513 + 1, a5 + 1);
  v514 = 0uLL;
  v513[1] = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(&v513[1], v503, v504, (v504 - v503) >> 3);
  v374 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v374)
    v374 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v375 = *((_QWORD *)v374 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (v375)
  {
    v376 = (char *)(v375 + 16);
    if (*(char *)(v375 + 39) < 0)
      v376 = *(char **)v376;
  }
  else
  {
    v376 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(v557, v376);
  MEMORY[0x2348B26F8](&v515, v557);
  v377 = v506.i64[1];
  if (v506.i64[1] >= v507[0])
  {
    v379 = 0xCCCCCCCCCCCCCCCDLL * ((v506.i64[1] - v506.i64[0]) >> 3);
    if (v379 + 1 > 0x666666666666666)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v380 = 0x999999999999999ALL * ((v507[0] - v506.i64[0]) >> 3);
    if (v380 <= v379 + 1)
      v380 = v379 + 1;
    if (0xCCCCCCCCCCCCCCCDLL * ((v507[0] - v506.i64[0]) >> 3) >= 0x333333333333333)
      v381 = 0x666666666666666;
    else
      v381 = v380;
    *(_QWORD *)&v565 = v507;
    if (v381)
    {
      if (v381 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v382 = (char *)operator new(40 * v381);
    }
    else
    {
      v382 = 0;
    }
    v383 = (uint64_t)&v382[40 * v379];
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v383, (uint64_t)v513);
    v384 = v506.i64[1];
    v385 = v506.i64[0];
    if (v506.i64[1] == v506.i64[0])
    {
      v387 = vdupq_n_s64(v506.u64[1]);
      v386 = v383;
    }
    else
    {
      v386 = v383;
      do
      {
        v386 -= 40;
        v384 -= 40;
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v386, v384);
      }
      while (v384 != v385);
      v387 = v506;
    }
    v378 = v383 + 40;
    v506.i64[0] = v386;
    v506.i64[1] = v378;
    *(int64x2_t *)&__p[1] = v387;
    v388 = (void *)v507[0];
    v507[0] = &v382[40 * v381];
    __p[3] = v388;
    __p[0] = (void *)v387.i64[0];
    std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)__p);
    v373 = a5 + 1;
  }
  else
  {
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v506.i64[1], (uint64_t)v513);
    v378 = v377 + 40;
  }
  v506.i64[1] = v378;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v515);
  __p[0] = &v513[1];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v513);
  if (SBYTE7(v558) < 0)
    operator delete(v557[0]);
  TgBase::emitTargets((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v506);
  v389 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a5);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v389 + 1, v373);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v498, v499[0]);
  __p[0] = &v500;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v503;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v506;
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_2301E1E04(_Unwind_Exception *a1)
{
  unsigned int *v2;
  unsigned int v3;

  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&STACK[0x550], (_QWORD *)STACK[0x558]);
  STACK[0xA70] = (unint64_t)&STACK[0x568];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA70]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&STACK[0x608], (_QWORD *)STACK[0x610]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&STACK[0x620]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&STACK[0x628]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&STACK[0x630]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&STACK[0x638]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&STACK[0x640]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&STACK[0x648]);
  if ((STACK[0x668] & 7) != 0)
  {
    v2 = (unsigned int *)(STACK[0x668] & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(STACK[0x308]);
  if (STACK[0x658])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(STACK[0x658]);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&STACK[0x6F8], (_QWORD *)STACK[0x700]);
  STACK[0x670] = (unint64_t)&STACK[0x710];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x670]);
  STACK[0x670] = (unint64_t)&STACK[0x728];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x670]);
  STACK[0x670] = (unint64_t)&STACK[0x740];
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x670]);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::getBlendShapeNameAndTargetPaths(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  MEMORY[0x2348B274C](v18, "skel:blendShapes");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)v18);
  if ((v18[0] & 7) != 0)
  {
    v6 = (unsigned int *)(*(_QWORD *)&v18[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  MEMORY[0x2348B274C](v18, "skel:blendShapeTargets");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)v18);
  if ((v18[0] & 7) != 0)
  {
    v8 = (unsigned int *)(*(_QWORD *)&v18[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
  pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
  v10 = v21 != v20 && *(_QWORD *)&v18[0] == (v21 - v20) >> 3;
  v11 = v10;
  if (v10)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v27, &v17);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2, (int *)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v23, &v17);
  }
  else
  {
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2, (int *)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3, (int *)&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v18);
  *(_QWORD *)&v18[0] = &v20;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  if ((v26 & 7) != 0)
  {
    v12 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  if (v24)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
  if ((v30 & 7) != 0)
  {
    v14 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  if (v28)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
  return v11;
}

void sub_2301E33F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void **v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, void **);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void ***)va);
  va_copy((va_list)v5, va1);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v3 - 64));
  _Unwind_Resume(a1);
}

void `anonymous namespace'::metaDataPath(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  void *__p;
  char v4;
  _BYTE v5[8];

  std::operator+<char>();
  MEMORY[0x2348B26F8](v5, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v5);
  if (v4 < 0)
    operator delete(__p);
}

void sub_2301E3528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t gatherTextShapeInputs(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  realityio::tokens::ActionTokens_StaticTokenType *Data;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  v7 = (_QWORD *)*((_QWORD *)v6 + 3);
  result = MEMORY[0x2348B274C](&v41, "Preliminary_Text");
  v9 = *v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
  if ((v41 & 7) != 0)
  {
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if ((unsigned int *)v9 == v10)
  {
    Data = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(a2, (_QWORD *)Data + 44);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v40);
    v13 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v13)
      v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v13 + 8));
    v14 = a3[1];
    if (v14 >= a3[2])
    {
      v15 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v41);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v41);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v14 + 4), (_DWORD *)&v41 + 1);
      v15 = v14 + 8;
    }
    a3[1] = v15;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v40);
    v16 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 32));
    v17 = a3[1];
    if (v17 >= a3[2])
    {
      v18 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v41);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v41);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v17 + 4), (_DWORD *)&v41 + 1);
      v18 = v17 + 8;
    }
    a3[1] = v18;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v40);
    v19 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v19)
      v19 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v19 + 64));
    v20 = a3[1];
    if (v20 >= a3[2])
    {
      v21 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v41);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v41);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v20 + 4), (_DWORD *)&v41 + 1);
      v21 = v20 + 8;
    }
    a3[1] = v21;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v40);
    v22 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v22)
      v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v22 + 96));
    v23 = a3[1];
    if (v23 >= a3[2])
    {
      v24 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v41);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v41);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v23 + 4), (_DWORD *)&v41 + 1);
      v24 = v23 + 8;
    }
    a3[1] = v24;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v40);
    v25 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v25)
      v25 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v25 + 40));
    v26 = a3[1];
    if (v26 >= a3[2])
    {
      v27 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v41);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v41);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v26 + 4), (_DWORD *)&v41 + 1);
      v27 = v26 + 8;
    }
    a3[1] = v27;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v40);
    v28 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v28)
      v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v28 + 24));
    v29 = a3[1];
    if (v29 >= a3[2])
    {
      v30 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v41);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v41);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v29 + 4), (_DWORD *)&v41 + 1);
      v30 = v29 + 8;
    }
    a3[1] = v30;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v40);
    v31 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v31)
      v31 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v31 + 104));
    v32 = a3[1];
    if (v32 >= a3[2])
    {
      v33 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v41);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v41);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v32 + 4), (_DWORD *)&v41 + 1);
      v33 = v32 + 8;
    }
    a3[1] = v33;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v40);
    v34 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v34)
      v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v34 + 48));
    v35 = a3[1];
    if (v35 >= a3[2])
    {
      v36 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v41);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v41);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v35 + 4), (_DWORD *)&v41 + 1);
      v36 = v35 + 8;
    }
    a3[1] = v36;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, &v40);
    v37 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v37)
      v37 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v37 + 88));
    v38 = a3[1];
    if (v38 >= a3[2])
    {
      v39 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v41);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v41);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v38 + 4), (_DWORD *)&v41 + 1);
      v39 = v38 + 8;
    }
    a3[1] = v39;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
  }
  return result;
}

void sub_2301E3B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);
  _Unwind_Resume(a1);
}

uint64_t gatherPrimitiveShapeInputs(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *a1, _QWORD *a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *IsA;
  realityio::tokens::ActionTokens_StaticTokenType *Data;
  unint64_t v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomCone *v10;
  realityio::tokens::ActionTokens_StaticTokenType *v11;
  unint64_t v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::UsdGeomCube *v14;
  realityio::tokens::ActionTokens_StaticTokenType *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *v23;
  realityio::tokens::ActionTokens_StaticTokenType *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  realityio::tokens::ActionTokens_StaticTokenType *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  _QWORD v68[3];
  _BYTE v69[8];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((_DWORD)IsA)
  {
    Data = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(a2, (_QWORD *)Data + 41);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, &v62);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v68[0] = MEMORY[0x24BEE9D20] + 16;
    pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)v68);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v62, &v66);
    v8 = a3[1];
    if (v8 >= a3[2])
    {
      v9 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v66);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v66);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v8 + 4), &v67);
      v9 = v8 + 8;
    }
    a3[1] = v9;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
    if ((v65 & 7) != 0)
    {
      v18 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v64);
    if (v63)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v63);
    MEMORY[0x2348B1D20](v68);
    if ((v72 & 7) != 0)
    {
      v20 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
    result = v70;
    if (v70)
      return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(IsA);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomCone *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((_DWORD)v10)
    {
      v11 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v11)
        v11 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      pxrInternal__aapl__pxrReserved__::TfToken::operator=(a2, (_QWORD *)v11 + 8);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v62 = MEMORY[0x24BEE9D30] + 16;
      pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetHeightAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)&v62);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v69, v68);
      v12 = a3[1];
      if (v12 >= a3[2])
      {
        v13 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v68);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v68);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v12 + 4), (_DWORD *)v68 + 1);
        v13 = v12 + 8;
      }
      a3[1] = v13;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v68);
      if ((v72 & 7) != 0)
      {
        v27 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
      if (v70)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
      pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)&v62);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v69, v68);
      v29 = a3[1];
      if (v29 >= a3[2])
      {
        v30 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v68);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v68);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v29 + 4), (_DWORD *)v68 + 1);
        v30 = v29 + 8;
      }
      a3[1] = v30;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v68);
      if ((v72 & 7) != 0)
      {
        v31 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
      if (v70)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
      pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetAxisAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)&v62);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v69, v68);
      v33 = a3[1];
      if (v33 >= a3[2])
      {
        v34 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v68);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v68);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v33 + 4), (_DWORD *)v68 + 1);
        v34 = v33 + 8;
      }
      a3[1] = v34;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v68);
      if ((v72 & 7) != 0)
      {
        v35 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
      if (v70)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
      return MEMORY[0x2348B1E4C](&v62);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(v10);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomCube *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if ((_DWORD)v14)
      {
        v15 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
        if (!v15)
          v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(a2, (_QWORD *)v15 + 10);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v62 = MEMORY[0x24BEE9CE0] + 16;
        pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetHeightAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)&v62);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v69, v68);
        v16 = a3[1];
        if (v16 >= a3[2])
        {
          v17 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v68);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v68);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v16 + 4), (_DWORD *)v68 + 1);
          v17 = v16 + 8;
        }
        a3[1] = v17;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v68);
        if ((v72 & 7) != 0)
        {
          v40 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
        if (v70)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
        pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)&v62);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v69, v68);
        v42 = a3[1];
        if (v42 >= a3[2])
        {
          v43 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v68);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v68);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v42 + 4), (_DWORD *)v68 + 1);
          v43 = v42 + 8;
        }
        a3[1] = v43;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v68);
        if ((v72 & 7) != 0)
        {
          v44 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
          do
            v45 = __ldxr(v44);
          while (__stlxr(v45 - 2, v44));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
        if (v70)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
        pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetAxisAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)&v62);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v69, v68);
        v46 = a3[1];
        if (v46 >= a3[2])
        {
          v47 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v68);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v68);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v46 + 4), (_DWORD *)v68 + 1);
          v47 = v46 + 8;
        }
        a3[1] = v47;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v68);
        if ((v72 & 7) != 0)
        {
          v48 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
        if (v70)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
        return MEMORY[0x2348B1AB0](&v62);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(v14);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        v23 = (pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
        if ((_DWORD)v23)
        {
          v24 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
          if (!v24)
            v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(a2, (_QWORD *)v24 + 13);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v62 = MEMORY[0x24BEE9CE8] + 16;
          pxrInternal__aapl__pxrReserved__::UsdGeomCube::GetSizeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCube *)&v62);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v69, v68);
          v25 = a3[1];
          if (v25 >= a3[2])
          {
            v26 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v68);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v68);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v25 + 4), (_DWORD *)v68 + 1);
            v26 = v25 + 8;
          }
          a3[1] = v26;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v68);
          if ((v72 & 7) != 0)
          {
            v50 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
            do
              v51 = __ldxr(v50);
            while (__stlxr(v51 - 2, v50));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
          if (v70)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
          return MEMORY[0x2348B1AC8](&v62);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType(v23);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          result = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if ((_DWORD)result)
          {
            v37 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
            if (!v37)
              v37 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(a2, (_QWORD *)v37 + 16);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v62 = MEMORY[0x24BEE9D48] + 16;
            pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetHeightAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)&v62);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v69, v68);
            v38 = a3[1];
            if (v38 >= a3[2])
            {
              v39 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v68);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v68);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v38 + 4), (_DWORD *)v68 + 1);
              v39 = v38 + 8;
            }
            a3[1] = v39;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v68);
            if ((v72 & 7) != 0)
            {
              v52 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
              do
                v53 = __ldxr(v52);
              while (__stlxr(v53 - 2, v52));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
            if (v70)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
            pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)&v62);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v69, v68);
            v54 = a3[1];
            if (v54 >= a3[2])
            {
              v55 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v68);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v68);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v54 + 4), (_DWORD *)v68 + 1);
              v55 = v54 + 8;
            }
            a3[1] = v55;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v68);
            if ((v72 & 7) != 0)
            {
              v56 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
              do
                v57 = __ldxr(v56);
              while (__stlxr(v57 - 2, v56));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
            if (v70)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
            pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetAxisAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)&v62);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v69, v68);
            v58 = a3[1];
            if (v58 >= a3[2])
            {
              v59 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, v68);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], v68);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v58 + 4), (_DWORD *)v68 + 1);
              v59 = v58 + 8;
            }
            a3[1] = v59;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v68);
            if ((v72 & 7) != 0)
            {
              v60 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
              do
                v61 = __ldxr(v60);
              while (__stlxr(v61 - 2, v60));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
            if (v70)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
            return MEMORY[0x2348B1F84](&v62);
          }
        }
      }
    }
  }
  return result;
}

void sub_2301E4620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a14);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a17);
  MEMORY[0x2348B1F84](&a9);
  _Unwind_Resume(a1);
}

uint64_t TgECS::genECSPath(TgECS *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  int v6;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
}

void sub_2301E4840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t TgECS::meshesUnderAndIncluding(uint64_t *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  int8x16_t v11;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange *v12;
  BOOL v13;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v14;
  _BOOL4 v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *v25;
  char IsA;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v27;
  pxrInternal__aapl__pxrReserved__ *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v32;
  _BOOL4 isGuide;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v69;
  _BOOL4 isCatmullClarkSurface;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  _BOOL4 v75;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD v81[3];
  unsigned int *v82;
  uint64_t v83;
  pxrInternal__aapl__pxrReserved__ *v84[2];
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[24];
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  char v92;
  char v93;
  char v94[8];
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  char v100;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)a3);
  v97 = 0uLL;
  LOBYTE(v98) = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v97, 0);
  v89 = *(_OWORD *)v7;
  v90 = *(_QWORD *)(v7 + 16);
  v97 = v89;
  LOBYTE(v98) = v90;
  v8 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v97, 1);
  *(_OWORD *)v84 = *(_OWORD *)v8;
  v85 = *(_QWORD *)(v8 + 16);
  v97 = *(_OWORD *)v84;
  LOBYTE(v98) = v85;
  v9 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v97, 0x100000005);
  v10 = v9[1].i64[0];
  v11.i64[0] = -8193;
  v11.i64[0] = vandq_s8(*v9, v11).u64[0];
  v11.i64[1] = vorrq_s8(*v9, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  *(int8x16_t *)v87 = v11;
  *(_QWORD *)&v87[16] = v10;
  v12 = (pxrInternal__aapl__pxrReserved__::UsdPrimRange *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v94, a3, v87);
  v79 = a1;
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin(v12, (uint64_t)&v89);
  v80 = MEMORY[0x24BEE9D70] + 16;
  v78 = MEMORY[0x24BEE9CF0] + 16;
  while (1)
  {
    *(_QWORD *)&v97 = v95;
    *((_QWORD *)&v97 + 1) = v94;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    LODWORD(v99) = 0;
    WORD2(v99) = 0;
    if (v89 == v97)
    {
      v13 = 1;
      if (v90 == v98 && !v91 && !v92)
        v13 = v93 != 0;
    }
    else
    {
      v13 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
    if (!v13)
      break;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v89, (uint64_t)&v97);
    if (realityio::calculateIsEntityProviding((realityio *)&v97, v14))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v89, (uint64_t)v87);
      v15 = *(_DWORD *)v87 != *(_DWORD *)a3
         || *(_OWORD *)&v87[8] != *(_OWORD *)(a3 + 8)
         || (v88 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFFF8);
      if ((v88 & 7) != 0)
      {
        v16 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87[16]);
      if (*(_QWORD *)&v87[8])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v87[8]);
    }
    else
    {
      v15 = 0;
    }
    if ((v99 & 7) != 0)
    {
      v18 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
    if (*((_QWORD *)&v97 + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v97 + 1));
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v89, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v97);
    v21 = *((_QWORD *)&v97 + 1);
    if (!*((_QWORD *)&v97 + 1) || (v22 = *(_QWORD *)(*((_QWORD *)&v97 + 1) + 56), (v22 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v97 + 1), v20);
      v22 = *(_QWORD *)(v21 + 56);
    }
    if ((v99 & 7) != 0)
    {
      v23 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
    if (*((_QWORD *)&v97 + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v97 + 1));
    if ((v22 & 0x40) == 0)
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v89);
    v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v89, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v97);
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(v25);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((IsA & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v89, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)v84);
      v28 = v84[1];
      if (!v84[1] || (*((_BYTE *)v84[1] + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v84[1], v27);
      v29 = (_QWORD *)*((_QWORD *)v28 + 3);
      MEMORY[0x2348B274C](&v83, "Preliminary_Text");
      v30 = v83;
      if ((*v29 & 0xFFFFFFFFFFFFFFF8) != (v83 & 0xFFFFFFFFFFFFFFF8))
      {
        v31 = 0;
LABEL_44:
        if ((v30 & 7) != 0)
        {
          v36 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
          do
            v37 = __ldxr(v36);
          while (__stlxr(v37 - 2, v36));
        }
        if ((v86 & 7) != 0)
        {
          v38 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
          do
            v39 = __ldxr(v38);
          while (__stlxr(v39 - 2, v38));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v85);
        if (v84[1])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v84[1]);
        goto LABEL_52;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v89, (uint64_t)v87);
    isGuide = realityio::isGuide((realityio *)v87, v32);
    if ((v88 & 7) != 0)
    {
      v34 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87[16]);
    if (*(_QWORD *)&v87[8])
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v87[8]);
    v31 = !isGuide && !v15;
    if ((IsA & 1) == 0)
    {
      v30 = v83;
      goto LABEL_44;
    }
LABEL_52:
    if ((v99 & 7) != 0)
    {
      v40 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
      do
        v41 = __ldxr(v40);
      while (__stlxr(v41 - 2, v40));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
    if (*((_QWORD *)&v97 + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v97 + 1));
    if (v31)
    {
      MEMORY[0x2348B274C](v81, "visibility");
      MEMORY[0x2348B274C](&v82, "inherited");
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v89, (uint64_t)v87);
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)v87, (const pxrInternal__aapl__pxrReserved__::TfToken *)v81, (uint64_t)&v97);
      if ((_BYTE)v97)
      {
        v42 = (unsigned int *)*((_QWORD *)&v97 + 1);
        if ((BYTE8(v97) & 7) != 0)
        {
          v43 = (unsigned int *)(*((_QWORD *)&v97 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 2, v43));
LABEL_66:
          if ((v44 & 1) == 0)
            v42 = v43;
        }
      }
      else
      {
        v42 = v82;
        if ((v82 & 7) != 0)
        {
          v43 = (unsigned int *)((unint64_t)v82 & 0xFFFFFFFFFFFFFFF8);
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 2, v43));
          goto LABEL_66;
        }
      }
      if ((_BYTE)v97)
      {
        if ((BYTE8(v97) & 7) != 0)
        {
          v45 = (unsigned int *)(*((_QWORD *)&v97 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v46 = __ldxr(v45);
          while (__stlxr(v46 - 2, v45));
        }
      }
      else if (v100 < 0)
      {
        operator delete((void *)v99);
      }
      if ((v88 & 7) != 0)
      {
        v47 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87[16]);
      if (*(_QWORD *)&v87[8])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v87[8]);
      if ((v82 & 7) != 0)
      {
        v49 = (unsigned int *)((unint64_t)v82 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((v81[0] & 7) != 0)
      {
        v51 = (unsigned int *)(v81[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      MEMORY[0x2348B274C](&v97, "invisible");
      if ((v97 & 7) != 0)
      {
        v53 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v89, (uint64_t)&v97);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *(_QWORD *)v87 = v80;
      if ((v99 & 7) != 0)
      {
        v55 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
      if (*((_QWORD *)&v97 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v97 + 1));
      if (*(_QWORD *)&v87[8]
        && (*(_BYTE *)(*(_QWORD *)&v87[8] + 57) & 8) == 0
        && ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v87 + 32))(v87) & 1) != 0)
      {
        goto LABEL_108;
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v89, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v97);
      v58 = *((_QWORD *)&v97 + 1);
      if (!*((_QWORD *)&v97 + 1) || (*(_BYTE *)(*((_QWORD *)&v97 + 1) + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v97 + 1), v57);
      v59 = *(uint64_t **)(v58 + 24);
      MEMORY[0x2348B274C](v81, "Preliminary_Text");
      v60 = *v59;
      v61 = (unsigned int *)(v81[0] & 0xFFFFFFFFFFFFFFF8);
      if ((v81[0] & 7) != 0)
      {
        do
          v62 = __ldxr(v61);
        while (__stlxr(v62 - 2, v61));
      }
      if ((v99 & 7) != 0)
      {
        v63 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
        do
          v64 = __ldxr(v63);
        while (__stlxr(v64 - 2, v63));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
      if (*((_QWORD *)&v97 + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v97 + 1));
      if ((unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8) == v61)
      {
LABEL_108:
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)&v89, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v97);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v97, v81);
        v65 = v79[1];
        if (v65 >= v79[2])
        {
          v66 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(v79, v81);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v79[1], v81);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v65 + 4), (_DWORD *)v81 + 1);
          v66 = v65 + 8;
        }
        v79[1] = v66;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v81);
        if ((v99 & 7) != 0)
        {
          v67 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
          do
            v68 = __ldxr(v67);
          while (__stlxr(v68 - 2, v67));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
        if (*((_QWORD *)&v97 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v97 + 1));
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v89, (uint64_t)&v97);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v81[0] = v78;
        isCatmullClarkSurface = realityio::isCatmullClarkSurface((realityio *)v81, v69);
        MEMORY[0x2348B1AF8](v81);
        if ((v99 & 7) != 0)
        {
          v71 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
          do
            v72 = __ldxr(v71);
          while (__stlxr(v72 - 2, v71));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
        if (*((_QWORD *)&v97 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v97 + 1));
        if (isCatmullClarkSurface)
          *a4 = 1;
      }
      MEMORY[0x2348B205C](v87);
      if ((v42 & 7) != 0)
      {
        v73 = (unsigned int *)((unint64_t)v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v74 = __ldxr(v73);
        while (__stlxr(v74 - 2, v73));
      }
    }
    if (*(_BYTE *)(a2 + 104))
      v75 = 0;
    else
      v75 = v15;
    if (v75)
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v89);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v89);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v90);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v96);
}

void sub_2301E517C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)(v13 - 200));
  *(_QWORD *)(v13 - 200) = a13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 200));
  _Unwind_Resume(a1);
}

uint64_t TgECS::genAssetPath(TgECS *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int *v6;
  unsigned int v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimInPrototype(a2, (uint64_t)v9);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v9, &v13);
    if ((v12 & 7) != 0)
    {
      v6 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    if (v10)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v13);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
}

void sub_2301E5460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::genAssetPath(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *ValidIdentifier;
  unsigned int **Data;
  unint64_t v7;
  char *v8;
  void *__p[2];
  char v10;
  _BYTE v11[8];
  void *v12;
  char v13;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a2);
  ValidIdentifier = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier();
  if (*(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(ValidIdentifier))
  {
    Data = (unsigned int **)atomic_load(&realityio::tokens::StageTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::StageTokens);
    v7 = (unint64_t)Data[1] & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      v8 = (char *)(v7 + 16);
      if (*(char *)(v7 + 39) < 0)
        v8 = *(char **)v8;
    }
    else
    {
      v8 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v8);
    MEMORY[0x2348B26F8](v11, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v11);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, a3);
  }
  if (v13 < 0)
    operator delete(v12);
}

void sub_2301E5598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TgECS::ecsMeshes(TgECS *a1, Exec **a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, uint64_t a6, pxrInternal__aapl__pxrReserved__::SdfPath *a7, uint64_t *a8, uint64_t a9, _BYTE *a10)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::UsdStage *v14;
  pxrInternal__aapl__pxrReserved__ *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *UsdPrimDefaultPredicate;
  uint64_t v20;
  uint64_t v21;
  char v22;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  std::string::__raw *v42;
  Exec **v43;
  std::string *v44;
  std::string *v45;
  unsigned int *v46;
  unsigned int v47;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  realityio::tokens::EcsTokens_StaticTokenType *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  realityio::tokens::EcsTokens_StaticTokenType *v58;
  _DWORD *v59;
  int *v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  pxrInternal__aapl__pxrReserved__::UsdStage *v66;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v67;
  pxrInternal__aapl__pxrReserved__ *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t ValueAtPath;
  pxrInternal__aapl__pxrReserved__::VtValue *v73;
  uint64_t v74;
  _QWORD *v75;
  void *v76;
  _QWORD *v77;
  _QWORD *v78;
  BOOL v79;
  _BOOL4 v80;
  pxrInternal__aapl__pxrReserved__::TfToken *v82;
  uint64_t EmptyString;
  __int128 v84;
  unsigned int *v85;
  unsigned int v86;
  realityio::tokens::ActionTokens_StaticTokenType *v87;
  unint64_t v88;
  char *v89;
  _DWORD *v90;
  _DWORD *v91;
  realityio::tokens::ActionTokens_StaticTokenType *v92;
  unint64_t v93;
  char *v94;
  _DWORD *v95;
  _DWORD *v96;
  uint64_t *NameToken;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  pxrInternal__aapl__pxrReserved__::UsdStage *v101;
  int v102;
  unsigned int *v103;
  unsigned int v104;
  realityio::tokens::EcsTokens_StaticTokenType *v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  _QWORD *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  _DWORD *v124;
  _DWORD *v125;
  unsigned int *v126;
  unsigned int v127;
  pxrInternal__aapl__pxrReserved__::UsdObject *v128;
  unsigned int *v129;
  unsigned int v130;
  _DWORD *v131;
  _DWORD *v132;
  unsigned int *v133;
  unsigned int v134;
  std::string::size_type v135;
  unint64_t *v136;
  unint64_t v137;
  std::string::size_type size;
  unsigned int *v139;
  unsigned int v140;
  realityio *v141;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v142;
  char hasInputsLoop;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  _DWORD *v150;
  _DWORD *v151;
  realityio::tokens::ActionTokens_StaticTokenType *v152;
  unint64_t v153;
  char *v154;
  _DWORD *v155;
  _DWORD *v156;
  unsigned int *v157;
  unsigned int v158;
  realityio::tokens::ActionTokens_StaticTokenType *v159;
  unint64_t v160;
  char *v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  realityio::tokens::EcsTokens_StaticTokenType *v168;
  uint64_t *v169;
  _DWORD *v170;
  _DWORD *v171;
  realityio::tokens::EcsTokens_StaticTokenType *v172;
  unint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  realityio::tokens::EcsTokens_StaticTokenType *v176;
  _DWORD *v177;
  _DWORD *v178;
  _DWORD *v179;
  unsigned int *v180;
  unsigned int v181;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v182;
  realityio::tokens::ActionTokens_StaticTokenType *v184;
  unint64_t v185;
  char *v186;
  pxrInternal__aapl__pxrReserved__::UsdStage *v187;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int v192;
  pxrInternal__aapl__pxrReserved__ *v193;
  _QWORD *v194;
  unint64_t v195;
  unsigned int *v196;
  unsigned int v197;
  unint64_t *v198;
  unint64_t v199;
  unsigned int *v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int *v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int *v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int *v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int *v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int *v236;
  unsigned int v237;
  realityio::tokens::EcsTokens_StaticTokenType *v238;
  realityio::tokens::ActionTokens_StaticTokenType *v239;
  unint64_t v240;
  char *v241;
  unsigned int *v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int v245;
  _DWORD *v252;
  uint64_t v253;
  unsigned int (*v254)(void **);
  uint64_t **v255;
  uint64_t *v256;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v257;
  _DWORD *v258;
  int v261;
  pxrInternal__aapl__pxrReserved__ *v262;
  int v263;
  int v264;
  uint64_t v265;
  int v266;
  int v267;
  int v268;
  int v269;
  _DWORD *v270;
  _DWORD *v271;
  unint64_t v272;
  int v273;
  int v274;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v275;
  _DWORD *v276;
  unint64_t v277;
  int v278;
  uint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  _DWORD v283[2];
  char v284;
  int v285;
  int v286;
  int v287;
  uint64_t v288;
  int v289;
  int v290;
  uint64_t v291;
  int v292;
  int v293;
  uint64_t v294;
  int v295;
  int v296;
  uint64_t v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  _QWORD **v301;
  _QWORD *v302[2];
  unint64_t v303;
  void *v304[2];
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  _QWORD *v312;
  uint64_t v313;
  int v314;
  int v315;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v316;
  _DWORD *v317;
  unint64_t v318;
  uint64_t v319;
  std::string v320;
  int v321;
  int v322;
  std::string __sz;
  uint64_t v324;
  void **v325;
  void *__p;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  __int128 v330;
  uint64_t v331;
  unint64_t p_p;
  std::type_info **v333;
  __int128 v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  int v338;
  __int128 v339;
  uint64_t v340;
  unint64_t v341;
  std::string::size_type v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;

  v345 = *MEMORY[0x24BDAC8D0];
  v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*a5;
  v252 = (_DWORD *)a5[1];
  if ((_DWORD *)*a5 == v252)
  {
    *(_QWORD *)a1 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  }
  else
  {
    v302[1] = 0;
    v302[0] = 0;
    v301 = v302;
    v11 = a3 + 2;
    v12 = (_DWORD *)a3 + 5;
    v13 = (uint64_t)(a2 + 48);
    do
    {
      v327 = 0;
      __p = 0;
      v328 = 0;
      *(_OWORD *)&__sz.__r_.__value_.__r.__words[1] = 0uLL;
      __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&__sz.__r_.__value_.__l.__size_;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)a3);
      v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&p_p);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v14, v10);
      v15 = (pxrInternal__aapl__pxrReserved__ *)v333;
      if (v333)
      {
        v16 = (unsigned int *)(v333 + 1);
        do
        {
          v17 = __ldxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
          v15 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))(*(_QWORD *)v15 + 8))(v15);
      }
      v257 = v10;
      UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v15);
      v20 = *UsdPrimDefaultPredicate;
      v21 = UsdPrimDefaultPredicate[1];
      v253 = UsdPrimDefaultPredicate[2];
      if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
        && ((v20 & 0x2000) != 0 || (v21 & 0x2000) == 0))
      {
        v20 |= 0x2000uLL;
        v21 &= ~0x2000uLL;
      }
      *(_QWORD *)&v298 = v20;
      *((_QWORD *)&v298 + 1) = v21;
      *(_QWORD *)&v299 = v253;
      pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v341, (uint64_t *)&v298, (uint64_t)&p_p);
      *(_QWORD *)&v298 = p_p;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v298 + 2, &v333);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v298 + 3, (_DWORD *)&v333 + 1);
      v299 = v334;
      v300 = v335;
      *(_QWORD *)&v329 = v336;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v329 + 2, &v337);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v329 + 3, &v338);
      v22 = 0;
      v330 = v339;
      v331 = v340;
      while (v298 != v329
           || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v299, (uint64_t)&v330))
      {
        v23 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v298, (uint64_t)&v307);
        pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v23);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
        {
          v293 = *(_DWORD *)a3;
          v24 = a3[1];
          v294 = v24;
          if (v24)
          {
            v25 = (unint64_t *)(v24 + 48);
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v295, v11);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v296, v12);
          v27 = a3[3];
          v297 = v27;
          if ((v27 & 7) != 0)
          {
            v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 2, v28));
            if ((v29 & 1) == 0)
              v297 &= 0xFFFFFFFFFFFFFFF8;
          }
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v307, &v292);
          gatherMaterialsByIndex((pxrInternal__aapl__pxrReserved__::UsdObject *)&v293, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v292, v13, (uint64_t)&v301, a8, (uint64_t *)&__p, (uint64_t **)&__sz);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v292);
          if ((v297 & 7) != 0)
          {
            v30 = (unsigned int *)(v297 & 0xFFFFFFFFFFFFFFF8);
            do
              v31 = __ldxr(v30);
            while (__stlxr(v31 - 2, v30));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v295);
          if (v294)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v294);
          v22 = 1;
        }
        if ((v310 & 7) != 0)
        {
          v32 = (unsigned int *)(v310 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v309);
        if (v308)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v308);
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v298);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v329 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v298 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v337);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v333);
      if ((v22 & 1) == 0)
      {
        v287 = *(_DWORD *)a3;
        v34 = a3[1];
        v288 = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 48);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v289, v11);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v290, v12);
        v37 = a3[3];
        v291 = v37;
        if ((v37 & 7) != 0)
        {
          v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 2, v38));
          if ((v39 & 1) == 0)
            v291 &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v285, v257);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v286, (_DWORD *)v257 + 1);
        gatherMaterialsByIndex((pxrInternal__aapl__pxrReserved__::UsdObject *)&v287, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v285, v13, (uint64_t)&v301, a8, (uint64_t *)&__p, (uint64_t **)&__sz);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v285);
        if ((v291 & 7) != 0)
        {
          v40 = (unsigned int *)(v291 & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v289);
        if (v288)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v288);
      }
      v42 = (std::string::__raw *)__sz.__r_.__value_.__r.__words[0];
      v43 = a2;
      if ((std::string::size_type *)__sz.__r_.__value_.__l.__data_ != &__sz.__r_.__value_.__r.__words[1])
      {
        do
        {
          TgBase::emitConstant(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v42[1].__words[1], (const pxrInternal__aapl__pxrReserved__::VtValue *)&v42[1].__words[2]);
          v44 = (std::string *)v42->__words[1];
          if (v44)
          {
            do
            {
              v45 = v44;
              v44 = (std::string *)v44->__r_.__value_.__r.__words[0];
            }
            while (v44);
          }
          else
          {
            do
            {
              v45 = (std::string *)v42->__words[2];
              v79 = v45->__r_.__value_.__r.__words[0] == (_QWORD)v42;
              v42 = (std::string::__raw *)v45;
            }
            while (!v79);
          }
          v42 = (std::string::__raw *)v45;
        }
        while (v45 != (std::string *)&__sz.__r_.__value_.__r.__words[1]);
      }
      TgBase::emitTargets((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&__p);
      if ((v344 & 7) != 0)
      {
        v46 = (unsigned int *)(v344 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v343);
      if (v342)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v342);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&__sz, (_QWORD *)__sz.__r_.__value_.__l.__size_);
      p_p = (unint64_t)&__p;
      std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v257 + 8);
    }
    while ((_DWORD *)((char *)v257 + 8) != v252);
    Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    TgECS::genECSPath(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a3, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)Data + 248));
    v49 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!v49)
      v49 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    TgECS::genAssetPath((TgECS *)&p_p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a3, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v49 + 240));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a7, (int *)&p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a7 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&p_p);
    v255 = (uint64_t **)(a2 + 57);
    if (std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)(a2 + 57), a7))
    {
      v284 = 0;
      *a10 = 0;
    }
    else
    {
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v255, a7, a7);
      v284 = 0;
      *a10 = 0;
      v278 = *(_DWORD *)a3;
      v50 = a3[1];
      v279 = v50;
      if (v50)
      {
        v51 = (unint64_t *)(v50 + 48);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v280, v11);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v281, v12);
      v53 = a3[3];
      v282 = v53;
      if ((v53 & 7) != 0)
      {
        v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 2, v54));
        if ((v55 & 1) == 0)
          v282 &= 0xFFFFFFFFFFFFFFF8;
      }
      TgECS::ecsMeshAsset(v283, a2, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v278, a5, a7, a6, (uint64_t)&v301, &v284, a10);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v283);
      if ((v282 & 7) != 0)
      {
        v56 = (unsigned int *)(v282 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v280);
      if (v279)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v279);
    }
    v275 = 0;
    v276 = 0;
    v277 = 0;
    v276 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v275, a7);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1);
    v58 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!v58)
      v58 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&p_p, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v58 + 208));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&p_p);
    v270 = 0;
    v271 = 0;
    v272 = 0;
    v59 = (_DWORD *)*a8;
    v258 = (_DWORD *)a8[1];
    if ((_DWORD *)*a8 != v258)
    {
      v60 = &v267;
      v256 = (uint64_t *)(a2 + 11);
      v254 = *(unsigned int (**)(void **))(MEMORY[0x24BEE9D88] + 48);
      while (1)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v268, v59);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v269, v59 + 1);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v268);
        v317 = 0;
        v316 = 0;
        v318 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v314, &v268);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v315, &v269);
        std::string::basic_string[abi:ne180100]<0>(&p_p, "/__builtin/standardVertexColorMaterial");
        v61 = v60;
        MEMORY[0x2348B26F8](&v329, &p_p);
        v62 = v319;
        v63 = v329;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v329);
        if (SBYTE7(v334) < 0)
          operator delete((void *)p_p);
        v79 = v62 == v63;
        v60 = v61;
        if (v79)
          goto LABEL_94;
        std::string::basic_string[abi:ne180100]<0>(&p_p, "/__builtin/standardConstColorMaterial");
        MEMORY[0x2348B26F8](&v329, &p_p);
        v64 = v319;
        v65 = v329;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v329);
        if (SBYTE7(v334) < 0)
          operator delete((void *)p_p);
        v79 = v64 == v65;
        v60 = v61;
        if (v79)
          goto LABEL_94;
        NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v319);
        MEMORY[0x2348B274C](&p_p, "__materialAssetWithMeshVertexColors");
        v98 = *NameToken;
        v99 = (unsigned int *)(p_p & 0xFFFFFFFFFFFFFFF8);
        if ((p_p & 7) != 0)
        {
          do
            v100 = __ldxr(v99);
          while (__stlxr(v100 - 2, v99));
        }
        if ((unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8) == v99)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v266, &v268);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v61, &v269);
          goto LABEL_160;
        }
        v101 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v256);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v101, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v319);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_p))
        {
          v102 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
          if (v102)
          {
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimInPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)&p_p, (uint64_t)&v298);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v298, &v329);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_p, &v329);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v314, (int *)&v329);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v315);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v329);
          if (v102)
          {
            if ((BYTE8(v299) & 7) != 0)
            {
              v103 = (unsigned int *)(*((_QWORD *)&v299 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v104 = __ldxr(v103);
              while (__stlxr(v104 - 2, v103));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v299);
            if (*((_QWORD *)&v298 + 1))
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v298 + 1));
          }
          v105 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
          if (!v105)
            v105 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v314, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v105 + 200));
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v314, (int *)&v329);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v315);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v329);
        }
        v106 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v255, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v314);
        if (!v106)
          std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v255, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v314, &v314);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        __p = (void *)(MEMORY[0x24BEE9D88] + 16);
        if (!v106)
          break;
        MEMORY[0x2348B20B0](&__p);
        if ((BYTE8(v334) & 7) != 0)
        {
          v107 = (unsigned int *)(*((_QWORD *)&v334 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v108 = __ldxr(v107);
          while (__stlxr(v108 - 2, v107));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v334);
        if (v333)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v333);
LABEL_159:
        v266 = v314;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
        v267 = v315;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
LABEL_160:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v314);
        p_p = (unint64_t)&v316;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v319);
        v95 = v271;
        if ((unint64_t)v271 >= v272)
        {
          v96 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v270, &v266);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v271, &v266);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v95 + 1, v60);
          v96 = v95 + 2;
        }
        v271 = v96;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v266);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v268);
        v59 += 2;
        if (v59 == v258)
          goto LABEL_307;
      }
      if (v327 && (*(_BYTE *)(v327 + 57) & 8) == 0 && v254(&__p))
      {
        v109 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
        if (!v109)
        {
          v109 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
          v43 = a2;
        }
        v110 = *((_QWORD *)v109 + 27);
        if ((v110 & 7) != 0)
        {
          v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
          do
            v112 = __ldxr(v111);
          while (__stxr(v112 + 2, v111));
          if ((v112 & 1) == 0)
            v110 &= 0xFFFFFFFFFFFFFFF8;
        }
        v329 = 0uLL;
        *(_QWORD *)&v330 = 0;
        v341 = (unint64_t)&v329;
        LOBYTE(v342) = 0;
        v113 = operator new(8uLL);
        *(_QWORD *)&v329 = v113;
        *((_QWORD *)&v329 + 1) = v113;
        *v113 = v110;
        *(_QWORD *)&v330 = v113 + 1;
        if ((v110 & 7) != 0)
        {
          v114 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 2, v114));
          if ((v115 & 1) == 0)
            *v113 &= 0xFFFFFFFFFFFFFFF8;
        }
        *((_QWORD *)&v329 + 1) = v113 + 1;
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
        v341 = (unint64_t)&v329;
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
        if ((v110 & 7) != 0)
        {
          v116 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
          do
            v117 = __ldxr(v116);
          while (__stlxr(v117 - 2, v116));
        }
        MEMORY[0x2348B274C](&v329, "__defaultUV");
        v60 = v61;
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v319, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v329);
        if ((v329 & 7) != 0)
        {
          v118 = (unsigned int *)(v329 & 0xFFFFFFFFFFFFFFF8);
          do
            v119 = __ldxr(v118);
          while (__stlxr(v119 - 2, v118));
        }
        MEMORY[0x2348B2764](&v341, &v320);
        *(_QWORD *)&v329 = v341;
        *((_QWORD *)&v329 + 1) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                               + 1;
        if ((v341 & 7) != 0)
        {
          v120 = (unsigned int *)(v341 & 0xFFFFFFFFFFFFFFF8);
          do
            v121 = __ldxr(v120);
          while (__stxr(v121 + 2, v120));
          if ((v121 & 1) == 0)
            *(_QWORD *)&v329 = v329 & 0xFFFFFFFFFFFFFFF8;
        }
        TgBase::emitConstant(v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v324, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v329);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v329);
        if ((v341 & 7) != 0)
        {
          v122 = (unsigned int *)(v341 & 0xFFFFFFFFFFFFFFF8);
          do
            v123 = __ldxr(v122);
          while (__stlxr(v123 - 2, v122));
        }
        v124 = v317;
        if ((unint64_t)v317 >= v318)
        {
          v125 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v316, &v324);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v317, &v324);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v124 + 1, (_DWORD *)&v324 + 1);
          v125 = v124 + 2;
        }
        v317 = v125;
        MEMORY[0x2348B274C](&v329, "__shaderPrimPath");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v319, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v329);
        if ((v329 & 7) != 0)
        {
          v126 = (unsigned int *)(v329 & 0xFFFFFFFFFFFFFFF8);
          do
            v127 = __ldxr(v126);
          while (__stlxr(v127 - 2, v126));
        }
        v128 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v329, (uint64_t *)&__sz.__r_.__value_.__l.__size_, &__sz.__r_.__value_.__r.__words[2]);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v128, &v311);
        v342 = (std::string::size_type)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPath>(void)::ti
             + 1;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v341, &v311);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v341 + 1, (_DWORD *)&v311 + 1);
        TgBase::emitConstant(v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v321, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v341);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v341);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v311);
        if ((BYTE8(v330) & 7) != 0)
        {
          v129 = (unsigned int *)(*((_QWORD *)&v330 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v130 = __ldxr(v129);
          while (__stlxr(v130 - 2, v129));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v330);
        if (*((_QWORD *)&v329 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v329 + 1));
        v131 = v317;
        if ((unint64_t)v317 >= v318)
        {
          v132 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v316, &v321);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v317, &v321);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v131 + 1, &v322);
          v132 = v131 + 2;
        }
        v317 = v132;
        MEMORY[0x2348B274C](&v341, "mtlx");
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v341);
        if ((v341 & 7) != 0)
        {
          v133 = (unsigned int *)(v341 & 0xFFFFFFFFFFFFFFF8);
          do
            v134 = __ldxr(v133);
          while (__stlxr(v134 - 2, v133));
        }
        if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
        {
          MEMORY[0x2348B274C](&v311, "mtlx");
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
          v135 = v342;
          if (v342)
          {
            v136 = (unint64_t *)(v342 + 48);
            do
              v137 = __ldxr(v136);
            while (__stxr(v137 + 1, v136));
          }
          size = __sz.__r_.__value_.__l.__size_;
          __sz.__r_.__value_.__l.__size_ = v135;
          if (size)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(size);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&__sz.__r_.__value_.__r.__words[2], &v343);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&__sz.__r_.__value_.__r.__words[2] + 4, (_DWORD *)&v343 + 1);
          MEMORY[0x2348B1EC4](&v341);
          if ((v311 & 7) != 0)
          {
            v139 = (unsigned int *)((unint64_t)v311 & 0xFFFFFFFFFFFFFFF8);
            do
              v140 = __ldxr(v139);
            while (__stlxr(v140 - 2, v139));
          }
          v141 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v341, (uint64_t *)&__sz.__r_.__value_.__l.__size_, &__sz.__r_.__value_.__r.__words[2]);
          hasInputsLoop = realityio::hasInputsLoop(v141, v142);
          if ((v344 & 7) != 0)
          {
            v144 = (unsigned int *)(v344 & 0xFFFFFFFFFFFFFFF8);
            do
              v145 = __ldxr(v144);
            while (__stlxr(v145 - 2, v144));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v343);
          if (v342)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v342);
          if ((hasInputsLoop & 1) == 0)
          {
            v312 = 0;
            v313 = 0;
            v311 = &v312;
            pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v307, (uint64_t *)&__sz.__r_.__value_.__l.__size_, &__sz.__r_.__value_.__r.__words[2]);
            v325 = 0;
            v341 = 0;
            v342 = 0;
            v343 = 0;
            TgECS::emitShaderTree(v43, (uint64_t)&v307, (unint64_t *)&v325, (pxrInternal__aapl__pxrReserved__::UsdShadeInput **)&v341, (uint64_t **)&v311);
            v304[0] = &v341;
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)v304);
            if ((v310 & 7) != 0)
            {
              v146 = (unsigned int *)(v310 & 0xFFFFFFFFFFFFFFF8);
              do
                v147 = __ldxr(v146);
              while (__stlxr(v147 - 2, v146));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v309);
            if (v308)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v308);
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&__sz);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v341, &v325);
            if ((v344 & 7) != 0)
            {
              v148 = (unsigned int *)(v344 & 0xFFFFFFFFFFFFFFF8);
              do
                v149 = __ldxr(v148);
              while (__stlxr(v149 - 2, v148));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v343);
            if (v342)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v342);
            v150 = v317;
            if ((unint64_t)v317 >= v318)
            {
              v151 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v316, &v325);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v317, &v325);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v150 + 1, (_DWORD *)&v325 + 1);
              v151 = v150 + 2;
            }
            v317 = v151;
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__sz, v304);
            MEMORY[0x2348B274C](&v306, "__sgNode");
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v304, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v306);
            v155 = v317;
            if ((unint64_t)v317 >= v318)
            {
              v156 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v316, &v341);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v317, &v341);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v155 + 1, (_DWORD *)&v341 + 1);
              v156 = v155 + 2;
            }
            v317 = v156;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v341);
            if ((v306 & 7) != 0)
            {
              v157 = (unsigned int *)(v306 & 0xFFFFFFFFFFFFFFF8);
              do
                v158 = __ldxr(v157);
              while (__stlxr(v158 - 2, v157));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v304);
            v341 = 0;
            v342 = 0;
            v343 = 0;
            v159 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
            if (!v159)
              v159 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
            v160 = *((_QWORD *)v159 + 20) & 0xFFFFFFFFFFFFFFF8;
            if (v160)
            {
              v161 = (char *)(v160 + 16);
              if (*(char *)(v160 + 39) < 0)
                v161 = *(char **)v161;
            }
            else
            {
              v161 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(v304, v161);
            MEMORY[0x2348B26F8](&v306, v304);
            TgBase::emitTarget((uint64_t)v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v325, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v341, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v306);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v306);
            if (SHIBYTE(v305) < 0)
              operator delete(v304[0]);
            v304[0] = &v341;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v304);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v325);
            std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v311, v312);
          }
        }
        else if (__sz.__r_.__value_.__l.__size_
               && (*(_BYTE *)(__sz.__r_.__value_.__l.__size_ + 57) & 8) == 0
               && (*(unsigned int (**)(std::string *))(__sz.__r_.__value_.__r.__words[0] + 32))(&__sz))
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&__sz);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v341, &v306);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v341);
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back[abi:ne180100]((uint64_t *)&v316, &v306);
          v341 = 0;
          v342 = 0;
          v343 = 0;
          v152 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
          if (!v152)
            v152 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
          v153 = *((_QWORD *)v152 + 20) & 0xFFFFFFFFFFFFFFF8;
          if (v153)
          {
            v154 = (char *)(v153 + 16);
            if (*(char *)(v153 + 39) < 0)
              v154 = *(char **)v154;
          }
          else
          {
            v154 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&v311, v154);
          MEMORY[0x2348B26F8](v304, &v311);
          TgBase::emitTarget((uint64_t)v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v306, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v341, (pxrInternal__aapl__pxrReserved__::SdfPath *)v304);
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v304);
          if (SHIBYTE(v313) < 0)
            operator delete(v311);
          v311 = &v341;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
          v312 = 0;
          v313 = 0;
          v311 = &v312;
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v341, (uint64_t *)&__sz.__r_.__value_.__l.__size_, &__sz.__r_.__value_.__r.__words[2]);
          v303 = 0;
          v304[1] = 0;
          v304[0] = 0;
          v305 = 0;
          TgECS::emitShaderTree(v43, (uint64_t)&v341, &v303, (pxrInternal__aapl__pxrReserved__::UsdShadeInput **)v304, (uint64_t **)&v311);
          v325 = v304;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v325);
          pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v341);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__sz, &v325);
          MEMORY[0x2348B274C](&v303, "__sgNode");
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v325, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v303);
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back[abi:ne180100]((uint64_t *)&v316, v304);
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v304);
          if ((v303 & 7) != 0)
          {
            v162 = (unsigned int *)(v303 & 0xFFFFFFFFFFFFFFF8);
            do
              v163 = __ldxr(v162);
            while (__stlxr(v163 - 2, v162));
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v325);
          std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v311, v312);
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v306);
        }
        if ((BYTE8(v330) & 7) != 0)
        {
          v164 = (unsigned int *)(*((_QWORD *)&v330 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v165 = __ldxr(v164);
          while (__stlxr(v165 - 2, v164));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v330);
        if (*((_QWORD *)&v329 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v329 + 1));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v321);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v324);
        if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v320.__r_.__value_.__l.__data_);
        MEMORY[0x2348B1EC4](&__sz);
      }
      MEMORY[0x2348B20B0](&__p);
      if ((BYTE8(v334) & 7) != 0)
      {
        v166 = (unsigned int *)(*((_QWORD *)&v334 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v167 = __ldxr(v166);
        while (__stlxr(v167 - 2, v166));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v334);
      if (v333)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v333);
LABEL_94:
      v66 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v256);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v66);
      v67 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&p_p);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v67);
      v68 = (pxrInternal__aapl__pxrReserved__ *)v333;
      if (v333)
      {
        v69 = (unsigned int *)(v333 + 1);
        do
        {
          v70 = __ldxr(v69);
          v71 = v70 - 1;
        }
        while (__stlxr(v71, v69));
        if (!v71)
          (*(void (**)(pxrInternal__aapl__pxrReserved__ *))(*(_QWORD *)v68 + 8))(v68);
      }
      std::string::basic_string[abi:ne180100]<0>(&p_p, "realityio:functionConstants");
      ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      v73 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
      if (SBYTE7(v334) < 0)
      {
        operator delete((void *)p_p);
        if (!v73)
        {
LABEL_151:
          std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)&v325, 0);
          v92 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
          if (!v92)
            v92 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
          v93 = *((_QWORD *)v92 + 23) & 0xFFFFFFFFFFFFFFF8;
          if (v93)
          {
            v94 = (char *)(v93 + 16);
            if (*(char *)(v93 + 39) < 0)
              v94 = *(char **)v94;
          }
          else
          {
            v94 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&p_p, v94);
          MEMORY[0x2348B26F8](&v329, &p_p);
          TgBase::emitTarget((uint64_t)v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v314, &v316, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v329);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v329);
          if (SBYTE7(v334) < 0)
            operator delete((void *)p_p);
          goto LABEL_159;
        }
      }
      else if (!ValueAtPath)
      {
        goto LABEL_151;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>(v73))
      {
        v74 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtDictionary>(v73);
        MEMORY[0x2348B1C60](&v324, v74);
        v311 = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v324);
        v312 = v75;
        v76 = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v324);
        v78 = v77;
        while (1)
        {
          v79 = !v78 || v311 == v76;
          v80 = v79;
          if (v312 == v78 && v80)
            break;
          std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]((std::string *)&p_p, (__int128 *)v311 + 2);
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)((char *)&v334 + 8)))
          {
            std::operator+<char>();
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v320, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
            else
              v320 = __sz;
            std::operator+<char>();
            v82 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B2764](v304, &__p);
            if (((unint64_t)v304[0] & 0xFFFFFFFFFFFFFFF8) != 0)
              EmptyString = ((unint64_t)v304[0] & 0xFFFFFFFFFFFFFFF8) + 16;
            else
              EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v82);
            if (*(char *)(EmptyString + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v329, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
            }
            else
            {
              v84 = *(_OWORD *)EmptyString;
              *(_QWORD *)&v330 = *(_QWORD *)(EmptyString + 16);
              v329 = v84;
            }
            if (SBYTE7(v330) < 0)
              operator delete((void *)v329);
            if (((uint64_t)v304[0] & 7) != 0)
            {
              v85 = (unsigned int *)((unint64_t)v304[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v86 = __ldxr(v85);
              while (__stlxr(v86 - 2, v85));
            }
            if (SHIBYTE(v328) < 0)
              operator delete(__p);
            if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v320.__r_.__value_.__l.__data_);
            v329 = 0uLL;
            *(_QWORD *)&v330 = 0;
            v87 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
            if (!v87)
              v87 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
            v88 = *((_QWORD *)v87 + 20) & 0xFFFFFFFFFFFFFFF8;
            if (v88)
            {
              v89 = (char *)(v88 + 16);
              if (*(char *)(v88 + 39) < 0)
                v89 = *(char **)v89;
            }
            else
            {
              v89 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, v89);
            MEMORY[0x2348B26F8](v304, &__p);
            TgBase::emitTarget((uint64_t)v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v321, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v329, (pxrInternal__aapl__pxrReserved__::SdfPath *)v304);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v304);
            if (SHIBYTE(v328) < 0)
              operator delete(__p);
            __p = &v329;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            v90 = v317;
            if ((unint64_t)v317 >= v318)
            {
              v91 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v316, &v321);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v317, &v321);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v90 + 1, &v322);
              v91 = v90 + 2;
            }
            v317 = v91;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v321);
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__sz.__r_.__value_.__l.__data_);
          }
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)((char *)&v334 + 8));
          if (SBYTE7(v334) < 0)
            operator delete((void *)p_p);
          pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> *,std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(&v311);
        }
        std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v324, 0);
        v60 = v61;
      }
      goto LABEL_151;
    }
LABEL_307:
    TgBase::emitArray((uint64_t)v43, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v273, (uint64_t)&v270);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1);
    v168 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!v168)
      v168 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&p_p, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v168 + 216));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v169 = (uint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&p_p);
    v333 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy(v169, &v270);
    TgBase::emitConstant(v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__sz, (const pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
    v170 = v276;
    if ((unint64_t)v276 >= v277)
    {
      v171 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v275, &v273);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v276, &v273);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v170 + 1, &v274);
      v171 = v170 + 2;
    }
    v276 = v171;
    if (*a10)
    {
      v172 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v172)
        v172 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      v173 = *((_QWORD *)v172 + 51);
      p_p = v173;
      if ((v173 & 7) != 0)
      {
        v174 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
        do
          v175 = __ldxr(v174);
        while (__stxr(v175 + 2, v174));
        if ((v175 & 1) == 0)
          p_p &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a4);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v307, (const pxrInternal__aapl__pxrReserved__::TfToken *)&p_p);
      v176 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v176)
        v176 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v341);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v307);
      v177 = v276;
      if ((unint64_t)v276 >= v277)
      {
        v178 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v275, &v329);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v276, &v329);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v177 + 1, (_DWORD *)&v329 + 1);
        v178 = v177 + 2;
      }
      v276 = v178;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v329);
      if ((p_p & 7) != 0)
      {
        v180 = (unsigned int *)(p_p & 0xFFFFFFFFFFFFFFF8);
        do
          v181 = __ldxr(v180);
        while (__stlxr(v181 - 2, v180));
      }
    }
    else
    {
      if ((unint64_t)v171 >= v277)
      {
        v179 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v275, a4);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v171, a4);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v171 + 1, (_DWORD *)a4 + 1);
        v179 = v171 + 2;
      }
      v276 = v179;
    }
    v182 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*a5;
    if (a5[1] - *a5 != 8 || v284 == 0)
    {
      v184 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v184)
        v184 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v185 = *((_QWORD *)v184 + 26) & 0xFFFFFFFFFFFFFFF8;
      if (v185)
      {
        v186 = (char *)(v185 + 16);
        if (*(char *)(v185 + 39) < 0)
          v186 = *(char **)v186;
      }
      else
      {
        v186 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&p_p, v186);
      MEMORY[0x2348B26F8](&v329, &p_p);
      TgBase::emitTarget((uint64_t)v43, a1, &v275, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v329);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v329);
      if (SBYTE7(v334) < 0)
        operator delete((void *)p_p);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)a3);
      v187 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v329);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v187, v182);
      v189 = *((_QWORD *)&v329 + 1);
      if (*((_QWORD *)&v329 + 1))
      {
        v190 = (unsigned int *)(*((_QWORD *)&v329 + 1) + 8);
        do
        {
          v191 = __ldxr(v190);
          v192 = v191 - 1;
        }
        while (__stlxr(v192, v190));
        if (!v192)
          (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
      }
      v193 = (pxrInternal__aapl__pxrReserved__ *)v333;
      if (!v333 || (*((_BYTE *)v333 + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v333, v188);
      v194 = (_QWORD *)*((_QWORD *)v193 + 3);
      MEMORY[0x2348B274C](&v329, "Preliminary_Text");
      v195 = *v194 & 0xFFFFFFFFFFFFFFF8;
      v196 = (unsigned int *)(v329 & 0xFFFFFFFFFFFFFFF8);
      if ((v329 & 7) != 0)
      {
        do
          v197 = __ldxr(v196);
        while (__stlxr(v197 - 2, v196));
      }
      if ((unsigned int *)v195 == v196)
      {
        v261 = p_p;
        v262 = (pxrInternal__aapl__pxrReserved__ *)v333;
        if (v333)
        {
          v198 = (unint64_t *)(v333 + 6);
          do
            v199 = __ldxr(v198);
          while (__stxr(v199 + 1, v198));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v263, &v334);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v264, (_DWORD *)&v334 + 1);
        v265 = *((_QWORD *)&v334 + 1);
        if ((BYTE8(v334) & 7) != 0)
        {
          v200 = (unsigned int *)(*((_QWORD *)&v334 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v201 = __ldxr(v200);
          while (__stxr(v201 + 2, v200));
          if ((v201 & 1) == 0)
            v265 &= 0xFFFFFFFFFFFFFFF8;
        }
        v329 = 0uLL;
        *(_QWORD *)&v330 = 0;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v261, &v307);
        MEMORY[0x2348B274C](&__p, "content");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v307, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        v202 = *((_QWORD *)&v329 + 1);
        if (*((_QWORD *)&v329 + 1) >= (unint64_t)v330)
        {
          v203 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v329, &v341);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v329 + 1), &v341);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v202 + 4), (_DWORD *)&v341 + 1);
          v203 = v202 + 8;
        }
        *((_QWORD *)&v329 + 1) = v203;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v341);
        if ((__p & 7) != 0)
        {
          v204 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
          do
            v205 = __ldxr(v204);
          while (__stlxr(v205 - 2, v204));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v307);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v261, &v307);
        MEMORY[0x2348B274C](&__p, "font");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v307, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        v206 = *((_QWORD *)&v329 + 1);
        if (*((_QWORD *)&v329 + 1) >= (unint64_t)v330)
        {
          v207 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v329, &v341);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v329 + 1), &v341);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v206 + 4), (_DWORD *)&v341 + 1);
          v207 = v206 + 8;
        }
        *((_QWORD *)&v329 + 1) = v207;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v341);
        if ((__p & 7) != 0)
        {
          v208 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
          do
            v209 = __ldxr(v208);
          while (__stlxr(v209 - 2, v208));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v307);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v261, &v307);
        MEMORY[0x2348B274C](&__p, "pointSize");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v307, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        v210 = *((_QWORD *)&v329 + 1);
        if (*((_QWORD *)&v329 + 1) >= (unint64_t)v330)
        {
          v211 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v329, &v341);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v329 + 1), &v341);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v210 + 4), (_DWORD *)&v341 + 1);
          v211 = v210 + 8;
        }
        *((_QWORD *)&v329 + 1) = v211;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v341);
        if ((__p & 7) != 0)
        {
          v212 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
          do
            v213 = __ldxr(v212);
          while (__stlxr(v213 - 2, v212));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v307);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v261, &v307);
        MEMORY[0x2348B274C](&__p, "width");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v307, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        v214 = *((_QWORD *)&v329 + 1);
        if (*((_QWORD *)&v329 + 1) >= (unint64_t)v330)
        {
          v215 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v329, &v341);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v329 + 1), &v341);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v214 + 4), (_DWORD *)&v341 + 1);
          v215 = v214 + 8;
        }
        *((_QWORD *)&v329 + 1) = v215;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v341);
        if ((__p & 7) != 0)
        {
          v216 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
          do
            v217 = __ldxr(v216);
          while (__stlxr(v217 - 2, v216));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v307);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v261, &v307);
        MEMORY[0x2348B274C](&__p, "height");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v307, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        v218 = *((_QWORD *)&v329 + 1);
        if (*((_QWORD *)&v329 + 1) >= (unint64_t)v330)
        {
          v219 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v329, &v341);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v329 + 1), &v341);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v218 + 4), (_DWORD *)&v341 + 1);
          v219 = v218 + 8;
        }
        *((_QWORD *)&v329 + 1) = v219;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v341);
        if ((__p & 7) != 0)
        {
          v220 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
          do
            v221 = __ldxr(v220);
          while (__stlxr(v221 - 2, v220));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v307);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v261, &v307);
        MEMORY[0x2348B274C](&__p, "depth");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v307, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        v222 = *((_QWORD *)&v329 + 1);
        if (*((_QWORD *)&v329 + 1) >= (unint64_t)v330)
        {
          v223 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v329, &v341);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v329 + 1), &v341);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v222 + 4), (_DWORD *)&v341 + 1);
          v223 = v222 + 8;
        }
        *((_QWORD *)&v329 + 1) = v223;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v341);
        if ((__p & 7) != 0)
        {
          v224 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
          do
            v225 = __ldxr(v224);
          while (__stlxr(v225 - 2, v224));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v307);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v261, &v307);
        MEMORY[0x2348B274C](&__p, "wrapMode");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v307, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        v226 = *((_QWORD *)&v329 + 1);
        if (*((_QWORD *)&v329 + 1) >= (unint64_t)v330)
        {
          v227 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v329, &v341);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v329 + 1), &v341);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v226 + 4), (_DWORD *)&v341 + 1);
          v227 = v226 + 8;
        }
        *((_QWORD *)&v329 + 1) = v227;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v341);
        if ((__p & 7) != 0)
        {
          v228 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
          do
            v229 = __ldxr(v228);
          while (__stlxr(v229 - 2, v228));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v307);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v261, &v307);
        MEMORY[0x2348B274C](&__p, "horizontalAlignment");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v307, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        v230 = *((_QWORD *)&v329 + 1);
        if (*((_QWORD *)&v329 + 1) >= (unint64_t)v330)
        {
          v231 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v329, &v341);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v329 + 1), &v341);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v230 + 4), (_DWORD *)&v341 + 1);
          v231 = v230 + 8;
        }
        *((_QWORD *)&v329 + 1) = v231;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v341);
        if ((__p & 7) != 0)
        {
          v232 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
          do
            v233 = __ldxr(v232);
          while (__stlxr(v233 - 2, v232));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v307);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v261, &v307);
        MEMORY[0x2348B274C](&__p, "verticalAlignment");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v307, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
        v234 = *((_QWORD *)&v329 + 1);
        if (*((_QWORD *)&v329 + 1) >= (unint64_t)v330)
        {
          v235 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v329, &v341);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v329 + 1), &v341);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v234 + 4), (_DWORD *)&v341 + 1);
          v235 = v234 + 8;
        }
        *((_QWORD *)&v329 + 1) = v235;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v341);
        if ((__p & 7) != 0)
        {
          v236 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
          do
            v237 = __ldxr(v236);
          while (__stlxr(v237 - 2, v236));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v307);
        v238 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
        if (!v238)
          v238 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
        TgECS::genECSPath((TgECS *)&v320, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v261, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v238 + 392));
        v239 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
        if (!v239)
          v239 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
        v240 = *((_QWORD *)v239 + 43) & 0xFFFFFFFFFFFFFFF8;
        if (v240)
        {
          v241 = (char *)(v240 + 16);
          if (*(char *)(v240 + 39) < 0)
            v241 = *(char **)v241;
        }
        else
        {
          v241 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(&v341, v241);
        MEMORY[0x2348B26F8](&v307, &v341);
        TgBase::emitTarget((uint64_t)v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v320, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v329, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v307);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v307);
        if (SHIBYTE(v343) < 0)
          operator delete((void *)v341);
        v341 = (unint64_t)&v329;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
        if ((v265 & 7) != 0)
        {
          v242 = (unsigned int *)(v265 & 0xFFFFFFFFFFFFFFF8);
          do
            v243 = __ldxr(v242);
          while (__stlxr(v243 - 2, v242));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v263);
        if (v262)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v262);
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a9, &v320);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a9 + 4, (_DWORD *)v320.__r_.__value_.__r.__words + 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v320);
      }
      if ((BYTE8(v334) & 7) != 0)
      {
        v244 = (unsigned int *)(*((_QWORD *)&v334 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v245 = __ldxr(v244);
        while (__stlxr(v245 - 2, v244));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v334);
      if (v333)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v333);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__sz);
    p_p = (unint64_t)&v270;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v273);
    p_p = (unint64_t)&v275;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&v301, v302[0]);
  }
}

void sub_2301E7DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,pxrInternal__aapl__pxrReserved__::SdfPath *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,__int16 a55,uint64_t a56,uint64_t a57,char a58,int a59,__int16 a60)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x310]);
  STACK[0x310] = (unint64_t)&a55;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a58);
  STACK[0x310] = (unint64_t)&a60;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a24);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&STACK[0x250], (_QWORD *)STACK[0x258]);
  _Unwind_Resume(a1);
}

uint64_t gatherMaterialsByIndex(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t **a7)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v13;
  _DWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int HasPossiblyInheritedPrimvar;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  pxrInternal__aapl__pxrReserved__::UsdStage *v26;
  _DWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  realityio::tokens::EcsTokens_StaticTokenType *v31;
  realityio::tokens::EcsTokens_StaticTokenType *v32;
  unint64_t *v33;
  realityio::tokens::EcsTokens_StaticTokenType *v34;
  realityio::tokens::ActionTokens_StaticTokenType *v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t Name;
  char *v41;
  size_t v42;
  unint64_t *v43;
  char *v44;
  uint64_t String;
  char *v46;
  size_t v47;
  unint64_t *v48;
  char *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  realityio::tokens::ActionTokens_StaticTokenType *v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t v76;
  _QWORD v78[4];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD v83[2];
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  char v95[8];
  char v96[8];
  char v97[8];
  char v98[8];
  unint64_t v99;
  int v100;
  int v101;
  unint64_t v102;
  char *v103;
  char v104;
  unint64_t v105;
  _DWORD *v106;
  _DWORD *v107;
  unint64_t v108;
  _QWORD v109[4];

  v109[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v105, "/__builtin/standardPbrMaterial.__materialAsset");
  MEMORY[0x2348B26F8](v98, &v105);
  if (SHIBYTE(v107) < 0)
    operator delete((void *)v105);
  std::string::basic_string[abi:ne180100]<0>(&v105, "/__builtin/standardConstColorMaterial.__materialAsset");
  MEMORY[0x2348B26F8](v97, &v105);
  if (SHIBYTE(v107) < 0)
    operator delete((void *)v105);
  std::string::basic_string[abi:ne180100]<0>(&v105, "/__builtin/standardVertexColorMaterial.__materialAsset");
  MEMORY[0x2348B26F8](v96, &v105);
  if (SHIBYTE(v107) < 0)
    operator delete((void *)v105);
  std::string::basic_string[abi:ne180100]<0>(&v105, "/__builtin/standardNoMaterial.__materialAsset");
  MEMORY[0x2348B26F8](v95, &v105);
  if (SHIBYTE(v107) < 0)
    operator delete((void *)v105);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
  v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v105);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v13, a2);
  v14 = v106;
  if (v106)
  {
    v15 = v106 + 2;
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v18 = MEMORY[0x24BEE9DB0];
  v89 = 0;
  v87 = MEMORY[0x24BEE9DB0] + 16;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v84 = 0;
  memset(v83, 0, sizeof(v83));
  if (!v88 || (*(_BYTE *)(v88 + 57) & 8) != 0 || !(*(unsigned int (**)(uint64_t *))(v87 + 32))(&v87))
    goto LABEL_26;
  MEMORY[0x2348B274C](&v105, "displayColor");
  HasPossiblyInheritedPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPossiblyInheritedPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v87, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v105);
  if ((v105 & 7) != 0)
  {
    v20 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if (HasPossiblyInheritedPrimvar)
  {
    MEMORY[0x2348B274C](&v79, "displayColor");
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v87, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v79);
    if ((v79 & 7) != 0)
    {
      v22 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v105, &v79);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v85, (int *)&v79);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v86);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v105))
    {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v105);
      v76 = v79;
    }
    else
    {
      v76 = 0;
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
    if ((v109[0] & 7) != 0)
    {
      v72 = (unsigned int *)(v109[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v73 = __ldxr(v72);
      while (__stlxr(v73 - 2, v72));
    }
    if ((v108 & 7) != 0)
    {
      v74 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
      do
        v75 = __ldxr(v74);
      while (__stlxr(v75 - 2, v74));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107);
    if (v106)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v106);
  }
  else
  {
LABEL_26:
    v76 = 0;
  }
  v24 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, a2);
  if ((_QWORD *)(a3 + 8) != v24)
  {
    if (*(_QWORD *)&v83[0])
    {
      Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    }
    else
    {
      Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 36), (realityio::tokens::EcsTokens_StaticTokenType *)((char *)Data + 200));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v93, (int *)&v105);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v94);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105);
    goto LABEL_118;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v105);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v26, a2);
  v27 = v106;
  if (v106)
  {
    v28 = v106 + 2;
    do
    {
      v29 = __ldxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v78[3] = 0;
  v78[0] = v18 + 16;
  if (*(_QWORD *)&v83[0])
  {
    if (*(_QWORD *)&v83[0] == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v105, "/__builtin/standardConstColorMaterial");
      MEMORY[0x2348B26F8](&v102, &v105);
      if (SHIBYTE(v107) < 0)
        operator delete((void *)v105);
      v31 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v31)
        v31 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v102, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v31 + 200));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v93, (int *)&v105);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v94);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    }
    else
    {
      v34 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v34)
        v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v34 + 416));
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((pxrInternal__aapl__pxrReserved__::SdfPath *)v96, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v102);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v93, (int *)&v105);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v94);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      goto LABEL_113;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v105, &v85);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v105 + 1, &v86);
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v35 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v35)
      v35 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v36 = *((_QWORD *)v35 + 20) & 0xFFFFFFFFFFFFFFF8;
    if (v36)
    {
      v37 = (char *)(v36 + 16);
      if (*(char *)(v36 + 39) < 0)
        v37 = *(char **)v37;
    }
    else
    {
      v37 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v102, v37);
    MEMORY[0x2348B26F8](v109, &v102);
    v38 = a6[1];
    if (v38 >= a6[2])
    {
      v39 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a6, (uint64_t)&v105);
    }
    else
    {
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a6[1], (uint64_t)&v105);
      v39 = v38 + 40;
    }
    a6[1] = v39;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v109);
    v99 = (unint64_t)&v106;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105);
    if (v104 < 0)
      operator delete((void *)v102);
    if (v76)
    {
      Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v85);
      v41 = (char *)Name;
      if (*(char *)(Name + 23) >= 0)
        v42 = *(unsigned __int8 *)(Name + 23);
      else
        v42 = *(_QWORD *)(Name + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v105, v42 + 12);
      if (SHIBYTE(v107) >= 0)
        v43 = &v105;
      else
        v43 = (unint64_t *)v105;
      if (v42)
      {
        if (v41[23] >= 0)
          v44 = v41;
        else
          v44 = *(char **)v41;
        memmove(v43, v44, v42);
      }
      strcpy((char *)v43 + v42, "__colorSpace");
      MEMORY[0x2348B2764](&v99, &v105);
      if (SHIBYTE(v107) < 0)
        operator delete((void *)v105);
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v85);
      v46 = (char *)String;
      if (*(char *)(String + 23) >= 0)
        v47 = *(unsigned __int8 *)(String + 23);
      else
        v47 = *(_QWORD *)(String + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v105, v47 + 12);
      if (SHIBYTE(v107) >= 0)
        v48 = &v105;
      else
        v48 = (unint64_t *)v105;
      if (v47)
      {
        if (v46[23] >= 0)
          v49 = v46;
        else
          v49 = *(char **)v46;
        memmove(v48, v49, v47);
      }
      strcpy((char *)v48 + v47, "__colorSpace");
      MEMORY[0x2348B26F8](&v100, &v105);
      if (SHIBYTE(v107) < 0)
        operator delete((void *)v105);
      v102 = v76;
      v103 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
           + 1;
      if ((v76 & 7) != 0)
      {
        v50 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 2, v50));
        if ((v51 & 1) == 0)
          v102 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v105, &v100);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v105 + 1, &v101);
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue(&v106, &v102);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>>(a7, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v105, (uint64_t)&v105);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v106);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v102);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v100);
      if ((v99 & 7) != 0)
      {
        v52 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v105, &v93);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v105 + 1, &v94);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v100, &v85);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v101, &v86);
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v102 = (unint64_t)&v106;
    LOBYTE(v103) = 0;
    v106 = operator new(8uLL);
    v107 = v106;
    v108 = (unint64_t)(v106 + 2);
    v107 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v108, &v100, &v102, v106);
    v54 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v54)
      v54 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v55 = *((_QWORD *)v54 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (v55)
    {
      v56 = (char *)(v55 + 16);
      if (*(char *)(v55 + 39) < 0)
        v56 = *(char **)v56;
    }
    else
    {
      v56 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v102, v56);
    MEMORY[0x2348B26F8](v109, &v102);
    v57 = a6[1];
    if (v57 >= a6[2])
    {
      v58 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a6, (uint64_t)&v105);
    }
    else
    {
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a6[1], (uint64_t)&v105);
      v58 = v57 + 40;
    }
    a6[1] = v58;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v109);
    v99 = (unint64_t)&v106;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105);
    if (v104 < 0)
      operator delete((void *)v102);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v33 = (unint64_t *)&v100;
  }
  else
  {
    v32 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!v32)
      v32 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v32 + 288));
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((pxrInternal__aapl__pxrReserved__::SdfPath *)v95, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v102);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v93, (int *)&v105);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v94);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v33 = &v102;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v33);
LABEL_113:
  MEMORY[0x2348B21DC](v78);
  if ((v82 & 7) != 0)
  {
    v59 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
    do
      v60 = __ldxr(v59);
    while (__stlxr(v60 - 2, v59));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v81);
  if (v80)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v80);
LABEL_118:
  v62 = *a5;
  v61 = a5[1];
  v63 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a4, &v79, a2);
  v64 = *v63;
  if (!*v63)
  {
    v64 = (uint64_t *)operator new(0x30uLL);
    v106 = (_DWORD *)(a4 + 8);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v64 + 8, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v64 + 9, (_DWORD *)a2 + 1);
    v64[5] = 0;
    LOBYTE(v107) = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a4, v79, v63, v64);
    v105 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)&v105, 0);
  }
  v64[5] = (v61 - v62) >> 3;
  v65 = a5[1];
  if (v65 >= a5[2])
  {
    v66 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, &v93);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a5[1], &v93);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v65 + 4), &v94);
    v66 = v65 + 8;
  }
  a5[1] = v66;
  if ((v76 & 7) != 0)
  {
    v67 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFF8);
    do
      v68 = __ldxr(v67);
    while (__stlxr(v68 - 2, v67));
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v83);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v85);
  MEMORY[0x2348B21DC](&v87);
  if ((v92 & 7) != 0)
  {
    v69 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v91);
  if (v90)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v90);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v93);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v95);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v97);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v98);
}

void sub_2301E96E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,int a37,char a38)
{
  uint64_t v38;

  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(v38 - 144));
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a26);
  MEMORY[0x2348B21DC](&a28);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a32);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a36);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a38);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v38 - 208));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v38 - 200));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v38 - 192));
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::getInputsForTransform(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t *a2, int a3)
{
  realityio::tokens::ActionTokens_StaticTokenType *Data;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *OpName;
  uint64_t EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  uint64_t v16;
  const char *v17;
  int v18;
  size_t v19;
  size_t v20;
  BOOL v21;
  size_t v22;
  const char *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  _DWORD *v28;
  realityio::tokens::ActionTokens_StaticTokenType *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  realityio::tokens::ActionTokens_StaticTokenType *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  realityio::tokens::ActionTokens_StaticTokenType *v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  realityio::tokens::ActionTokens_StaticTokenType *v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  realityio::tokens::ActionTokens_StaticTokenType *v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  realityio::tokens::ActionTokens_StaticTokenType *v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v62;
  uint64_t v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *__p[2];
  char v71;
  void *v72;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *v73;
  char v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80[8];

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v62 = MEMORY[0x24BEE9D78] + 16;
  if (v63
    && (*(_BYTE *)(v63 + 57) & 8) == 0
    && (*(unsigned int (**)(uint64_t *))(MEMORY[0x24BEE9D78] + 48))(&v62))
  {
    v80[0] = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v62, v80);
    if (v72 != v73)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, v66);
      MEMORY[0x2348B274C](v64, "xformOpOrder");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v66, (const pxrInternal__aapl__pxrReserved__::TfToken *)v64);
      v76 = 0;
      v77 = 0;
      v78 = 0;
      Data = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v5 = *((_QWORD *)Data + 20) & 0xFFFFFFFFFFFFFFF8;
      if (v5)
      {
        v6 = (char *)(v5 + 16);
        if (*(char *)(v5 + 39) < 0)
          v6 = *(char **)v6;
      }
      else
      {
        v6 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v6);
      MEMORY[0x2348B26F8](&v79, __p);
      v7 = a2[1];
      if (v7 >= a2[2])
      {
        v8 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v75);
      }
      else
      {
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v75);
        v8 = v7 + 40;
      }
      a2[1] = v8;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
      v68[0] = &v76;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
      if (v71 < 0)
        operator delete(__p[0]);
      if (((uint64_t)v64[0] & 7) != 0)
      {
        v9 = (unsigned int *)((unint64_t)v64[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v66);
      v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v72;
      v11 = v73;
      if (v72 != v73)
      {
        do
        {
          OpName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(v12);
          if (((unint64_t)v75 & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = ((unint64_t)v75 & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(OpName);
          if ((*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8) != 0)
            v16 = (*(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
          if (*(char *)(v16 + 23) >= 0)
            v17 = (const char *)v16;
          else
            v17 = *(const char **)v16;
          v18 = *(char *)(EmptyString + 23);
          if (v18 >= 0)
            v19 = *(unsigned __int8 *)(EmptyString + 23);
          else
            v19 = *(_QWORD *)(EmptyString + 8);
          v20 = strlen(v17);
          if (v19 >= v20)
          {
            v22 = v20;
            if (v18 >= 0)
              v23 = (const char *)EmptyString;
            else
              v23 = *(const char **)EmptyString;
            v21 = strncmp(v23, v17, v22) == 0;
          }
          else
          {
            v21 = 0;
          }
          if ((v75 & 7) != 0)
          {
            v24 = (unsigned int *)((unint64_t)v75 & 0xFFFFFFFFFFFFFFF8);
            do
              v25 = __ldxr(v24);
            while (__stlxr(v25 - 2, v24));
          }
          if (!v21)
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, &v75);
            pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(v12);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v75, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
            if (((uint64_t)__p[0] & 7) != 0)
            {
              v26 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
              do
                v27 = __ldxr(v26);
              while (__stlxr(v27 - 2, v26));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            v28 = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v28, v66);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v75 + 1, (_DWORD *)v66 + 1);
            v76 = 0;
            v77 = 0;
            v78 = 0;
            v29 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
            if (!v29)
              v29 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
            v30 = *((_QWORD *)v29 + 20) & 0xFFFFFFFFFFFFFFF8;
            if (v30)
            {
              v31 = (char *)(v30 + 16);
              if (*(char *)(v30 + 39) < 0)
                v31 = *(char **)v31;
            }
            else
            {
              v31 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v31);
            MEMORY[0x2348B26F8](&v79, __p);
            v32 = a2[1];
            if (v32 >= a2[2])
            {
              v33 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v75);
            }
            else
            {
              std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v75);
              v33 = v32 + 40;
            }
            a2[1] = v33;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
            v68[0] = &v76;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
            if (v71 < 0)
              operator delete(__p[0]);
            if (a3)
            {
              v76 = 0;
              v77 = 0;
              v78 = 0;
              v34 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
              if (!v34)
                v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
              v35 = *((_QWORD *)v34 + 33) & 0xFFFFFFFFFFFFFFF8;
              if (v35)
              {
                v36 = (char *)(v35 + 16);
                if (*(char *)(v35 + 39) < 0)
                  v36 = *(char **)v36;
              }
              else
              {
                v36 = "";
              }
              std::string::basic_string[abi:ne180100]<0>(__p, v36);
              MEMORY[0x2348B26F8](&v79, __p);
              v37 = a2[1];
              if (v37 >= a2[2])
              {
                v38 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v75);
              }
              else
              {
                std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v75);
                v38 = v37 + 40;
              }
              a2[1] = v38;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
              v68[0] = &v76;
              std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
              if (v71 < 0)
                operator delete(__p[0]);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v66);
          }
          v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)((char *)v12 + 136);
        }
        while (v12 != v11);
      }
    }
    v75 = &v72;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](&v75);
  }
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v72, "framesPerSecond");
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v39 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v39)
      v39 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v40 = *((_QWORD *)v39 + 20) & 0xFFFFFFFFFFFFFFF8;
    if (v40)
    {
      v41 = (char *)(v40 + 16);
      if (*(char *)(v40 + 39) < 0)
        v41 = *(char **)v41;
    }
    else
    {
      v41 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v41);
    MEMORY[0x2348B26F8](&v79, __p);
    v42 = a2[1];
    if (v42 >= a2[2])
    {
      v43 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v75);
    }
    else
    {
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v75);
      v43 = v42 + 40;
    }
    a2[1] = v43;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
    v68[0] = &v76;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
    if (v71 < 0)
      operator delete(__p[0]);
    if (v74 < 0)
      operator delete(v72);
    std::string::basic_string[abi:ne180100]<0>(__p, "startTimeCode");
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v44 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v44)
      v44 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v45 = *((_QWORD *)v44 + 20) & 0xFFFFFFFFFFFFFFF8;
    if (v45)
    {
      v46 = (char *)(v45 + 16);
      if (*(char *)(v45 + 39) < 0)
        v46 = *(char **)v46;
    }
    else
    {
      v46 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(v68, v46);
    MEMORY[0x2348B26F8](&v79, v68);
    v47 = a2[1];
    if (v47 >= a2[2])
    {
      v48 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v75);
    }
    else
    {
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v75);
      v48 = v47 + 40;
    }
    a2[1] = v48;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
    v66[0] = &v76;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
    if (v69 < 0)
      operator delete(v68[0]);
    if (v71 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(v68, "endTimeCode");
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v49 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v49)
      v49 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v50 = *((_QWORD *)v49 + 20) & 0xFFFFFFFFFFFFFFF8;
    if (v50)
    {
      v51 = (char *)(v50 + 16);
      if (*(char *)(v50 + 39) < 0)
        v51 = *(char **)v51;
    }
    else
    {
      v51 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(v66, v51);
    MEMORY[0x2348B26F8](&v79, v66);
    v52 = a2[1];
    if (v52 >= a2[2])
    {
      v53 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v75);
    }
    else
    {
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v75);
      v53 = v52 + 40;
    }
    a2[1] = v53;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
    v64[0] = &v76;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
    if (v67 < 0)
      operator delete(v66[0]);
    if (v69 < 0)
      operator delete(v68[0]);
    std::string::basic_string[abi:ne180100]<0>(v66, "timeCodesPerSecond");
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v54 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v54)
      v54 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v55 = *((_QWORD *)v54 + 20) & 0xFFFFFFFFFFFFFFF8;
    if (v55)
    {
      v56 = (char *)(v55 + 16);
      if (*(char *)(v55 + 39) < 0)
        v56 = *(char **)v56;
    }
    else
    {
      v56 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(v64, v56);
    MEMORY[0x2348B26F8](&v79, v64);
    v57 = a2[1];
    if (v57 >= a2[2])
    {
      v58 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(a2, (uint64_t)&v75);
    }
    else
    {
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(a2[1], (uint64_t)&v75);
      v58 = v57 + 40;
    }
    a2[1] = v58;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
    *(_QWORD *)v80 = &v76;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
    if (v65 < 0)
      operator delete(v64[0]);
    if (v67 < 0)
      operator delete(v66[0]);
  }
  return MEMORY[0x2348B2080](&v62);
}

void sub_2301EA430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  unsigned int *v48;
  unsigned int v49;

  TgBase::TargetInfoT::~TargetInfoT((TgBase::TargetInfoT *)(v46 - 136));
  if (a40 < 0)
    operator delete(__p);
  if ((a17 & 7) != 0)
  {
    v48 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a23);
  *(_QWORD *)(v46 - 136) = &a41;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 136));
  MEMORY[0x2348B2080](&a14);
  _Unwind_Resume(a1);
}

uint64_t TgECS::ecsBlendShapeWeights(TgECS *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdPrim *a3, const pxrInternal__aapl__pxrReserved__::SdfPath **a4)
{
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  int BlendShapeNameAndTargetPaths;
  unsigned int *v14;
  unsigned int v15;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  realityio::tokens::ActionTokens_StaticTokenType *v18;
  unint64_t v19;
  char *v20;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v21;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v22;
  realityio::tokens::ActionTokens_StaticTokenType *v23;
  unint64_t v24;
  char *v25;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v26;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  unsigned int *v28;
  unsigned int v29;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v30;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v31;
  realityio::tokens::ActionTokens_StaticTokenType *v32;
  unint64_t v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v39;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v40;
  realityio::tokens::ActionTokens_StaticTokenType *v41;
  unint64_t v42;
  char *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  realityio::tokens::ActionTokens_StaticTokenType *v52;
  unint64_t v53;
  char *v54;
  realityio::tokens::EcsTokens_StaticTokenType *v55;
  realityio::tokens::ActionTokens_StaticTokenType *v56;
  unint64_t v57;
  char *v58;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v60;
  pxrInternal__aapl__pxrReserved__::UsdPrim *v61;
  void *v63[2];
  char v64;
  char v65[8];
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  void *__p;
  uint64_t v71;
  _BYTE v72[8];
  uint64_t v73;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v74;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  void **v82;
  int v83;
  int v84;
  uint64_t v85;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v86;
  void **v87;
  void **v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v94;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v95;
  unint64_t v96;
  int v97;
  int v98;
  void **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
  TgECS::genECSPath((TgECS *)&v97, a3, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)Data + 88));
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v8 = *a4;
  v60 = a4[1];
  if (*a4 == v60)
    goto LABEL_109;
  v61 = a3;
  do
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath(v61, v8);
    v81 = (int)v86;
    v82 = v87;
    if (v87)
    {
      v9 = (unint64_t *)(v87 + 6);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v83, &v88);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v84, (_DWORD *)&v88 + 1);
    v85 = v89;
    if ((v89 & 7) != 0)
    {
      v11 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v85 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v85 & 7) != 0)
    {
      v14 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
    if (v82)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v82);
    if (BlendShapeNameAndTargetPaths)
    {
      v16 = v95;
      if ((unint64_t)v95 >= v96)
      {
        v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v94, &v92);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v95, &v92);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v16 + 1, &v93);
        v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v16 + 8);
      }
      v95 = v17;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v18 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v18)
        v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v19 = *((_QWORD *)v18 + 20) & 0xFFFFFFFFFFFFFFF8;
      if (v19)
      {
        v20 = (char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0)
          v20 = *(char **)v20;
      }
      else
      {
        v20 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&v99, v20);
      MEMORY[0x2348B26F8](&__p, &v99);
      TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v92, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v77, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
      if (SHIBYTE(v101) < 0)
        operator delete(v99);
      v99 = &v77;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v99);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationshipAtPath((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v86, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90);
      v74 = 0;
      v75 = 0;
      v76 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
      v21 = v95;
      if ((unint64_t)v95 >= v96)
      {
        v22 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v94, &v90);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v95, &v90);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v21 + 1, &v91);
        v22 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 + 8);
      }
      v95 = v22;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v23 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v23)
        v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v24 = *((_QWORD *)v23 + 20) & 0xFFFFFFFFFFFFFFF8;
      if (v24)
      {
        v25 = (char *)(v24 + 16);
        if (*(char *)(v24 + 39) < 0)
          v25 = *(char **)v25;
      }
      else
      {
        v25 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v25);
      MEMORY[0x2348B26F8](&v66, &__p);
      TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v90, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v99, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v66);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
      if ((v72[7] & 0x80000000) != 0)
        operator delete(__p);
      __p = &v99;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v26 = v74;
      v27 = v75;
      while (v26 != v27)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v86, v26);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v99))
        {
          MEMORY[0x2348B274C](&v66, "offsets");
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v99, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v66);
          if ((v66 & 7) != 0)
          {
            v28 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
            do
              v29 = __ldxr(v28);
            while (__stlxr(v29 - 2, v28));
          }
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p))
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v66);
            v30 = v95;
            if ((unint64_t)v95 >= v96)
            {
              v31 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v94, &v66);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v95, &v66);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v30 + 1, (_DWORD *)&v66 + 1);
              v31 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v30 + 8);
            }
            v95 = v31;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v69);
            v66 = 0;
            v67 = 0;
            v68 = 0;
            v32 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
            if (!v32)
              v32 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
            v33 = *((_QWORD *)v32 + 20) & 0xFFFFFFFFFFFFFFF8;
            if (v33)
            {
              v34 = (char *)(v33 + 16);
              if (*(char *)(v33 + 39) < 0)
                v34 = *(char **)v34;
            }
            else
            {
              v34 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(v63, v34);
            MEMORY[0x2348B26F8](v65, v63);
            TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)v65);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v65);
            if (v64 < 0)
              operator delete(v63[0]);
            v63[0] = &v66;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
          }
          if ((v73 & 7) != 0)
          {
            v35 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
            do
              v36 = __ldxr(v35);
            while (__stlxr(v36 - 2, v35));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v72);
          if (v71)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v71);
          MEMORY[0x2348B274C](&v66, "pointIndices");
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v99, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v66);
          if ((v66 & 7) != 0)
          {
            v37 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFFFF8);
            do
              v38 = __ldxr(v37);
            while (__stlxr(v38 - 2, v37));
          }
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p))
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v66);
            v39 = v95;
            if ((unint64_t)v95 >= v96)
            {
              v40 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v94, &v66);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v95, &v66);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v39 + 1, (_DWORD *)&v66 + 1);
              v40 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v39 + 8);
            }
            v95 = v40;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, &v69);
            v66 = 0;
            v67 = 0;
            v68 = 0;
            v41 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
            if (!v41)
              v41 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
            v42 = *((_QWORD *)v41 + 20) & 0xFFFFFFFFFFFFFFF8;
            if (v42)
            {
              v43 = (char *)(v42 + 16);
              if (*(char *)(v42 + 39) < 0)
                v43 = *(char **)v43;
            }
            else
            {
              v43 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(v63, v43);
            MEMORY[0x2348B26F8](v65, v63);
            TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)v65);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v65);
            if (v64 < 0)
              operator delete(v63[0]);
            v63[0] = &v66;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v69);
          }
          if ((v73 & 7) != 0)
          {
            v44 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v72);
          if (v71)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v71);
        }
        if ((v102 & 7) != 0)
        {
          v46 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
          do
            v47 = __ldxr(v46);
          while (__stlxr(v47 - 2, v46));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
        if (v100)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v100);
        v26 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v26 + 8);
      }
      v99 = (void **)&v74;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v99);
      if ((v80 & 7) != 0)
      {
        v48 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
      if (v78)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v78);
    }
    if ((v89 & 7) != 0)
    {
      v50 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v88);
    if (v87)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v87);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v90);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v92);
    v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
  }
  while (v8 != v60);
  if (v95 == v94)
  {
LABEL_109:
    *(_QWORD *)a1 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  }
  else
  {
    v52 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v52)
      v52 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v53 = *((_QWORD *)v52 + 6) & 0xFFFFFFFFFFFFFFF8;
    if (v53)
    {
      v54 = (char *)(v53 + 16);
      if (*(char *)(v53 + 39) < 0)
        v54 = *(char **)v54;
    }
    else
    {
      v54 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v86, v54);
    MEMORY[0x2348B26F8](&v77, &v86);
    TgBase::emitTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v97, &v94, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v77);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v77);
    if (SHIBYTE(v88) < 0)
      operator delete(v86);
    v55 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!v55)
      v55 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    TgECS::genECSPath(a1, v61, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v55 + 96));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v99, &v97);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v99 + 1, &v98);
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v77 = &v86;
    LOBYTE(v78) = 0;
    v86 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)operator new(8uLL);
    v87 = (void **)v86;
    v88 = (void **)(v86 + 1);
    v87 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v88, &v99, &v100, v86);
    v56 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v56)
      v56 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v57 = *((_QWORD *)v56 + 5) & 0xFFFFFFFFFFFFFFF8;
    if (v57)
    {
      v58 = (char *)(v57 + 16);
      if (*(char *)(v57 + 39) < 0)
        v58 = *(char **)v58;
    }
    else
    {
      v58 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v77, v58);
    MEMORY[0x2348B26F8](&__p, &v77);
    TgBase::emitTarget(a2, a1, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v86, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
    if (SHIBYTE(v79) < 0)
      operator delete(v77);
    v77 = &v86;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v99);
  }
  v86 = &v94;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v97);
}

void sub_2301EB28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::SdfPath *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  __p = (void *)(v50 - 208);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v50 - 128));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a10);
  *(_QWORD *)(v50 - 208) = v50 - 160;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 208));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v50 - 136));
  _Unwind_Resume(a1);
}

uint64_t TgECS::ecsMeshDeformation(TgECS *a1, uint64_t a2, int *a3, _QWORD *a4, char a5)
{
  const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v10;
  char v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  char BlendShapeNameAndTargetPaths;
  char v19;
  unsigned int *v20;
  unsigned int v21;
  realityio::tokens::EcsTokens_StaticTokenType *Data;
  realityio::tokens::ActionTokens_StaticTokenType *v23;
  unint64_t v24;
  char *v25;
  void *__p[2];
  char v28;
  _BYTE v29[8];
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v35[3];
  _BYTE v36[8];
  _BYTE v37[8];

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v35[0] = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(MEMORY[0x24BEE9CF0] + 16);
  v11 = realityio::isCatmullClarkSurface((realityio *)v35, v10) | a5;
  MEMORY[0x2348B1AF8](v35);
  if ((v11 & 1) != 0)
    goto LABEL_19;
  v30 = *a3;
  v12 = *((_QWORD *)a3 + 1);
  v31 = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 48);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, a3 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v33, a3 + 5);
  v15 = *((_QWORD *)a3 + 3);
  v34 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*a4 == a4[1])
    v19 = BlendShapeNameAndTargetPaths;
  else
    v19 = 1;
  if ((v34 & 7) != 0)
  {
    v20 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
  if (v31)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
  if ((v19 & 1) != 0)
  {
LABEL_19:
    Data = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    TgECS::genECSPath(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a3, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)Data + 256));
    memset(v35, 0, sizeof(v35));
    v23 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v23)
      v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v24 = *((_QWORD *)v23 + 27) & 0xFFFFFFFFFFFFFFF8;
    if (v24)
    {
      v25 = (char *)(v24 + 16);
      if (*(char *)(v24 + 39) < 0)
        v25 = *(char **)v25;
    }
    else
    {
      v25 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v25);
    MEMORY[0x2348B26F8](v29, __p);
    TgBase::emitTarget(a2, a1, v35, (pxrInternal__aapl__pxrReserved__::SdfPath *)v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v29);
    if (v28 < 0)
      operator delete(__p[0]);
    __p[0] = v35;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v37);
}

void sub_2301EB830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a18);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v24 - 80));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v24 - 72));
  _Unwind_Resume(a1);
}

void `anonymous namespace'::appendAnimControls(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  int v18;
  int v19;

  std::string::basic_string[abi:ne180100]<0>(v16, "framesPerSecond");
  v2 = a1[1];
  if (v2 >= a1[2])
  {
    v3 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, &v18);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1[1], &v18);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v2 + 4), &v19);
    v3 = v2 + 8;
  }
  a1[1] = v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "startTimeCode");
  v4 = a1[1];
  if (v4 >= a1[2])
  {
    v5 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, &v18);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1[1], &v18);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v4 + 4), &v19);
    v5 = v4 + 8;
  }
  a1[1] = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v15 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v12, "endTimeCode");
  v6 = a1[1];
  if (v6 >= a1[2])
  {
    v7 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, &v18);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1[1], &v18);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v6 + 4), &v19);
    v7 = v6 + 8;
  }
  a1[1] = v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v13 < 0)
    operator delete(v12[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, "timeCodesPerSecond");
  v8 = a1[1];
  if (v8 >= a1[2])
  {
    v9 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, &v18);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1[1], &v18);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v8 + 4), &v19);
    v9 = v8 + 8;
  }
  a1[1] = v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_2301EBAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 - 40));
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t boundPrimHasSkelAnimationSource(pxrInternal__aapl__pxrReserved__::UsdPrim *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *Data;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::SdfPath **v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7[3];
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  Data = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(MEMORY[0x24BEE8040]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(a1, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)Data + 136));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v8))
  {
    memset(v7, 0, sizeof(v7));
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
    v6 = v7;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  }
  if ((v11 & 7) != 0)
  {
    v3 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  return 0;
}

void sub_2301EBD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a12);
  if (a11)
  {
    v18 = a11 + 2;
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
  }
  a12 = (void **)&a16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)(v16 - 64));
  _Unwind_Resume(a1);
}

void TgECS::gatherBoundMeshes(TgECS *a1, Exec **a2, int *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  pxrInternal__aapl__pxrReserved__::UsdStage *v12;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v13;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  void **v16;
  char *v17;
  void *v18;
  uint64_t *v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *Data;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  pxrInternal__aapl__pxrReserved__ *v47;
  pxrInternal__aapl__pxrReserved__::UsdStage *v48;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t UsdPrimDefaultPredicate;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  unsigned int *v70;
  unsigned int v71;
  _DWORD *v72;
  _DWORD *v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  realityio::tokens::EcsTokens_StaticTokenType *v106;
  _DWORD *v107;
  unint64_t v108;
  _DWORD *v109;
  _DWORD *v110;
  realityio::tokens::EcsTokens_StaticTokenType *v111;
  uint64_t *v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  uint64_t *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t *v127;
  unsigned int *v128;
  unsigned int v129;
  realityio::tokens::ActionTokens_StaticTokenType *v130;
  unint64_t v131;
  char *v132;
  realityio::tokens::ActionTokens_StaticTokenType *v133;
  unint64_t v134;
  char *v135;
  realityio::tokens::ActionTokens_StaticTokenType *v136;
  unint64_t v137;
  char *v138;
  realityio::tokens::ActionTokens_StaticTokenType *v139;
  unint64_t v140;
  char *v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t *v148;
  unsigned int *v149;
  unsigned int v150;
  uint64_t *v151;
  unsigned int *v152;
  unsigned int v153;
  uint64_t *v154;
  unsigned int *v155;
  unsigned int v156;
  realityio::tokens::ActionTokens_StaticTokenType *v157;
  unint64_t v158;
  char *v159;
  realityio::tokens::ActionTokens_StaticTokenType *v160;
  unint64_t v161;
  char *v162;
  realityio::tokens::ActionTokens_StaticTokenType *v163;
  unint64_t v164;
  char *v165;
  _DWORD *v166;
  _DWORD *v167;
  void **v168;
  char *i;
  realityio::tokens::ActionTokens_StaticTokenType *v170;
  unint64_t v171;
  char *v172;
  _DWORD *v173;
  _DWORD *j;
  char *v175;
  char *v176;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v177;
  unint64_t *v178;
  unint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  int BlendShapeNameAndTargetPaths;
  unsigned int *v183;
  unsigned int v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int *v189;
  unsigned int v190;
  realityio::tokens::ActionTokens_StaticTokenType *v191;
  unint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int64x2_t v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int *v215;
  unsigned int v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  unsigned int *v223;
  unsigned int v224;
  realityio::tokens::EcsTokens_StaticTokenType *v225;
  unint64_t *v226;
  unint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  realityio::tokens::EcsTokens_StaticTokenType *v230;
  realityio::tokens::ActionTokens_StaticTokenType *v231;
  unint64_t v232;
  char *v233;
  unsigned int *v234;
  unsigned int v235;
  realityio::tokens::ActionTokens_StaticTokenType *v236;
  unint64_t v237;
  char *v238;
  uint64_t v239;
  unsigned int *v240;
  unsigned int v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  unsigned int *v248;
  unsigned int v249;
  realityio::tokens::EcsTokens_StaticTokenType *v250;
  realityio::tokens::ActionTokens_StaticTokenType *v251;
  unint64_t v252;
  char *v253;
  unsigned int *v254;
  unsigned int v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _DWORD *v270;
  uint64_t *v271;
  const pxrInternal__aapl__pxrReserved__::SdfPath *k;
  int v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  int v285;
  int v286;
  uint64_t v287;
  _QWORD v288[3];
  int v289;
  uint64_t **v290;
  int v291;
  int v292;
  uint64_t v293;
  char v294[8];
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  uint64_t v301;
  int v302;
  int v303;
  _QWORD v304[3];
  int v305;
  int v306;
  int v307;
  uint64_t v308;
  int v309;
  int v310;
  uint64_t v311;
  int v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  int v317;
  uint64_t v318;
  char v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  uint64_t v325;
  int v326;
  int v327;
  uint64_t v328;
  char v329;
  void **p_p;
  char *v331;
  unint64_t v332;
  uint64_t v333;
  void *__p;
  void *v335;
  __int128 v336;
  uint64_t v337;
  void *v338;
  uint64_t **v339;
  __int128 v340;
  char **v341;
  _OWORD v342[2];
  char **v343;
  void *v344;
  int v345;
  int v346;
  __int128 v347;
  uint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  _DWORD *v353;
  _DWORD *v354;
  unint64_t v355;
  uint64_t **v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  _DWORD *v360;
  unint64_t v361;
  _DWORD *v362;
  _DWORD *v363;
  unint64_t v364;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v365;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v366;
  unint64_t v367;
  int64x2_t v368;
  char *v369;
  uint64_t v370;
  int v371;
  int v372;
  _QWORD **v373;
  _QWORD *v374;
  _QWORD v375[3];

  v375[1] = *MEMORY[0x24BDAC8D0];
  v368 = 0uLL;
  v369 = 0;
  v365 = 0;
  v366 = 0;
  v367 = 0;
  v362 = 0;
  v363 = 0;
  v364 = 0;
  v359 = 0;
  v360 = 0;
  v361 = 0;
  v357 = 0;
  v358 = 0;
  v356 = &v357;
  v8 = *a7;
  v266 = a7[1];
  if (*a7 != v266)
  {
    v267 = (uint64_t)(a2 + 25);
    v271 = (uint64_t *)(a2 + 11);
    v264 = (uint64_t)(a2 + 31);
    v265 = MEMORY[0x24BEE9D50] + 16;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, v342);
      v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__equal_range_multi<pxrInternal__aapl__pxrReserved__::SdfPath>(v267, (pxrInternal__aapl__pxrReserved__::SdfPath *)v342);
      v11 = v10;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v342);
      if (v9 != v11)
      {
        do
        {
          v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v271);
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 36));
          if (!realityio::isGuide((realityio *)v342, v13))
          {
            v14 = v366;
            if ((unint64_t)v366 >= v367)
            {
              v15 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v365, (_DWORD *)v9 + 9);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v366, (_DWORD *)v9 + 9);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v14 + 1, (_DWORD *)v9 + 10);
              v15 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v14 + 8);
            }
            v366 = v15;
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, &v349);
            v16 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v356, &__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 36));
            v17 = (char *)*v16;
            if (!*v16)
            {
              v17 = (char *)operator new(0x30uLL);
              v339 = &v357;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v17 + 7, (_DWORD *)v9 + 9);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v17 + 8, (_DWORD *)v9 + 10);
              *(_QWORD *)(v17 + 36) = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
              LOBYTE(v340) = 1;
              v18 = __p;
              *(_QWORD *)v17 = 0;
              *((_QWORD *)v17 + 1) = 0;
              *((_QWORD *)v17 + 2) = v18;
              *v16 = v17;
              v19 = (uint64_t *)v17;
              if (*v356)
              {
                v356 = (uint64_t **)*v356;
                v19 = (uint64_t *)*v16;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v357, v19);
              ++v358;
              v338 = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)&v338, 0);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v17 + 36), (int *)&v349);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v17 + 40));
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v349);
          }
          if ((BYTE8(v342[1]) & 7) != 0)
          {
            v20 = (unsigned int *)(*((_QWORD *)&v342[1] + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v21 = __ldxr(v20);
            while (__stlxr(v21 - 2, v20));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v342[1]);
          if (*((_QWORD *)&v342[0] + 1))
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v342[0] + 1));
          v22 = (_QWORD *)v9[1];
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = (_QWORD *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v23 = (_QWORD *)v9[2];
              v24 = *v23 == (_QWORD)v9;
              v9 = v23;
            }
            while (!v24);
          }
          v9 = v23;
        }
        while (v23 != v11);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v353 = (_DWORD *)v265;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, v342);
      v25 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(v264, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v342);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v342);
      if (v25)
      {
        LODWORD(v342[0]) = *(_DWORD *)v8;
        v26 = *(_QWORD *)(v8 + 8);
        *((_QWORD *)&v342[0] + 1) = v26;
        if (v26)
        {
          v27 = (unint64_t *)(v26 + 48);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v342[1], (_DWORD *)(v8 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v342[1] + 1, (_DWORD *)(v8 + 20));
        v29 = *(_QWORD *)(v8 + 24);
        *((_QWORD *)&v342[1] + 1) = v29;
        if ((v29 & 7) != 0)
        {
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 2, v30));
          if ((v31 & 1) == 0)
            *((_QWORD *)&v342[1] + 1) &= 0xFFFFFFFFFFFFFFF8;
        }
        while ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)v342) & 1) == 0)
        {
          Data = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(MEMORY[0x24BEE8040]);
          if (!Data)
            Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v342, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)Data + 136));
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v349)
            && (pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v349) & 1) != 0)
          {
            goto LABEL_51;
          }
          if ((v352 & 7) != 0)
          {
            v33 = (unsigned int *)(v352 & 0xFFFFFFFFFFFFFFF8);
            do
              v34 = __ldxr(v33);
            while (__stlxr(v34 - 2, v33));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v351);
          if (v350)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v350);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)v342, (uint64_t)&v338);
          LODWORD(v342[0]) = (_DWORD)v338;
          v35 = (uint64_t)v339;
          v339 = 0;
          v36 = *((_QWORD *)&v342[0] + 1);
          *((_QWORD *)&v342[0] + 1) = v35;
          if (v36)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v342[1], (int *)&v340);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v342[1] + 4);
          if ((BYTE8(v342[1]) & 7) != 0)
          {
            v37 = (unsigned int *)(*((_QWORD *)&v342[1] + 1) & 0xFFFFFFFFFFFFFFF8);
            do
              v38 = __ldxr(v37);
            while (__stlxr(v38 - 2, v37));
          }
          *((_QWORD *)&v342[1] + 1) = *((_QWORD *)&v340 + 1);
          *((_QWORD *)&v340 + 1) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v340);
          if (v339)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v339);
        }
        LODWORD(v349) = 4;
        v350 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v352 = 0;
LABEL_51:
        if ((BYTE8(v342[1]) & 7) != 0)
        {
          v39 = (unsigned int *)(*((_QWORD *)&v342[1] + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v40 = __ldxr(v39);
          while (__stlxr(v40 - 2, v39));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v342[1]);
        if (*((_QWORD *)&v342[0] + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v342[0] + 1));
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v349))
        {
          memset(v342, 0, 24);
          pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
          v41 = *(_QWORD *)&v342[0];
          if (*(_QWORD *)&v342[0] != *((_QWORD *)&v342[0] + 1))
          {
            v42 = v363;
            if ((unint64_t)v363 >= v364)
            {
              v43 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v362, *(_DWORD **)&v342[0]);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v363, *(_DWORD **)&v342[0]);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v42 + 1, (_DWORD *)(v41 + 4));
              v43 = v42 + 2;
            }
            v363 = v43;
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, &v338);
            v72 = v360;
            if ((unint64_t)v360 >= v361)
            {
              v73 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(&v359, &v338);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v360, &v338);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v72 + 1, (_DWORD *)&v338 + 1);
              v73 = v72 + 2;
            }
            v360 = v73;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v338);
          }
          v338 = v342;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v338);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, v342);
          v44 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__equal_range_multi<pxrInternal__aapl__pxrReserved__::SdfPath>(v267, (pxrInternal__aapl__pxrReserved__::SdfPath *)v342);
          v46 = v45;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v47 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v342);
          if (v44 != v46)
          {
            do
            {
              v48 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v271);
              pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v44 + 36));
              v49 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(MEMORY[0x24BEE8040]);
              if (!v49)
                v49 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v342, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v49 + 136));
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v338))
              {
                v335 = 0;
                __p = 0;
                *(_QWORD *)&v336 = 0;
                pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
                v50 = __p;
                if (__p != v335)
                {
                  v51 = v363;
                  if ((unint64_t)v363 >= v364)
                  {
                    v52 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v362, __p);
                  }
                  else
                  {
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v363, __p);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v51 + 1, v50 + 1);
                    v52 = v51 + 2;
                  }
                  v363 = v52;
                  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, &p_p);
                  v53 = v360;
                  if ((unint64_t)v360 >= v361)
                  {
                    v54 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(&v359, &p_p);
                  }
                  else
                  {
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v360, &p_p);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v53 + 1, (_DWORD *)&p_p + 1);
                    v54 = v53 + 2;
                  }
                  v360 = v54;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&p_p);
                }
                p_p = &__p;
                std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&p_p);
              }
              if ((BYTE8(v340) & 7) != 0)
              {
                v55 = (unsigned int *)(*((_QWORD *)&v340 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v56 = __ldxr(v55);
                while (__stlxr(v56 - 2, v55));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v340);
              if (v339)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v339);
              if ((BYTE8(v342[1]) & 7) != 0)
              {
                v57 = (unsigned int *)(*((_QWORD *)&v342[1] + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v58 = __ldxr(v57);
                while (__stlxr(v58 - 2, v57));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v342[1]);
              v47 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)&v342[0] + 1);
              if (*((_QWORD *)&v342[0] + 1))
                v47 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v342[0] + 1));
              v59 = (_QWORD *)v44[1];
              if (v59)
              {
                do
                {
                  v60 = v59;
                  v59 = (_QWORD *)*v59;
                }
                while (v59);
              }
              else
              {
                do
                {
                  v60 = (_QWORD *)v44[2];
                  v24 = *v60 == (_QWORD)v44;
                  v44 = v60;
                }
                while (!v24);
              }
              v44 = v60;
            }
            while (v60 != v46);
          }
          UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v47);
          v63 = *(_QWORD *)UsdPrimDefaultPredicate;
          v62 = *(_QWORD *)(UsdPrimDefaultPredicate + 8);
          v64 = *(_QWORD *)(UsdPrimDefaultPredicate + 16);
          if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
            && ((v63 & 0x2000) != 0 || (v62 & 0x2000) == 0))
          {
            v63 |= 0x2000uLL;
            v62 &= ~0x2000uLL;
          }
          v338 = (void *)v63;
          v339 = (uint64_t **)v62;
          *(_QWORD *)&v340 = v64;
          pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(v8, (uint64_t *)&v338, (uint64_t)v342);
          v338 = *(void **)&v342[0];
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v339, (_DWORD *)v342 + 2);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v339 + 1, (_DWORD *)v342 + 3);
          v340 = v342[1];
          v341 = v343;
          __p = v344;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v335, &v345);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v335 + 1, &v346);
          v336 = v347;
          v337 = v348;
          while (v338 != __p
               || v339 != v335
               || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v340, (uint64_t)&v336))
          {
            v65 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v338, (uint64_t)&p_p);
            pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(v65);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&p_p, v304);
              v66 = v363;
              if ((unint64_t)v363 >= v364)
              {
                v67 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v362, v304);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v363, v304);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v66 + 1, (_DWORD *)v304 + 1);
                v67 = v66 + 2;
              }
              v363 = v67;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v304);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, v304);
              v68 = v360;
              if ((unint64_t)v360 >= v361)
              {
                v69 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(&v359, v304);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v360, v304);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v68 + 1, (_DWORD *)v304 + 1);
                v69 = v68 + 2;
              }
              v360 = v69;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v304);
            }
            if ((v333 & 7) != 0)
            {
              v70 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFFFF8);
              do
                v71 = __ldxr(v70);
              while (__stlxr(v71 - 2, v70));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v332);
            if (v331)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v331);
            pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v338);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v335);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v339);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v345);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v342 + 8);
        }
        if ((v352 & 7) != 0)
        {
          v74 = (unsigned int *)(v352 & 0xFFFFFFFFFFFFFFF8);
          do
            v75 = __ldxr(v74);
          while (__stlxr(v75 - 2, v74));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v351);
        if (v350)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v350);
      }
      MEMORY[0x2348B1F9C](&v353);
      v8 += 32;
    }
    while (v8 != v266);
  }
  v329 = 0;
  v324 = *a3;
  v76 = *((_QWORD *)a3 + 1);
  v325 = v76;
  if (v76)
  {
    v77 = (unint64_t *)(v76 + 48);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  v79 = a3 + 4;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v326, a3 + 4);
  v80 = a3 + 5;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v327, a3 + 5);
  v81 = *((_QWORD *)a3 + 3);
  v328 = v81;
  if ((v81 & 7) != 0)
  {
    v82 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 2, v82));
    if ((v83 & 1) == 0)
      v328 &= 0xFFFFFFFFFFFFFFF8;
  }
  TgECS::meshesUnderAndIncluding((uint64_t *)&v349, (uint64_t)a2, (uint64_t)&v324, &v329);
  if ((v328 & 7) != 0)
  {
    v84 = (unsigned int *)(v328 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v326);
  if (v325)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v325);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>((uint64_t *)&v365, v366, v349, v350, (v350 - v349) >> 3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v319 = 0;
  LODWORD(v314) = *a3;
  v86 = *((_QWORD *)a3 + 1);
  v315 = v86;
  if (v86)
  {
    v87 = (unint64_t *)(v86 + 48);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v316, v79);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v317, v80);
  v89 = *((_QWORD *)a3 + 3);
  v318 = v89;
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 2, v90));
    if ((v91 & 1) == 0)
      v318 &= 0xFFFFFFFFFFFFFFF8;
  }
  TgECS::ecsMeshes(a1, a2, &v314, a4, (uint64_t *)&v365, (uint64_t)&v356, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v322, a8, (uint64_t)&v320, &v319);
  if ((v318 & 7) != 0)
  {
    v92 = (unsigned int *)(v318 & 0xFFFFFFFFFFFFFFF8);
    do
      v93 = __ldxr(v92);
    while (__stlxr(v93 - 2, v92));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v316);
  if (v315)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v315);
  v307 = *a3;
  v94 = *((_QWORD *)a3 + 1);
  v308 = v94;
  if (v94)
  {
    v95 = (unint64_t *)(v94 + 48);
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v309, v79);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v310, v80);
  v97 = *((_QWORD *)a3 + 3);
  v311 = v97;
  if ((v97 & 7) != 0)
  {
    v98 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 2, v98));
    if ((v99 & 1) == 0)
      v311 &= 0xFFFFFFFFFFFFFFF8;
  }
  TgECS::ecsBlendShapeWeights((TgECS *)&v312, (uint64_t)a2, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v307, &v365);
  if ((v311 & 7) != 0)
  {
    v100 = (unsigned int *)(v311 & 0xFFFFFFFFFFFFFFF8);
    do
      v101 = __ldxr(v100);
    while (__stlxr(v101 - 2, v100));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v309);
  if (v308)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v308);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v102 = a5[1];
    if (v102 >= a5[2])
    {
      v103 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, &v312);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a5[1], &v312);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v102 + 4), &v313);
      v103 = v102 + 8;
    }
    a5[1] = v103;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v104 = a5[1];
    if (v104 >= a5[2])
    {
      v105 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, &v320);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a5[1], &v320);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v104 + 4), &v321);
      v105 = v104 + 8;
    }
    a5[1] = v105;
  }
  v331 = 0;
  p_p = 0;
  v332 = 0;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a3, v342);
  v106 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
  if (!v106)
    v106 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
  v270 = a3 + 4;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v342);
  v354 = 0;
  v353 = 0;
  v355 = 0;
  memset(v304, 0, sizeof(v304));
  v107 = v362;
  if (v363 != v362)
  {
    v108 = 0;
    do
    {
      v109 = &v107[2 * v108];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v373, v109);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v373 + 1, v109 + 1);
      v110 = (_DWORD *)(v359 + 8 * v108);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v288, v110);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v288 + 1, v110 + 1);
      v111 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v111)
        v111 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v288, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v111 + 352));
      *((_QWORD *)&v342[0] + 1) = 0;
      *(_QWORD *)&v342[1] = 0;
      *(_QWORD *)&v342[0] = (char *)v342 + 8;
      MEMORY[0x2348B274C](&v338, "anim");
      __p = &v338;
      v112 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v342, (uint64_t *)&v338, (uint64_t **)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v112 + 5), &v373);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v112 + 44, (_DWORD *)&v373 + 1);
      if ((v338 & 7) != 0)
      {
        v113 = (unsigned int *)((unint64_t)v338 & 0xFFFFFFFFFFFFFFF8);
        do
          v114 = __ldxr(v113);
        while (__stlxr(v114 - 2, v113));
      }
      MEMORY[0x2348B274C](&v338, "joints");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v288, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v338);
      if ((v338 & 7) != 0)
      {
        v115 = (unsigned int *)((unint64_t)v338 & 0xFFFFFFFFFFFFFFF8);
        do
          v116 = __ldxr(v115);
        while (__stlxr(v116 - 2, v115));
      }
      MEMORY[0x2348B274C](&v338, "joints");
      __p = &v338;
      v117 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v342, (uint64_t *)&v338, (uint64_t **)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v117 + 5), &v370);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v117 + 44, (_DWORD *)&v370 + 1);
      if ((v338 & 7) != 0)
      {
        v118 = (unsigned int *)((unint64_t)v338 & 0xFFFFFFFFFFFFFFF8);
        do
          v119 = __ldxr(v118);
        while (__stlxr(v119 - 2, v118));
      }
      MEMORY[0x2348B274C](&v338, "restTransforms");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v288, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v338);
      if ((v338 & 7) != 0)
      {
        v120 = (unsigned int *)((unint64_t)v338 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      MEMORY[0x2348B274C](&v338, "restTransforms");
      __p = &v338;
      v122 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v342, (uint64_t *)&v338, (uint64_t **)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v122 + 5), &v302);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v122 + 44, &v303);
      if ((v338 & 7) != 0)
      {
        v123 = (unsigned int *)((unint64_t)v338 & 0xFFFFFFFFFFFFFFF8);
        do
          v124 = __ldxr(v123);
        while (__stlxr(v124 - 2, v123));
      }
      MEMORY[0x2348B274C](&v338, "joints");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v373, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v338);
      if ((v338 & 7) != 0)
      {
        v125 = (unsigned int *)((unint64_t)v338 & 0xFFFFFFFFFFFFFFF8);
        do
          v126 = __ldxr(v125);
        while (__stlxr(v126 - 2, v125));
      }
      MEMORY[0x2348B274C](&v338, "animJoints");
      __p = &v338;
      v127 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v342, (uint64_t *)&v338, (uint64_t **)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v127 + 5), &v301);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v127 + 44, (_DWORD *)&v301 + 1);
      if ((v338 & 7) != 0)
      {
        v128 = (unsigned int *)((unint64_t)v338 & 0xFFFFFFFFFFFFFFF8);
        do
          v129 = __ldxr(v128);
        while (__stlxr(v129 - 2, v128));
      }
      v339 = 0;
      v338 = 0;
      *(_QWORD *)&v340 = 0;
      v130 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v130)
        v130 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v131 = *((_QWORD *)v130 + 20) & 0xFFFFFFFFFFFFFFF8;
      if (v131)
      {
        v132 = (char *)(v131 + 16);
        if (*(char *)(v131 + 39) < 0)
          v132 = *(char **)v132;
      }
      else
      {
        v132 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v132);
      MEMORY[0x2348B26F8](&v299, &__p);
      TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v373, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v338, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v299);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v299);
      if (SBYTE7(v336) < 0)
        operator delete(__p);
      __p = &v338;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v339 = 0;
      v338 = 0;
      *(_QWORD *)&v340 = 0;
      v133 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v133)
        v133 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v134 = *((_QWORD *)v133 + 20) & 0xFFFFFFFFFFFFFFF8;
      if (v134)
      {
        v135 = (char *)(v134 + 16);
        if (*(char *)(v134 + 39) < 0)
          v135 = *(char **)v135;
      }
      else
      {
        v135 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v135);
      MEMORY[0x2348B26F8](&v299, &__p);
      TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v370, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v338, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v299);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v299);
      if (SBYTE7(v336) < 0)
        operator delete(__p);
      __p = &v338;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v339 = 0;
      v338 = 0;
      *(_QWORD *)&v340 = 0;
      v136 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v136)
        v136 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v137 = *((_QWORD *)v136 + 20) & 0xFFFFFFFFFFFFFFF8;
      if (v137)
      {
        v138 = (char *)(v137 + 16);
        if (*(char *)(v137 + 39) < 0)
          v138 = *(char **)v138;
      }
      else
      {
        v138 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v138);
      MEMORY[0x2348B26F8](&v299, &__p);
      TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v302, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v338, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v299);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v299);
      if (SBYTE7(v336) < 0)
        operator delete(__p);
      __p = &v338;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v339 = 0;
      v338 = 0;
      *(_QWORD *)&v340 = 0;
      v139 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v139)
        v139 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v140 = *((_QWORD *)v139 + 20) & 0xFFFFFFFFFFFFFFF8;
      if (v140)
      {
        v141 = (char *)(v140 + 16);
        if (*(char *)(v140 + 39) < 0)
          v141 = *(char **)v141;
      }
      else
      {
        v141 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v141);
      MEMORY[0x2348B26F8](&v299, &__p);
      TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v301, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v338, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v299);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v299);
      if (SBYTE7(v336) < 0)
        operator delete(__p);
      __p = &v338;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      MEMORY[0x2348B274C](&__p, "rotations");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v373, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v338);
      if ((__p & 7) != 0)
      {
        v142 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
        do
          v143 = __ldxr(v142);
        while (__stlxr(v143 - 2, v142));
      }
      MEMORY[0x2348B274C](&__p, "scales");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v373, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v338);
      if ((__p & 7) != 0)
      {
        v144 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
        do
          v145 = __ldxr(v144);
        while (__stlxr(v145 - 2, v144));
      }
      MEMORY[0x2348B274C](&__p, "translations");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v373, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v338);
      if ((__p & 7) != 0)
      {
        v146 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
        do
          v147 = __ldxr(v146);
        while (__stlxr(v147 - 2, v146));
      }
      MEMORY[0x2348B274C](&v338, "rotations_samples");
      __p = &v338;
      v148 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v342, (uint64_t *)&v338, (uint64_t **)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v148 + 5), &v299);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v148 + 44, &v300);
      if ((v338 & 7) != 0)
      {
        v149 = (unsigned int *)((unint64_t)v338 & 0xFFFFFFFFFFFFFFF8);
        do
          v150 = __ldxr(v149);
        while (__stlxr(v150 - 2, v149));
      }
      MEMORY[0x2348B274C](&v338, "scales_samples");
      __p = &v338;
      v151 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v342, (uint64_t *)&v338, (uint64_t **)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v151 + 5), &v297);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v151 + 44, &v298);
      if ((v338 & 7) != 0)
      {
        v152 = (unsigned int *)((unint64_t)v338 & 0xFFFFFFFFFFFFFFF8);
        do
          v153 = __ldxr(v152);
        while (__stlxr(v153 - 2, v152));
      }
      MEMORY[0x2348B274C](&v338, "translations_samples");
      __p = &v338;
      v154 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>((uint64_t **)v342, (uint64_t *)&v338, (uint64_t **)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v154 + 5), &v295);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v154 + 44, &v296);
      if ((v338 & 7) != 0)
      {
        v155 = (unsigned int *)((unint64_t)v338 & 0xFFFFFFFFFFFFFFF8);
        do
          v156 = __ldxr(v155);
        while (__stlxr(v156 - 2, v155));
      }
      v339 = 0;
      v338 = 0;
      *(_QWORD *)&v340 = 0;
      v157 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v157)
        v157 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v158 = *((_QWORD *)v157 + 33) & 0xFFFFFFFFFFFFFFF8;
      if (v158)
      {
        v159 = (char *)(v158 + 16);
        if (*(char *)(v158 + 39) < 0)
          v159 = *(char **)v159;
      }
      else
      {
        v159 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v159);
      MEMORY[0x2348B26F8](v294, &__p);
      TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v299, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v338, (pxrInternal__aapl__pxrReserved__::SdfPath *)v294);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v294);
      if (SBYTE7(v336) < 0)
        operator delete(__p);
      __p = &v338;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v339 = 0;
      v338 = 0;
      *(_QWORD *)&v340 = 0;
      v160 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v160)
        v160 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v161 = *((_QWORD *)v160 + 33) & 0xFFFFFFFFFFFFFFF8;
      if (v161)
      {
        v162 = (char *)(v161 + 16);
        if (*(char *)(v161 + 39) < 0)
          v162 = *(char **)v162;
      }
      else
      {
        v162 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v162);
      MEMORY[0x2348B26F8](v294, &__p);
      TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v297, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v338, (pxrInternal__aapl__pxrReserved__::SdfPath *)v294);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v294);
      if (SBYTE7(v336) < 0)
        operator delete(__p);
      __p = &v338;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v339 = 0;
      v338 = 0;
      *(_QWORD *)&v340 = 0;
      v163 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v163)
        v163 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v164 = *((_QWORD *)v163 + 33) & 0xFFFFFFFFFFFFFFF8;
      if (v164)
      {
        v165 = (char *)(v164 + 16);
        if (*(char *)(v164 + 39) < 0)
          v165 = *(char **)v165;
      }
      else
      {
        v165 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v165);
      MEMORY[0x2348B26F8](v294, &__p);
      TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v295, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v338, (pxrInternal__aapl__pxrReserved__::SdfPath *)v294);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v294);
      if (SBYTE7(v336) < 0)
        operator delete(__p);
      __p = &v338;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      TgBase::emitGroup((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v371, v342);
      v166 = v354;
      if ((unint64_t)v354 >= v355)
      {
        v167 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v353, &v371);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v354, &v371);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v166 + 1, &v372);
        v167 = v166 + 2;
      }
      v354 = v167;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v295);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v297);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v299);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v301);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v302);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v370);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)v342, *((_QWORD **)&v342[0] + 1));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v371);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v288);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v373);
      ++v108;
      v107 = v362;
    }
    while (v108 < ((char *)v363 - (char *)v362) >> 3);
  }
  v168 = p_p;
  for (i = v331; v168 != (void **)i; ++v168)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p, v168);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p + 1, (_DWORD *)v168 + 1);
    memset(v342, 0, 24);
    v170 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v170)
      v170 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v171 = *((_QWORD *)v170 + 20) & 0xFFFFFFFFFFFFFFF8;
    if (v171)
    {
      v172 = (char *)(v171 + 16);
      if (*(char *)(v171 + 39) < 0)
        v172 = *(char **)v172;
    }
    else
    {
      v172 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v338, v172);
    MEMORY[0x2348B26F8](&v373, &v338);
    TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v342, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v373);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v373);
    if (SBYTE7(v340) < 0)
      operator delete(v338);
    v338 = v342;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v338);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
  }
  v173 = v353;
  for (j = v354; v173 != j; v173 += 2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v342, v173);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v342 + 1, v173 + 1);
    v175 = v331;
    if ((unint64_t)v331 >= v332)
    {
      v176 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&p_p, v342);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v331, v342);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v175 + 1, (_DWORD *)v342 + 1);
      v176 = v175 + 8;
    }
    v331 = v176;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v342);
  }
  v177 = v365;
  for (k = v366; v177 != k; v177 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v177 + 8))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::UsdPrim *)a3, v177);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v289 = (int)v338;
    v290 = v339;
    if (v339)
    {
      v178 = (unint64_t *)(v339 + 6);
      do
        v179 = __ldxr(v178);
      while (__stxr(v179 + 1, v178));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v291, &v340);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v292, (_DWORD *)&v340 + 1);
    v293 = *((_QWORD *)&v340 + 1);
    if ((BYTE8(v340) & 7) != 0)
    {
      v180 = (unsigned int *)(*((_QWORD *)&v340 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v181 = __ldxr(v180);
      while (__stxr(v181 + 2, v180));
      if ((v181 & 1) == 0)
        v293 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v293 & 7) != 0)
    {
      v183 = (unsigned int *)(v293 & 0xFFFFFFFFFFFFFFF8);
      do
        v184 = __ldxr(v183);
      while (__stlxr(v184 - 2, v183));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v291);
    if (v290)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v290);
    if (BlendShapeNameAndTargetPaths)
    {
      v374 = 0;
      v375[0] = 0;
      v373 = &v374;
      v343 = 0;
      memset(v342, 0, sizeof(v342));
      memset(v288, 0, sizeof(v288));
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributeAtPath((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v338, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v371);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p))
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
      if ((BYTE8(v336) & 7) != 0)
      {
        v185 = (unsigned int *)(*((_QWORD *)&v336 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v186 = __ldxr(v185);
        while (__stlxr(v186 - 2, v185));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v336);
      if (v335)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v335);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationshipAtPath((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v338, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v370);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p))
        pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
      if ((BYTE8(v336) & 7) != 0)
      {
        v187 = (unsigned int *)(*((_QWORD *)&v336 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v188 = __ldxr(v187);
        while (__stlxr(v188 - 2, v187));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v336);
      if (v335)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v335);
      __p = v288;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v342);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy((uint64_t)&v373, v374);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v370);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v371);
    if ((BYTE8(v340) & 7) != 0)
    {
      v189 = (unsigned int *)(*((_QWORD *)&v340 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v190 = __ldxr(v189);
      while (__stlxr(v190 - 2, v189));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v340);
    if (v339)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v339);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v338, &v305);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v338 + 1, &v306);
  v340 = 0uLL;
  v339 = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(&v339, p_p, v331, (v331 - (char *)p_p) >> 3);
  v191 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v191)
    v191 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v192 = *((_QWORD *)v191 + 36) & 0xFFFFFFFFFFFFFFF8;
  if (v192)
  {
    v193 = (char *)(v192 + 16);
    if (*(char *)(v192 + 39) < 0)
      v193 = *(char **)v193;
  }
  else
  {
    v193 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v193);
  MEMORY[0x2348B26F8](&v341, &__p);
  v194 = v368.i64[1];
  if (v368.i64[1] >= (unint64_t)v369)
  {
    v196 = 0xCCCCCCCCCCCCCCCDLL * ((v368.i64[1] - v368.i64[0]) >> 3);
    if (v196 + 1 > 0x666666666666666)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v197 = 0x999999999999999ALL * ((uint64_t)&v369[-v368.i64[0]] >> 3);
    if (v197 <= v196 + 1)
      v197 = v196 + 1;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v369[-v368.i64[0]] >> 3) >= 0x333333333333333)
      v198 = 0x666666666666666;
    else
      v198 = v197;
    v343 = &v369;
    if (v198)
    {
      if (v198 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v199 = (char *)operator new(40 * v198);
    }
    else
    {
      v199 = 0;
    }
    v200 = (uint64_t)&v199[40 * v196];
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v200, (uint64_t)&v338);
    v201 = v368.i64[1];
    v202 = v368.i64[0];
    if (v368.i64[1] == v368.i64[0])
    {
      v204 = vdupq_n_s64(v368.u64[1]);
      v203 = v200;
    }
    else
    {
      v203 = v200;
      do
      {
        v203 -= 40;
        v201 -= 40;
        std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v203, v201);
      }
      while (v201 != v202);
      v204 = v368;
    }
    v195 = v200 + 40;
    v368.i64[0] = v203;
    v368.i64[1] = v195;
    *(int64x2_t *)((char *)v342 + 8) = v204;
    v205 = v369;
    v369 = &v199[40 * v198];
    *((_QWORD *)&v342[1] + 1) = v205;
    *(_QWORD *)&v342[0] = v204.i64[0];
    std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)v342);
  }
  else
  {
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v368.i64[1], (uint64_t)&v338);
    v195 = v194 + 40;
  }
  v368.i64[1] = v195;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v341);
  *(_QWORD *)&v342[0] = &v339;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v342);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v338);
  v206 = (uint64_t)a2;
  if (SBYTE7(v336) < 0)
    operator delete(__p);
  v207 = a6[1];
  if (v207 >= a6[2])
  {
    v208 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a6, &v305);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a6[1], &v305);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v207 + 4), &v306);
    v208 = v207 + 8;
  }
  a6[1] = v208;
  if (a7[1] != *a7)
  {
    v283 = *a3;
    v209 = *((_QWORD *)a3 + 1);
    v284 = v209;
    if (v209)
    {
      v210 = (unint64_t *)(v209 + 48);
      do
        v211 = __ldxr(v210);
      while (__stxr(v211 + 1, v210));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v285, v270);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v286, v80);
    v212 = *((_QWORD *)a3 + 3);
    v287 = v212;
    if ((v212 & 7) != 0)
    {
      v213 = (unsigned int *)(v212 & 0xFFFFFFFFFFFFFFF8);
      do
        v214 = __ldxr(v213);
      while (__stxr(v214 + 2, v213));
      if ((v214 & 1) == 0)
        v287 &= 0xFFFFFFFFFFFFFFF8;
    }
    TgECS::ecsMeshDeformation((TgECS *)&v302, (uint64_t)a2, &v283, a7, v329);
    if ((v287 & 7) != 0)
    {
      v215 = (unsigned int *)(v287 & 0xFFFFFFFFFFFFFFF8);
      do
        v216 = __ldxr(v215);
      while (__stlxr(v216 - 2, v215));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v285);
    if (v284)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v284);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      v217 = a5[1];
      if (v217 >= a5[2])
      {
        v218 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, &v302);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a5[1], &v302);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v217 + 4), &v303);
        v218 = v217 + 8;
      }
      a5[1] = v218;
    }
    v278 = *a3;
    v219 = *((_QWORD *)a3 + 1);
    v279 = v219;
    if (v219)
    {
      v220 = (unint64_t *)(v219 + 48);
      do
        v221 = __ldxr(v220);
      while (__stxr(v221 + 1, v220));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v280, v270);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v281, v80);
    v222 = *((_QWORD *)a3 + 3);
    v282 = v222;
    if ((v222 & 7) != 0)
    {
      v223 = (unsigned int *)(v222 & 0xFFFFFFFFFFFFFFF8);
      do
        v224 = __ldxr(v223);
      while (__stxr(v224 + 2, v223));
      if ((v224 & 1) == 0)
        v282 &= 0xFFFFFFFFFFFFFFF8;
    }
    v225 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!v225)
      v225 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    TgECS::genECSPath((TgECS *)&v371, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v278, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v225 + 368));
    LODWORD(v342[0]) = v278;
    *((_QWORD *)&v342[0] + 1) = v279;
    if (v279)
    {
      v226 = (unint64_t *)(v279 + 48);
      do
        v227 = __ldxr(v226);
      while (__stxr(v227 + 1, v226));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v342[1], &v280);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v342[1] + 1, &v281);
    *((_QWORD *)&v342[1] + 1) = v282;
    if ((v282 & 7) != 0)
    {
      v228 = (unsigned int *)(v282 & 0xFFFFFFFFFFFFFFF8);
      do
        v229 = __ldxr(v228);
      while (__stxr(v229 + 2, v228));
      if ((v229 & 1) == 0)
        *((_QWORD *)&v342[1] + 1) &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) != 0)
    {
      v230 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
      if (!v230)
        v230 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
      TgECS::genECSPath((TgECS *)&v370, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v342, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v230 + 376));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v373, &v322);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v373 + 1, &v323);
      v339 = 0;
      v338 = 0;
      *(_QWORD *)&v340 = 0;
      __p = &v338;
      LOBYTE(v335) = 0;
      v338 = operator new(8uLL);
      v339 = (uint64_t **)v338;
      *(_QWORD *)&v340 = (char *)v338 + 8;
      v339 = (uint64_t **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v340, &v373, &v374, v338);
      v231 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v231)
        v231 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v232 = *((_QWORD *)v231 + 39) & 0xFFFFFFFFFFFFFFF8;
      if (v232)
      {
        v233 = (char *)(v232 + 16);
        if (*(char *)(v232 + 39) < 0)
          v233 = *(char **)v233;
      }
      else
      {
        v233 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v233);
      MEMORY[0x2348B26F8](v288, &__p);
      TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v370, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v338, (pxrInternal__aapl__pxrReserved__::SdfPath *)v288);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v288);
      if (SBYTE7(v336) < 0)
        operator delete(__p);
      __p = &v338;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v373);
    }
    else
    {
      v370 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    if ((BYTE8(v342[1]) & 7) != 0)
    {
      v234 = (unsigned int *)(*((_QWORD *)&v342[1] + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v235 = __ldxr(v234);
      while (__stlxr(v235 - 2, v234));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v342[1]);
    if (*((_QWORD *)&v342[0] + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v342[0] + 1));
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v373, &v322);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v373 + 1, &v323);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v374, &v370);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v374 + 1, (_DWORD *)&v370 + 1);
      v339 = 0;
      v338 = 0;
      *(_QWORD *)&v340 = 0;
      __p = &v338;
      LOBYTE(v335) = 0;
      v338 = operator new(0x10uLL);
      v339 = (uint64_t **)v338;
      *(_QWORD *)&v340 = (char *)v338 + 16;
      v339 = (uint64_t **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v340, &v373, v375, v338);
      v236 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
      if (!v236)
        v236 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
      v237 = *((_QWORD *)v236 + 38) & 0xFFFFFFFFFFFFFFF8;
      if (v237)
      {
        v238 = (char *)(v237 + 16);
        if (*(char *)(v237 + 39) < 0)
          v238 = *(char **)v238;
      }
      else
      {
        v238 = "";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v238);
      MEMORY[0x2348B26F8](v288, &__p);
      TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v371, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v338, (pxrInternal__aapl__pxrReserved__::SdfPath *)v288);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v288);
      if (SBYTE7(v336) < 0)
        operator delete(__p);
      __p = &v338;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v239 = 2;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&(&v373)[--v239]);
      }
      while (v239 * 8);
      LODWORD(v301) = v371;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
      HIDWORD(v301) = v372;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
    }
    else
    {
      v301 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v370);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v371);
    if ((v282 & 7) != 0)
    {
      v240 = (unsigned int *)(v282 & 0xFFFFFFFFFFFFFFF8);
      do
        v241 = __ldxr(v240);
      while (__stlxr(v241 - 2, v240));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v280);
    if (v279)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v279);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      v242 = a5[1];
      if (v242 >= a5[2])
      {
        v243 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, &v301);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a5[1], &v301);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v242 + 4), (_DWORD *)&v301 + 1);
        v243 = v242 + 8;
      }
      a5[1] = v243;
    }
    v273 = *a3;
    v244 = *((_QWORD *)a3 + 1);
    v274 = v244;
    if (v244)
    {
      v245 = (unint64_t *)(v244 + 48);
      do
        v246 = __ldxr(v245);
      while (__stxr(v246 + 1, v245));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v275, v270);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v276, v80);
    v247 = *((_QWORD *)a3 + 3);
    v277 = v247;
    if ((v247 & 7) != 0)
    {
      v248 = (unsigned int *)(v247 & 0xFFFFFFFFFFFFFFF8);
      do
        v249 = __ldxr(v248);
      while (__stxr(v249 + 2, v248));
      if ((v249 & 1) == 0)
        v277 &= 0xFFFFFFFFFFFFFFF8;
    }
    v250 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
    if (!v250)
      v250 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
    TgECS::genECSPath((TgECS *)&v373, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v273, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v250 + 312));
    memset(v342, 0, 24);
    v251 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
    if (!v251)
      v251 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
    v252 = *((_QWORD *)v251 + 30) & 0xFFFFFFFFFFFFFFF8;
    if (v252)
    {
      v253 = (char *)(v252 + 16);
      if (*(char *)(v252 + 39) < 0)
        v253 = *(char **)v253;
    }
    else
    {
      v253 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&v338, v253);
    MEMORY[0x2348B26F8](&__p, &v338);
    TgBase::emitTarget((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v373, (const pxrInternal__aapl__pxrReserved__::SdfPath **)v342, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
    v206 = (uint64_t)a2;
    if (SBYTE7(v340) < 0)
      operator delete(v338);
    v338 = v342;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v338);
    if ((v277 & 7) != 0)
    {
      v254 = (unsigned int *)(v277 & 0xFFFFFFFFFFFFFFF8);
      do
        v255 = __ldxr(v254);
      while (__stlxr(v255 - 2, v254));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v275);
    if (v274)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v274);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      v256 = a5[1];
      if (v256 >= a5[2])
      {
        v257 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, &v373);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a5[1], &v373);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v256 + 4), (_DWORD *)&v373 + 1);
        v257 = v256 + 8;
      }
      a5[1] = v257;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v373);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v301);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v302);
  }
  TgBase::emitTargets(v206, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v368);
  *(_QWORD *)&v342[0] = v304;
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)v342);
  *(_QWORD *)&v342[0] = &v353;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v342);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v305);
  *(_QWORD *)&v342[0] = &p_p;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v342);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v312);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v320);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v322);
  *(_QWORD *)&v342[0] = &v349;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v342);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v356, v357);
  *(_QWORD *)&v342[0] = &v359;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v342);
  *(_QWORD *)&v342[0] = &v362;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v342);
  *(_QWORD *)&v342[0] = &v365;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v342);
  *(_QWORD *)&v342[0] = &v368;
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)v342);
}

void sub_2301EE8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pxrInternal__aapl__pxrReserved__::SdfPath *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  __int16 a68;
  __int16 a70;
  __int16 a72;
  uint64_t v72;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v72 - 120));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a68);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a70);
  STACK[0x2D8] = (unint64_t)&a72;
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2D8]);
  STACK[0x2D8] = (unint64_t)&STACK[0x378];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2D8]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x200]);
  STACK[0x2D8] = (unint64_t)&STACK[0x290];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2D8]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x228]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a14);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x258]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x260]);
  STACK[0x2D8] = (unint64_t)&STACK[0x358];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2D8]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v72 - 256, *(_QWORD **)(v72 - 248));
  STACK[0x358] = v72 - 232;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x358]);
  STACK[0x358] = v72 - 208;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x358]);
  STACK[0x358] = v72 - 184;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x358]);
  STACK[0x358] = v72 - 160;
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x358]);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::timeSamplesPath(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *Data;
  unint64_t v4;
  char *v5;
  void *__p[2];
  char v7;
  _BYTE v8[8];

  Data = (_QWORD *)atomic_load(&realityio::tokens::SamplingTokens);
  if (!Data)
    Data = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SamplingTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SamplingTokens_StaticTokenType>>::_TryToCreateData();
  v4 = *Data & 0xFFFFFFFFFFFFFFF8;
  if (v4)
  {
    v5 = (char *)(v4 + 16);
    if (*(char *)(v4 + 39) < 0)
      v5 = *(char **)v5;
  }
  else
  {
    v5 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  MEMORY[0x2348B26F8](v8, __p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v8);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_2301EF408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t TgECS::emitShaderTree(Exec **a1, uint64_t a2, unint64_t *a3, pxrInternal__aapl__pxrReserved__::UsdShadeInput **a4, uint64_t **a5)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  unsigned int *v15;
  uint64_t EmptyString;
  unsigned int v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  pxrInternal__aapl__pxrReserved__::UsdObject *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  pxrInternal__aapl__pxrReserved__::UsdObject *v48;
  const pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  unsigned int v50;
  unint64_t v51;
  pxrInternal__aapl__pxrReserved__::UsdObject *v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t *v55;
  void **p_p;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  pxrInternal__aapl__pxrReserved__::TfToken *v63;
  unint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t *v68;
  unsigned int *v69;
  unsigned int v70;
  void ***v71;
  uint64_t *v72;
  unsigned int *v73;
  unsigned int v74;
  realityio::tokens::ActionTokens_StaticTokenType *Data;
  unint64_t v76;
  char *v77;
  uint64_t *v78;
  unsigned int *v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  int HasColorSpace;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t Name;
  char *v92;
  size_t v93;
  unint64_t *v94;
  char *v95;
  uint64_t String;
  char *v97;
  size_t v98;
  unint64_t *v99;
  char *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  uint64_t *v111;
  void ***v112;
  pxrInternal__aapl__pxrReserved__::UsdObject *v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader *v117;
  int IsA;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  realityio::tokens::ActionTokens_StaticTokenType *v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  Exec **v142;
  uint64_t v143;
  void **v144;
  pxrInternal__aapl__pxrReserved__::UsdObject *v145;
  pxrInternal__aapl__pxrReserved__::UsdObject *v146;
  char v148[8];
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *__p;
  uint64_t v153;
  _BYTE v154[8];
  uint64_t v155;
  unint64_t v156;
  int v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  void **v165;
  _QWORD v166[2];
  uint64_t v167;
  uint64_t *v168;
  _QWORD *v169[2];
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unsigned int *v173;
  _QWORD v174[3];
  pxrInternal__aapl__pxrReserved__::UsdObject *v175;
  pxrInternal__aapl__pxrReserved__::UsdObject *v176;
  char v177[8];
  uint64_t *v178;
  _QWORD *v179[2];
  int v180;
  int v181;
  unsigned int *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void **v194;
  void **v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v9 = MEMORY[0x24BEE9D38];
  v183 = MEMORY[0x24BEE9D38] + 16;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v193);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v193, &v193);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v193);
  if (!v184 || (*(_BYTE *)(v184 + 57) & 8) != 0 || ((*(uint64_t (**)(uint64_t *))(v183 + 32))(&v183) & 1) == 0)
    return MEMORY[0x2348B1EC4](&v183);
  v182 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v183, (pxrInternal__aapl__pxrReserved__::TfToken *)&v182);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v193);
  MEMORY[0x2348B274C](&v164, "__nodeInputs");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v193, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v164);
  if ((v164 & 7) != 0)
  {
    v10 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v193);
  v179[1] = 0;
  v179[0] = 0;
  v178 = (uint64_t *)v179;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v193);
  MEMORY[0x2348B274C](&v164, "__sgNode");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v193, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v164);
  if ((v164 & 7) != 0)
  {
    v12 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v193);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v183);
  v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v193, "UsdUVTexture");
  v15 = (unsigned int *)((unint64_t)v182 & 0xFFFFFFFFFFFFFFF8);
  if (((unint64_t)v182 & 0xFFFFFFFFFFFFFFF8) == (v193 & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v193 & 7) != 0)
    {
      do
        v17 = __ldxr(v15);
      while (__stlxr(v17 - 2, v15));
    }
  }
  else
  {
    if (v15)
      EmptyString = (uint64_t)(v15 + 4);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    v18 = *(unsigned __int8 *)(EmptyString + 23);
    v19 = (char)v18;
    if ((v18 & 0x80u) != 0)
      v18 = *(_QWORD *)(EmptyString + 8);
    if (v18 >= 9)
    {
      if (v19 < 0)
        EmptyString = *(_QWORD *)EmptyString;
      v20 = strncmp((const char *)EmptyString, "ND_image_", 9uLL) == 0;
    }
    else
    {
      v20 = 0;
    }
    if ((v193 & 7) != 0)
    {
      v21 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (!v20)
      goto LABEL_72;
  }
  v164 = 0;
  v165 = 0;
  v166[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v173 = v182;
  v174[0] = v9 + 16;
  if ((v182 & 7) != 0)
  {
    v23 = (unsigned int *)((unint64_t)v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 2, v23));
    if ((v24 & 1) == 0)
      v173 = v23;
  }
  v25 = *a3;
  v172 = v25;
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 2, v26));
    if ((v27 & 1) == 0)
    {
      v172 = v25 & 0xFFFFFFFFFFFFFFF8;
      v25 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  v28 = *a3;
  v171 = v28;
  if ((v28 & 7) != 0)
  {
    v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 2, v29));
    if ((v30 & 1) == 0)
    {
      v171 = v28 & 0xFFFFFFFFFFFFFFF8;
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  TgECS::ecsTextureAsset((pxrInternal__aapl__pxrReserved__::SdfPath *)&v185, a1, a4, v174, &v173, &v172, (uint64_t *)&v164, (uint64_t *)&v171);
  if ((v28 & 7) != 0)
  {
    v31 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
    v25 = v172;
  }
  if ((v25 & 7) != 0)
  {
    v33 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  if ((v173 & 7) != 0)
  {
    v35 = (unsigned int *)((unint64_t)v173 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  MEMORY[0x2348B1EC4](v174);
  TgBase::emitTargets((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath ***)&v164);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    MEMORY[0x2348B274C](&v189, "__value");
    v193 = v189;
    v189 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v194, &v185);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v194 + 1, (_DWORD *)&v185 + 1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v178, (uint64_t *)&v193, (uint64_t)&v193);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v194);
    if ((v193 & 7) != 0)
    {
      v37 = (unsigned int *)(v193 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    if ((v189 & 7) != 0)
    {
      v39 = (unsigned int *)(v189 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stlxr(v40 - 2, v39));
    }
    MEMORY[0x2348B274C](&__p, "__sourcePrimPath");
    v41 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v193, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v41, &v168);
    v189 = (unint64_t)__p;
    __p = 0;
    LODWORD(v190) = (_DWORD)v168;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
    HIDWORD(v190) = HIDWORD(v168);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v178, (uint64_t *)&v189, (uint64_t)&v189);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v190);
    if ((v189 & 7) != 0)
    {
      v42 = (unsigned int *)(v189 & 0xFFFFFFFFFFFFFFF8);
      do
        v43 = __ldxr(v42);
      while (__stlxr(v43 - 2, v42));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v168);
    if ((v196 & 7) != 0)
    {
      v44 = (unsigned int *)(v196 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v195);
    if (v194)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v194);
    if ((__p & 7) != 0)
    {
      v46 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v185);
  v193 = (unint64_t)&v164;
  std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
LABEL_72:
  v146 = (pxrInternal__aapl__pxrReserved__::UsdObject *)a2;
  v48 = v175;
  v145 = v176;
  if (v175 != v176)
  {
    v144 = (void **)(MEMORY[0x24BEE9DC0] + 16);
    v143 = v9 + 16;
    v142 = a1;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes();
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v146, &v164);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v48, &v189);
      NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v189);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v164, NameToken);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v189);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v164);
      v169[0] = 0;
      v169[1] = 0;
      v168 = (uint64_t *)v169;
      if (v197)
      {
        v50 = v198;
        v51 = v193;
        if (v198 >= 2)
          v52 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v193;
        else
          v52 = (pxrInternal__aapl__pxrReserved__::UsdObject *)&v193;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        if (*(_DWORD *)v52 == *(_DWORD *)v48
          && (v50 >= 2 ? (v53 = (unint64_t *)v51) : (v53 = &v193),
              v53[1] == *((_QWORD *)v48 + 1)
           && (v50 >= 2 ? (v54 = (unint64_t *)v51) : (v54 = &v193),
               v54[2] == *((_QWORD *)v48 + 2)
            && (v50 >= 2 ? (v55 = (unint64_t *)v51) : (v55 = &v193),
                (v55[3] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v48 + 3) & 0xFFFFFFFFFFFFFFF8)))))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v48, &v164);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v167, (int *)&v164);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v167 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v164);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v52, &v189);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v189);
          pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v189);
          if ((void **)v164 == v165 || !pxrInternal__aapl__pxrReserved__::TfToken::operator==())
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v52, &__p);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
            MEMORY[0x2348B274C](&v160, "__sgNode");
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v185, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v160);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v167, (int *)&v189);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v167 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v189);
            if ((v160 & 7) != 0)
            {
              v57 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFFFF8);
              do
                v58 = __ldxr(v57);
              while (__stlxr(v58 - 2, v57));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v185);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            p_p = &__p;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v52, &v189);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v167, (int *)&v189);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v167 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            p_p = (void **)&v189;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)p_p);
          v189 = (unint64_t)&v164;
          std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
        }
        LODWORD(v189) = 1;
        v190 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v192 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v166[1] = 0;
        v164 = (unint64_t)v144;
        if ((v192 & 7) != 0)
        {
          v59 = (unsigned int *)(v192 & 0xFFFFFFFFFFFFFFF8);
          do
            v60 = __ldxr(v59);
          while (__stlxr(v60 - 2, v59));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v191);
        if (v190)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v190);
        v163 = 0;
        v162 = 0;
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v189, (uint64_t *)&v165, v166);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v185, (uint64_t *)&v165, v166);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v160 = v143;
        if ((v188 & 7) != 0)
        {
          v61 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
          do
            v62 = __ldxr(v61);
          while (__stlxr(v62 - 2, v61));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
        if (v186)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
        v159 = 0;
        if (v161 && (*(_BYTE *)(v161 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v160 + 32))(&v160))
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v160, (pxrInternal__aapl__pxrReserved__::TfToken *)&v159);
        v63 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v185, "UsdUVTexture");
        v64 = v159;
        v65 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
        if ((v185 & 7) != 0)
        {
          do
            v66 = __ldxr(v65);
          while (__stlxr(v66 - 2, v65));
          v67 = v159;
        }
        else
        {
          v67 = v159;
        }
        if ((unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8) != v65 && v67 < 8)
          pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v63);
        if (v170 == v167)
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v48, &__p);
          v72 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v48, &v157);
          std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)&v185, *v72, &v157);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v178, (uint64_t *)&v185, (uint64_t)&v185);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v186);
          if ((v185 & 7) != 0)
          {
            v73 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
            do
              v74 = __ldxr(v73);
            while (__stlxr(v74 - 2, v73));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v157);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v48, &v157);
          v185 = 0;
          v186 = 0;
          v187 = 0;
          Data = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
          if (!Data)
            Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
          v76 = *((_QWORD *)Data + 20) & 0xFFFFFFFFFFFFFFF8;
          if (v76)
          {
            v77 = (char *)(v76 + 16);
            if (*(char *)(v76 + 39) < 0)
              v77 = *(char **)v77;
          }
          else
          {
            v77 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v77);
          MEMORY[0x2348B26F8](&v156, &__p);
          TgBase::emitTarget((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v157, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v185, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v156);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v156);
          if ((v154[7] & 0x80000000) != 0)
            operator delete(__p);
          __p = &v185;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v157);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::GetRoleName(v48);
          MEMORY[0x2348B274C](&__p, "Color");
          v81 = v185;
          v82 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
          if ((v185 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)__p & 0xFFFFFFFFFFFFFFF8))
          {
            HasColorSpace = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasColorSpace(v48);
            if ((__p & 7) != 0)
            {
              v87 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
              do
                v88 = __ldxr(v87);
              while (__stlxr(v88 - 2, v87));
            }
            if ((v185 & 7) != 0)
            {
              v89 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
              do
                v90 = __ldxr(v89);
              while (__stlxr(v90 - 2, v89));
            }
            if (HasColorSpace)
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v48, &v157);
              Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v157);
              v92 = (char *)Name;
              if (*(char *)(Name + 23) >= 0)
                v93 = *(unsigned __int8 *)(Name + 23);
              else
                v93 = *(_QWORD *)(Name + 8);
              std::string::basic_string[abi:ne180100]((uint64_t)&v185, v93 + 12);
              if (v187 >= 0)
                v94 = &v185;
              else
                v94 = (unint64_t *)v185;
              if (v93)
              {
                if (v92[23] >= 0)
                  v95 = v92;
                else
                  v95 = *(char **)v92;
                memmove(v94, v95, v93);
              }
              strcpy((char *)v94 + v93, "__colorSpace");
              MEMORY[0x2348B2764](&__p, &v185);
              if (SHIBYTE(v187) < 0)
                operator delete((void *)v185);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v157);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v48, &v156);
              String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v156);
              v97 = (char *)String;
              if (*(char *)(String + 23) >= 0)
                v98 = *(unsigned __int8 *)(String + 23);
              else
                v98 = *(_QWORD *)(String + 8);
              std::string::basic_string[abi:ne180100]((uint64_t)&v185, v98 + 12);
              if (v187 >= 0)
                v99 = &v185;
              else
                v99 = (unint64_t *)v185;
              if (v98)
              {
                if (v97[23] >= 0)
                  v100 = v97;
                else
                  v100 = *(char **)v97;
                memmove(v99, v100, v98);
              }
              strcpy((char *)v99 + v98, "__colorSpace");
              MEMORY[0x2348B26F8](&v157, &v185);
              a1 = v142;
              if (SHIBYTE(v187) < 0)
                operator delete((void *)v185);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v156);
              pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(v48);
              v185 = v156;
              v186 = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                   + 1;
              if ((v156 & 7) != 0)
              {
                v101 = (unsigned int *)(v156 & 0xFFFFFFFFFFFFFFF8);
                do
                  v102 = __ldxr(v101);
                while (__stxr(v102 + 2, v101));
                if ((v102 & 1) == 0)
                  v185 &= 0xFFFFFFFFFFFFFFF8;
              }
              TgBase::emitConstant(v142, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v157, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v185);
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v185);
              if ((v156 & 7) != 0)
              {
                v103 = (unsigned int *)(v156 & 0xFFFFFFFFFFFFFFF8);
                do
                  v104 = __ldxr(v103);
                while (__stlxr(v104 - 2, v103));
              }
              v185 = (unint64_t)__p;
              if ((__p & 7) != 0)
              {
                v105 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
                do
                  v106 = __ldxr(v105);
                while (__stxr(v106 + 2, v105));
                if ((v106 & 1) == 0)
                  v185 &= 0xFFFFFFFFFFFFFFF8;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v186, &v157);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v186 + 1, &v158);
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v178, (uint64_t *)&v185, (uint64_t)&v185);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v186);
              if ((v185 & 7) != 0)
              {
                v107 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
                do
                  v108 = __ldxr(v107);
                while (__stlxr(v108 - 2, v107));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v157);
              if ((__p & 7) != 0)
              {
                v109 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
                do
                  v110 = __ldxr(v109);
                while (__stlxr(v110 - 2, v109));
              }
            }
          }
          else
          {
            if ((__p & 7) != 0)
            {
              do
                v83 = __ldxr(v82);
              while (__stlxr(v83 - 2, v82));
              v81 = v185;
            }
            if ((v81 & 7) != 0)
            {
              v84 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
              do
                v85 = __ldxr(v84);
              while (__stlxr(v85 - 2, v84));
            }
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v52, &__p);
          v78 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
          std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>((uint64_t)&v185, v78, &v167);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v168, (uint64_t *)&v185, (uint64_t)&v185);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v186);
          if ((v185 & 7) != 0)
          {
            v79 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
            do
              v80 = __ldxr(v79);
            while (__stlxr(v80 - 2, v79));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          TgBase::emitGroup((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v170, &v168);
        }
        if (v50 >= 2)
          v111 = (uint64_t *)(v51 + 8);
        else
          v111 = (uint64_t *)&v194;
        if (v50 >= 2)
          v112 = (void ***)(v51 + 16);
        else
          v112 = &v195;
        v113 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v185, v111, v112);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v113, &__p);
        v114 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
        if ((v188 & 7) != 0)
        {
          v115 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
          do
            v116 = __ldxr(v115);
          while (__stlxr(v116 - 2, v115));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
        if (v186)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
        if (!v114)
        {
          v117 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v185, v111, v112);
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v117);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) != 0)
          {
            IsA = 1;
          }
          else
          {
            v119 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&__p, v111, v112);
            pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType(v119);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if ((v155 & 7) != 0)
            {
              v120 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFF8);
              do
                v121 = __ldxr(v120);
              while (__stlxr(v121 - 2, v120));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v154);
            if (v153)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v153);
          }
          if ((v188 & 7) != 0)
          {
            v122 = (unsigned int *)(v188 & 0xFFFFFFFFFFFFFFF8);
            do
              v123 = __ldxr(v122);
            while (__stlxr(v123 - 2, v122));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v187);
          if (v186)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v186);
          if (IsA)
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v148, v111, v112);
            pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(v48);
            TgECS::emitShaderTree(a1, v148, &v185, &v175, a5);
            if ((v185 & 7) != 0)
            {
              v124 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
              do
                v125 = __ldxr(v124);
              while (__stlxr(v125 - 2, v124));
            }
            if ((v151 & 7) != 0)
            {
              v126 = (unsigned int *)(v151 & 0xFFFFFFFFFFFFFFF8);
              do
                v127 = __ldxr(v126);
              while (__stlxr(v127 - 2, v126));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v150);
            if (v149)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v149);
          }
        }
        if (v170 != v167)
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v48, &__p);
          v128 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
          std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>((uint64_t)&v185, v128, &v170);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v178, (uint64_t *)&v185, (uint64_t)&v185);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v186);
          if ((v185 & 7) != 0)
          {
            v129 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFFFF8);
            do
              v130 = __ldxr(v129);
            while (__stlxr(v130 - 2, v129));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
        }
        if ((v159 & 7) != 0)
        {
          v131 = (unsigned int *)(v159 & 0xFFFFFFFFFFFFFFF8);
          do
            v132 = __ldxr(v131);
          while (__stlxr(v132 - 2, v131));
        }
        MEMORY[0x2348B1EC4](&v160);
        if ((v192 & 7) != 0)
        {
          v133 = (unsigned int *)(v192 & 0xFFFFFFFFFFFFFFF8);
          do
            v134 = __ldxr(v133);
          while (__stlxr(v134 - 2, v133));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v191);
        if (v190)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v190);
        if ((v163 & 7) != 0)
        {
          v135 = (unsigned int *)(v163 & 0xFFFFFFFFFFFFFFF8);
          do
            v136 = __ldxr(v135);
          while (__stlxr(v136 - 2, v135));
        }
        MEMORY[0x2348B2350](&v164);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v71 = (void ***)&v167;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v48, &v189);
        v68 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v189);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v48, &v185);
        std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)&v164, *v68, &v185);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v178, (uint64_t *)&v164, (uint64_t)&v164);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v165);
        if ((v164 & 7) != 0)
        {
          v69 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFFFF8);
          do
            v70 = __ldxr(v69);
          while (__stlxr(v70 - 2, v69));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v185);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v71 = (void ***)&v189;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v71);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v168, v169[0]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v170);
      pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)&v193);
      v48 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v48 + 32);
    }
    while (v48 != v145);
  }
  TgBase::emitGroup((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v180, &v178);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v189, &v180);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v189 + 1, &v181);
  v193 = 0;
  v194 = 0;
  v195 = 0;
  v164 = (unint64_t)&v193;
  LOBYTE(v165) = 0;
  v193 = (unint64_t)operator new(8uLL);
  v194 = (void **)v193;
  v195 = (void **)(v193 + 8);
  v194 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v195, &v189, &v190, (_DWORD *)v193);
  v137 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v137)
    v137 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  if ((*((_QWORD *)v137 + 22) & 0xFFFFFFFFFFFFFFF8) != 0)
    v138 = (*((_QWORD *)v137 + 22) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v138 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v137);
  MEMORY[0x2348B26F8](&v164, v138);
  TgBase::emitTarget((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v177, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v193, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v164);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v164);
  v164 = (unint64_t)&v193;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v189);
  v193 = (unint64_t)&v175;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v177);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v178, v179[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v180);
  if ((v182 & 7) != 0)
  {
    v139 = (unsigned int *)((unint64_t)v182 & 0xFFFFFFFFFFFFFFF8);
    do
      v140 = __ldxr(v139);
    while (__stlxr(v140 - 2, v139));
  }
  return MEMORY[0x2348B1EC4](&v183);
}

void sub_2301F09B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  char a72;
  uint64_t v72;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;

  v74 = *(_QWORD *)(v72 - 136);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  *(_QWORD *)(v72 - 136) = &a69;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 136));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a72);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&STACK[0x200], (_QWORD *)STACK[0x208]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v72 - 248));
  v77 = *(_QWORD *)(v72 - 240);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  MEMORY[0x2348B1EC4](v72 - 232);
  _Unwind_Resume(a1);
}

void sub_2301F10B0()
{
  uint64_t v0;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v0 - 168));
  JUMPOUT(0x2301F1030);
}

void sub_2301F10C0()
{
  uint64_t v0;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v0 - 168));
  JUMPOUT(0x2301F10CCLL);
}

void TgECS::ecsTextureAsset(pxrInternal__aapl__pxrReserved__::SdfPath *a1, Exec **a2, pxrInternal__aapl__pxrReserved__::UsdShadeInput **a3, _DWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v9;
  uint64_t *v10;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  pxrInternal__aapl__pxrReserved__::TfToken *v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::TfToken *ShaderId;
  uint64_t EmptyString;
  pxrInternal__aapl__pxrReserved__::TfToken *v27;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *Data;
  uint64_t v29;
  const char *v30;
  int v31;
  unint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v36;
  unint64_t v37;
  const char *v38;
  int v39;
  size_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v47;
  uint64_t v48;
  const char *v49;
  int v50;
  size_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v56;
  uint64_t v57;
  const char *v58;
  int v59;
  size_t v60;
  size_t v61;
  BOOL v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v66;
  unint64_t v67;
  const char *v68;
  int v69;
  size_t v70;
  size_t v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  realityio::tokens::TextureBuilderTokens_StaticTokenType *v75;
  unint64_t v76;
  const char *v77;
  int v78;
  size_t v79;
  size_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v84;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  pxrInternal__aapl__pxrReserved__::TfToken *v90;
  unint64_t v91;
  uint64_t v92;
  _BOOL4 v93;
  unint64_t v94;
  int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  pxrInternal__aapl__pxrReserved__::TfToken *BaseName;
  pxrInternal__aapl__pxrReserved__::TfToken *v101;
  uint64_t **v102;
  unsigned int *v103;
  unsigned int v104;
  unint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unint64_t SemanticPriority;
  unint64_t v109;
  unsigned int *v110;
  unsigned int v111;
  unint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  pxrInternal__aapl__pxrReserved__::TfToken *v117;
  _QWORD *v118;
  pxrInternal__aapl__pxrReserved__::TfToken *v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v130;
  int v131;
  BOOL v132;
  char v134;
  _QWORD *v135;
  unsigned int *v137;
  unsigned int v138;
  unint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  char v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  unint64_t *v158;
  unint64_t v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  unint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int *v180;
  unsigned int v181;
  _QWORD *v182;
  _QWORD *v183;
  void *v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int *v197;
  unsigned int v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int *v205;
  unsigned int v206;
  unsigned int *v207;
  unsigned int v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int *v211;
  unsigned int v212;
  char *v213;
  char *v214;
  realityio::tokens::ActionTokens_StaticTokenType *v215;
  unint64_t v216;
  char *v217;
  unint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int *v223;
  unsigned int v224;
  unint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int *v232;
  unsigned int v233;
  unsigned int *v234;
  unsigned int v235;
  std::string **v236;
  char *v237;
  char *v238;
  realityio::tokens::ActionTokens_StaticTokenType *v239;
  unint64_t v240;
  char *v241;
  unint64_t v242;
  uint64_t v243;
  realityio::tokens::ActionTokens_StaticTokenType *v244;
  unint64_t v245;
  char *v246;
  unint64_t v247;
  uint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  unsigned int *v251;
  unsigned int v252;
  unsigned int *v253;
  unsigned int v254;
  Exec **v255;
  char v256;
  uint64_t *v257;
  void **v258;
  unint64_t v259;
  unint64_t v262;
  unint64_t v263;
  char v264[8];
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  int v271;
  int v272;
  char *v273;
  char *v274;
  unint64_t v275;
  uint64_t v276;
  void *v277[2];
  char v278;
  void *v279;
  uint64_t v280;
  unsigned __int8 v281;
  unint64_t v282;
  unint64_t v283;
  void *v284;
  uint64_t v285;
  _BYTE v286[8];
  void *v287;
  char v288;
  void *v289;
  char v290;
  unint64_t v291;
  uint64_t v292;
  int v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _BYTE v303[4];
  int v304;
  uint64_t v305;
  void *v306;
  uint64_t v307;
  int v308;
  int v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  char v315;
  char v316[8];
  uint64_t v317;
  void *__p[2];
  uint64_t v319;
  void *v320;
  _DWORD v321[3];
  char v322;
  void *v323;
  char v324;
  void *v325;
  char v326;
  uint64_t v327;
  unint64_t v328;
  _UNKNOWN **v329;
  uint64_t v330;
  void *v331;
  _BYTE v332[16];
  void *v333;
  char v334;
  int v335;
  char v336;
  void **v337;
  uint64_t v338;
  uint64_t v339;

  v339 = *MEMORY[0x24BDAC8D0];
  v10 = (uint64_t *)(a4 + 2);
  v9 = *((_QWORD *)a4 + 1);
  if (!v9 || (*(_BYTE *)(v9 + 57) & 8) != 0 || !(*(unsigned int (**)(_DWORD *))(*(_QWORD *)a4 + 32))(a4))
    goto LABEL_553;
  v273 = 0;
  v274 = 0;
  v275 = 0;
  MEMORY[0x2348B274C](&v328, "file");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v328);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)__p, &v271);
  v257 = a7;
  if ((v320 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v320 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v319);
  if (__p[1])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p[1]);
  if ((v328 & 7) != 0)
  {
    v18 = (unsigned int *)(v328 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if (!v20)
    goto LABEL_552;
  v270 = 0;
  v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](__p, "UsdPreviewSurface");
  v22 = *a5 & 0xFFFFFFFFFFFFFFF8;
  v23 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  v255 = a2;
  if ((unsigned int *)v22 != v23)
  {
    __p[0] = 0;
    ShaderId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, (pxrInternal__aapl__pxrReserved__::TfToken *)__p);
    if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ShaderId);
    Data = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
    if ((*((_QWORD *)Data + 22) & 0xFFFFFFFFFFFFFFF8) != 0)
      v29 = (*((_QWORD *)Data + 22) & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      v29 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Data);
    if (*(char *)(v29 + 23) >= 0)
      v30 = (const char *)v29;
    else
      v30 = *(const char **)v29;
    v31 = *(char *)(EmptyString + 23);
    if (v31 >= 0)
      v32 = *(unsigned __int8 *)(EmptyString + 23);
    else
      v32 = *(_QWORD *)(EmptyString + 8);
    v33 = strlen(v30);
    if (v32 >= v33)
    {
      v34 = *(_QWORD *)EmptyString;
      if (v31 >= 0)
        v34 = EmptyString;
      v33 = strcmp((const char *)(v34 + v32 - v33), v30);
      if (!(_DWORD)v33)
        goto LABEL_56;
    }
    if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
      v35 = ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      v35 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v33);
    v36 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
    if (!v36)
      v36 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
    v37 = (*((_QWORD *)v36 + 23) & 0xFFFFFFFFFFFFFFF8) != 0
        ? (*((_QWORD *)v36 + 23) & 0xFFFFFFFFFFFFFFF8) + 16
        : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
    v38 = *(char *)(v37 + 23) >= 0 ? (const char *)v37 : *(const char **)v37;
    v39 = *(char *)(v35 + 23);
    v40 = v39 >= 0 ? *(unsigned __int8 *)(v35 + 23) : *(_QWORD *)(v35 + 8);
    v41 = strlen(v38);
    if (v40 < v41)
      goto LABEL_54;
    v42 = *(_QWORD *)v35;
    if (v39 >= 0)
      v42 = v35;
    v41 = strcmp((const char *)(v42 + v40 - v41), v38);
    if ((_DWORD)v41)
    {
LABEL_54:
      if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        v43 = ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v43 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v41);
      v47 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
      if (!v47)
        v47 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
      if ((*((_QWORD *)v47 + 24) & 0xFFFFFFFFFFFFFFF8) != 0)
        v48 = (*((_QWORD *)v47 + 24) & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v48 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v47);
      if (*(char *)(v48 + 23) >= 0)
        v49 = (const char *)v48;
      else
        v49 = *(const char **)v48;
      v50 = *(char *)(v43 + 23);
      if (v50 >= 0)
        v51 = *(unsigned __int8 *)(v43 + 23);
      else
        v51 = *(_QWORD *)(v43 + 8);
      v52 = strlen(v49);
      if (v51 < v52)
        goto LABEL_76;
      v53 = *(_QWORD *)v43;
      if (v50 >= 0)
        v53 = v43;
      v52 = strcmp((const char *)(v53 + v51 - v52), v49);
      if ((_DWORD)v52)
      {
LABEL_76:
        if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
          v54 = ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v54 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v52);
        v56 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
        if (!v56)
          v56 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
        if ((*((_QWORD *)v56 + 25) & 0xFFFFFFFFFFFFFFF8) != 0)
          v57 = (*((_QWORD *)v56 + 25) & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v57 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v56);
        if (*(char *)(v57 + 23) >= 0)
          v58 = (const char *)v57;
        else
          v58 = *(const char **)v57;
        v59 = *(char *)(v54 + 23);
        if (v59 >= 0)
          v60 = *(unsigned __int8 *)(v54 + 23);
        else
          v60 = *(_QWORD *)(v54 + 8);
        v61 = strlen(v58);
        v62 = v60 >= v61;
        v63 = v60 - v61;
        a2 = v255;
        if (!v62)
          goto LABEL_556;
        v64 = *(_QWORD *)v54;
        if (v59 >= 0)
          v64 = v54;
        v61 = strcmp((const char *)(v64 + v63), v58);
        if ((_DWORD)v61)
        {
LABEL_556:
          if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
            v65 = ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v65 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v61);
          v66 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
          if (!v66)
            v66 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
          v67 = (*((_QWORD *)v66 + 26) & 0xFFFFFFFFFFFFFFF8) != 0
              ? (*((_QWORD *)v66 + 26) & 0xFFFFFFFFFFFFFFF8) + 16
              : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v66);
          v68 = *(char *)(v67 + 23) >= 0 ? (const char *)v67 : *(const char **)v67;
          v69 = *(char *)(v65 + 23);
          v70 = v69 >= 0 ? *(unsigned __int8 *)(v65 + 23) : *(_QWORD *)(v65 + 8);
          v71 = strlen(v68);
          v62 = v70 >= v71;
          v72 = v70 - v71;
          a2 = v255;
          if (!v62)
            goto LABEL_557;
          v73 = *(_QWORD *)v65;
          if (v69 >= 0)
            v73 = v65;
          v71 = strcmp((const char *)(v73 + v72), v68);
          if ((_DWORD)v71)
          {
LABEL_557:
            if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
              v74 = ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) + 16;
            else
              v74 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v71);
            v75 = (realityio::tokens::TextureBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::TextureBuilderTokens);
            if (!v75)
              v75 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextureBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextureBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextureBuilderTokens);
            v76 = (*((_QWORD *)v75 + 27) & 0xFFFFFFFFFFFFFFF8) != 0
                ? (*((_QWORD *)v75 + 27) & 0xFFFFFFFFFFFFFFF8) + 16
                : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v75);
            v77 = *(char *)(v76 + 23) >= 0 ? (const char *)v76 : *(const char **)v76;
            v78 = *(char *)(v74 + 23);
            v79 = v78 >= 0 ? *(unsigned __int8 *)(v74 + 23) : *(_QWORD *)(v74 + 8);
            v80 = strlen(v77);
            if (v79 < v80)
              goto LABEL_137;
            v81 = *(_QWORD *)v74;
            if (v78 >= 0)
              v81 = v74;
            if (strcmp((const char *)(v81 + v79 - v80), v77))
            {
LABEL_137:
                              + 48);
              if ((v44 & 7) != 0)
              {
                v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
                do
                  v46 = __ldxr(v45);
                while (__stxr(v46 + 2, v45));
                goto LABEL_148;
              }
LABEL_150:
              v270 = v44;
              if (((uint64_t)__p[0] & 7) != 0)
              {
                v82 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
                do
                  v83 = __ldxr(v82);
                while (__stlxr(v83 - 2, v82));
              }
              goto LABEL_153;
            }
          }
        }
                        + 40);
        if ((v44 & 7) == 0)
          goto LABEL_150;
        v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 2, v45));
      }
      else
      {
        a2 = v255;
                        + 32);
        if ((v44 & 7) == 0)
          goto LABEL_150;
        v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 2, v45));
      }
    }
    else
    {
LABEL_56:
      a2 = v255;
                      + 24);
      if ((v44 & 7) == 0)
        goto LABEL_150;
      v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 2, v45));
    }
LABEL_148:
    if ((v46 & 1) == 0)
      v44 = (unint64_t)v45;
    goto LABEL_150;
  }
  if ((*a8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v27 = (pxrInternal__aapl__pxrReserved__::TfToken *)((*a8 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    v21 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
    v27 = v21;
  }
  if ((*a6 & 0xFFFFFFFFFFFFFFF8) != 0)
    v55 = (uint64_t **)((*a6 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v55 = (uint64_t **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
  semanticForPreviewSurfaceInputAndSource((unsigned int **)__p, (_QWORD **)v27, v55);
  v270 = (unint64_t)__p[0];
LABEL_153:
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v311, v10, a4 + 4);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v311, &v279);
  v269 = 0;
  v85 = *a3;
  v84 = a3[1];
  if (*a3 == v84)
  {
    v149 = 0;
    goto LABEL_320;
  }
  v256 = 0;
  v259 = MEMORY[0x24BEE9DC0] + 16;
  v258 = (void **)(MEMORY[0x24BEE9D38] + 16);
  do
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes();
    if (!v321[0])
      goto LABEL_305;
    LODWORD(v284) = 1;
    v285 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v287 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v331 = 0;
    v328 = v259;
    if ((v287 & 7) != 0)
    {
      v86 = (unsigned int *)((unint64_t)v287 & 0xFFFFFFFFFFFFFFF8);
      do
        v87 = __ldxr(v86);
      while (__stlxr(v87 - 2, v86));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v286);
    if (v285)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v285);
    v301 = 0;
    LODWORD(v277[0]) = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v284, (uint64_t *)&v329, &v330);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v337 = v258;
    if ((v287 & 7) != 0)
    {
      v88 = (unsigned int *)((unint64_t)v287 & 0xFFFFFFFFFFFFFFF8);
      do
        v89 = __ldxr(v88);
      while (__stlxr(v89 - 2, v88));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v286);
    if (v285)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v285);
    v296 = 0;
    if (v338 && (*(_BYTE *)(v338 + 57) & 8) == 0 && ((unsigned int (*)(void ***))v337[4])(&v337))
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v337, (pxrInternal__aapl__pxrReserved__::TfToken *)&v296);
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v284, (uint64_t *)&v329, &v330);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v284, &v306);
    if (v306 == v279)
    {
      v90 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v291, "UsdUVTexture");
      v91 = v296 & 0xFFFFFFFFFFFFFFF8;
      if ((v296 & 0xFFFFFFFFFFFFFFF8) == (v291 & 0xFFFFFFFFFFFFFFF8))
      {
        v93 = 1;
      }
      else
      {
        if (v91)
          v92 = v91 + 16;
        else
          v92 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v90);
        v94 = *(unsigned __int8 *)(v92 + 23);
        v95 = (char)v94;
        if ((v94 & 0x80u) != 0)
          v94 = *(_QWORD *)(v92 + 8);
        if (v94 >= 9)
        {
          if (v95 < 0)
            v92 = *(_QWORD *)v92;
          v93 = strncmp((const char *)v92, "ND_image_", 9uLL) == 0;
        }
        else
        {
          v93 = 0;
        }
      }
      if ((v291 & 7) != 0)
      {
        v96 = (unsigned int *)(v291 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
    }
    else
    {
      v93 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v306);
    if ((v287 & 7) != 0)
    {
      v98 = (unsigned int *)((unint64_t)v287 & 0xFFFFFFFFFFFFFFF8);
      do
        v99 = __ldxr(v98);
      while (__stlxr(v99 - 2, v98));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v286);
    if (v285)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v285);
    if (v93)
    {
      BaseName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(v85);
      if (((unint64_t)v284 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v101 = (pxrInternal__aapl__pxrReserved__::TfToken *)(((unint64_t)v284 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else
      {
        BaseName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
        v101 = BaseName;
      }
      if ((v301 & 0xFFFFFFFFFFFFFFF8) != 0)
        v102 = (uint64_t **)((v301 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v102 = (uint64_t **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
      semanticForPreviewSurfaceInputAndSource((unsigned int **)&v291, (_QWORD **)v101, v102);
      if ((v284 & 7) != 0)
      {
        v103 = (unsigned int *)((unint64_t)v284 & 0xFFFFFFFFFFFFFFF8);
        do
          v104 = __ldxr(v103);
        while (__stlxr(v104 - 2, v103));
      }
      v105 = v291;
      v284 = (void *)v291;
      if ((v291 & 7) != 0)
      {
        v106 = (unsigned int *)(v291 & 0xFFFFFFFFFFFFFFF8);
        do
          v107 = __ldxr(v106);
        while (__stxr(v107 + 2, v106));
        if ((v107 & 1) == 0)
        {
          v284 = (void *)(v105 & 0xFFFFFFFFFFFFFFF8);
          v105 &= 0xFFFFFFFFFFFFFFF8;
        }
      }
      SemanticPriority = getSemanticPriority(&v284);
      v109 = v270;
      v306 = (void *)v270;
      if ((v270 & 7) != 0)
      {
        v110 = (unsigned int *)(v270 & 0xFFFFFFFFFFFFFFF8);
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 2, v110));
        if ((v111 & 1) == 0)
        {
          v306 = (void *)(v109 & 0xFFFFFFFFFFFFFFF8);
          v109 &= 0xFFFFFFFFFFFFFFF8;
        }
      }
      v112 = getSemanticPriority(&v306);
      if ((v109 & 7) != 0)
      {
        v113 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
        do
          v114 = __ldxr(v113);
        while (__stlxr(v114 - 2, v113));
        v105 = (unint64_t)v284;
      }
      if ((v105 & 7) != 0)
      {
        v115 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
        do
          v116 = __ldxr(v115);
        while (__stlxr(v116 - 2, v115));
      }
      if (SemanticPriority <= v112)
        goto LABEL_288;
      v117 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v270, &v291);
      if ((v301 & 0xFFFFFFFFFFFFFFF8) != 0)
        v118 = (_QWORD *)((v301 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v118 = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v117);
      v119 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(v85);
      if (((unint64_t)v284 & 0xFFFFFFFFFFFFFFF8) != 0)
        v120 = ((unint64_t)v284 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        v120 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v119);
      v121 = *(char *)(v120 + 23);
      if (v121 < 0)
      {
        if (*(_QWORD *)(v120 + 8) != 1)
          goto LABEL_284;
        v120 = *(_QWORD *)v120;
      }
      else if (v121 != 1)
      {
        goto LABEL_284;
      }
      if (*(_BYTE *)v120 != 114)
        goto LABEL_284;
      if (*((char *)v118 + 23) < 0)
      {
        v256 = 0;
        v126 = v118[1];
        if (v126 <= 12)
        {
          if (v126 == 8)
          {
            v135 = *(_QWORD **)*v118;
            goto LABEL_308;
          }
          if (v126 != 9)
            goto LABEL_285;
          v127 = (_QWORD *)*v118;
          if (*(_QWORD *)*v118 == 0x73656E6867756F72 && *(_BYTE *)(*v118 + 8) == 115)
            goto LABEL_309;
          if (*v127 == 0x6F6973756C63636FLL && *((_BYTE *)v127 + 8) == 110)
            goto LABEL_309;
          v130 = *v127;
          v131 = *((unsigned __int8 *)v127 + 8);
          v132 = v130 == 0x616F637261656C63 && v131 == 116;
LABEL_276:
          v134 = v132;
          goto LABEL_310;
        }
        if (v126 == 13)
        {
          if (*(_QWORD *)*v118 != 0x72616C7563657073 || *(_QWORD *)(*v118 + 5) != 0x726F6C6F4372616CLL)
            goto LABEL_284;
          goto LABEL_309;
        }
        if (v126 != 18)
          goto LABEL_285;
        v118 = (_QWORD *)*v118;
      }
      else
      {
        v256 = 0;
        v122 = *((unsigned __int8 *)v118 + 23);
        if (v122 <= 0xC)
        {
          if (v122 != 8)
          {
            if (v122 != 9)
              goto LABEL_285;
            if ((*v118 != 0x73656E6867756F72 || *((_BYTE *)v118 + 8) != 115)
              && (*v118 != 0x6F6973756C63636FLL || *((_BYTE *)v118 + 8) != 110)
              && (*v118 != 0x616F637261656C63 || *((_BYTE *)v118 + 8) != 116))
            {
              goto LABEL_284;
            }
            goto LABEL_309;
          }
          v135 = (_QWORD *)*v118;
LABEL_308:
          if (v135 == (_QWORD *)0x63696C6C6174656DLL)
          {
LABEL_309:
            v134 = 1;
LABEL_310:
            v256 = v134;
            goto LABEL_285;
          }
LABEL_284:
          v256 = 0;
          goto LABEL_285;
        }
        if (v122 == 13)
        {
          if (*v118 != 0x72616C7563657073 || *(_QWORD *)((char *)v118 + 5) != 0x726F6C6F4372616CLL)
            goto LABEL_284;
          goto LABEL_309;
        }
        if (v122 != 18)
        {
LABEL_285:
          if ((v284 & 7) != 0)
          {
            v137 = (unsigned int *)((unint64_t)v284 & 0xFFFFFFFFFFFFFFF8);
            do
              v138 = __ldxr(v137);
            while (__stlxr(v138 - 2, v137));
          }
LABEL_288:
          v139 = v269;
          if (!v269)
          {
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v269, &v301);
            v139 = v269;
          }
          if ((v139 & 0xFFFFFFFFFFFFFFF8) != (v301 & 0xFFFFFFFFFFFFFFF8))
          {
            MEMORY[0x2348B274C](&v284, "rgba");
            if ((v269 & 7) != 0)
            {
              v140 = (unsigned int *)(v269 & 0xFFFFFFFFFFFFFFF8);
              do
                v141 = __ldxr(v140);
              while (__stlxr(v141 - 2, v140));
            }
            v269 = (unint64_t)v284;
          }
          if ((v291 & 7) != 0)
          {
            v142 = (unsigned int *)(v291 & 0xFFFFFFFFFFFFFFF8);
            do
              v143 = __ldxr(v142);
            while (__stlxr(v143 - 2, v142));
          }
          goto LABEL_298;
        }
      }
      v132 = *v118 == 0x616F637261656C63 && v118[1] == 0x656E6867756F5274 && *((_WORD *)v118 + 8) == 29555;
      goto LABEL_276;
    }
LABEL_298:
    if ((v296 & 7) != 0)
    {
      v144 = (unsigned int *)(v296 & 0xFFFFFFFFFFFFFFF8);
      do
        v145 = __ldxr(v144);
      while (__stlxr(v145 - 2, v144));
    }
    MEMORY[0x2348B1EC4](&v337);
    if ((v301 & 7) != 0)
    {
      v146 = (unsigned int *)(v301 & 0xFFFFFFFFFFFFFFF8);
      do
        v147 = __ldxr(v146);
      while (__stlxr(v147 - 2, v146));
    }
    MEMORY[0x2348B2350](&v328);
LABEL_305:
    pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)__p);
    v85 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)((char *)v85 + 32);
  }
  while (v85 != v84);
  a2 = v255;
  v149 = v256;
  if (!v269)
  {
LABEL_320:
    MEMORY[0x2348B274C](__p, "rgb");
    if ((v269 & 7) != 0)
    {
      v150 = (unsigned int *)(v269 & 0xFFFFFFFFFFFFFFF8);
      do
        v151 = __ldxr(v150);
      while (__stlxr(v151 - 2, v150));
    }
    v269 = (unint64_t)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v279);
  if ((v314 & 7) != 0)
  {
    v152 = (unsigned int *)((unint64_t)v314 & 0xFFFFFFFFFFFFFFF8);
    do
      v153 = __ldxr(v152);
    while (__stlxr(v153 - 2, v152));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v313);
  if (v312)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v312);
  v268 = v269;
  if ((v269 & 7) != 0)
  {
    v154 = (unsigned int *)(v269 & 0xFFFFFFFFFFFFFFF8);
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 2, v154));
    if ((v155 & 1) == 0)
      v268 &= 0xFFFFFFFFFFFFFFF8;
  }
  v317 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, (pxrInternal__aapl__pxrReserved__::TfToken *)&v317);
  std::string::basic_string[abi:ne180100]<0>(__p, "/__textures");
  MEMORY[0x2348B26F8](v316, __p);
  if (SHIBYTE(v319) < 0)
    operator delete(__p[0]);
  if (v268)
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v311);
    MEMORY[0x2348B274C](__p, "file");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
    if (((uint64_t)__p[0] & 7) != 0)
    {
      v156 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v157 = __ldxr(v156);
      while (__stlxr(v157 - 2, v156));
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v306)
      && (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes();
      LODWORD(v301) = 3;
      v302 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v305 = 0;
      LODWORD(v291) = (_DWORD)v306;
      v292 = v307;
      if (v307)
      {
        v158 = (unint64_t *)(v307 + 48);
        do
          v159 = __ldxr(v158);
        while (__stxr(v159 + 1, v158));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v293, &v308);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v294, &v309);
      v295 = v310;
      if ((v310 & 7) != 0)
      {
        v160 = (unsigned int *)(v310 & 0xFFFFFFFFFFFFFFF8);
        do
          v161 = __ldxr(v160);
        while (__stxr(v161 + 2, v160));
        if ((v161 & 1) == 0)
          v295 &= 0xFFFFFFFFFFFFFFF8;
      }
      a2 = v255;
      if ((v295 & 7) != 0)
      {
        v162 = (unsigned int *)(v295 & 0xFFFFFFFFFFFFFFF8);
        do
          v163 = __ldxr(v162);
        while (__stlxr(v163 - 2, v162));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v293);
      if (v292)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v292);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v296))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v296, __p);
        LODWORD(v301) = v296;
        v164 = v297;
        if (v297)
        {
          v165 = (unint64_t *)(v297 + 48);
          do
            v166 = __ldxr(v165);
          while (__stxr(v166 + 1, v165));
        }
        v167 = v302;
        v302 = v164;
        if (v167)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v167);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v303, &v298);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v304, &v299);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v305, &v300);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      }
      if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v301) & 1) != 0)
      {
        if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>() & 1) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v328, "");
          std::string::basic_string[abi:ne180100]<0>(&v331, "");
          std::string::basic_string[abi:ne180100]<0>(&v333, "rgba");
          v335 = 0;
          v336 = 0;
          v283 = v268;
          if ((v268 & 7) != 0)
          {
            v168 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFFFF8);
            do
              v169 = __ldxr(v168);
            while (__stxr(v169 + 2, v168));
            if ((v169 & 1) == 0)
              v283 = v268 & 0xFFFFFFFFFFFFFFF8;
          }
          v170 = *a8;
          if ((*a8 & 7) != 0)
          {
            v171 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
            do
              v172 = __ldxr(v171);
            while (__stxr(v172 + 2, v171));
            if ((v172 & 1) == 0)
              v170 &= 0xFFFFFFFFFFFFFFF8;
          }
          v173 = v270;
          v282 = v270;
          if ((v270 & 7) != 0)
          {
            v174 = (unsigned int *)(v270 & 0xFFFFFFFFFFFFFFF8);
            do
              v175 = __ldxr(v174);
            while (__stxr(v175 + 2, v174));
            if ((v175 & 1) == 0)
            {
              v282 = v173 & 0xFFFFFFFFFFFFFFF8;
              v173 &= 0xFFFFFFFFFFFFFFF8;
            }
          }
          makeImportSettingsForUsdPreviewSurface((uint64_t)&v284, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, &v283, &v282, v149 != 0);
          if ((v173 & 7) != 0)
          {
            v176 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
            do
              v177 = __ldxr(v176);
            while (__stlxr(v177 - 2, v176));
          }
          if ((v170 & 7) != 0)
          {
            v178 = (unsigned int *)(v170 & 0xFFFFFFFFFFFFFFF8);
            do
              v179 = __ldxr(v178);
            while (__stlxr(v179 - 2, v178));
          }
          if ((v283 & 7) != 0)
          {
            v180 = (unsigned int *)(v283 & 0xFFFFFFFFFFFFFFF8);
            do
              v181 = __ldxr(v180);
            while (__stlxr(v181 - 2, v180));
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v319, (uint64_t)"asset_", 6);
          v279 = 0;
          LOBYTE(v280) = 0;
          pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,std::string const&>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v279, (const char *)&v311, (uint64_t)&v314);
          v182 = (_QWORD *)std::ostream::operator<<();
          v183 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)"_", 1);
          realityio::TextureAssetAction::ImportOperationSettings::idString((uint64_t *)v277, (realityio::TextureAssetAction::ImportOperationSettings *)&v328);
          pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier();
          if ((v281 & 0x80u) == 0)
            v184 = &v279;
          else
            v184 = v279;
          if ((v281 & 0x80u) == 0)
            v185 = v281;
          else
            v185 = v280;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)v184, v185);
          if ((char)v281 < 0)
            operator delete(v279);
          if (v278 < 0)
            operator delete(v277[0]);
          std::stringbuf::str();
          MEMORY[0x2348B2764](&v276, &v279);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v316, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v276);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v277, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v268);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v277);
          if ((v276 & 7) != 0)
          {
            v186 = (unsigned int *)(v276 & 0xFFFFFFFFFFFFFFF8);
            do
              v187 = __ldxr(v186);
            while (__stlxr(v187 - 2, v186));
          }
          if ((char)v281 < 0)
            operator delete(v279);
          __p[0] = *(void **)MEMORY[0x24BEDB7F0];
          v188 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
          *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
          v319 = v188;
          v320 = (void *)(MEMORY[0x24BEDB848] + 16);
          if (v326 < 0)
            operator delete(v325);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x2348B4DA4](&v327);
          if (v290 < 0)
            operator delete(v289);
          if (v288 < 0)
            operator delete(v287);
          if ((v286[7] & 0x80000000) != 0)
            operator delete(v284);
          if (v334 < 0)
            operator delete(v333);
          if ((v332[15] & 0x80000000) != 0)
            operator delete(v331);
          if (SHIBYTE(v330) < 0)
            operator delete((void *)v328);
        }
        else
        {
          MEMORY[0x2348B274C](&v328, "Invalid");
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v316, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v328);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v268);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
          if ((v328 & 7) != 0)
          {
            v197 = (unsigned int *)(v328 & 0xFFFFFFFFFFFFFFF8);
            do
              v198 = __ldxr(v197);
            while (__stlxr(v198 - 2, v197));
          }
        }
      }
      else
      {
        MEMORY[0x2348B274C](&v328, "Invalid");
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v316, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v328);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v268);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        if ((v328 & 7) != 0)
        {
          v195 = (unsigned int *)(v328 & 0xFFFFFFFFFFFFFFF8);
          do
            v196 = __ldxr(v195);
          while (__stlxr(v196 - 2, v195));
        }
      }
      if ((v300 & 7) != 0)
      {
        v199 = (unsigned int *)(v300 & 0xFFFFFFFFFFFFFFF8);
        do
          v200 = __ldxr(v199);
        while (__stlxr(v200 - 2, v199));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v298);
      if (v297)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v297);
      if ((v305 & 7) != 0)
      {
        v201 = (unsigned int *)(v305 & 0xFFFFFFFFFFFFFFF8);
        do
          v202 = __ldxr(v201);
        while (__stlxr(v202 - 2, v201));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v303);
      if (v302)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v302);
      pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)&v337);
    }
    else
    {
      MEMORY[0x2348B274C](&v328, "Invalid");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v316, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v328);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v268);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      if ((v328 & 7) != 0)
      {
        v189 = (unsigned int *)(v328 & 0xFFFFFFFFFFFFFFF8);
        do
          v190 = __ldxr(v189);
        while (__stlxr(v190 - 2, v189));
      }
    }
    if ((v310 & 7) != 0)
    {
      v203 = (unsigned int *)(v310 & 0xFFFFFFFFFFFFFFF8);
      do
        v204 = __ldxr(v203);
      while (__stlxr(v204 - 2, v203));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v308);
    if (v307)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v307);
    if (v315 < 0)
      operator delete(v314);
    if (SHIBYTE(v313) < 0)
      operator delete(v311);
  }
  else
  {
    MEMORY[0x2348B274C](&v328, "Invalid");
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v316, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v328);
    MEMORY[0x2348B274C](&v284, "EmptySource");
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v284);
    if ((v284 & 7) != 0)
    {
      v191 = (unsigned int *)((unint64_t)v284 & 0xFFFFFFFFFFFFFFF8);
      do
        v192 = __ldxr(v191);
      while (__stlxr(v192 - 2, v191));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    if ((v328 & 7) != 0)
    {
      v193 = (unsigned int *)(v328 & 0xFFFFFFFFFFFFFFF8);
      do
        v194 = __ldxr(v193);
      while (__stlxr(v194 - 2, v193));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v316);
  if ((v317 & 7) != 0)
  {
    v205 = (unsigned int *)(v317 & 0xFFFFFFFFFFFFFFF8);
    do
      v206 = __ldxr(v205);
    while (__stlxr(v206 - 2, v205));
  }
  if ((v268 & 7) != 0)
  {
    v207 = (unsigned int *)(v268 & 0xFFFFFFFFFFFFFFF8);
    do
      v208 = __ldxr(v207);
    while (__stlxr(v208 - 2, v207));
  }
  MEMORY[0x2348B274C](__p, "file");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
  if ((v267 & 7) != 0)
  {
    v209 = (unsigned int *)(v267 & 0xFFFFFFFFFFFFFFF8);
    do
      v210 = __ldxr(v209);
    while (__stlxr(v210 - 2, v209));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v266);
  if (v265)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v265);
  if (((uint64_t)__p[0] & 7) != 0)
  {
    v211 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v212 = __ldxr(v211);
    while (__stlxr(v212 - 2, v211));
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v284, __p);
  v213 = v274;
  if ((unint64_t)v274 >= v275)
  {
    v214 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v273, __p);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v274, __p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v213 + 1, (_DWORD *)__p + 1);
    v214 = v213 + 8;
  }
  v274 = v214;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v284, __p);
  v319 = 0;
  __p[1] = 0;
  v320 = 0;
  v215 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v215)
    v215 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v216 = *((_QWORD *)v215 + 20) & 0xFFFFFFFFFFFFFFF8;
  if (v216)
  {
    v217 = (char *)(v216 + 16);
    if (*(char *)(v216 + 39) < 0)
      v217 = *(char **)v217;
  }
  else
  {
    v217 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v328, v217);
  MEMORY[0x2348B26F8](v321, &v328);
  v218 = v257[1];
  if (v218 >= v257[2])
  {
    v219 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(v257, (uint64_t)__p);
  }
  else
  {
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v257[1], (uint64_t)__p);
    v219 = v218 + 40;
  }
  v257[1] = v219;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v321);
  v311 = &__p[1];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
  if (SHIBYTE(v330) < 0)
    operator delete((void *)v328);
  v263 = v269;
  if ((v269 & 7) != 0)
  {
    v220 = (unsigned int *)(v269 & 0xFFFFFFFFFFFFFFF8);
    do
      v221 = __ldxr(v220);
    while (__stxr(v221 + 2, v220));
    if ((v221 & 1) == 0)
      v263 = (unint64_t)v220;
  }
  v222 = *a8;
  if ((*a8 & 7) != 0)
  {
    v223 = (unsigned int *)(v222 & 0xFFFFFFFFFFFFFFF8);
    do
      v224 = __ldxr(v223);
    while (__stxr(v224 + 2, v223));
    if ((v224 & 1) == 0)
      v222 &= 0xFFFFFFFFFFFFFFF8;
  }
  v225 = v270;
  v262 = v270;
  if ((v270 & 7) != 0)
  {
    v226 = (unsigned int *)(v270 & 0xFFFFFFFFFFFFFFF8);
    do
      v227 = __ldxr(v226);
    while (__stxr(v227 + 2, v226));
    if ((v227 & 1) == 0)
    {
      v262 = v225 & 0xFFFFFFFFFFFFFFF8;
      v225 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  makeImportSettingsForUsdPreviewSurface((uint64_t)__p, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)a4, &v263, &v262, v149 != 0);
  if ((v225 & 7) != 0)
  {
    v228 = (unsigned int *)(v225 & 0xFFFFFFFFFFFFFFF8);
    do
      v229 = __ldxr(v228);
    while (__stlxr(v229 - 2, v228));
  }
  if ((v222 & 7) != 0)
  {
    v230 = (unsigned int *)(v222 & 0xFFFFFFFFFFFFFFF8);
    do
      v231 = __ldxr(v230);
    while (__stlxr(v231 - 2, v230));
  }
  if ((v263 & 7) != 0)
  {
    v232 = (unsigned int *)(v263 & 0xFFFFFFFFFFFFFFF8);
    do
      v233 = __ldxr(v232);
    while (__stlxr(v233 - 2, v232));
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1);
  MEMORY[0x2348B274C](&v311, "__textureImportSettings");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v328, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v311);
  if ((v311 & 7) != 0)
  {
    v234 = (unsigned int *)((unint64_t)v311 & 0xFFFFFFFFFFFFFFF8);
    do
      v235 = __ldxr(v234);
    while (__stlxr(v235 - 2, v234));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v236 = (std::string **)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v328);
  v329 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>::_PlaceCopy(v236, (__int128 *)__p);
  TgBase::emitConstant(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v306, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v328);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v328);
  v237 = v274;
  if ((unint64_t)v274 >= v275)
  {
    v238 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v273, &v306);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v274, &v306);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v237 + 1, (_DWORD *)&v306 + 1);
    v238 = v237 + 8;
  }
  v274 = v238;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v328, &v271);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v328 + 1, &v272);
  v329 = 0;
  v330 = 0;
  v331 = 0;
  v239 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v239)
    v239 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v240 = *((_QWORD *)v239 + 20) & 0xFFFFFFFFFFFFFFF8;
  if (v240)
  {
    v241 = (char *)(v240 + 16);
    if (*(char *)(v240 + 39) < 0)
      v241 = *(char **)v241;
  }
  else
  {
    v241 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v311, v241);
  MEMORY[0x2348B26F8](v332, &v311);
  v242 = v257[1];
  if (v242 >= v257[2])
  {
    v243 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(v257, (uint64_t)&v328);
  }
  else
  {
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v257[1], (uint64_t)&v328);
    v243 = v242 + 40;
  }
  v257[1] = v243;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v332);
  v337 = (void **)&v329;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v337);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v328);
  if (SHIBYTE(v313) < 0)
    operator delete(v311);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v328, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v328 + 1, (_DWORD *)a1 + 1);
  v329 = 0;
  v330 = 0;
  v331 = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(&v329, v273, v274, (v274 - v273) >> 3);
  v244 = (realityio::tokens::ActionTokens_StaticTokenType *)atomic_load(&realityio::tokens::ActionTokens);
  if (!v244)
    v244 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ActionTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ActionTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ActionTokens);
  v245 = *((_QWORD *)v244 + 45) & 0xFFFFFFFFFFFFFFF8;
  if (v245)
  {
    v246 = (char *)(v245 + 16);
    if (*(char *)(v245 + 39) < 0)
      v246 = *(char **)v246;
  }
  else
  {
    v246 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v311, v246);
  MEMORY[0x2348B26F8](v332, &v311);
  v247 = v257[1];
  if (v247 >= v257[2])
  {
    v248 = std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(v257, (uint64_t)&v328);
  }
  else
  {
    std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v257[1], (uint64_t)&v328);
    v248 = v247 + 40;
  }
  v257[1] = v248;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v332);
  v337 = (void **)&v329;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v337);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v328);
  if (SHIBYTE(v313) < 0)
    operator delete(v311);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v306);
  if (v324 < 0)
    operator delete(v323);
  if (v322 < 0)
    operator delete(v320);
  if (SHIBYTE(v319) < 0)
    operator delete(__p[0]);
  if ((v287 & 7) != 0)
  {
    v249 = (unsigned int *)((unint64_t)v287 & 0xFFFFFFFFFFFFFFF8);
    do
      v250 = __ldxr(v249);
    while (__stlxr(v250 - 2, v249));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v286);
  if (v285)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v285);
  if ((v269 & 7) != 0)
  {
    v251 = (unsigned int *)(v269 & 0xFFFFFFFFFFFFFFF8);
    do
      v252 = __ldxr(v251);
    while (__stlxr(v252 - 2, v251));
  }
  if ((v270 & 7) != 0)
  {
    v253 = (unsigned int *)(v270 & 0xFFFFFFFFFFFFFFF8);
    do
      v254 = __ldxr(v253);
    while (__stlxr(v254 - 2, v253));
  }
LABEL_552:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v271);
  __p[0] = &v273;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if ((v20 & 1) == 0)
  {
LABEL_553:
    *(_QWORD *)a1 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  }
}

void sub_2301F2FF0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_2301F3874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a41);
  JUMPOUT(0x2301F37ECLL);
}

void `anonymous namespace'::findFirstUVMeshAttributeNameFromShader(std::string *this, const pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2)
{
  uint64_t v3;
  int *v5;
  int *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  int IsValid;
  uint64_t *v14;
  void **p_p;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v52;
  std::type_info *v53;
  const std::string *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  void *v75;
  int v76;
  uint64_t v77;
  pxrInternal__aapl__pxrReserved__::TfToken *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  uint64_t EmptyString;
  __int128 v84;
  unsigned int v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  std::string v90;
  void *v91;
  uint64_t v92;
  void *__p;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  _BYTE v113[4];
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  int *v133;
  int *v134;
  std::string v135;
  uint64_t *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  v88 = 0;
  v89 = 0;
  v87 = 0;
  v137 = 0;
  v138 = 0;
  v136 = (uint64_t *)&v137;
  memset(&v135, 0, sizeof(v135));
  v3 = *((_QWORD *)a2 + 1);
  if (v3
    && (*(_BYTE *)(v3 + 57) & 8) == 0
    && ((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::UsdShadeShader *))(*(_QWORD *)a2 + 32))(a2) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(a2);
    v6 = v133;
    v5 = v134;
    if (v133 != v134)
    {
      v86 = (void *)(MEMORY[0x24BEE9D38] + 16);
      while (1)
      {
        v128 = *v6;
        v7 = *((_QWORD *)v6 + 1);
        v129 = v7;
        if (v7)
        {
          v8 = (unint64_t *)(v7 + 48);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v130, v6 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v131, v6 + 5);
        v10 = *((_QWORD *)v6 + 3);
        v132 = v10;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 2, v11));
          if ((v12 & 1) == 0)
            v132 &= 0xFFFFFFFFFFFFFFF8;
        }
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v128)
          && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
        {
          realityio::findOriginalSourceAttribute((realityio *)&v128, (uint64_t)&v91);
          IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v91);
          if (IsValid)
            v14 = &v92;
          else
            v14 = &v129;
          if (IsValid)
            p_p = &__p;
          else
            p_p = (void **)&v130;
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v124, v14, p_p);
          if ((v94 & 7) != 0)
          {
            v16 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stlxr(v17 - 2, v16));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          if (v92)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v92);
        }
        else
        {
          v124 = 1;
          v125 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          v127 = 0;
        }
        if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v124))
          goto LABEL_149;
        v18 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if ((v91 & 7) != 0)
        {
          v19 = (unsigned int *)((unint64_t)v91 & 0xFFFFFFFFFFFFFFF8);
          do
            v20 = __ldxr(v19);
          while (__stlxr(v20 - 2, v19));
        }
        if (!v18)
          goto LABEL_149;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v91 = v86;
        MEMORY[0x2348B274C](&v116, "st");
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v91, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v116);
        if ((v116 & 7) != 0)
        {
          v21 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
          do
            v22 = __ldxr(v21);
          while (__stlxr(v22 - 2, v21));
        }
        MEMORY[0x2348B1EC4](&v91);
        if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v120)
          || (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) == 0)
        {
          if ((v123 & 7) != 0)
          {
            v35 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
            do
              v36 = __ldxr(v35);
            while (__stlxr(v36 - 2, v35));
          }
          goto LABEL_147;
        }
        realityio::findOriginalSourceAttribute((realityio *)&v120, (uint64_t)&v116);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v116))
        {
          if ((_DWORD)v116 != v120
            || v117 != v121
            || v118 != v122
            || (v119 & 0xFFFFFFFFFFFFFFF8) != (v123 & 0xFFFFFFFFFFFFFFF8))
          {
            break;
          }
        }
LABEL_139:
        if ((v119 & 7) != 0)
        {
          v67 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
          do
            v68 = __ldxr(v67);
          while (__stlxr(v68 - 2, v67));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v118);
        if (v117)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v117);
        if ((v123 & 7) != 0)
        {
          v69 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
          do
            v70 = __ldxr(v69);
          while (__stlxr(v70 - 2, v69));
        }
LABEL_147:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v122);
        if (v121)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v121);
LABEL_149:
        if ((v127 & 7) != 0)
        {
          v71 = (unsigned int *)(v127 & 0xFFFFFFFFFFFFFFF8);
          do
            v72 = __ldxr(v71);
          while (__stlxr(v72 - 2, v71));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v126);
        if (v125)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v125);
        if ((v132 & 7) != 0)
        {
          v73 = (unsigned int *)(v132 & 0xFFFFFFFFFFFFFFF8);
          do
            v74 = __ldxr(v73);
          while (__stlxr(v74 - 2, v73));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v130);
        if (v129)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v129);
        v6 += 8;
        if (v6 == v5)
          goto LABEL_165;
      }
      v111 = 1;
      v112 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v115 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v106, &v117, &v118);
      MEMORY[0x2348B274C](&v91, "UsdPrimvarReader_float2");
      v23 = v105;
      v24 = (unsigned int *)((unint64_t)v91 & 0xFFFFFFFFFFFFFFF8);
      if ((v91 & 7) != 0)
      {
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      if ((unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8) == v24)
      {
        v111 = v106;
        v37 = v107;
        if (v107)
        {
          v38 = (unint64_t *)(v107 + 48);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v40 = v112;
        v112 = v37;
        if (v40)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v40);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v113, &v108);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v114, &v109);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v115, &v110);
      }
      else
      {
        MEMORY[0x2348B274C](&v91, "UsdTransform2d");
        v26 = v105;
        v27 = (unsigned int *)((unint64_t)v91 & 0xFFFFFFFFFFFFFFF8);
        if ((v91 & 7) != 0)
        {
          do
            v28 = __ldxr(v27);
          while (__stlxr(v28 - 2, v27));
        }
        if ((unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8) == v27)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v101 = MEMORY[0x24BEE9D38] + 16;
          MEMORY[0x2348B274C](&v97, "in");
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v101, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v97);
          if ((v97 & 7) != 0)
          {
            v29 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
            do
              v30 = __ldxr(v29);
            while (__stlxr(v30 - 2, v29));
          }
          MEMORY[0x2348B1EC4](&v101);
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v91)
            && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
          {
            realityio::findOriginalSourceAttribute((realityio *)&v91, (uint64_t)&v101);
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v101)
              && ((_DWORD)v101 != (_DWORD)v91
               || v102 != v92
               || v103 != __p
               || (v104 & 0xFFFFFFFFFFFFFFF8) != (v94 & 0xFFFFFFFFFFFFFFF8)))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v97, &v102, &v103);
              MEMORY[0x2348B274C](&v96, "UsdPrimvarReader_float2");
              v31 = v139;
              v32 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
              if ((v96 & 7) != 0)
              {
                do
                  v33 = __ldxr(v32);
                while (__stlxr(v33 - 2, v32));
                v34 = v139;
              }
              else
              {
                v34 = v139;
              }
              if ((v34 & 7) != 0)
              {
                v41 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
                do
                  v42 = __ldxr(v41);
                while (__stlxr(v42 - 2, v41));
              }
              if ((unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8) == v32)
                pxrInternal__aapl__pxrReserved__::UsdPrim::operator=((uint64_t)&v111, (uint64_t)&v97);
              if ((v100 & 7) != 0)
              {
                v43 = (unsigned int *)(v100 & 0xFFFFFFFFFFFFFFF8);
                do
                  v44 = __ldxr(v43);
                while (__stlxr(v44 - 2, v43));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v99);
              if (v98)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v98);
            }
            if ((v104 & 7) != 0)
            {
              v45 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
              do
                v46 = __ldxr(v45);
              while (__stlxr(v46 - 2, v45));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v103);
            if (v102)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v102);
          }
          if ((v94 & 7) != 0)
          {
            v47 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
            do
              v48 = __ldxr(v47);
            while (__stlxr(v48 - 2, v47));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          if (v92)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v92);
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v111))
      {
LABEL_126:
        if ((v105 & 7) != 0)
        {
          v61 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
          do
            v62 = __ldxr(v61);
          while (__stlxr(v62 - 2, v61));
        }
        if ((v110 & 7) != 0)
        {
          v63 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
          do
            v64 = __ldxr(v63);
          while (__stlxr(v64 - 2, v63));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
        if (v107)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107);
        if ((v115 & 7) != 0)
        {
          v65 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFFFF8);
          do
            v66 = __ldxr(v65);
          while (__stlxr(v66 - 2, v65));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v113);
        if (v112)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v112);
        goto LABEL_139;
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v91 = (void *)(MEMORY[0x24BEE9D38] + 16);
      MEMORY[0x2348B274C](&v97, "varname");
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v91, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v97);
      if ((v97 & 7) != 0)
      {
        v49 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      MEMORY[0x2348B1EC4](&v91);
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v101)
        || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
      {
LABEL_121:
        if ((v104 & 7) != 0)
        {
          v59 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
          do
            v60 = __ldxr(v59);
          while (__stlxr(v60 - 2, v59));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v103);
        if (v102)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v102);
        goto LABEL_126;
      }
      realityio::findOriginalSourceAttribute((realityio *)&v101, (uint64_t)&v97);
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v97))
      {
LABEL_116:
        if ((v100 & 7) != 0)
        {
          v57 = (unsigned int *)(v100 & 0xFFFFFFFFFFFFFFF8);
          do
            v58 = __ldxr(v57);
          while (__stlxr(v58 - 2, v57));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v99);
        if (v98)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v98);
        goto LABEL_121;
      }
      v140 = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
      if (!v140)
      {
LABEL_115:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        goto LABEL_116;
      }
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v139) & 1) == 0)
      {
        Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        {
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
          v75 = &v91;
          if (SHIBYTE(__p) < 0)
            v75 = v91;
          NSLog(CFSTR("Warning: invalid varname type %s"), v75);
          if (SHIBYTE(__p) < 0)
            operator delete(v91);
          goto LABEL_105;
        }
        v53 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v139, v53);
      }
      v54 = (const std::string *)pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v139);
      std::string::operator=(&v135, v54);
LABEL_105:
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v90, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
      else
        v90 = v135;
      realityio::TexcoordID::TexcoordID((uint64_t)&v91, (uint64_t)&v90, -1, 0);
      std::__tree<realityio::TexcoordID>::__emplace_unique_key_args<realityio::TexcoordID,realityio::TexcoordID>(&v136, (realityio::TexcoordID *)&v91, (uint64_t)&v91);
      if (v95 < 0)
        operator delete(__p);
      if ((v92 & 7) != 0)
      {
        v55 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      goto LABEL_115;
    }
LABEL_165:
    v91 = &v133;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
    v76 = v138;
    if ((int)v138 >= 8)
      v76 = 8;
    v77 = v76;
    std::vector<realityio::TexcoordID>::reserve(&v87, v76);
    v91 = v136;
    std::__advance[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>>((_QWORD **)&v91, v77);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::__tree_const_iterator<realityio::TexcoordID,std::__tree_node<realityio::TexcoordID,void *> *,long>,std::back_insert_iterator<std::vector<realityio::TexcoordID>>>((uint64_t)&v124, v136, v91, &v87);
  }
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  std::__tree<realityio::TexcoordID>::destroy((uint64_t)&v136, v137);
  if (v87 == v88)
  {
    this->__r_.__value_.__r.__words[0] = 0;
    this->__r_.__value_.__l.__size_ = 0;
    this->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v79 = *(_QWORD *)(v87 + 8);
    if ((v79 & 7) != 0)
    {
      v80 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 2, v80));
      if ((v81 & 1) == 0)
        v79 &= 0xFFFFFFFFFFFFFFF8;
    }
    v82 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFFFF8);
    if ((v79 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t)(v82 + 4);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v78);
    if (*(char *)(EmptyString + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
    }
    else
    {
      v84 = *(_OWORD *)EmptyString;
      this->__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v84;
    }
    if ((v79 & 7) != 0)
    {
      do
        v85 = __ldxr(v82);
      while (__stlxr(v85 - 2, v82));
    }
  }
  v91 = &v87;
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
}

void sub_2301F44D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;
  unsigned int *v69;
  unsigned int v70;
  void ***v71;

  if (a41 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v67 - 112));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a46);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a50);
  if ((a54 & 7) != 0)
  {
    v69 = (unsigned int *)(a54 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a55);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a59);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a63);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a67);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v67 - 248));
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v67 - 216));
  *(_QWORD *)(v67 - 216) = v67 - 184;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](v71);
  if (*(char *)(v67 - 137) < 0)
    operator delete(*(void **)(v67 - 160));
  std::__tree<realityio::TexcoordID>::destroy(v67 - 136, *(_QWORD **)(v67 - 128));
  *(_QWORD *)(v67 - 216) = &a30;
  std::vector<realityio::TexcoordID>::__destroy_vector::operator()[abi:ne180100]((void ***)(v67 - 216));
  _Unwind_Resume(a1);
}

_QWORD *semanticForPreviewSurfaceInputAndSource(unsigned int **a1, _QWORD **a2, uint64_t **a3)
{
  int v5;
  _QWORD **v6;
  _QWORD *v8;
  _QWORD *result;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  int v20;
  unsigned int *v22;
  _QWORD *v23;
  _QWORD *v27;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  unsigned int *v34;
  unsigned int *v35;

  v5 = *((unsigned __int8 *)a2 + 23);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (v5 != 6)
    {
      v6 = a2;
      if (v5 != 12)
      {
        if (v5 != 13)
          goto LABEL_43;
        if (*a2 != (_QWORD *)0x6576697373696D65 || *(_QWORD **)((char *)a2 + 5) != (_QWORD *)0x726F6C6F43657669)
          goto LABEL_43;
LABEL_19:
        v11 = (unsigned int *)result[2];
        *a1 = v11;
        if ((v11 & 7) == 0)
          return result;
        v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 2, v12));
        goto LABEL_109;
      }
      goto LABEL_39;
    }
    if (*(_DWORD *)a2 != 1836216174 || *((_WORD *)a2 + 2) != 27745)
      goto LABEL_43;
LABEL_34:
    v16 = (unsigned int *)result[1];
    *a1 = v16;
    if ((v16 & 7) == 0)
      return result;
    v12 = (unsigned int *)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    goto LABEL_109;
  }
  v8 = a2[1];
  if (v8 == (_QWORD *)6)
  {
    if (*(_DWORD *)*a2 != 1836216174 || *((_WORD *)*a2 + 2) != 27745)
      goto LABEL_43;
    goto LABEL_34;
  }
  if (v8 == (_QWORD *)12)
  {
    v6 = (_QWORD **)*a2;
LABEL_39:
    v17 = (uint64_t)*v6;
    v18 = *((_DWORD *)v6 + 2);
    if (v17 == 0x4365737566666964 && v18 == 1919904879)
    {
      v22 = (unsigned int *)result[3];
      *a1 = v22;
      if ((v22 & 7) == 0)
        return result;
      v12 = (unsigned int *)((unint64_t)v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      goto LABEL_109;
    }
    goto LABEL_43;
  }
  if (v8 == (_QWORD *)13 && **a2 == 0x6576697373696D65 && *(_QWORD *)((char *)*a2 + 5) == 0x726F6C6F43657669)
    goto LABEL_19;
LABEL_43:
  v20 = *((char *)a3 + 23);
  if (v20 < 0)
  {
    if (a3[1] != (uint64_t *)1)
      goto LABEL_106;
    a3 = (uint64_t **)*a3;
  }
  else if (v20 != 1)
  {
    goto LABEL_106;
  }
  if (*(_BYTE *)a3 == 114)
  {
    if ((v5 & 0x80) != 0)
    {
      v23 = a2[1];
      if (v23 != (_QWORD *)8)
      {
        if (v23 == (_QWORD *)9 && **a2 == 0x73656E6867756F72 && *((_BYTE *)*a2 + 8) == 115)
          goto LABEL_102;
        if (v23 == (_QWORD *)13)
        {
          if (**a2 == 0x72616C7563657073 && *(_QWORD *)((char *)*a2 + 5) == 0x726F6C6F4372616CLL)
            goto LABEL_102;
          v23 = a2[1];
        }
        if (v23 != (_QWORD *)9)
          goto LABEL_100;
        if (**a2 == 0x6F6973756C63636FLL && *((_BYTE *)*a2 + 8) == 110)
          goto LABEL_102;
        if (a2[1] != (_QWORD *)9)
        {
LABEL_100:
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "clearcoatRoughness")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "opacity"))
          {
            goto LABEL_106;
          }
LABEL_102:
          v34 = (unsigned int *)result[4];
          *a1 = v34;
          if ((v34 & 7) == 0)
            return result;
          v12 = (unsigned int *)((unint64_t)v34 & 0xFFFFFFFFFFFFFFF8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 2, v12));
          goto LABEL_109;
        }
        v30 = *a2;
LABEL_96:
        v31 = *v30;
        v32 = *((unsigned __int8 *)v30 + 8);
        if (v31 == 0x616F637261656C63 && v32 == 116)
          goto LABEL_102;
        goto LABEL_100;
      }
      v27 = (_QWORD *)**a2;
    }
    else
    {
      if (v5 != 8)
      {
        if (v5 != 9)
        {
          if (v5 == 13
            && *a2 == (_QWORD *)0x72616C7563657073
            && *(_QWORD **)((char *)a2 + 5) == (_QWORD *)0x726F6C6F4372616CLL)
          {
            goto LABEL_102;
          }
          goto LABEL_100;
        }
        if (*a2 == (_QWORD *)0x73656E6867756F72 && *((_BYTE *)a2 + 8) == 115)
          goto LABEL_102;
        if (*a2 == (_QWORD *)0x6F6973756C63636FLL && *((_BYTE *)a2 + 8) == 110)
          goto LABEL_102;
        v30 = (uint64_t *)a2;
        goto LABEL_96;
      }
      v27 = *a2;
    }
    if (v27 == (_QWORD *)0x63696C6C6174656DLL)
      goto LABEL_102;
    goto LABEL_100;
  }
LABEL_106:
  v35 = (unsigned int *)result[6];
  *a1 = v35;
  if ((v35 & 7) == 0)
    return result;
  v12 = (unsigned int *)((unint64_t)v35 & 0xFFFFFFFFFFFFFFF8);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 2, v12));
LABEL_109:
  if ((v13 & 1) == 0)
    *a1 = v12;
  return result;
}

_DWORD *`anonymous namespace'::findSourceInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int ConnectedSource;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::TfToken *v31;
  unint64_t EmptyString;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  char IsValid;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  _DWORD *result;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  _BYTE v88[4];
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _QWORD v97[4];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  pxrInternal__aapl__pxrReserved__::TfToken *v105;
  int v106;
  uint64_t v107;

  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a2)
    || (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) == 0
    || !MEMORY[0x2348B37CC](a2))
  {
    goto LABEL_155;
  }
  LODWORD(v104) = 1;
  v105 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v107 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v4 = MEMORY[0x24BEE9DC0];
  v97[3] = 0;
  v97[0] = MEMORY[0x24BEE9DC0] + 16;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
  v96 = 0;
  v95 = 0;
  v78 = (_DWORD *)(a2 + 16);
  v79 = (_DWORD *)(a2 + 20);
  v76 = (_DWORD *)(a1 + 16);
  v77 = (_DWORD *)(a1 + 20);
  v74 = v4 + 16;
  v75 = MEMORY[0x24BEE9D38] + 16;
  while (1)
  {
    ConnectedSource = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
    v6 = ConnectedSource;
    if (!ConnectedSource)
      break;
    switch(v95)
    {
      case 1:
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v97, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v96);
        *(_DWORD *)a2 = v104;
        v7 = (uint64_t)v105;
        v105 = 0;
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v7;
        if (v8)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v78, &v106);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v79);
        if (&v104 == (uint64_t *)a2)
        {
          v12 = v107;
        }
        else
        {
          v9 = *(_QWORD *)(a2 + 24);
          if ((v9 & 7) != 0)
          {
            v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
            do
              v11 = __ldxr(v10);
            while (__stlxr(v11 - 2, v10));
          }
          v12 = 0;
          *(_QWORD *)(a2 + 24) = v107;
          v107 = 0;
        }
        if ((v12 & 7) != 0)
        {
          v23 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
          do
            v24 = __ldxr(v23);
          while (__stlxr(v24 - 2, v23));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
        if (v105)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v105);
        if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a2) & 1) == 0)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v76, v78);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v77, v79);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = 0;
          goto LABEL_150;
        }
        break;
      case 2:
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v97, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v96);
        v80 = v90;
        v81 = v91;
        if (v91)
        {
          v13 = (unint64_t *)(v91 + 48);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v82, &v92);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v83, &v93);
        v84 = v94;
        if ((v94 & 7) != 0)
        {
          v15 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 2, v15));
          if ((v16 & 1) == 0)
            v84 &= 0xFFFFFFFFFFFFFFF8;
        }
        v85 = 3;
        v86 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        v89 = 0;
        if ((pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput() & 1) != 0)
        {
          if (MEMORY[0x2348B3904](&v80))
          {
            LODWORD(v100) = 1;
            v101 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            v103 = 0;
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v107 = 0;
            v104 = v74;
            if ((v103 & 7) != 0)
            {
              v17 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFFFF8);
              do
                v18 = __ldxr(v17);
              while (__stlxr(v18 - 2, v17));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
            if (v101)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v101);
            v99 = 0;
            LODWORD(v98) = 0;
            while (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
            {
              switch((_DWORD)v98)
              {
                case 2:
                  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v104, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99);
                  v80 = v100;
                  v19 = v101;
                  v101 = 0;
                  v20 = v81;
                  v81 = v19;
                  if (v20)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v82, &v102);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v83);
                  if ((v84 & 7) != 0)
                  {
                    v21 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v22 = __ldxr(v21);
                    while (__stlxr(v22 - 2, v21));
                  }
                  v84 = v103;
                  v103 = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
                  if (v101)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v101);
                  break;
                case 0:
                  goto LABEL_119;
                case 1:
                  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v104, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99);
                  v85 = v100;
                  v52 = v101;
                  v101 = 0;
                  v53 = v86;
                  v86 = v52;
                  if (v53)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v87, &v102);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v88);
                  if ((v89 & 7) != 0)
                  {
                    v54 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v55 = __ldxr(v54);
                    while (__stlxr(v55 - 2, v54));
                  }
                  v89 = v103;
                  v103 = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
                  if (v101)
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v101);
LABEL_119:
                  if ((v99 & 7) != 0)
                  {
                    v56 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v57 = __ldxr(v56);
                    while (__stlxr(v57 - 2, v56));
                  }
                  MEMORY[0x2348B2350](&v104);
                  goto LABEL_123;
              }
            }
            if ((v99 & 7) != 0)
            {
              v25 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
              do
                v26 = __ldxr(v25);
              while (__stlxr(v26 - 2, v25));
            }
            MEMORY[0x2348B2350](&v104);
          }
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v104, &v81, &v82);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v100 = v75;
          if ((v107 & 7) != 0)
          {
            v27 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
            do
              v28 = __ldxr(v27);
            while (__stlxr(v28 - 2, v27));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
          if (v105)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v105);
          v99 = 0;
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v100);
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v104))
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
          if ((v107 & 7) != 0)
          {
            v29 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
            do
              v30 = __ldxr(v29);
            while (__stlxr(v30 - 2, v29));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
          v31 = v105;
          if (v105)
            v31 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v105);
          if ((v99 & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (v99 & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v31);
          v33 = *(unsigned __int8 *)(EmptyString + 23);
          v34 = (char)v33;
          if ((v33 & 0x80u) != 0)
            v33 = *(_QWORD *)(EmptyString + 8);
          if (v33 < 0xB)
            goto LABEL_78;
          if (v34 < 0)
            EmptyString = *(_QWORD *)EmptyString;
          EmptyString = strncmp((const char *)EmptyString, "ND_constant", 0xBuLL);
          if ((_DWORD)EmptyString)
          {
LABEL_78:
            if ((v99 & 0xFFFFFFFFFFFFFFF8) != 0)
              v35 = (v99 & 0xFFFFFFFFFFFFFFF8) + 16;
            else
              v35 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
            v36 = *(unsigned __int8 *)(v35 + 23);
            v37 = (char)v36;
            if ((v36 & 0x80u) != 0)
              v36 = *(_QWORD *)(v35 + 8);
            if (v36 >= 6)
            {
              if (v37 < 0)
                v35 = *(_QWORD *)v35;
              if (!strncmp((const char *)v35, "ND_dot", 6uLL))
              {
                MEMORY[0x2348B274C](&v98, "in");
                pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v100, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v98);
                v85 = v104;
                v38 = (uint64_t)v105;
                v105 = 0;
                v39 = v86;
                v86 = v38;
                if (v39)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v87, &v106);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v88);
                if ((v89 & 7) != 0)
                {
                  v40 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v41 = __ldxr(v40);
                  while (__stlxr(v41 - 2, v40));
                }
                v89 = v107;
                v107 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
                if (v105)
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v105);
                if ((v98 & 7) != 0)
                {
                  v42 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v43 = __ldxr(v42);
                  while (__stlxr(v43 - 2, v42));
                }
              }
            }
          }
          else
          {
            MEMORY[0x2348B274C](&v98, "value");
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v100, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v98);
            v85 = v104;
            v44 = (uint64_t)v105;
            v105 = 0;
            v45 = v86;
            v86 = v44;
            if (v45)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v45);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v87, &v106);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v88);
            if ((v89 & 7) != 0)
            {
              v46 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
              do
                v47 = __ldxr(v46);
              while (__stlxr(v47 - 2, v46));
            }
            v89 = v107;
            v107 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
            if (v105)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v105);
            if ((v98 & 7) != 0)
            {
              v48 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
              do
                v49 = __ldxr(v48);
              while (__stlxr(v49 - 2, v48));
            }
          }
          if ((v99 & 7) != 0)
          {
            v50 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
            do
              v51 = __ldxr(v50);
            while (__stlxr(v51 - 2, v50));
          }
          MEMORY[0x2348B1EC4](&v100);
        }
LABEL_123:
        *(_DWORD *)a2 = v85;
        v58 = v86;
        v86 = 0;
        v59 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v58;
        if (v59)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v59);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v78, &v87);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v79);
        if (&v85 == (int *)a2)
        {
          v63 = v89;
        }
        else
        {
          v60 = *(_QWORD *)(a2 + 24);
          if ((v60 & 7) != 0)
          {
            v61 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
            do
              v62 = __ldxr(v61);
            while (__stlxr(v62 - 2, v61));
          }
          v63 = 0;
          *(_QWORD *)(a2 + 24) = v89;
          v89 = 0;
        }
        if ((v63 & 7) != 0)
        {
          v64 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
          do
            v65 = __ldxr(v64);
          while (__stlxr(v65 - 2, v64));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v87);
        if (v86)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v86);
        if ((v84 & 7) != 0)
        {
          v66 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
          do
            v67 = __ldxr(v66);
          while (__stlxr(v67 - 2, v66));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v82);
        if (v81)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v81);
        IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a2);
        if ((IsValid & 1) == 0)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v76, v78);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v77, v79);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = 0;
        }
        if ((v94 & 7) != 0)
        {
          v69 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
          do
            v70 = __ldxr(v69);
          while (__stlxr(v70 - 2, v69));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v92);
        if (v91)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v91);
        if ((IsValid & 1) == 0)
          goto LABEL_151;
        break;
      case 0:
        *(_DWORD *)a1 = 3;
        *(_QWORD *)(a1 + 8) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *(_QWORD *)(a1 + 24) = 0;
LABEL_150:
        v6 = 1;
        goto LABEL_151;
    }
  }
LABEL_151:
  if ((v96 & 7) != 0)
  {
    v71 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
    do
      v72 = __ldxr(v71);
    while (__stlxr(v72 - 2, v71));
  }
  result = (_DWORD *)MEMORY[0x2348B2350](v97);
  if ((v6 & 1) == 0)
  {
LABEL_155:
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
    result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

void sub_2301F5760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;

  v36 = *(_QWORD *)(v34 - 168);
  if ((v36 & 7) != 0)
  {
    v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  v39 = *(_QWORD *)(v34 - 160);
  if ((v39 & 7) != 0)
  {
    v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  MEMORY[0x2348B1EC4](v34 - 152);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a24);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a20);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&a28);
  if ((a33 & 7) != 0)
  {
    v42 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  MEMORY[0x2348B2350](&a34);
  _Unwind_Resume(a1);
}

uint64_t makeImportSettingsForUsdPreviewSurface(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2, _QWORD *a3, _QWORD *a4, char a5)
{
  std::string *v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::TfToken *ColorSpace;
  const std::string *EmptyString;
  uint64_t ValueAtPath;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::TfToken *IsValid;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  const std::string *v27;
  std::string *v28;
  const std::string *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t result;
  void *__p;
  uint64_t v36;
  _BYTE v37[8];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v10 = (std::string *)(std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "") + 3);
  std::string::basic_string[abi:ne180100]<0>(v10, "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 48), "rgba");
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) = 0;
  MEMORY[0x2348B274C](&__p, "file");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
  if ((__p & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v41)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    ColorSpace = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v41);
    if ((v40 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (const std::string *)((v40 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ColorSpace);
    std::string::operator=((std::string *)a1, EmptyString);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData((pxrInternal__aapl__pxrReserved__::UsdObject *)v41);
    std::string::basic_string[abi:ne180100]<0>(&__p, "downsampleFactor");
    ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
    v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath;
    if ((v37[7] & 0x80000000) != 0)
    {
      operator delete(__p);
      if (!v16)
        goto LABEL_14;
    }
    else if (!ValueAtPath)
    {
LABEL_14:
      std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v39, 0);
      if ((v40 & 7) != 0)
      {
        v17 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      goto LABEL_17;
    }
    *(_DWORD *)(a1 + 72) = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(v16);
    goto LABEL_14;
  }
LABEL_17:
  MEMORY[0x2348B4AD4](v10, "none");
  MEMORY[0x2348B274C](&v40, "inputs:sourceColorSpace");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40);
  if ((v40 & 7) != 0)
  {
    v19 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  IsValid = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p);
  if ((_DWORD)IsValid)
  {
    IsValid = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput();
    if ((_DWORD)IsValid)
    {
      if (*(char *)(a1 + 23) < 0)
      {
        if (*(_QWORD *)(a1 + 8))
          goto LABEL_33;
      }
      else if (*(_BYTE *)(a1 + 23))
      {
        goto LABEL_33;
      }
      v40 = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      IsValid = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v39, "sRGB");
      v22 = v40 & 0xFFFFFFFFFFFFFFF8;
      v23 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
      if ((v39 & 7) != 0)
      {
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((unsigned int *)v22 == v23)
        IsValid = (pxrInternal__aapl__pxrReserved__::TfToken *)std::string::operator=(v10, 4);
      if ((v40 & 7) != 0)
      {
        v25 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
    }
  }
LABEL_33:
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    v27 = (const std::string *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v27 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(IsValid);
  v28 = std::string::operator=((std::string *)(a1 + 48), v27);
  *(_BYTE *)(a1 + 76) = a5;
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v29 = (const std::string *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v29 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v28);
  std::string::operator=(v10, v29);
  if ((v38 & 7) != 0)
  {
    v30 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v37);
  if (v36)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v36);
  if ((v44 & 7) != 0)
  {
    v32 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
  result = v42;
  if (v42)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v42);
  return result;
}

void sub_2301F5C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  void **v18;
  unsigned int *v20;
  unsigned int v21;

  if ((a17 & 7) != 0)
  {
    v20 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&__p);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a18);
  _Unwind_Resume(a1);
}

void componentInputs(_DWORD *a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v4;
  uint64_t v5;
  uint64_t *Name;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__ *v9;
  uint64_t UsdPrimDefaultPredicate;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  pxrInternal__aapl__pxrReserved__ *v15;
  _QWORD *v16;
  unint64_t Data;
  pxrInternal__aapl__pxrReserved__ *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  realityio::tokens::EcsTokens_StaticTokenType *v26;
  _DWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46[8];
  pxrInternal__aapl__pxrReserved__ *v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  void **v58;
  void **v59;
  __int128 v60;
  uint64_t v61;
  void **v62;
  int v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  _QWORD *v68[3];

  v68[0] = 0;
  v68[1] = 0;
  v67 = (uint64_t *)v68;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes(a2);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v58;
  v5 = (uint64_t)v59;
  if (v58 != v59)
  {
    do
    {
      Name = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v4);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v4, &v50);
      std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)&v54, *Name, &v50);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v67, (uint64_t *)&v54, (uint64_t)&v54);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
      if ((v54 & 7) != 0)
      {
        v7 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
      v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v4 + 32);
    }
    while (v4 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v5);
  }
  v54 = (unint64_t)&v58;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v9);
  v12 = *(_QWORD *)UsdPrimDefaultPredicate;
  v11 = *(_QWORD *)(UsdPrimDefaultPredicate + 8);
  v13 = *(_QWORD *)(UsdPrimDefaultPredicate + 16);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v12 & 0x2000) != 0 || (v11 & 0x2000) == 0))
  {
    v12 |= 0x2000uLL;
    v11 &= ~0x2000uLL;
  }
  v54 = v12;
  v55 = v11;
  *(_QWORD *)&v56 = v13;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)a2, (uint64_t *)&v54, (uint64_t)&v58);
  v54 = (unint64_t)v58;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v55, &v59);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v55 + 1, (_DWORD *)&v59 + 1);
  v56 = v60;
  v57 = v61;
  v50 = v62;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v51, &v63);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v51 + 1, &v64);
  v52 = v65;
  v53 = v66;
  while ((void **)v54 != v50
       || v55 != v51
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v56, (uint64_t)&v52))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v54, (uint64_t)v46);
    v15 = v47;
    if (!v47 || (*((_BYTE *)v47 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v47, v14);
    v16 = (_QWORD *)*((_QWORD *)v15 + 3);
    Data = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    if ((*v16 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(Data + 80) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_26;
    v18 = v47;
    if (!v47 || (*((_BYTE *)v47 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v47, v14);
    v19 = (_QWORD *)*((_QWORD *)v18 + 3);
    v20 = atomic_load(&realityio::tokens::RealityKitTokens);
    if (!v20)
      v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData();
    if ((*v19 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(v20 + 16) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_26:
      v21 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v46);
      componentInputs(&v43, v46, a3);
      std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)&v44, *v21, &v43);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v67, &v44, (uint64_t)&v44);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
      if ((v44 & 7) != 0)
      {
        v22 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
    }
    if ((v49 & 7) != 0)
    {
      v24 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    if (v47)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v47);
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v54);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v58);
  v26 = (realityio::tokens::EcsTokens_StaticTokenType *)atomic_load(&realityio::tokens::EcsTokens);
  if (!v26)
    v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EcsTokens);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, (realityio::tokens::EcsTokens_StaticTokenType *)((char *)v26 + 120));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v27 = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v27, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v58 + 1, a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::map[abi:ne180100]((uint64_t *)&v59, (uint64_t)&v67);
  v28 = a3[1];
  v29 = a3[2];
  if (v28 >= v29)
  {
    v31 = (uint64_t)(v28 - *a3) >> 5;
    if ((unint64_t)(v31 + 1) >> 59)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v32 = v29 - *a3;
    v33 = v32 >> 4;
    if (v32 >> 4 <= (unint64_t)(v31 + 1))
      v33 = v31 + 1;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFE0)
      v34 = 0x7FFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    if (v34)
    {
      if (v34 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v35 = (char *)operator new(32 * v34);
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[32 * v34];
    v37 = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::pair[abi:ne180100]((uint64_t)&v35[32 * v31], (uint64_t)&v58);
    v30 = v37 + 32;
    v39 = (char *)*a3;
    v38 = (char *)a3[1];
    if (v38 == (char *)*a3)
    {
      *a3 = v37;
      a3[1] = v30;
      a3[2] = (uint64_t)v36;
    }
    else
    {
      do
      {
        v38 -= 32;
        v37 = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::pair[abi:ne180100](v37 - 32, (uint64_t)v38);
      }
      while (v38 != v39);
      v38 = (char *)*a3;
      v40 = a3[1];
      *a3 = v37;
      a3[1] = v30;
      a3[2] = (uint64_t)v36;
      while ((char *)v40 != v38)
      {
        v40 -= 32;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy[abi:ne180100](v40);
      }
    }
    if (v38)
      operator delete(v38);
  }
  else
  {
    v30 = std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::pair[abi:ne180100](v28, (uint64_t)&v58)+ 32;
  }
  a3[1] = v30;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v59, (_QWORD *)v60);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v67, v68[0]);
}

void sub_2301F6354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, pxrInternal__aapl__pxrReserved__::SdfPath *a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v35 - 192));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a18);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(v35 - 112, *(_QWORD **)(v35 - 104));
  _Unwind_Resume(a1);
}

uint64_t std::pair<char const*,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  return a1;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,char const*>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::operator[](uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unsigned int v6;
  int v7;
  char v8;

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v6, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, a2 + 1);
  v8 = 0;
  v4 = pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::insert(a1, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  return v4 + 8;
}

void sub_2301F6538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,BOOL>::~pair((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::stageMetaDataPath(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  unsigned int **Data;
  unint64_t v5;
  char *v6;
  void *__p;
  char v8;
  _BYTE v9[8];
  void *v10[2];
  char v11;
  _BYTE v12[8];

  if (*(char *)(a2 + 23) < 0)
  {
    v3 = *(_BYTE **)a2;
    v2 = *(_QWORD *)(a2 + 8);
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned __int8 *)(a2 + 23);
    v3 = (_BYTE *)a2;
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_8;
  }
  do
  {
    if (*v3 == 58)
      *v3 = 47;
    ++v3;
    --v2;
  }
  while (v2);
LABEL_8:
  Data = (unsigned int **)atomic_load(&realityio::tokens::StageTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::StageTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::StageTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::StageTokens);
  v5 = (unint64_t)*Data & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    v6 = (char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0)
      v6 = *(char **)v6;
  }
  else
  {
    v6 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(v10, v6);
  MEMORY[0x2348B26F8](v12, v10);
  std::operator+<char>();
  MEMORY[0x2348B26F8](v9, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper((pxrInternal__aapl__pxrReserved__::SdfPath *)v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v9);
  if (v8 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v12);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_2301F6690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a15);
  if (a14 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 24));
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::findFirstUVAttributeNameForMeshNode(pxrInternal__aapl__pxrReserved__::UsdPrim const&)::$_0::operator()(_QWORD *a1)
{
  unint64_t *v2;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  std::string::size_type size;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE v18[24];
  std::string __p;
  _BYTE v20[24];
  _QWORD v21[4];
  void **v22;
  char v23;

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v21[3] = 0;
  v21[0] = MEMORY[0x24BEE9DC8] + 16;
  v2 = (unint64_t *)MEMORY[0x24BEE8128];
  Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)v21, Data, 0);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(v2);
  if (!v4)
    v4 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  v5 = *((_QWORD *)v4 + 27);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v22 = (void **)&v15;
  v23 = 0;
  v8 = operator new(8uLL);
  v15 = v8;
  v16 = v8;
  *v8 = v5;
  v17 = v8 + 1;
  if ((v5 & 7) != 0)
  {
    v9 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v16 = v8 + 1;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
  MEMORY[0x2348B1EC4](v18);
  v22 = (void **)&v15;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v22);
  if ((v5 & 7) != 0)
  {
    v11 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
    std::operator+<char>();
  else
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  MEMORY[0x2348B20B0](v20);
  return MEMORY[0x2348B24C4](v21);
}

void sub_2301F68B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  MEMORY[0x2348B20B0](&a21);
  MEMORY[0x2348B24C4](v21 - 80);
  _Unwind_Resume(a1);
}

void sub_2301F6D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  v26 = &a18;
  while (1)
  {
    v28 = *--v26;
    v27 = v28;
    if ((v28 & 7) != 0)
    {
      v29 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    if (v26 == (uint64_t *)&a11)
    {
      if ((*v24 & 7) != 0)
      {
        v31 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      if ((*v23 & 7) != 0)
      {
        v33 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      if ((*v22 & 7) != 0)
      {
        v35 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((*v21 & 7) != 0)
      {
        v37 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      if ((*v20 & 7) != 0)
      {
        v39 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v19 & 7) != 0)
      {
        v41 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v18 & 7) != 0)
      {
        v43 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      MEMORY[0x2348B4E1C](v18, 0x60C400003D80CLL);
      _Unwind_Resume(a1);
    }
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SamplingTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SamplingTokens_StaticTokenType>>::_TryToCreateData()
{
  void **v0;
  unsigned int *v2;
  unsigned int v3;
  void **v5;

  v0 = (void **)operator new();
  realityio::tokens::SamplingTokens_StaticTokenType::SamplingTokens_StaticTokenType((realityio::tokens::SamplingTokens_StaticTokenType *)v0);
  while (!__ldaxr(&realityio::tokens::SamplingTokens))
  {
    if (!__stlxr((unint64_t)v0, &realityio::tokens::SamplingTokens))
      return (unint64_t)v0;
  }
  __clrex();
  v5 = v0 + 1;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (((unint64_t)*v0 & 7) != 0)
  {
    v2 = (unsigned int *)((unint64_t)*v0 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  MEMORY[0x2348B4E1C](v0, 0x60C405399E965);
  return atomic_load(&realityio::tokens::SamplingTokens);
}

void sub_2301F6FA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C405399E965);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath,0>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int *v5;
  unsigned int v6;

  *(_QWORD *)a1 = a2;
  if ((a2 & 7) != 0)
  {
    v5 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a3 + 1);
  return a1;
}

uint64_t `anonymous namespace'::getShaderType(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x2348B274C]();
  result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v10 = MEMORY[0x24BEE9D38] + 16;
    if (v11
      && (*(_BYTE *)(v11 + 57) & 8) == 0
      && (*(unsigned int (**)(uint64_t *))(MEMORY[0x24BEE9D38] + 48))(&v10))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v10);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v6))
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      if ((v9 & 7) != 0)
      {
        v4 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v5 = __ldxr(v4);
        while (__stlxr(v5 - 2, v4));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
      if (v7)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
    }
    return MEMORY[0x2348B1EC4](&v10);
  }
  return result;
}

void sub_2301F7128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  unsigned int *v8;
  unsigned int v9;
  va_list va;

  va_start(va, a6);
  MEMORY[0x2348B1EC4](va);
  if ((*v6 & 7) != 0)
  {
    v8 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  _Unwind_Resume(a1);
}

uint64_t getSemanticPriority(_QWORD *a1)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v6;

                                                  + 48) & 0xFFFFFFFFFFFFFFF8))
    return 0;
                                                  + 32) & 0xFFFFFFFFFFFFFFF8))
    return 1;
                                                  + 16) & 0xFFFFFFFFFFFFFFF8))
    return 2;
                                                  + 24) & 0xFFFFFFFFFFFFFFF8))
    return 3;
                                                  + 8) & 0xFFFFFFFFFFFFFFF8))
    return 4;
  MEMORY[0x2348B274C](&v6, "");
  v2 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v3 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 7) != 0)
  {
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((unsigned int *)v2 == v3)
    return 5;
                                                  + 40) & 0xFFFFFFFFFFFFFFF8))
    return 6;
  return 0;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = (_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a1 + 16;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *(_QWORD *)(a2 + 8) = v5;
    *v5 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
  }
  return a1;
}

uint64_t std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::deque<BOOL>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 4096;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<TgBase::TargetInfoT>::__push_back_slow_path<TgBase::TargetInfoT>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v3;
  v19 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (uint64_t)&v7[40 * v2];
  std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v8, a2);
  v10 = *a1;
  v9 = a1[1];
  if (v9 == *a1)
  {
    v12 = vdupq_n_s64(v9);
    v11 = v8;
  }
  else
  {
    v11 = v8;
    do
    {
      v11 -= 40;
      v9 -= 40;
      std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(v11, v9);
    }
    while (v9 != v10);
    v12 = *(int64x2_t *)a1;
  }
  v13 = v8 + 40;
  *a1 = v11;
  a1[1] = v13;
  v17 = v12;
  v14 = a1[2];
  a1[2] = (uint64_t)&v7[40 * v6];
  v18 = v14;
  v16 = v12.i64[0];
  std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer((uint64_t)&v16);
  return v13;
}

_DWORD *std::allocator<TgBase::TargetInfoT>::construct[abi:ne180100]<TgBase::TargetInfoT,TgBase::TargetInfoT>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 32), (_DWORD *)(a2 + 32));
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 36), (_DWORD *)(a2 + 36));
}

uint64_t std::allocator<TgBase::TargetInfoT>::destroy[abi:ne180100](uint64_t a1)
{
  void **v3;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  v3 = (void **)(a1 + 8);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::__split_buffer<TgBase::TargetInfoT>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::allocator<TgBase::TargetInfoT>::destroy[abi:ne180100](i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<TgBase::TargetInfoT>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<TgBase::TargetInfoT>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::RealityKitTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::RealityKitTokens_StaticTokenType>>::_TryToCreateData()
{
  realityio::tokens::RealityKitTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::RealityKitTokens_StaticTokenType *)operator new();
  realityio::tokens::RealityKitTokens_StaticTokenType::RealityKitTokens_StaticTokenType(v0);
  while (!__ldaxr(&realityio::tokens::RealityKitTokens))
  {
    if (!__stlxr((unint64_t)v0, &realityio::tokens::RealityKitTokens))
      return (unint64_t)v0;
  }
  __clrex();
  realityio::tokens::RealityKitTokens_StaticTokenType::~RealityKitTokens_StaticTokenType(v0);
  MEMORY[0x2348B4E1C]();
  return atomic_load(&realityio::tokens::RealityKitTokens);
}

void sub_2301F77A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C405FAED287);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_Hash(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = (uint64_t)(*a1 + 1);
  v2 = (_QWORD *)**a1;
  if (v2 == (_QWORD *)v1)
  {
    v12 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = (_QWORD *)v2[1];
      v6 = v2;
      if (v5)
      {
        do
        {
          v7 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v6[2];
          v8 = *v7 == (_QWORD)v6;
          v6 = v7;
        }
        while (!v8);
      }
      v9 = *((unsigned int *)v2 + 8);
      if (v3)
        v9 += (v4 + v9 + (v4 + v9) * (v4 + v9)) >> 1;
      else
        v3 = 1;
      v10 = *((unsigned int *)v2 + 9);
      v11 = v9 + v10 + (v9 + v10) * (v9 + v10);
      v4 = (v2[5] & 0xFFFFFFFFFFFFFFF8)
         + (((v2[5] & 0xFFFFFFFFFFFFFFF8)
           + v10
           + (v11 >> 1)
           + ((v2[5] & 0xFFFFFFFFFFFFFFF8) + v10 + (v11 >> 1)) * ((v2[5] & 0xFFFFFFFFFFFFFFF8) + v10 + (v11 >> 1))) >> 1);
      v2 = v7;
    }
    while (v7 != (_QWORD *)v1);
    v12 = 0x9E3779B97F4A7C55 * v4;
  }
  return bswap64(v12);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_Equal(_QWORD **a1, _QWORD ***a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void>::Equal(*a1, **a2, (uint64_t)(*a2)[2]);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_EqualPtr(_QWORD **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void>::Equal(*a1, *(_QWORD **)a2, *(_QWORD *)(a2 + 16));
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v1 = atomic_load((unsigned int *)(*result + 24));
  if (v1 != 1)
  {
    v2 = result;
    v3 = operator new();
    std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100]((uint64_t *)v3, *v2);
    v4 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *v2;
    *v2 = v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(&v6);
  }
  return result;
}

void sub_2301F796C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__13mapIN32pxrInternal__aapl__pxrReserved__7SdfPathENS1_7TfTokenENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedAsVtValue@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy(a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(v2, *(_QWORD **)(v2 + 8));
      MEMORY[0x2348B4E1C](v2, 0x1020C401C4E69EBLL);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void>::Equal(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;

  if (a1[2] != a3)
    return 0;
  v5 = (_QWORD *)*a1;
  v3 = a1 + 1;
  v4 = v5;
  while (v4 != v3)
  {
    if (v4[4] != a2[4] || (v4[5] & 0xFFFFFFFFFFFFFFF8) != (a2[5] & 0xFFFFFFFFFFFFFFF8))
      return 0;
    v6 = (_QWORD *)v4[1];
    v7 = v4;
    if (v6)
    {
      do
      {
        v4 = v6;
        v6 = (_QWORD *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v7[2];
        v8 = *v4 == (_QWORD)v7;
        v7 = v4;
      }
      while (!v8);
    }
    v9 = (_QWORD *)a2[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)a2[2];
        v8 = *v10 == (_QWORD)a2;
        a2 = v10;
      }
      while (!v8);
    }
    a2 = v10;
  }
  return 1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  result = std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100]((uint64_t *)v4, a2);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)(v4 + 24));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_2301F7BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelBinding>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(void);

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v4 - 1);
        if (v6)
        {
          v8 = v4 - 16;
          v7 = (unint64_t *)*((_QWORD *)v4 - 2);
          if (v7)
          {
            do
            {
              v16 = __ldxr(v7);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v7));
            if (!v17)
            {
              __dmb(9u);
              v18 = *(void (**)(void))(*(_QWORD *)v8 + 8);
              if (v18)
                v18();
            }
          }
          else
          {
            v9 = (unint64_t *)(v6 - 16);
            do
            {
              v10 = __ldxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              __dmb(9u);
              v12 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)*((_QWORD *)v4 - 1);
              v13 = *((_QWORD *)v4 - 5);
              if (v13)
              {
                v14 = 400 * v13;
                do
                {
                  pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery(v12);
                  v12 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)(v15 + 400);
                  v14 -= 400;
                }
                while (v14);
                v12 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *)*((_QWORD *)v4 - 1);
              }
              operator delete((char *)v12 - 16);
            }
          }
          *(_QWORD *)v8 = 0;
          *((_QWORD *)v4 - 1) = 0;
        }
        v4 -= 64;
        MEMORY[0x2348B1F9C](v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_multi<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9[2];
  char v10;

  v6 = (uint64_t *)(a1 + 8);
  v9[0] = (uint64_t *)operator new(0x30uLL);
  v9[1] = v6;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9[0] + 7, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9[0] + 8, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9[0] + 9, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v9[0] + 10, a3 + 1);
  v10 = 1;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t *)v7;
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9[0] + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 28)))break;
        v7 = *v6;
        v8 = (uint64_t **)v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = v6[1];
    }
    while (v7);
    v8 = (uint64_t **)(v6 + 1);
  }
  else
  {
    v8 = (uint64_t **)v6;
  }
LABEL_8:
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v6, v8, v9[0]);
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
}

void sub_2301F7E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__equal_range_multi<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 28)) & 1) != 0)
  {
    v2 = v3;
LABEL_6:
    v3 = (_QWORD *)*v3;
    if (!v3)
      return v2;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 28), a2))
  {
    ++v3;
    goto LABEL_6;
  }
  v7 = (_QWORD *)*v3;
  v5 = v3;
  if (*v3)
  {
    v5 = v3;
    do
    {
      v8 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 28), a2);
      v9 = v7 + 1;
      if (!v8)
      {
        v9 = v7;
        v5 = v7;
      }
      v7 = (_QWORD *)*v9;
    }
    while (*v9);
  }
  v10 = (_QWORD *)v3[1];
  if (v10)
  {
    do
    {
      v11 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 28));
      v12 = v10 + 1;
      if (v11)
        v12 = v10;
      v10 = (_QWORD *)*v12;
    }
    while (*v12);
  }
  return v5;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken&&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v5 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v8 = *a3;
    v6 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    v6[4] = *v8;
    *v8 = 0;
    v6[5] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v12, v7, v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v6;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 80);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_Equal(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return realityio::TextureAssetAction::ImportOperationSettings::operator==(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_EqualPtr(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return realityio::TextureAssetAction::ImportOperationSettings::operator==(*a1, a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_MakeMutable(uint64_t *result)
{
  unsigned int v1;
  __int128 **v2;
  std::string *v3;
  unsigned int *v4;
  unsigned int v5;
  __int128 *v6;

  v1 = atomic_load((unsigned int *)(*result + 80));
  if (v1 != 1)
  {
    v2 = (__int128 **)result;
    v3 = (std::string *)operator new();
    pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>::_Counted(v3, *v2);
    v4 = (unsigned int *)&v3[3].__r_.__value_.__r.__words[1];
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *v2;
    *v2 = (__int128 *)v3;
    return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>::~intrusive_ptr((uint64_t *)&v6);
  }
  return result;
}

void sub_2301F80BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C407185A532);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetElementTypeid()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio18TextureAssetAction23ImportOperationSettingsE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(_QWORD *)a1;
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::TextureAssetAction::ImportOperationSettings,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>>::_GetProxiedAsVtValue@<X0>(__int128 **a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>(void)::ti;
  return pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>::_PlaceCopy((std::string **)a2, v2);
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 80);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      if (*(char *)(v2 + 71) < 0)
        operator delete(*(void **)(v2 + 48));
      if (*(char *)(v2 + 47) < 0)
        operator delete(*(void **)(v2 + 24));
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      MEMORY[0x2348B4E1C](v2, 0x1012C407185A532);
    }
  }
  return a1;
}

BOOL realityio::TextureAssetAction::ImportOperationSettings::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;

  v2 = a2[23];
  v3 = *((_QWORD *)a2 + 1);
  if ((v2 & 0x80u) == 0)
    v4 = a2[23];
  else
    v4 = *((_QWORD *)a2 + 1);
  v5 = a1[23];
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a1 + 1);
  if (v4 != v5)
    return 0;
  if (v6 >= 0)
    v9 = a1;
  else
    v9 = *(unsigned __int8 **)a1;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v9, v3))
      return 0;
  }
  else if ((_DWORD)v2)
  {
    v10 = a2;
    while (*v10 == *v9)
    {
      ++v10;
      ++v9;
      if (!--v2)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v11 = a2[47];
  if ((v11 & 0x80u) == 0)
    v12 = a2[47];
  else
    v12 = *((_QWORD *)a2 + 4);
  v13 = a1[47];
  v14 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a1 + 4);
  if (v12 != v13)
    return 0;
  v15 = (const void **)(a2 + 24);
  if (v14 >= 0)
    v16 = a1 + 24;
  else
    v16 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*v15, v16, *((_QWORD *)a2 + 4)))
      return 0;
  }
  else if (a2[47])
  {
    while (*(unsigned __int8 *)v15 == *v16)
    {
      v15 = (const void **)((char *)v15 + 1);
      ++v16;
      if (!--v11)
        goto LABEL_32;
    }
    return 0;
  }
LABEL_32:
  v17 = a2[71];
  if ((v17 & 0x80u) == 0)
    v18 = a2[71];
  else
    v18 = *((_QWORD *)a2 + 7);
  v19 = a1[71];
  v20 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v19 = *((_QWORD *)a1 + 7);
  if (v18 != v19)
    return 0;
  v21 = (const void **)(a2 + 48);
  if (v20 >= 0)
    v22 = a1 + 48;
  else
    v22 = (unsigned __int8 *)*((_QWORD *)a1 + 6);
  if ((v17 & 0x80) != 0)
  {
    if (memcmp(*v21, v22, *((_QWORD *)a2 + 7)))
      return 0;
  }
  else if (a2[71])
  {
    while (*(unsigned __int8 *)v21 == *v22)
    {
      v21 = (const void **)((char *)v21 + 1);
      ++v22;
      if (!--v17)
        goto LABEL_47;
    }
    return 0;
  }
LABEL_47:
  if (*((_DWORD *)a2 + 18) == *((_DWORD *)a1 + 18))
    return a2[76] == a1[76];
  return 0;
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>::_Counted(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_DWORD *)a2 + 18);
  this[3].__r_.__value_.__s.__data_[4] = *((_BYTE *)a2 + 76);
  LODWORD(this[3].__r_.__value_.__l.__data_) = v8;
  atomic_store(0, (unsigned int *)&this[3].__r_.__value_.__r.__words[1]);
  return this;
}

void sub_2301F84B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::TextureAssetAction::ImportOperationSettings>::_PlaceCopy(std::string **a1, __int128 *a2)
{
  std::string *v4;
  std::string *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (std::string *)operator new();
  result = pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::TextureAssetAction::ImportOperationSettings>::_Counted(v4, a2);
  *a1 = v4;
  v6 = (unsigned int *)&v4[3].__r_.__value_.__r.__words[1];
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_2301F8550(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C407185A532);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(_QWORD *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a1)
  {
    v3 = a1;
    v4 = 1;
    do
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 28)) & 1) == 0)
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 28), a2))return v4;
        ++v3;
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  return 0;
}

void std::deque<BOOL>::push_back(_QWORD *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 9) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<BOOL>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_BYTE *)(*(_QWORD *)(v5 + ((v8 >> 9) & 0x7FFFFFFFFFFFF8)) + (v8 & 0xFFF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<BOOL>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v2 = a1[4];
  v3 = v2 >= 0x1000;
  v4 = v2 - 4096;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v38 = 1;
      else
        v38 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v38);
      v40 = &v39[8 * (v38 >> 2)];
      v42 = &v39[8 * v41];
      v43 = (uint64_t *)a1[1];
      v6 = v40;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v39[8 * (v38 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v49 = 1;
      else
        v49 = (v19 - v22) >> 2;
      v50 = 2 * v49;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v49);
      v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      v53 = (uint64_t *)a1[1];
      v54 = v22;
      v55 = a1[2] - (_QWORD)v53;
      if (v55)
      {
        v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = 8 * (v55 >> 3);
        v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v58 = *v53++;
          *(_QWORD *)v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v82 = 1;
      else
        v82 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v82);
      v40 = &v39[8 * (v82 >> 2)];
      v42 = &v39[8 * v83];
      v84 = (uint64_t *)a1[1];
      v6 = v40;
      v85 = a1[2] - (_QWORD)v84;
      if (v85)
      {
        v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        v86 = 8 * (v85 >> 3);
        v87 = &v39[8 * (v82 >> 2)];
        do
        {
          v88 = *v84++;
          *(_QWORD *)v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v28);
  v31 = v30;
  v32 = operator new(0x1000uLL);
  v33 = &v29[8 * v23];
  v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      v60 = v35 >> 2;
      if (v20 == v22)
        v61 = 1;
      else
        v61 = v60;
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v61);
      v33 = &v62[8 * (v61 >> 2)];
      v34 = &v62[8 * v63];
      if (v29)
        operator delete(v29);
      v29 = v62;
    }
    else
    {
      v36 = v35 >> 3;
      if (v36 >= -1)
        v37 = v36 + 1;
      else
        v37 = v36 + 2;
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(_QWORD *)v33 = v32;
  v64 = v33 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29)
          v70 = 1;
        else
          v70 = (v34 - v29) >> 2;
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v70);
        v73 = v71;
        v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        v75 = v64 - v29;
        v74 = v64 == v29;
        v64 = v33;
        if (!v74)
        {
          v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          v76 = 8 * (v75 >> 3);
          v77 = v33;
          v78 = (uint64_t *)v29;
          do
          {
            v79 = *v78++;
            *(_QWORD *)v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        v34 = &v71[8 * v72];
        if (v29)
          operator delete(v29);
        v29 = v73;
      }
      else
      {
        v66 = (v34 - v64) >> 3;
        if (v66 >= -1)
          v67 = v66 + 1;
        else
          v67 = v66 + 2;
        v68 = v67 >> 1;
        v33 = &v29[8 * (v67 >> 1)];
        v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          v69 = v64;
        }
        v64 = &v69[8 * v68];
      }
    }
    v80 = *(_QWORD *)(i - 8);
    *((_QWORD *)v33 - 1) = v80;
    v33 -= 8;
  }
  v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
    operator delete(v81);
}

void sub_2301F8B90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::insert(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  char v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::_Grow((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = (uint64_t *)(*(_QWORD *)a1
                 + 8
                 * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & v4));
  v6 = *v5;
  if (*v5)
  {
    v7 = *v5;
    while (*(_QWORD *)v7 != *(_QWORD *)a2)
    {
      v7 = *(_QWORD *)(v7 + 16);
      if (!v7)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    if (*(_QWORD *)(a1 + 24) > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3))
    {
      pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::_Grow((void **)a1);
      v5 = (uint64_t *)(*(_QWORD *)a1
                     + 8
                     * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(_QWORD *)(a1 + 32)));
      v6 = *v5;
    }
    v7 = operator new();
    v8 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8 + 1, a2 + 1);
    *(_BYTE *)(v7 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 16) = v6;
    *v5 = v7;
    ++*(_QWORD *)(a1 + 24);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v7);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, &v16);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, &v17);
      v15 = 0;
      v9 = pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::insert(a1, &v13);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
        v11 = v10 | 1;
      else
        v11 = v9;
      *(_QWORD *)(v7 + 32) = v11;
      *(_QWORD *)(v9 + 24) = v7;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  }
  return v7;
}

void sub_2301F8DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathTable<BOOL>::_Grow(void **a1)
{
  unsigned __int8 v2;
  _BOOL4 v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  size_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v17;
  int v18;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v17);
  v2 = atomic_load(MEMORY[0x24BEE7DE0]);
  v3 = (v2 & 1) != 0 && pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin() != 0;
  if (((2 * (_QWORD)a1[4]) | 1uLL) <= 7)
    v4 = 7;
  else
    v4 = (2 * (_QWORD)a1[4]) | 1;
  a1[4] = (void *)v4;
  v5 = v4 + 1;
  if (v4 == -1)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    if (v5 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v9 = 8 * v5;
    v6 = (char *)operator new(8 * v5);
    v8 = &v6[8 * v5];
    bzero(v6, v9);
    v7 = &v6[v9];
  }
  v10 = a1[1];
  if (v10 != *a1)
  {
    v11 = 0;
    v12 = (v10 - (_BYTE *)*a1) >> 3;
    do
    {
      v13 = (unsigned int *)*((_QWORD *)*a1 + v11);
      if (v13)
      {
        do
        {
          v14 = (unsigned int *)*((_QWORD *)v13 + 2);
          v15 = bswap64(0x9E3779B97F4A7C55* (v13[1]+ ((v13[1]+ (unint64_t)*v13+ (v13[1] + (unint64_t)*v13) * (v13[1] + (unint64_t)*v13)) >> 1))) & v4;
          *((_QWORD *)v13 + 2) = *(_QWORD *)&v6[8 * v15];
          *(_QWORD *)&v6[8 * v15] = v13;
          v13 = v14;
        }
        while (v14);
      }
      ++v11;
    }
    while (v11 != v12);
    v10 = *a1;
  }
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  if (v10)
    operator delete(v10);
  if (!v3)
    goto LABEL_21;
  do
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
LABEL_21:
    ;
  }
  while (v18--);
}

void sub_2301F8F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)va);
  _Unwind_Resume(a1);
}

void std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::pop_back(_QWORD *a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)(a1 + 5), *(_QWORD *)(a1[1] + ((v3 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v3 & 0x1FF));
  v5 = *(v2 - 4);
  v4 = *(v2 - 3);
  v6 = ((v4 - v5) << 6) - 1;
  v7 = v4 == v5;
  v8 = *v2;
  if (v7)
    v6 = 0;
  *v2 = v8 - 1;
  if ((unint64_t)(v6 - (v8 + *(v2 - 1)) - 1023) <= 0xFFFFFFFFFFFFFBFFLL)
  {
    operator delete(*(void **)(v4 - 8));
    a1[2] -= 8;
  }
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC360](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC368](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x24BDAC370](c, data, *(_QWORD *)&len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x24BDBB7C8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x24BDBB808](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x24BDBB930](arg);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x24BDBBCC0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x24BDBBCE8](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x24BDBBDB8](theDict, applier, context);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x24BDBBE70](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x24BDBBE88](allocator, domain, code, userInfo);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x24BDBBE90](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x24BDBBE98](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x24BDBC3F8](theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
  MEMORY[0x24BDBC418](theSet, values);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4D0](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x24BDBC518](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x24BDBC578](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x24BDBC598](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x24BDBC610](theString, *(_QWORD *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC660](length, *(_QWORD *)&encoding);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x24BDBC858](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x24BDBC868](allocator, URLString, baseURL);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x24BDBD918](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x24BDBD920](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x24BDBDA78](space, components);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDBB8](name);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x24BDBDC60](space);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x24BDD9048](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x24BDD9088](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x24BDD9090](idst);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x24BDD9158](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9170](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9180](url, options);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

uint64_t REAcousticMeshComponentGetComponentType()
{
  return MEMORY[0x24BE20270]();
}

uint64_t REAmbientLightComponentGetComponentType()
{
  return MEMORY[0x24BE202D0]();
}

uint64_t REAmbientLightComponentSetColorGamut3F()
{
  return MEMORY[0x24BE202E0]();
}

uint64_t REAmbientLightComponentSetIntensity()
{
  return MEMORY[0x24BE202E8]();
}

uint64_t REAnchoringComponentGetComponentType()
{
  return MEMORY[0x24BE20388]();
}

uint64_t REAnchoringComponentSetDescriptorAlignment()
{
  return MEMORY[0x24BE20448]();
}

uint64_t REAnchoringComponentSetDescriptorResourceGroup()
{
  return MEMORY[0x24BE20478]();
}

uint64_t REAnchoringComponentSetDescriptorResourceName()
{
  return MEMORY[0x24BE20480]();
}

uint64_t REAnchoringComponentSetDescriptorType()
{
  return MEMORY[0x24BE20498]();
}

uint64_t REAnchoringComponentSetScaleFactor()
{
  return MEMORY[0x24BE204B8]();
}

uint64_t REAnimationComponentActiveAnimationCount()
{
  return MEMORY[0x24BE204E8]();
}

uint64_t REAnimationComponentGetComponentType()
{
  return MEMORY[0x24BE20518]();
}

uint64_t REAnimationComponentPlay()
{
  return MEMORY[0x24BE20570]();
}

uint64_t REAnimationComponentStopAllAnimations()
{
  return MEMORY[0x24BE205B0]();
}

uint64_t REAnimationHandoffDefaultDescEx()
{
  return MEMORY[0x24BE205C8]();
}

uint64_t REAnimationLibraryAssetGetEntryByKey()
{
  return MEMORY[0x24BE205E0]();
}

uint64_t REAnimationLibraryAssetGetKeyCount()
{
  return MEMORY[0x24BE205F8]();
}

uint64_t REAnimationLibraryAssetGetKeys()
{
  return MEMORY[0x24BE20600]();
}

uint64_t REAnimationLibraryComponentAssignAnimationLibraryAsset()
{
  return MEMORY[0x24BE20608]();
}

uint64_t REAnimationLibraryComponentDefaultLocalSubtreeSceneName()
{
  return MEMORY[0x24BE20640]();
}

uint64_t REAnimationLibraryComponentGetAnimationLibraryAsset()
{
  return MEMORY[0x24BE20648]();
}

uint64_t REAnimationLibraryComponentGetComponentType()
{
  return MEMORY[0x24BE20650]();
}

uint64_t REAnimationLibraryDefinitionAddEntryAsset()
{
  return MEMORY[0x24BE20680]();
}

uint64_t REAnimationLibraryDefinitionAddKeyedEntryIndex()
{
  return MEMORY[0x24BE20688]();
}

uint64_t REAnimationLibraryDefinitionClearEntries()
{
  return MEMORY[0x24BE20690]();
}

uint64_t REAnimationLibraryDefinitionCreate()
{
  return MEMORY[0x24BE20698]();
}

uint64_t REAnimationLibraryDefinitionCreateAnimationLibraryAsset()
{
  return MEMORY[0x24BE206A0]();
}

uint64_t REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset()
{
  return MEMORY[0x24BE206A8]();
}

uint64_t REAnimationLibraryDefinitionGetDefaultEntry()
{
  return MEMORY[0x24BE206B0]();
}

uint64_t REAnimationLibraryDefinitionGetEntryAsset()
{
  return MEMORY[0x24BE206B8]();
}

uint64_t REAnimationLibraryDefinitionGetEntryAssetByKey()
{
  return MEMORY[0x24BE206C0]();
}

uint64_t REAnimationLibraryDefinitionGetEntryCount()
{
  return MEMORY[0x24BE206C8]();
}

uint64_t REAnimationLibraryDefinitionInsertEntryAsset()
{
  return MEMORY[0x24BE206D0]();
}

uint64_t REAnimationLibraryDefinitionSetDefaultEntryKey()
{
  return MEMORY[0x24BE206D8]();
}

uint64_t REAnimationSceneAssetCreateWithTimeline()
{
  return MEMORY[0x24BE206E0]();
}

uint64_t REAnimationSceneAssetCreateWithTimelineAndEntityDefinition()
{
  return MEMORY[0x24BE206E8]();
}

uint64_t REAnimationSceneAssetGetRootTimeline()
{
  return MEMORY[0x24BE206F0]();
}

uint64_t REAnimationSceneEntityDefinitionCreate()
{
  return MEMORY[0x24BE206F8]();
}

uint64_t REAnimationSceneEntityDefinitionSetHasTransformAnimations()
{
  return MEMORY[0x24BE20700]();
}

uint64_t REAnimationSceneEntityDefinitionSetSkeletalPoseDefinitionAsset()
{
  return MEMORY[0x24BE20708]();
}

uint64_t REArrayAccessorGetElementAt()
{
  return MEMORY[0x24BE20720]();
}

uint64_t REArrayAccessorGetSize()
{
  return MEMORY[0x24BE20728]();
}

uint64_t REArrayAccessorReset()
{
  return MEMORY[0x24BE20730]();
}

uint64_t REAssetCopyDependencyArray()
{
  return MEMORY[0x24BE20740]();
}

uint64_t REAssetCopyMetadataString()
{
  return MEMORY[0x24BE20750]();
}

uint64_t REAssetCreateCompiledStreamAndRemap()
{
  return MEMORY[0x24BE20758]();
}

uint64_t REAssetDescriptorCopyData()
{
  return MEMORY[0x24BE20760]();
}

uint64_t REAssetDisableNetworkSyncing()
{
  return MEMORY[0x24BE20768]();
}

uint64_t REAssetDynamicArrayGetAsset()
{
  return MEMORY[0x24BE20770]();
}

uint64_t REAssetDynamicArrayGetSize()
{
  return MEMORY[0x24BE20778]();
}

uint64_t REAssetGetAssetId()
{
  return MEMORY[0x24BE20780]();
}

uint64_t REAssetGetAssetManager()
{
  return MEMORY[0x24BE20788]();
}

uint64_t REAssetGetType()
{
  return MEMORY[0x24BE20798]();
}

uint64_t REAssetHandleArrayAdd()
{
  return MEMORY[0x24BE207A0]();
}

uint64_t REAssetHandleArrayClear()
{
  return MEMORY[0x24BE207A8]();
}

uint64_t REAssetHandleCreateFromAssetRegistrationOptions()
{
  return MEMORY[0x24BE207D8]();
}

uint64_t REAssetHandleLoadNow()
{
  return MEMORY[0x24BE20810]();
}

uint64_t REAssetHandleSet()
{
  return MEMORY[0x24BE20828]();
}

uint64_t REAssetIsAvailableForMajorVersion()
{
  return MEMORY[0x24BE20830]();
}

uint64_t REAssetLoadRequestAddAsset()
{
  return MEMORY[0x24BE20838]();
}

uint64_t REAssetLoadRequestSetCompletionHandler()
{
  return MEMORY[0x24BE20868]();
}

uint64_t REAssetLoadRequestSetLoadAndWaitForResourceSharingClients()
{
  return MEMORY[0x24BE20870]();
}

uint64_t REAssetLoadRequestWaitForCompletion()
{
  return MEMORY[0x24BE20888]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateBox()
{
  return MEMORY[0x24BE208C0]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateCapsule()
{
  return MEMORY[0x24BE208C8]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateCompound()
{
  return MEMORY[0x24BE208D8]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateEmpty()
{
  return MEMORY[0x24BE208F8]();
}

uint64_t REAssetManagerCollisionShapeAssetCreatePlane()
{
  return MEMORY[0x24BE20908]();
}

uint64_t REAssetManagerCollisionShapeAssetCreateSphere()
{
  return MEMORY[0x24BE20910]();
}

uint64_t REAssetManagerCreateAssetHandle()
{
  return MEMORY[0x24BE20920]();
}

uint64_t REAssetManagerCreateAssetRequest()
{
  return MEMORY[0x24BE20930]();
}

uint64_t REAssetManagerCreateTextureAssetFromDataAsync()
{
  return MEMORY[0x24BE20948]();
}

uint64_t REAssetManagerCreateTextureAssetFromDataWithParameters()
{
  return MEMORY[0x24BE20950]();
}

uint64_t REAssetManagerGetEngineQueue()
{
  return MEMORY[0x24BE20960]();
}

uint64_t REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMapNullable()
{
  return MEMORY[0x24BE20978]();
}

uint64_t REAssetManagerMaterialAssetBuilderBuild()
{
  return MEMORY[0x24BE20988]();
}

uint64_t REAssetManagerMaterialAssetBuilderBuildAsync()
{
  return MEMORY[0x24BE20990]();
}

uint64_t REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsAsyncRegistration()
{
  return MEMORY[0x24BE209B8]();
}

uint64_t REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsWithParameters()
{
  return MEMORY[0x24BE209C0]();
}

uint64_t REAssetManagerMeshMemoryAssetCreate3DTextWithOptions()
{
  return MEMORY[0x24BE209E8]();
}

uint64_t REAssetManagerMeshMemoryAssetCreateBox()
{
  return MEMORY[0x24BE209F8]();
}

uint64_t REAssetManagerPhysicsMaterialAssetCreate2()
{
  return MEMORY[0x24BE20A00]();
}

uint64_t REAssetManagerRegisterAssetProviderBuilder()
{
  return MEMORY[0x24BE20A20]();
}

uint64_t REAssetManagerReplaceAssetRefDataWith()
{
  return MEMORY[0x24BE20A30]();
}

uint64_t REAssetManagerSceneAssetCreate()
{
  return MEMORY[0x24BE20A40]();
}

uint64_t REAssetManagerShaderGraphMemoryAssetCreate()
{
  return MEMORY[0x24BE20A50]();
}

uint64_t REAssetManagerTextureMemoryAssetCreateWithCGImage()
{
  return MEMORY[0x24BE20A60]();
}

uint64_t REAssetManagerUpdate()
{
  return MEMORY[0x24BE20AA0]();
}

uint64_t REAssetProviderBuilderCreate()
{
  return MEMORY[0x24BE20AB8]();
}

uint64_t REAssetProviderBuilderSetREAssetRefLoadCallback()
{
  return MEMORY[0x24BE20AC0]();
}

uint64_t REAssetProviderBuilderSetUserData()
{
  return MEMORY[0x24BE20AC8]();
}

uint64_t REAssetProviderCompiledDataLoadContextGetDescriptor()
{
  return MEMORY[0x24BE20AD0]();
}

uint64_t REAssetRegistrationOptionsCreate()
{
  return MEMORY[0x24BE20AD8]();
}

uint64_t REAssetSerializeToJSON()
{
  return MEMORY[0x24BE20AE8]();
}

uint64_t REAssetSetDebugName()
{
  return MEMORY[0x24BE20B00]();
}

uint64_t REAssetSetMetadataString()
{
  return MEMORY[0x24BE20B08]();
}

uint64_t REAssetWithMetadataCreate()
{
  return MEMORY[0x24BE20B38]();
}

uint64_t REAudioAnimationComponentGetComponentType()
{
  return MEMORY[0x24BE20B60]();
}

uint64_t REAudioAnimationComponentSetAnimationGain()
{
  return MEMORY[0x24BE20B68]();
}

uint64_t REAudioAnimationComponentSetAudioAsset()
{
  return MEMORY[0x24BE20B70]();
}

uint64_t REAudioAnimationComponentSetMediaOffset()
{
  return MEMORY[0x24BE20B80]();
}

uint64_t REAudioFileAssetCompleteLoadWithService()
{
  return MEMORY[0x24BE20BA0]();
}

uint64_t REAudioFileAssetCreateWithMappedDataNullable()
{
  return MEMORY[0x24BE20C58]();
}

uint64_t REAudioFileAssetGetLengthInSeconds()
{
  return MEMORY[0x24BE20C98]();
}

uint64_t REAudioFileAssetMakeMutableAndReplaceWithData()
{
  return MEMORY[0x24BE20CE0]();
}

uint64_t REAudioFileAssetSetInputMode()
{
  return MEMORY[0x24BE20CE8]();
}

uint64_t REAudioFileAssetSetLoopCount()
{
  return MEMORY[0x24BE20CF8]();
}

uint64_t REAudioPlayerComponentGetComponentType()
{
  return MEMORY[0x24BE20E20]();
}

uint64_t REAudioPlayerComponentRegisterAsset()
{
  return MEMORY[0x24BE20E88]();
}

uint64_t REBlendShapeWeightsComponentGetComponentType()
{
  return MEMORY[0x24BE21258]();
}

uint64_t REBlendShapeWeightsComponentSetBlendShapeWeightsCount()
{
  return MEMORY[0x24BE21260]();
}

uint64_t REBlendShapeWeightsComponentSetBlendShapeWeightsDefinition()
{
  return MEMORY[0x24BE21268]();
}

uint64_t REBlendShapeWeightsComponentSetBlendWeight()
{
  return MEMORY[0x24BE21270]();
}

uint64_t REBlendShapeWeightsComponentSetBlendWeightCount()
{
  return MEMORY[0x24BE21278]();
}

uint64_t REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitions()
{
  return MEMORY[0x24BE21288]();
}

uint64_t REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitionsAndWeightNames()
{
  return MEMORY[0x24BE21290]();
}

uint64_t RECGColorToColorGamut()
{
  return MEMORY[0x24BE21318]();
}

uint64_t RECIntrospectionAlloc()
{
  return MEMORY[0x24BE21320]();
}

uint64_t RECIntrospectionFree()
{
  return MEMORY[0x24BE21338]();
}

uint64_t RECIntrospectionStructRegister()
{
  return MEMORY[0x24BE21340]();
}

uint64_t RECameraMovementComponentGetComponentType()
{
  return MEMORY[0x24BE21350]();
}

uint64_t REColliderComponentGetComponentType()
{
  return MEMORY[0x24BE21518]();
}

uint64_t REColliderComponentSetGroup()
{
  return MEMORY[0x24BE21540]();
}

uint64_t REColliderComponentSetInteractionType()
{
  return MEMORY[0x24BE21548]();
}

uint64_t REColliderComponentSetMask()
{
  return MEMORY[0x24BE21550]();
}

uint64_t REColliderComponentSetShape()
{
  return MEMORY[0x24BE21558]();
}

uint64_t RECollisionShapeAssetGetCollisionShape()
{
  return MEMORY[0x24BE21670]();
}

uint64_t RECollisionShapeAssetGetType()
{
  return MEMORY[0x24BE21678]();
}

uint64_t REComponentClassFromName()
{
  return MEMORY[0x24BE216B0]();
}

uint64_t REComponentClassFromTypeInfo()
{
  return MEMORY[0x24BE216C0]();
}

uint64_t REComponentClassGetName()
{
  return MEMORY[0x24BE216C8]();
}

uint64_t REComponentCopy()
{
  return MEMORY[0x24BE216D0]();
}

uint64_t REComponentCreateByClass()
{
  return MEMORY[0x24BE216D8]();
}

uint64_t REComponentDeserializeFromOPACKData()
{
  return MEMORY[0x24BE216E8]();
}

uint64_t REComponentGetClass()
{
  return MEMORY[0x24BE216F0]();
}

uint64_t REComponentGetEntity()
{
  return MEMORY[0x24BE216F8]();
}

uint64_t REComponentIsAvailableForMajorVersion()
{
  return MEMORY[0x24BE21700]();
}

uint64_t REComponentMarkDirty()
{
  return MEMORY[0x24BE21708]();
}

uint64_t REComponentSerializeCopyToOPACKData()
{
  return MEMORY[0x24BE21718]();
}

uint64_t RECreateCubeTextureDataFromLatLong()
{
  return MEMORY[0x24BE21858]();
}

uint64_t RECustomComponentGetObject()
{
  return MEMORY[0x24BE218E0]();
}

uint64_t RECustomComponentTypeCreate()
{
  return MEMORY[0x24BE218F0]();
}

uint64_t RECustomComponentTypeDestroy()
{
  return MEMORY[0x24BE21900]();
}

uint64_t REDecomposeMatrix()
{
  return MEMORY[0x24BE21AC8]();
}

uint64_t REDictionaryAddEntry()
{
  return MEMORY[0x24BE21B00]();
}

uint64_t REDictionaryIteratorCreate()
{
  return MEMORY[0x24BE21B08]();
}

uint64_t REDictionaryIteratorDestroy()
{
  return MEMORY[0x24BE21B10]();
}

uint64_t REDictionaryIteratorGetCurrentKey()
{
  return MEMORY[0x24BE21B18]();
}

uint64_t REDictionaryIteratorGetCurrentValue()
{
  return MEMORY[0x24BE21B20]();
}

uint64_t REDictionaryIteratorMoveNext()
{
  return MEMORY[0x24BE21B28]();
}

uint64_t REDirectionalLightComponentGetComponentType()
{
  return MEMORY[0x24BE21BA0]();
}

uint64_t REDirectionalLightComponentSetColorGamut3F()
{
  return MEMORY[0x24BE21BB8]();
}

uint64_t REDirectionalLightComponentSetIntensity()
{
  return MEMORY[0x24BE21BC0]();
}

uint64_t REDirectionalLightShadowMapComponentGetComponentType()
{
  return MEMORY[0x24BE21BD8]();
}

uint64_t REDynamicStringGetValue()
{
  return MEMORY[0x24BE21C98]();
}

uint64_t REDynamicStringSet()
{
  return MEMORY[0x24BE21CA0]();
}

uint64_t REECSOPACKDeserializerCreate()
{
  return MEMORY[0x24BE21D20]();
}

uint64_t REECSOPACKSerializerCreate()
{
  return MEMORY[0x24BE21D28]();
}

uint64_t REEngineConfigurationCreateFromEngine()
{
  return MEMORY[0x24BE21E10]();
}

uint64_t REEngineConfigurationGetEngineQueue()
{
  return MEMORY[0x24BE21E38]();
}

uint64_t REEngineGetServiceLocator()
{
  return MEMORY[0x24BE21F50]();
}

uint64_t REEntityAddComponentByClass()
{
  return MEMORY[0x24BE22000]();
}

uint64_t REEntityAddExistingComponent()
{
  return MEMORY[0x24BE22018]();
}

uint64_t REEntityCreate()
{
  return MEMORY[0x24BE22068]();
}

uint64_t REEntityGetChild()
{
  return MEMORY[0x24BE22080]();
}

uint64_t REEntityGetChildCount()
{
  return MEMORY[0x24BE22088]();
}

uint64_t REEntityGetChildren()
{
  return MEMORY[0x24BE22090]();
}

uint64_t REEntityGetComponentAtIndex()
{
  return MEMORY[0x24BE220A0]();
}

uint64_t REEntityGetComponentByClass()
{
  return MEMORY[0x24BE220A8]();
}

uint64_t REEntityGetComponentCount()
{
  return MEMORY[0x24BE220B0]();
}

uint64_t REEntityGetCustomComponent()
{
  return MEMORY[0x24BE220B8]();
}

uint64_t REEntityGetName()
{
  return MEMORY[0x24BE220C8]();
}

uint64_t REEntityGetOrAddComponentByClass()
{
  return MEMORY[0x24BE220D8]();
}

uint64_t REEntityGetOrAddCustomComponent()
{
  return MEMORY[0x24BE220E0]();
}

uint64_t REEntityGetParent()
{
  return MEMORY[0x24BE220E8]();
}

uint64_t REEntityGetSceneNullable()
{
  return MEMORY[0x24BE220F8]();
}

uint64_t REEntityGetSelfEnabled()
{
  return MEMORY[0x24BE22100]();
}

uint64_t REEntityHandleSet()
{
  return MEMORY[0x24BE22110]();
}

uint64_t REEntityInsertChild()
{
  return MEMORY[0x24BE22118]();
}

uint64_t REEntityRemoveComponentByClass()
{
  return MEMORY[0x24BE22160]();
}

uint64_t REEntityRemoveFromSceneOrParent()
{
  return MEMORY[0x24BE22170]();
}

uint64_t REEntitySetName()
{
  return MEMORY[0x24BE22180]();
}

uint64_t REEntitySetParent()
{
  return MEMORY[0x24BE22188]();
}

uint64_t REEntitySetSelfEnabled()
{
  return MEMORY[0x24BE22190]();
}

uint64_t REFilterMapComponentGetComponentType()
{
  return MEMORY[0x24BE22230]();
}

uint64_t REFilterMapComponentSetMaterial()
{
  return MEMORY[0x24BE22238]();
}

uint64_t REGeomBuildBoxDefaultOptions()
{
  return MEMORY[0x24BE223C8]();
}

uint64_t REGeomBuildCapsuleDefaultOptions()
{
  return MEMORY[0x24BE223D8]();
}

uint64_t REGeomBuildConeDefaultOptions()
{
  return MEMORY[0x24BE223E0]();
}

uint64_t REGeomBuildCylinderDefaultOptions()
{
  return MEMORY[0x24BE223E8]();
}

uint64_t REGeomBuildSphereDefaultOptions()
{
  return MEMORY[0x24BE22400]();
}

uint64_t REGeomInstanceCreate()
{
  return MEMORY[0x24BE22408]();
}

uint64_t REGeomModelDescriptorAddAttributeAlias()
{
  return MEMORY[0x24BE22418]();
}

uint64_t REGeomModelDescriptorAddAttributeDouble()
{
  return MEMORY[0x24BE22420]();
}

uint64_t REGeomModelDescriptorAddAttributeFloat()
{
  return MEMORY[0x24BE22428]();
}

uint64_t REGeomModelDescriptorAddAttributeInt32()
{
  return MEMORY[0x24BE22438]();
}

uint64_t REGeomModelDescriptorAddAttributeInt8()
{
  return MEMORY[0x24BE22440]();
}

uint64_t REGeomModelDescriptorAddAttributeUInt16()
{
  return MEMORY[0x24BE22448]();
}

uint64_t REGeomModelDescriptorAddAttributeUInt32()
{
  return MEMORY[0x24BE22450]();
}

uint64_t REGeomModelDescriptorAddAttributeUInt8()
{
  return MEMORY[0x24BE22458]();
}

uint64_t REGeomModelDescriptorAddAttributeVector2F()
{
  return MEMORY[0x24BE22460]();
}

uint64_t REGeomModelDescriptorAddAttributeVector3F()
{
  return MEMORY[0x24BE22468]();
}

uint64_t REGeomModelDescriptorAddAttributeVector4F()
{
  return MEMORY[0x24BE22470]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeDouble()
{
  return MEMORY[0x24BE22478]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeFloat()
{
  return MEMORY[0x24BE22480]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeInt32()
{
  return MEMORY[0x24BE22490]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeUInt32()
{
  return MEMORY[0x24BE224A8]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeUInt8()
{
  return MEMORY[0x24BE224B0]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeVector2F()
{
  return MEMORY[0x24BE224B8]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeVector3F()
{
  return MEMORY[0x24BE224C0]();
}

uint64_t REGeomModelDescriptorAddIndexedAttributeVector4F()
{
  return MEMORY[0x24BE224C8]();
}

uint64_t REGeomModelDescriptorAddSkinningData()
{
  return MEMORY[0x24BE224D0]();
}

uint64_t REGeomModelDescriptorClearMaterialAssignments()
{
  return MEMORY[0x24BE224D8]();
}

uint64_t REGeomModelDescriptorCreateFromBoxOptions()
{
  return MEMORY[0x24BE224E8]();
}

uint64_t REGeomModelDescriptorCreateFromCapsuleOptions()
{
  return MEMORY[0x24BE224F0]();
}

uint64_t REGeomModelDescriptorCreateFromConeOptions()
{
  return MEMORY[0x24BE224F8]();
}

uint64_t REGeomModelDescriptorCreateFromCylinderOptions()
{
  return MEMORY[0x24BE22500]();
}

uint64_t REGeomModelDescriptorCreateFromSphereOptions()
{
  return MEMORY[0x24BE22508]();
}

uint64_t REGeomModelDescriptorCreateHighVertexPerPolygon()
{
  return MEMORY[0x24BE22510]();
}

uint64_t REGeomModelDescriptorGetAttributeCount()
{
  return MEMORY[0x24BE22518]();
}

uint64_t REGeomModelDescriptorGetAttributeIndex()
{
  return MEMORY[0x24BE22520]();
}

uint64_t REGeomModelDescriptorGetAttributeIndexCount()
{
  return MEMORY[0x24BE22528]();
}

uint64_t REGeomModelDescriptorGetAttributeIndices()
{
  return MEMORY[0x24BE22530]();
}

uint64_t REGeomModelDescriptorGetAttributeType()
{
  return MEMORY[0x24BE22538]();
}

uint64_t REGeomModelDescriptorGetAttributeValueCount()
{
  return MEMORY[0x24BE22540]();
}

uint64_t REGeomModelDescriptorGetAttributeValuesFloat()
{
  return MEMORY[0x24BE22548]();
}

uint64_t REGeomModelDescriptorGetAttributeValuesVector3F()
{
  return MEMORY[0x24BE22550]();
}

uint64_t REGeomModelDescriptorGetFaceCount()
{
  return MEMORY[0x24BE22558]();
}

uint64_t REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon()
{
  return MEMORY[0x24BE22560]();
}

uint64_t REGeomModelDescriptorGetIndexCount()
{
  return MEMORY[0x24BE22568]();
}

uint64_t REGeomModelDescriptorGetIndices()
{
  return MEMORY[0x24BE22570]();
}

uint64_t REGeomModelDescriptorGetVertexCount()
{
  return MEMORY[0x24BE22578]();
}

uint64_t REGeomModelDescriptorIsAttributeIndexed()
{
  return MEMORY[0x24BE22580]();
}

uint64_t REGeomModelDescriptorSetMaterialAssignmentForModel()
{
  return MEMORY[0x24BE22588]();
}

uint64_t REGeomModelDescriptorSetMaterialAssignmentsPerFace()
{
  return MEMORY[0x24BE22590]();
}

uint64_t REGeomModelDescriptorSetName()
{
  return MEMORY[0x24BE22598]();
}

uint64_t REGeomModelDescriptorSetSurfaceType()
{
  return MEMORY[0x24BE225A0]();
}

uint64_t REGeomModelDescriptorSetWindingOrder()
{
  return MEMORY[0x24BE225A8]();
}

uint64_t REGlobalTypeRegistryWithReadLock()
{
  return MEMORY[0x24BE225C8]();
}

uint64_t REGroundPlaneComponentGetComponentType()
{
  return MEMORY[0x24BE225D0]();
}

uint64_t REGroundPlaneComponentSetIsSceneUnderstandingMeshPhysicsFallback()
{
  return MEMORY[0x24BE225D8]();
}

uint64_t REGroundingShadowComponentGetComponentType()
{
  return MEMORY[0x24BE225E8]();
}

uint64_t REImageBasedLightComponentGetComponentType()
{
  return MEMORY[0x24BE227B0]();
}

uint64_t REImageBasedLightComponentGetIBL()
{
  return MEMORY[0x24BE227C0]();
}

uint64_t REImageBasedLightComponentSetIBL()
{
  return MEMORY[0x24BE22808]();
}

uint64_t REImageBasedLightComponentSetIntensityExponent()
{
  return MEMORY[0x24BE22820]();
}

uint64_t REImageBasedLightReceiverComponentGetComponentType()
{
  return MEMORY[0x24BE22840]();
}

uint64_t RELinkedOnOrAfterFall2024OSVersions()
{
  return MEMORY[0x24BE22910]();
}

uint64_t REListAccessorReset()
{
  return MEMORY[0x24BE22918]();
}

uint64_t REListIteratorCreate()
{
  return MEMORY[0x24BE22920]();
}

uint64_t REListIteratorDestroy()
{
  return MEMORY[0x24BE22928]();
}

uint64_t REListIteratorNextElement()
{
  return MEMORY[0x24BE22930]();
}

uint64_t REMakeMassFrameFromShapeAndMass()
{
  return MEMORY[0x24BE22960]();
}

uint64_t REMakePose()
{
  return MEMORY[0x24BE22978]();
}

uint64_t REMaterialAssetBuilderAddFunctionLink()
{
  return MEMORY[0x24BE22990]();
}

uint64_t REMaterialAssetBuilderBindTextureToSampler()
{
  return MEMORY[0x24BE229A0]();
}

uint64_t REMaterialAssetBuilderCreate()
{
  return MEMORY[0x24BE229A8]();
}

uint64_t REMaterialAssetBuilderSetBool()
{
  return MEMORY[0x24BE229B0]();
}

uint64_t REMaterialAssetBuilderSetBufferFromBinding()
{
  return MEMORY[0x24BE229B8]();
}

uint64_t REMaterialAssetBuilderSetColor3F()
{
  return MEMORY[0x24BE229C0]();
}

uint64_t REMaterialAssetBuilderSetColor4F()
{
  return MEMORY[0x24BE229C8]();
}

uint64_t REMaterialAssetBuilderSetFloat()
{
  return MEMORY[0x24BE229D0]();
}

uint64_t REMaterialAssetBuilderSetFloat2()
{
  return MEMORY[0x24BE229D8]();
}

uint64_t REMaterialAssetBuilderSetFloat2x2()
{
  return MEMORY[0x24BE229E0]();
}

uint64_t REMaterialAssetBuilderSetFloat3()
{
  return MEMORY[0x24BE229E8]();
}

uint64_t REMaterialAssetBuilderSetFloat3x3()
{
  return MEMORY[0x24BE229F0]();
}

uint64_t REMaterialAssetBuilderSetFloat4()
{
  return MEMORY[0x24BE229F8]();
}

uint64_t REMaterialAssetBuilderSetFloat4x4()
{
  return MEMORY[0x24BE22A00]();
}

uint64_t REMaterialAssetBuilderSetFunctionConstant()
{
  return MEMORY[0x24BE22A08]();
}

uint64_t REMaterialAssetBuilderSetInt()
{
  return MEMORY[0x24BE22A10]();
}

uint64_t REMaterialAssetBuilderSetInt2()
{
  return MEMORY[0x24BE22A18]();
}

uint64_t REMaterialAssetBuilderSetInt3()
{
  return MEMORY[0x24BE22A20]();
}

uint64_t REMaterialAssetBuilderSetInt4()
{
  return MEMORY[0x24BE22A28]();
}

uint64_t REMaterialAssetBuilderSetMTLCullMode()
{
  return MEMORY[0x24BE22A30]();
}

uint64_t REMaterialAssetBuilderSetMaterialDefinition()
{
  return MEMORY[0x24BE22A38]();
}

uint64_t REMaterialAssetBuilderSetName()
{
  return MEMORY[0x24BE22A40]();
}

uint64_t REMaterialAssetBuilderSetNeedsVCABlur()
{
  return MEMORY[0x24BE22A50]();
}

uint64_t REMaterialAssetBuilderSetSampler()
{
  return MEMORY[0x24BE22A58]();
}

uint64_t REMaterialAssetBuilderSetTextureFromAsset()
{
  return MEMORY[0x24BE22A60]();
}

uint64_t REMaterialAssetBuilderSetTextureFromBinding()
{
  return MEMORY[0x24BE22A68]();
}

uint64_t REMaterialAssetBuilderSetUInt()
{
  return MEMORY[0x24BE22A70]();
}

uint64_t REMaterialAssetBuilderSetUVIndexForTexture()
{
  return MEMORY[0x24BE22A90]();
}

uint64_t REMaterialAssetSetSamplerBinding()
{
  return MEMORY[0x24BE22BE8]();
}

uint64_t REMaterialCreateDefaultSamplerDescriptor()
{
  return MEMORY[0x24BE22BF8]();
}

uint64_t REMemoryAssetParametersCreate()
{
  return MEMORY[0x24BE22FF8]();
}

uint64_t REMemoryAssetParametersSetAssetName()
{
  return MEMORY[0x24BE23000]();
}

uint64_t REMemoryAssetParametersSetAsyncRegistration()
{
  return MEMORY[0x24BE23008]();
}

uint64_t REMeshAssetCreateBoxDescriptor()
{
  return MEMORY[0x24BE23028]();
}

uint64_t REMeshAssetCreateCapsuleDescriptor()
{
  return MEMORY[0x24BE23038]();
}

uint64_t REMeshAssetCreateConeDescriptor()
{
  return MEMORY[0x24BE23040]();
}

uint64_t REMeshAssetCreateCylinderDescriptor()
{
  return MEMORY[0x24BE23048]();
}

uint64_t REMeshAssetCreateSphereDescriptor()
{
  return MEMORY[0x24BE23060]();
}

uint64_t REMeshAssetDescriptorAddInstance()
{
  return MEMORY[0x24BE23068]();
}

uint64_t REMeshAssetDescriptorAddModel()
{
  return MEMORY[0x24BE23070]();
}

uint64_t REMeshAssetDescriptorAddSkeleton()
{
  return MEMORY[0x24BE23078]();
}

uint64_t REMeshAssetDescriptorCreate()
{
  return MEMORY[0x24BE23080]();
}

uint64_t REMeshAssetDescriptorGetModelCount()
{
  return MEMORY[0x24BE23088]();
}

uint64_t REMeshAssetGetModelCount()
{
  return MEMORY[0x24BE230F0]();
}

uint64_t REMeshAssetGetModelPartBufferCount()
{
  return MEMORY[0x24BE23120]();
}

uint64_t REMeshAssetGetModelPartBufferName()
{
  return MEMORY[0x24BE23128]();
}

uint64_t REMeshAssetGetModelPartCount()
{
  return MEMORY[0x24BE23130]();
}

uint64_t REMeshAssetGetModelPartMaterial()
{
  return MEMORY[0x24BE23138]();
}

uint64_t REMeshAssetGetSkeletonAtIndex()
{
  return MEMORY[0x24BE23160]();
}

uint64_t REMeshCompileOptionsCreate()
{
  return MEMORY[0x24BE23258]();
}

uint64_t REMeshCompileOptionsSetGenerateDecimatedMesh()
{
  return MEMORY[0x24BE232A8]();
}

uint64_t REMeshCompileOptionsSetPreserveSubdivisonSurfaceData()
{
  return MEMORY[0x24BE232C8]();
}

uint64_t REMeshComponentAddMaterial()
{
  return MEMORY[0x24BE232E0]();
}

uint64_t REMeshComponentGetComponentType()
{
  return MEMORY[0x24BE23300]();
}

uint64_t REMeshComponentGetMaterialAtIndex()
{
  return MEMORY[0x24BE23308]();
}

uint64_t REMeshComponentGetMaterialCount()
{
  return MEMORY[0x24BE23310]();
}

uint64_t REMeshComponentRemoveAllMaterials()
{
  return MEMORY[0x24BE23328]();
}

uint64_t REMeshComponentSetMesh()
{
  return MEMORY[0x24BE23348]();
}

uint64_t REMeshDeformationComponentGetComponentType()
{
  return MEMORY[0x24BE23398]();
}

uint64_t REMeshSortingComponentGetComponentType()
{
  return MEMORY[0x24BE233F0]();
}

uint64_t RENetworkComponentGetComponentType()
{
  return MEMORY[0x24BE23490]();
}

uint64_t RENetworkMarkComponentDirty()
{
  return MEMORY[0x24BE234E8]();
}

uint64_t RENullTerminatedStringSet()
{
  return MEMORY[0x24BE23538]();
}

uint64_t REOptionalAccessorSetValue()
{
  return MEMORY[0x24BE23548]();
}

uint64_t REOrthographicCameraComponentGetComponentType()
{
  return MEMORY[0x24BE23550]();
}

uint64_t REOrthographicCameraComponentSetFar()
{
  return MEMORY[0x24BE23578]();
}

uint64_t REOrthographicCameraComponentSetNear()
{
  return MEMORY[0x24BE23580]();
}

uint64_t REPerspectiveCameraComponentGetComponentType()
{
  return MEMORY[0x24BE237A0]();
}

uint64_t REPerspectiveCameraComponentSetFar()
{
  return MEMORY[0x24BE237C8]();
}

uint64_t REPerspectiveCameraComponentSetFieldOfView()
{
  return MEMORY[0x24BE237D0]();
}

uint64_t REPerspectiveCameraComponentSetNear()
{
  return MEMORY[0x24BE237E0]();
}

uint64_t REPhysicsOriginComponentGetComponentType()
{
  return MEMORY[0x24BE238D8]();
}

uint64_t REPointLightComponentGetComponentType()
{
  return MEMORY[0x24BE239E8]();
}

uint64_t REPointLightComponentSetAttenuationRadius()
{
  return MEMORY[0x24BE23A00]();
}

uint64_t REPointLightComponentSetColorGamut3F()
{
  return MEMORY[0x24BE23A08]();
}

uint64_t REPointLightComponentSetIntensity()
{
  return MEMORY[0x24BE23A10]();
}

uint64_t REPoseIdentity()
{
  return MEMORY[0x24BE23B08]();
}

uint64_t REPoseMultiply()
{
  return MEMORY[0x24BE23B10]();
}

uint64_t RERealityFileAssetWriteReportCreate()
{
  return MEMORY[0x24BE23C90]();
}

uint64_t RERealityFileAssetWriteReportGetError()
{
  return MEMORY[0x24BE23C98]();
}

uint64_t RERealityFileWriterClose()
{
  return MEMORY[0x24BE23D78]();
}

uint64_t RERealityFileWriterCreateWithParameters()
{
  return MEMORY[0x24BE23D80]();
}

uint64_t RERealityFileWriterOpen()
{
  return MEMORY[0x24BE23DA0]();
}

uint64_t RERealityFileWriterSetMetadataString()
{
  return MEMORY[0x24BE23DC0]();
}

uint64_t RERealityFileWriterWriteAssetArrayAndDependencies()
{
  return MEMORY[0x24BE23DD0]();
}

uint64_t RERealityFileWritingParametersCreate()
{
  return MEMORY[0x24BE23DE0]();
}

uint64_t RERealityFileWritingParametersSetMajorVersion()
{
  return MEMORY[0x24BE23DF0]();
}

uint64_t RERectAreaLightComponentGetComponentType()
{
  return MEMORY[0x24BE23E10]();
}

uint64_t RERectAreaLightComponentSetColorGamut3F()
{
  return MEMORY[0x24BE23E18]();
}

uint64_t RERectAreaLightComponentSetExtents()
{
  return MEMORY[0x24BE23E20]();
}

uint64_t RERectAreaLightComponentSetIntensity()
{
  return MEMORY[0x24BE23E28]();
}

uint64_t RERelease()
{
  return MEMORY[0x24BE23EA8]();
}

uint64_t RERenderManagerGetRenderDevice()
{
  return MEMORY[0x24BE24018]();
}

uint64_t RERenderOptionsComponentGetComponentType()
{
  return MEMORY[0x24BE24088]();
}

uint64_t RERenderOptionsComponentSetVisibilityMode()
{
  return MEMORY[0x24BE24098]();
}

uint64_t RERetain()
{
  return MEMORY[0x24BE240A0]();
}

uint64_t RERigComponentGetComponentType()
{
  return MEMORY[0x24BE240D8]();
}

uint64_t RERigidBodyComponentGetComponentType()
{
  return MEMORY[0x24BE24128]();
}

uint64_t RERigidBodyComponentSetMassFrame()
{
  return MEMORY[0x24BE241F8]();
}

uint64_t RERigidBodyComponentSetMaterial()
{
  return MEMORY[0x24BE24200]();
}

uint64_t RERigidBodyComponentSetMotionType()
{
  return MEMORY[0x24BE24208]();
}

uint64_t RESceneAddEntity()
{
  return MEMORY[0x24BE24270]();
}

uint64_t RESceneCreate()
{
  return MEMORY[0x24BE24290]();
}

uint64_t RESceneGetMainIBLComponent()
{
  return MEMORY[0x24BE24330]();
}

uint64_t REServiceLocatorGetAssetManager()
{
  return MEMORY[0x24BE24530]();
}

uint64_t REServiceLocatorGetAudioService()
{
  return MEMORY[0x24BE24540]();
}

uint64_t REServiceLocatorGetECSService()
{
  return MEMORY[0x24BE24558]();
}

uint64_t REServiceLocatorGetRenderManager()
{
  return MEMORY[0x24BE24598]();
}

uint64_t REShadowMapComponentGetComponentType()
{
  return MEMORY[0x24BE24600]();
}

uint64_t REShadowMapComponentSetDepthBias()
{
  return MEMORY[0x24BE24608]();
}

uint64_t REShadowMapComponentSetDistance()
{
  return MEMORY[0x24BE24610]();
}

uint64_t RESkeletalPoseComponentGetComponentType()
{
  return MEMORY[0x24BE24640]();
}

uint64_t RESkeletalPoseComponentSetSkeletalPoseDefinition()
{
  return MEMORY[0x24BE246C8]();
}

uint64_t RESkeletonDefinitionCreate()
{
  return MEMORY[0x24BE24758]();
}

uint64_t RESkeletonDefinitionCreateGeomSkeleton()
{
  return MEMORY[0x24BE24760]();
}

uint64_t RESkeletonDefinitionSetInverseBindPoses()
{
  return MEMORY[0x24BE24788]();
}

uint64_t RESkeletonDefinitionSetJointNames()
{
  return MEMORY[0x24BE247A0]();
}

uint64_t RESkeletonDefinitionSetLocalRestPoses()
{
  return MEMORY[0x24BE247A8]();
}

uint64_t RESkeletonDefinitionSetName()
{
  return MEMORY[0x24BE247B0]();
}

uint64_t RESpotLightComponentGetComponentType()
{
  return MEMORY[0x24BE24888]();
}

uint64_t RESpotLightComponentSetColorGamut3F()
{
  return MEMORY[0x24BE248B8]();
}

uint64_t RESpotLightComponentSetInnerAngle()
{
  return MEMORY[0x24BE248C0]();
}

uint64_t RESpotLightComponentSetIntensity()
{
  return MEMORY[0x24BE248C8]();
}

uint64_t RESpotLightComponentSetOuterAngle()
{
  return MEMORY[0x24BE248D0]();
}

uint64_t RESpotLightShadowMapComponentGetComponentType()
{
  return MEMORY[0x24BE248D8]();
}

uint64_t REStatic3DTextComponentGetComponentType()
{
  return MEMORY[0x24BE24B38]();
}

uint64_t REStatic3DTextComponentSetExtrusionDepth()
{
  return MEMORY[0x24BE24B90]();
}

uint64_t REStatic3DTextComponentSetFont()
{
  return MEMORY[0x24BE24B98]();
}

uint64_t REStatic3DTextComponentSetFontSize()
{
  return MEMORY[0x24BE24BA0]();
}

uint64_t REStatic3DTextComponentSetLineBreakMode()
{
  return MEMORY[0x24BE24BA8]();
}

uint64_t REStatic3DTextComponentSetText()
{
  return MEMORY[0x24BE24BB0]();
}

uint64_t REStatic3DTextComponentSetTextAlignment()
{
  return MEMORY[0x24BE24BB8]();
}

uint64_t REStatic3DTextComponentSetTextFrameSize()
{
  return MEMORY[0x24BE24BC0]();
}

uint64_t REStatic3DTextComponentSetVerticalTextAlignment()
{
  return MEMORY[0x24BE24BC8]();
}

uint64_t REStatic3DTextDefaultOptions()
{
  return MEMORY[0x24BE24BD0]();
}

uint64_t REStringIDGet()
{
  return MEMORY[0x24BE24BD8]();
}

uint64_t REStringIDSet()
{
  return MEMORY[0x24BE24BE0]();
}

uint64_t REStructBuilderAddMemberDataTypeWithTag()
{
  return MEMORY[0x24BE24BF8]();
}

uint64_t REStructBuilderCreate()
{
  return MEMORY[0x24BE24C08]();
}

uint64_t REStructBuilderDestroy()
{
  return MEMORY[0x24BE24C10]();
}

uint64_t REStructBuilderInit()
{
  return MEMORY[0x24BE24C18]();
}

uint64_t RETextureAssetMakeMutableAndReplaceWithData()
{
  return MEMORY[0x24BE24CE8]();
}

uint64_t RETextureImportGetCGColorSpaceFromOCIOString()
{
  return MEMORY[0x24BE24DA0]();
}

uint64_t RETextureImportOperationCopyTextureDescriptorTemplate()
{
  return MEMORY[0x24BE24DB8]();
}

uint64_t RETextureImportOperationCreateAssetData()
{
  return MEMORY[0x24BE24DC8]();
}

uint64_t RETextureImportOperationCreateWithData()
{
  return MEMORY[0x24BE24DE8]();
}

uint64_t RETextureImportOperationSetAssetResourceName()
{
  return MEMORY[0x24BE24E10]();
}

uint64_t RETextureImportOperationSetColorSpaceName()
{
  return MEMORY[0x24BE24E18]();
}

uint64_t RETextureImportOperationSetCompressionType()
{
  return MEMORY[0x24BE24E20]();
}

uint64_t RETextureImportOperationSetDimensionsMode()
{
  return MEMORY[0x24BE24E28]();
}

uint64_t RETextureImportOperationSetDoneWithSourceCallback()
{
  return MEMORY[0x24BE24E30]();
}

uint64_t RETextureImportOperationSetDownsampleFactor()
{
  return MEMORY[0x24BE24E38]();
}

uint64_t RETextureImportOperationSetPixelFormatMode()
{
  return MEMORY[0x24BE24E48]();
}

uint64_t RETextureImportOperationSetSemantic()
{
  return MEMORY[0x24BE24E50]();
}

uint64_t RETextureImportOperationSetTextureDescriptorTemplate()
{
  return MEMORY[0x24BE24E58]();
}

uint64_t RETimelineDefinitionAddChildTimeline()
{
  return MEMORY[0x24BE24E78]();
}

uint64_t RETimelineDefinitionCreateAudioAnimation()
{
  return MEMORY[0x24BE24EF0]();
}

uint64_t RETimelineDefinitionCreateFromTimeline()
{
  return MEMORY[0x24BE24F38]();
}

uint64_t RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation()
{
  return MEMORY[0x24BE24FA0]();
}

uint64_t RETimelineDefinitionCreateSampledFloatAnimation()
{
  return MEMORY[0x24BE24FC8]();
}

uint64_t RETimelineDefinitionCreateSampledSRTAnimation()
{
  return MEMORY[0x24BE24FD8]();
}

uint64_t RETimelineDefinitionCreateSampledSkeletalPoseAnimation()
{
  return MEMORY[0x24BE24FE0]();
}

uint64_t RETimelineDefinitionCreateTimelineAsset()
{
  return MEMORY[0x24BE24FF0]();
}

uint64_t RETimelineDefinitionCreateTimelineClip()
{
  return MEMORY[0x24BE24FF8]();
}

uint64_t RETimelineDefinitionCreateTimelineGroup()
{
  return MEMORY[0x24BE25000]();
}

uint64_t RETimelineDefinitionGetEndTime()
{
  return MEMORY[0x24BE25170]();
}

uint64_t RETimelineDefinitionGetStartTime()
{
  return MEMORY[0x24BE252D8]();
}

uint64_t RETimelineDefinitionGetTimelineType()
{
  return MEMORY[0x24BE252F0]();
}

uint64_t RETimelineDefinitionSetAdditive()
{
  return MEMORY[0x24BE25308]();
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsData()
{
  return MEMORY[0x24BE25330]();
}

uint64_t RETimelineDefinitionSetClipDelay()
{
  return MEMORY[0x24BE25378]();
}

uint64_t RETimelineDefinitionSetClipDuration()
{
  return MEMORY[0x24BE25380]();
}

uint64_t RETimelineDefinitionSetClipEnd()
{
  return MEMORY[0x24BE25388]();
}

uint64_t RETimelineDefinitionSetClipLoopBehavior()
{
  return MEMORY[0x24BE25390]();
}

uint64_t RETimelineDefinitionSetClipStart()
{
  return MEMORY[0x24BE253A8]();
}

uint64_t RETimelineDefinitionSetEndTime()
{
  return MEMORY[0x24BE253E0]();
}

uint64_t RETimelineDefinitionSetFillMode()
{
  return MEMORY[0x24BE253E8]();
}

uint64_t RETimelineDefinitionSetFloatValues()
{
  return MEMORY[0x24BE25468]();
}

uint64_t RETimelineDefinitionSetFrameInterval()
{
  return MEMORY[0x24BE25470]();
}

uint64_t RETimelineDefinitionSetInterpolationEnabled()
{
  return MEMORY[0x24BE25478]();
}

uint64_t RETimelineDefinitionSetSRTValues()
{
  return MEMORY[0x24BE254D0]();
}

uint64_t RETimelineDefinitionSetSkeletalPoses()
{
  return MEMORY[0x24BE25540]();
}

uint64_t RETimelineDefinitionSetSkeleton()
{
  return MEMORY[0x24BE25548]();
}

uint64_t RETimelineDefinitionSetStartTime()
{
  return MEMORY[0x24BE25558]();
}

uint64_t RETimelineDefinitionSetTargetPath()
{
  return MEMORY[0x24BE25568]();
}

uint64_t RETransformComponentGetComponentType()
{
  return MEMORY[0x24BE25690]();
}

uint64_t RETransformComponentSetLocalOrientation()
{
  return MEMORY[0x24BE256F8]();
}

uint64_t RETransformComponentSetLocalSRT()
{
  return MEMORY[0x24BE25700]();
}

uint64_t RETransformComponentSetLocalScale()
{
  return MEMORY[0x24BE25708]();
}

uint64_t RETypeInfoCreateInstance()
{
  return MEMORY[0x24BE25738]();
}

uint64_t RETypeInfoDereferencePointer()
{
  return MEMORY[0x24BE25740]();
}

uint64_t RETypeInfoDestroyInstance()
{
  return MEMORY[0x24BE25748]();
}

uint64_t RETypeInfoGetArrayElementType()
{
  return MEMORY[0x24BE25750]();
}

uint64_t RETypeInfoGetCategory()
{
  return MEMORY[0x24BE25758]();
}

uint64_t RETypeInfoGetDictionaryKeyType()
{
  return MEMORY[0x24BE25760]();
}

uint64_t RETypeInfoGetDictionaryValueType()
{
  return MEMORY[0x24BE25768]();
}

uint64_t RETypeInfoGetEnumConstantCount()
{
  return MEMORY[0x24BE25770]();
}

uint64_t RETypeInfoGetEnumConstantName()
{
  return MEMORY[0x24BE25778]();
}

uint64_t RETypeInfoGetEnumConstantValue()
{
  return MEMORY[0x24BE25780]();
}

uint64_t RETypeInfoGetListElementType()
{
  return MEMORY[0x24BE25790]();
}

uint64_t RETypeInfoGetName()
{
  return MEMORY[0x24BE25798]();
}

uint64_t RETypeInfoGetObjectMemberByIndex()
{
  return MEMORY[0x24BE257A0]();
}

uint64_t RETypeInfoGetObjectMemberCount()
{
  return MEMORY[0x24BE257A8]();
}

uint64_t RETypeInfoGetOptionalValueType()
{
  return MEMORY[0x24BE257B0]();
}

uint64_t RETypeInfoGetReferencedType()
{
  return MEMORY[0x24BE257B8]();
}

uint64_t RETypeInfoGetSize()
{
  return MEMORY[0x24BE257C0]();
}

uint64_t RETypeInfoGetSubClass()
{
  return MEMORY[0x24BE257C8]();
}

uint64_t RETypeInfoGetSubClassCount()
{
  return MEMORY[0x24BE257D0]();
}

uint64_t RETypeInfoIsArray()
{
  return MEMORY[0x24BE257D8]();
}

uint64_t RETypeInfoIsDictionary()
{
  return MEMORY[0x24BE257E0]();
}

uint64_t RETypeInfoIsFixedSizeArray()
{
  return MEMORY[0x24BE257E8]();
}

uint64_t RETypeInfoIsList()
{
  return MEMORY[0x24BE257F0]();
}

uint64_t RETypeInfoIsObject()
{
  return MEMORY[0x24BE257F8]();
}

uint64_t RETypeInfoIsOptional()
{
  return MEMORY[0x24BE25800]();
}

uint64_t RETypeInfoIsPointer()
{
  return MEMORY[0x24BE25808]();
}

uint64_t RETypeMemberInfoGetMemberType()
{
  return MEMORY[0x24BE25810]();
}

uint64_t RETypeMemberInfoGetName()
{
  return MEMORY[0x24BE25818]();
}

uint64_t RETypeMemberInfoGetOffset()
{
  return MEMORY[0x24BE25820]();
}

uint64_t RETypeRegistryGetTypeInfoByTypeName()
{
  return MEMORY[0x24BE25828]();
}

uint64_t REVirtualEnvironmentProbeComponentGetComponentType()
{
  return MEMORY[0x24BE26170]();
}

uint64_t REZipArchiveGetDefaultLayerMTime()
{
  return MEMORY[0x24BE261D0]();
}

CFArrayRef UTTypeCreateAllIdentifiersForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  return (CFArrayRef)MEMORY[0x24BDC15D8](inTagClass, inTag, inConformingToUTI);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x24BDBD0A8]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x24BDBD0B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=()
{
  return MEMORY[0x24BEE7C60]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=()
{
  return MEMORY[0x24BEE7C68]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::GfMatrix2f()
{
  return MEMORY[0x24BEE7C70]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator*=()
{
  return MEMORY[0x24BEE7C78]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator+=()
{
  return MEMORY[0x24BEE7C80]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, double a2)
{
  return MEMORY[0x24BEE7C88](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, const pxrInternal__aapl__pxrReserved__::GfRotation *a2)
{
  return MEMORY[0x24BEE7C90](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=()
{
  return MEMORY[0x24BEE7C98]();
}

{
  return MEMORY[0x24BEE7CA0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=()
{
  return MEMORY[0x24BEE7CA8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, float a2)
{
  return MEMORY[0x24BEE7CB0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetScale()
{
  return MEMORY[0x24BEE7CB8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3d *a2)
{
  return MEMORY[0x24BEE7CC0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=()
{
  return MEMORY[0x24BEE7CC8]();
}

{
  return MEMORY[0x24BEE7CD0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator+=()
{
  return MEMORY[0x24BEE7CD8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, double a2)
{
  return MEMORY[0x24BEE7CE0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate()
{
  return MEMORY[0x24BEE7CE8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale()
{
  return MEMORY[0x24BEE7CF0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3d *a2)
{
  return MEMORY[0x24BEE7CF8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, const pxrInternal__aapl__pxrReserved__::GfRotation *a2)
{
  return MEMORY[0x24BEE7D00](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d()
{
  return MEMORY[0x24BEE7D08]();
}

{
  return MEMORY[0x24BEE7D10]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=()
{
  return MEMORY[0x24BEE7D18]();
}

{
  return MEMORY[0x24BEE7D20]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=()
{
  return MEMORY[0x24BEE7D28]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, float a2)
{
  return MEMORY[0x24BEE7D30](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, const pxrInternal__aapl__pxrReserved__::GfRotation *a2)
{
  return MEMORY[0x24BEE7D38](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly()
{
  return MEMORY[0x24BEE7D40]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslateOnly()
{
  return MEMORY[0x24BEE7D48]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale()
{
  return MEMORY[0x24BEE7D50]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, const pxrInternal__aapl__pxrReserved__::GfRotation *a2)
{
  return MEMORY[0x24BEE7D58](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  return MEMORY[0x24BEE7D60](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=()
{
  return MEMORY[0x24BEE7D68]();
}

{
  return MEMORY[0x24BEE7D70]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator+=()
{
  return MEMORY[0x24BEE7D78]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat()
{
  return MEMORY[0x24BEE7D80]();
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion()
{
  return MEMORY[0x24BEE7D88]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload()
{
  return MEMORY[0x24BEE7D90]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMakeDirs()
{
  return MEMORY[0x24BEE7D98]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNormPath()
{
  return MEMORY[0x24BEE7DA0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByFamily()
{
  return MEMORY[0x24BEE7DA8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfCopySpec()
{
  return MEMORY[0x24BEE7DB0]();
}

{
  return MEMORY[0x24BEE7DB8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrRegistry::GetInstance(pxrInternal__aapl__pxrReserved__::SdrRegistry *this)
{
  return MEMORY[0x24BEE7DC0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByName()
{
  return MEMORY[0x24BEE7DC8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark(pxrInternal__aapl__pxrReserved__::TfErrorMark *this)
{
  return MEMORY[0x24BEE7DD0](this);
}

void pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark(pxrInternal__aapl__pxrReserved__::TfErrorMark *this)
{
  MEMORY[0x24BEE7DD8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_End()
{
  return MEMORY[0x24BEE7DE8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin()
{
  return MEMORY[0x24BEE7DF0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance()
{
  return off_24FDDF008();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance()
{
  return off_24FDDF018();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance()
{
  return off_24FDDF028();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance()
{
  return off_24FDDF038();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  return MEMORY[0x24BEE7DF8](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCone::~UsdGeomCone(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  MEMORY[0x24BEE7E00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCube *this)
{
  return MEMORY[0x24BEE7E08](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCube::~UsdGeomCube(pxrInternal__aapl__pxrReserved__::UsdGeomCube *this)
{
  MEMORY[0x24BEE7E10](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::ValidateTopology()
{
  return MEMORY[0x24BEE7E18]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x24BEE7E20](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define()
{
  return MEMORY[0x24BEE7E28]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  MEMORY[0x24BEE7E30](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  return MEMORY[0x24BEE7E40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelRoot::Find()
{
  return MEMORY[0x24BEE7E48]();
}

void pxrInternal__aapl__pxrReserved__::UsdSkelRoot::~UsdSkelRoot(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  MEMORY[0x24BEE7E50](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtStreamOut()
{
  return MEMORY[0x24BEE7E58]();
}

{
  return MEMORY[0x24BEE7E60]();
}

{
  return MEMORY[0x24BEE7E68]();
}

{
  return MEMORY[0x24BEE7E70]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchNormPath()
{
  return MEMORY[0x24BEE7E78]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath()
{
  return MEMORY[0x24BEE7E80]();
}

{
  return MEMORY[0x24BEE7E88]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(pxrInternal__aapl__pxrReserved__::SdfAssetPath *this)
{
  return MEMORY[0x24BEE7E90](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference()
{
  return MEMORY[0x24BEE7EA0]();
}

void pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolderBase::~_PointerHolderBase(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolderBase *this)
{
  MEMORY[0x24BEE7EA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetenvBool()
{
  return MEMORY[0x24BEE7EB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfPathExists()
{
  return MEMORY[0x24BEE7EB8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringJoin()
{
  return MEMORY[0x24BEE7EC0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringTrim()
{
  return MEMORY[0x24BEE7EC8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, const char *a2)
{
  return MEMORY[0x24BEE7ED0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x24BEE7ED8](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  MEMORY[0x24BEE7EE0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *this)
{
  return MEMORY[0x24BEE7EE8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *this)
{
  return MEMORY[0x24BEE7EF0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::UsdSkelCache(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this)
{
  return MEMORY[0x24BEE7EF8](this);
}

void pxrInternal__aapl__pxrReserved__::Usd_PrimData::~Usd_PrimData(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  MEMORY[0x24BEE7F00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath()
{
  return MEMORY[0x24BEE7F08]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath()
{
  return MEMORY[0x24BEE7F10]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::end(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  return MEMORY[0x24BEE7F18](this);
}

{
  return MEMORY[0x24BEE8F28](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::begin(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  return MEMORY[0x24BEE7F20](this);
}

{
  return MEMORY[0x24BEE8F40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::erase()
{
  return MEMORY[0x24BEE7F28]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(pxrInternal__aapl__pxrReserved__::VtDictionary *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  return MEMORY[0x24BEE7F30](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::operator=()
{
  return MEMORY[0x24BEE7F38]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]()
{
  return MEMORY[0x24BEE7F40]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArGetResolver(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x24BEE7F48](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetTmpDir(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x24BEE7F50](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindAllFileFormatExtensions(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return MEMORY[0x24BEE7F58](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetBaseName()
{
  return MEMORY[0x24BEE7F68]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetPathName()
{
  return MEMORY[0x24BEE7F70]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringSplit()
{
  return MEMORY[0x24BEE7F78]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::UpdateTraceTrees(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return MEMORY[0x24BEE7F80](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return MEMORY[0x24BEE7F88](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget()
{
  return MEMORY[0x24BEE7F90]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this)
{
  return MEMORY[0x24BEE7F98](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  return MEMORY[0x24BEE7FA0](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCamera::~UsdGeomCamera(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  MEMORY[0x24BEE7FA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  return MEMORY[0x24BEE7FB0](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::~UsdGeomSphere(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  MEMORY[0x24BEE7FB8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets()
{
  return MEMORY[0x24BEE7FC0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return MEMORY[0x24BEE7FC8](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  MEMORY[0x24BEE7FE0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference()
{
  return MEMORY[0x24BEE7FF0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::SetReferences()
{
  return MEMORY[0x24BEE7FF8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::RemoveReference()
{
  return MEMORY[0x24BEE8008]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference()
{
  return MEMORY[0x24BEE8010]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase()
{
  return MEMORY[0x24BEE8018]();
}

{
  return MEMORY[0x24BEE8020]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
{
  return MEMORY[0x24BEE8028]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput()
{
  return MEMORY[0x24BEE8030]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes()
{
  return MEMORY[0x24BEE8038]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant()
{
  return MEMORY[0x24BEE8050]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection()
{
  return MEMORY[0x24BEE8058]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection(pxrInternal__aapl__pxrReserved__::UsdVariantSet *this)
{
  return MEMORY[0x24BEE8060](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_HashDetail::_IssueUnimplementedHashError(pxrInternal__aapl__pxrReserved__::Vt_HashDetail *this, const std::type_info *a2)
{
  return MEMORY[0x24BEE8068](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this, double a2, double a3)
{
  return MEMORY[0x24BEE8070](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetExtension()
{
  return MEMORY[0x24BEE8078]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringPrintf(pxrInternal__aapl__pxrReserved__ *this, const char *a2, ...)
{
  return MEMORY[0x24BEE8080](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::SetEnabled(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  return MEMORY[0x24BEE8088](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::Clear(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  return MEMORY[0x24BEE8090](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext()
{
  return MEMORY[0x24BEE8098]();
}

void pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext(pxrInternal__aapl__pxrReserved__::UsdEditContext *this)
{
  MEMORY[0x24BEE80A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  return MEMORY[0x24BEE80A8](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::~UsdGeomCapsule(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  MEMORY[0x24BEE80B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
{
  return MEMORY[0x24BEE80C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar()
{
  return MEMORY[0x24BEE80C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=()
{
  return MEMORY[0x24BEE80D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput()
{
  return MEMORY[0x24BEE80E0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput()
{
  return MEMORY[0x24BEE80E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput()
{
  return MEMORY[0x24BEE80F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x24BEE8100](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get()
{
  return MEMORY[0x24BEE8108]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define()
{
  return MEMORY[0x24BEE8110]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  MEMORY[0x24BEE8120](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSpecializes::AddSpecialize()
{
  return MEMORY[0x24BEE8130]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSpecializes::SetSpecializes()
{
  return MEMORY[0x24BEE8138]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSpecializes::ClearSpecializes(pxrInternal__aapl__pxrReserved__::UsdSpecializes *this)
{
  return MEMORY[0x24BEE8140](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::SetSelection()
{
  return MEMORY[0x24BEE8148]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::AddVariantSet()
{
  return MEMORY[0x24BEE8150]();
}

uint64_t pxrInternal__aapl__pxrReserved__::usd_initialize()
{
  return MEMORY[0x24BEE8158]();
}

void pxrInternal__aapl__pxrReserved__::TfBaseException::~TfBaseException(pxrInternal__aapl__pxrReserved__::TfBaseException *this)
{
  MEMORY[0x24BEE8160](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange()
{
  return MEMORY[0x24BEE8168]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AddDelegate()
{
  return MEMORY[0x24BEE8170]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::RemoveDelegate()
{
  return MEMORY[0x24BEE8178]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_GetErrorMarkBegin(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this, uint64_t a2, unint64_t *a3)
{
  return MEMORY[0x24BEE8180](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringReplace()
{
  return MEMORY[0x24BEE8188]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringToLower()
{
  return MEMORY[0x24BEE8190]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringToUpper()
{
  return MEMORY[0x24BEE8198]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  return MEMORY[0x24BEE81A0](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::~UsdGeomCylinder(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  MEMORY[0x24BEE81A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return MEMORY[0x24BEE81B0](this);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  MEMORY[0x24BEE81B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetDemangled(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  return MEMORY[0x24BEE81C0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::SetAllowedTokens()
{
  return MEMORY[0x24BEE81C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x24BEE81D0](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode::~Sdf_PrimPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode *this)
{
  MEMORY[0x24BEE81D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsRelativePath()
{
  return MEMORY[0x24BEE81E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Replace()
{
  return MEMORY[0x24BEE81F0]();
}

void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile(pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *this)
{
  MEMORY[0x24BEE81F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringCatPaths()
{
  return MEMORY[0x24BEE8200]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringContains()
{
  return MEMORY[0x24BEE8208]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringTokenize()
{
  return MEMORY[0x24BEE8210]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection()
{
  return MEMORY[0x24BEE8218]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply()
{
  return MEMORY[0x24BEE8220]();
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  MEMORY[0x24BEE8228](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *this)
{
  MEMORY[0x24BEE8230](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *this)
{
  return MEMORY[0x24BEE8238](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *this)
{
  MEMORY[0x24BEE8240](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::XformQuery()
{
  return MEMORY[0x24BEE8248]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  return MEMORY[0x24BEE8250](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  MEMORY[0x24BEE8258](this);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::~UsdLuxShapingAPI(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  MEMORY[0x24BEE8260](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  return MEMORY[0x24BEE8268](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define()
{
  return MEMORY[0x24BEE8270]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  MEMORY[0x24BEE8278](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  return MEMORY[0x24BEE8280](this);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  MEMORY[0x24BEE8288](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtStreamOutArray()
{
  return MEMORY[0x24BEE8290]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchMakeTmpSubdir()
{
  return MEMORY[0x24BEE8298]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringGetSuffix()
{
  return MEMORY[0x24BEE82A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::Invoke2(pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier *this, const void *a2)
{
  return MEMORY[0x24BEE82B0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomTokensType::UsdGeomTokensType(pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *this)
{
  return MEMORY[0x24BEE82C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform()
{
  return MEMORY[0x24BEE82C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::Clear(pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *this)
{
  return MEMORY[0x24BEE82D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::SetTime()
{
  return MEMORY[0x24BEE82D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache(pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *this)
{
  return MEMORY[0x24BEE82E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo()
{
  return MEMORY[0x24BEE82E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return MEMORY[0x24BEE82F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get()
{
  return MEMORY[0x24BEE8300]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Define()
{
  return MEMORY[0x24BEE8308]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  MEMORY[0x24BEE8310](this);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  MEMORY[0x24BEE8320](this);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  MEMORY[0x24BEE8328](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelTokensType::UsdSkelTokensType(pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *this)
{
  return MEMORY[0x24BEE8330](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin(pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin *this)
{
  return MEMORY[0x24BEE8338](this);
}

void pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin *this)
{
  MEMORY[0x24BEE8340](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode::~Sdf_MapperPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode *this)
{
  MEMORY[0x24BEE8350](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode::~Sdf_TargetPathNode(pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode *this)
{
  MEMORY[0x24BEE8358](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper()
{
  return MEMORY[0x24BEE8360]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  MEMORY[0x24BEE8368](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMediaTokensType::UsdMediaTokensType(pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *this)
{
  return MEMORY[0x24BEE8370](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeTokensType::UsdShadeTokensType(pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *this)
{
  return MEMORY[0x24BEE8378](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchMakeTmpFileName()
{
  return MEMORY[0x24BEE8380]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric()
{
  return MEMORY[0x24BEE8390]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames()
{
  return MEMORY[0x24BEE83A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  return MEMORY[0x24BEE83B8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue()
{
  return MEMORY[0x24BEE83C0]();
}

{
  return MEMORY[0x24BEE83C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *this)
{
  return MEMORY[0x24BEE83D0](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPartPathNode::operator delete(void *a1)
{
  MEMORY[0x24BEE83D8](a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PropPartPathNode::operator delete(void *a1)
{
  MEMORY[0x24BEE83E0](a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper()
{
  return MEMORY[0x24BEE83E8]();
}

{
  return MEMORY[0x24BEE83F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery()
{
  return MEMORY[0x24BEE83F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::UsdSkelSkinningQuery(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  return MEMORY[0x24BEE8400](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit()
{
  return MEMORY[0x24BEE8408]();
}

void pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit(pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *this)
{
  MEMORY[0x24BEE8410](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode::~Sdf_MapperArgPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode *this)
{
  MEMORY[0x24BEE8420](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier()
{
  return MEMORY[0x24BEE8428]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper()
{
  return MEMORY[0x24BEE8430]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat(pxrInternal__aapl__pxrReserved__ *this, const char *a2, ...)
{
  return MEMORY[0x24BEE8438](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis()
{
  return MEMORY[0x24BEE8440]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSetStageUpAxis()
{
  return MEMORY[0x24BEE8448]();
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::~UsdUINodeGraphNodeAPI(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  MEMORY[0x24BEE8450](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver()
{
  return MEMORY[0x24BEE8458]();
}

void pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode::~Sdf_ExpressionPathNode(pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode *this)
{
  MEMORY[0x24BEE8460](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init::New(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *this)
{
  return MEMORY[0x24BEE8468](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *this)
{
  MEMORY[0x24BEE8470](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource()
{
  return MEMORY[0x24BEE8478]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource()
{
  return MEMORY[0x24BEE8480]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  MEMORY[0x24BEE8488](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::UsdSkelBlendShapeQuery(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this, const pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a2)
{
  return MEMORY[0x24BEE8490](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::UsdStagePopulationMask()
{
  return MEMORY[0x24BEE8498]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath()
{
  return MEMORY[0x24BEE8548]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix()
{
  return MEMORY[0x24BEE8550]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringGetCommonPrefix()
{
  return MEMORY[0x24BEE8558]();
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType::AaplUsdPhysicsTokensType(pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *this)
{
  return MEMORY[0x24BEE8560](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode::~Sdf_PrimPropertyPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode *this)
{
  MEMORY[0x24BEE8568](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGetFallbackUpAxis(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x24BEE8570](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsModifyAssetPaths()
{
  return MEMORY[0x24BEE8578]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath()
{
  return MEMORY[0x24BEE8580]();
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverFiles()
{
  return MEMORY[0x24BEE8588]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::CreateSpec()
{
  return MEMORY[0x24BEE8590]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::DeleteSpec()
{
  return MEMORY[0x24BEE8598]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetTimeSample()
{
  return MEMORY[0x24BEE85A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetFieldDictValueByKey()
{
  return MEMORY[0x24BEE85A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::MoveSpec()
{
  return MEMORY[0x24BEE85B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PopChild()
{
  return MEMORY[0x24BEE85B8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetField()
{
  return MEMORY[0x24BEE85C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PushChild()
{
  return MEMORY[0x24BEE85C8]();
}

{
  return MEMORY[0x24BEE85D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SdfLayerStateDelegateBase(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this)
{
  return MEMORY[0x24BEE85D8](this);
}

void pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::~SdfLayerStateDelegateBase(pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *this)
{
  MEMORY[0x24BEE85E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x24BEE85E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::IsCollectionBindingRel()
{
  return MEMORY[0x24BEE85F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding()
{
  return MEMORY[0x24BEE8600]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterials()
{
  return MEMORY[0x24BEE8608]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  return MEMORY[0x24BEE8610](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength()
{
  return MEMORY[0x24BEE8620]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength()
{
  return MEMORY[0x24BEE8628]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Apply()
{
  return MEMORY[0x24BEE8630]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  MEMORY[0x24BEE8638](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x24BEE8640](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
  return MEMORY[0x24BEE8648](this);
}

void pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::~SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
  MEMORY[0x24BEE8650](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::~Sdf_PrimVariantSelectionNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *this)
{
  MEMORY[0x24BEE8658](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit()
{
  return MEMORY[0x24BEE8660]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSetStageMetersPerUnit()
{
  return MEMORY[0x24BEE8668]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewUsdzPackage()
{
  return MEMORY[0x24BEE8670]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType::SdfPathTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *this)
{
  return MEMORY[0x24BEE8678](this);
}

void pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType::~SdfPathTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *this)
{
  MEMORY[0x24BEE8680](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::AddRefIfNonzero()
{
  return MEMORY[0x24BEE8688]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked()
{
  return MEMORY[0x24BEE8690]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked()
{
  return MEMORY[0x24BEE8698]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsComputeAllDependencies()
{
  return MEMORY[0x24BEE86A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner()
{
  return MEMORY[0x24BEE86A8]();
}

void pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode::~Sdf_RelationalAttributePathNode(pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode *this)
{
  MEMORY[0x24BEE86B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  return MEMORY[0x24BEE86B8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType::SdrPropertyTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *this)
{
  return MEMORY[0x24BEE86C0](this);
}

void pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType::~SdrPropertyTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *this)
{
  MEMORY[0x24BEE86C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage()
{
  return MEMORY[0x24BEE86D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType::UsdGeomXformOpTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *this)
{
  return MEMORY[0x24BEE86E0](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType::~UsdGeomXformOpTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *this)
{
  MEMORY[0x24BEE86E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError()
{
  return MEMORY[0x24BEE8700]();
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::~UsdPhysicsPreliminary_PhysicsColliderAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  MEMORY[0x24BEE8710](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfEnum::GetName()
{
  return MEMORY[0x24BEE8738]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfEnum::_AddName()
{
  return MEMORY[0x24BEE8740]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::FindByName()
{
  return MEMORY[0x24BEE8748]();
}

void pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *this)
{
  MEMORY[0x24BEE8750](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2)
{
  return MEMORY[0x24BEE8758](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetUnknownType(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return MEMORY[0x24BEE8760](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2)
{
  return MEMORY[0x24BEE8768](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::Declare()
{
  return MEMORY[0x24BEE8770]();
}

{
  return MEMORY[0x24BEE8778]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::TfType(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return MEMORY[0x24BEE8780](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace()
{
  return MEMORY[0x24BEE8788]();
}

{
  return MEMORY[0x24BEE8790]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE8798](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier()
{
  return MEMORY[0x24BEE87A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString()
{
  return MEMORY[0x24BEE87A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::_LessThanInternal(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return MEMORY[0x24BEE87B0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::RemoveAncestorPaths()
{
  return MEMORY[0x24BEE87B8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE87C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::RemoveDescendentPaths()
{
  return MEMORY[0x24BEE87C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetConciseRelativePaths()
{
  return MEMORY[0x24BEE87D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens()
{
  return MEMORY[0x24BEE87D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier()
{
  return MEMORY[0x24BEE87E0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE87E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath()
{
  return MEMORY[0x24BEE87F0]();
}

void pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  MEMORY[0x24BEE8800](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode()
{
  return MEMORY[0x24BEE8808]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl()
{
  return MEMORY[0x24BEE8810]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg(pxrInternal__aapl__pxrReserved__::TfDebug::Helper *this, const char *a2, ...)
{
  return MEMORY[0x24BEE8818](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsDir()
{
  return MEMORY[0x24BEE8820]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(pxrInternal__aapl__pxrReserved__::TfToken *this)
{
  return MEMORY[0x24BEE8828](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::TfToken(pxrInternal__aapl__pxrReserved__::TfToken *this, const char *a2)
{
  return MEMORY[0x24BEE8830](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::TfToken()
{
  return MEMORY[0x24BEE8838]();
}

{
  return MEMORY[0x24BEE8840]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE8848](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsPathInPrototype(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8850](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x24BEE8868](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, const std::type_info *a3)
{
  return MEMORY[0x24BEE8870](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE8878](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen()
{
  return MEMORY[0x24BEE8880]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetComment()
{
  return MEMORY[0x24BEE8888]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8890](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier()
{
  return MEMORY[0x24BEE8898]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetDefaultPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE88A0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  return MEMORY[0x24BEE88A8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous()
{
  return MEMORY[0x24BEE88B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetLoadedLayers(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE88B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetSessionOwner()
{
  return MEMORY[0x24BEE88C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent()
{
  return MEMORY[0x24BEE88D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearDefaultPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE88D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE88E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateIdentifier()
{
  return MEMORY[0x24BEE88E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ImportFromString()
{
  return MEMORY[0x24BEE88F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetDocumentation()
{
  return MEMORY[0x24BEE88F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  return MEMORY[0x24BEE8900](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetStateDelegate()
{
  return MEMORY[0x24BEE8908]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerPaths()
{
  return MEMORY[0x24BEE8910]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearSessionOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE8918](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8920](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetFramePrecision(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE8928](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE8938](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::InsertSubLayerPath()
{
  return MEMORY[0x24BEE8940]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  return MEMORY[0x24BEE8948](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  return MEMORY[0x24BEE8950](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearFramePrecision(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE8958](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::FindRelativeToLayer()
{
  return MEMORY[0x24BEE8960]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE8968](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE8970](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetHasOwnedSubLayers(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE8978](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  return MEMORY[0x24BEE8980](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  return MEMORY[0x24BEE8988](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE8990](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE8998](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE89A0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ClearColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE89A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::RemovePropertyIfHasOnlyRequiredFields()
{
  return MEMORY[0x24BEE89B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Apply(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *a2)
{
  return MEMORY[0x24BEE89B8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE89C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Reload(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE89C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x24BEE89D0](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetOwner()
{
  return MEMORY[0x24BEE89D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew()
{
  return MEMORY[0x24BEE89E0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap()
{
  return MEMORY[0x24BEE89E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle()
{
  return MEMORY[0x24BEE89F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=()
{
  return MEMORY[0x24BEE89F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap()
{
  return MEMORY[0x24BEE8A00]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle()
{
  return MEMORY[0x24BEE8A08]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=()
{
  return MEMORY[0x24BEE8A10]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetenv()
{
  return MEMORY[0x24BEE8A18]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsFile()
{
  return MEMORY[0x24BEE8A20]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery()
{
  return MEMORY[0x24BEE8A28]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_BeginDelivery()
{
  return MEMORY[0x24BEE8A30]();
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *this)
{
  MEMORY[0x24BEE8A38](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::Revoke()
{
  return MEMORY[0x24BEE8A40]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_Register(pxrInternal__aapl__pxrReserved__::TfNotice *this, pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *a2)
{
  return MEMORY[0x24BEE8A48](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x24BEE8A50](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked()
{
  return MEMORY[0x24BEE8A58]();
}

{
  return MEMORY[0x24BEE8A60]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::RemovePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8A68](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::TraverseAll(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE8A70](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8A78](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>()
{
  return off_24FDDFBF0();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::LoadAndUnload()
{
  return MEMORY[0x24BEE8A80]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2)
{
  return MEMORY[0x24BEE8A88](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory()
{
  return MEMORY[0x24BEE8A90]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  return MEMORY[0x24BEE8A98](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetEndTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  return MEMORY[0x24BEE8AA0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateClassPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8AA8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile()
{
  return MEMORY[0x24BEE8AB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::ClearDefaultPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE8AB8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetStartTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  return MEMORY[0x24BEE8AC0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>()
{
  return off_24FDDFC40();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Open()
{
  return MEMORY[0x24BEE8AC8]();
}

{
  return MEMORY[0x24BEE8AD0]();
}

{
  return MEMORY[0x24BEE8AD8]();
}

{
  return MEMORY[0x24BEE8AE0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Save(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE8AE8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Reload(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE8AF0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Traverse(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE8B00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(pxrInternal__aapl__pxrReserved__::pxr_half::half *this)
{
  return MEMORY[0x24BEE8B18](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::operator<<()
{
  return MEMORY[0x24BEE8B28]();
}

void pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex(pxrInternal__aapl__pxrReserved__::ArchRegex *this)
{
  MEMORY[0x24BEE8B30](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAddedItems()
{
  return off_24FDDFCA8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems()
{
  return off_24FDDFCB0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetOrderedItems()
{
  return off_24FDDFCB8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems()
{
  return off_24FDDFCC0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems()
{
  return off_24FDDFCC8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems()
{
  return off_24FDDFCD0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ClearAndMakeExplicit()
{
  return off_24FDDFCD8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp()
{
  return off_24FDDFCE0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAddedItems()
{
  return off_24FDDFCE8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems()
{
  return off_24FDDFCF0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetOrderedItems()
{
  return off_24FDDFCF8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems()
{
  return off_24FDDFD00();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems()
{
  return off_24FDDFD08();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems()
{
  return off_24FDDFD10();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ClearAndMakeExplicit()
{
  return off_24FDDFD18();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp()
{
  return off_24FDDFD20();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAddedItems()
{
  return off_24FDDFD28();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems()
{
  return off_24FDDFD30();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetOrderedItems()
{
  return off_24FDDFD38();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems()
{
  return off_24FDDFD40();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems()
{
  return off_24FDDFD48();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems()
{
  return off_24FDDFD50();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ClearAndMakeExplicit()
{
  return off_24FDDFD58();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp()
{
  return off_24FDDFD60();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAddedItems()
{
  return off_24FDDFD68();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::CreateExplicit()
{
  return off_24FDDFD70();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems()
{
  return off_24FDDFD78();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetOrderedItems()
{
  return off_24FDDFD80();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems()
{
  return off_24FDDFD88();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems()
{
  return off_24FDDFD90();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems()
{
  return off_24FDDFD98();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ClearAndMakeExplicit()
{
  return off_24FDDFDA0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp()
{
  return off_24FDDFDA8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAddedItems()
{
  return off_24FDDFDB0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems()
{
  return off_24FDDFDB8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems()
{
  return off_24FDDFDC0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems()
{
  return off_24FDDFDC8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems()
{
  return off_24FDDFDD0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems()
{
  return off_24FDDFDD8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ClearAndMakeExplicit()
{
  return off_24FDDFDE0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp()
{
  return off_24FDDFDE8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems()
{
  return off_24FDDFDF0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems()
{
  return off_24FDDFDF8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems()
{
  return off_24FDDFE00();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems()
{
  return off_24FDDFE08();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems()
{
  return off_24FDDFE10();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems()
{
  return off_24FDDFE18();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ClearAndMakeExplicit()
{
  return off_24FDDFE20();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp()
{
  return off_24FDDFE28();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAddedItems()
{
  return off_24FDDFE30();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems()
{
  return off_24FDDFE38();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetOrderedItems()
{
  return off_24FDDFE40();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems()
{
  return off_24FDDFE48();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems()
{
  return off_24FDDFE50();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems()
{
  return off_24FDDFE58();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ClearAndMakeExplicit()
{
  return off_24FDDFE60();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp()
{
  return off_24FDDFE68();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAddedItems()
{
  return off_24FDDFE70();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems()
{
  return off_24FDDFE78();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetOrderedItems()
{
  return off_24FDDFE80();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems()
{
  return off_24FDDFE88();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems()
{
  return off_24FDDFE90();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems()
{
  return off_24FDDFE98();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ClearAndMakeExplicit()
{
  return off_24FDDFEA0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp()
{
  return off_24FDDFEA8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAddedItems()
{
  return off_24FDDFEB0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems()
{
  return off_24FDDFEB8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetOrderedItems()
{
  return off_24FDDFEC0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems()
{
  return off_24FDDFEC8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems()
{
  return off_24FDDFED0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems()
{
  return off_24FDDFED8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ClearAndMakeExplicit()
{
  return off_24FDDFEE0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp()
{
  return off_24FDDFEE8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAddedItems()
{
  return off_24FDDFEF0();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems()
{
  return off_24FDDFEF8();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetOrderedItems()
{
  return off_24FDDFF00();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems()
{
  return off_24FDDFF08();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems()
{
  return off_24FDDFF10();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems()
{
  return off_24FDDFF18();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ClearAndMakeExplicit()
{
  return off_24FDDFF20();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp()
{
  return off_24FDDFF28();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator==()
{
  return MEMORY[0x24BEE8B40]();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<()
{
  return MEMORY[0x24BEE8B48]();
}

{
  return MEMORY[0x24BEE8B50]();
}

{
  return MEMORY[0x24BEE8B58]();
}

{
  return MEMORY[0x24BEE8B60]();
}

{
  return MEMORY[0x24BEE8B68]();
}

{
  return MEMORY[0x24BEE8B70]();
}

{
  return MEMORY[0x24BEE8B78]();
}

{
  return MEMORY[0x24BEE8B80]();
}

{
  return MEMORY[0x24BEE8B88]();
}

{
  return MEMORY[0x24BEE8B90]();
}

{
  return MEMORY[0x24BEE8B98]();
}

{
  return MEMORY[0x24BEE8BA0]();
}

{
  return MEMORY[0x24BEE8BA8]();
}

{
  return MEMORY[0x24BEE8BB0]();
}

{
  return MEMORY[0x24BEE8BB8]();
}

{
  return MEMORY[0x24BEE8BC0]();
}

{
  return MEMORY[0x24BEE8BC8]();
}

{
  return MEMORY[0x24BEE8BD0]();
}

{
  return MEMORY[0x24BEE8BD8]();
}

{
  return MEMORY[0x24BEE8BE0]();
}

{
  return MEMORY[0x24BEE8BE8]();
}

{
  return MEMORY[0x24BEE8BF0]();
}

{
  return MEMORY[0x24BEE8BF8]();
}

{
  return MEMORY[0x24BEE8C00]();
}

{
  return MEMORY[0x24BEE8C08]();
}

{
  return MEMORY[0x24BEE8C10]();
}

{
  return MEMORY[0x24BEE8C18]();
}

{
  return MEMORY[0x24BEE8C20]();
}

{
  return MEMORY[0x24BEE8C28]();
}

{
  return MEMORY[0x24BEE8C30]();
}

{
  return MEMORY[0x24BEE8C38]();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPayload>()
{
  return off_24FDE0030();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfReference>()
{
  return off_24FDE0038();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>()
{
  return off_24FDE0040();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPath>()
{
  return off_24FDE0048();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::TfToken>()
{
  return off_24FDE0050();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<<std::string>()
{
  return off_24FDE0058();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<<int>()
{
  return off_24FDE0060();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<<unsigned int>()
{
  return off_24FDE0068();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<<long long>()
{
  return off_24FDE0070();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<<unsigned long long>()
{
  return off_24FDE0078();
}

uint64_t tbb::internal::thread_get_id_v3(tbb::internal *this)
{
  return MEMORY[0x24BEE8C40](this);
}

uint64_t tbb::internal::allocate_via_handler_v3(tbb::internal *this)
{
  return MEMORY[0x24BEE8C48](this);
}

uint64_t tbb::internal::deallocate_via_handler_v3(tbb::internal *this, void *a2)
{
  return MEMORY[0x24BEE8C50](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension()
{
  return MEMORY[0x24BEE8C58]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier()
{
  return MEMORY[0x24BEE8C60]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset()
{
  return MEMORY[0x24BEE8C68]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset()
{
  return MEMORY[0x24BEE8C70]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==()
{
  return MEMORY[0x24BEE8C78]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator==()
{
  return MEMORY[0x24BEE8C80]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==()
{
  return MEMORY[0x24BEE8C88]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator==()
{
  return MEMORY[0x24BEE8C90]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, double *a2, double a3)
{
  return MEMORY[0x24BEE8C98](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this)
{
  return MEMORY[0x24BEE8CA0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==()
{
  return MEMORY[0x24BEE8CA8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==()
{
  return MEMORY[0x24BEE8CB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPayload::operator==()
{
  return MEMORY[0x24BEE8CB8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakBase::GetUniqueIdentifier(pxrInternal__aapl__pxrReserved__::TfWeakBase *this)
{
  return MEMORY[0x24BEE8CC0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetTypeName(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this)
{
  return MEMORY[0x24BEE8CC8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this)
{
  return MEMORY[0x24BEE8CD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this)
{
  return MEMORY[0x24BEE8CD8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributeAtPath(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8CE0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this)
{
  return MEMORY[0x24BEE8CE8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl(pxrInternal__aapl__pxrReserved__::TfErrorMark *this, pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *a2)
{
  return MEMORY[0x24BEE8CF0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  return MEMORY[0x24BEE8CF8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  return MEMORY[0x24BEE8D00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  return MEMORY[0x24BEE8D08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCube::GetSizeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCube *this)
{
  return MEMORY[0x24BEE8D10](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceCount()
{
  return MEMORY[0x24BEE8D18]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x24BEE8D20](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x24BEE8D28](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseLengthsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x24BEE8D30](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x24BEE8D38](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerSharpnessesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x24BEE8D40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseSharpnessesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x24BEE8D48](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x24BEE8D50](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSubdivisionSchemeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x24BEE8D58](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexCountsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x24BEE8D60](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x24BEE8D68](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthored(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  return MEMORY[0x24BEE8D78](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  return MEMORY[0x24BEE8D80](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  return MEMORY[0x24BEE8D88](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthoredAt(pxrInternal__aapl__pxrReserved__::UsdProperty *this, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2)
{
  return MEMORY[0x24BEE8D90](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::SetDisplayGroup()
{
  return MEMORY[0x24BEE8D98]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack()
{
  return MEMORY[0x24BEE8DA0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  return MEMORY[0x24BEE8DA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdTimeCode::_IssueGetValueOnDefaultError(pxrInternal__aapl__pxrReserved__::UsdTimeCode *this)
{
  return MEMORY[0x24BEE8DB0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<()
{
  return MEMORY[0x24BEE8DB8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfReference::operator==()
{
  return MEMORY[0x24BEE8DC0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfReference::operator<()
{
  return MEMORY[0x24BEE8DC8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  return MEMORY[0x24BEE8DD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return MEMORY[0x24BEE8DD8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetUniqueIdentifier(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return MEMORY[0x24BEE8DE0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return MEMORY[0x24BEE8DE8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator BOOL()
{
  return MEMORY[0x24BEE8DF0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator==()
{
  return MEMORY[0x24BEE8DF8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetRoleName(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection()
{
  return MEMORY[0x24BEE8E10]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E18](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E20](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::SetColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE8E28](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections()
{
  return MEMORY[0x24BEE8E30]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples()
{
  return MEMORY[0x24BEE8E38]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetVariability(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections()
{
  return MEMORY[0x24BEE8E48]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E50](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E58](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E60](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::RemoveConnection(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8E68](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetNumTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E70](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E78](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
{
  return MEMORY[0x24BEE8E88]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Set()
{
  return MEMORY[0x24BEE8E90]();
}

{
  return MEMORY[0x24BEE8E98]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>()
{
  return off_24FDE02D0();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>()
{
  return off_24FDE02D8();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfQuatf>()
{
  return off_24FDE02E0();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>()
{
  return off_24FDE02E8();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3d>()
{
  return off_24FDE02F0();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>()
{
  return off_24FDE02F8();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3h>()
{
  return off_24FDE0300();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>()
{
  return off_24FDE0308();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>()
{
  return off_24FDE0310();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>()
{
  return off_24FDE0318();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>()
{
  return off_24FDE0320();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>()
{
  return off_24FDE0328();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>()
{
  return off_24FDE0330();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>()
{
  return off_24FDE0338();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>()
{
  return off_24FDE0340();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>()
{
  return off_24FDE0348();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>()
{
  return off_24FDE0350();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>()
{
  return off_24FDE0358();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>()
{
  return off_24FDE0360();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>()
{
  return off_24FDE0368();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3d>()
{
  return off_24FDE0370();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>()
{
  return off_24FDE0378();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<double>()
{
  return off_24FDE0380();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>()
{
  return off_24FDE0388();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Block(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8EA0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8EA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8EB0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetOrientationAttr(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x24BEE8EB8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorAttr(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x24BEE8EC0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x24BEE8EC8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayOpacityPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x24BEE8ED0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetAnimQuery(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  return MEMORY[0x24BEE8ED8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkelQuery(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this, const pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *a2)
{
  return MEMORY[0x24BEE8EE0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetSkinningQuery(pxrInternal__aapl__pxrReserved__::UsdSkelCache *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  return MEMORY[0x24BEE8EE8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::ComputeSkelBindings()
{
  return MEMORY[0x24BEE8EF0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelCache::Populate()
{
  return MEMORY[0x24BEE8EF8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrototype(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x24BEE8F00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSpecifier(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x24BEE8F08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8F10](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x24BEE8F18](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath()
{
  return MEMORY[0x24BEE8F20]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::find()
{
  return MEMORY[0x24BEE8F30]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::size(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  return MEMORY[0x24BEE8F38](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::empty(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  return MEMORY[0x24BEE8F48](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, const char *a2)
{
  return MEMORY[0x24BEE8F50](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetMetadataFields()
{
  return MEMORY[0x24BEE8F60]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE8F80](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderOutput(pxrInternal__aapl__pxrReserved__::SdrShaderNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE8F88](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetCounters(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return MEMORY[0x24BEE8F90](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPrimSpecForScenePath(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8FA0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPropertySpecForScenePath(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8FA8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::operator==()
{
  return MEMORY[0x24BEE8FB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetCamera(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this, const pxrInternal__aapl__pxrReserved__::UsdTimeCode *a2)
{
  return MEMORY[0x24BEE8FB8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  return MEMORY[0x24BEE8FC0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return MEMORY[0x24BEE8FC8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  return MEMORY[0x24BEE8FE0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  return MEMORY[0x24BEE8FE8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE8FF0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9000](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2)
{
  return MEMORY[0x24BEE9008](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetDocumentation()
{
  return MEMORY[0x24BEE9010]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetConnectedSource()
{
  return MEMORY[0x24BEE9018]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::HasConnectedSource(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  return MEMORY[0x24BEE9020](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetConnectedSources()
{
  return MEMORY[0x24BEE9028]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetRawConnectedSourcePaths()
{
  return MEMORY[0x24BEE9030]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetValueProducingAttributes(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  return MEMORY[0x24BEE9038](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get()
{
  return MEMORY[0x24BEE9040]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::Set()
{
  return MEMORY[0x24BEE9048]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantNames(pxrInternal__aapl__pxrReserved__::UsdVariantSet *this)
{
  return MEMORY[0x24BEE9050](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::HasAuthoredVariant()
{
  return MEMORY[0x24BEE9058]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantSelection(pxrInternal__aapl__pxrReserved__::UsdVariantSet *this)
{
  return MEMORY[0x24BEE9060](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditTarget()
{
  return MEMORY[0x24BEE9068]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext()
{
  return MEMORY[0x24BEE9070]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::HasAuthoredVariantSelection()
{
  return MEMORY[0x24BEE9078]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this)
{
  return MEMORY[0x24BEE9080](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==()
{
  return MEMORY[0x24BEE9088]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  return MEMORY[0x24BEE9090](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  return MEMORY[0x24BEE9098](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  return MEMORY[0x24BEE90A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices()
{
  return MEMORY[0x24BEE90A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  return MEMORY[0x24BEE90B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  return MEMORY[0x24BEE90C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this)
{
  return MEMORY[0x24BEE90C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  return MEMORY[0x24BEE90D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  return MEMORY[0x24BEE90D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetRenderType(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE90E0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE90F0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetConnectedSource()
{
  return MEMORY[0x24BEE90F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::HasConnectedSource(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  return MEMORY[0x24BEE9100](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetRawConnectedSourcePaths()
{
  return MEMORY[0x24BEE9108]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetValueProducingAttributes(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  return MEMORY[0x24BEE9110](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x24BEE9118](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9120](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x24BEE9128](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x24BEE9130](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9138](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x24BEE9140](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x24BEE9148](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9150](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSet()
{
  return MEMORY[0x24BEE9158]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::HasVariantSet()
{
  return MEMORY[0x24BEE9160]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSelection()
{
  return MEMORY[0x24BEE9168]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetAllVariantSelections(pxrInternal__aapl__pxrReserved__::UsdVariantSets *this)
{
  return MEMORY[0x24BEE9170](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetNames(pxrInternal__aapl__pxrReserved__::UsdVariantSets *this)
{
  return MEMORY[0x24BEE9178](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDefaultValue(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this)
{
  return MEMORY[0x24BEE9198](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  return MEMORY[0x24BEE91A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  return MEMORY[0x24BEE91A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  return MEMORY[0x24BEE91B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition(pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *this)
{
  return MEMORY[0x24BEE91B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets()
{
  return MEMORY[0x24BEE91C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets()
{
  return MEMORY[0x24BEE91C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets(pxrInternal__aapl__pxrReserved__::UsdRelationship *this)
{
  return MEMORY[0x24BEE91D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::HasAuthoredTargets(pxrInternal__aapl__pxrReserved__::UsdRelationship *this)
{
  return MEMORY[0x24BEE91D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget()
{
  return MEMORY[0x24BEE91E0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return MEMORY[0x24BEE91E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return MEMORY[0x24BEE91F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return MEMORY[0x24BEE91F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::HasColorSpace(pxrInternal__aapl__pxrReserved__::SdfAttributeSpec *this)
{
  return MEMORY[0x24BEE9200](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x24BEE9208](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x24BEE9210](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x24BEE9218](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetCPPTypeName(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x24BEE9220](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetHash(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x24BEE9228](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x24BEE9230](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x24BEE9238](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsScalar(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x24BEE9240](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x24BEE9248](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()
{
  return MEMORY[0x24BEE9250]();
}

{
  return MEMORY[0x24BEE9258]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IncludePath(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9260](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExcludesRel(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  return MEMORY[0x24BEE9268](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  return MEMORY[0x24BEE9270](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  return MEMORY[0x24BEE9278](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::CreateExtentAttr(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x24BEE9280](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetPurposeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *this)
{
  return MEMORY[0x24BEE9288](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomImageable::ComputeVisibility(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *this, const pxrInternal__aapl__pxrReserved__::UsdTimeCode *a2)
{
  return MEMORY[0x24BEE9290](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetTimeSamples()
{
  return MEMORY[0x24BEE92A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation()
{
  return MEMORY[0x24BEE92A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTranslateOp()
{
  return MEMORY[0x24BEE92B8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples()
{
  return MEMORY[0x24BEE92C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this, BOOL *a2)
{
  return MEMORY[0x24BEE92C8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation()
{
  return MEMORY[0x24BEE92D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  return MEMORY[0x24BEE92D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingIesFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *this)
{
  return MEMORY[0x24BEE92E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  return MEMORY[0x24BEE92E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE92F0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateVolumeOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE92F8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9300](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource()
{
  return MEMORY[0x24BEE9308]();
}

{
  return MEMORY[0x24BEE9310]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateDisplacementOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9318](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointOrder(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this)
{
  return MEMORY[0x24BEE9320](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeOrder(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this)
{
  return MEMORY[0x24BEE9328](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeBlendShapeWeights()
{
  return MEMORY[0x24BEE9330]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetJointTransformTimeSamples()
{
  return MEMORY[0x24BEE9338]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeWeightTimeSamples()
{
  return MEMORY[0x24BEE9340]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::JointTransformsMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this)
{
  return MEMORY[0x24BEE9348](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::BlendShapeWeightsMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *this)
{
  return MEMORY[0x24BEE9350](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::ComputeJointLocalTransformComponents()
{
  return MEMORY[0x24BEE9358]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return MEMORY[0x24BEE9360](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  return MEMORY[0x24BEE9368](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  return MEMORY[0x24BEE9370](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreatePointsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x24BEE9378](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  return MEMORY[0x24BEE9388](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::ListMetadataFields(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this)
{
  return MEMORY[0x24BEE9390](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return MEMORY[0x24BEE93A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateInput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3)
{
  return MEMORY[0x24BEE93A8](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3)
{
  return MEMORY[0x24BEE93B0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return MEMORY[0x24BEE93B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE93C0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return MEMORY[0x24BEE93C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE93D0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsIdentity(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return MEMORY[0x24BEE93D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::_IsOrdered(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return MEMORY[0x24BEE93E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper::IsNull(pxrInternal__aapl__pxrReserved__::UsdSkelAnimMapper *this)
{
  return MEMORY[0x24BEE93E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x24BEE93F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSource(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  return MEMORY[0x24BEE93F8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x24BEE9400](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x24BEE9408](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x24BEE9410](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x24BEE9418](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x24BEE9420](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetInbetweens(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  return MEMORY[0x24BEE9428](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  return MEMORY[0x24BEE9430](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetPointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  return MEMORY[0x24BEE9438](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9440](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9448](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  return MEMORY[0x24BEE9450](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  return MEMORY[0x24BEE9458](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9460](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPossiblyInheritedPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9468](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  return MEMORY[0x24BEE9470](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, const char *a2, ...)
{
  return MEMORY[0x24BEE9478](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, const char *a2, ...)
{
  return MEMORY[0x24BEE9480](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError()
{
  return MEMORY[0x24BEE9488]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==()
{
  return MEMORY[0x24BEE9490]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl()
{
  return MEMORY[0x24BEE9498]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetAnimQuery(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  return MEMORY[0x24BEE94A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetJointOrder(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  return MEMORY[0x24BEE94A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery::GetPrim(pxrInternal__aapl__pxrReserved__::UsdSkelSkeletonQuery *this)
{
  return MEMORY[0x24BEE94B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::HasJointInfluences(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  return MEMORY[0x24BEE94B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::GetGeomBindTransform()
{
  return MEMORY[0x24BEE94C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreatePosAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x24BEE94C8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateDisplayColorAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x24BEE94D0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3)
{
  return MEMORY[0x24BEE94D8](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3)
{
  return MEMORY[0x24BEE94E0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE94E8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  return MEMORY[0x24BEE94F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE94F8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetBlendShape(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this)
{
  return MEMORY[0x24BEE9500](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::GetUnion(pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9508](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::operator()()
{
  return MEMORY[0x24BEE9510]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator!()
{
  return MEMORY[0x24BEE9518]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator!()
{
  return MEMORY[0x24BEE9520]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9528](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *this)
{
  return MEMORY[0x24BEE9530](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9538](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindDirectBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9540](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial()
{
  return MEMORY[0x24BEE9548]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdRelationship *a3)
{
  return MEMORY[0x24BEE9550](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x24BEE9558](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindCollectionBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x24BEE9560](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRels(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9568](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *a2, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, const pxrInternal__aapl__pxrReserved__::TfToken *a6)
{
  return MEMORY[0x24BEE9570](this, a2, a3, a4, a5, a6);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  return MEMORY[0x24BEE9578](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::GetPreliminaryPhysicsColliderConvexShapeRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  return MEMORY[0x24BEE9580](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::SetFactory()
{
  return MEMORY[0x24BEE9588]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return MEMORY[0x24BEE9590](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2)
{
  return MEMORY[0x24BEE9598](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2, void *(*a3)(void *, BOOL))
{
  return MEMORY[0x24BEE95A0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::IsA()
{
  return MEMORY[0x24BEE95A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrNode::GetInputNames(pxrInternal__aapl__pxrReserved__::NdrNode *this)
{
  return MEMORY[0x24BEE95C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::NdrNode::GetOutputNames(pxrInternal__aapl__pxrReserved__::NdrNode *this)
{
  return MEMORY[0x24BEE95C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE95D0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE95D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE95E0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE95E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE95F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE95F8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9600](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9608](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9610](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9618](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9620](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9628](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9630](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return MEMORY[0x24BEE9638](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9640](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9648](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9650](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9658](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9660](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9668](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9678](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9680](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetElementString(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9688](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9690](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9698](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE96A0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE96A8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE96B0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ContainsTargetPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE96B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE96C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE96C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::RemoveCommonSuffix(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE96D0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementString()
{
  return MEMORY[0x24BEE96D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE96E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE96E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection()
{
  return MEMORY[0x24BEE96F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE96F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsNamespacedPropertyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9700](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9708](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9710](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9718](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9720](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9728](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9730](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively()
{
  return MEMORY[0x24BEE9738]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9740](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimOrPrimVariantSelectionPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9748](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetName(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9750](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetText(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9758](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetString(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9768](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9770](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  return MEMORY[0x24BEE9788](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  return MEMORY[0x24BEE9790](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  return MEMORY[0x24BEE9798](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::operator==()
{
  return MEMORY[0x24BEE97A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::operator==()
{
  return MEMORY[0x24BEE97A8]();
}

{
  return MEMORY[0x24BEE97B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE97B8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE97C0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE97C8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetInstances(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE97D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimStack(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE97D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE97E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE97E8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE97F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE97F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9800](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties()
{
  return MEMORY[0x24BEE9808]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9810](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet()
{
  return MEMORY[0x24BEE9818]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetNextSibling(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9820](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9828](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9830](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasVariantSets(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9838](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute()
{
  return MEMORY[0x24BEE9840]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9848](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9850](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9858](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenNames(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9860](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyNames()
{
  return MEMORY[0x24BEE9868]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyOrder(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9870](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9878](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9880](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9888](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributeAtPath(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9890](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenReorder(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9898](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAllChildrenNames(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE98A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE98A8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE98B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationshipAtPath(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE98C0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredReferences(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE98C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertyNames()
{
  return MEMORY[0x24BEE98D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace()
{
  return MEMORY[0x24BEE98D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return MEMORY[0x24BEE98E0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()
{
  return MEMORY[0x24BEE98E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return MEMORY[0x24BEE98F8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9900](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9908](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2)
{
  return MEMORY[0x24BEE9910](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9918](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_EqualityImpl(pxrInternal__aapl__pxrReserved__::VtValue *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x24BEE9920](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9928](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetHash(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9938](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetType(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9940](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_FailGet()
{
  return MEMORY[0x24BEE9948]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9950](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GetProjection(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return MEMORY[0x24BEE9958](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GetFieldOfView()
{
  return MEMORY[0x24BEE9960]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GetClippingRange(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return MEMORY[0x24BEE9968](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetComment(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9970](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9978](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymous(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9980](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetAssetName(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9988](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9990](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString()
{
  return MEMORY[0x24BEE9998]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetDisplayName(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSessionOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasSessionOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetDocumentation(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileExtension(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetStateDelegate(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetFramePrecision(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A10](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasFramePrecision(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A18](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A20](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A28](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A38](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ComputeAbsolutePath()
{
  return MEMORY[0x24BEE9A48]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumSubLayerPaths(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A50](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetHasOwnedSubLayers(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A58](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A60](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A68](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A70](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A78](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A80](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A88](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Save(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A90](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Export()
{
  return MEMORY[0x24BEE9A98]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::IsEmpty(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9AA0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CanApply()
{
  return MEMORY[0x24BEE9AA8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x24BEE9AB0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9AB8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9AC0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()
{
  return MEMORY[0x24BEE9AC8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()
{
  return MEMORY[0x24BEE9AD0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==()
{
  return MEMORY[0x24BEE9AD8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr()
{
  return MEMORY[0x24BEE9AE0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL()
{
  return MEMORY[0x24BEE9AE8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x24BEE9AF0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9AF8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x24BEE9B00](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>()
{
  return off_24FDE0F28();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B10](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9B18](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetPrototypes(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B20](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B28](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B30](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetDefaultPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B38](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasDefaultPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B48](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9B50](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B58](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B60](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetAttributeAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9B68](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B70](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetFramesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  return MEMORY[0x24BEE9B78](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9B80](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x24BEE9B88](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetColorConfiguration(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B98](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9BA0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetColorConfiguration(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  return MEMORY[0x24BEE9BA8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  return MEMORY[0x24BEE9BB0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetColorManagementSystem(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9BB8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9BC0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetColorManagementSystem(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9BC8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::ResolveIdentifierToEditTarget()
{
  return MEMORY[0x24BEE9BD0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata()
{
  return MEMORY[0x24BEE9BD8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Export()
{
  return MEMORY[0x24BEE9BE0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9BE8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==()
{
  return off_24FDE1008();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==()
{
  return off_24FDE1010();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==()
{
  return off_24FDE1018();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==()
{
  return off_24FDE1020();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==()
{
  return off_24FDE1028();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==()
{
  return off_24FDE1030();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==()
{
  return off_24FDE1038();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==()
{
  return off_24FDE1040();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==()
{
  return off_24FDE1048();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==()
{
  return off_24FDE1050();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9BF0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResyncedPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  return MEMORY[0x24BEE9BF8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::HasChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9C00](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedInfoOnlyPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *this)
{
  return MEMORY[0x24BEE9C08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x24BEE9C10](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9C18](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9C28](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomData(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x24BEE9C30](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x24BEE9C38](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetDisplayName()
{
  return MEMORY[0x24BEE9C40]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomDataKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9C48](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetDocumentation()
{
  return MEMORY[0x24BEE9C50]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomDataByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9C60](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x24BEE9C68](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetCustomDataByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x24BEE9C70](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9C78](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x24BEE9C80](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x24BEE9C88](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x24BEE9C90](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x24BEE9C98](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetAllAuthoredMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x24BEE9CA0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x24BEE9CA8](this);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x24BEDA988](retstr, this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x24BEDA9B0](this, __c, __pos);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x24BEDA9B8](this, __c, __pos);
}

int std::string::compare(const std::string *this, std::string::size_type __pos1, std::string::size_type __n1, const std::string::value_type *__s)
{
  return MEMORY[0x24BEDA9C8](this, __pos1, __n1, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x24BEDAA50](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x24BEDABC0](a1, a2, a3);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x24BEDABC8](this, *(_QWORD *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC68](this, __str, __pos, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDACA0](this, __pos, __n1, __s);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x24BEDACA8](this, __pos, __n1, __s, __n2);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x24BEDACE8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAD08](this, __c);
}

uint64_t std::istream::read()
{
  return MEMORY[0x24BEDAE18]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x24BEDAE28]();
}

{
  return MEMORY[0x24BEDAE30]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x24BEDAE38]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x24BEDAE80]();
}

{
  return MEMORY[0x24BEDAE88]();
}

{
  return MEMORY[0x24BEDAE90]();
}

{
  return MEMORY[0x24BEDAEA0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF18]();
}

{
  return MEMORY[0x24BEDAF28]();
}

{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF40]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF58]();
}

{
  return MEMORY[0x24BEDAF60]();
}

{
  return MEMORY[0x24BEDAF78]();
}

{
  return MEMORY[0x24BEDAF80]();
}

uint64_t std::wostream::write()
{
  return MEMORY[0x24BEDAF98]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

void std::error_category::~error_category(std::error_category *this)
{
  MEMORY[0x24BEDB028](this);
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x24BEDB030](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB088](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB090](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x24BEDB0A0](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB0A8](this);
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x24BEDB1A0](retstr, __s);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB330](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x24BEDB3E0]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x24BEDB438](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x24BEDB440](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x24BEDB5F8](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB618](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_24FDE1618(__p);
}

uint64_t operator delete()
{
  return off_24FDE1620();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24FDE1628(__sz);
}

uint64_t operator new()
{
  return off_24FDE1630();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void __cxa_bad_typeid(void)
{
  MEMORY[0x24BEDB908]();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x24BEDB938](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x24BEDB968](lpsrc, lpstype, lpdtype, s2d);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x24BDACB60]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

float acosf(float a1)
{
  float result;

  MEMORY[0x24BDAD110](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

double atof(const char *a1)
{
  double result;

  MEMORY[0x24BDAD250](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x24BDAD258](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADC60](when, queue, block);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  MEMORY[0x24BDADC70](iterations, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x24BDADCA8](queue);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  MEMORY[0x24BDADCB8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED8](label, attr, target);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x24BDAE280](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x24BDAE438](*(_QWORD *)&a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE448](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x24BDAE4D8](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x24BDAE530](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x24BDAE5D8](a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x24BDAE958]();
}

float log2f(float a1)
{
  float result;

  MEMORY[0x24BDAEAE0](a1);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x24BEDD438](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x24BEDD440](obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t os_log_with_args()
{
  return MEMORY[0x24BDAF3A0]();
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x24BDAF400](log);
}

int raise(int a1)
{
  return MEMORY[0x24BDAFA30](*(_QWORD *)&a1);
}

int rand(void)
{
  return MEMORY[0x24BDAFA38]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFEE8](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x24BDAFF00](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFFA8](__s, *(_QWORD *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFFC8](__s1, __s2);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x24BDB00F8](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

