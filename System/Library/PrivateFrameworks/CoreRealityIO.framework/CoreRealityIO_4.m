void sub_2300C64E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::Inputs::_getValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type size;
  char v4;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  uint64_t String;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  std::mutex *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::mutex *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  const void **EmptyString;
  __int128 v41;
  int v42;
  int v43;
  BOOL v44;
  unint64_t *v45;
  unint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  std::string v54;
  std::string v55;
  std::string v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  void *__p[2];
  std::string v61;
  _BYTE v62[48];
  _QWORD v63[3];

  v63[2] = *MEMORY[0x24BDAC8D0];
  v57 = 0;
  v58 = 0;
  v8 = *(std::__shared_weak_count **)(a2 + 24);
  if (v8)
  {
    v58 = std::__shared_weak_count::lock(v8);
    if (v58)
      v57 = *(_QWORD *)(a2 + 16);
  }
  MEMORY[0x2348B2764](&v59, a3);
  v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a2 + 8), &v57);
  if (v9 == v10)
  {
    std::operator+<char>();
    v22 = std::string::append(&v54, ") at prim path (");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    v25 = *(char *)(String + 23);
    if (v25 >= 0)
      v26 = (const std::string::value_type *)String;
    else
      v26 = *(const std::string::value_type **)String;
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(String + 23);
    else
      v27 = *(_QWORD *)(String + 8);
    v28 = std::string::append(&v55, v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v56, ")");
LABEL_22:
    v30 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v30;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v62, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v62;
    v31 = *(_QWORD *)&v62[16];
    v63[0] = *(_QWORD *)&v62[24];
    *(_QWORD *)((char *)v63 + 7) = *(_QWORD *)&v62[31];
    v32 = v62[39];
    memset(&v62[16], 0, 24);
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v63 + 7);
    v33 = v63[0];
    *(_QWORD *)(a1 + 24) = v31;
    *(_QWORD *)(a1 + 32) = v33;
    *(_BYTE *)(a1 + 47) = v32;
    if (v61.__r_.__value_.__s.__data_[7] < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      v34 = (std::mutex *)v54.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v34);
      goto LABEL_58;
    }
    goto LABEL_58;
  }
  v11 = 1;
  v12 = v9;
  do
  {
    v12 = (_QWORD *)*v12;
    --v11;
  }
  while (v12 != v10);
  if (v11)
  {
    std::operator+<char>();
    v13 = std::string::append(&v54, ") at prim path (");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    v16 = *(char *)(v15 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)v15;
    else
      v17 = *(const std::string::value_type **)v15;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(v15 + 23);
    else
      v18 = *(_QWORD *)(v15 + 8);
    v19 = std::string::append(&v55, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v56, ") because more than one connected builder produced the same output type");
    goto LABEL_22;
  }
  v35 = v9[5];
  v37 = *(std::mutex **)(v35 + 16);
  v36 = *(std::__shared_weak_count **)(v35 + 24);
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  v56.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
  }
  if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((v9[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  realityio::Outputs::getRawValue<realityio::TransformAnimationAssetBuilder::TransformAnimationAssetDataT const*>(v37, EmptyString, (uint64_t)v62);
  v42 = v62[0];
  if (v62[0])
  {
    *(_QWORD *)&v41 = *(_QWORD *)&v62[8];
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v62[8];
    if ((v62[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)&v62[24], *(std::string::size_type *)&v62[32]);
      if (v62[0])
        v44 = 0;
      else
        v44 = v62[47] < 0;
      v43 = v44;
    }
    else
    {
      v43 = 0;
      v61 = *(std::string *)&v62[24];
    }
    v41 = *(_OWORD *)__p;
    size = v61.__r_.__value_.__l.__size_;
    v37 = (std::mutex *)v61.__r_.__value_.__r.__words[0];
    LODWORD(v55.__r_.__value_.__l.__data_) = v61.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v55.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v61.__r_.__value_.__r.__words[2] + 3);
    v4 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    if (v43)
    {
      v52 = *(_OWORD *)__p;
      operator delete(*(void **)&v62[24]);
      v41 = v52;
    }
  }
  if (!v36)
    goto LABEL_53;
  v45 = (unint64_t *)&v36->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    v53 = v41;
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    v41 = v53;
    if (v42)
      goto LABEL_54;
  }
  else
  {
LABEL_53:
    if (v42)
    {
LABEL_54:
      *(_BYTE *)a1 = 1;
      *(_QWORD *)(a1 + 8) = v41;
      goto LABEL_58;
    }
  }
  *(_OWORD *)v62 = v41;
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v62[16], (const std::string::value_type *)v37, size);
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v62;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)&v62[16];
    *(_QWORD *)(a1 + 40) = *(_QWORD *)&v62[32];
    v34 = v37;
    goto LABEL_30;
  }
  *(_QWORD *)&v62[16] = v37;
  *(_QWORD *)&v62[24] = size;
  *(_DWORD *)&v62[32] = v55.__r_.__value_.__l.__data_;
  *(_DWORD *)&v62[35] = *(_DWORD *)((char *)v55.__r_.__value_.__r.__words + 3);
  v62[39] = v4;
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v62;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v62[16];
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v62[32];
LABEL_58:
  if ((v59 & 7) != 0)
  {
    v47 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  v49 = v58;
  if (v58)
  {
    v50 = (unint64_t *)&v58->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_2300C6A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  unsigned int *v35;
  unsigned int v36;

  operator delete(v33);
  if ((a33 & 7) != 0)
  {
    v35 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF48B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF48B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24FDF4938;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDF4938;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void **std::__function::__func<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v2;
  uint64_t String;
  char *v4;
  size_t v5;
  void **v6;
  char *v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  void **result;
  uint64_t v12;
  uint64_t AnimationLibraryAsset;
  uint64_t v14;
  void *__p[2];
  char v16;
  void **v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 48);
  AnimationLibraryAsset = 0;
  if (!**(_BYTE **)(a1 + 16))
    goto LABEL_25;
  AnimationLibraryAsset = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
  if (!AnimationLibraryAsset)
    goto LABEL_25;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 40), v18);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v18);
  v4 = (char *)String;
  if (*(char *)(String + 23) >= 0)
    v5 = *(unsigned __int8 *)(String + 23);
  else
    v5 = *(_QWORD *)(String + 8);
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 17);
  if (v16 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v5)
  {
    if (v4[23] >= 0)
      v7 = v4;
    else
      v7 = *(char **)v4;
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "_animationLibrary");
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v18);
  if (v16 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  realityio::Builder::addAsset(v2, AnimationLibraryAsset, (uint64_t)v8);
  REAnimationLibraryComponentGetComponentType();
  v18[0] = &off_24FDF49A8;
  v18[1] = v2;
  v18[2] = &AnimationLibraryAsset;
  v19 = v18;
  v14 = REEntityGetOrAddComponentByClass();
  if (!v19)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v19 + 48))(v19, &v14);
  RENetworkMarkComponentDirty();
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_23;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_23:
  if (v16 < 0)
    operator delete(__p[0]);
LABEL_25:
  REAnimationComponentGetComponentType();
  __p[0] = &off_24FDF4A28;
  __p[1] = v2;
  v17 = __p;
  v14 = REEntityGetOrAddComponentByClass();
  if (!v17)
    std::__throw_bad_function_call[abi:ne180100]();
  (*((void (**)(void **, uint64_t *))*v17 + 6))(v17, &v14);
  RENetworkMarkComponentDirty();
  result = v17;
  if (v17 == __p)
  {
    v12 = 4;
    result = __p;
  }
  else
  {
    if (!v17)
      return result;
    v12 = 5;
  }
  return (void **)(*((uint64_t (**)(void))*result + v12))();
}

void sub_2300C6EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDF49A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF49A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  REAnimationLibraryComponentAssignAnimationLibraryAsset();
  return RERelease();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF4A28;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF4A28;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  result = REAnimationComponentActiveAnimationCount();
  if (result)
    return REAnimationComponentStopAllAnimations();
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio36TransformAnimationAggregationBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDF4AB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF4AB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  std::string::size_type size;
  std::string::value_type v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  uint64_t String;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  __int128 v28;
  realityio::TransformAnimationAggregationBuilder *v29;
  std::mutex *v30;
  char v31;
  unsigned int *v32;
  unsigned int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  const void **EmptyString;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  const void **v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  int v50;
  int v51;
  BOOL v52;
  unint64_t *v53;
  unint64_t v54;
  std::mutex *v55;
  __int128 v56;
  __int128 v57;
  std::string v58;
  std::string v59;
  std::string v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  void *__p[2];
  std::string v65;
  _BYTE v66[24];
  std::string v67;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = **(_QWORD **)(a1 + 8);
  v5 = realityio::TransformAnimationAggregationBuilder::kOutputName((realityio::TransformAnimationAggregationBuilder *)a1);
  v61 = 0;
  v62 = 0;
  v6 = *(std::__shared_weak_count **)(v4 + 24);
  if (v6)
  {
    v62 = std::__shared_weak_count::lock(v6);
    if (v62)
      v61 = *(_QWORD *)(v4 + 16);
  }
  MEMORY[0x2348B2764](&v63, v5);
  v7 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(v4 + 8), &v61);
  if (v7 == v8)
  {
    std::operator+<char>();
    v20 = std::string::append(&v58, ") at prim path (");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 32));
    v23 = *(char *)(String + 23);
    if (v23 >= 0)
      v24 = (const std::string::value_type *)String;
    else
      v24 = *(const std::string::value_type **)String;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(String + 23);
    else
      v25 = *(_QWORD *)(String + 8);
    v26 = std::string::append(&v59, v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v60, ")");
    goto LABEL_22;
  }
  v9 = 1;
  v10 = v7;
  do
  {
    v10 = (_QWORD *)*v10;
    --v9;
  }
  while (v10 != v8);
  if (v9)
  {
    std::operator+<char>();
    v11 = std::string::append(&v58, ") at prim path (");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 32));
    v14 = *(char *)(v13 + 23);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)v13;
    else
      v15 = *(const std::string::value_type **)v13;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v13 + 23);
    else
      v16 = *(_QWORD *)(v13 + 8);
    v17 = std::string::append(&v59, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v60, ") because more than one connected builder produced the same output type");
LABEL_22:
    v28 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[0] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v28;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v29 = (realityio::TransformAnimationAggregationBuilder *)realityio::DetailedError::DetailedError(v66, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    v30 = *(std::mutex **)&v66[16];
    v2 = v67.__r_.__value_.__s.__data_[15];
    *(_QWORD *)&v66[16] = 0;
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = 0uLL;
    if (v65.__r_.__value_.__s.__data_[7] < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    goto LABEL_30;
  }
  v37 = v7[5];
  v30 = *(std::mutex **)(v37 + 16);
  v38 = *(std::__shared_weak_count **)(v37 + 24);
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  v60.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
  }
  if ((v7[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((v7[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v7);
  realityio::Outputs::getRawValue<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>(v30, EmptyString, (uint64_t)v66);
  v50 = v66[0];
  if (v66[0])
  {
    *(_QWORD *)&v49 = *(_QWORD *)&v66[8];
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v66[8];
    v29 = (realityio::TransformAnimationAggregationBuilder *)&v65;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v65, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
      if (v66[0])
        v52 = 0;
      else
        v52 = (v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      v51 = v52;
    }
    else
    {
      v51 = 0;
      v65 = v67;
    }
    v49 = *(_OWORD *)__p;
    size = v65.__r_.__value_.__l.__size_;
    v30 = (std::mutex *)v65.__r_.__value_.__r.__words[0];
    v2 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    if (v51)
    {
      v56 = *(_OWORD *)__p;
      operator delete(v67.__r_.__value_.__l.__data_);
      v49 = v56;
    }
  }
  if (!v38)
    goto LABEL_75;
  v53 = (unint64_t *)&v38->__shared_owners_;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (!v54)
  {
    v57 = v49;
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    v49 = v57;
    if (v50)
      goto LABEL_76;
  }
  else
  {
LABEL_75:
    if (v50)
    {
LABEL_76:
      v31 = 0;
      goto LABEL_31;
    }
  }
  *(_OWORD *)v66 = v49;
  if ((v2 & 0x80) == 0)
  {
LABEL_30:
    v31 = 1;
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external((std::string *)&v66[16], (const std::string::value_type *)v30, size);
  v55 = *(std::mutex **)&v66[16];
  v2 = v67.__r_.__value_.__s.__data_[15];
  operator delete(v30);
  v31 = 1;
  v30 = v55;
LABEL_31:
  if ((v63 & 7) != 0)
  {
    v32 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  v34 = v62;
  if (!v62)
    goto LABEL_38;
  v35 = (unint64_t *)&v62->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if ((v31 & 1) != 0)
    {
LABEL_39:
      if (v2 < 0)
        operator delete(v30);
      return;
    }
  }
  else
  {
LABEL_38:
    if ((v31 & 1) != 0)
      goto LABEL_39;
  }
  v43 = *(_QWORD *)(v3 + 16);
  v42 = *(std::__shared_weak_count **)(v3 + 24);
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = (const void **)realityio::TransformAnimationAggregationBuilder::kOutputName(v29);
  std::mutex::lock((std::mutex *)(v43 + 64));
  if (v43 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v43 + 40, v46))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v43 + 40), v46);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v43, (unsigned __int8 *)v46);
  std::mutex::unlock((std::mutex *)(v43 + 64));
  if (v42)
  {
    v47 = (unint64_t *)&v42->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_2300C76CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  unsigned int *v35;
  unsigned int v36;

  operator delete(v33);
  if ((a33 & 7) != 0)
  {
    v35 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformAnimationAggregationBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t RIOBuilderInputsGetTypeID()
{
  if (RIOBuilderInputsGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderInputsGetTypeID::onceToken, &__block_literal_global_18);
  return RIOBuilderInputsGetTypeID::typeID;
}

BOOL RIOBuilderInputsHasValueWithName(uint64_t a1, __CFString *this)
{
  _BOOL8 hasValueForKey;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  std::string __p;
  _BYTE v9[8];
  std::string v10;
  unint64_t v11;

  hasValueForKey = 0;
  if (a1 && this)
  {
    realityio::CFStringCopyUTF8String(this, (uint64_t)v9);
    if (v9[0])
    {
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
      else
        __p = v10;
      v4 = *(_QWORD *)(a1 + 16);
      MEMORY[0x2348B2764](&v11, &__p);
      hasValueForKey = realityio::Inputs::hasValueForKey(v4, (unsigned int **)&v11);
      if ((v11 & 7) != 0)
      {
        v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v9[0] && SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
    }
    else
    {
      return 0;
    }
  }
  return hasValueForKey;
}

void sub_2300C7994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15)
  {
    if (a21 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **RIOBuilderInputsGetValueWithName(uint64_t a1, __CFString *this)
{
  const void **EmptyString;
  uint64_t v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::mutex *v25;
  unint64_t *v26;
  unint64_t v27;
  std::mutex *v28;
  uint64_t v29;
  uint64_t (***v30)(_QWORD);
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::string __p;
  char v40[8];
  std::string v41;
  std::mutex *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD v46[3];

  EmptyString = 0;
  if (a1 && this)
  {
    realityio::CFStringCopyUTF8String(this, (uint64_t)v40);
    if (v40[0])
    {
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      else
        __p = v41;
      v4 = *(_QWORD *)(a1 + 16);
      v44 = 0;
      v45 = 0;
      v5 = *(std::__shared_weak_count **)(v4 + 24);
      if (v5)
      {
        v45 = std::__shared_weak_count::lock(v5);
        if (v45)
          v44 = *(_QWORD *)(v4 + 16);
      }
      MEMORY[0x2348B2764](v46, &__p);
      v6 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(v4 + 8), &v44);
      v8 = v6;
      if (v6 == v7)
        goto LABEL_15;
      v9 = 1;
      v10 = v6;
      do
      {
        v10 = (_QWORD *)*v10;
        --v9;
      }
      while (v10 != v7);
      if (v9)
        goto LABEL_15;
      v17 = v6[5];
      if (!v17)
        goto LABEL_15;
      v19 = *(_QWORD *)(v17 + 16);
      v18 = *(std::__shared_weak_count **)(v17 + 24);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (!v19)
      {
LABEL_15:
        EmptyString = 0;
      }
      else
      {
        v23 = v8[5];
        v25 = *(std::mutex **)(v23 + 16);
        v24 = *(std::__shared_weak_count **)(v23 + 24);
        v42 = v25;
        v43 = v24;
        if (v24)
        {
          v26 = (unint64_t *)&v24->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if ((v8[7] & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (const void **)((v8[7] & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v6);
        v28 = v25 + 1;
        std::mutex::lock(v25 + 1);
        v29 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v25->__m_.__opaque[32], EmptyString);
        if (&v25->__m_.__opaque[40] == (char *)v29)
          goto LABEL_56;
        v30 = *(uint64_t (****)(_QWORD))(v29 + 56);
        v31 = *(std::__shared_weak_count **)(v29 + 64);
        v46[1] = v30;
        v46[2] = v31;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        if (v30)
          EmptyString = (const void **)(**v30)(v30);
        if (v31)
        {
          v34 = (unint64_t *)&v31->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (!v30)
LABEL_56:
          EmptyString = 0;
        std::mutex::unlock(v28);
        v36 = v43;
        if (v43)
        {
          v37 = (unint64_t *)&v43->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      if ((v46[0] & 7) != 0)
      {
        v11 = (unsigned int *)(v46[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stlxr(v12 - 2, v11));
      }
      v13 = v45;
      if (v45)
      {
        v14 = (unint64_t *)&v45->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v40[0] && SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
    }
    else
    {
      return 0;
    }
  }
  return EmptyString;
}

void sub_2300C7CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  std::mutex *v26;
  uint64_t v27;
  unsigned int *v29;
  unsigned int v30;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v27 - 48);
  std::mutex::unlock(v26);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if ((a26 & 7) != 0)
  {
    v29 = (unsigned int *)(a26 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  if (a14 < 0)
    operator delete(__p);
  if (a15)
  {
    if (a21 < 0)
      operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderInputsCopyStage(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v3;

  if (!a1)
    return 0;
  v3 = (unsigned int *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(**(_QWORD **)(a1 + 16) + 8));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v3);
  v1 = RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &>(&v3);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v3);
  return v1;
}

void sub_2300C7DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderInputsCopyPrim(uint64_t a1)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__::UsdStage *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 16);
  v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)v1 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v1 + 32));
  v11 = 1;
  v3 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v7, &v11);
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  return v3;
}

void sub_2300C7EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderInputsCopyPrimPath(uint64_t result)
{
  if (result)
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(*(_QWORD *)(result + 16)
                                                                                          + 32));
  return result;
}

uint64_t *RIOBuilderInputsCopyStageDelta(uint64_t a1)
{
  uint64_t Instance;
  uint64_t *v2;
  _QWORD v4[3];
  _OWORD v5[2];
  int v6;
  _BYTE v7[40];
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _BYTE v11[32];
  int v12;
  _BYTE v13[40];
  _BYTE v14[40];
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  void **v18;

  if (!a1)
    return 0;
  memset(v11, 0, sizeof(v11));
  v12 = 1065353216;
  memset(v5, 0, sizeof(v5));
  v6 = 1065353216;
  memset(v4, 0, sizeof(v4));
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)v7, (uint64_t)v5);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<realityio::PropertyDelta>::__init_with_size[abi:ne180100]<realityio::PropertyDelta*,realityio::PropertyDelta*>((uint64_t *)&v8, 0, 0, 0);
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)v13, (uint64_t)v11);
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)v14, (uint64_t)v7);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  std::vector<realityio::PropertyDelta>::__init_with_size[abi:ne180100]<realityio::PropertyDelta*,realityio::PropertyDelta*>((uint64_t *)&v15, v8, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 4));
  if (RIOBuilderStageDeltaGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderStageDeltaGetTypeID::onceToken, &__block_literal_global_10);
  Instance = _CFRuntimeCreateInstance();
  v2 = (uint64_t *)Instance;
  if (Instance)
  {
    std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(Instance + 16, (uint64_t)v13);
    std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)(v2 + 7), (uint64_t)v14);
    v2[12] = 0;
    v2[13] = 0;
    v2[14] = 0;
    std::vector<realityio::PropertyDelta>::__init_with_size[abi:ne180100]<realityio::PropertyDelta*,realityio::PropertyDelta*>(v2 + 12, v15, v16, 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v15) >> 4));
  }
  realityio::StageDelta::~StageDelta((realityio::StageDelta *)v13);
  v18 = (void **)&v8;
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](&v18);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v7);
  v18 = (void **)v4;
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](&v18);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v5);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v11);
  return v2;
}

void sub_2300C808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v28);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v27);
  realityio::StageDelta::~StageDelta((realityio::StageDelta *)(v29 - 160));
  realityio::PrimDelta::~PrimDelta((realityio::PrimDelta *)&a19);
  *(_QWORD *)(v29 - 56) = &a10;
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 56));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&a13);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void realityio::PrimDelta::~PrimDelta(realityio::PrimDelta *this)
{
  void **v2;

  v2 = (void **)((char *)this + 40);
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this);
}

uint64_t RIOBuilderInputsGetEngine(uint64_t result)
{
  if (result)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 40) + 16) + 16);
  return result;
}

std::string::size_type RIOBuilderInputsCreateStandardTextureAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v5;
  std::string::size_type v6;
  void *v8[2];
  void *v9[2];
  __int128 v10;
  void *v11[2];
  __int128 v12;
  __int128 v13;
  void *__p[2];
  uint64_t v15;
  std::string v16;
  std::string v17;
  std::string::size_type v18;

  if (!a1 || !a2)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(char *)(a3 + 39) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  else
    v16 = *(std::string *)(a3 + 16);
  if (*(char *)(a3 + 63) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  else
    v17 = *(std::string *)(a3 + 40);
  v15 = 0;
  v13 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v11 = 0u;
  v12 = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 0u;
  *(_OWORD *)v8 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v8);
  std::string::basic_string[abi:ne180100]<0>(v11, "");
  DWORD2(v12) = 0;
  HIDWORD(v12) = realityio::TextureSwizzleChannels::kDefault;
  LOBYTE(v13) = 2;
  DWORD1(v13) = 0;
  WORD4(v13) = 512;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  realityio::Inputs::createStandardTextureAsset(v5, a2 + 24, (uint64_t)&v16, (uint64_t)v8, &v18);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v9[0]) < 0)
    operator delete(v8[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v6 = v18;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v18);
  return v6;
}

void sub_2300C8310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 73) < 0)
    operator delete(*(void **)(v26 - 96));
  _Unwind_Resume(exception_object);
}

std::string::size_type RIOBuilderInputsCreateCubeMapTextureAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v5;
  std::string::size_type v6;
  std::string v8;
  std::string __p;
  std::string::size_type v10;

  if (!a1 || !a2)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(char *)(a3 + 39) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  else
    v8 = *(std::string *)(a3 + 16);
  if (*(char *)(a3 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 40), *(_QWORD *)(a3 + 48));
  else
    __p = *(std::string *)(a3 + 40);
  realityio::Inputs::createCubeMapTextureAsset(v5, a2 + 24, (uint64_t)&v8, &v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v6 = v10;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v10);
  return v6;
}

void sub_2300C8470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderInputsGetImportSession(uint64_t result)
{
  if (result)
    return *(_QWORD *)(*(_QWORD *)(result + 16) + 40) - 16;
  return result;
}

BOOL RIOBuilderInputsGetAllBuildersAndOutputNamesProvidingValuesWithName(uint64_t a1, __CFString *this, __CFArray **a3, __CFArray **a4)
{
  _BOOL8 v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  __CFArray *Mutable;
  __CFArray *i;
  _QWORD *Instance;
  const void *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t EmptyString;
  const char *v22;
  CFStringRef v23;
  unsigned int *v24;
  unsigned int v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  __CFArray **v32;
  __CFArray **v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t v37;
  char v38[8];
  void *__p;
  char v40;

  v4 = 0;
  if (a1)
  {
    if (this)
    {
      v7 = *(_QWORD *)(a1 + 16);
      realityio::CFStringCopyUTF8String(this, (uint64_t)v38);
      v4 = v38[0] != 0;
      if (v38[0])
      {
        MEMORY[0x2348B2764](&v37, &__p);
        v34 = 0;
        v35 = 0;
        v8 = *(std::__shared_weak_count **)(v7 + 24);
        if (v8)
        {
          v35 = std::__shared_weak_count::lock(v8);
          if (v35)
            v34 = *(_QWORD *)(v7 + 16);
        }
        v36 = v37;
        if ((v37 & 7) != 0)
        {
          v9 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 2, v9));
          if ((v10 & 1) == 0)
            v36 &= 0xFFFFFFFFFFFFFFF8;
        }
        v11 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(v7 + 8), &v34);
        v13 = v12;
        v32 = a3;
        v33 = a4;
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
        for (i = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]); v11 != v13; v11 = (_QWORD *)*v11)
        {
          if (RIOBuilderGetTypeID::onceToken != -1)
            dispatch_once(&RIOBuilderGetTypeID::onceToken, &__block_literal_global_35);
          Instance = (_QWORD *)_CFRuntimeCreateInstance();
          v17 = Instance;
          if (Instance)
          {
            Instance[2] = v11[5];
            v18 = v11[6];
            Instance[3] = v18;
            if (v18)
            {
              v19 = (unint64_t *)(v18 + 8);
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
            }
          }
          if ((v11[7] & 0xFFFFFFFFFFFFFFF8) != 0)
            EmptyString = (v11[7] & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)Instance);
          if (*(char *)(EmptyString + 23) >= 0)
            v22 = (const char *)EmptyString;
          else
            v22 = *(const char **)EmptyString;
          v23 = CFStringCreateWithCString(0, v22, 0x8000100u);
          CFArrayAppendValue(Mutable, v17);
          CFArrayAppendValue(i, v23);
          CFRelease(v17);
          CFRelease(v23);
        }
        *v32 = Mutable;
        *v33 = i;
        if ((v36 & 7) != 0)
        {
          v24 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
        v26 = v35;
        if (v35)
        {
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        if ((v37 & 7) != 0)
        {
          v29 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
          do
            v30 = __ldxr(v29);
          while (__stlxr(v30 - 2, v29));
        }
        if (v38[0] && v40 < 0)
          operator delete(__p);
      }
    }
  }
  return v4;
}

void sub_2300C876C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  if ((a13 & 7) != 0)
  {
    v22 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if ((a14 & 7) != 0)
  {
    v24 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if (a15)
  {
    if (a21 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void RIOBuilderInputsPerformBlockSyncOnEngineQueue(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v7 = v3;
  if (a1 && v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
    v8[0] = &off_24FDF4BB8;
    v8[1] = &v7;
    v9 = v8;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v8);
    v5 = v9;
    if (v9 == v8)
    {
      v6 = 4;
      v5 = v8;
    }
    else
    {
      if (!v9)
      {
LABEL_8:
        v3 = v7;
        goto LABEL_9;
      }
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_8;
  }
LABEL_9:

}

void sub_2300C88B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:

  _Unwind_Resume(a1);
}

BOOL _RIOBuilderInputsCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderInputsCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderInputsCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderInputs %p>"), a1);
}

CFStringRef _RIOBuilderInputsCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderInputs %p>"), a1);
}

void std::__function::__func<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0,std::allocator<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0,std::allocator<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF4BB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0,std::allocator<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF4BB8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0,std::allocator<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD **)(a1 + 8));
}

uint64_t std::__function::__func<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0,std::allocator<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0,std::allocator<RIOBuilderInputsPerformBlockSyncOnEngineQueue::$_0>,void ()(void)>::target_type()
{
}

uint64_t pugi::xml_writer_stream::write(pugi::xml_writer_stream *this, const void *a2)
{
  if (*((_QWORD *)this + 1))
    return std::ostream::write();
  else
    return std::wostream::write();
}

uint64_t pugi::xml_attribute::set_value(pugi::xml_attribute *this, char *__s)
{
  uint64_t v2;
  size_t v4;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v4 = strlen(__s);
}

uint64_t pugi::xml_attribute::set_name(pugi::xml_attribute *this, char *__s)
{
  uint64_t v2;
  size_t v4;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v4 = strlen(__s);
}

uint64_t pugi::impl::`anonymous namespace'::strcpy_insitu<char *,unsigned long>(const char **a1, uint64_t *a2, uint64_t a3, void *__src, size_t __n)
{
  char *v10;
  unint64_t v11;
  BOOL v12;
  size_t v13;
  uint64_t *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (!__n)
  {
    v24 = *a2;
    if ((*a2 & a3) != 0)
    {
      v25 = *(uint64_t *)((char *)a2 - (v24 >> 8));
      v26 = (uint64_t)&(*a1)[-8 * *((unsigned __int16 *)*a1 - 2) - 4];
      if (*((_WORD *)*a1 - 1))
        v27 = 8 * *((unsigned __int16 *)*a1 - 1);
      else
        v27 = *(_QWORD *)(v26 - 16);
      v24 = *a2;
    }
    *a1 = 0;
    v28 = v24 & ~a3;
    goto LABEL_29;
  }
  v10 = (char *)*a1;
  v11 = *a2;
  if (*a1)
    v12 = (*a2 & 0x40) == 0;
  else
    v12 = 0;
  if (v12)
  {
    v13 = strlen(*a1);
    if ((v11 & a3) != 0)
    {
      if (v13 < __n || v13 >= 0x20 && v13 - __n >= v13 >> 1)
        goto LABEL_11;
    }
    else if (v13 < __n)
    {
      goto LABEL_11;
    }
    memcpy(v10, __src, __n);
    (*a1)[__n] = 0;
    return 1;
  }
LABEL_11:
  v14 = *(uint64_t **)((char *)a2 - (v11 >> 8));
  v15 = (__n + 12) & 0xFFFFFFFFFFFFFFF8;
  v16 = v14[1];
  if (v16 + v15 <= 0x7FD8)
  {
    v17 = *v14;
    result = *v14 + v16 + 40;
    v14[1] = v16 + v15;
LABEL_13:
    *(_WORD *)result = (result - v17 + 524248) >> 3;
    v19 = (__n + 12) >> 3;
    if (v15 >= 0x80000)
      LOWORD(v19) = 0;
    *(_WORD *)(result + 2) = v19;
    v20 = (const char *)(result + 4);
    memcpy((void *)(result + 4), __src, __n);
    v20[__n] = 0;
    v21 = *a2;
    if ((*a2 & a3) != 0)
    {
      v22 = (uint64_t)&(*a1)[-8 * *((unsigned __int16 *)*a1 - 2) - 4];
      if (*((_WORD *)*a1 - 1))
        v23 = 8 * *((unsigned __int16 *)*a1 - 1);
      else
        v23 = *(_QWORD *)(v22 - 16);
      v21 = *a2;
    }
    *a1 = v20;
    v28 = v21 | a3;
LABEL_29:
    *a2 = v28;
    return 1;
  }
  v29 = 0;
  if (result)
  {
    LODWORD(v17) = v29;
    goto LABEL_13;
  }
  return result;
}

uint64_t pugi::xml_node::child(pugi::xml_node *this, const char *__s1)
{
  uint64_t i;
  const char *v4;

  if (!*(_QWORD *)this)
    return 0;
  for (i = *(_QWORD *)(*(_QWORD *)this + 32); i; i = *(_QWORD *)(i + 48))
  {
    v4 = *(const char **)(i + 8);
    if (v4 && !strcmp(__s1, v4))
      break;
  }
  return i;
}

uint64_t pugi::xml_node::attribute(pugi::xml_node *this, const char *__s1)
{
  uint64_t i;
  const char *v4;

  if (!*(_QWORD *)this)
    return 0;
  for (i = *(_QWORD *)(*(_QWORD *)this + 56); i; i = *(_QWORD *)(i + 32))
  {
    v4 = *(const char **)(i + 8);
    if (v4 && !strcmp(__s1, v4))
      break;
  }
  return i;
}

uint64_t pugi::xml_node::set_name(pugi::xml_node *this, char *__s)
{
  uint64_t v3;
  int v4;
  size_t v6;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v4 = *(_DWORD *)v3 & 0xF;
  else
    v4 = 0;
  if (v4 != 7 && (v4 & 0xFFFFFFFB) != 2)
    return 0;
  v6 = strlen(__s);
}

uint64_t pugi::xml_node::set_value(pugi::xml_node *this, char *__s)
{
  uint64_t v2;
  size_t v5;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  if ((*(_DWORD *)v2 & 0xFu) - 3 >= 4 && (*(_DWORD *)v2 & 0xF) != 8)
    return 0;
  v5 = strlen(__s);
}

char *pugi::xml_node::append_attribute(pugi::xml_node *this, char *__s)
{
  _QWORD *v2;
  uint64_t v3;
  char **v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  char *v15;

  v2 = *(_QWORD **)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = *v2 & 0xFLL;
  if ((_DWORD)v3 != 7 && (_DWORD)v3 != 2)
    return 0;
  v7 = *(char ***)((char *)v2 - (*v2 >> 8));
  v8 = v7[1];
  if ((unint64_t)(v8 + 40) > 0x7FD8)
  {
    v15 = 0;
    if (!v10)
      return v10;
    v9 = v15;
  }
  else
  {
    v9 = *v7;
    v10 = &v8[(_QWORD)*v7 + 40];
    v7[1] = v8 + 40;
  }
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_QWORD *)v10 = (v10 - v9) << 8;
  v15 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)this + 56);
  if (v11)
  {
    v13 = *(_QWORD *)(v11 + 24);
    v12 = (char **)(v11 + 24);
    *(_QWORD *)(v13 + 32) = v10;
    *((_QWORD *)v10 + 3) = v13;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)this + 56) = v10;
    v12 = (char **)(v10 + 24);
  }
  *v12 = v10;
  pugi::xml_attribute::set_name((pugi::xml_attribute *)&v15, __s);
  return v10;
}

char *pugi::xml_node::append_child(_QWORD **a1, unsigned int a2)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  char **v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD **v14;
  char *v15;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = 0;
  if (a2 >= 2)
  {
    v4 = *v2 & 0xFLL;
    if ((v4 - 3) >= 0xFFFFFFFE)
    {
      if (a2 - 9 >= 0xFFFFFFFE && (_DWORD)v4 != 1)
        return 0;
      v6 = *(char ***)((char *)v2 - (*v2 >> 8));
      v7 = v6[1];
      if ((unint64_t)(v7 + 64) > 0x7FD8)
      {
        v14 = a1;
        v15 = 0;
        v13 = a2;
        if (!v3)
          return v3;
        a1 = v14;
        v8 = v15;
        a2 = v13;
      }
      else
      {
        v8 = *v6;
        v3 = &v7[(_QWORD)*v6 + 40];
        v6[1] = v7 + 64;
      }
      *((_QWORD *)v3 + 7) = 0;
      *(_OWORD *)(v3 + 40) = 0u;
      *(_OWORD *)(v3 + 24) = 0u;
      *(_OWORD *)(v3 + 8) = 0u;
      *(_QWORD *)v3 = a2 | (unint64_t)((v3 - v8) << 8);
      v15 = v3;
      v9 = *a1;
      *((_QWORD *)v3 + 3) = *a1;
      v10 = v9[4];
      if (v10)
      {
        v12 = *(_QWORD *)(v10 + 40);
        v11 = (char **)(v10 + 40);
        *(_QWORD *)(v12 + 48) = v3;
        *((_QWORD *)v3 + 5) = v12;
      }
      else
      {
        v9[4] = v3;
        v11 = (char **)(v3 + 40);
      }
      *v11 = v3;
      if (a2 == 7)
        pugi::xml_node::set_name((pugi::xml_node *)&v15, "xml");
    }
  }
  return v3;
}

uint64_t pugi::xml_node::remove_child(pugi::xml_node *this, uint64_t **a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v2 = *(_QWORD **)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = *a2;
  if (!*a2 || (_QWORD *)v3[3] != v2)
    return 0;
  v5 = *(_QWORD *)((char *)v2 - (*v2 >> 8));
  v6 = v3[6];
  v7 = v6;
  if (!v6)
    v7 = v2[4];
  *(_QWORD *)(v7 + 40) = v3[5];
  v8 = v3[5];
  v10 = *(_QWORD *)(v8 + 48);
  v9 = (uint64_t *)(v8 + 48);
  v11 = v2 + 4;
  if (v10)
    v11 = v9;
  *v11 = v6;
  v3[3] = 0;
  v3[5] = 0;
  v3[6] = 0;
  return 1;
}

void pugi::impl::`anonymous namespace'::destroy_node(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  if ((*a1 & 0x20) != 0)
  {
    v5 = a1[1];
    v6 = *(unsigned __int16 *)(v5 - 4);
    v5 -= 4;
    v7 = v5 - 8 * v6;
    v8 = *(unsigned __int16 *)(v5 + 2);
    if (v8)
      v9 = 8 * v8;
    else
      v9 = *(_QWORD *)(v7 - 16);
    v4 = *a1;
  }
  if ((v4 & 0x10) != 0)
  {
    v10 = a1[2];
    v11 = *(unsigned __int16 *)(v10 - 4);
    v10 -= 4;
    v12 = v10 - 8 * v11;
    v13 = *(unsigned __int16 *)(v10 + 2);
    if (v13)
      v14 = 8 * v13;
    else
      v14 = *(_QWORD *)(v12 - 16);
  }
  v15 = (unint64_t *)a1[7];
  if (v15)
  {
    do
    {
      v16 = (unint64_t *)v15[4];
      v17 = *v15;
      if ((*v15 & 0x20) != 0)
      {
        v18 = v15[1];
        v19 = *(unsigned __int16 *)(v18 - 4);
        v18 -= 4;
        v20 = v18 - 8 * v19;
        v21 = *(unsigned __int16 *)(v18 + 2);
        if (v21)
          v22 = 8 * v21;
        else
          v22 = *(_QWORD *)(v20 - 16);
        v17 = *v15;
      }
      if ((v17 & 0x10) != 0)
      {
        v23 = v15[2];
        v24 = *(unsigned __int16 *)(v23 - 4);
        v23 -= 4;
        v25 = v23 - 8 * v24;
        v26 = *(unsigned __int16 *)(v23 + 2);
        if (v26)
          v27 = 8 * v26;
        else
          v27 = *(_QWORD *)(v25 - 16);
        v17 = *v15;
      }
      v15 = v16;
    }
    while (v16);
  }
  v28 = a1[4];
  if (v28)
  {
    do
    {
      v29 = *(_QWORD *)(v28 + 48);
      v28 = v29;
    }
    while (v29);
  }
}

void pugi::impl::`anonymous namespace'::load_buffer_impl(uint64_t a1@<X0>, char *a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, unsigned __int8 **a10)
{
  size_t v13;
  uint64_t v17;
  int buffer_encoding;
  int v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  pugi::impl::_anonymous_namespace_ *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  __int16 v29;
  unsigned int v30;
  unsigned __int8 *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  size_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  unsigned __int16 *v62;
  size_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  size_t v66;
  unsigned __int8 *v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  unsigned __int8 *v71;
  size_t v72;
  unsigned int v73;
  size_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  size_t v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  size_t v90;
  int v91;
  unsigned __int8 *v92;
  uint64_t v93;
  _BOOL4 v94;
  char *appended;
  uint64_t v96;
  unsigned __int8 *v97;
  unsigned int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  size_t v103;
  int v104;
  char *v105;
  char *v106;
  unsigned __int8 *j;
  unsigned __int8 *v108;
  int v109;
  int v110;
  size_t v111;
  int v112;
  char v113;
  int v114;
  char *v115;
  unsigned __int8 *v116;
  size_t v117;
  char *v118;
  char *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 *v123;
  int v124;
  unsigned __int8 *v125;
  size_t v126;
  char *v127;
  size_t v128;
  uint64_t v129;
  int v130;
  BOOL v131;
  _BOOL4 v132;
  int v133;
  BOOL v134;
  BOOL v135;
  uint64_t v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  int v142;
  char v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  BOOL v147;
  int v148;
  int v149;
  BOOL v151;
  int v152;
  int v153;
  int v154;
  BOOL v155;
  int v156;
  uint64_t v157;
  int v158;
  BOOL v160;
  unsigned __int8 *v161;
  int v162;
  BOOL v163;
  BOOL v164;
  int v165;
  BOOL v166;
  _BOOL4 v167;
  uint64_t v168;
  int i;
  int v170;
  int v171;
  BOOL v172;
  int v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  unsigned __int8 *v178;
  int v179;
  int v180;
  BOOL v182;
  uint64_t v183;
  int v184;
  int v185;
  char v186;
  char *v187;
  char *v188;
  char *v189;
  unsigned __int8 *v190;
  int v191;
  char v192;
  int v193;
  int v194;
  int v195;
  unsigned __int8 *v196;
  int v197;
  char *v198;
  char *v199;
  char *v200;
  int v201;
  BOOL v202;
  BOOL v203;
  char *v204;
  unsigned __int8 *v205;
  unsigned __int8 *v206;
  size_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  BOOL v211;
  uint64_t v212;
  unsigned __int8 *v213;
  int v214;
  char *v215;
  char *v216;
  uint64_t v217;
  _QWORD **v218;
  _QWORD *v219;
  unsigned __int8 *v220;
  unsigned int *v221;
  unsigned __int8 *v222;
  unsigned __int8 **v223;
  BOOL v224;
  BOOL v225;
  _BOOL8 v227;
  uint64_t v228;
  size_t v229;
  uint64_t v230;
  uint64_t (*v231)(unsigned __int8 *);
  uint64_t (*v232)(unsigned __int8 *, _QWORD);
  uint64_t *v233;
  int v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  int v238;

  v13 = a4;
  v17 = a9;
  if (!a3 && a4)
  {
    *(_DWORD *)(a9 + 16) = 0;
    *(_DWORD *)a9 = 2;
    *(_QWORD *)(a9 + 8) = 0;
    return;
  }
  v19 = buffer_encoding;
  v238 = buffer_encoding;
  v235 = a2;
  if (buffer_encoding == 1)
  {
    if ((a7 & 1) != 0)
    {
      v20 = a3;
      if (!a8)
        goto LABEL_7;
LABEL_158:
      if (a3 && v20 != a3)
        free(a3);
      goto LABEL_161;
    }
    v236 = v17;
    v23 = (pugi::impl::_anonymous_namespace_ *)(v13 + 1);
    if (v31)
    {
      v20 = v31;
      if (a3)
        memcpy(v31, a3, v13);
      v24 = &v20[v13];
      goto LABEL_156;
    }
LABEL_552:
    *(_DWORD *)(v236 + 16) = 0;
    *(_DWORD *)v236 = 3;
    *(_QWORD *)(v236 + 8) = 0;
    return;
  }
  v236 = v17;
  if ((buffer_encoding & 0xFFFFFFFE) == 2)
  {
    v21 = v13 >> 1;
    if (buffer_encoding == 2)
    {
      if (v13 < 2)
      {
        v22 = 0;
LABEL_13:
        v23 = (pugi::impl::_anonymous_namespace_ *)(v22 + 1);
        if (!v24)
          goto LABEL_552;
        v20 = v24;
        if (v13 >= 2)
        {
          v25 = a3;
          while (1)
          {
            v26 = (unsigned __int8 *)*(unsigned __int16 *)v25;
            if (v26 >> 11 > 0x1A && (~(_DWORD)v26 & 0xE000) != 0)
            {
              v27 = v25 + 2;
              v28 = -1;
              if (v21 < 2 || ((unsigned __int16)v26 & 0xFC00) != 0xD800)
                goto LABEL_20;
              v29 = *(_WORD *)v27;
              if ((*(_WORD *)v27 & 0xFC00) == 0xDC00)
              {
                v30 = (((_DWORD)v26 << 10) & 0xFFC00) + 0x10000;
                *v24 = (v30 >> 18) | 0xF0;
                v24[1] = (v30 >> 12) & 0x3F | 0x80;
                v24[2] = ((((_DWORD)v26 << 10) | v29 & 0x3FFu) >> 6) & 0x3F | 0x80;
                v24[3] = v29 & 0x3F | 0x80;
                v24 += 4;
                v27 = v25 + 4;
                v28 = -2;
                goto LABEL_20;
              }
            }
            else
            {
              v27 = v25 + 2;
            }
            v28 = -1;
LABEL_20:
            v25 = v27;
            v21 += v28;
            if (!v21)
              goto LABEL_155;
          }
        }
        goto LABEL_154;
      }
      v22 = 0;
      v43 = v13 >> 1;
      v44 = a3;
      while (1)
      {
        v45 = *(unsigned __int16 *)v44;
        if (v45 >> 11 > 0x1A)
        {
          if ((~v45 & 0xE000) != 0)
          {
            v47 = v44 + 2;
            v48 = -1;
            if (v43 >= 2 && (v45 & 0xFC00) == 0xD800)
            {
              v49 = *(_WORD *)v47 & 0xFC00;
              v50 = v49 == 56320;
              v51 = (unsigned __int16 *)(v44 + 4);
              if (v49 == 56320)
                v48 = -2;
              else
                v48 = -1;
              if (v50)
                v47 = (unsigned __int8 *)v51;
              if (v50)
                v22 += 4;
            }
            goto LABEL_65;
          }
          v22 += 3;
        }
        else
        {
          if (v45 < 0x800)
            v46 = 2;
          else
            v46 = 3;
          if (v45 < 0x80)
            v46 = 1;
          v22 += v46;
        }
        v47 = v44 + 2;
        v48 = -1;
LABEL_65:
        v44 = v47;
        v43 += v48;
        if (!v43)
          goto LABEL_13;
      }
    }
    if (v13 < 2)
    {
      v34 = 0;
LABEL_36:
      v23 = (pugi::impl::_anonymous_namespace_ *)(v34 + 1);
      if (!v24)
        goto LABEL_552;
      v20 = v24;
      if (v13 < 2)
      {
LABEL_154:
        v24 = v20;
        goto LABEL_155;
      }
      v35 = a3;
      while (1)
      {
        v36 = bswap32(*(unsigned __int16 *)v35);
        v37 = (unsigned __int8 *)HIWORD(v36);
        if (v36 >> 27 > 0x1A && (~(_DWORD)v37 & 0xE000) != 0)
        {
          v38 = v35 + 2;
          v39 = -1;
          if (v21 < 2 || ((unsigned __int16)v37 & 0xFC00) != 0xD800)
            goto LABEL_43;
          v40 = bswap32(*(unsigned __int16 *)v38) >> 16;
          if ((v40 & 0xFC00) == 0xDC00)
          {
            v41 = (((_DWORD)v37 << 10) & 0xFFC00) + 0x10000;
            *v24 = (v41 >> 18) | 0xF0;
            v24[1] = (v41 >> 12) & 0x3F | 0x80;
            v24[2] = ((((_DWORD)v37 << 10) | v40 & 0x3FF) >> 6) & 0x3F | 0x80;
            v24[3] = v40 & 0x3F | 0x80;
            v24 += 4;
            v38 = v35 + 4;
            v39 = -2;
            goto LABEL_43;
          }
        }
        else
        {
          v38 = v35 + 2;
        }
        v39 = -1;
LABEL_43:
        v35 = v38;
        v21 += v39;
        if (!v21)
          goto LABEL_155;
      }
    }
    v34 = 0;
    v53 = v13 >> 1;
    v54 = a3;
    while (1)
    {
      v55 = bswap32(*(unsigned __int16 *)v54);
      v56 = HIWORD(v55);
      if (v55 >> 27 > 0x1A)
      {
        if ((~v56 & 0xE000) != 0)
        {
          v58 = v54 + 2;
          v59 = -1;
          if (v53 >= 2 && (v56 & 0xFC00) == 0xD800)
          {
            v60 = *(_WORD *)v58 & 0xFC;
            v61 = v60 == 220;
            v62 = (unsigned __int16 *)(v54 + 4);
            if (v60 == 220)
              v59 = -2;
            else
              v59 = -1;
            if (v61)
              v58 = (unsigned __int8 *)v62;
            if (v61)
              v34 += 4;
          }
          goto LABEL_91;
        }
        v34 += 3;
      }
      else
      {
        if (v56 < 0x800)
          v57 = 2;
        else
          v57 = 3;
        if (v56 < 0x80)
          v57 = 1;
        v34 += v57;
      }
      v58 = v54 + 2;
      v59 = -1;
LABEL_91:
      v54 = v58;
      v53 += v59;
      if (!v53)
        goto LABEL_36;
    }
  }
  if ((buffer_encoding - 5) <= 1)
  {
    v32 = v13 >> 2;
    if (buffer_encoding == 5)
    {
      if (v13 >= 4)
      {
        v33 = 0;
        v74 = v13 >> 2;
        v75 = (unsigned int *)a3;
        do
        {
          v77 = *v75++;
          v76 = v77;
          v78 = HIWORD(v77);
          v79 = v33 + 4;
          if (v77 < 0x800)
            v80 = 2;
          else
            v80 = 3;
          if (v76 < 0x80)
            v81 = 1;
          else
            v81 = v80;
          v33 += v81;
          if (v78)
            v33 = v79;
          --v74;
        }
        while (v74);
      }
      else
      {
        v33 = 0;
      }
      v23 = (pugi::impl::_anonymous_namespace_ *)(v33 + 1);
      if (!v24)
        goto LABEL_552;
      v20 = v24;
      if (v13 >= 4)
      {
        v82 = a3;
        do
        {
          v83 = (unsigned __int8 *)*(unsigned int *)v82;
          if (v83 >> 16)
          {
            *v24 = (v83 >> 18) | 0xF0;
            v24[1] = (v83 >> 12) & 0x3F | 0x80;
            v24[2] = (v83 >> 6) & 0x3F | 0x80;
            v24[3] = v83 & 0x3F | 0x80;
            v24 += 4;
          }
          else
          {
          }
          v82 += 4;
          --v32;
        }
        while (v32);
        goto LABEL_155;
      }
    }
    else
    {
      if (v13 >= 4)
      {
        v52 = 0;
        v84 = v13 >> 2;
        v85 = (unsigned int *)a3;
        do
        {
          v86 = bswap32(*v85);
          if (HIWORD(v86))
          {
            v52 += 4;
          }
          else
          {
            if (v86 < 0x800)
              v87 = 2;
            else
              v87 = 3;
            if (v86 < 0x80)
              v88 = 1;
            else
              v88 = v87;
            v52 += v88;
          }
          ++v85;
          --v84;
        }
        while (v84);
      }
      else
      {
        v52 = 0;
      }
      v23 = (pugi::impl::_anonymous_namespace_ *)(v52 + 1);
      if (!v24)
        goto LABEL_552;
      v20 = v24;
      if (v13 >= 4)
      {
        v221 = (unsigned int *)a3;
        do
        {
          v222 = (unsigned __int8 *)bswap32(*v221);
          if (v222 >> 16)
          {
            *v24 = (v222 >> 18) | 0xF0;
            v24[1] = (v222 >> 12) & 0x3F | 0x80;
            v24[2] = (v222 >> 6) & 0x3F | 0x80;
            v24[3] = v222 & 0x3F | 0x80;
            v24 += 4;
          }
          else
          {
          }
          ++v221;
          --v32;
        }
        while (v32);
        goto LABEL_155;
      }
    }
    goto LABEL_154;
  }
  if (buffer_encoding != 9)
    goto LABEL_552;
  v42 = 0;
  if (v13)
  {
    while (((char)a3[v42] & 0x80000000) == 0)
    {
      if (v13 == ++v42)
        goto LABEL_121;
    }
  }
  if (v42 >= v13)
    v63 = v13;
  else
    v63 = v42;
  if (v42 >= v13)
  {
LABEL_121:
    if ((a7 & 1) != 0)
    {
      v20 = a3;
      a2 = v235;
      goto LABEL_157;
    }
    v23 = (pugi::impl::_anonymous_namespace_ *)(v13 + 1);
    if (!v220)
      goto LABEL_552;
    v20 = v220;
    if (a3)
      memcpy(v220, a3, v13);
    v24 = &v20[v13];
  }
  else
  {
    v64 = &a3[v63];
    v65 = 0;
    if (v13 != v63)
    {
      v66 = v63 - v13;
      v67 = &a3[v63];
      do
      {
        v68 = (char)*v67++;
        if (v68 >= 0)
          v69 = 1;
        else
          v69 = 2;
        v65 += v69;
        v70 = __CFADD__(v66++, 1);
      }
      while (!v70);
    }
    v23 = (pugi::impl::_anonymous_namespace_ *)(v63 + v65 + 1);
    if (!v71)
      goto LABEL_552;
    v20 = v71;
    memcpy(v71, a3, v63);
    v24 = &v20[v63];
    if (v13 != v63)
    {
      v72 = v63 - v13;
      do
      {
        v73 = *v64++;
        v70 = __CFADD__(v72++, 1);
      }
      while (!v70);
    }
  }
LABEL_155:
  a2 = v235;
  v17 = v236;
LABEL_156:
  *v24 = 0;
  v13 = (size_t)v23;
LABEL_157:
  v19 = v238;
  if (a8)
    goto LABEL_158;
LABEL_7:
  if (v20 != a3)
LABEL_161:
    *a10 = v20;
  *(_QWORD *)(a1 + 80) = v20;
  if (!v13)
  {
    *(_DWORD *)v17 = ~(a5 >> 8) & 0x10;
    *(_QWORD *)(v17 + 8) = 0;
    goto LABEL_625;
  }
  v89 = *((_QWORD *)a2 + 4);
  if (v89)
    v230 = *(_QWORD *)(v89 + 40);
  else
    v230 = 0;
  v90 = v13 - 1;
  v91 = v20[v13 - 1];
  v233 = (uint64_t *)(a1 + 64);
  v20[v13 - 1] = 0;
  v92 = v20;
  if (*v20 == 239)
  {
    v92 = v20;
    if (v20[1] == 187)
    {
      v93 = 3;
      if (v20[2] != 191)
        v93 = 0;
      v92 = &v20[v93];
    }
  }
  v231 = (uint64_t (*)(unsigned __int8 *))*(&off_24FDF4CF8 + ((a5 >> 9) & 4 | (a5 >> 4) & 3));
  v232 = (uint64_t (*)(unsigned __int8 *, _QWORD))*(&off_24FDF4C78 + (a5 >> 4));
  v94 = (a5 & 0x800) == 0 && (a5 & 0x408) != 0;
  appended = a2;
  v234 = v91;
LABEL_176:
  v96 = *v92;
  do
  {
    v97 = v92;
    if (!v96)
      goto LABEL_533;
    if (v96 == 60)
    {
LABEL_198:
      v102 = *++v97;
      v101 = v102;
LABEL_206:
      {
        if (v101 != 33)
        {
          if (v101 != 63)
          {
            if (v101 != 47)
            {
              if (v101)
                v224 = 0;
              else
                v224 = v91 == 63;
              if (v224)
                v104 = 6;
              else
                v104 = 5;
              j = v97;
              goto LABEL_614;
            }
            j = v97 + 1;
            v108 = (unsigned __int8 *)*((_QWORD *)appended + 1);
            if (v108)
            {
              v92 = v97 + 1;
              while (1)
              {
                v109 = *v92;
                  break;
                ++v92;
                v110 = *v108++;
                if (v109 != v110)
                  goto LABEL_586;
              }
              if (!*v108)
              {
                appended = (char *)*((_QWORD *)appended + 3);
                do
                {
                  j = v92;
                  v153 = *v92++;
                  v152 = v153;
                }
                if (v152)
                {
                  if (v152 != 62)
                  {
                    v104 = 13;
                    goto LABEL_614;
                  }
                  goto LABEL_176;
                }
                --v92;
                if (v91 == 62)
                  goto LABEL_176;
LABEL_597:
                v104 = 13;
                goto LABEL_613;
              }
              if (*v92)
                v225 = 0;
              else
                v225 = *v108 == v91;
              if (v225 && !v108[1])
                goto LABEL_597;
            }
LABEL_586:
            v104 = 14;
            goto LABEL_614;
          }
          j = v97 + 1;
          {
LABEL_564:
            v104 = 6;
            goto LABEL_614;
          }
          v229 = v90;
          v237 = v17;
          v136 = 0;
          v137 = v97 + 1;
          v138 = v97 + 3;
          v139 = 1;
          do
          {
            v140 = v139;
            v92 = v137;
            v141 = v138;
            v142 = v97[v136 + 1];
            ++v139;
            ++v136;
            ++v137;
            ++v138;
          }
          while ((v143 & 0x40) != 0);
          v144 = &v97[v140];
          if (!v142)
            goto LABEL_571;
          v145 = &v97[v136];
          if ((v97[1] & 0xDF) == 0x58 && (v97[2] & 0xDF) == 0x4D)
          {
            v147 = v136 == 4 && (v97[3] & 0xDF) == 76;
            if (v147)
              v148 = 256;
            else
              v148 = 1;
            if ((v148 & a5) == 0)
            {
              while (1)
              {
LABEL_293:
                if (v142 == 63)
                {
                  v142 = v145[1];
                  v151 = v91 == 62 && v142 == 0;
                  if (v142 == 62 || v151)
                  {
                    v50 = v142 == 62;
                    v183 = 1;
                    if (v50)
                      v183 = 2;
                    v92 = &v145[v183];
                    goto LABEL_454;
                  }
                }
                else
                {
                  if (!v142)
                  {
                    v104 = 6;
                    j = v145;
LABEL_560:
                    v17 = v237;
                    v90 = v229;
                    goto LABEL_614;
                  }
                  v142 = v145[1];
                }
                ++v145;
              }
            }
            if (v147)
            {
              if (!*((_QWORD *)appended + 3))
              {
                if (appended)
                {
                  v149 = 1;
                  goto LABEL_330;
                }
                j = v144;
LABEL_589:
                v104 = 3;
                v17 = v237;
                goto LABEL_590;
              }
LABEL_571:
              j = v144;
              goto LABEL_572;
            }
          }
          else if ((a5 & 1) == 0)
          {
            goto LABEL_293;
          }
          if (appended)
          {
            v149 = 0;
LABEL_330:
            v91 = v234;
            *((_QWORD *)appended + 1) = j;
            v157 = v97[v136];
            v97[v136] = 0;
            if (v157 == 63)
            {
              v158 = v97[v136 + 1];
              v160 = v234 == 62 && v158 == 0;
              if (v158 == 62 || v160)
              {
                if (v158 == 62)
                  v161 = v97 + 1;
                else
                  v161 = v97;
                v92 = &v161[v136 + 1];
                appended = (char *)*((_QWORD *)appended + 3);
LABEL_454:
                v17 = v237;
                v90 = v229;
                goto LABEL_455;
              }
              j = &v97[v136 + 1];
            }
            else
            {
              {
                do
                {
                  v178 = v141;
                  v180 = *++v92;
                  v179 = v180;
                  ++v141;
                }
                v17 = v237;
                v90 = v229;
                while (1)
                {
                  if (v179 == 63)
                  {
                    v179 = *v178;
                    v182 = v234 == 62 && v179 == 0;
                    if (v179 == 62 || v182)
                    {
                      if (v149)
                      {
                        *(v178 - 1) = 47;
                      }
                      else
                      {
                        *((_QWORD *)appended + 2) = v92;
                        appended = (char *)*((_QWORD *)appended + 3);
                        *(v178 - 1) = 0;
                        if (*v178 == 62)
                          v92 = v178 + 1;
                        else
                          v92 = v178;
                      }
LABEL_455:
                      if ((*(_QWORD *)appended & 0xFLL) == 7)
                      {
                        while (1)
                        {
                          do
                          {
LABEL_456:
                            j = v92;
                            v185 = *v92++;
                            v184 = v185;
                          }
                          while ((v186 & 8) != 0);
                          if ((v186 & 0x80) == 0)
                            break;
                          v116 = v20;
                          v117 = v90;
                          v187 = appended;
                          if (!v188)
                            goto LABEL_561;
                          v189 = v188;
                          *((_QWORD *)v188 + 1) = j;
                          v190 = j + 1;
                          v91 = v234;
                          while (1)
                          {
                            v191 = *(v190 - 1);
                            if ((v192 & 0x40) == 0)
                            {
                              --v190;
                              goto LABEL_467;
                            }
                            v191 = *v190;
                            if ((v192 & 0x40) == 0)
                              goto LABEL_467;
                            v191 = v190[1];
                            if ((v192 & 0x40) == 0)
                              break;
                            v191 = v190[2];
                            v190 += 4;
                            if ((v192 & 0x40) == 0)
                            {
                              v190 -= 2;
                              goto LABEL_467;
                            }
                          }
                          ++v190;
LABEL_467:
                          *v190 = 0;
                          j = v190 + 1;
                          if ((v192 & 8) != 0)
                          {
                            do
                            {
                              v193 = *j++;
                              v191 = v193;
                            }
                          }
                          if (v191 != 61)
                            goto LABEL_567;
                          do
                          {
                            v195 = *j++;
                            v194 = v195;
                          }
                          if (v194 != 34 && v194 != 39)
                          {
                            --j;
LABEL_567:
                            v104 = 12;
                            goto LABEL_568;
                          }
                          *((_QWORD *)v188 + 2) = j;
                          v196 = (unsigned __int8 *)v232(j, (char)v194);
                          if (!v196)
                          {
                            v223 = (unsigned __int8 **)(v189 + 16);
                            v104 = 12;
                            v91 = v234;
                            v90 = v117;
                            v20 = v116;
                            goto LABEL_565;
                          }
                          v92 = v196;
                          v91 = v234;
                          appended = v187;
                          v90 = v117;
                          v20 = v116;
                          if (v197 < 0)
                          {
                            v104 = 12;
                            goto LABEL_613;
                          }
                        }
                        if (v184 == 62)
                          goto LABEL_176;
                        if (v184 == 47)
                        {
                          if (*v92 == 62)
                          {
                            appended = (char *)*((_QWORD *)appended + 3);
                            v92 = j + 2;
                            goto LABEL_176;
                          }
                          v104 = 11;
                          if (v91 == 62 && !*v92)
                          {
                            appended = (char *)*((_QWORD *)appended + 3);
                            goto LABEL_176;
                          }
LABEL_613:
                          j = v92;
LABEL_614:
                          v217 = j - v20;
LABEL_615:
                          v227 = v217 == v90 && v91 == 0;
                          v228 = v217 - v227;
                          if (v217 >= 1)
                            v217 = v228;
                          goto LABEL_623;
                        }
                        v104 = 11;
                        if (v91 != 62)
                          goto LABEL_614;
                        v92 = j;
                        if (v184)
                          goto LABEL_614;
                      }
                      goto LABEL_176;
                    }
                  }
                  else
                  {
                    if (!v179)
                    {
                      j = v178 - 1;
                      goto LABEL_564;
                    }
                    v179 = *v178;
                  }
                  ++v178;
                }
              }
              j = v144 + 1;
            }
LABEL_572:
            v104 = 6;
            goto LABEL_560;
          }
          j = &v97[v136];
          goto LABEL_589;
        }
        v92 = v97 + 1;
        v114 = v97[1];
        if (v114 != 91)
        {
          if (v114 == 68)
          {
            if (v97[2] == 79 && v97[3] == 67 && v97[4] == 84 && v97[5] == 89 && v97[6] == 80)
            {
              v165 = v97[7];
              v166 = v91 == 69 && v165 == 0;
              v167 = v166;
              if (v165 == 69 || v167)
              {
                v168 = *((_QWORD *)appended + 3);
                if (v168)
                {
                  j = v97 - 1;
                  goto LABEL_605;
                }
                for (i = 68; ; i = *v92)
                {
                  if (i > 59)
                  {
                    if (i == 60)
                    {
                      v173 = v92[1];
                      if (v173 == 63)
                      {
                        for (j = v92 + 2; ; ++j)
                        {
                          if (*j == 63)
                          {
                            if (j[1] == 62)
                            {
                              v92 = j + 2;
                              goto LABEL_414;
                            }
                          }
                          else if (!*j)
                          {
                            goto LABEL_605;
                          }
                        }
                      }
                      if (v173 != 33)
                        goto LABEL_606;
                      v174 = v92[2];
                      if (v174 != 45)
                      {
                        if (v174 != 91)
                        {
                          ++v168;
                          v92 += 2;
                          continue;
                        }
                        v175 = 0;
                        v92 += 3;
LABEL_398:
                        for (v92 += 3; ; ++v92)
                        {
                          v176 = *(v92 - 3);
                          if (v176 == 60)
                          {
                            if (*(v92 - 2) == 33 && *(v92 - 1) == 91)
                            {
                              v177 = 1;
                              goto LABEL_411;
                            }
                          }
                          else if (v176 == 93)
                          {
                            if (*(v92 - 2) == 93 && *(v92 - 1) == 62)
                            {
                              if (!v175)
                                goto LABEL_414;
                              v177 = -1;
LABEL_411:
                              v175 += v177;
                              goto LABEL_398;
                            }
                          }
                          else if (!*(v92 - 3))
                          {
                            j = v92 - 3;
                            goto LABEL_605;
                          }
                        }
                      }
                      if (v92[3] != 45)
                      {
LABEL_606:
                        v104 = 9;
                        goto LABEL_613;
                      }
                      for (j = v92 + 4; ; ++j)
                      {
                        if (*j == 45)
                        {
                          if (j[1] == 45 && j[2] == 62)
                          {
                            v92 = j + 3;
                            goto LABEL_414;
                          }
                        }
                        else if (!*j)
                        {
                          goto LABEL_605;
                        }
                      }
                    }
                    if (i == 62)
                    {
                      if (!v168)
                      {
                        *v92++ = 0;
                        goto LABEL_528;
                      }
                      --v168;
                    }
LABEL_413:
                    ++v92;
                    continue;
                  }
                  if (i != 34 && i != 39)
                    break;
                  ++v92;
                  do
                  {
                    v171 = *v92++;
                    v170 = v171;
                    if (v171)
                      v172 = v170 == i;
                    else
                      v172 = 1;
                  }
                  while (!v172);
                  if (!v170)
                  {
                    j = v92 - 1;
LABEL_605:
                    v104 = 9;
                    goto LABEL_614;
                  }
LABEL_414:
                  ;
                }
                if (i)
                  goto LABEL_413;
                v104 = 9;
                if (v91 != 62)
                  goto LABEL_613;
                j = v92;
                if (v168)
                  goto LABEL_614;
LABEL_528:
                if ((a5 & 0x200) == 0)
                  goto LABEL_176;
                v229 = v90;
                v213 = v97 + 7;
                do
                  v214 = *++v213;
                v215 = appended;
                if (v216)
                {
                  *((_QWORD *)v216 + 2) = v213;
                  v90 = v229;
                  v91 = v234;
                  appended = v215;
                  goto LABEL_176;
                }
                v104 = 3;
                j = v92;
LABEL_590:
                v90 = v229;
                v91 = v234;
                goto LABEL_614;
              }
            }
          }
          else
          {
            if (v114 == 45)
            {
              if (v97[2] != 45)
              {
                j = v97 + 2;
LABEL_595:
                v104 = 7;
                goto LABEL_614;
              }
              j = v97 + 3;
              v115 = appended;
              if ((a5 & 2) == 0)
                goto LABEL_229;
              v116 = v20;
              v117 = v90;
              v118 = appended;
              if (v119)
              {
                v115 = v119;
                *((_QWORD *)v119 + 2) = j;
                v91 = v234;
                appended = v118;
                v90 = v117;
                v20 = v116;
LABEL_229:
                if ((a5 & 0x22) == 0x22)
                {
                  v120 = 0;
                  v121 = 0;
                  while (1)
                  {
                    while (1)
                    {
                      v122 = *j;
                      {
                        v123 = j;
                      }
                      else
                      {
                        v123 = j + 2;
                        while (1)
                        {
                          v122 = *(v123 - 1);
                          {
                            --v123;
                            goto LABEL_240;
                          }
                          v122 = *v123;
                            goto LABEL_240;
                          v122 = v123[1];
                            break;
                          v122 = v123[2];
                          v123 += 4;
                          {
                            v123 -= 2;
                            goto LABEL_240;
                          }
                        }
                        ++v123;
                      }
LABEL_240:
                      if ((_DWORD)v122 != 13)
                        break;
                      j = v123 + 1;
                      v124 = v123[1];
                      *v123 = 10;
                      if (v124 == 10)
                      {
                        if (v120)
                        {
                          v125 = v20;
                          v126 = v90;
                          v127 = appended;
                          v128 = j - v120;
                          v129 = v121;
                          memmove(&v120[-v121], v120, v128);
                          v121 = v129;
                          appended = v127;
                          v90 = v126;
                          v20 = v125;
                          v91 = v234;
                        }
                        j = v123 + 2;
                        ++v121;
                        v120 = v123 + 2;
                      }
                    }
                    if ((_DWORD)v122 == 45)
                    {
                      if (v123[1] == 45)
                      {
                        v130 = v123[2];
                        v131 = v91 == 62 && v130 == 0;
                        v132 = v131;
                        if (v130 == 62 || v132)
                        {
                          v205 = v123;
                          if (v120)
                          {
                            v206 = v20;
                            v207 = v90;
                            v208 = appended;
                            v209 = v121;
                            memmove(&v120[-v121], v120, v123 - v120);
                            appended = v208;
                            v90 = v207;
                            v20 = v206;
                            v91 = v234;
                            v205 = &v123[-v209];
                          }
                          *v205 = 0;
                          v210 = 2;
                          if (v123[2] == 62)
                            v210 = 3;
                          v92 = &v123[v210];
                          goto LABEL_176;
                        }
                      }
                    }
                    else if (!(_DWORD)v122)
                    {
                      v223 = (unsigned __int8 **)(v115 + 16);
                      v104 = 7;
                      goto LABEL_565;
                    }
                    j = v123 + 1;
                  }
                }
                while (1)
                {
                  if (*j == 45)
                  {
                    if (j[1] == 45)
                    {
                      v133 = j[2];
                      v134 = v91 == 62 && v133 == 0;
                      v135 = v134;
                      if (v133 == 62 || v135)
                      {
                        if ((a5 & 2) != 0)
                          *j = 0;
                        v211 = v133 == 62;
                        v212 = 2;
                        goto LABEL_521;
                      }
                    }
                  }
                  else if (!*j)
                  {
                    goto LABEL_595;
                  }
                  ++j;
                }
              }
LABEL_561:
              v104 = 3;
              v91 = v234;
LABEL_568:
              v90 = v117;
              v20 = v116;
              goto LABEL_614;
            }
            if (v91 == 45 && !v97[1])
            {
              v104 = 7;
              goto LABEL_613;
            }
            if (v91 == 91 && !v97[1])
            {
              v104 = 8;
              goto LABEL_613;
            }
          }
          v104 = 5;
          goto LABEL_613;
        }
        if (v97[2] == 67)
        {
          if (v97[3] == 68)
          {
            if (v97[4] == 65)
            {
              if (v97[5] == 84)
              {
                if (v97[6] == 65)
                {
                  if (v97[7] == 91)
                  {
                    j = v97 + 8;
                    if ((a5 & 4) == 0)
                    {
                      while (1)
                      {
                        if (*j == 93)
                        {
                          if (j[1] == 93)
                          {
                            v162 = j[2];
                            v163 = v91 == 62 && v162 == 0;
                            v164 = v163;
                            if (v162 == 62 || v164)
                            {
                              ++j;
                              goto LABEL_520;
                            }
                          }
                        }
                        else if (!*j)
                        {
                          goto LABEL_603;
                        }
                        ++j;
                      }
                    }
                    v116 = v20;
                    v117 = v90;
                    v198 = appended;
                    if (v199)
                    {
                      v200 = v199;
                      *((_QWORD *)v199 + 2) = j;
                      v91 = v234;
                      if ((a5 & 0x20) == 0)
                      {
                        appended = v198;
                        v90 = v117;
                        v20 = v116;
                        while (1)
                        {
                          if (*j == 93)
                          {
                            if (j[1] == 93)
                            {
                              v201 = j[2];
                              v202 = v234 == 62 && v201 == 0;
                              v203 = v202;
                              if (v201 == 62 || v203)
                              {
                                *j++ = 0;
                                goto LABEL_520;
                              }
                            }
                          }
                          else if (!*j)
                          {
                            goto LABEL_603;
                          }
                          ++j;
                        }
                      }
                      v91 = v234;
                      j = (unsigned __int8 *)v204;
                      appended = v198;
                      v90 = v117;
                      v20 = v116;
                      if (j)
                      {
LABEL_520:
                        v211 = j[1] == 62;
                        v212 = 1;
LABEL_521:
                        if (v211)
                          ++v212;
                        v92 = &j[v212];
                        goto LABEL_176;
                      }
                      v223 = (unsigned __int8 **)(v200 + 16);
                      v104 = 8;
LABEL_565:
                      v97 = *v223;
LABEL_535:
                      if (v97)
                      {
                        v217 = v97 - v20;
                        goto LABEL_615;
                      }
                      v217 = 0;
LABEL_623:
                      v19 = v238;
                      goto LABEL_624;
                    }
                    goto LABEL_561;
                  }
                  j = v97 + 7;
                }
                else
                {
                  j = v97 + 6;
                }
              }
              else
              {
                j = v97 + 5;
              }
            }
            else
            {
              j = v97 + 4;
            }
          }
          else
          {
            j = v97 + 3;
          }
        }
        else
        {
          j = v97 + 2;
        }
LABEL_603:
        v104 = 8;
        goto LABEL_614;
      }
      v111 = v90;
      if (!appended)
      {
        v104 = 3;
        j = v97;
        v91 = v234;
        v90 = v111;
        goto LABEL_614;
      }
      *((_QWORD *)appended + 1) = v97;
      j = v97 + 1;
      v91 = v234;
      v90 = v111;
      while (1)
      {
        v112 = *(j - 1);
        if ((v113 & 0x40) == 0)
        {
          --j;
          goto LABEL_313;
        }
        v112 = *j;
        if ((v113 & 0x40) == 0)
          goto LABEL_313;
        v112 = j[1];
        if ((v113 & 0x40) == 0)
          break;
        v112 = j[2];
        j += 4;
        if ((v113 & 0x40) == 0)
        {
          j -= 2;
          goto LABEL_313;
        }
      }
      ++j;
LABEL_313:
      *j = 0;
      v92 = j + 1;
      if (v112 != 62)
      {
        if ((v113 & 8) != 0)
          goto LABEL_456;
        if (v112)
        {
          if (v112 != 47
            || ((v154 = *v92, v234 == 62) ? (v155 = v154 == 0) : (v155 = 0),
                !v155 ? (v156 = 0) : (v156 = 1),
                v154 != 62 && !v156))
          {
            v104 = 11;
            goto LABEL_613;
          }
          appended = (char *)*((_QWORD *)appended + 3);
          if (v154 == 62)
            v92 = j + 2;
        }
        else
        {
          v92 = j;
          if (v234 != 62)
          {
            v104 = 11;
            goto LABEL_614;
          }
        }
      }
      goto LABEL_176;
    }
    {
      do
      {
        v98 = *++v92;
        v96 = v98;
      }
    }
    v99 = v96 == 60 || v96 == 0;
  }
  while (v99 && (!v94 || (a5 & 0x400) != 0 && (v96 != 60 || v92[1] != 47 || *((_QWORD *)appended + 4))));
  if ((a5 & 0x800) != 0)
    v97 = v92;
  v100 = *((_QWORD *)appended + 3);
  if ((a5 & 0x1000) != 0 || v100)
  {
    if ((a5 & 0x2000) != 0 && v100 && !*((_QWORD *)appended + 4) && !*((_QWORD *)appended + 2))
    {
      v103 = v90;
      v106 = appended;
      *((_QWORD *)appended + 2) = v97;
    }
    else
    {
      v103 = v90;
      v104 = 3;
      if (!v105)
      {
        v91 = v234;
        v90 = v103;
        goto LABEL_535;
      }
      *((_QWORD *)v105 + 2) = v97;
      v106 = (char *)*((_QWORD *)v105 + 3);
    }
    v97 = (unsigned __int8 *)v231(v97);
    v101 = *v97;
    v91 = v234;
    appended = v106;
    v90 = v103;
    if (!*v97)
      goto LABEL_533;
    goto LABEL_206;
  }
  while (*v97)
  {
    if (*v97 == 60)
      goto LABEL_198;
    ++v97;
  }
LABEL_533:
  if (appended != v235)
  {
    v104 = 14;
    goto LABEL_535;
  }
  if (v91 == 60)
  {
    *(_DWORD *)v17 = 5;
    *(_QWORD *)(v17 + 8) = v90;
    v19 = v238;
    goto LABEL_625;
  }
  v19 = v238;
  if ((a5 & 0x1000) != 0)
  {
LABEL_547:
    v104 = 0;
    v217 = 0;
LABEL_624:
    *(_DWORD *)v17 = v104;
    *(_QWORD *)(v17 + 8) = v217;
    goto LABEL_625;
  }
  v218 = (_QWORD **)(v230 + 48);
  if (!v230)
    v218 = (_QWORD **)(a2 + 32);
  v219 = *v218;
  if (v219)
  {
    while ((*v219 & 0xFLL) != 2)
    {
      v219 = (_QWORD *)v219[6];
      if (!v219)
        goto LABEL_546;
    }
    goto LABEL_547;
  }
LABEL_546:
  *(_DWORD *)v17 = 16;
  *(_QWORD *)(v17 + 8) = v90;
LABEL_625:
  *(_DWORD *)(v17 + 16) = v19;
}

const char *pugi::xml_parse_result::description(pugi::xml_parse_result *this)
{
  uint64_t v1;

  v1 = *(int *)this;
  if (v1 > 0x10)
    return "Unknown error";
  else
    return off_24FDF4D38[v1];
}

_QWORD *pugi::xml_document::_destroy(pugi::xml_document *this)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 1) = 0;
  }
  v3 = *(_QWORD **)this;
  v4 = *(_QWORD *)(*(_QWORD *)this + 88);
  if (v4)
  {
    do
    {
      if (*(_QWORD *)v4)
        free(*(void **)v4);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
    v3 = *(_QWORD **)this;
  }
  result = *(_QWORD **)((char *)v3 - (*v3 >> 8) + 16);
  if (result)
  {
    do
    {
      v6 = (_QWORD *)result[2];
      free(result);
      result = v6;
    }
    while (v6);
  }
  *(_QWORD *)this = 0;
  return result;
}

void pugi::xml_document::load(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  int v11;
  unint64_t v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t buffer_encoding;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;

  pugi::xml_document::_destroy((pugi::xml_document *)a1);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 32728;
  *(_QWORD *)(a1 + 56) = 10241;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 16) = a1 + 120;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 16;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 32728;
  *(_QWORD *)a1 = a1 + 56;
  *(_QWORD *)(a1 + 96) = a1 + 56;
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    *(_DWORD *)(a5 + 16) = 0;
    *(_DWORD *)a5 = 2;
LABEL_42:
    *(_QWORD *)(a5 + 8) = 0;
    return;
  }
  v30 = a4;
  std::istream::tellg();
  if (v32 < 0)
  {
    std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), 0);
    v29 = a3;
    v14 = 0;
    v12 = 0;
    v15 = 0;
    v16 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
    while ((v16 & 2) == 0)
    {
      v10 = v17;
      if (!v17)
        goto LABEL_36;
      *v17 = 0;
      v17[1] = 0;
      v18 = v17;
      if (v15)
      {
        *v15 = v17;
        v18 = v14;
      }
      std::istream::read();
      v19 = a2[1];
      v10[1] = v19;
      v16 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
      if ((v16 & 1) != 0 || (v16 & 2) == 0 && (v16 & 5) != 0)
      {
        v10 = 0;
        v12 = 0;
        v11 = 2;
        goto LABEL_29;
      }
      v20 = __CFADD__(v19, v12);
      v21 = v19 + v12;
      v22 = v20;
      if (v21 > v12)
        v12 = v21;
      v14 = v18;
      v15 = v10;
      if ((v22 & 1) != 0)
      {
        v10 = 0;
        v12 = 0;
        v11 = 3;
LABEL_29:
        v14 = v18;
        goto LABEL_37;
      }
    }
    v10 = v23;
    if (v23)
    {
      if (!v14)
      {
        a3 = v29;
        goto LABEL_46;
      }
      v24 = v14;
      v25 = (char *)v23;
      do
      {
        memcpy(v25, v24 + 2, v24[1]);
        v26 = v24;
        v24 = (_QWORD *)*v24;
        v25 += v26[1];
      }
      while (v24);
      v11 = 0;
    }
    else
    {
LABEL_36:
      v12 = 0;
      v11 = 3;
    }
LABEL_37:
    if (v14)
    {
      do
      {
        v27 = (_QWORD *)*v14;
        free(v14);
        v14 = v27;
      }
      while (v27);
    }
    a3 = v29;
    goto LABEL_40;
  }
  std::istream::tellg();
  std::istream::seekg();
  std::istream::tellg();
  std::istream::seekg();
  v10 = 0;
  v11 = 2;
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    goto LABEL_41;
  v12 = 0;
  if (v32 < 0)
  {
LABEL_40:
    if (v11)
      goto LABEL_41;
    goto LABEL_46;
  }
  if (v31 - v32 < 0
  {
    v11 = 3;
    goto LABEL_41;
  }
  std::istream::read();
  v13 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
  if ((v13 & 1) != 0 || (v13 & 2) == 0 && (v13 & 5) != 0)
  {
    free(v10);
LABEL_41:
    *(_DWORD *)(a5 + 16) = 0;
    *(_DWORD *)a5 = v11;
    goto LABEL_42;
  }
  v12 = a2[1];
LABEL_46:
  if ((_DWORD)buffer_encoding == 1)
    *((_BYTE *)v10 + v12++) = 0;
}

void sub_2300CAE04(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;

  if (v1)
  {
    do
    {
      v3 = (_QWORD *)*v1;
      free(v1);
      v1 = v3;
    }
    while (v3);
  }
  _Unwind_Resume(exception_object);
}

void pugi::xml_document::load_file(uint64_t a1@<X0>, const char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  FILE *v10;

  pugi::xml_document::_destroy((pugi::xml_document *)a1);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 32728;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 56) = 10241;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 16) = a1 + 120;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 16;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 32728;
  *(_QWORD *)a1 = a1 + 56;
  *(_QWORD *)(a1 + 96) = a1 + 56;
  v10 = fopen(a2, "rb");
  if (v10)
    fclose(v10);
}

void sub_2300CAF20(_Unwind_Exception *exception_object)
{
  FILE *v1;

  if (v1)
    fclose(v1);
  _Unwind_Resume(exception_object);
}

void pugi::impl::`anonymous namespace'::load_file_impl(FILE *a1@<X1>, char *a2@<X0>, unsigned int a3@<W2>, uint64_t a4@<X3>, unsigned __int8 **a5@<X4>, uint64_t a6@<X8>)
{
  size_t v12;
  void *v13;
  void *v14;
  uint64_t buffer_encoding;
  int v16;

  if (!a1)
  {
    *(_DWORD *)(a6 + 16) = 0;
    v16 = 1;
LABEL_12:
    *(_DWORD *)a6 = v16;
    goto LABEL_13;
  }
  fseek(a1, 0, 2);
  v12 = MEMORY[0x2348B508C](a1);
  fseek(a1, 0, 0);
  if ((v12 & 0x8000000000000000) != 0)
  {
    *(_DWORD *)(a6 + 16) = 0;
    *(_DWORD *)a6 = 2;
LABEL_13:
    *(_QWORD *)(a6 + 8) = 0;
    return;
  }
  if (!v13)
  {
    *(_DWORD *)(a6 + 16) = 0;
    v16 = 3;
    goto LABEL_12;
  }
  v14 = v13;
  if (fread(v13, 1uLL, v12, a1) != v12)
  {
    free(v14);
    *(_DWORD *)(a6 + 16) = 0;
    v16 = 2;
    goto LABEL_12;
  }
  if ((_DWORD)buffer_encoding == 1)
    *((_BYTE *)v14 + v12++) = 0;
}

uint64_t pugi::xml_document::save(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  unsigned int v4;
  unsigned int v5;
  char v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t i;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *__s;
  char v35[10240];
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v6 = v3;
  __s = v7;
  v8 = (uint64_t *)v2;
  v39 = *MEMORY[0x24BDAC8D0];
  v36 = v9;
  v37 = 0;
  v10 = v4;
  if (v4 <= 8)
  {
    v10 = v4;
    if (((0x191u >> v4) & 1) != 0)
      v10 = dword_230214130[v4];
  }
  v38 = v10;
  if ((v3 & 2) != 0 && v4 != 9)
  {
    *(_WORD *)v35 = -17425;
    v35[2] = -65;
    v37 = 3;
  }
  if ((v3 & 8) == 0)
  {
    for (i = *(_QWORD *)(*(_QWORD *)v2 + 32); i; i = *(_QWORD *)(i + 48))
    {
      if ((*(_DWORD *)i & 0xF) == 2)
        break;
      if ((*(_DWORD *)i & 0xF) == 7)
        goto LABEL_20;
    }
    if (v5 == 9)
    v12 = v37;
    if (v37 >= 0x7FF)
    {
      v12 = 0;
    }
    *(_WORD *)&v35[v12] = 15935;
    v13 = v12 + 2;
    v37 = v12 + 2;
    if ((v6 & 4) == 0)
    {
      if (v12 >= 0x7FE)
      {
        v13 = 0;
      }
      v35[v13] = 10;
      v37 = v13 + 1;
    }
  }
LABEL_20:
  v14 = 0;
  v15 = *v8;
  if ((v6 & 0x41) != 0 && (v6 & 4) == 0)
    v14 = strlen(__s);
  v16 = 0;
  v17 = 2;
  v18 = v15;
  do
  {
    if ((*(_DWORD *)v18 & 0xFu) - 3 <= 1)
    {
      v17 = 0;
      goto LABEL_80;
    }
    if ((v6 & 4) == 0 && (v17 & 1) != 0)
    {
      v19 = v37;
      if (v37 >= 0x800)
      {
        v19 = 0;
      }
      v35[v19] = 10;
      v37 = v19 + 1;
    }
    if ((v17 & 2) != 0 && v14)
    if ((*(_DWORD *)v18 & 0xF) == 1)
    {
      v24 = *(_QWORD *)(v18 + 32);
      v17 = 2;
      if (v24)
        goto LABEL_59;
      do
      {
LABEL_80:
        if (v18 == v15)
          goto LABEL_94;
        v24 = *(_QWORD *)(v18 + 48);
        if (v24)
          goto LABEL_59;
        v18 = *(_QWORD *)(v18 + 24);
      }
      while ((*(_QWORD *)v18 & 0xFLL) != 2);
      if ((v6 & 4) == 0 && (v17 & 1) != 0)
      {
        v31 = v37;
        if (v37 >= 0x800)
        {
          v31 = 0;
        }
        v35[v31] = 10;
        v37 = v31 + 1;
      }
      --v16;
      if ((v17 & 2) != 0 && v14)
      if (*(_QWORD *)(v18 + 8))
        v20 = *(const char **)(v18 + 8);
      else
        v20 = ":anonymous";
LABEL_72:
      v29 = v37;
      if (v37 >= 0x7FF)
      {
        v29 = 0;
      }
      *(_WORD *)&v35[v29] = 12092;
      v28 = v29 + 2;
      goto LABEL_75;
    }
    if ((*(_DWORD *)v18 & 0xF) != 2)
    {
      goto LABEL_79;
    }
    if (*(_QWORD *)(v18 + 8))
      v20 = *(const char **)(v18 + 8);
    else
      v20 = ":anonymous";
    v21 = v37;
    if (v37 >= 0x800)
    {
      v21 = 0;
    }
    v35[v21] = 60;
    v37 = v21 + 1;
    v22 = *(_QWORD **)(v18 + 56);
    if (v22)
    if (*(_QWORD *)(v18 + 16))
    {
      v23 = v37;
      if (v37 >= 0x800)
      {
        v23 = 0;
      }
      v35[v23] = 62;
      v37 = v23 + 1;
      v24 = *(_QWORD *)(v18 + 32);
      if (!v24)
        goto LABEL_72;
      goto LABEL_55;
    }
    v25 = v37;
    if (!*(_QWORD *)(v18 + 32))
    {
      if ((v6 & 0x80) == 0)
      {
        if ((v6 & 4) == 0)
        {
          if (v37 >= 0x800)
          {
            v25 = 0;
          }
          v35[v25++] = 32;
          v37 = v25;
        }
        if (v25 >= 0x7FF)
        {
          v25 = 0;
        }
        *(_WORD *)&v35[v25] = 15919;
        v26 = v25 + 2;
LABEL_78:
        v37 = v26;
LABEL_79:
        v17 = 3;
        goto LABEL_80;
      }
      if (v37 >= 0x7FE)
      {
        v25 = 0;
      }
      v27 = &v35[v25];
      *(_WORD *)v27 = 15422;
      v27[2] = 47;
      v28 = v25 + 3;
LABEL_75:
      v37 = v28;
      v30 = v37;
      if (v37 >= 0x800)
      {
        v30 = 0;
      }
      v35[v30] = 62;
      v26 = v30 + 1;
      goto LABEL_78;
    }
    if (v37 >= 0x800)
    {
      v25 = 0;
    }
    v35[v25] = 62;
    v37 = v25 + 1;
    v24 = *(_QWORD *)(v18 + 32);
LABEL_55:
    if (*(_QWORD *)(v18 + 16))
      v17 = 0;
    else
      v17 = 3;
    ++v16;
LABEL_59:
    v18 = v24;
  }
  while (v24 != v15);
LABEL_94:
  v32 = v37;
  if ((v6 & 4) == 0 && (v17 & 1) != 0)
  {
    if (v37 >= 0x800)
    {
      v32 = 0;
    }
    v35[v32++] = 10;
    v37 = v32;
  }
}

unint64_t *pugi::impl::`anonymous namespace'::xml_buffered_writer::write_string(unint64_t *this, const char *__s)
{
  pugi::impl::_anonymous_namespace_::xml_buffered_writer *v2;
  unint64_t v3;
  int v4;
  _BOOL4 v5;
  unint64_t v6;
  int v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  size_t v13;

  v2 = (pugi::impl::_anonymous_namespace_::xml_buffered_writer *)this;
  v3 = this[1281];
  LOBYTE(v4) = *__s;
  v5 = v3 < 0x800;
  if (*__s && v3 <= 0x7FF)
  {
    do
    {
      v6 = v3;
      *((_BYTE *)this + v3) = v4;
      v7 = *(unsigned __int8 *)++__s;
      v4 = v7;
      v5 = v3++ < 0x7FF;
    }
    while (v6 <= 0x7FE && v4);
  }
  if (v5)
  {
    this[1281] = v3;
  }
  else
  {
    v9 = v3 - this[1281];
    if (v9 >= 5)
    {
      v11 = -1;
      while ((__s[v11] & 0xC0) == 0x80)
      {
        if (--v11 == -5)
        {
          v10 = v3 - this[1281];
          goto LABEL_17;
        }
      }
      v10 = v9 + v11;
    }
    else
    {
      v10 = 0;
    }
LABEL_17:
    this[1281] += v10;
    v12 = &__s[-(v9 - v10)];
    v13 = strlen(__s) + v9 - v10;
  }
  return this;
}

void pugi::xml_writer_stream::~xml_writer_stream(pugi::xml_writer_stream *this)
{
  JUMPOUT(0x2348B4E1CLL);
}

char *pugi::impl::`anonymous namespace'::append_new_node(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  char *result;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a2[1];
  if ((unint64_t)(v5 + 64) > 0x7FD8)
  {
    v11 = 0;
    if (!result)
      return result;
    v6 = v11;
  }
  else
  {
    v6 = *a2;
    result = (char *)(*a2 + v5 + 40);
    a2[1] = v5 + 64;
  }
  *((_QWORD *)result + 7) = 0;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_QWORD *)result = a3 | ((_QWORD)&result[-v6] << 8);
  *((_QWORD *)result + 3) = a1;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 40);
    v9 = (char **)(v8 + 40);
    *(_QWORD *)(v10 + 48) = result;
    *((_QWORD *)result + 5) = v10;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = result;
    v9 = (char **)(result + 40);
  }
  *v9 = result;
  return result;
}

char *pugi::impl::`anonymous namespace'::append_new_attribute(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  if ((unint64_t)(v3 + 40) > 0x7FD8)
  {
    v9 = 0;
    if (!result)
      return result;
    v4 = v9;
  }
  else
  {
    v4 = *a2;
    result = (char *)(*a2 + v3 + 40);
    a2[1] = v3 + 40;
  }
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_QWORD *)result = (_QWORD)&result[-v4] << 8;
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 24);
    v7 = (char **)(v6 + 24);
    *(_QWORD *)(v8 + 32) = result;
    *((_QWORD *)result + 3) = v8;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = result;
    v7 = (char **)(result + 24);
  }
  *v7 = result;
  return result;
}

void pugi::impl::`anonymous namespace'::xml_allocator::deallocate_memory(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD **)a1 == a3)
  {
    v3 = *(_QWORD *)(a1 + 8);
    a3[3] = v3;
  }
  else
  {
    v3 = a3[3];
  }
  v4 = a3[4] + a2;
  a3[4] = v4;
  if (v4 == v3)
  {
    v5 = a3[2];
    if (v5)
    {
      v6 = a3[1];
      *(_QWORD *)(v6 + 16) = v5;
      *(_QWORD *)(a3[2] + 8) = v6;
      free(a3);
    }
    else
    {
      a3[3] = 0;
      a3[4] = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
}

char *pugi::impl::`anonymous namespace'::xml_allocator::allocate_memory_oob(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char *result;
  unint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  if (a2 >= 0x1FF7)
    v6 = a2 + 40;
  else
    v6 = 0x8000;
  if (result)
  {
    *((_QWORD *)result + 4) = 0;
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *(_QWORD *)result = **(_QWORD **)a1;
    *a3 = result;
    if (a2 > 0x1FF6)
    {
      v11 = *(_QWORD **)a1;
      *((_QWORD *)result + 1) = *(_QWORD *)(*(_QWORD *)a1 + 8);
      *((_QWORD *)result + 2) = v11;
      *(_QWORD *)(v11[1] + 16) = result;
      v11[1] = result;
      v8 = (unint64_t *)(result + 24);
    }
    else
    {
      v8 = (unint64_t *)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_QWORD **)a1;
      *((_QWORD *)result + 1) = *(_QWORD *)a1;
      v10[2] = result;
      v10[3] = v9;
      *(_QWORD *)a1 = result;
    }
    *v8 = a2;
    result += 40;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t pugi::impl::`anonymous namespace'::get_buffer_encoding(uint64_t result, unsigned __int8 *a2, unint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v9;
  BOOL v12;
  BOOL v13;
  char v14;
  BOOL v15;
  int v16;
  char v17;
  char v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;

  switch((int)result)
  {
    case 0:
      if (a3 < 4)
        return 1;
      v3 = *a2;
      v4 = a2[1];
      v5 = a2[2];
      v6 = a2[3];
      v7 = (v3 | v4) == 0;
      if (!(v3 | v4) && v5 == 254 && v6 == 255)
        return 6;
      v9 = v3 == 255 && v4 == 254;
      if (v9 && v5 == 0 && v6 == 0)
        return 5;
      v12 = v3 == 254 && v4 == 255 || v9;
      if (v3 == 254 && v4 == 255)
        result = 3;
      else
        result = 2;
      if (v12)
        return result;
      if (v3 == 239 && v4 == 187 && v5 == 191)
        return 1;
      if (a2[2])
        v7 = 0;
      if (v7 && v6 == 60)
        return 6;
      v13 = v3 == 60 && v4 == 0;
      v14 = v13;
      if (v13 && !a2[2] && !a2[3])
        return 5;
      if (*a2)
        v15 = 0;
      else
        v15 = v4 == 60;
      v16 = v15;
      if (v15 && !a2[2] && v6 == 63)
        return 3;
      if (v5 == 63)
        v17 = v14;
      else
        v17 = 0;
      v18 = v14 | v16;
      if (v16)
        v19 = 3;
      else
        v19 = 2;
      if ((v17 & (v6 == 0)) != 0)
        result = 2;
      else
        result = v19;
      if ((v18 & 1) != 0)
        return result;
      if (a3 < 6
        || v3 != 60
        || v4 != 63
        || v5 != 120
        || v6 != 109
        || a2[4] != 108
        || a3 < 8
      {
        return 1;
      }
      v20 = a2 + 13;
      v21 = 14;
      break;
    case 4:
      return 2;
    case 7:
    case 8:
      return 5;
    default:
      return result;
  }
  while (1)
  {
    v22 = v20[v21 - 21];
    if (v22 != 101)
    {
      if (v22 == 63)
        return 1;
      goto LABEL_79;
    }
    if (v20[v21 - 20] == 110)
      break;
LABEL_79:
    ++v21;
    if (7 - a3 + v21 == 14)
      return 1;
  }
  if (v21 - 8 < a3
    && v21 - 6 < a3
    && a2[v21 - 6] == 99
    && v21 - 5 < a3
    && a2[v21 - 5] == 111
    && v21 - 4 < a3
    && a2[v21 - 4] == 100
    && v21 - 3 < a3
    && a2[v21 - 3] == 105
    && v21 - 2 < a3
    && a2[v21 - 2] == 110
    && v21 - 1 < a3
    && a2[v21 - 1] == 103
    && v21 < a3)
  {
    while (1)
    {
      v23 = a2[v21];
        break;
      if (a3 == ++v21)
        return 1;
    }
    if ((_DWORD)v23 == 61)
    {
      v24 = v21 - 14;
      while (v24 + 15 < a3)
      {
        v25 = a2[v24++ + 15];
        {
          if ((_DWORD)v25 == 34)
            v26 = 34;
          else
            v26 = 39;
          v27 = v24 + 15;
          if (v26 != (_DWORD)v25 || v27 >= a3)
            return 1;
          v29 = 0;
          v30 = &a2[v24 + 15];
          v31 = a2 + 15;
          while (1)
          {
            v33 = *v30++;
            v32 = v33;
              break;
            ++v27;
            ++v29;
            if (v27 >= a3)
              return 1;
          }
          if (v26 != v32)
            return 1;
          if (v29 == 6)
          {
            if ((v31[v24] & 0xDF) != 0x4C
              || (a2[v24 + 16] & 0xDF) != 0x41
              || (a2[v24 + 17] & 0xDF) != 0x54
              || (a2[v24 + 18] & 0xDF) != 0x49
              || (a2[v24 + 19] & 0xDF) != 0x4E)
            {
              return 1;
            }
            v34 = a2[v24 + 20];
          }
          else
          {
            if (v29 != 10
              || (v31[v24] & 0xDF) != 0x49
              || (a2[v24 + 16] & 0xDF) != 0x53
              || (a2[v24 + 17] & 0xDF) != 0x4F
              || a2[v24 + 18] != 45
              || a2[v24 + 19] != 56
              || a2[v24 + 20] != 56
              || a2[v24 + 21] != 53
              || a2[v24 + 22] != 57
              || a2[v24 + 23] != 45)
            {
              return 1;
            }
            v34 = a2[v24 + 24];
          }
          if (v34 != 49)
            return 1;
          return 9;
        }
      }
    }
  }
  return 1;
}

uint64_t pugi::impl::`anonymous namespace'::utf8_writer::low(pugi::impl::_anonymous_namespace_::utf8_writer *this, unsigned __int8 *a2)
{
  uint64_t v2;

  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      *(_BYTE *)this = (a2 >> 12) | 0xE0;
      *((_BYTE *)this + 1) = (a2 >> 6) & 0x3F | 0x80;
      *((_BYTE *)this + 2) = a2 & 0x3F | 0x80;
      v2 = 3;
    }
    else
    {
      *(_BYTE *)this = (a2 >> 6) | 0xC0;
      *((_BYTE *)this + 1) = a2 & 0x3F | 0x80;
      v2 = 2;
    }
  }
  else
  {
    *(_BYTE *)this = (_BYTE)a2;
    v2 = 1;
  }
  return (uint64_t)this + v2;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_attribute_impl<pugi::impl::`anonymous namespace'::opt_false>::parse_simple(unsigned __int8 *a1, unsigned __int8 a2)
{
  int v2;
  unsigned __int8 *v3;
  char v4;

  while (1)
  {
    do
    {
      v2 = *a1;
        goto LABEL_6;
      v3 = a1 + 1;
      v2 = a1[1];
        break;
      v3 = a1 + 2;
      v2 = a1[2];
        break;
      v3 = a1 + 3;
      v2 = a1[3];
      a1 += 4;
    }
    while ((v4 & 2) == 0);
    a1 = v3;
LABEL_6:
    if (v2 == a2)
    {
      *a1 = 0;
      return a1 + 1;
    }
    if (!v2)
      return 0;
    ++a1;
  }
}

uint64_t pugi::impl::`anonymous namespace'::strconv_attribute_impl<pugi::impl::`anonymous namespace'::opt_true>::parse_simple(pugi::impl::_anonymous_namespace_::utf8_writer *this, unsigned __int8 a2)
{
  int v3;
  int v4;
  pugi::impl::_anonymous_namespace_::utf8_writer *v5;
  char v6;
  pugi::impl::_anonymous_namespace_::utf8_writer *v7;
  uint64_t v8;
  void *__src;
  uint64_t v11;

  v3 = a2;
  __src = 0;
  v11 = 0;
  while (1)
  {
    do
    {
      v4 = *(unsigned __int8 *)this;
        goto LABEL_7;
      v5 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 1);
      v4 = *((unsigned __int8 *)this + 1);
        break;
      v5 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 2);
      v4 = *((unsigned __int8 *)this + 2);
        break;
      v5 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 3);
      v4 = *((unsigned __int8 *)this + 3);
      this = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 4);
    }
    while ((v6 & 2) == 0);
    this = v5;
LABEL_7:
    if (v4 == v3)
      break;
    if (v4 == 38)
    {
    }
    else
    {
      if (!v4)
        return 0;
      this = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 1);
    }
  }
  v7 = this;
  if (__src)
  {
    v8 = v11;
    memmove((char *)__src - v11, __src, this - (pugi::impl::_anonymous_namespace_::utf8_writer *)__src);
    v7 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this - v8);
  }
  *(_BYTE *)v7 = 0;
  return (uint64_t)this + 1;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_attribute_impl<pugi::impl::`anonymous namespace'::opt_false>::parse_eol(unsigned __int8 *a1, unsigned __int8 a2)
{
  char *v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  char v8;
  int v9;
  unsigned __int8 *v10;

  v3 = 0;
  v4 = 0;
  v5 = a2;
  while (1)
  {
    v6 = *a1;
    {
      v7 = a1;
    }
    else
    {
      v7 = a1 + 2;
      while (1)
      {
        v6 = *(v7 - 1);
        {
          --v7;
          goto LABEL_11;
        }
        v6 = *v7;
          goto LABEL_11;
        v6 = v7[1];
          break;
        v6 = v7[2];
        v7 += 4;
        if ((v8 & 2) != 0)
        {
          v7 -= 2;
          goto LABEL_11;
        }
      }
      ++v7;
    }
LABEL_11:
    if (v6 == v5)
      break;
    if (v6 == 13)
    {
      a1 = v7 + 1;
      v9 = v7[1];
      *v7 = 10;
      if (v9 == 10)
      {
        if (v3)
          memmove(&v3[-v4], v3, a1 - (unsigned __int8 *)v3);
        a1 = v7 + 2;
        ++v4;
        v3 = (char *)(v7 + 2);
      }
    }
    else
    {
      if (!v6)
        return 0;
      a1 = v7 + 1;
    }
  }
  v10 = v7;
  if (v3)
  {
    memmove(&v3[-v4], v3, v7 - (unsigned __int8 *)v3);
    v10 = &v7[-v4];
  }
  *v10 = 0;
  return v7 + 1;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_attribute_impl<pugi::impl::`anonymous namespace'::opt_true>::parse_eol(char *a1, unsigned __int8 a2)
{
  int v2;
  int v3;
  unsigned __int8 *v4;
  char v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  void *__src;
  uint64_t v12;

  v2 = a2;
  __src = 0;
  v12 = 0;
  while (1)
  {
    v3 = *a1;
    {
      v4 = (unsigned __int8 *)a1;
    }
    else
    {
      v4 = (unsigned __int8 *)(a1 + 2);
      while (1)
      {
        v3 = *(v4 - 1);
        {
          --v4;
          goto LABEL_11;
        }
        v3 = *v4;
          goto LABEL_11;
        v3 = v4[1];
          break;
        v3 = v4[2];
        v4 += 4;
        if ((v5 & 2) != 0)
        {
          v4 -= 2;
          goto LABEL_11;
        }
      }
      ++v4;
    }
LABEL_11:
    if (v3 == v2)
      break;
    switch(v3)
    {
      case 13:
        a1 = (char *)(v4 + 1);
        v6 = v4[1];
        *v4 = 10;
        if (v6 == 10)
        {
          v7 = v12;
          if (__src)
            memmove((char *)__src - v12, __src, a1 - (_BYTE *)__src);
          a1 = (char *)(v4 + 2);
          __src = v4 + 2;
          v12 = v7 + 1;
        }
        break;
      case 38:
        break;
      case 0:
        return 0;
      default:
        a1 = (char *)(v4 + 1);
        break;
    }
  }
  v8 = v4;
  if (__src)
  {
    v9 = v12;
    memmove((char *)__src - v12, __src, v4 - (_BYTE *)__src);
    v8 = &v4[-v9];
  }
  *v8 = 0;
  return v4 + 1;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_attribute_impl<pugi::impl::`anonymous namespace'::opt_false>::parse_wconv(unsigned __int8 *a1, unsigned __int8 a2)
{
  char *v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  v3 = 0;
  v4 = 0;
  v5 = a2;
  while (1)
  {
    v6 = *a1;
    if ((v7 & 4) != 0)
    {
      v8 = a1;
    }
    else
    {
      v8 = a1 + 2;
      while (1)
      {
        v6 = *(v8 - 1);
        if ((v7 & 4) != 0)
        {
          --v8;
          goto LABEL_11;
        }
        v6 = *v8;
        if ((v7 & 4) != 0)
          goto LABEL_11;
        v6 = v8[1];
        if ((v7 & 4) != 0)
          break;
        v6 = v8[2];
        v8 += 4;
        if ((v7 & 4) != 0)
        {
          v8 -= 2;
          goto LABEL_11;
        }
      }
      ++v8;
    }
LABEL_11:
    if (v6 == v5)
      break;
    if ((v7 & 8) != 0)
    {
      *v8 = 32;
      a1 = v8 + 1;
      if (v6 == 13 && *a1 == 10)
      {
        if (v3)
          memmove(&v3[-v4], v3, a1 - (unsigned __int8 *)v3);
        a1 = v8 + 2;
        ++v4;
        v3 = (char *)(v8 + 2);
      }
    }
    else
    {
      if (!v6)
        return 0;
      a1 = v8 + 1;
    }
  }
  v9 = v8;
  if (v3)
  {
    memmove(&v3[-v4], v3, v8 - (unsigned __int8 *)v3);
    v9 = &v8[-v4];
  }
  *v9 = 0;
  return v8 + 1;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_attribute_impl<pugi::impl::`anonymous namespace'::opt_true>::parse_wconv(char *a1, unsigned __int8 a2)
{
  int v2;
  int v3;
  char v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  void *__src;
  uint64_t v11;

  v2 = a2;
  __src = 0;
  v11 = 0;
  while (1)
  {
    v3 = *a1;
    if ((v4 & 4) != 0)
    {
      v5 = (unsigned __int8 *)a1;
    }
    else
    {
      v5 = (unsigned __int8 *)(a1 + 2);
      while (1)
      {
        v3 = *(v5 - 1);
        if ((v4 & 4) != 0)
        {
          --v5;
          goto LABEL_11;
        }
        v3 = *v5;
        if ((v4 & 4) != 0)
          goto LABEL_11;
        v3 = v5[1];
        if ((v4 & 4) != 0)
          break;
        v3 = v5[2];
        v5 += 4;
        if ((v4 & 4) != 0)
        {
          v5 -= 2;
          goto LABEL_11;
        }
      }
      ++v5;
    }
LABEL_11:
    if (v3 == v2)
      break;
    if ((v4 & 8) != 0)
    {
      *v5 = 32;
      a1 = (char *)(v5 + 1);
      if (v3 == 13 && *a1 == 10)
      {
        v6 = v11;
        if (__src)
          memmove((char *)__src - v11, __src, a1 - (_BYTE *)__src);
        a1 = (char *)(v5 + 2);
        __src = v5 + 2;
        v11 = v6 + 1;
      }
    }
    else if (v3 == 38)
    {
    }
    else
    {
      if (!v3)
        return 0;
      a1 = (char *)(v5 + 1);
    }
  }
  v7 = v5;
  if (__src)
  {
    v8 = v11;
    memmove((char *)__src - v11, __src, v5 - (_BYTE *)__src);
    v7 = &v5[-v8];
  }
  *v7 = 0;
  return v5 + 1;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_attribute_impl<pugi::impl::`anonymous namespace'::opt_false>::parse_wnorm(unsigned __int8 *a1, unsigned __int8 a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  char v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;

  v2 = a1;
  {
    v4 = 0;
    do
    while ((v5 & 8) != 0);
    v2 = &a1[v4];
    v3 = &a1[v4];
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v6 = a2;
LABEL_7:
  v7 = v4;
  v8 = v3;
  v9 = v2;
  while (1)
  {
    v10 = *v9;
    if ((v11 & 0xC) != 0)
    {
      v12 = v9;
    }
    else
    {
      v12 = v9 + 2;
      while (1)
      {
        v10 = *(v12 - 1);
        if ((v11 & 0xC) != 0)
        {
          --v12;
          goto LABEL_17;
        }
        v10 = *v12;
        if ((v11 & 0xC) != 0)
          goto LABEL_17;
        v10 = v12[1];
        if ((v11 & 0xC) != 0)
          break;
        v10 = v12[2];
        v12 += 4;
        if ((v11 & 0xC) != 0)
        {
          v12 -= 2;
          goto LABEL_17;
        }
      }
      ++v12;
    }
LABEL_17:
    if (v10 == v6)
      break;
    if ((v11 & 8) != 0)
    {
      v9 = v12 + 1;
      v13 = v12[1];
      *v12 = 32;
      {
        v2 = v12 + 1;
        do
        {
          v14 = *++v2;
          ++v4;
        }
        v3 = v2;
        if (v8)
        {
          memmove(&v8[-v7], v8, v9 - v8);
          v3 = v2;
        }
        goto LABEL_7;
      }
    }
    else
    {
      if (!v10)
        return 0;
      v9 = v12 + 1;
    }
  }
  v15 = v12;
  if (v8)
  {
    memmove(&v8[-v4], v8, v12 - v8);
    v15 = &v12[-v4];
  }
  v16 = v15;
  do
  {
    v17 = *--v16;
    *v15 = 0;
    v15 = v16;
  }
  return v12 + 1;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_attribute_impl<pugi::impl::`anonymous namespace'::opt_true>::parse_wnorm(char *a1, unsigned __int8 a2)
{
  uint64_t v2;
  char v3;
  int v4;
  int v5;
  char v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  void *__src;
  uint64_t v18;

  __src = 0;
  v18 = 0;
  {
    v2 = 0;
    do
    while ((v3 & 8) != 0);
    a1 += v2;
    __src = a1;
    v18 = v2;
  }
  v4 = a2;
  while (1)
  {
    v5 = *a1;
    if ((v6 & 0xC) != 0)
    {
      v7 = (unsigned __int8 *)a1;
    }
    else
    {
      v7 = (unsigned __int8 *)(a1 + 2);
      while (1)
      {
        v5 = *(v7 - 1);
        if ((v6 & 0xC) != 0)
        {
          --v7;
          goto LABEL_15;
        }
        v5 = *v7;
        if ((v6 & 0xC) != 0)
          goto LABEL_15;
        v5 = v7[1];
        if ((v6 & 0xC) != 0)
          break;
        v5 = v7[2];
        v7 += 4;
        if ((v6 & 0xC) != 0)
        {
          v7 -= 2;
          goto LABEL_15;
        }
      }
      ++v7;
    }
LABEL_15:
    if (v5 == v4)
      break;
    if ((v6 & 8) != 0)
    {
      a1 = (char *)(v7 + 1);
      v8 = v7[1];
      *v7 = 32;
      {
        v9 = 0;
        do
        while ((v10 & 8) != 0);
        v11 = v18;
        if (__src)
          memmove((char *)__src - v18, __src, a1 - (_BYTE *)__src);
        a1 = (char *)&v7[v9 + 1];
        __src = a1;
        v18 = v11 + v9;
      }
    }
    else if (v5 == 38)
    {
    }
    else
    {
      if (!v5)
        return 0;
      a1 = (char *)(v7 + 1);
    }
  }
  v12 = v7;
  if (__src)
  {
    v13 = v18;
    memmove((char *)__src - v18, __src, v7 - (_BYTE *)__src);
    v12 = &v7[-v13];
  }
  v14 = v12;
  do
  {
    v15 = *--v14;
    *v12 = 0;
    v12 = v14;
  }
  return v7 + 1;
}

char *pugi::impl::`anonymous namespace'::strconv_escape(pugi::impl::_anonymous_namespace_::utf8_writer *this, const void **a2)
{
  char *v3;
  int v4;
  char *v5;
  char v6;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  unsigned int v17;
  char v18;
  char *v19;
  unsigned int v20;
  unsigned __int8 v21;
  int v22;
  char *v23;

  v3 = (char *)this + 1;
  v4 = *((char *)this + 1);
  v5 = (char *)this + 1;
  if (v4 > 102)
  {
    if (v4 == 103)
    {
      v5 = (char *)this + 2;
      if (*((_BYTE *)this + 2) != 116)
        return v5;
      v5 = (char *)this + 3;
      if (*((_BYTE *)this + 3) != 59)
        return v5;
      v11 = 62;
    }
    else
    {
      if (v4 != 108)
      {
        if (v4 == 113)
        {
          v5 = (char *)this + 2;
          if (*((_BYTE *)this + 2) == 117)
          {
            v5 = (char *)this + 3;
            if (*((_BYTE *)this + 3) == 111)
            {
              v5 = (char *)this + 4;
              if (*((_BYTE *)this + 4) == 116)
              {
                v5 = (char *)this + 5;
                if (*((_BYTE *)this + 5) == 59)
                {
                  v6 = 34;
LABEL_43:
                  *(_BYTE *)this = v6;
                  v8 = (char *)this + 6;
                  v19 = (char *)*a2;
                  if (*a2)
                    memmove((void *)(v19 - (_BYTE *)a2[1]), v19, v3 - v19);
                  v10 = 5;
LABEL_28:
                  v5 = v8;
LABEL_29:
                  v13 = (uint64_t)a2[1] + v10;
                  *a2 = v8;
                  a2[1] = (const void *)v13;
                  return v5;
                }
              }
            }
          }
        }
        return v5;
      }
      v5 = (char *)this + 2;
      if (*((_BYTE *)this + 2) != 116)
        return v5;
      v5 = (char *)this + 3;
      if (*((_BYTE *)this + 3) != 59)
        return v5;
      v11 = 60;
    }
    *(_BYTE *)this = v11;
    v8 = (char *)this + 4;
    v12 = (char *)*a2;
    if (*a2)
      memmove((void *)(v12 - (_BYTE *)a2[1]), v12, v3 - v12);
    v10 = 3;
    goto LABEL_28;
  }
  if (v4 == 35)
  {
    v5 = (char *)this + 2;
    v14 = *((unsigned __int8 *)this + 2);
    if (v14 == 59)
      return v5;
    if (v14 == 120)
    {
      v5 = (char *)this + 3;
      v15 = *((unsigned __int8 *)this + 3);
      if (v15 != 59)
      {
        v16 = 0;
        while (1)
        {
          v15 = (char)v15;
          v17 = (char)v15 - 48;
          if (v17 > 9)
          {
            if (((char)v15 | 0x20u) - 97 > 5)
              goto LABEL_50;
            v16 = (unsigned __int8 *)(((char)v15 | 0x20u) + 16 * (_DWORD)v16 - 87);
          }
          else
          {
            v16 = (unsigned __int8 *)(v17 + 16 * (_DWORD)v16);
          }
          v18 = *++v5;
          LOBYTE(v15) = v18;
        }
      }
    }
    else
    {
      v20 = (char)v14 - 48;
      if (v20 <= 9)
      {
        LODWORD(v16) = 0;
        do
        {
          v16 = (unsigned __int8 *)(v20 + 10 * (_DWORD)v16);
          v22 = *++v5;
          v21 = v22;
          v20 = v22 - 48;
        }
        while ((v22 - 48) < 0xA);
        v15 = v21;
LABEL_50:
        if (v15 == 59)
        {
          ++v5;
          if (v16 >> 16)
          {
            *(_BYTE *)this = (v16 >> 18) | 0xF0;
            *((_BYTE *)this + 1) = (v16 >> 12) & 0x3F | 0x80;
            *((_BYTE *)this + 2) = (v16 >> 6) & 0x3F | 0x80;
            *((_BYTE *)this + 3) = v16 & 0x3F | 0x80;
            v23 = (char *)this + 4;
          }
          else
          {
          }
          v10 = v5 - v23;
          if (*a2)
            memmove((void *)((_BYTE *)*a2 - (_BYTE *)a2[1]), *a2, v23 - (_BYTE *)*a2);
          v8 = v5;
          goto LABEL_29;
        }
      }
    }
  }
  else if (v4 == 97)
  {
    v5 = (char *)this + 2;
    v7 = *((unsigned __int8 *)this + 2);
    if (v7 == 112)
    {
      v5 = (char *)this + 3;
      if (*((_BYTE *)this + 3) == 111)
      {
        v5 = (char *)this + 4;
        if (*((_BYTE *)this + 4) == 115)
        {
          v5 = (char *)this + 5;
          if (*((_BYTE *)this + 5) == 59)
          {
            v6 = 39;
            goto LABEL_43;
          }
        }
      }
    }
    else if (v7 == 109)
    {
      v5 = (char *)this + 3;
      if (*((_BYTE *)this + 3) == 112)
      {
        v5 = (char *)this + 4;
        if (*((_BYTE *)this + 4) == 59)
        {
          *(_BYTE *)this = 38;
          v8 = (char *)this + 5;
          v9 = (char *)*a2;
          if (*a2)
            memmove((void *)(v9 - (_BYTE *)a2[1]), v9, v3 - v9);
          v10 = 4;
          goto LABEL_28;
        }
      }
    }
  }
  return v5;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_pcdata_impl<pugi::impl::`anonymous namespace'::opt_false,pugi::impl::`anonymous namespace'::opt_false,pugi::impl::`anonymous namespace'::opt_false>::parse(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;

  while (1)
  {
    do
    {
      v1 = *result;
        goto LABEL_6;
      v2 = result + 1;
      v1 = result[1];
        break;
      v2 = result + 2;
      v1 = result[2];
        break;
      v2 = result + 3;
      v1 = result[3];
      result += 4;
    }
    result = v2;
LABEL_6:
    if (!(_DWORD)v1)
    {
      *result = 0;
      return result;
    }
    if ((_DWORD)v1 == 60)
      break;
    ++result;
  }
  *result++ = 0;
  return result;
}

pugi::impl::_anonymous_namespace_::utf8_writer *pugi::impl::`anonymous namespace'::strconv_pcdata_impl<pugi::impl::`anonymous namespace'::opt_false,pugi::impl::`anonymous namespace'::opt_false,pugi::impl::`anonymous namespace'::opt_true>::parse(pugi::impl::_anonymous_namespace_::utf8_writer *this)
{
  uint64_t v2;
  pugi::impl::_anonymous_namespace_::utf8_writer *v3;
  pugi::impl::_anonymous_namespace_::utf8_writer *v4;
  uint64_t v5;
  pugi::impl::_anonymous_namespace_::utf8_writer *v6;
  uint64_t v7;
  void *__src;
  uint64_t v10;

  __src = 0;
  v10 = 0;
  while (1)
  {
    while (1)
    {
      do
      {
        v2 = *(unsigned __int8 *)this;
          goto LABEL_7;
        v3 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 1);
        v2 = *((unsigned __int8 *)this + 1);
          break;
        v3 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 2);
        v2 = *((unsigned __int8 *)this + 2);
          break;
        v3 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 3);
        v2 = *((unsigned __int8 *)this + 3);
        this = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 4);
      }
      this = v3;
LABEL_7:
      if ((_DWORD)v2 != 38)
        break;
    }
    if (!(_DWORD)v2)
      break;
    if ((_DWORD)v2 == 60)
    {
      v6 = this;
      if (__src)
      {
        v7 = v10;
        memmove((char *)__src - v10, __src, this - (pugi::impl::_anonymous_namespace_::utf8_writer *)__src);
        v6 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this - v7);
      }
      *(_BYTE *)v6 = 0;
      return (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 1);
    }
    this = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this + 1);
  }
  v4 = this;
  if (__src)
  {
    v5 = v10;
    memmove((char *)__src - v10, __src, this - (pugi::impl::_anonymous_namespace_::utf8_writer *)__src);
    v4 = (pugi::impl::_anonymous_namespace_::utf8_writer *)((char *)this - v5);
  }
  *(_BYTE *)v4 = 0;
  return this;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_pcdata_impl<pugi::impl::`anonymous namespace'::opt_false,pugi::impl::`anonymous namespace'::opt_true,pugi::impl::`anonymous namespace'::opt_false>::parse(unsigned __int8 *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v1 = 0;
  v2 = 0;
  while (1)
  {
    while (1)
    {
      v3 = *a1;
      {
        v4 = a1;
      }
      else
      {
        v4 = a1 + 2;
        while (1)
        {
          v3 = *(v4 - 1);
          {
            --v4;
            goto LABEL_11;
          }
          v3 = *v4;
            goto LABEL_11;
          v3 = v4[1];
            break;
          v3 = v4[2];
          v4 += 4;
          {
            v4 -= 2;
            goto LABEL_11;
          }
        }
        ++v4;
      }
LABEL_11:
      if ((_DWORD)v3 != 13)
        break;
      a1 = v4 + 1;
      v5 = v4[1];
      *v4 = 10;
      if (v5 == 10)
      {
        if (v1)
          memmove(&v1[-v2], v1, a1 - (unsigned __int8 *)v1);
        a1 = v4 + 2;
        ++v2;
        v1 = (char *)(v4 + 2);
      }
    }
    if (!(_DWORD)v3)
      break;
    if ((_DWORD)v3 == 60)
    {
      v7 = v4;
      if (v1)
      {
        memmove(&v1[-v2], v1, v4 - (unsigned __int8 *)v1);
        v7 = &v4[-v2];
      }
      *v7 = 0;
      return ++v4;
    }
    a1 = v4 + 1;
  }
  v6 = v4;
  if (v1)
  {
    memmove(&v1[-v2], v1, v4 - (unsigned __int8 *)v1);
    v6 = &v4[-v2];
  }
  *v6 = 0;
  return v4;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_pcdata_impl<pugi::impl::`anonymous namespace'::opt_false,pugi::impl::`anonymous namespace'::opt_true,pugi::impl::`anonymous namespace'::opt_true>::parse(char *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  void *__src;
  uint64_t v11;

  __src = 0;
  v11 = 0;
  while (1)
  {
    while (1)
    {
      v1 = *a1;
      {
        v2 = (unsigned __int8 *)a1;
      }
      else
      {
        v2 = (unsigned __int8 *)(a1 + 2);
        while (1)
        {
          v1 = *(v2 - 1);
          {
            --v2;
            goto LABEL_11;
          }
          v1 = *v2;
            goto LABEL_11;
          v1 = v2[1];
            break;
          v1 = v2[2];
          v2 += 4;
          {
            v2 -= 2;
            goto LABEL_11;
          }
        }
        ++v2;
      }
LABEL_11:
      if ((int)v1 > 37)
        break;
      if ((_DWORD)v1 == 13)
      {
        a1 = (char *)(v2 + 1);
        v3 = v2[1];
        *v2 = 10;
        if (v3 == 10)
        {
          v4 = v11;
          if (__src)
            memmove((char *)__src - v11, __src, a1 - (_BYTE *)__src);
          a1 = (char *)(v2 + 2);
          __src = v2 + 2;
          v11 = v4 + 1;
        }
      }
      else
      {
        if (!(_DWORD)v1)
        {
          v5 = v2;
          if (__src)
          {
            v6 = v11;
            memmove((char *)__src - v11, __src, v2 - (_BYTE *)__src);
            v5 = &v2[-v6];
          }
          *v5 = 0;
          return v2;
        }
LABEL_22:
        a1 = (char *)(v2 + 1);
      }
    }
    if ((_DWORD)v1 != 38)
      break;
  }
  if ((_DWORD)v1 != 60)
    goto LABEL_22;
  v7 = v2;
  if (__src)
  {
    v8 = v11;
    memmove((char *)__src - v11, __src, v2 - (_BYTE *)__src);
    v7 = &v2[-v8];
  }
  *v7 = 0;
  return ++v2;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_pcdata_impl<pugi::impl::`anonymous namespace'::opt_true,pugi::impl::`anonymous namespace'::opt_false,pugi::impl::`anonymous namespace'::opt_false>::parse(unsigned __int8 *a1)
{
  unsigned __int8 *i;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  for (i = a1; ; ++i)
  {
    do
    {
      v2 = *i;
        goto LABEL_7;
      v3 = i + 1;
      v2 = i[1];
        break;
      v3 = i + 2;
      v2 = i[2];
        break;
      v3 = i + 3;
      v2 = i[3];
      i += 4;
    }
    i = v3;
LABEL_7:
    if ((_DWORD)v2 == 60)
      break;
    if (!(_DWORD)v2)
    {
      v6 = i;
      do
      {
        v7 = v6;
        if (v6 <= a1)
          break;
        --v6;
      }
      *v7 = 0;
      return i;
    }
  }
  v4 = i;
  do
  {
    v5 = v4;
    if (v4 <= a1)
      break;
    --v4;
  }
  *v5 = 0;
  return ++i;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_pcdata_impl<pugi::impl::`anonymous namespace'::opt_true,pugi::impl::`anonymous namespace'::opt_false,pugi::impl::`anonymous namespace'::opt_true>::parse(pugi::impl::_anonymous_namespace_::utf8_writer *this)
{
  pugi::impl::_anonymous_namespace_::utf8_writer *v1;
  unsigned __int8 *i;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *__src;
  uint64_t v13;

  v1 = this;
  __src = 0;
  v13 = 0;
LABEL_2:
  for (i = (unsigned __int8 *)this; ; ++i)
  {
    do
    {
      v3 = *i;
        goto LABEL_8;
      v4 = i + 1;
      v3 = i[1];
        break;
      v4 = i + 2;
      v3 = i[2];
        break;
      v4 = i + 3;
      v3 = i[3];
      i += 4;
    }
    i = v4;
LABEL_8:
    if ((_DWORD)v3 == 38)
    {
      goto LABEL_2;
    }
    if (!(_DWORD)v3)
      break;
    if ((_DWORD)v3 == 60)
    {
      v8 = i;
      if (__src)
      {
        v9 = v13;
        memmove((char *)__src - v13, __src, i - (_BYTE *)__src);
        v8 = &i[-v9];
      }
      do
      {
        v10 = v8;
        if (v8 <= (unsigned __int8 *)v1)
          break;
        --v8;
      }
      *v10 = 0;
      return ++i;
    }
  }
  v5 = i;
  if (__src)
  {
    v6 = v13;
    memmove((char *)__src - v13, __src, i - (_BYTE *)__src);
    v5 = &i[-v6];
  }
  do
  {
    v7 = v5;
    if (v5 <= (unsigned __int8 *)v1)
      break;
    --v5;
  }
  *v7 = 0;
  return i;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_pcdata_impl<pugi::impl::`anonymous namespace'::opt_true,pugi::impl::`anonymous namespace'::opt_true,pugi::impl::`anonymous namespace'::opt_false>::parse(unsigned __int8 *a1)
{
  char *v2;
  uint64_t v3;
  unsigned __int8 *i;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v2 = 0;
  v3 = 0;
  for (i = a1; ; i = v6 + 1)
  {
    while (1)
    {
      v5 = *i;
      {
        v6 = i;
      }
      else
      {
        v6 = i + 2;
        while (1)
        {
          v5 = *(v6 - 1);
          {
            --v6;
            goto LABEL_11;
          }
          v5 = *v6;
            goto LABEL_11;
          v5 = v6[1];
            break;
          v5 = v6[2];
          v6 += 4;
          {
            v6 -= 2;
            goto LABEL_11;
          }
        }
        ++v6;
      }
LABEL_11:
      if ((_DWORD)v5 != 13)
        break;
      i = v6 + 1;
      v7 = v6[1];
      *v6 = 10;
      if (v7 == 10)
      {
        if (v2)
          memmove(&v2[-v3], v2, i - (unsigned __int8 *)v2);
        i = v6 + 2;
        ++v3;
        v2 = (char *)(v6 + 2);
      }
    }
    if (!(_DWORD)v5)
      break;
    if ((_DWORD)v5 == 60)
    {
      v10 = v6;
      if (v2)
      {
        memmove(&v2[-v3], v2, v6 - (unsigned __int8 *)v2);
        v10 = &v6[-v3];
      }
      do
      {
        v11 = v10;
        if (v10 <= a1)
          break;
        --v10;
      }
      *v11 = 0;
      return ++v6;
    }
  }
  v8 = v6;
  if (v2)
  {
    memmove(&v2[-v3], v2, v6 - (unsigned __int8 *)v2);
    v8 = &v6[-v3];
  }
  do
  {
    v9 = v8;
    if (v8 <= a1)
      break;
    --v8;
  }
  *v9 = 0;
  return v6;
}

unsigned __int8 *pugi::impl::`anonymous namespace'::strconv_pcdata_impl<pugi::impl::`anonymous namespace'::opt_true,pugi::impl::`anonymous namespace'::opt_true,pugi::impl::`anonymous namespace'::opt_true>::parse(char *a1)
{
  char *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  void *__src;
  uint64_t v14;

  v1 = a1;
  __src = 0;
  v14 = 0;
  while (1)
  {
    while (1)
    {
      v2 = *a1;
      {
        v3 = (unsigned __int8 *)a1;
      }
      else
      {
        v3 = (unsigned __int8 *)(a1 + 2);
        while (1)
        {
          v2 = *(v3 - 1);
          {
            --v3;
            goto LABEL_11;
          }
          v2 = *v3;
            goto LABEL_11;
          v2 = v3[1];
            break;
          v2 = v3[2];
          v3 += 4;
          {
            v3 -= 2;
            goto LABEL_11;
          }
        }
        ++v3;
      }
LABEL_11:
      if ((int)v2 > 37)
        break;
      if ((_DWORD)v2 == 13)
      {
        a1 = (char *)(v3 + 1);
        v4 = v3[1];
        *v3 = 10;
        if (v4 == 10)
        {
          v5 = v14;
          if (__src)
            memmove((char *)__src - v14, __src, a1 - (_BYTE *)__src);
          a1 = (char *)(v3 + 2);
          __src = v3 + 2;
          v14 = v5 + 1;
        }
      }
      else
      {
        if (!(_DWORD)v2)
        {
          v6 = v3;
          if (__src)
          {
            v7 = v14;
            memmove((char *)__src - v14, __src, v3 - (_BYTE *)__src);
            v6 = &v3[-v7];
          }
          do
          {
            v8 = v6;
            if (v6 <= (unsigned __int8 *)v1)
              break;
            --v6;
          }
          *v8 = 0;
          return v3;
        }
LABEL_22:
        a1 = (char *)(v3 + 1);
      }
    }
    if ((_DWORD)v2 != 38)
      break;
  }
  if ((_DWORD)v2 != 60)
    goto LABEL_22;
  v9 = v3;
  if (__src)
  {
    v10 = v14;
    memmove((char *)__src - v14, __src, v3 - (_BYTE *)__src);
    v9 = &v3[-v10];
  }
  do
  {
    v11 = v9;
    if (v9 <= (unsigned __int8 *)v1)
      break;
    --v9;
  }
  *v11 = 0;
  return ++v3;
}

char *pugi::impl::`anonymous namespace'::strconv_cdata(pugi::impl::_anonymous_namespace_ *this, char *a2)
{
  int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  pugi::impl::_anonymous_namespace_ *v6;
  int v7;
  int v8;
  BOOL v9;
  _BOOL4 v10;
  char *v11;

  v2 = (int)a2;
  v3 = 0;
  v4 = 0;
  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 *)this;
      {
        v6 = this;
      }
      else
      {
        v6 = (pugi::impl::_anonymous_namespace_ *)((char *)this + 2);
        while (1)
        {
          v5 = *((unsigned __int8 *)v6 - 1);
          {
            v6 = (pugi::impl::_anonymous_namespace_ *)((char *)v6 - 1);
            goto LABEL_11;
          }
          v5 = *(unsigned __int8 *)v6;
            goto LABEL_11;
          v5 = *((unsigned __int8 *)v6 + 1);
            break;
          v5 = *((unsigned __int8 *)v6 + 2);
          v6 = (pugi::impl::_anonymous_namespace_ *)((char *)v6 + 4);
          {
            v6 = (pugi::impl::_anonymous_namespace_ *)((char *)v6 - 2);
            goto LABEL_11;
          }
        }
        v6 = (pugi::impl::_anonymous_namespace_ *)((char *)v6 + 1);
      }
LABEL_11:
      if ((_DWORD)v5 != 13)
        break;
      this = (pugi::impl::_anonymous_namespace_ *)((char *)v6 + 1);
      v7 = *((unsigned __int8 *)v6 + 1);
      *(_BYTE *)v6 = 10;
      if (v7 == 10)
      {
        if (v3)
          memmove(&v3[-v4], v3, this - (pugi::impl::_anonymous_namespace_ *)v3);
        this = (pugi::impl::_anonymous_namespace_ *)((char *)v6 + 2);
        ++v4;
        v3 = (char *)v6 + 2;
      }
    }
    if ((_DWORD)v5 == 93)
      break;
    if (!(_DWORD)v5)
      return 0;
LABEL_28:
    this = (pugi::impl::_anonymous_namespace_ *)((char *)v6 + 1);
  }
  if (*((_BYTE *)v6 + 1) != 93)
    goto LABEL_28;
  v8 = *((unsigned __int8 *)v6 + 2);
  v9 = v2 == 62 && v8 == 0;
  v10 = v9;
  if (v8 != 62 && !v10)
    goto LABEL_28;
  v11 = (char *)v6 + 1;
  if (v3)
  {
    memmove(&v3[-v4], v3, v6 - (pugi::impl::_anonymous_namespace_ *)v3);
    v6 = (pugi::impl::_anonymous_namespace_ *)((char *)v6 - v4);
  }
  *(_BYTE *)v6 = 0;
  return v11;
}

unint64_t *pugi::impl::`anonymous namespace'::node_output_simple(unint64_t *this, uint64_t a2, char a3)
{
  unint64_t *v5;
  const char *v6;
  const char *v7;
  uint64_t i;
  int v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  const char *v14;
  int v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const char *v20;
  int v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  unint64_t v27;
  const char *v28;
  int v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  const char *v33;
  int v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  unint64_t v38;

  v5 = this;
  switch(*(_DWORD *)a2 & 0xF)
  {
    case 3:
      if (*(_QWORD *)(a2 + 16))
        v6 = *(const char **)(a2 + 16);
      else
        v6 = (const char *)&str_15;
    case 4:
      if (*(_QWORD *)(a2 + 16))
        v7 = *(const char **)(a2 + 16);
      else
        v7 = (const char *)&str_15;
      while (1)
      {
        for (i = 0; ; ++i)
        {
          v9 = v7[i];
          if (v9 == 93)
            break;
          if (!v7[i])
            goto LABEL_16;
LABEL_15:
          ;
        }
        if (v7[i + 1] != 93 || v7[i + 2] != 62)
          goto LABEL_15;
LABEL_16:
        v10 = i + 2 * (v9 != 0);
        v11 = v5[1281];
        v12 = v10 + v11;
        if (v10 + v11 > 0x800)
        {
          v12 = v5[1281];
        }
        else
        {
          this = (unint64_t *)memcpy((char *)v5 + v11, v7, v10);
          v5[1281] = v12;
        }
        if (v12 >= 0x7FE)
        {
          v12 = 0;
        }
        v7 += v10;
        v13 = (char *)v5 + v12;
        *(_WORD *)v13 = 23901;
        v13[2] = 62;
        v5[1281] = v12 + 3;
        if (!*v7)
          return this;
      }
    case 5:
      if (*(_QWORD *)(a2 + 16))
        v14 = *(const char **)(a2 + 16);
      else
        v14 = (const char *)&str_15;
      v15 = *(unsigned __int8 *)v14;
      if (!*v14)
        goto LABEL_41;
      while (1)
      {
        v16 = 0;
        while (v15 != 45)
        {
          if (!v15)
            goto LABEL_34;
          v15 = v14[v16 + 1];
LABEL_33:
          ++v16;
        }
        v15 = v14[v16 + 1];
        if (v14[v16 + 1] && v15 != 45)
          goto LABEL_33;
LABEL_34:
        v17 = v5[1281];
        v18 = v17 + v16;
        if (v17 + v16 > 0x800)
        {
        }
        else
        {
          this = (unint64_t *)memcpy((char *)v5 + v17, v14, v16);
          v5[1281] = v18;
        }
        if (v14[v16])
        {
          v19 = v5[1281];
          if (v19 >= 0x7FF)
          {
            v19 = 0;
          }
          *(_WORD *)((char *)v5 + v19) = 8237;
          v5[1281] = v19 + 2;
          v20 = &v14[v16];
          v21 = *((unsigned __int8 *)v20 + 1);
          v14 = v20 + 1;
          v15 = v21;
          if (v21)
            continue;
        }
LABEL_41:
        v22 = v5[1281];
        if (v22 >= 0x7FE)
        {
          v22 = 0;
        }
        v23 = (char *)v5 + v22;
        *(_WORD *)v23 = 11565;
        v23[2] = 62;
        v24 = v22 + 3;
        goto LABEL_83;
      }
    case 6:
      v25 = this[1281];
      if (v25 >= 0x7FF)
      {
        v25 = 0;
      }
      *(_WORD *)((char *)v5 + v25) = 16188;
      v5[1281] = v25 + 2;
      if (*(_QWORD *)(a2 + 8))
        v26 = *(const char **)(a2 + 8);
      else
        v26 = ":anonymous";
      v27 = v5[1281];
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_73;
      if (v27 >= 0x800)
      {
        v27 = 0;
      }
      *((_BYTE *)v5 + v27++) = 32;
      v5[1281] = v27;
      v28 = *(const char **)(a2 + 16);
      v29 = *(unsigned __int8 *)v28;
      if (!*v28)
        goto LABEL_73;
      break;
    case 7:
      v35 = this[1281];
      if (v35 >= 0x7FF)
      {
        v35 = 0;
      }
      *(_WORD *)((char *)v5 + v35) = 16188;
      v5[1281] = v35 + 2;
      if (*(_QWORD *)(a2 + 8))
        v36 = *(const char **)(a2 + 8);
      else
        v36 = ":anonymous";
      v27 = v5[1281];
      goto LABEL_73;
    case 8:
      if (*(_QWORD *)(a2 + 16))
      {
        v37 = v5[1281];
        if (v37 >= 0x800)
        {
          v37 = 0;
        }
        *((_BYTE *)v5 + v37) = 32;
        v5[1281] = v37 + 1;
      }
      v38 = v5[1281];
      if (v38 >= 0x800)
      {
        v38 = 0;
      }
      *((_BYTE *)v5 + v38) = 62;
      v24 = v38 + 1;
      goto LABEL_83;
    default:
      return this;
  }
  do
  {
    v30 = 0;
    while (v29 != 63)
    {
      if (!v29)
        goto LABEL_59;
      v29 = v28[v30 + 1];
LABEL_58:
      ++v30;
    }
    v29 = v28[v30 + 1];
    if (v29 != 62)
      goto LABEL_58;
LABEL_59:
    v31 = v27 + v30;
    if (v27 + v30 > 0x800)
    {
      v31 = v5[1281];
    }
    else
    {
      this = (unint64_t *)memcpy((char *)v5 + v27, v28, v30);
      v5[1281] = v31;
    }
    if (!v28[v30])
    {
      v27 = v31;
      break;
    }
    if (v31 >= 0x7FE)
    {
      v31 = 0;
    }
    v32 = (char *)v5 + v31;
    *(_WORD *)v32 = 8255;
    v32[2] = 62;
    v27 = v31 + 3;
    v5[1281] = v31 + 3;
    v33 = &v28[v30];
    v34 = *((unsigned __int8 *)v33 + 2);
    v28 = v33 + 2;
    v29 = v34;
  }
  while (v34);
LABEL_73:
  if (v27 >= 0x7FF)
  {
    v27 = 0;
  }
  *(_WORD *)((char *)v5 + v27) = 15935;
  v24 = v27 + 2;
LABEL_83:
  v5[1281] = v24;
  return this;
}

uint64_t pugi::impl::`anonymous namespace'::text_output_indent(uint64_t this, char *a2, size_t a3, int a4)
{
  int v4;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char v13;
  char v14;
  char *v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  char *v20;

  v4 = a4;
  v6 = this;
  switch(a3)
  {
    case 1uLL:
      if (a4)
      {
        v7 = *(_QWORD *)(this + 10248);
        do
        {
          v8 = *a2;
          if (v7 >= 0x800)
          {
            v7 = 0;
          }
          *(_BYTE *)(v6 + v7++) = v8;
          *(_QWORD *)(v6 + 10248) = v7;
          --v4;
        }
        while (v4);
      }
      break;
    case 2uLL:
      if (a4)
      {
        v12 = *(_QWORD *)(this + 10248);
        do
        {
          v13 = *a2;
          v14 = a2[1];
          if (v12 >= 0x7FF)
          {
            v12 = 0;
          }
          v15 = (char *)(v6 + v12);
          *v15 = v13;
          v15[1] = v14;
          v12 += 2;
          *(_QWORD *)(v6 + 10248) = v12;
          --v4;
        }
        while (v4);
      }
      break;
    case 3uLL:
      if (a4)
      {
        v16 = *(_QWORD *)(this + 10248);
        do
        {
          v17 = *a2;
          v18 = a2[1];
          v19 = a2[2];
          if (v16 >= 0x7FE)
          {
            v16 = 0;
          }
          v20 = (char *)(v6 + v16);
          *v20 = v17;
          v20[1] = v18;
          v20[2] = v19;
          v16 += 3;
          *(_QWORD *)(v6 + 10248) = v16;
          --v4;
        }
        while (v4);
      }
      break;
    case 4uLL:
      if (a4)
      {
        do
        {
          --v4;
        }
        while (v4);
      }
      break;
    default:
      if (a4)
      {
        do
        {
          v10 = *(_QWORD *)(v6 + 10248);
          v11 = v10 + a3;
          if (v10 + a3 > 0x800)
          {
          }
          else
          {
            this = (uint64_t)memcpy((void *)(v6 + v10), a2, a3);
            *(_QWORD *)(v6 + 10248) = v11;
          }
          --v4;
        }
        while (v4);
      }
      break;
  }
  return this;
}

unint64_t *pugi::impl::`anonymous namespace'::text_output(unint64_t *this, const char *a2, int a3, char a4)
{
  unint64_t *v4;
  const char *v6;
  int v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;

  v4 = this;
  if ((a4 & 0x10) != 0)
  if (*a2)
  {
    while (1)
    {
      v6 = a2 + 1;
      while (1)
      {
        {
          --v6;
          goto LABEL_11;
        }
          goto LABEL_11;
          break;
        v6 += 4;
        if ((v7 & a3) != 0)
        {
          v6 -= 2;
          goto LABEL_11;
        }
      }
      ++v6;
LABEL_11:
      v8 = v6 - a2;
      v9 = v4[1281];
      v10 = v6 - a2 + v9;
      if (v10 > 0x800)
      {
      }
      else
      {
        this = (unint64_t *)memcpy((char *)v4 + v9, a2, v8);
        v4[1281] = v10;
      }
      v11 = *v6;
      v12 = *(unsigned __int8 *)v6;
      if (v11 > 37)
        break;
      if (*v6)
      {
        if (v11 == 34)
        {
          v17 = v4[1281];
          if (v17 >= 0x7FB)
          {
            v17 = 0;
          }
          v18 = (char *)v4 + v17;
          *(_DWORD *)v18 = 1869967654;
          *((_WORD *)v18 + 2) = 15220;
          v19 = v17 + 6;
LABEL_27:
          v4[1281] = v19;
LABEL_30:
          v21 = *(unsigned __int8 *)++v6;
          v12 = v21;
          goto LABEL_31;
        }
LABEL_28:
        v15 = v11 / 0xAu + 48;
        v16 = (v11 % 0xAu) | 0x30;
        v13 = (uint64_t)v4;
        v14 = 35;
LABEL_29:
        goto LABEL_30;
      }
LABEL_31:
      a2 = v6;
      if (!v12)
        return this;
    }
    if (v11 == 62 || v11 == 60)
    {
      v20 = v4[1281];
      if (v20 >= 0x800)
      {
        v20 = 0;
      }
      *((_BYTE *)v4 + v20) = v12;
      v19 = v20 + 1;
      goto LABEL_27;
    }
    if (v11 != 38)
      goto LABEL_28;
    v13 = (uint64_t)v4;
    v14 = 97;
    v15 = 109;
    v16 = 112;
    goto LABEL_29;
  }
  return this;
}

uint64_t pugi::impl::`anonymous namespace'::node_output_attributes(uint64_t this, _QWORD *a2, char *a3, size_t a4, char a5, int a6)
{
  _QWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;

  if (a2)
  {
    v9 = a2;
    v10 = this;
    v11 = a5 & 0x44;
    v12 = a6 + 1;
    v13 = *(_QWORD *)(this + 10248);
    do
    {
      if (v11 == 64)
      {
        if (v13 >= 0x800)
        {
          v13 = 0;
        }
        *(_BYTE *)(v10 + v13) = 10;
        *(_QWORD *)(v10 + 10248) = v13 + 1;
      }
      else
      {
        if (v13 >= 0x800)
        {
          v13 = 0;
        }
        *(_BYTE *)(v10 + v13) = 32;
        *(_QWORD *)(v10 + 10248) = v13 + 1;
      }
      if (v9[1])
        v14 = (const char *)v9[1];
      else
        v14 = ":anonymous";
      v15 = *(_QWORD *)(v10 + 10248);
      if (v15 >= 0x7FF)
      {
        v15 = 0;
      }
      *(_WORD *)(v10 + v15) = 8765;
      v16 = v15 + 2;
      *(_QWORD *)(v10 + 10248) = v16;
      v17 = (const char *)v9[2];
      if (v17)
      {
        v16 = *(_QWORD *)(v10 + 10248);
      }
      if (v16 >= 0x800)
      {
        v16 = 0;
      }
      *(_BYTE *)(v10 + v16) = 34;
      v13 = v16 + 1;
      *(_QWORD *)(v10 + 10248) = v13;
      v9 = (_QWORD *)v9[4];
    }
    while (v9);
  }
  return this;
}

uint64_t pugi::impl::`anonymous namespace'::xml_buffered_writer::write(uint64_t this, char a2, char a3, char a4, char a5, char a6)
{
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;

  v11 = this;
  v12 = *(_QWORD *)(this + 10248);
  if (v12 >= 0x7FC)
  {
    v12 = 0;
  }
  v13 = (_BYTE *)(v11 + v12);
  *v13 = a2;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  *(_QWORD *)(v11 + 10248) = v12 + 5;
  return this;
}

uint64_t pugi::impl::`anonymous namespace'::xml_buffered_writer::write(uint64_t this, char a2, char a3, char a4, char a5)
{
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;

  v9 = this;
  v10 = *(_QWORD *)(this + 10248);
  if (v10 >= 0x7FD)
  {
    v10 = 0;
  }
  v11 = (_BYTE *)(v9 + v10);
  *v11 = a2;
  v11[1] = a3;
  v11[2] = a4;
  v11[3] = a5;
  *(_QWORD *)(v9 + 10248) = v10 + 4;
  return this;
}

void *pugi::impl::`anonymous namespace'::xml_buffered_writer::write_direct(pugi::impl::_anonymous_namespace_::xml_buffered_writer *this, const char *a2, size_t a3)
{
  void *result;
  unint64_t v7;

  *((_QWORD *)this + 1281) = 0;
  if (a3 >= 0x801)
  {
    if (*((_DWORD *)this + 2564) == 1)
      return (void *)(*(uint64_t (**)(_QWORD, const char *, size_t))(**((_QWORD **)this + 1280) + 16))(*((_QWORD *)this + 1280), a2, a3);
    do
    {
      v7 = 2047;
      while ((a2[v7] & 0xC0) == 0x80)
      {
        if (--v7 == 2043)
        {
          v7 = 2048;
          break;
        }
      }
      a2 += v7;
      a3 -= v7;
    }
    while (a3 > 0x800);
    *((_QWORD *)this + 1281) = 0;
  }
  result = memcpy(this, a2, a3);
  *((_QWORD *)this + 1281) += a3;
  return result;
}

uint64_t pugi::impl::`anonymous namespace'::xml_buffered_writer::flush(uint64_t this, const char *a2, unint64_t a3)
{
  const char *v3;
  int v4;
  char *v5;
  char *v6;
  __int16 v7;
  const char *v8;
  _WORD *v9;
  unsigned __int8 *v10;
  __int16 v11;
  unint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  unsigned int v17;
  char v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  const char *v23;
  _DWORD *v24;
  unsigned __int8 *v25;
  int v26;
  unint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  unsigned int *v34;
  int v35;
  const char *v36;
  _BYTE *v37;
  char *v38;
  int v39;
  char v40;
  unint64_t v41;
  char v42;
  unsigned int v43;
  char v44;
  char v45;
  char v46;
  unsigned int v47;

  if (!a3)
    return this;
  v3 = a2;
  v4 = *(_DWORD *)(this + 10256);
  if (v4 == 1)
    return (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(this + 10240) + 16))(*(_QWORD *)(this + 10240), a2);
  v5 = (char *)(this + 2048);
  if ((v4 & 0xFFFFFFFE) != 2)
  {
    if ((v4 - 5) <= 1)
    {
      v21 = (char *)(this + 2048);
      while (1)
      {
        v22 = *(unsigned __int8 *)v3;
        if ((*v3 & 0x80000000) == 0)
        {
          *(_DWORD *)v21 = v22;
          v23 = v3 + 1;
          if (--a3 < 4 || (v23 & 3) != 0)
          {
            v21 += 4;
          }
          else
          {
            v24 = v21 + 16;
            v25 = (unsigned __int8 *)(v3 + 4);
            do
            {
              if ((*(_DWORD *)(v25 - 3) & 0x80808080) != 0)
                break;
              *(v24 - 3) = *(_DWORD *)(v25 - 3);
              *(v24 - 2) = *(v25 - 2);
              *(v24 - 1) = *(v25 - 1);
              v26 = *v25;
              v25 += 4;
              *v24 = v26;
              v24 += 4;
              a3 -= 4;
            }
            while (a3 > 3);
            v21 = (char *)(v24 - 3);
            v23 = (const char *)(v25 - 3);
          }
          goto LABEL_65;
        }
        v27 = a3 - 2;
        if (a3 >= 2 && (v22 & 0xE0) == 0xC0 && (v28 = v3[1], (v28 & 0xC0) == 0x80))
        {
          *(_DWORD *)v21 = v28 & 0x3F | ((v22 & 0x3F) << 6);
          v21 += 4;
          v23 = v3 + 2;
        }
        else
        {
          v27 = a3 - 3;
          if (a3 >= 3
            && (v22 & 0xF0) == 0xE0
            && (v29 = v3[1], (v29 & 0xC0) == 0x80)
            && (v30 = v3[2], (v30 & 0xC0) == 0x80))
          {
            *(_DWORD *)v21 = ((v22 & 0x1F) << 12) | ((v29 & 0x3F) << 6) | v30 & 0x3F;
            v21 += 4;
            v23 = v3 + 3;
          }
          else
          {
            v27 = a3 - 4;
            if (a3 < 4
              || (v22 & 0xF8) != 0xF0
              || (v31 = v3[1], (v31 & 0xC0) != 0x80)
              || (v32 = v3[2], (v32 & 0xC0) != 0x80)
              || (v33 = v3[3], (v33 & 0xC0) != 0x80))
            {
              v23 = v3 + 1;
              --a3;
              goto LABEL_65;
            }
            *(_DWORD *)v21 = ((v22 & 0xF) << 18) | ((v31 & 0x3F) << 12) | ((v32 & 0x3F) << 6) | v33 & 0x3F;
            v21 += 4;
            v23 = v3 + 4;
          }
        }
        a3 = v27;
LABEL_65:
        v3 = v23;
        if (!a3)
        {
          if (v4 != 5 && v21 != v5)
          {
            v34 = (unsigned int *)(this + 2048);
            do
            {
              *v34 = bswap32(*v34);
              ++v34;
            }
            while (v34 != (unsigned int *)v21);
          }
          goto LABEL_104;
        }
      }
    }
    if (v4 != 9)
    {
      v20 = 0;
      return (*(uint64_t (**)(_QWORD, char *, char *))(**(_QWORD **)(this + 10240) + 16))(*(_QWORD *)(this + 10240), v5, v20);
    }
    v21 = (char *)(this + 2048);
    while (1)
    {
      v35 = *v3;
      if ((v35 & 0x80000000) == 0)
      {
        *v21 = v35;
        v36 = v3 + 1;
        if (--a3 < 4 || (v36 & 3) != 0)
        {
          ++v21;
        }
        else
        {
          v37 = v21 + 4;
          v38 = (char *)(v3 + 4);
          do
          {
            v39 = *(_DWORD *)(v38 - 3);
            if ((v39 & 0x80808080) != 0)
              break;
            *(v37 - 3) = v39;
            *(v37 - 2) = *(v38 - 2);
            *(v37 - 1) = *(v38 - 1);
            v40 = *v38;
            v38 += 4;
            *v37 = v40;
            v37 += 4;
            a3 -= 4;
          }
          while (a3 > 3);
          v21 = v37 - 3;
          v36 = v38 - 3;
        }
        goto LABEL_103;
      }
      v41 = a3 - 2;
      if (a3 >= 2 && (v35 & 0xE0) == 0xC0 && (v42 = v3[1], (v42 & 0xC0) == 0x80))
      {
        v43 = v42 & 0x3F | ((v35 & 0x3F) << 6);
        if (v43 <= 0xFF)
          v44 = v43;
        else
          v44 = 63;
        *v21++ = v44;
        v36 = v3 + 2;
      }
      else
      {
        v41 = a3 - 3;
        if (a3 >= 3
          && (v35 & 0xF0) == 0xE0
          && (v45 = v3[1], (v45 & 0xC0) == 0x80)
          && (v46 = v3[2], (v46 & 0xC0) == 0x80))
        {
          v47 = ((v35 & 0x1F) << 12) | ((v45 & 0x3F) << 6) | v46 & 0x3F;
          if (v47 > 0xFF)
            LOBYTE(v47) = 63;
          *v21++ = v47;
          v36 = v3 + 3;
        }
        else
        {
          v41 = a3 - 4;
          if (a3 < 4
            || (v35 & 0xF8) != 0xF0
            || (v3[1] & 0xC0) != 0x80
            || (v3[2] & 0xC0) != 0x80
            || (v3[3] & 0xC0) != 0x80)
          {
            v36 = v3 + 1;
            --a3;
            goto LABEL_103;
          }
          *v21++ = 63;
          v36 = v3 + 4;
        }
      }
      a3 = v41;
LABEL_103:
      v3 = v36;
      if (!a3)
      {
LABEL_104:
        v20 = (char *)(v21 - v5);
        return (*(uint64_t (**)(_QWORD, char *, char *))(**(_QWORD **)(this + 10240) + 16))(*(_QWORD *)(this + 10240), v5, v20);
      }
    }
  }
  v6 = (char *)(this + 2048);
  do
  {
    v7 = *(unsigned __int8 *)v3;
    if (*v3 < 0)
    {
      v12 = a3 - 2;
      if (a3 >= 2 && (v7 & 0xE0) == 0xC0)
      {
        v13 = v3[1];
        if ((v13 & 0xC0) == 0x80)
        {
          *(_WORD *)v6 = v13 & 0x3F | ((v7 & 0x3F) << 6);
          v6 += 2;
          v8 = v3 + 2;
LABEL_30:
          a3 = v12;
          goto LABEL_32;
        }
      }
      v12 = a3 - 3;
      if (a3 >= 3 && (v7 & 0xF0) == 0xE0)
      {
        v14 = v3[1];
        if ((v14 & 0xC0) == 0x80)
        {
          v15 = v3[2];
          if ((v15 & 0xC0) == 0x80)
          {
            *(_WORD *)v6 = (v7 << 12) | ((v14 & 0x3F) << 6) | v15 & 0x3F;
            v6 += 2;
            v8 = v3 + 3;
            goto LABEL_30;
          }
        }
      }
      v12 = a3 - 4;
      if (a3 >= 4 && (v7 & 0xF8) == 0xF0)
      {
        v16 = v3[1];
        if ((v16 & 0xC0) == 0x80)
        {
          v17 = *((unsigned __int8 *)v3 + 2);
          if ((v17 & 0xC0) == 0x80)
          {
            v18 = v3[3];
            if ((v18 & 0xC0) == 0x80)
            {
              *(_WORD *)v6 = (((((v16 & 0x3F) << 12) & 0xFFC3F3FF | ((v7 & 0xF) << 18) | (((v17 >> 4) & 3) << 10))
                             + 67043328) >> 10)
                           - 10240;
              *((_WORD *)v6 + 1) = v18 & 0x3F | (v17 << 6) & 0x3FF | 0xDC00;
              v6 += 4;
              v8 = v3 + 4;
              goto LABEL_30;
            }
          }
        }
      }
      v8 = v3 + 1;
      --a3;
    }
    else
    {
      *(_WORD *)v6 = v7;
      v8 = v3 + 1;
      if (--a3 < 4 || (v8 & 3) != 0)
      {
        v6 += 2;
      }
      else
      {
        v9 = v6 + 8;
        v10 = (unsigned __int8 *)(v3 + 4);
        do
        {
          if ((*(_DWORD *)(v10 - 3) & 0x80808080) != 0)
            break;
          *(v9 - 3) = *(_DWORD *)(v10 - 3);
          *(v9 - 2) = *(v10 - 2);
          *(v9 - 1) = *(v10 - 1);
          v11 = *v10;
          v10 += 4;
          *v9 = v11;
          v9 += 4;
          a3 -= 4;
        }
        while (a3 > 3);
        v6 = (char *)(v9 - 3);
        v8 = (const char *)(v10 - 3);
      }
    }
LABEL_32:
    v3 = v8;
  }
  while (a3);
  if (v4 != 2 && v6 != v5)
  {
    v19 = (char *)(this + 2048);
    do
    {
      *(_WORD *)v19 = bswap32(*(unsigned __int16 *)v19) >> 16;
      v19 += 2;
    }
    while (v19 != v6);
  }
  v20 = (char *)(v6 - v5);
  return (*(uint64_t (**)(_QWORD, char *, char *))(**(_QWORD **)(this + 10240) + 16))(*(_QWORD *)(this + 10240), v5, v20);
}

void *pugi::impl::`anonymous namespace'::default_allocate(pugi::impl::_anonymous_namespace_ *this)
{
  return malloc_type_malloc((size_t)this, 0xCE75D1DFuLL);
}

uint64_t realityio::RIOIESInfoLoadFromString(_BYTE *__src, size_t __len, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  std::string *v9;
  std::string *v12;
  const char *v15;
  std::string::size_type size;
  int v19;
  size_t v20;
  std::string *p_p;
  int v22;
  size_t v24;
  std::string *v25;
  int v26;
  size_t v27;
  std::string *v28;
  int v29;
  size_t v30;
  std::string *v31;
  int v32;
  int v33;
  size_t v34;
  std::string *v35;
  int v36;
  size_t v37;
  std::string *v38;
  int v39;
  unsigned int v41;
  uint64_t v42;
  float v43;
  float v44;
  unsigned int v45;
  uint64_t v46;
  float v47;
  float v48;
  signed int v49;
  signed int v50;
  int v51;
  float v52;
  int v53;
  float v54;
  uint64_t v55;
  float v56;
  realityio::RIOIESInfo *v57;
  __n128 v58;
  float v59;
  const char *v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string __p;
  void *v64[2];
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  float v73;
  float v74;
  float v75;
  float v76;
  void *v77[2];
  void *v78[2];
  __int128 v79;
  float v80;
  float v81[5];
  void *v82;
  void *v83;
  uint64_t v84;
  std::string v85;
  std::string __str;
  void *__dst;
  char v88;

  if (__len <= 4)
  {
    MEMORY[0x2348B4AD4](a5, "corrupt or invalid IES header", __len);
    return 0;
  }
  if (a4)
  {
    if (*(_DWORD *)__src != 1314080073 || __src[4] != 65)
      return 0;
  }
  *(_QWORD *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v9 = (std::string *)std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  memset(&__str, 0, sizeof(__str));
  memset(&v85, 0, sizeof(v85));
  v64[0] = 0;
  v64[1] = 0;
  v65 = 0;
  v83 = 0;
  v84 = 0;
  v82 = 0;
  *(_OWORD *)v77 = 0u;
  *(_OWORD *)v78 = 0u;
  v79 = 0u;
  if ((*((_BYTE *)&v85.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v85.__r_.__value_.__l.__size_)
    {
      v12 = (std::string *)v85.__r_.__value_.__r.__words[0];
      if (v85.__r_.__value_.__l.__size_ != 7)
      {
        if (v85.__r_.__value_.__l.__size_ != 16)
          goto LABEL_50;
        if (*(_QWORD *)v85.__r_.__value_.__l.__data_ != 0x4D4C3A414E534549
          || *(_QWORD *)(v85.__r_.__value_.__r.__words[0] + 8) != 0x353939312D33362DLL)
        {
          if (*(_QWORD *)v85.__r_.__value_.__l.__data_ != 0x4D4C3A414E534549
            || *(_QWORD *)(v85.__r_.__value_.__r.__words[0] + 8) != 0x323030322D33362DLL)
          {
            goto LABEL_50;
          }
LABEL_35:
          v12 = (std::string *)"IESNA:LM-63-2002";
LABEL_50:
          MEMORY[0x2348B4AD4](v64, v12);
          while (1)
          {
            size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __str.__r_.__value_.__l.__size_;
            if (!size)
              break;
            memset(&__p, 0, sizeof(__p));
            v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ >= 9)
                v20 = 9;
              else
                v20 = __p.__r_.__value_.__l.__size_;
            }
            else
            {
              if (HIBYTE(__p.__r_.__value_.__r.__words[2]) >= 9u)
                v20 = 9;
              else
                v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              p_p = &__p;
            }
            v22 = memcmp(p_p, "TILT=NONE", v20);
            if (v20 >= 9 && v22 == 0)
              goto LABEL_96;
            if (v19 < 0)
            {
              v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v24 = __p.__r_.__value_.__l.__size_ >= 0xA ? 10 : __p.__r_.__value_.__l.__size_;
            }
            else
            {
              v24 = v19 >= 0xAu ? 10 : v19;
              v25 = &__p;
            }
            v26 = memcmp(v25, "TILT= NONE", v24);
            if (v24 >= 0xA && !v26)
              goto LABEL_96;
            if (v19 < 0)
            {
              v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v27 = __p.__r_.__value_.__l.__size_ >= 0xA ? 10 : __p.__r_.__value_.__l.__size_;
            }
            else
            {
              v27 = v19 >= 0xAu ? 10 : v19;
              v28 = &__p;
            }
            if (((v29 = memcmp(v28, "TILT =NONE", v27), v27 < 0xA) || v29)
              && (v19 < 0
                ? (std::string *)((v31 = (std::string *)__p.__r_.__value_.__r.__words[0],
                                   __p.__r_.__value_.__l.__size_ >= 0xB)
                                ? (v30 = 11)
                                : (v30 = __p.__r_.__value_.__l.__size_))
                : (v19 >= 0xBu ? (v30 = 11) : (v30 = v19), v31 = &__p),
                  (v32 = memcmp(v31, "TILT = NONE", v30), v30 < 0xB) || v32))
            {
              if (v19 < 0)
              {
                v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if (__p.__r_.__value_.__l.__size_ >= 5)
                  v34 = 5;
                else
                  v34 = __p.__r_.__value_.__l.__size_;
              }
              else
              {
                if (v19 >= 5u)
                  v34 = 5;
                else
                  v34 = v19;
                v35 = &__p;
              }
              v36 = memcmp(v35, "TILT=", v34);
              if (v34 >= 5 && !v36
                || (v19 < 0
                  ? (std::string *)((v38 = (std::string *)__p.__r_.__value_.__r.__words[0],
                                     __p.__r_.__value_.__l.__size_ >= 5)
                                  ? (v37 = 5)
                                  : (v37 = __p.__r_.__value_.__l.__size_))
                  : (v19 >= 5u ? (v37 = 5) : (v37 = v19), v38 = &__p),
                    (v39 = memcmp(v38, "TILT =", v37), v33 = 0, v37 >= 5) && !v39))
              {
                MEMORY[0x2348B4AD4](a5, "TILT not supported");
                v33 = 1;
                LOBYTE(v19) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
              }
            }
            else
            {
LABEL_96:
              v33 = 3;
            }
            if ((v19 & 0x80) != 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if (v33)
              {
LABEL_123:
                if (v33 != 3)
                  goto LABEL_135;
                break;
              }
            }
            else if (v33)
            {
              goto LABEL_123;
            }
          }
          v15 = "Light Count is not valid";
          if (v66 < 0.0 || v66 > 32767.0)
            goto LABEL_134;
          if (v67 < 0.0)
          {
            MEMORY[0x2348B4AD4](a5, "Absolute photometry/non-positive TotalLumens unsupported", v67);
            v67 = 1.0;
          }
          if (v68 < 0.0)
          {
            v15 = "CandelaMult is not positive number";
            goto LABEL_134;
          }
          if (v69 >> 15)
          {
            v15 = "VAnglesNum is not valid";
            goto LABEL_134;
          }
          if (v70 >= 0x8000)
          {
            v15 = "HAnglesNum is not valid";
            goto LABEL_134;
          }
          std::vector<float>::resize((uint64_t)v77, (int)v69);
          std::vector<float>::resize((uint64_t)&v78[1], (int)v70);
          v41 = v69;
          if ((int)v69 >= 1)
          {
            v42 = 0;
            v43 = -3.4028e38;
            while (1)
            {
              LODWORD(__p.__r_.__value_.__l.__data_) = 0;
              v44 = *(float *)&__p.__r_.__value_.__l.__data_;
              if (*(float *)&__p.__r_.__value_.__l.__data_ < v43)
                break;
              *((_DWORD *)v77[0] + v42++) = __p.__r_.__value_.__l.__data_;
              v41 = v69;
              v43 = v44;
              if (v42 >= (int)v69)
                goto LABEL_157;
            }
            std::vector<float>::resize((uint64_t)v77, 0);
            std::vector<float>::resize((uint64_t)&v78[1], 0);
            MEMORY[0x2348B4AD4](a5, "V Values is not valid");
            goto LABEL_135;
          }
          v44 = -3.4028e38;
LABEL_157:
          v45 = v70;
          if ((int)v70 >= 1)
          {
            v46 = 0;
            v47 = -3.4028e38;
            while (1)
            {
              LODWORD(__p.__r_.__value_.__l.__data_) = 0;
              v48 = *(float *)&__p.__r_.__value_.__l.__data_;
              if (*(float *)&__p.__r_.__value_.__l.__data_ < v47)
                break;
              *((_DWORD *)v78[1] + v46++) = __p.__r_.__value_.__l.__data_;
              v45 = v70;
              v47 = v48;
              if (v46 >= (int)v70)
              {
                v41 = v69;
                goto LABEL_164;
              }
            }
            std::vector<float>::resize((uint64_t)v77, 0);
            std::vector<float>::resize((uint64_t)&v78[1], 0);
            MEMORY[0x2348B4AD4](a5, "H Values is not valid");
            goto LABEL_135;
          }
          v48 = -3.4028e38;
LABEL_164:
          v81[1] = v48;
          std::vector<float>::resize((uint64_t)&v82, (int)(v45 * v41));
          v49 = v70;
          if ((int)v70 < 1)
          {
            v52 = 0.0;
          }
          else
          {
            v50 = 0;
            v51 = 0;
            v52 = 0.0;
            v53 = v69;
            v54 = 0.0;
            do
            {
              if (v53 >= 1)
              {
                v55 = 0;
                do
                {
                  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
                  v56 = *(float *)&__p.__r_.__value_.__l.__data_;
                  if (*(float *)&__p.__r_.__value_.__l.__data_ != 0.0 && v54 < *((float *)v77[0] + v55))
                    v54 = *((float *)v77[0] + v55);
                  *((float *)v82 + (v51 + v55)) = *(float *)&__p.__r_.__value_.__l.__data_ * v68;
                  if (v56 >= v52)
                    v52 = v56;
                  ++v55;
                  v53 = v69;
                }
                while (v55 < (int)v69);
                v49 = v70;
                v51 += v55;
              }
              ++v50;
            }
            while (v50 < v49);
          }
          v81[2] = v44;
          v81[3] = v52 * v68;
          switch(v71)
          {
            case 3:
              v60 = "TypeA Photometric data not supported";
              break;
            case 2:
              v60 = "TypeB Photometric data not supported";
              break;
            case 1:
              if (*(float *)v78[1] == 0.0)
              {
                v59 = *(float *)(v79 - 4);
                if (v59 != 0.0)
                {
                  if (v59 == 90.0)
                  {
                  }
                  else if (v59 != 180.0)
                  {
                    goto LABEL_192;
                  }
                }
              }
LABEL_192:
              v61 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v61 = __str.__r_.__value_.__l.__size_;
              if (v61)
              {
                memset(&__p, 0, sizeof(__p));
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "END"))
                v62 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v62 = __str.__r_.__value_.__l.__size_;
                if (v62)
                {
                  std::vector<float>::resize((uint64_t)v77, 0);
                  std::vector<float>::resize((uint64_t)&v78[1], 0);
                  MEMORY[0x2348B4AD4](a5, "Unexpected content after END.");
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  goto LABEL_135;
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              realityio::RIOIESInfo::operator=(a3, (uint64_t)v64);
              MEMORY[0x2348B4AD4](a5, "");
              v8 = 1;
              goto LABEL_136;
            default:
              v60 = "Unknown PhotometricType";
              break;
          }
          MEMORY[0x2348B4AD4](a5, v60, v58);
          goto LABEL_135;
        }
LABEL_43:
        v12 = (std::string *)"IESNA:LM-63-1995";
        goto LABEL_50;
      }
      if (*(_DWORD *)v85.__r_.__value_.__l.__data_ != 1314080073
        || *(_DWORD *)(v85.__r_.__value_.__r.__words[0] + 3) != 825835854)
      {
        goto LABEL_50;
      }
LABEL_49:
      v12 = (std::string *)"IESNA91";
      goto LABEL_50;
    }
  }
  else if (*((_BYTE *)&v85.__r_.__value_.__s + 23))
  {
    if (HIBYTE(v85.__r_.__value_.__r.__words[2]) != 7)
    {
      if (HIBYTE(v85.__r_.__value_.__r.__words[2]) != 16)
      {
LABEL_41:
        v12 = &v85;
        goto LABEL_50;
      }
      if (v85.__r_.__value_.__r.__words[0] != 0x4D4C3A414E534549
        || v85.__r_.__value_.__l.__size_ != 0x353939312D33362DLL)
      {
        if (v85.__r_.__value_.__r.__words[0] != 0x4D4C3A414E534549
          || v85.__r_.__value_.__l.__size_ != 0x323030322D33362DLL)
        {
          goto LABEL_41;
        }
        goto LABEL_35;
      }
      goto LABEL_43;
    }
    if (LODWORD(v85.__r_.__value_.__l.__data_) != 1314080073
      || *(_DWORD *)((char *)v85.__r_.__value_.__r.__words + 3) != 825835854)
    {
      goto LABEL_41;
    }
    goto LABEL_49;
  }
  v15 = "Empty IES version";
LABEL_134:
  MEMORY[0x2348B4AD4](a5, v15);
LABEL_135:
  v8 = 0;
LABEL_136:
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  if (v78[1])
  {
    *(void **)&v79 = v78[1];
    operator delete(v78[1]);
  }
  if (v77[0])
  {
    v77[1] = v77[0];
    operator delete(v77[0]);
  }
  if (SHIBYTE(v65) < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v88 < 0)
    operator delete(__dst);
  return v8;
}

void sub_2300CF0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (a16 < 0)
    operator delete(__p);
  realityio::RIOIESInfo::~RIOIESInfo((realityio::RIOIESInfo *)&a17);
  if (*(char *)(v17 - 169) < 0)
    operator delete(*(void **)(v17 - 192));
  if (*(char *)(v17 - 145) < 0)
    operator delete(*(void **)(v17 - 168));
  if (*(char *)(v17 - 121) < 0)
    operator delete(*(void **)(v17 - 144));
  _Unwind_Resume(a1);
}

double realityio::`anonymous namespace'::getLineContent(std::string *a1, std::string *a2, std::string *a3, char a4, int a5)
{
  uint64_t size;
  std::string *v11;
  unint64_t v12;
  std::string *v13;
  int v14;
  char v16;
  char v17;
  std::string::size_type v18;

  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v11 = a1;
  else
    v11 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  v12 = (unint64_t)v11 + size;
  v13 = v11;
  if (size >= 1)
  {
    do
    {
      v14 = v13->__r_.__value_.__s.__data_[0];
      if (v14 == 10 || v14 == 13)
        break;
      v16 = (char)v14 < 33 ? a4 : 0;
      v17 = v14 == 44 ? a5 : 0;
      if ((v16 & 1) != 0)
        break;
      if ((v17 & 1) != 0)
        break;
      v13 = (std::string *)((char *)v13 + 1);
    }
    while ((unint64_t)v13 < v12);
  }
  std::string::assign(a3, a1, 0, (char *)v13 - (char *)v11);
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = (std::string::size_type)a1;
  else
    v18 = a1->__r_.__value_.__r.__words[0];
  std::string::assign(a2, a1, (std::string::size_type)v13 - v18, v12 - (_QWORD)v13);
}

float realityio::`anonymous namespace'::getFloat(std::string *a1, std::string *a2, float *a3, int a4)
{
  float result;
  void *v6;
  float v7;
  std::string v8;

  memset(&v8, 0, sizeof(v8));
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (void *)v8.__r_.__value_.__r.__words[0];
    v7 = atof(v8.__r_.__value_.__l.__data_);
    *a3 = v7;
    operator delete(v6);
  }
  else
  {
    result = atof((const char *)&v8);
    *a3 = result;
  }
  return result;
}

void sub_2300CF2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::`anonymous namespace'::getInt(std::string *a1, std::string *a2, int *a3)
{
  void *v4;
  std::string v5;

  memset(&v5, 0, sizeof(v5));
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
  {
    v4 = (void *)v5.__r_.__value_.__r.__words[0];
    *a3 = atoi(v5.__r_.__value_.__l.__data_);
    operator delete(v4);
  }
  else
  {
    *a3 = atoi((const char *)&v5);
  }
}

void sub_2300CF364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double realityio::`anonymous namespace'::skipSpaceAndLineEnd(std::string *__str, uint64_t a2, int a3)
{
  std::string::size_type size;
  int v6;
  std::string::size_type v7;
  std::string *v8;
  int v9;
  BOOL v10;
  std::string *v12;
  double result;
  std::string v14;
  char v15;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v6 = (char)size;
  v7 = 0;
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (size)
  {
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v6 >= 0)
      v8 = __str;
    while (1)
    {
      v9 = v8->__r_.__value_.__s.__data_[v7];
      v10 = v9 == 10 || v9 == 13;
      if (!v10 && (char)v9 > 32)
        break;
      if (size == ++v7)
      {
LABEL_21:
        v7 = size;
        goto LABEL_22;
      }
    }
  }
  if (v7 < size && a3 != 0)
  {
    v12 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v6 >= 0)
      v12 = __str;
    while (v12->__r_.__value_.__s.__data_[v7] == 44)
    {
      if (size == ++v7)
        goto LABEL_21;
    }
  }
LABEL_22:
  std::string::basic_string(&v14, __str, v7, size - v7, (std::allocator<char> *)&v15);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v14.__r_.__value_.__l.__data_;
  *(std::string *)a2 = v14;
  return result;
}

float realityio::`anonymous namespace'::mirrorData(realityio::_anonymous_namespace_ *this, realityio::RIOIESInfo *a2, float a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  float v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  float *v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  int v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  float result;

  v5 = *((_QWORD *)this + 13);
  v6 = v5 - *((_QWORD *)this + 12);
  if (v6)
  {
    v7 = v6 >> 2;
    do
    {
      --v7;
      v8 = (float *)*((_QWORD *)this + 12);
      v9 = (float *)*((_QWORD *)this + 13);
      v10 = (float)(a3 + a3) - v8[v7];
      v11 = *((_QWORD *)this + 14);
      if ((unint64_t)v9 >= v11)
      {
        v13 = v9 - v8;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)v8;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 112, v16);
          v8 = (float *)*((_QWORD *)this + 12);
          v9 = (float *)*((_QWORD *)this + 13);
        }
        else
        {
          v17 = 0;
        }
        v18 = (float *)&v17[4 * v13];
        *v18 = v10;
        v12 = v18 + 1;
        while (v9 != v8)
        {
          v19 = *((_DWORD *)v9-- - 1);
          *((_DWORD *)v18-- - 1) = v19;
        }
        *((_QWORD *)this + 12) = v18;
        *((_QWORD *)this + 13) = v12;
        *((_QWORD *)this + 14) = &v17[4 * v16];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v9 = v10;
        v12 = v9 + 1;
      }
      *((_QWORD *)this + 13) = v12;
      v20 = *((_DWORD *)this + 9);
      if (v20 >= 1)
      {
        v21 = 0;
        v22 = (char *)*((_QWORD *)this + 19);
        do
        {
          v23 = *((_DWORD *)this + 10) - 1;
          if (v23 >= (int)v7)
            v23 = v7;
          v24 = v23 & ~(v23 >> 31);
          v25 = v20 - 1;
          if (v20 - 1 >= v21)
            v25 = v21;
          v26 = (char *)*((_QWORD *)this + 18);
          v27 = *(_DWORD *)&v26[4 * (v25 & ~(v25 >> 31)) + 4 * v24 * v20];
          v28 = *((_QWORD *)this + 20);
          if ((unint64_t)v22 >= v28)
          {
            v30 = (v22 - v26) >> 2;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 62)
              std::vector<char const*>::__throw_length_error[abi:ne180100]();
            v32 = v28 - (_QWORD)v26;
            if (v32 >> 1 > v31)
              v31 = v32 >> 1;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
              v33 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 160, v33);
              v26 = (char *)*((_QWORD *)this + 18);
              v22 = (char *)*((_QWORD *)this + 19);
            }
            else
            {
              v34 = 0;
            }
            v35 = &v34[4 * v30];
            *(_DWORD *)v35 = v27;
            v29 = v35 + 4;
            while (v22 != v26)
            {
              v36 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v35 - 1) = v36;
              v35 -= 4;
            }
            *((_QWORD *)this + 18) = v35;
            *((_QWORD *)this + 19) = v29;
            *((_QWORD *)this + 20) = &v34[4 * v33];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_DWORD *)v22 = v27;
            v29 = v22 + 4;
          }
          *((_QWORD *)this + 19) = v29;
          ++v21;
          v20 = *((_DWORD *)this + 9);
          v22 = v29;
        }
        while (v21 < v20);
      }
    }
    while (v7);
    v5 = *((_QWORD *)this + 12);
    v37 = *((_QWORD *)this + 13);
  }
  else
  {
    v37 = *((_QWORD *)this + 13);
  }
  result = a3 + a3;
  *((float *)this + 32) = a3 + a3;
  *((_DWORD *)this + 10) = (unint64_t)(v37 - v5) >> 2;
  return result;
}

uint64_t realityio::RIOIESInfo::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  v4 = *(_OWORD *)(a2 + 52);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 52) = v4;
  if (a1 != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 72), *(char **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 96), *(char **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 2);
    v6 = *(_OWORD *)(a2 + 120);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v6;
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), *(char **)(a2 + 144), *(_QWORD *)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 2);
  }
  return a1;
}

void realityio::RIOIESInfo::~RIOIESInfo(realityio::RIOIESInfo *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

float realityio::`anonymous namespace'::computeFilterPos(realityio::_anonymous_namespace_ *this, float a2, float *a3)
{
  float v3;
  float v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;

  v3 = *(float *)this;
  v4 = 0.0;
  if (*(float *)this <= a2)
  {
    v5 = (int)a3 - 1;
    if (*((float *)this + v5) >= a2)
    {
      v6 = 0;
      if ((_DWORD)a3 != 1)
      {
        do
        {
          v7 = (v6 + v5 + 1) >> 1;
          if (*((float *)this + v7) <= a2)
            v6 = (v6 + v5 + 1) >> 1;
          else
            v5 = v7 - 1;
        }
        while (v6 < v5);
        v3 = *((float *)this + v6);
      }
      v8 = 0.0;
      if (v6 + 1 < a3)
      {
        v9 = *((float *)this + v6 + 1) - v3;
        if (v9 > 0.0001)
          v8 = (float)(a2 - v3) / v9;
      }
      return v8 + (float)v6;
    }
    else
    {
      return (float)v5;
    }
  }
  return v4;
}

uint64_t realityio::RIOIESInfoGenerateTexture2D(realityio *this, realityio::RIOIESInfo *a2, void *a3, unsigned int a4, int a5, int a6)
{
  int v8;
  BOOL v10;
  unsigned int v11;
  float v19;
  realityio::RIOIESInfo *v21;
  float v22;
  __float2 v23;
  unsigned int v24;
  float v25;
  float v26;
  float v27;
  __float2 v28;
  float v29;
  float i;
  unsigned int v31;
  float v32;
  unsigned int v33;
  float v34;
  signed int v35;
  signed int v36;
  float v37;
  float v38;
  int v39;
  int v40;
  signed int v41;
  int v42;
  signed int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  float32x4_t v54;
  int v55;
  int v56;
  float32x4_t v57;
  int v58;
  int v59;
  int v61;
  int v62;
  float32x4_t v64;
  realityio::RIOIESInfo *v70;
  int v71;
  int v74;
  int32x4_t v75;
  int32x4_t v76;
  int16x4_t v77;
  int16x4_t v78;
  char v79;
  char v81;
  float v82;
  unsigned int v84;
  int32x4_t v85;
  realityio::RIOIESInfo *v86;
  realityio::RIOIESInfo *v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float v91;

  if (!a4)
  {
    v79 = 1;
    return v79 & 1;
  }
  v8 = (int)a3;
  v10 = 0;
  v11 = 0;
  v82 = (float)a4;
  v91 = (float)a3;
  __asm
  {
    FMOV            V3.4S, #3.0
    FMOV            V2.4S, #-3.0
  }
  v89 = _Q2;
  v90 = _Q3;
  __asm { FMOV            V2.4S, #5.0 }
  v88 = _Q2;
  v19 = 1.0 / *((float *)this + 34);
  __asm { FMOV            V0.4S, #1.0 }
  v85 = _Q0;
  v21 = a2;
  v86 = a2;
  v87 = a2;
  do
  {
    v84 = v11;
    if (v8)
    {
      v81 = v10;
      v22 = (float)((float)((float)((float)((float)v11 / v82) * 180.0) / 360.0)
                  + (float)((float)((float)((float)v11 / v82) * 180.0) / 360.0))
          * 3.14159265;
      v23 = __sincosf_stret(v22);
      v24 = 0;
      v25 = acosf(v23.__cosval) / -6.28318531 * 360.0;
      v26 = v25 + 180.0;
      do
      {
        v27 = (float)((float)((float)((float)((float)v24 / v91) * 360.0) / 360.0)
                    + (float)((float)((float)((float)v24 / v91) * 360.0) / 360.0))
            * 3.14159265;
        v28 = __sincosf_stret(v27);
        v29 = atan2f(v23.__sinval * v28.__sinval, v23.__sinval * v28.__cosval) / 6.28318531 * 360.0;
        for (i = (float)(v29 + 180.0) + 90.0; i > 360.0; i = i + -360.0)
          ;
        v31 = *((_DWORD *)this + 9);
        v33 = *((_DWORD *)this + 10);
        v35 = vcvtms_s32_f32(v34);
        v36 = vcvtms_s32_f32(v32);
        v37 = v34 - (float)(int)floorf(v34);
        v38 = (float)(int)floorf(v32);
        v39 = v35 - 1;
        v40 = v36 - 1;
        v41 = v33 - 1;
        if ((int)(v33 - 1) < v35 - 1)
          v39 = v33 - 1;
        v42 = v39 & ~(v39 >> 31);
        v43 = v31 - 1;
        if ((int)(v31 - 1) < v40)
          v40 = v31 - 1;
        v44 = v40 & ~(v40 >> 31);
        v45 = v42 * v31;
        v46 = v42 * v31 + v44;
        v47 = *((_QWORD *)this + 18);
        if (v41 >= v35)
          v48 = v35;
        else
          v48 = v33 - 1;
        v49 = (v48 & ~(v48 >> 31)) * v31;
        if (v41 >= v35 + 1)
          v50 = v35 + 1;
        else
          v50 = v33 - 1;
        v51 = (v50 & ~(v50 >> 31)) * v31;
        v52 = v35 + 2;
        if (v41 < v52)
          v52 = v33 - 1;
        v53 = (v52 & ~(v52 >> 31)) * v31;
        if (v43 >= v36)
          v55 = v36;
        else
          v55 = v31 - 1;
        v56 = v55 & ~(v55 >> 31);
        v57.i32[0] = *(_DWORD *)(v47 + 4 * (v45 + v56));
        v57.i32[1] = *(_DWORD *)(v47 + 4 * (v49 + v56));
        v57.i32[2] = *(_DWORD *)(v47 + 4 * (v51 + v56));
        v57.i32[3] = *(_DWORD *)(v47 + 4 * (v53 + v56));
        if (v43 >= v36 + 1)
          v58 = v36 + 1;
        else
          v58 = v31 - 1;
        v59 = v58 & ~(v58 >> 31);
        v61 = v36 + 2;
        if (v43 < v61)
          v61 = v31 - 1;
        v62 = v61 & ~(v61 >> 31);
        _Q5.i32[0] = *(_DWORD *)(v47 + 4 * (v45 + v62));
        _Q5.i32[1] = *(_DWORD *)(v47 + 4 * (v49 + v62));
        _Q5.i32[2] = *(_DWORD *)(v47 + 4 * (v51 + v62));
        _Q5.i32[3] = *(_DWORD *)(v47 + 4 * (v53 + v62));
        v64.i64[0] = 0x3F0000003F000000;
        v64.i64[1] = 0x3F0000003F000000;
        v54.i32[3] = *(_DWORD *)(v47 + 4 * (v53 + v44));
        _Q4.i32[3] = *(_DWORD *)(v47 + 4 * (v53 + v59));
        v54.i32[2] = *(_DWORD *)(v47 + 4 * (v51 + v44));
        _Q4.i32[2] = *(_DWORD *)(v47 + 4 * (v51 + v59));
        v54.i32[1] = *(_DWORD *)(v47 + 4 * (v49 + v44));
        _Q4.i32[1] = *(_DWORD *)(v47 + 4 * (v49 + v59));
        v54.i32[0] = *(_DWORD *)(v47 + 4 * v46);
        _Q4.i32[0] = *(_DWORD *)(v47 + 4 * (v45 + v59));
        _Q2 = vmlaq_n_f32(v57, vmlaq_n_f32(vmulq_f32(vsubq_f32(_Q4, v54), v64), vmlaq_n_f32(vaddq_f32(_Q4, vaddq_f32(_Q4, vmlsq_f32(v54, v64, vmlaq_f32(_Q5, v88, v57)))), vmlaq_f32(vmlaq_f32(vmlsq_f32(vmulq_f32(vmulq_f32(v57, v90), v64), v64, v54), v64, vmulq_f32(_Q4, v89)), v64, _Q5), v32 - v38), v32 - v38), v32 - v38);
        _S6 = 3.0;
        __asm { FMLA            S5, S6, V2.S[1] }
        _S6 = -3.0;
        __asm { FMLA            S5, S6, V2.S[2] }
        _S6 = 5.0;
        __asm { FMLA            S4, S6, V2.S[1] }
        _S0 = v19
            * (float)(_Q2.f32[1]
                    + (float)((float)((float)((float)(_Q2.f32[2] - _Q2.f32[0]) * 0.5)
                                    + (float)((float)((float)(_Q2.f32[2]
                                                            + (float)(_Q2.f32[2]
                                                                    + (float)(_Q2.f32[0] - (float)(_Q4.f32[0] * 0.5))))
                                                    + (float)((float)((float)(_Q2.f32[3] + _Q5.f32[0]) * 0.5) * v37))
                                            * v37))
                            * v37));
        switch(a6)
        {
          case 1:
            v71 = (int)(float)((float)(_S0 * 255.0) + 0.5);
            if (a5 == 4)
            {
              *(_BYTE *)v21 = v71;
              *((_BYTE *)v21 + 1) = v71;
              *((_BYTE *)v21 + 2) = v71;
              *((_BYTE *)v21 + 3) = -1;
              v21 = (realityio::RIOIESInfo *)((char *)v21 + 4);
            }
            else
            {
              if (a5 != 1)
                goto LABEL_46;
              *(_BYTE *)v21 = v71;
              v21 = (realityio::RIOIESInfo *)((char *)v21 + 1);
            }
            break;
          case 2:
            __asm
            {
              FCVT            H0, S0
              FCVT            S0, H0
            }
            v74 = (int)_S0;
            if (a5 == 4)
            {
              v77 = (int16x4_t)-1;
              v77.i16[0] = v74;
              v78 = vzip1_s16(v77, v77);
              v78.i16[2] = v74;
              *(int16x4_t *)v86 = v78;
              v86 = (realityio::RIOIESInfo *)((char *)v86 + 8);
            }
            else
            {
              if (a5 != 1)
              {
LABEL_46:
                v79 = v81;
                return v79 & 1;
              }
              *(_WORD *)v86 = v74;
              v86 = (realityio::RIOIESInfo *)((char *)v86 + 2);
            }
            break;
          case 4:
            if (a5 == 4)
            {
              v75 = v85;
              *(float *)v75.i32 = _S0;
              v76 = vzip1q_s32(v75, v75);
              *(float *)&v76.i32[2] = _S0;
              *(int32x4_t *)v87 = v76;
              v70 = (realityio::RIOIESInfo *)((char *)v87 + 16);
            }
            else
            {
              if (a5 != 1)
                goto LABEL_46;
              *(float *)v87 = _S0;
              v70 = (realityio::RIOIESInfo *)((char *)v87 + 4);
            }
            v87 = v70;
            break;
          default:
            goto LABEL_46;
        }
        ++v24;
      }
      while (v24 != v8);
    }
    v11 = v84 + 1;
    v10 = v84 + 1 >= a4;
  }
  while (v84 + 1 != a4);
  v79 = 1;
  return v79 & 1;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType *realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType::SpatialAudioBuilderTokens_StaticTokenType(realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v70 = (uint64_t *)(MEMORY[0x2348B2758](this, "auralMode", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 80, "nonSpatial", 0);
  MEMORY[0x2348B2758]((char *)this + 88, "onceFromStart", 0);
  MEMORY[0x2348B2758]((char *)this + 96, "onceFromStartToEnd", 0);
  MEMORY[0x2348B2758]((char *)this + 104, "playbackMode", 0);
  MEMORY[0x2348B2758]((char *)this + 112, "SpatialAudio", 0);
  MEMORY[0x2348B2758]((char *)this + 120, "spatial", 0);
  MEMORY[0x2348B2758]((char *)this + 128, "startTime", 0);
  MEMORY[0x2348B2758]((char *)this + 136, "timeCodesPerSecond", 0);
  MEMORY[0x2348B2758]((char *)this + 144, "timeSamples", 0);
  v2 = *(_QWORD *)this;
  v71 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v70;
  v72 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v73 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v74 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v75 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v76 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v77 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v78 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v79 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v80 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v81 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v82 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v83 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v84 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v85 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v86 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  v50 = *((_QWORD *)this + 16);
  v87 = v50;
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 2, v51));
    if ((v52 & 1) == 0)
      v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  v53 = *((_QWORD *)this + 17);
  v88 = v53;
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 2, v54));
    if ((v55 & 1) == 0)
      v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  v56 = *((_QWORD *)this + 18);
  v89 = v56;
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    if ((v58 & 1) == 0)
      v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  v59 = operator new(0x98uLL);
  v60 = 0;
  *((_QWORD *)this + 19) = v59;
  *((_QWORD *)this + 20) = v59;
  *((_QWORD *)this + 21) = v59 + 19;
  do
  {
    v61 = *(&v71 + v60);
    *v59 = v61;
    if ((v61 & 7) != 0)
    {
      v62 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 2, v62));
      if ((v63 & 1) == 0)
        *v59 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v60;
    ++v59;
  }
  while (v60 != 19);
  v64 = &v90;
  *((_QWORD *)this + 20) = v59;
  do
  {
    v66 = *--v64;
    v65 = v66;
    if ((v66 & 7) != 0)
    {
      v67 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
      do
        v68 = __ldxr(v67);
      while (__stlxr(v68 - 2, v67));
    }
  }
  while (v64 != &v71);
  return this;
}

void sub_2300D054C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, _QWORD *a19, void **a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a20);
  v51 = (char *)&a41;
  while (1)
  {
    v53 = *((_QWORD *)v51 - 1);
    v51 -= 8;
    v52 = v53;
    if ((v53 & 7) != 0)
    {
      v54 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
      do
        v55 = __ldxr(v54);
      while (__stlxr(v55 - 2, v54));
    }
    if (v51 == &a22)
    {
      if ((*v50 & 7) != 0)
      {
        v56 = (unsigned int *)(*v50 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      if ((*v49 & 7) != 0)
      {
        v58 = (unsigned int *)(*v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v48 & 7) != 0)
      {
        v60 = (unsigned int *)(*v48 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v47 & 7) != 0)
      {
        v62 = (unsigned int *)(*v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v46 & 7) != 0)
      {
        v64 = (unsigned int *)(*v46 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v45 & 7) != 0)
      {
        v66 = (unsigned int *)(*v45 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*v44 & 7) != 0)
      {
        v68 = (unsigned int *)(*v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*v43 & 7) != 0)
      {
        v70 = (unsigned int *)(*v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*v42 & 7) != 0)
      {
        v72 = (unsigned int *)(*v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*a11 & 7) != 0)
      {
        v74 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*a12 & 7) != 0)
      {
        v76 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a13 & 7) != 0)
      {
        v78 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*a14 & 7) != 0)
      {
        v80 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      if ((*a15 & 7) != 0)
      {
        v82 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if ((*a16 & 7) != 0)
      {
        v84 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      if ((*a17 & 7) != 0)
      {
        v86 = (unsigned int *)(*a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
      if ((*a18 & 7) != 0)
      {
        v88 = (unsigned int *)(*a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      if ((*a19 & 7) != 0)
      {
        v90 = (unsigned int *)(*a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      if ((*v41 & 7) != 0)
      {
        v92 = (unsigned int *)(*v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v93 = __ldxr(v92);
        while (__stlxr(v93 - 2, v92));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_2300D0854()
{
  JUMPOUT(0x2300D06E8);
}

void sub_2300D085C()
{
  JUMPOUT(0x2300D070CLL);
}

void sub_2300D0864()
{
  JUMPOUT(0x2300D0730);
}

void sub_2300D086C()
{
  JUMPOUT(0x2300D0754);
}

void sub_2300D0874()
{
  JUMPOUT(0x2300D0778);
}

void sub_2300D087C()
{
  JUMPOUT(0x2300D079CLL);
}

void sub_2300D0884()
{
  JUMPOUT(0x2300D07C0);
}

void sub_2300D088C()
{
  JUMPOUT(0x2300D07E4);
}

void sub_2300D0894()
{
  JUMPOUT(0x2300D0808);
}

void sub_2300D089C()
{
  JUMPOUT(0x2300D082CLL);
}

void realityio::generateSpatialAudioDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _BYTE *v19;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v20;
  realityio::AnyValueDirtyPropertyDescriptor *v21;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v22;
  realityio::AnyValueDirtyPropertyDescriptor *v23;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v24;
  realityio::AnyValueDirtyPropertyDescriptor *v25;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v26;
  realityio::AnyValueDirtyPropertyDescriptor *v27;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v28;
  realityio::AnyValueDirtyPropertyDescriptor *v29;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v30;
  realityio::AnyValueDirtyPropertyDescriptor *v31;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v32;
  realityio::AnyValueDirtyPropertyDescriptor *v33;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v34;
  uint64_t i;
  uint64_t j;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44[3];
  _QWORD *v45[3];
  __int128 v46;
  _QWORD *v47[3];
  __int128 v48;
  __int128 v49;
  _QWORD *v50[3];
  __int128 v51;
  _QWORD *v52[3];
  uint64_t v53;
  uint64_t v54;
  void **v55;
  _OWORD v56[7];
  __int128 v57;
  _OWORD v58[2];
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54A80);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54A80))
  {
    v7 = operator new();
    v8 = operator new();
    v9 = operator new();
    Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
    v11 = *((_QWORD *)Data + 2);
    *(_QWORD *)v9 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      v11 = *(_QWORD *)v9;
      if ((v13 & 1) == 0)
      {
        v11 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v9 = v11;
      }
    }
    *(_BYTE *)(v9 + 8) = v11 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v49, v9);
    v58[0] = v49;
    v49 = 0uLL;
    v14 = operator new();
    v15 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
    if (!v15)
      v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
    v16 = *((_QWORD *)v15 + 17);
    *(_QWORD *)v14 = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 2, v17));
      v16 = *(_QWORD *)v14;
      if ((v18 & 1) == 0)
      {
        v16 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v14 = v16;
      }
    }
    *(_BYTE *)(v14 + 8) = v16 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v48, v14);
    v58[1] = v48;
    v48 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::vector[abi:ne180100](v50, v58, 2uLL);
    v19 = (_BYTE *)operator new();
    v20 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
    if (!v20)
      v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
    memset(v45, 0, sizeof(v45));
    v21 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v22 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
    if (!v22)
      v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v21, v22);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v43, (uint64_t)v21);
    v56[0] = v43;
    v43 = 0uLL;
    v23 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v24 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
    if (!v24)
      v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v23, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v24 + 8));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v42, (uint64_t)v23);
    v56[1] = v42;
    v42 = 0uLL;
    v25 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v26 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
    if (!v26)
      v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v25, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v26 + 24));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v41, (uint64_t)v25);
    v56[2] = v41;
    v41 = 0uLL;
    v27 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v28 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
    if (!v28)
      v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v27, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v28 + 144));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v40, (uint64_t)v27);
    v56[3] = v40;
    v40 = 0uLL;
    v29 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v30 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
    if (!v30)
      v30 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v29, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v30 + 72));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v39, (uint64_t)v29);
    v56[4] = v39;
    v39 = 0uLL;
    v31 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v32 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
    if (!v32)
      v32 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v31, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v32 + 104));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v38, (uint64_t)v31);
    v56[5] = v38;
    v38 = 0uLL;
    v33 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v34 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
    if (!v34)
      v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SpatialAudioBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v33, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v34 + 128));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v37, (uint64_t)v33);
    v56[6] = v37;
    v37 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v44, v56, 7uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v19, (uint64_t *)v20 + 14, v45, v44);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v46, (uint64_t)v19);
    v57 = v46;
    v46 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v47, &v57, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v50, v47);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v51, v8);
    v59 = v51;
    v51 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v52, &v59, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v52);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v53, v7);
    _MergedGlobals_31 = v53;
    *(_QWORD *)algn_255E54A78 = v54;
    v53 = 0;
    v54 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v53);
    v55 = (void **)v52;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v55);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v59);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v51);
    v55 = (void **)v47;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v55);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v57);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
    v55 = (void **)v44;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v55);
    for (i = 6; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v56[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v37);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v40);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v41);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
    *(_QWORD *)&v56[0] = v45;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
    *(_QWORD *)&v56[0] = v50;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
    for (j = 1; j != -1; --j)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v58[j]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v48);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v49);
    __cxa_guard_release(&qword_255E54A80);
  }
  v4 = *(_QWORD *)algn_255E54A78;
  *a1 = _MergedGlobals_31;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_2300D0F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;

  MEMORY[0x2348B4E1C](v52, 0x10A1C40F82F910ELL);
  a51 = (void **)&a40;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a51);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v54 - 144 + i);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  MEMORY[0x2348B4E1C](v51, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v53, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54A80);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetsGetTypeID()
{
  if (RIOPxrUsdVariantSetsGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdVariantSetsGetTypeID::onceToken, &__block_literal_global_19);
  return RIOPxrUsdVariantSetsGetTypeID::typeID;
}

uint64_t RIOPxrUsdVariantSetsCreateVariantSet(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  void *__p;
  char v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;

  v24 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v25 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v26, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v27, (_DWORD *)(a1 + 36));
  v7 = *(_QWORD *)(a1 + 40);
  v28 = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::AddVariantSet();
  if (v17 < 0)
    operator delete(__p);
  v10 = RIOPxrUsdVariantSetCreate<pxrInternal__aapl__pxrReserved__::UsdVariantSet &>((const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v18);
  if (v23 < 0)
    operator delete(v22);
  if ((v21 & 7) != 0)
  {
    v11 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  if (v19)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
  if ((v28 & 7) != 0)
  {
    v13 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
  if (v25)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
  return v10;
}

void sub_2300D1598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)(v15 - 64));
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetCreate<pxrInternal__aapl__pxrReserved__::UsdVariantSet &>(const pxrInternal__aapl__pxrReserved__::UsdVariantSet *a1)
{
  uint64_t Instance;
  uint64_t v3;

  if (RIOPxrUsdVariantSetGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdVariantSetGetTypeID::onceToken, &__block_literal_global_4);
  Instance = _CFRuntimeCreateInstance();
  v3 = Instance;
  if (Instance)
    pxrInternal__aapl__pxrReserved__::UsdVariantSet::UsdVariantSet((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)(Instance + 16), a1);
  return v3;
}

void pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets(pxrInternal__aapl__pxrReserved__::UsdVariantSets *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

__CFArray *RIOPxrUsdVariantSetsCopySetNames(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  __CFArray *Mutable;
  uint64_t i;
  const char *v10;
  CFStringRef v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  void **v21;

  v16 = *(_DWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v17 = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 48);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, (_DWORD *)(a1 + 36));
  v5 = *(_QWORD *)(a1 + 40);
  v20 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetNames((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)&v16);
  for (i = v15[0]; i != v15[1]; i += 24)
  {
    v10 = (const char *)i;
    if (*(char *)(i + 23) < 0)
      v10 = *(const char **)i;
    v11 = CFStringCreateWithCString(0, v10, 0x8000100u);
    CFArrayAppendValue(Mutable, v11);
    CFRelease(v11);
  }
  v21 = (void **)v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  if ((v20 & 7) != 0)
  {
    v12 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v17)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  return Mutable;
}

void sub_2300D182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetsCopyVariantSet(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  void *__p;
  char v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;

  v24 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v25 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v26, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v27, (_DWORD *)(a1 + 36));
  v7 = *(_QWORD *)(a1 + 40);
  v28 = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSet();
  if (v17 < 0)
    operator delete(__p);
  v10 = RIOPxrUsdVariantSetCreate<pxrInternal__aapl__pxrReserved__::UsdVariantSet &>((const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v18);
  if (v23 < 0)
    operator delete(v22);
  if ((v21 & 7) != 0)
  {
    v11 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  if (v19)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
  if ((v28 & 7) != 0)
  {
    v13 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
  if (v25)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
  return v10;
}

void sub_2300D19E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a15);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)(v15 - 64));
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetsHasVariantSet(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t HasVariantSet;
  unsigned int *v11;
  unsigned int v12;
  void *__p;
  char v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  v16 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v17 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, (_DWORD *)(a1 + 36));
  v7 = *(_QWORD *)(a1 + 40);
  v20 = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  HasVariantSet = pxrInternal__aapl__pxrReserved__::UsdVariantSets::HasVariantSet();
  if (v15 < 0)
    operator delete(__p);
  if ((v20 & 7) != 0)
  {
    v11 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  if (v17)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  return HasVariantSet;
}

void sub_2300D1B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)&a16);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrUsdVariantSetsCopyVariantSelection(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  const char *v10;
  CFStringRef v11;
  unsigned int *v12;
  unsigned int v13;
  void *__p;
  char v16;
  void *v17;
  char v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  v19 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v20 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v22, (_DWORD *)(a1 + 36));
  v7 = *(_QWORD *)(a1 + 40);
  v23 = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSelection();
  if (v16 < 0)
    operator delete(__p);
  if (v18 >= 0)
    v10 = (const char *)&v17;
  else
    v10 = (const char *)v17;
  v11 = CFStringCreateWithCString(0, v10, 0x8000100u);
  if (v18 < 0)
    operator delete(v17);
  if ((v23 & 7) != 0)
  {
    v12 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  if (v20)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  return v11;
}

void sub_2300D1CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)&a21);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdVariantSetsSetSelection(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  std::recursive_mutex *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  void *v19;
  char v20;
  void *__p[2];
  char v22;
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;

  v29 = *(_DWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v30 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)(a1 + 36));
  v9 = *(_QWORD *)(a1 + 40);
  v33 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSet();
  if (v22 < 0)
    operator delete(__p[0]);
  v12 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)v23);
  std::recursive_mutex::lock(v12);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  std::string::basic_string[abi:ne180100]<0>(&v19, a3);
  v13 = pxrInternal__aapl__pxrReserved__::UsdVariantSets::SetSelection();
  if (v20 < 0)
    operator delete(v19);
  if (v22 < 0)
    operator delete(__p[0]);
  std::recursive_mutex::unlock(v12);
  if (v28 < 0)
    operator delete(v27);
  if ((v26 & 7) != 0)
  {
    v14 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  if (v24)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v24);
  if ((v33 & 7) != 0)
  {
    v16 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
  if (v30)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
  return v13;
}

void sub_2300D1EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  std::recursive_mutex *v22;
  uint64_t v23;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::recursive_mutex::unlock(v22);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet(&a22);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)(v23 - 80));
  _Unwind_Resume(a1);
}

__CFDictionary *RIOPxrUsdVariantSetsCopyAllVariantSelections(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  __CFDictionary *Mutable;
  _QWORD **v9;
  const char *v10;
  CFStringRef v11;
  const char *v12;
  CFStringRef v13;
  _QWORD *v14;
  _QWORD **v15;
  BOOL v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD **v20;
  _QWORD *v21[2];
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v22 = *(_DWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v23 = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 48);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, (_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, (_DWORD *)(a1 + 36));
  v5 = *(_QWORD *)(a1 + 40);
  v26 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetAllVariantSelections((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)&v22);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v9 = v20;
  if (v20 != v21)
  {
    do
    {
      v10 = (const char *)(v9 + 4);
      if (*((char *)v9 + 55) < 0)
        v10 = *(const char **)v10;
      v11 = CFStringCreateWithCString(0, v10, 0x8000100u);
      v12 = (const char *)(v9 + 7);
      if (*((char *)v9 + 79) < 0)
        v12 = *(const char **)v12;
      v13 = CFStringCreateWithCString(0, v12, 0x8000100u);
      CFDictionaryAddValue(Mutable, v11, v13);
      CFRelease(v11);
      CFRelease(v13);
      v14 = v9[1];
      if (v14)
      {
        do
        {
          v15 = (_QWORD **)v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD **)v9[2];
          v16 = *v15 == v9;
          v9 = v15;
        }
        while (!v16);
      }
      v9 = v15;
    }
    while (v15 != v21);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v20, v21[0]);
  if ((v26 & 7) != 0)
  {
    v17 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
  if (v23)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
  return Mutable;
}

void sub_2300D2154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)va, v5);
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::~UsdVariantSets((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)va1);
  _Unwind_Resume(a1);
}

uint64_t _RIOPxrUsdVariantSetsCFFinalize(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;

  v2 = a1[5];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
  result = a1[3];
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

BOOL _RIOPxrUsdVariantSetsCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrUsdVariantSetsCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrUsdVariantSetsCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdVariantSets %p>"), a1);
}

CFStringRef _RIOPxrUsdVariantSetsCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdVariantSets %p>"), a1);
}

uint64_t RIOCancellableGetTypeID()
{
  if (RIOCancellableGetTypeID::onceToken != -1)
    dispatch_once(&RIOCancellableGetTypeID::onceToken, &__block_literal_global_20);
  return RIOCancellableGetTypeID::typeID;
}

uint64_t RIOCancellableCancel(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16));
  return result;
}

uint64_t _RIOCancellableCFFinalize(_QWORD *a1)
{
  uint64_t result;

  result = a1[2];
  a1[2] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL _RIOCancellableCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOCancellableCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOCancellableCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOCancellable %p>"), a1);
}

CFStringRef _RIOCancellableCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOCancellable %p>"), a1);
}

realityio::DirectionalLightComponentBuilder *realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(realityio::DirectionalLightComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v19;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v20;
  realityio::AnyValueDirtyPropertyDescriptor *v21;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v22;
  realityio::AnyValueDirtyPropertyDescriptor *v23;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v24;
  realityio::AnyValueDirtyPropertyDescriptor *v25;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v26;
  realityio::AnyValueDirtyPropertyDescriptor *v27;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v28;
  realityio::AnyValueDirtyPropertyDescriptor *v29;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v30;
  realityio::AnyValueDirtyPropertyDescriptor *v31;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v32;
  realityio::AnyValueDirtyPropertyDescriptor *v33;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v34;
  uint64_t i;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD *v50[3];
  _QWORD *v51[3];
  __int128 v52;
  _QWORD *v53[3];
  _QWORD *v54[3];
  __int128 v55;
  _QWORD *v56[3];
  uint64_t v57;
  uint64_t v58;
  void **v59;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[3];
  _QWORD *v63;
  _OWORD v64[8];
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v40, "DirectionalLightComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kDirectionalLightComponentBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54AA8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54AA8))
  {
    v15 = operator new();
    v16 = operator new();
    memset(v54, 0, sizeof(v54));
    v17 = (_BYTE *)operator new();
    Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    memset(v51, 0, sizeof(v51));
    v19 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v20 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v20)
      v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v19, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v20 + 56));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v49, (uint64_t)v19);
    v64[0] = v49;
    v49 = 0uLL;
    v21 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v22 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v22)
      v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v21, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v22 + 64));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v48, (uint64_t)v21);
    v64[1] = v48;
    v48 = 0uLL;
    v23 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v24 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v24)
      v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v23, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v24 + 72));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v47, (uint64_t)v23);
    v64[2] = v47;
    v47 = 0uLL;
    v25 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v26 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v26)
      v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v25, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v26 + 88));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v46, (uint64_t)v25);
    v64[3] = v46;
    v46 = 0uLL;
    v27 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v28 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v28)
      v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v27, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v28 + 96));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v45, (uint64_t)v27);
    v64[4] = v45;
    v45 = 0uLL;
    v29 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v30 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v30)
      v30 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v29, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v30 + 120));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v44, (uint64_t)v29);
    v64[5] = v44;
    v44 = 0uLL;
    v31 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v32 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v32)
      v32 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v31, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v32 + 128));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v43, (uint64_t)v31);
    v64[6] = v43;
    v43 = 0uLL;
    v33 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v34 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v34)
      v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v33, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v34 + 136));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v42, (uint64_t)v33);
    v64[7] = v42;
    v42 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v50, v64, 8uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v17, (uint64_t *)Data + 5, v51, v50);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v52, (uint64_t)v17);
    v65 = v52;
    v52 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v53, &v65, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v54, v53);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v55, v16);
    v66 = v55;
    v55 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v56, &v66, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v56);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v57, v15);
    qword_255E54A98 = v57;
    unk_255E54AA0 = v58;
    v57 = 0;
    v58 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v57);
    v59 = (void **)v56;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v66);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
    v59 = (void **)v53;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v65);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v52);
    v59 = (void **)v50;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v59);
    for (i = 7; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v64[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v44);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v45);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v47);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v48);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v49);
    *(_QWORD *)&v64[0] = v51;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
    *(_QWORD *)&v64[0] = v54;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
    __cxa_guard_release(&qword_255E54AA8);
  }
  v36 = qword_255E54A98;
  v37 = (std::__shared_weak_count *)unk_255E54AA0;
  if (unk_255E54AA0)
  {
    v5 = (unint64_t *)(unk_255E54AA0 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v63 = v62;
  v60[0] = &off_24FDF4FC8;
  v61 = v60;
  v62[0] = &off_24FDF4F48;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v40, (uint64_t)__p, &v36, (uint64_t)v62, (uint64_t)v60);
  v7 = v61;
  if (v61 == v60)
  {
    v8 = 4;
    v7 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
LABEL_10:
  v9 = v63;
  if (v63 == v62)
  {
    v10 = 4;
    v9 = v62;
    goto LABEL_14;
  }
  if (v63)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  v11 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v39 < 0)
    operator delete(__p[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  *(_QWORD *)this = &off_24FDF4ED0;
  return this;
}

void sub_2300D2AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  MEMORY[0x2348B4E1C](v50, 0x10A1C40F82F910ELL);
  *(_QWORD *)(v53 - 256) = &a50;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 256));
  MEMORY[0x2348B4E1C](v51, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v52, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54AA8);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t realityio::DirectionalLightComponentBuilder::run(realityio::DirectionalLightComponentBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v6;
  unsigned __int32 v7;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v8;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v9;
  unsigned __int32 v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned __int8 v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int32 v27;
  float v28;
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  realityio::Inputs *v33;
  __n128 v34;
  char v35;
  __n128 v36;
  char v37;
  void *__p;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v3 = (realityio::Inputs *)((char *)a2 + 32);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v4, v3);
  Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeColor4FAndGamut((pxrInternal__aapl__pxrReserved__::UsdObject *)v29, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)Data + 72), &v36, (__n128)xmmword_230214180);
  v34 = v36;
  v35 = v37;
  v28 = 0.0;
  v6 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v6)
    v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v29, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v6 + 56), (uint64_t)&v36);
  if (v36.n128_u8[0])
  {
    v7 = v36.n128_u32[2];
  }
  else
  {
    v7 = 1.0;
    if (v39 < 0)
      operator delete(__p);
  }
  v28 = *(float *)&v7;
  v27 = 0;
  v8 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v8)
    v8 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v29, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v8 + 64), (uint64_t)&v36);
  if (v36.n128_u8[0])
  {
    v10 = v36.n128_u32[2];
  }
  else
  {
    v10 = 0;
    if (v39 < 0)
      operator delete(__p);
  }
  v27 = v10;
  v28 = realityio::scaleLightIntensityByStageUnits((realityio *)v29, v9, *MEMORY[0x24BE21AD8] * v28);
  v26 = 0;
  v11 = *((_QWORD *)v33 + 6);
  v12 = operator new(0x40uLL);
  *v12 = &off_24FDF5048;
  v12[1] = &v33;
  v12[2] = v29;
  v12[3] = this;
  v12[4] = &v26;
  v12[5] = &v28;
  v12[6] = &v27;
  v12[7] = &v34;
  __p = v12;
  (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v11 + 16))(v11, &v36);
  v13 = (__n128 *)__p;
  if (__p == &v36)
  {
    v14 = 4;
    v13 = &v36;
  }
  else
  {
    if (!__p)
      goto LABEL_20;
    v14 = 5;
  }
  (*(void (**)(void))(v13->n128_u64[0] + 8 * v14))();
LABEL_20:
  v16 = *((_QWORD *)this + 2);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v36.n128_u64[0] = v16;
  v36.n128_u64[1] = (unint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = atomic_load((unsigned __int8 *)&qword_255E54A90);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_255E54A90))
  {
    v25 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v25, "light_component");
    _MergedGlobals_32 = (uint64_t)v25;
    __cxa_guard_release(&qword_255E54A90);
  }
  realityio::Outputs::storeValue<REComponent *&>(v16, (__int128 *)_MergedGlobals_32, &v26);
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if ((v32 & 7) != 0)
  {
    v22 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
  result = v30;
  if (v30)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
  return result;
}

void sub_2300D3278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  MEMORY[0x2348B4E1C](v4, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_255E54A90);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<REComponent *&>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 *v13;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDF5148;
  v7[3] = &off_24FDF5198;
  v7[4] = *a3;
  *(_QWORD *)&v12 = v7 + 3;
  *((_QWORD *)&v12 + 1) = v7;
  v13 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v13);
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v8 + 7), &v12);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_2300D3420(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *realityio::DirectionalLightComponentBuilder::clear(realityio::DirectionalLightComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  realityio::Inputs *v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a2 + 6);
  v5 = a2;
  v6[0] = &off_24FDF51C8;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_2300D34F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::DirectionalLightComponentBuilder::~DirectionalLightComponentBuilder(realityio::DirectionalLightComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF4F48;
  return result;
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF4F48;
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2300D36F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF4FC8;
  return result;
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF4FC8;
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  std::string::size_type v14;
  std::__shared_weak_count *v15;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v13 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>("none", (std::string::size_type *)Data + 11, &v13, &v14);
  v5 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2300D39A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::DirectionalLightComponentBuilder::DirectionalLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24FDF5048;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDF5048;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  realityio *v5;
  _QWORD *v6;
  uint8_t *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t Text;
  __int128 v12;
  __int128 v13;
  realityio *v14;
  char v15[8];
  realityio *v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  v3 = **(_QWORD **)(a1 + 8);
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v3, v4, (uint64_t)v15);
  if (!v15[0])
  {
    v14 = 0;
    goto LABEL_8;
  }
  v5 = v16;
  v14 = v16;
  if (!v16)
  {
LABEL_8:
    v9 = *(id *)(realityio::logObjects(v5) + 24);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), &v17);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
      *(_DWORD *)buf = 136315138;
      v19 = Text;
      _os_log_impl(&dword_22FF26000, v9, OS_LOG_TYPE_DEFAULT, "Stopping operation to set directionalLight component because entity no longer exists for prim \"%s\"", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    }

    goto LABEL_11;
  }
  RERetain();
  REDirectionalLightComponentGetComponentType();
  v12 = *(_OWORD *)(a1 + 48);
  v13 = *(_OWORD *)(a1 + 32);
  v20 = 0;
  v6 = operator new(0x30uLL);
  *v6 = &off_24FDF50B8;
  v6[1] = v2;
  *((_OWORD *)v6 + 1) = v13;
  *((_OWORD *)v6 + 2) = v12;
  v20 = (uint8_t *)v6;
  v17 = REEntityGetOrAddComponentByClass();
  if (!v20)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint8_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v17);
  RENetworkMarkComponentDirty();
  v7 = v20;
  if (v20 == buf)
  {
    v8 = 4;
    v7 = buf;
    goto LABEL_13;
  }
  if (v20)
  {
    v8 = 5;
LABEL_13:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
LABEL_11:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v14);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_2300D3D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio32DirectionalLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio32DirectionalLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24FDF50B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio32DirectionalLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDF50B8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio32DirectionalLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  **(_QWORD **)(a1 + 16) = v3;
  exp2f(**(float **)(a1 + 32));
  REDirectionalLightComponentSetIntensity();
  return REDirectionalLightComponentSetColorGamut3F();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio32DirectionalLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio32DirectionalLightComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio32DirectionalLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio32DirectionalLightComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<REComponent *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF5148;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<REComponent *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF5148;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<REComponent *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void std::__function::__func<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF51C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF51C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::EntityBuilder *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[8];
  uint64_t v6;

  v1 = **((_QWORD **)a1 + 1);
  v2 = realityio::EntityBuilder::kInputName(a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v1, v2, (uint64_t)v5);
  if (v5[0])
  {
    v4 = v6;
    if (v6)
    {
      RERetain();
      REDirectionalLightComponentGetComponentType();
      REEntityRemoveComponentByClass();
    }
  }
  else
  {
    v4 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v4);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v5);
}

void sub_2300D406C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::DirectionalLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType *realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType::CapsuleMeshBuilderTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int **v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(MEMORY[0x2348B2758](this, "Capsule", 0) + 8);
  MEMORY[0x2348B2758](v2, "axis", 0);
  MEMORY[0x2348B2758](this + 2, "height", 0);
  MEMORY[0x2348B2758](this + 3, "radius", 0);
  MEMORY[0x2348B2758](this + 4, "material:binding", 0);
  v3 = *this;
  v29 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v29 = v4;
  }
  v6 = *v2;
  v30 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v30 = v7;
  }
  v9 = this[2];
  v31 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v31 = v10;
  }
  v12 = this[3];
  v32 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v32 = v13;
  }
  v15 = this[4];
  v33 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v33 = v16;
  }
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  v18 = (unsigned int *)operator new(0x28uLL);
  v19 = 0;
  this[5] = v18;
  this[6] = v18;
  this[7] = v18 + 10;
  do
  {
    v20 = (&v29)[v19];
    *(_QWORD *)v18 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 2, v21));
      if ((v22 & 1) == 0)
        *(_QWORD *)v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v19;
    v18 += 2;
  }
  while (v19 != 5);
  v23 = (unsigned int **)&v34;
  this[6] = v18;
  do
  {
    v25 = (uint64_t)*--v23;
    v24 = v25;
    if ((v25 & 7) != 0)
    {
      v26 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
    }
  }
  while (v23 != &v29);
  return (realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType *)this;
}

void sub_2300D4330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  v22 = &a16;
  while (1)
  {
    v24 = *--v22;
    v23 = v24;
    if ((v24 & 7) != 0)
    {
      v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    if (v22 == (uint64_t *)&a11)
    {
      if ((*v20 & 7) != 0)
      {
        v27 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      if ((*v19 & 7) != 0)
      {
        v29 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      if ((*v18 & 7) != 0)
      {
        v31 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      if ((*v17 & 7) != 0)
      {
        v33 = (unsigned int *)(*v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      if ((*v16 & 7) != 0)
      {
        v35 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::getCapsuleMeshBuilderDirtyStageDescriptor(uint64_t *a1@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count_vtbl *v4;
  uint64_t *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v6;
  unsigned int **v7;
  uint64_t v8;
  realityio::AnyValueDirtyPropertyDescriptor *v9;
  unsigned int **v10;
  uint64_t v11;
  realityio::AnyValueDirtyPropertyDescriptor *v12;
  unsigned int **v13;
  uint64_t v14;
  realityio::AnyValueDirtyPropertyDescriptor *v15;
  unsigned int **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t i;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36[3];
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42[3];
  void **v43;
  char v44;
  void **v45[11];

  v45[10] = *(void ***)MEMORY[0x24BDAC8D0];
  v3 = operator new();
  memset(v42, 0, sizeof(v42));
  v4 = (std::__shared_weak_count_vtbl *)operator new();
  Data = (uint64_t *)atomic_load(&realityio::tokens::CapsuleMeshBuilderTokens);
  if (!Data)
    Data = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CapsuleMeshBuilderTokens);
  memset(v36, 0, sizeof(v36));
  v6 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v7 = (unsigned int **)atomic_load(&realityio::tokens::CapsuleMeshBuilderTokens);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CapsuleMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 1));
  v8 = operator new();
  *(_QWORD *)v8 = &off_24FDE24C0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = v6;
  v45[0] = (void **)v6;
  v45[1] = (void **)v8;
  v9 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v10 = (unsigned int **)atomic_load(&realityio::tokens::CapsuleMeshBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CapsuleMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 2));
  v11 = operator new();
  *(_QWORD *)v11 = &off_24FDE24C0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v9;
  v45[2] = (void **)v9;
  v45[3] = (void **)v11;
  v12 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v13 = (unsigned int **)atomic_load(&realityio::tokens::CapsuleMeshBuilderTokens);
  if (!v13)
    v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CapsuleMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v13 + 3));
  v14 = operator new();
  *(_QWORD *)v14 = &off_24FDE24C0;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = v12;
  v45[4] = (void **)v12;
  v45[5] = (void **)v14;
  v15 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v16 = (unsigned int **)atomic_load(&realityio::tokens::CapsuleMeshBuilderTokens);
  if (!v16)
    v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CapsuleMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 4));
  v17 = operator new();
  *(_QWORD *)v17 = &off_24FDE24C0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = v15;
  v45[6] = (void **)v15;
  v45[7] = (void **)v17;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v43 = (void **)&v33;
  v44 = 0;
  v18 = operator new(0x40uLL);
  v19 = 0;
  v33 = v18;
  v34 = v18;
  v35 = v18 + 8;
  do
  {
    v20 = *(_OWORD *)&v45[2 * v19];
    *(_OWORD *)v18 = v20;
    if (*((_QWORD *)&v20 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    ++v19;
    v18 += 2;
  }
  while (v19 != 4);
  v34 = v18;
  realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v4, Data, v36, &v33);
  v37 = v4;
  v23 = (std::__shared_weak_count *)operator new();
  v23->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2538;
  v23->__shared_weak_owners_ = 0;
  v23[1].__vftable = v4;
  v45[8] = (void **)&v4->~__shared_weak_count;
  v45[9] = (void **)&v23->__vftable;
  v37 = 0;
  v38 = 0;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v43 = (void **)&v39;
  v44 = 0;
  v25 = operator new(0x10uLL);
  v39 = v25;
  v41 = v25 + 2;
  *v25 = v4;
  v25[1] = v23;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  v40 = v25 + 2;
  realityio::DirtyStageDescriptor::DirtyStageDescriptor(v3, v42, &v39);
  v27 = (_QWORD *)operator new();
  *v27 = &off_24FDE25B0;
  v27[1] = 0;
  v27[2] = 0;
  v27[3] = v3;
  *a1 = v3;
  a1[1] = (uint64_t)v27;
  v43 = (void **)&v39;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v43);
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  v29 = v38;
  if (v38)
  {
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v43 = (void **)&v33;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v43);
  for (i = 6; i != -2; i -= 2)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v45[i]);
  v45[0] = (void **)v36;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v45);
  v45[0] = (void **)v42;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v45);
}

void sub_2300D49A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  MEMORY[0x2348B4E1C](v30, 0x10A1C40F82F910ELL);
  *(_QWORD *)(v31 - 168) = &a29;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 168));
  MEMORY[0x2348B4E1C](v29, 0x10A1C401BF1BAA1);
  _Unwind_Resume(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  unsigned int **result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::ConeMeshBuilderTokens_StaticTokenType::~ConeMeshBuilderTokens_StaticTokenType((realityio::tokens::ConeMeshBuilderTokens_StaticTokenType *)result);
    MEMORY[0x2348B4E1C]();
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>::New()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new();
  realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType::CapsuleMeshBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_2300D4D20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C4070C77B98);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Backdrop::CONTAINS_ATTRIBUTE(RIO_MTLX::Backdrop *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_33);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_33))
    {
      std::string::basic_string[abi:ne180100]<0>(qword_255E54AB8, "contains");
      __cxa_guard_release(&_MergedGlobals_33);
    }
  }
}

void sub_2300D4DA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_33);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Node::getNodeDef(std::string *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, RIO_MTLX::InterfaceElement **a4@<X8>)
{
  unsigned __int8 *v8;
  std::string *NodeDefString;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  RIO_MTLX::InterfaceElement *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *Target;
  RIO_MTLX::InterfaceElement *v25;
  uint64_t *VersionString;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  int hasExactInputMatch;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char *v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  RIO_MTLX::Element *v45;
  std::__shared_weak_count *v46;
  std::string *p_p;
  char *v48;
  uint64_t v49;
  std::string __p;
  uint64_t v51;
  uint64_t v52;
  char **v53;

  v8 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE((RIO_MTLX::InterfaceElement *)a1);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&a1[6].__r_.__value_.__r.__words[2], v8))
  {
    NodeDefString = (std::string *)RIO_MTLX::InterfaceElement::getNodeDefString((RIO_MTLX::InterfaceElement *)a1);
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeDef>((uint64_t)a1, NodeDefString, a4);
    return;
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &p_p);
  v10 = (char *)p_p;
  RIO_MTLX::Element::getQualifiedName((uint64_t)a1, a1 + 1, &__p);
  RIO_MTLX::Document::getMatchingNodeDefs((uint64_t)v10, (unsigned __int8 *)&__p, (uint64_t)&v51);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v12 = (unint64_t *)(v48 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)a1, &p_p);
  RIO_MTLX::Document::getMatchingNodeDefs((uint64_t)p_p, (unsigned __int8 *)&a1[1], (uint64_t)&__p);
  v14 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v15 = (unint64_t *)(v48 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  p_p = 0;
  v48 = 0;
  v49 = 0;
  std::vector<std::shared_ptr<RIO_MTLX::NodeDef>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<RIO_MTLX::NodeDef>*>,std::__wrap_iter<std::shared_ptr<RIO_MTLX::NodeDef>*>>(&v51, v52, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
  v17 = v51;
  v18 = v52;
  if (v51 != v52)
  {
    v19 = a3 ^ 1;
    do
    {
      v20 = *(RIO_MTLX::InterfaceElement **)v17;
      *a4 = *(RIO_MTLX::InterfaceElement **)v17;
      v21 = *(unint64_t **)(v17 + 8);
      a4[1] = (RIO_MTLX::InterfaceElement *)v21;
      if (v21)
      {
        v22 = v21 + 1;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        v20 = *a4;
      }
      Target = RIO_MTLX::InterfaceElement::getTarget(v20);
      if (RIO_MTLX::targetStringsMatch((uint64_t)Target, a2))
      {
        v25 = *a4;
        VersionString = RIO_MTLX::InterfaceElement::getVersionString((RIO_MTLX::InterfaceElement *)a1);
        if (RIO_MTLX::NodeDef::isVersionCompatible(v25, (unsigned __int8 *)VersionString))
        {
          v27 = (unsigned __int8 *)(*(uint64_t (**)(RIO_MTLX::InterfaceElement *))(*(_QWORD *)*a4 + 56))(*a4);
          v28 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 56))(a1);
          v29 = v27[23];
          if ((v29 & 0x80u) == 0)
            v30 = v27[23];
          else
            v30 = *((_QWORD *)v27 + 1);
          v31 = *(unsigned __int8 *)(v28 + 23);
          v32 = (char)v31;
          if ((v31 & 0x80u) != 0)
            v31 = *(_QWORD *)(v28 + 8);
          if (v30 == v31)
          {
            if (v32 >= 0)
              v33 = (unsigned __int8 *)v28;
            else
              v33 = *(unsigned __int8 **)v28;
            if ((v29 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v27, v33, *((_QWORD *)v27 + 1)))
              {
LABEL_38:
                v34 = (std::__shared_weak_count *)a4[1];
                v45 = *a4;
                v46 = v34;
                if (v34)
                {
                  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
                  do
                    v36 = __ldxr(p_shared_owners);
                  while (__stxr(v36 + 1, p_shared_owners));
                }
                hasExactInputMatch = RIO_MTLX::InterfaceElement::hasExactInputMatch((RIO_MTLX::InterfaceElement *)a1, &v45, 0);
                v38 = v46;
                if (v46)
                {
                  v39 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v40 = __ldaxr(v39);
                  while (__stlxr(v40 - 1, v39));
                  if (!v40)
                  {
                    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                    std::__shared_weak_count::__release_weak(v38);
                  }
                }
                if (((hasExactInputMatch | v19) & 1) != 0)
                {
                  if ((hasExactInputMatch & 1) != 0)
                    goto LABEL_57;
                }
                else
                {
                  std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)&p_p, (__int128 *)a4);
                }
              }
            }
            else
            {
              if (!v27[23])
                goto LABEL_38;
              while (*v27 == *v33)
              {
                ++v27;
                ++v33;
                if (!--v29)
                  goto LABEL_38;
              }
            }
          }
        }
      }
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a4);
      v17 += 16;
    }
    while (v17 != v18);
  }
  v41 = (char *)p_p;
  if (p_p == (std::string *)v48)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    *a4 = (RIO_MTLX::InterfaceElement *)p_p->__r_.__value_.__r.__words[0];
    v42 = (unint64_t *)*((_QWORD *)v41 + 1);
    a4[1] = (RIO_MTLX::InterfaceElement *)v42;
    if (v42)
    {
      v43 = v42 + 1;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
  }
LABEL_57:
  v53 = (char **)&p_p;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  p_p = &__p;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2300D5140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **p_p, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  *(_QWORD *)(v20 - 72) = &p_p;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 72));
  p_p = (void **)&__p;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  __p = &a20;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Node::getUpstreamEdge(RIO_MTLX::Node *this@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  RIO_MTLX *v6;
  uint64_t *v7;
  __n128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  void **v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __n128 v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  void ***v49;
  std::__shared_weak_count *v50;
  void **v51;
  std::__shared_weak_count *v52;
  __n128 v53;

  v6 = (RIO_MTLX *)(*(uint64_t (**)(RIO_MTLX::Node *))(*(_QWORD *)this + 24))(this);
  if ((unint64_t)v6 > a2)
  {
    v7 = RIO_MTLX::EMPTY_STRING(v6);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>((uint64_t)this, (unsigned __int8 *)v7, (uint64_t)&v51);
    v8 = *(__n128 *)&v51[2 * a2];
    v53 = v8;
    v46 = v8;
    v9 = (std::__shared_weak_count *)v8.n128_u64[1];
    if (v8.n128_u64[1])
    {
      v10 = (unint64_t *)(v8.n128_u64[1] + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v49 = &v51;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    v6 = (RIO_MTLX *)(*(_QWORD *(**)(void ****__return_ptr, __n128))(*(_QWORD *)v46.n128_u64[0] + 64))(&v49, v46);
    v13 = (void **)v49;
    v12 = v50;
    v51 = (void **)v49;
    v52 = v50;
    if (v49)
    {
      RIO_MTLX::Element::getSelfNonConst(this, &v47);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      if (v12)
      {
        v16 = (unint64_t *)&v12->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = v48;
      a3->n128_u64[0] = v47;
      a3->n128_u64[1] = (unint64_t)v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      a3[1] = v46;
      if (v9)
      {
        v21 = (unint64_t *)&v9->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      a3[2].n128_u64[0] = (unint64_t)v13;
      a3[2].n128_u64[1] = (unint64_t)v12;
      if (v12)
      {
        v23 = (unint64_t *)&v12->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        do
          v25 = __ldaxr(v23);
        while (__stlxr(v25 - 1, v23));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (v9)
      {
        v26 = (unint64_t *)&v9->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v28 = v48;
      if (v48)
      {
        v29 = (unint64_t *)&v48->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v12 = v52;
    }
    if (v12)
    {
      v31 = (unint64_t *)&v12->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v33 = (std::__shared_weak_count *)v53.n128_u64[1];
    if (!v53.n128_u64[1])
      goto LABEL_44;
    v34 = (unint64_t *)(v53.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      if (v13)
        return;
    }
    else
    {
LABEL_44:
      if (v13)
        return;
    }
  }
  v36 = RIO_MTLX::NULL_EDGE(v6);
  v37 = *((_QWORD *)v36 + 1);
  a3->n128_u64[0] = *(_QWORD *)v36;
  a3->n128_u64[1] = v37;
  if (v37)
  {
    v38 = (unint64_t *)(v37 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *((_QWORD *)v36 + 3);
  a3[1].n128_u64[0] = *((_QWORD *)v36 + 2);
  a3[1].n128_u64[1] = v40;
  if (v40)
  {
    v41 = (unint64_t *)(v40 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *((_QWORD *)v36 + 5);
  a3[2].n128_u64[0] = *((_QWORD *)v36 + 4);
  a3[2].n128_u64[1] = v43;
  if (v43)
  {
    v44 = (unint64_t *)(v43 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
}

void sub_2300D54B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v8 - 64);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Node::getDownstreamPorts(RIO_MTLX::Node *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t *v34;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  RIO_MTLX::Element::getDocument(this, &v32);
  RIO_MTLX::Document::getMatchingPorts(v32, (unsigned __int8 *)this + 48, (uint64_t)&v33);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v33;
  v8 = v34;
  if (v33 != v34)
  {
    v9 = (_QWORD *)((char *)this + 8);
    do
    {
      v10 = *v7;
      v11 = v7[1];
      *(_QWORD *)&v32 = *v7;
      *((_QWORD *)&v32 + 1) = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v10 + 64))(&v30);
      std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v28, v9);
      v14 = v29;
      v15 = v30;
      v16 = v28;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v19 = v31;
      if (v31)
      {
        v20 = (unint64_t *)&v31->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v15 == v16)
        std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a2, &v32);
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v7 += 2;
    }
    while (v7 != v8);
  }
  *(_QWORD *)&v32 = &v33;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  v25 = *(char **)(a2 + 8);
  v26 = 126 - 2 * __clz((uint64_t)&v25[-*(_QWORD *)a2] >> 4);
  if (v25 == *(char **)a2)
    v27 = 0;
  else
    v27 = v26;
  std::__introsort<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *,false>(*(uint64_t **)a2, v25, v27, 1);
}

void sub_2300D56BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::Node::validate(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  char v5;
  RIO_MTLX::TypedElement *v6;
  unsigned __int8 *v7;
  char v8;
  RIO_MTLX *v9;
  uint64_t *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char hasExactInputMatch;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v23;
  char v24;
  RIO_MTLX::Element *v25;
  std::__shared_weak_count *v26;
  std::string v27;
  RIO_MTLX::InterfaceElement *v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;
  const void *v32[2];
  char v33;
  unsigned __int8 v34;

  v34 = 1;
  if (*(char *)(a1 + 47) < 0)
    v4 = *(_QWORD *)(a1 + 32);
  else
    v4 = *(unsigned __int8 *)(a1 + 47);
  v5 = v4 != 0;
  std::string::basic_string[abi:ne180100]<0>(v32, "Node element is missing a category");
  RIO_MTLX::Element::validateRequire(a1, v5, &v34, a2, v32);
  if (v33 < 0)
    operator delete((void *)v32[0]);
  v7 = (unsigned __int8 *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v6);
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 160), v7) != 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "Node element is missing a type");
  RIO_MTLX::Element::validateRequire(a1, v8, &v34, a2, (const void **)__p);
  if (v31 < 0)
    operator delete(__p[0]);
  v10 = RIO_MTLX::EMPTY_STRING(v9);
  RIO_MTLX::Node::getNodeDef((std::string *)a1, (uint64_t)v10, 1, &v28);
  if (v28)
  {
    memset(&v27, 0, sizeof(v27));
    v25 = v28;
    v26 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    hasExactInputMatch = RIO_MTLX::InterfaceElement::hasExactInputMatch((RIO_MTLX::InterfaceElement *)a1, &v25, &v27);
    v14 = v26;
    if (v26)
    {
      v15 = (unint64_t *)&v26->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    std::operator+<char>();
    RIO_MTLX::Element::validateRequire(a1, hasExactInputMatch, &v34, a2, (const void **)&v23);
    if (v24 < 0)
      operator delete(v23);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
  v17 = RIO_MTLX::Element::validate(a1, a2);
  v18 = v34;
  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v18)
    return v17;
  else
    return 0;
}

void sub_2300D592C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void RIO_MTLX::GraphElement::addMaterialNode(RIO_MTLX *a1@<X0>, uint64_t a2@<X1>, const std::string **a3@<X2>, uint64_t *a4@<X8>)
{
  const std::string::value_type **v8;
  __int128 v9;
  std::string *v10;
  size_t *v11;
  uint64_t v12;
  size_t v13;
  std::string::size_type size;
  int v15;
  unsigned __int8 *v16;
  const std::string *v17;
  const std::string *v18;
  RIO_MTLX::Input *v19;
  uint64_t v20;
  const std::string *v21;
  std::string *v22;
  uint64_t *v23;
  const std::string *v24;
  __int128 *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  std::string v31;

  v8 = (const std::string::value_type **)RIO_MTLX::SURFACE_MATERIAL_NODE_STRING(a1);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *v8, (std::string::size_type)v8[1]);
  }
  else
  {
    v9 = *(_OWORD *)v8;
    v31.__r_.__value_.__r.__words[2] = (std::string::size_type)v8[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v9;
  }
  v10 = (std::string *)*a3;
  if (!*a3)
    goto LABEL_21;
  v11 = (size_t *)(*(uint64_t (**)(std::string *))(v10->__r_.__value_.__r.__words[0] + 56))(v10);
  v10 = (std::string *)RIO_MTLX::VOLUME_MATERIAL_NODE_STRING((RIO_MTLX *)v11);
  v12 = *((unsigned __int8 *)v11 + 23);
  if ((v12 & 0x80u) == 0)
    v13 = *((unsigned __int8 *)v11 + 23);
  else
    v13 = v11[1];
  size = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v15 = (char)size;
  if ((size & 0x80u) != 0)
    size = v10->__r_.__value_.__l.__size_;
  if (v13 != size)
    goto LABEL_21;
  if (v15 >= 0)
    v16 = (unsigned __int8 *)v10;
  else
    v16 = (unsigned __int8 *)v10->__r_.__value_.__r.__words[0];
  if ((v12 & 0x80) != 0)
  {
    v10 = (std::string *)memcmp((const void *)*v11, v16, v11[1]);
    if ((_DWORD)v10)
      goto LABEL_21;
LABEL_20:
    v17 = (const std::string *)RIO_MTLX::VOLUME_SHADER_TYPE_STRING((RIO_MTLX *)v10);
    v10 = std::string::operator=(&v31, v17);
    goto LABEL_21;
  }
  if (!*((_BYTE *)v11 + 23))
    goto LABEL_20;
  while (*(unsigned __int8 *)v11 == *v16)
  {
    v11 = (size_t *)((char *)v11 + 1);
    ++v16;
    if (!--v12)
      goto LABEL_20;
  }
LABEL_21:
  v18 = (const std::string *)RIO_MTLX::MATERIAL_TYPE_STRING((RIO_MTLX *)v10);
  RIO_MTLX::GraphElement::addNode(a1, &v31, a2, v18, a4);
  if (*a3)
  {
    v19 = (RIO_MTLX::Input *)*a4;
    v20 = (*(uint64_t (**)(const std::string *))((*a3)->__r_.__value_.__r.__words[0] + 56))(*a3);
    v21 = (const std::string *)(*(uint64_t (**)(const std::string *))((*a3)->__r_.__value_.__r.__words[0] + 56))(*a3);
    v22 = RIO_MTLX::InterfaceElement::addInput(v19, v20, v21, (uint64_t *)&v29);
    v23 = v29;
    v24 = *a3;
    v25 = (__int128 *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE((RIO_MTLX::PortElement *)v22);
    RIO_MTLX::Element::setAttribute(v23, v25, v24 + 2);
    v26 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_2300D5B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v16);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getChildOfType<RIO_MTLX::ValueElement>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 96), a2);
  if (!v4)
  {
    v7 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *((_QWORD *)v4 + 5);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    if (!v7)
      return;
    goto LABEL_10;
  }
  RIO_MTLX::Element::asA<RIO_MTLX::ValueElement>(v6, a3);
  if (!v7)
    return;
LABEL_10:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_2300D5C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Edge::~Edge(RIO_MTLX::Edge *this)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void RIO_MTLX::GraphIterator::operator*(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v2 = a1[8];
  if (a1[7] == v2)
  {
    v4 = 0;
    v3 = 0;
  }
  else
  {
    v3 = *(_QWORD *)(v2 - 24);
    v4 = *(std::__shared_weak_count **)(v2 - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  v7 = a1[2];
  v8 = (std::__shared_weak_count *)a1[3];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *a2 = v3;
  a2[1] = v4;
  if (v4)
  {
    v15 = (unint64_t *)&v4->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  a2[2] = v7;
  a2[3] = v8;
  if (v8)
  {
    v17 = (unint64_t *)&v8->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  a2[4] = v11;
  a2[5] = v12;
  if (!v12)
    goto LABEL_24;
  v19 = (unint64_t *)&v12->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v8)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if (!v8)
      goto LABEL_30;
  }
  v22 = (unint64_t *)&v8->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_30:
  if (v4)
  {
    v24 = (unint64_t *)&v4->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void RIO_MTLX::NodeGraph::getNodeDef(std::string *this@<X0>, _QWORD *a2@<X8>)
{
  std::string *NodeDefString;
  uint64_t v5;
  RIO_MTLX *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  std::string::size_type v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  RIO_MTLX::Implementation *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *v21;
  std::__shared_weak_count *v22;
  char *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  std::__shared_weak_count *v49;
  RIO_MTLX::Implementation *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *NodeGraph;
  uint64_t v54;
  uint64_t v55;
  std::string::size_type size;
  int v57;
  std::string *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  BOOL v65;
  _BOOL4 v66;
  std::string *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::string __p;
  uint64_t v75;
  std::__shared_weak_count *v76;
  char *v77;
  char *v78;
  char *v79;
  RIO_MTLX::Implementation *v80;
  std::__shared_weak_count *v81;

  NodeDefString = (std::string *)RIO_MTLX::InterfaceElement::getNodeDefString((RIO_MTLX::InterfaceElement *)this);
  RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeDef>((uint64_t)this, NodeDefString, a2);
  if (!*a2)
  {
    v73 = (uint64_t)a2;
    RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)this, &v75);
    v5 = v75;
    v7 = RIO_MTLX::EMPTY_STRING(v6);
    v8 = *(uint64_t **)(v5 + 136);
    v9 = *(uint64_t **)(v5 + 144);
    v77 = 0;
    v78 = 0;
    v79 = 0;
    if (v8 != v9)
    {
      v10 = v7;
      do
      {
        v12 = *v8;
        v11 = v8[1];
        __p.__r_.__value_.__r.__words[0] = *v8;
        __p.__r_.__value_.__l.__size_ = v11;
        if (v11)
        {
          v13 = (unint64_t *)(v11 + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        RIO_MTLX::Element::asA<RIO_MTLX::Implementation>(v12, &v80);
        v15 = v80;
        if (!v80)
          goto LABEL_47;
        v16 = *((char *)v10 + 23);
        v17 = v10[1];
        if (v16 >= 0)
          v17 = *((unsigned __int8 *)v10 + 23);
        if (v17)
        {
          v18 = *(unsigned __int8 *)(v12 + 47);
          if ((v18 & 0x80u) == 0)
            v19 = *(unsigned __int8 *)(v12 + 47);
          else
            v19 = *(_QWORD *)(v12 + 32);
          if (v19 != v17)
            goto LABEL_47;
          v20 = (const void **)(v12 + 24);
          if (v16 >= 0)
            v21 = (unsigned __int8 *)v10;
          else
            v21 = (unsigned __int8 *)*v10;
          if ((v18 & 0x80) != 0)
          {
            if (memcmp(*v20, v21, *(_QWORD *)(v12 + 32)))
              goto LABEL_47;
          }
          else if (*(_BYTE *)(v12 + 47))
          {
            while (*(unsigned __int8 *)v20 == *v21)
            {
              v20 = (const void **)((char *)v20 + 1);
              ++v21;
              if (!--v18)
                goto LABEL_24;
            }
            goto LABEL_47;
          }
        }
LABEL_24:
        v22 = v81;
        v23 = v78;
        if (v78 < v79)
        {
          *(_QWORD *)v78 = v15;
          *((_QWORD *)v23 + 1) = v22;
          if (v22)
          {
            p_shared_owners = (unint64_t *)&v22->__shared_owners_;
            do
              v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
          }
          v26 = v23 + 16;
          goto LABEL_46;
        }
        v27 = v77;
        v28 = (v78 - v77) >> 4;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v30 = v79 - v77;
        if ((v79 - v77) >> 3 > v29)
          v29 = v30 >> 3;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
          v31 = 0xFFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v32 = (char *)operator new(16 * v31);
        v33 = &v32[16 * v28];
        *(_QWORD *)v33 = v15;
        *((_QWORD *)v33 + 1) = v22;
        if (v22)
        {
          v34 = (unint64_t *)&v22->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        if (v23 == v27)
        {
          v26 = v33 + 16;
          v77 = &v32[16 * v28];
          v79 = &v32[16 * v31];
          if (!v23)
            goto LABEL_46;
        }
        else
        {
          v36 = v23;
          v37 = &v32[16 * v28];
          do
          {
            v38 = *((_OWORD *)v36 - 1);
            v36 -= 16;
            *((_OWORD *)v37 - 1) = v38;
            v37 -= 16;
            *(_QWORD *)v36 = 0;
            *((_QWORD *)v36 + 1) = 0;
          }
          while (v36 != v27);
          v26 = v33 + 16;
          v77 = v37;
          v78 = v33 + 16;
          v79 = &v32[16 * v31];
          do
          {
            v23 -= 16;
            std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v23);
          }
          while (v23 != v27);
          v23 = v27;
          if (!v27)
            goto LABEL_46;
        }
        operator delete(v23);
LABEL_46:
        v78 = v26;
LABEL_47:
        v39 = v81;
        if (v81)
        {
          v40 = (unint64_t *)&v81->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        if (__p.__r_.__value_.__l.__size_)
        {
          v42 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
        }
        v8 += 2;
      }
      while (v8 != v9);
    }
    v44 = v76;
    if (v76)
    {
      v45 = (unint64_t *)&v76->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v77;
    v48 = v78;
    if (v77 != v78)
    {
      while (1)
      {
        v50 = *(RIO_MTLX::Implementation **)v47;
        v49 = (std::__shared_weak_count *)*((_QWORD *)v47 + 1);
        v80 = *(RIO_MTLX::Implementation **)v47;
        v81 = v49;
        if (v49)
        {
          v51 = (unint64_t *)&v49->__shared_owners_;
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        NodeGraph = RIO_MTLX::Implementation::getNodeGraph(v50);
        RIO_MTLX::Element::getQualifiedName((uint64_t)this, this + 2, &__p);
        v54 = *((unsigned __int8 *)NodeGraph + 23);
        if ((v54 & 0x80u) == 0)
          v55 = *((unsigned __int8 *)NodeGraph + 23);
        else
          v55 = NodeGraph[1];
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v57 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        if (v55 != size)
        {
          v66 = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_92;
          goto LABEL_96;
        }
        v58 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((v54 & 0x80) != 0)
          break;
        if (*((_BYTE *)NodeGraph + 23))
        {
          v59 = v54 - 1;
          do
          {
            v61 = *(unsigned __int8 *)NodeGraph;
            NodeGraph = (uint64_t *)((char *)NodeGraph + 1);
            v60 = v61;
            v63 = v58->__r_.__value_.__s.__data_[0];
            v58 = (std::string *)((char *)v58 + 1);
            v62 = v63;
            v65 = v59-- != 0;
            v66 = v60 == v62;
          }
          while (v60 == v62 && v65);
LABEL_91:
          if ((v57 & 0x80000000) == 0)
            goto LABEL_92;
          goto LABEL_96;
        }
        v66 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_92:
          if (v66)
            goto LABEL_97;
          goto LABEL_93;
        }
LABEL_96:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v66)
        {
LABEL_97:
          v67 = (std::string *)RIO_MTLX::InterfaceElement::getNodeDefString(v50);
          RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::NodeDef>((uint64_t)v50, v67, &__p);
          std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v73, (__int128 *)&__p);
          v68 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v69 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          v49 = v81;
          if (!v81)
            goto LABEL_107;
LABEL_103:
          v71 = (unint64_t *)&v49->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
          goto LABEL_107;
        }
LABEL_93:
        if (v49)
          goto LABEL_103;
LABEL_107:
        v47 += 16;
        if (v47 == v48)
          goto LABEL_108;
      }
      v66 = memcmp((const void *)*NodeGraph, v58, NodeGraph[1]) == 0;
      goto LABEL_91;
    }
LABEL_108:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
}

void sub_2300D6304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::NodeGraph::validate(RIO_MTLX::InterfaceElement *a1, std::string *a2)
{
  unsigned __int8 *v4;
  char v5;
  RIO_MTLX::InterfaceElement *v6;
  unsigned __int8 *v7;
  RIO_MTLX::InterfaceElement *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t result;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  void *v19[2];
  char v20;
  RIO_MTLX::InterfaceElement *v21;
  std::__shared_weak_count *v22;
  void *__p[2];
  char v24;
  char v25;
  void **v26;

  v25 = 1;
  v4 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::VERSION_ATTRIBUTE(a1);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, v4) == 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "NodeGraph elements do not support version strings");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, v5, &v25, a2, (const void **)__p);
  if (v24 < 0)
    operator delete(__p[0]);
  v7 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::NODE_DEF_ATTRIBUTE(v6);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, v7))
  {
    RIO_MTLX::NodeGraph::getNodeDef((std::string *)a1, &v21);
    v8 = v21;
    std::string::basic_string[abi:ne180100]<0>(v19, "NodeGraph implementation refers to non-existent NodeDef");
    RIO_MTLX::Element::validateRequire((uint64_t)a1, v8 != 0, &v25, a2, (const void **)v19);
    if (v20 < 0)
      operator delete(v19[0]);
    if (v21)
    {
      v9 = *((_QWORD *)a1 + 33);
      RIO_MTLX::InterfaceElement::getActiveOutputs(v21, (uint64_t)v18);
      v11 = v18[0];
      v10 = v18[1];
      std::string::basic_string[abi:ne180100]<0>(v16, "NodeGraph implementation has a different number of outputs than its NodeDef");
      RIO_MTLX::Element::validateRequire((uint64_t)a1, v9 == (v10 - v11) >> 4, &v25, a2, (const void **)v16);
      if (v17 < 0)
        operator delete(v16[0]);
      v26 = (void **)v18;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v26);
    }
    v12 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  LODWORD(result) = RIO_MTLX::Element::validate((uint64_t)a1, a2);
  if (v25)
    return result;
  else
    return 0;
}

void sub_2300D6528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v24 - 56) = &a15;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 56));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_2300D6588(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  JUMPOUT(0x2300D6580);
}

double RIO_MTLX::NodeGraph::getDeclaration@<D0>(std::string *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  RIO_MTLX::NodeGraph::getNodeDef(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::GraphElement>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *shared_weak_owners;
  _BOOL4 v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v13, (_QWORD *)(a1 + 8));
  shared_weak_owners = v13;
  if (v13)
  {
    do
    {
      RIO_MTLX::Element::asA<RIO_MTLX::GraphElement>((uint64_t)shared_weak_owners, a2);
      v4 = *a2 == 0;
      if (*a2)
        break;
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a2);
      v5 = v13;
      shared_weak_owners = (std::__shared_weak_count *)v13[9].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        shared_weak_owners = std::__shared_weak_count::lock(shared_weak_owners);
        v6 = shared_weak_owners;
        if (shared_weak_owners)
          shared_weak_owners = (std::__shared_weak_count *)v5[9].__shared_owners_;
      }
      else
      {
        v6 = 0;
      }
      v7 = v14;
      v13 = shared_weak_owners;
      v14 = v6;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        shared_weak_owners = v13;
      }
    }
    while (shared_weak_owners);
  }
  else
  {
    v4 = 1;
  }
  v10 = v14;
  if (!v14)
    goto LABEL_20;
  v11 = (unint64_t *)&v14->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v4)
      return;
  }
  else
  {
LABEL_20:
    if (!v4)
      return;
  }
  *a2 = 0;
  a2[1] = 0;
}

void sub_2300D66EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Element::getTypedAttribute<std::vector<std::string>>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  unsigned __int8 *v6;
  uint64_t *v7;

  v5 = (_QWORD *)(a1 + 160);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 160), a2))
  {
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v5, a2);
    if (v6)
      v7 = (uint64_t *)(v6 + 40);
    else
      v7 = RIO_MTLX::EMPTY_STRING(0);
    RIO_MTLX::fromValueString<std::vector<std::string>>((RIO_MTLX *)v7, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

uint64_t RIO_MTLX::Backdrop::validate(RIO_MTLX::Backdrop *a1, std::string *a2)
{
  RIO_MTLX::Backdrop *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t result;
  __int128 v42;
  void *v43[2];
  char v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48[3];
  char v49;
  __int128 v50;
  void *__p;
  unsigned __int8 *v52;
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void **p_p;
  std::__shared_weak_count *v57;

  v49 = 1;
  RIO_MTLX::Backdrop::CONTAINS_ATTRIBUTE(a1);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)qword_255E54AB8))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "contains");
    RIO_MTLX::Element::getTypedAttribute<std::vector<std::string>>((uint64_t)a1, (unsigned __int8 *)&__p, v48);
    if (v53 < 0)
      operator delete(__p);
    v45 = 0;
    v46 = 0;
    v47 = 0;
    RIO_MTLX::Element::getAncestorOfType<RIO_MTLX::GraphElement>((uint64_t)a1, &v54);
    if (v54)
    {
      RIO_MTLX::Backdrop::CONTAINS_ATTRIBUTE(v4);
      RIO_MTLX::Element::getTypedAttribute<std::vector<std::string>>((uint64_t)a1, (unsigned __int8 *)qword_255E54AB8, (uint64_t *)&__p);
      v5 = (unsigned __int8 *)__p;
      v6 = v52;
      if (__p != v52)
      {
        do
        {
          v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v54 + 96), v5);
          v8 = v7;
          if (v7)
          {
            v9 = (void **)*((_QWORD *)v7 + 5);
            v10 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
            p_p = v9;
            v57 = v10;
            if (v10)
            {
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldxr(p_shared_owners);
              while (__stxr(v12 + 1, p_shared_owners));
            }
            if (v9)
            {
              RIO_MTLX::Element::asA<RIO_MTLX::TypedElement>((uint64_t)v9, &v50);
              if (!v10)
                goto LABEL_19;
              goto LABEL_15;
            }
          }
          else
          {
            v10 = 0;
            p_p = 0;
            v57 = 0;
          }
          v50 = 0uLL;
          if (!v10)
            goto LABEL_19;
LABEL_15:
          v13 = (unint64_t *)&v10->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
LABEL_19:
          v15 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
          if (!(_QWORD)v50)
            goto LABEL_43;
          v16 = v46;
          if (v46 < v47)
          {
            *(_OWORD *)v46 = v50;
            if (v15)
            {
              v17 = (unint64_t *)&v15->__shared_owners_;
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            v19 = v16 + 16;
            goto LABEL_42;
          }
          v20 = v45;
          v21 = (v46 - v45) >> 4;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v42 = v50;
          v23 = v47 - v45;
          if ((v47 - v45) >> 3 > v22)
            v22 = v23 >> 3;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
            v24 = 0xFFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = (char *)operator new(16 * v24);
          v26 = &v25[16 * v21];
          *(_OWORD *)v26 = v42;
          if (v15)
          {
            v27 = (unint64_t *)&v15->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          if (v16 == v20)
          {
            v19 = v26 + 16;
            v45 = &v25[16 * v21];
            v47 = &v25[16 * v24];
            if (!v16)
              goto LABEL_42;
          }
          else
          {
            v29 = v16;
            v30 = &v25[16 * v21];
            do
            {
              v31 = *((_OWORD *)v29 - 1);
              v29 -= 16;
              *((_OWORD *)v30 - 1) = v31;
              v30 -= 16;
              *(_QWORD *)v29 = 0;
              *((_QWORD *)v29 + 1) = 0;
            }
            while (v29 != v20);
            v19 = v26 + 16;
            v45 = v30;
            v46 = v26 + 16;
            v47 = &v25[16 * v24];
            do
            {
              v16 -= 16;
              std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v16);
            }
            while (v16 != v20);
            v16 = v20;
            if (!v20)
              goto LABEL_42;
          }
          operator delete(v16);
LABEL_42:
          v46 = v19;
          v15 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
LABEL_43:
          if (v15)
          {
            v32 = (unint64_t *)&v15->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          v5 += 24;
        }
        while (v5 != v6);
      }
      p_p = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
    }
    v34 = v55;
    if (v55)
    {
      v35 = (unint64_t *)&v55->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v38 = v48[0];
    v37 = v48[1];
    v40 = v45;
    v39 = v46;
    std::string::basic_string[abi:ne180100]<0>(v43, "Invalid element in contains string");
    RIO_MTLX::Element::validateRequire((uint64_t)a1, 0xAAAAAAAAAAAAAAABLL * ((v37 - v38) >> 3) == (v39 - v40) >> 4, &v49, a2, (const void **)v43);
    if (v44 < 0)
      operator delete(v43[0]);
    __p = &v45;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p = v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  LODWORD(result) = RIO_MTLX::Element::validate((uint64_t)a1, a2);
  if (v49)
    return result;
  else
    return 0;
}

void sub_2300D6B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char **a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a16 < 0)
    operator delete(__p);
  a26 = &a17;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a17 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Node::~Node(RIO_MTLX::Node *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t RIO_MTLX::Node::getUpstreamEdgeCount(RIO_MTLX::Node *this)
{
  return *((_QWORD *)this + 32);
}

double RIO_MTLX::Node::getDeclaration@<D0>(std::string *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  RIO_MTLX::Node::getNodeDef(a1, a2, 0, (RIO_MTLX::InterfaceElement **)&v5);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void RIO_MTLX::NodeGraph::~NodeGraph(RIO_MTLX::NodeGraph *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

void RIO_MTLX::Backdrop::~Backdrop(RIO_MTLX::Backdrop *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

void RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Node>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  unsigned __int8 *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *(uint64_t **)(a1 + 136);
  for (i = *(uint64_t **)(a1 + 144); v3 != i; v3 += 2)
  {
    v8 = *v3;
    v7 = v3[1];
    v24 = *v3;
    v25 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    RIO_MTLX::Element::asA<RIO_MTLX::Node>(v8, &v23);
    if (!(_QWORD)v23)
      goto LABEL_23;
    v11 = (char)a2[23];
    v12 = *((_QWORD *)a2 + 1);
    if (v11 >= 0)
      v12 = a2[23];
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v8 + 47);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v8 + 47);
      else
        v14 = *(_QWORD *)(v8 + 32);
      if (v14 != v12)
        goto LABEL_23;
      v15 = (const void **)(v8 + 24);
      if (v11 >= 0)
        v16 = a2;
      else
        v16 = *(unsigned __int8 **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v15, v16, *(_QWORD *)(v8 + 32)))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(v8 + 47))
      {
        while (*(unsigned __int8 *)v15 == *v16)
        {
          v15 = (const void **)((char *)v15 + 1);
          ++v16;
          if (!--v13)
            goto LABEL_22;
        }
        goto LABEL_23;
      }
    }
LABEL_22:
    std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a3, &v23);
LABEL_23:
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_2300D6E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::shared_ptr<RIO_MTLX::Element>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::shared_ptr<RIO_MTLX::Element const>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<RIO_MTLX::Element const>,std::__tree_node<std::shared_ptr<RIO_MTLX::Element const>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_2300D6E90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL RIO_MTLX::GraphIterator::operator==(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v3 = *(char **)(a1 + 56);
  v2 = *(char **)(a1 + 64);
  v4 = *(_QWORD **)(a2 + 56);
  if (v2 - v3 != *(_QWORD *)(a2 + 64) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*(_QWORD *)v3 != *v4 || *((_QWORD *)v3 + 2) != v4[2])
      return 0;
    v3 += 24;
    v4 += 3;
  }
  return *(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80);
}

void RIO_MTLX::GraphIterator::~GraphIterator(RIO_MTLX::GraphIterator *this)
{
  void **v2;

  v2 = (void **)((char *)this + 56);
  std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::__introsort<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *,false>(uint64_t *j, char *a2, uint64_t a3, char a4)
{
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  int v26;
  uint64_t v27;
  const void *v28;
  const void *v29;
  int v30;
  size_t v31;
  const void *v32;
  size_t v33;
  const void *v34;
  size_t v35;
  int v36;
  _BOOL4 v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  const void *v52;
  const void *v53;
  int v54;
  int v55;
  size_t v56;
  const void *v57;
  size_t v58;
  const void *v59;
  size_t v60;
  int v61;
  BOOL v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  const void *v76;
  const void *v77;
  int v78;
  int v79;
  size_t v80;
  const void *v81;
  size_t v82;
  const void *v83;
  size_t v84;
  int v85;
  _BOOL4 v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  __int128 v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  const void *v99;
  const void *v100;
  int v101;
  int v102;
  size_t v103;
  const void *v104;
  size_t v105;
  const void *v106;
  size_t v107;
  int v108;
  BOOL v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  const void *v127;
  const void *v128;
  int v129;
  int v130;
  size_t v131;
  const void *v132;
  size_t v133;
  const void *v134;
  size_t v135;
  int v136;
  BOOL v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  __int128 v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  const void *v150;
  const void *v151;
  int v152;
  int v153;
  size_t v154;
  const void *v155;
  size_t v156;
  const void *v157;
  size_t v158;
  int v159;
  _BOOL4 v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  BOOL v168;
  uint64_t *v169;
  BOOL v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  const void *v180;
  const void *v181;
  int v182;
  uint64_t v183;
  const void *v184;
  const void *v185;
  int v186;
  size_t v187;
  const void *v188;
  size_t v189;
  const void *v190;
  size_t v191;
  int v192;
  _BOOL4 v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  __int128 v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  int v205;
  uint64_t v206;
  const void *v207;
  const void *v208;
  int v209;
  size_t v210;
  const void *v211;
  size_t v212;
  const void *v213;
  size_t v214;
  int v215;
  BOOL v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t *v221;
  uint64_t *v222;
  __int128 v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  int v230;
  uint64_t v231;
  const void *v232;
  const void *v233;
  int v234;
  size_t v235;
  const void *v236;
  size_t v237;
  const void *v238;
  size_t v239;
  int v240;
  _BOOL4 v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  char *v246;
  __int128 v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  int v254;
  uint64_t v255;
  const void *v256;
  const void *v257;
  int v258;
  size_t v259;
  const void *v260;
  size_t v261;
  const void *v262;
  size_t v263;
  int v264;
  BOOL v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __int128 v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  int v279;
  uint64_t v280;
  const void *v281;
  const void *v282;
  int v283;
  size_t v284;
  const void *v285;
  size_t v286;
  const void *v287;
  size_t v288;
  int v289;
  _BOOL4 v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  __int128 v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  int v302;
  uint64_t v303;
  const void *v304;
  const void *v305;
  int v306;
  size_t v307;
  const void *v308;
  size_t v309;
  const void *v310;
  size_t v311;
  int v312;
  BOOL v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *p_shared_owners;
  unint64_t v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  uint64_t v329;
  const void *v330;
  const void *v331;
  int v332;
  uint64_t v333;
  const void *v334;
  const void *v335;
  int v336;
  size_t v337;
  const void *v338;
  size_t v339;
  const void *v340;
  size_t v341;
  int v342;
  _BOOL4 v343;
  unint64_t *v344;
  unint64_t v345;
  unint64_t *v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  uint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  uint64_t v361;
  const void *v362;
  const void *v363;
  int v364;
  uint64_t v365;
  const void *v366;
  const void *v367;
  int v368;
  size_t v369;
  const void *v370;
  size_t v371;
  const void *v372;
  size_t v373;
  int v374;
  _BOOL4 v375;
  unint64_t *v376;
  unint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  uint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  unint64_t v397;
  const void *v398;
  unint64_t v399;
  const void *v400;
  size_t v401;
  int v402;
  _BOOL4 v403;
  unint64_t *v404;
  unint64_t v405;
  unint64_t *v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  int64_t v411;
  int64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  uint64_t v424;
  const void *v425;
  const void *v426;
  int v427;
  uint64_t v428;
  const void *v429;
  const void *v430;
  int v431;
  size_t v432;
  const void *v433;
  size_t v434;
  const void *v435;
  size_t v436;
  int v437;
  _BOOL4 v438;
  unint64_t *v439;
  unint64_t v440;
  unint64_t *v441;
  unint64_t v442;
  uint64_t v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  uint64_t *v447;
  uint64_t v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  uint64_t v452;
  const void *v453;
  const void *v454;
  int v455;
  uint64_t v456;
  const void *v457;
  const void *v458;
  int v459;
  size_t v460;
  const void *v461;
  size_t v462;
  const void *v463;
  size_t v464;
  int v465;
  BOOL v466;
  unint64_t *v467;
  unint64_t v468;
  unint64_t *v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  unint64_t v477;
  uint64_t v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  uint64_t v482;
  const void *v483;
  const void *v484;
  int v485;
  uint64_t v486;
  const void *v487;
  const void *v488;
  int v489;
  size_t v490;
  const void *v491;
  size_t v492;
  const void *v493;
  size_t v494;
  int v495;
  _BOOL4 v496;
  unint64_t *v497;
  unint64_t v498;
  unint64_t *v499;
  unint64_t v500;
  uint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  __int128 v505;
  unint64_t *v506;
  unint64_t v507;
  uint64_t v508;
  const void *v509;
  const void *v510;
  int v511;
  int v512;
  size_t v513;
  const void *v514;
  size_t v515;
  const void *v516;
  size_t v517;
  int v518;
  _BOOL4 v519;
  unint64_t *v520;
  unint64_t v521;
  unint64_t *v522;
  unint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  int64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  uint64_t v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  uint64_t v542;
  const void *v543;
  const void *v544;
  int v545;
  uint64_t v546;
  const void *v547;
  const void *v548;
  int v549;
  size_t v550;
  const void *v551;
  size_t v552;
  const void *v553;
  size_t v554;
  int v555;
  _BOOL4 v556;
  unint64_t *v557;
  unint64_t v558;
  unint64_t *v559;
  unint64_t v560;
  __int128 *v561;
  BOOL v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t *v565;
  uint64_t v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  uint64_t v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  uint64_t v574;
  const void *v575;
  const void *v576;
  int v577;
  uint64_t v578;
  const void *v579;
  const void *v580;
  int v581;
  size_t v582;
  const void *v583;
  size_t v584;
  const void *v585;
  size_t v586;
  int v587;
  _BOOL4 v588;
  unint64_t *v589;
  unint64_t v590;
  unint64_t *v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  __int128 v598;
  unint64_t *v599;
  unint64_t v600;
  uint64_t v601;
  const void *v602;
  const void *v603;
  int v604;
  int v605;
  size_t v606;
  const void *v607;
  size_t v608;
  const void *v609;
  size_t v610;
  int v611;
  BOOL v612;
  unint64_t *v613;
  unint64_t v614;
  unint64_t *v615;
  unint64_t v616;
  std::__shared_weak_count *v617;
  unint64_t *v618;
  unint64_t v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  char *v623;
  char *v624;
  uint64_t v625;
  std::__shared_weak_count *v626;
  uint64_t *v627;
  unint64_t *v628;
  unint64_t v629;
  uint64_t v630;
  std::__shared_weak_count *v631;
  unint64_t *v632;
  unint64_t v633;
  uint64_t v634;
  const void *v635;
  const void *v636;
  int v637;
  uint64_t v638;
  const void *v639;
  const void *v640;
  int v641;
  size_t v642;
  const void *v643;
  size_t v644;
  const void *v645;
  size_t v646;
  int v647;
  _BOOL4 v648;
  unint64_t *v649;
  unint64_t v650;
  unint64_t *v651;
  unint64_t v652;
  __int128 *v653;
  std::__shared_weak_count *v654;
  uint64_t i;
  uint64_t v656;
  uint64_t v657;
  unint64_t *v658;
  unint64_t v659;
  uint64_t v660;
  std::__shared_weak_count *v661;
  unint64_t *v662;
  unint64_t v663;
  uint64_t v664;
  const void *v665;
  const void *v666;
  int v667;
  uint64_t v668;
  const void *v669;
  const void *v670;
  int v671;
  size_t v672;
  const void *v673;
  size_t v674;
  const void *v675;
  size_t v676;
  int v677;
  BOOL v678;
  unint64_t *v679;
  unint64_t v680;
  unint64_t *v681;
  unint64_t v682;
  std::__shared_weak_count *v683;
  unint64_t *v684;
  unint64_t v685;
  unint64_t v686;
  uint64_t *v687;
  int64_t v688;
  int64_t v691;
  uint64_t v692;
  uint64_t *v693;
  __int128 v694;
  __int128 v695;

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  int v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  int v31;
  _BOOL4 v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  const void *v48;
  const void *v49;
  int v50;
  uint64_t v51;
  const void *v52;
  const void *v53;
  int v54;
  size_t v55;
  const void *v56;
  size_t v57;
  const void *v58;
  size_t v59;
  int v60;
  _BOOL4 v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  const void *v77;
  const void *v78;
  int v79;
  uint64_t v80;
  const void *v81;
  const void *v82;
  int v83;
  size_t v84;
  const void *v85;
  size_t v86;
  const void *v87;
  size_t v88;
  int v89;
  _BOOL4 v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  const void *v106;
  const void *v107;
  int v108;
  uint64_t v109;
  const void *v110;
  const void *v111;
  int v112;
  size_t v113;
  const void *v114;
  size_t v115;
  const void *v116;
  size_t v117;
  int v118;
  _BOOL4 v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = (std::__shared_weak_count *)a5[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a4;
  v15 = (std::__shared_weak_count *)a4[1];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v20 = *(const void **)(v10 + 48);
  v18 = v10 + 48;
  v19 = v20;
  v21 = *(char *)(v18 + 23);
  v24 = *(const void **)(v14 + 48);
  v22 = v14 + 48;
  v23 = v24;
  v25 = *(char *)(v22 + 23);
  if (v25 >= 0)
    v26 = *(unsigned __int8 *)(v22 + 23);
  else
    v26 = *(_QWORD *)(v22 + 8);
  if (v25 >= 0)
    v27 = (const void *)v22;
  else
    v27 = v23;
  if (v21 >= 0)
    v28 = *(unsigned __int8 *)(v18 + 23);
  else
    v28 = *(_QWORD *)(v18 + 8);
  if (v21 >= 0)
    v29 = (const void *)v18;
  else
    v29 = v19;
  if (v28 >= v26)
    v30 = v26;
  else
    v30 = v28;
  v31 = memcmp(v27, v29, v30);
  if (v31)
    v32 = v31 < 0;
  else
    v32 = v26 < v28;
  if (v15)
  {
    v33 = (unint64_t *)&v15->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v11)
    goto LABEL_34;
  v35 = (unint64_t *)&v11->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v32)
      return;
  }
  else
  {
LABEL_34:
    if (!v32)
      return;
  }
  v37 = *a4;
  *a4 = *a5;
  *a5 = v37;
  v38 = a4[1];
  a4[1] = a5[1];
  a5[1] = v38;
  v39 = *a4;
  v40 = (std::__shared_weak_count *)a4[1];
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = *a3;
  v44 = (std::__shared_weak_count *)a3[1];
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v49 = *(const void **)(v39 + 48);
  v47 = v39 + 48;
  v48 = v49;
  v50 = *(char *)(v47 + 23);
  v53 = *(const void **)(v43 + 48);
  v51 = v43 + 48;
  v52 = v53;
  v54 = *(char *)(v51 + 23);
  if (v54 >= 0)
    v55 = *(unsigned __int8 *)(v51 + 23);
  else
    v55 = *(_QWORD *)(v51 + 8);
  if (v54 >= 0)
    v56 = (const void *)v51;
  else
    v56 = v52;
  if (v50 >= 0)
    v57 = *(unsigned __int8 *)(v47 + 23);
  else
    v57 = *(_QWORD *)(v47 + 8);
  if (v50 >= 0)
    v58 = (const void *)v47;
  else
    v58 = v48;
  if (v57 >= v55)
    v59 = v55;
  else
    v59 = v57;
  v60 = memcmp(v56, v58, v59);
  if (v60)
    v61 = v60 < 0;
  else
    v61 = v55 < v57;
  if (v44)
  {
    v62 = (unint64_t *)&v44->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (!v40)
    goto LABEL_68;
  v64 = (unint64_t *)&v40->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if (!v61)
      return;
  }
  else
  {
LABEL_68:
    if (!v61)
      return;
  }
  v66 = *a3;
  *a3 = *a4;
  *a4 = v66;
  v67 = a3[1];
  a3[1] = a4[1];
  a4[1] = v67;
  v68 = *a3;
  v69 = (std::__shared_weak_count *)a3[1];
  if (v69)
  {
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *a2;
  v73 = (std::__shared_weak_count *)a2[1];
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  v78 = *(const void **)(v68 + 48);
  v76 = v68 + 48;
  v77 = v78;
  v79 = *(char *)(v76 + 23);
  v82 = *(const void **)(v72 + 48);
  v80 = v72 + 48;
  v81 = v82;
  v83 = *(char *)(v80 + 23);
  if (v83 >= 0)
    v84 = *(unsigned __int8 *)(v80 + 23);
  else
    v84 = *(_QWORD *)(v80 + 8);
  if (v83 >= 0)
    v85 = (const void *)v80;
  else
    v85 = v81;
  if (v79 >= 0)
    v86 = *(unsigned __int8 *)(v76 + 23);
  else
    v86 = *(_QWORD *)(v76 + 8);
  if (v79 >= 0)
    v87 = (const void *)v76;
  else
    v87 = v77;
  if (v86 >= v84)
    v88 = v84;
  else
    v88 = v86;
  v89 = memcmp(v85, v87, v88);
  if (v89)
    v90 = v89 < 0;
  else
    v90 = v84 < v86;
  if (v73)
  {
    v91 = (unint64_t *)&v73->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v69)
  {
    v93 = (unint64_t *)&v69->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v90)
  {
    v95 = *a2;
    *a2 = *a3;
    *a3 = v95;
    v96 = a2[1];
    a2[1] = a3[1];
    a3[1] = v96;
    v97 = *a2;
    v98 = (std::__shared_weak_count *)a2[1];
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    v101 = *a1;
    v102 = (std::__shared_weak_count *)a1[1];
    if (v102)
    {
      v103 = (unint64_t *)&v102->__shared_owners_;
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
    v107 = *(const void **)(v97 + 48);
    v105 = v97 + 48;
    v106 = v107;
    v108 = *(char *)(v105 + 23);
    v111 = *(const void **)(v101 + 48);
    v109 = v101 + 48;
    v110 = v111;
    v112 = *(char *)(v109 + 23);
    if (v112 >= 0)
      v113 = *(unsigned __int8 *)(v109 + 23);
    else
      v113 = *(_QWORD *)(v109 + 8);
    if (v112 >= 0)
      v114 = (const void *)v109;
    else
      v114 = v110;
    if (v108 >= 0)
      v115 = *(unsigned __int8 *)(v105 + 23);
    else
      v115 = *(_QWORD *)(v105 + 8);
    if (v108 >= 0)
      v116 = (const void *)v105;
    else
      v116 = v106;
    if (v115 >= v113)
      v117 = v113;
    else
      v117 = v115;
    v118 = memcmp(v114, v116, v117);
    if (v118)
      v119 = v118 < 0;
    else
      v119 = v113 < v115;
    if (v102)
    {
      v120 = (unint64_t *)&v102->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    if (v98)
    {
      v122 = (unint64_t *)&v98->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    if (v119)
    {
      v124 = *a1;
      *a1 = *a2;
      *a2 = v124;
      v125 = a1[1];
      a1[1] = a2[1];
      a2[1] = v125;
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count **v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  int v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  BOOL v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  const void *v44;
  const void *v45;
  int v46;
  uint64_t v47;
  const void *v48;
  const void *v49;
  int v50;
  size_t v51;
  const void *v52;
  size_t v53;
  const void *v54;
  size_t v55;
  int v56;
  _BOOL4 v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  const void *v70;
  const void *v71;
  int v72;
  uint64_t v73;
  const void *v74;
  const void *v75;
  int v76;
  size_t v77;
  const void *v78;
  size_t v79;
  const void *v80;
  size_t v81;
  int v82;
  _BOOL4 v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  const void *v97;
  const void *v98;
  int v99;
  uint64_t v100;
  const void *v101;
  const void *v102;
  int v103;
  size_t v104;
  const void *v105;
  size_t v106;
  const void *v107;
  size_t v108;
  int v109;
  _BOOL4 v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  const void *v127;
  const void *v128;
  int v129;
  uint64_t v130;
  const void *v131;
  const void *v132;
  int v133;
  size_t v134;
  const void *v135;
  size_t v136;
  const void *v137;
  size_t v138;
  int v139;
  _BOOL4 v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;

  v6 = *a2;
  v8 = (std::__shared_weak_count **)(a2 + 1);
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a1;
  v13 = (std::__shared_weak_count **)(a1 + 1);
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v18 = *(const void **)(v6 + 48);
  v16 = v6 + 48;
  v17 = v18;
  v19 = *(char *)(v16 + 23);
  v22 = *(const void **)(v11 + 48);
  v20 = v11 + 48;
  v21 = v22;
  v23 = *(char *)(v20 + 23);
  if (v23 >= 0)
    v24 = *(unsigned __int8 *)(v20 + 23);
  else
    v24 = *(_QWORD *)(v20 + 8);
  if (v23 >= 0)
    v25 = (const void *)v20;
  else
    v25 = v21;
  if (v19 >= 0)
    v26 = *(unsigned __int8 *)(v16 + 23);
  else
    v26 = *(_QWORD *)(v16 + 8);
  if (v19 >= 0)
    v27 = (const void *)v16;
  else
    v27 = v17;
  if (v26 >= v24)
    v28 = v24;
  else
    v28 = v26;
  v29 = memcmp(v25, v27, v28);
  if (v29)
    v30 = v29 < 0;
  else
    v30 = v24 < v26;
  if (v12)
  {
    v31 = (unint64_t *)&v12->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v7)
  {
    v33 = (unint64_t *)&v7->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v35 = *a3;
  v36 = (std::__shared_weak_count *)a3[1];
  if (v30)
  {
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v39 = *a2;
    v40 = (std::__shared_weak_count *)a2[1];
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v45 = *(const void **)(v35 + 48);
    v43 = v35 + 48;
    v44 = v45;
    v46 = *(char *)(v43 + 23);
    v49 = *(const void **)(v39 + 48);
    v47 = v39 + 48;
    v48 = v49;
    v50 = *(char *)(v47 + 23);
    if (v50 >= 0)
      v51 = *(unsigned __int8 *)(v47 + 23);
    else
      v51 = *(_QWORD *)(v47 + 8);
    if (v50 >= 0)
      v52 = (const void *)v47;
    else
      v52 = v48;
    if (v46 >= 0)
      v53 = *(unsigned __int8 *)(v43 + 23);
    else
      v53 = *(_QWORD *)(v43 + 8);
    if (v46 >= 0)
      v54 = (const void *)v43;
    else
      v54 = v44;
    if (v53 >= v51)
      v55 = v51;
    else
      v55 = v53;
    v56 = memcmp(v52, v54, v55);
    if (v56)
      v57 = v56 < 0;
    else
      v57 = v51 < v53;
    if (v40)
    {
      v58 = (unint64_t *)&v40->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v36)
    {
      v60 = (unint64_t *)&v36->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v62 = *a1;
    if (v57)
    {
      *a1 = *a3;
      *a3 = v62;
LABEL_144:
      v8 = (std::__shared_weak_count **)(a3 + 1);
LABEL_182:
      v146 = *v13;
      *v13 = *v8;
      *v8 = v146;
      return;
    }
    *a1 = *a2;
    *a2 = v62;
    v88 = (std::__shared_weak_count *)a1[1];
    a1[1] = a2[1];
    a2[1] = v88;
    v89 = *a3;
    v90 = (std::__shared_weak_count *)a3[1];
    if (v90)
    {
      v91 = (unint64_t *)&v90->__shared_owners_;
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
      v88 = *v8;
    }
    v93 = *a2;
    if (v88)
    {
      v94 = (unint64_t *)&v88->__shared_owners_;
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    v98 = *(const void **)(v89 + 48);
    v96 = v89 + 48;
    v97 = v98;
    v99 = *(char *)(v96 + 23);
    v102 = *(const void **)(v93 + 48);
    v100 = v93 + 48;
    v101 = v102;
    v103 = *(char *)(v100 + 23);
    if (v103 >= 0)
      v104 = *(unsigned __int8 *)(v100 + 23);
    else
      v104 = *(_QWORD *)(v100 + 8);
    if (v103 >= 0)
      v105 = (const void *)v100;
    else
      v105 = v101;
    if (v99 >= 0)
      v106 = *(unsigned __int8 *)(v96 + 23);
    else
      v106 = *(_QWORD *)(v96 + 8);
    if (v99 >= 0)
      v107 = (const void *)v96;
    else
      v107 = v97;
    if (v106 >= v104)
      v108 = v104;
    else
      v108 = v106;
    v109 = memcmp(v105, v107, v108);
    if (v109)
      v110 = v109 < 0;
    else
      v110 = v104 < v106;
    if (v88)
    {
      v111 = (unint64_t *)&v88->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    if (v90)
    {
      v113 = (unint64_t *)&v90->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    if (v110)
    {
      v115 = *a2;
      *a2 = *a3;
      *a3 = v115;
      v13 = v8;
      goto LABEL_144;
    }
  }
  else
  {
    if (v36)
    {
      v63 = (unint64_t *)&v36->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = *a2;
    v66 = (std::__shared_weak_count *)a2[1];
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    v71 = *(const void **)(v35 + 48);
    v69 = v35 + 48;
    v70 = v71;
    v72 = *(char *)(v69 + 23);
    v75 = *(const void **)(v65 + 48);
    v73 = v65 + 48;
    v74 = v75;
    v76 = *(char *)(v73 + 23);
    if (v76 >= 0)
      v77 = *(unsigned __int8 *)(v73 + 23);
    else
      v77 = *(_QWORD *)(v73 + 8);
    if (v76 >= 0)
      v78 = (const void *)v73;
    else
      v78 = v74;
    if (v72 >= 0)
      v79 = *(unsigned __int8 *)(v69 + 23);
    else
      v79 = *(_QWORD *)(v69 + 8);
    if (v72 >= 0)
      v80 = (const void *)v69;
    else
      v80 = v70;
    if (v79 >= v77)
      v81 = v77;
    else
      v81 = v79;
    v82 = memcmp(v78, v80, v81);
    if (v82)
      v83 = v82 < 0;
    else
      v83 = v77 < v79;
    if (v66)
    {
      v84 = (unint64_t *)&v66->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if (!v36)
      goto LABEL_105;
    v86 = (unint64_t *)&v36->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      if (!v83)
        return;
    }
    else
    {
LABEL_105:
      if (!v83)
        return;
    }
    v116 = *a2;
    *a2 = *a3;
    *a3 = v116;
    v117 = a2[1];
    a2[1] = a3[1];
    a3[1] = v117;
    v118 = *a2;
    v119 = (std::__shared_weak_count *)a2[1];
    if (v119)
    {
      v120 = (unint64_t *)&v119->__shared_owners_;
      do
        v121 = __ldxr(v120);
      while (__stxr(v121 + 1, v120));
    }
    v122 = *a1;
    v123 = (std::__shared_weak_count *)a1[1];
    if (v123)
    {
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
    v128 = *(const void **)(v118 + 48);
    v126 = v118 + 48;
    v127 = v128;
    v129 = *(char *)(v126 + 23);
    v132 = *(const void **)(v122 + 48);
    v130 = v122 + 48;
    v131 = v132;
    v133 = *(char *)(v130 + 23);
    if (v133 >= 0)
      v134 = *(unsigned __int8 *)(v130 + 23);
    else
      v134 = *(_QWORD *)(v130 + 8);
    if (v133 >= 0)
      v135 = (const void *)v130;
    else
      v135 = v131;
    if (v129 >= 0)
      v136 = *(unsigned __int8 *)(v126 + 23);
    else
      v136 = *(_QWORD *)(v126 + 8);
    if (v129 >= 0)
      v137 = (const void *)v126;
    else
      v137 = v127;
    if (v136 >= v134)
      v138 = v134;
    else
      v138 = v136;
    v139 = memcmp(v135, v137, v138);
    if (v139)
      v140 = v139 < 0;
    else
      v140 = v134 < v136;
    if (v123)
    {
      v141 = (unint64_t *)&v123->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    if (v119)
    {
      v143 = (unint64_t *)&v119->__shared_owners_;
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    if (v140)
    {
      v145 = *a1;
      *a1 = *a2;
      *a2 = v145;
      goto LABEL_182;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(uint64_t *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  int v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  const void *v47;
  const void *v48;
  int v49;
  uint64_t v50;
  const void *v51;
  const void *v52;
  int v53;
  size_t v54;
  const void *v55;
  size_t v56;
  const void *v57;
  size_t v58;
  int v59;
  _BOOL4 v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  const void *v75;
  const void *v76;
  int v77;
  uint64_t v78;
  const void *v79;
  const void *v80;
  int v81;
  size_t v82;
  const void *v83;
  size_t v84;
  const void *v85;
  size_t v86;
  int v87;
  _BOOL4 v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  __int128 v96;

  v4 = (a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 2);
      v7 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *a1;
      v11 = (std::__shared_weak_count *)a1[1];
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v16 = *(const void **)(v6 + 48);
      v14 = v6 + 48;
      v15 = v16;
      v17 = *(char *)(v14 + 23);
      v20 = *(const void **)(v10 + 48);
      v18 = v10 + 48;
      v19 = v20;
      v21 = *(char *)(v18 + 23);
      if (v21 >= 0)
        v22 = *(unsigned __int8 *)(v18 + 23);
      else
        v22 = *(_QWORD *)(v18 + 8);
      if (v21 >= 0)
        v23 = (const void *)v18;
      else
        v23 = v19;
      if (v17 >= 0)
        v24 = *(unsigned __int8 *)(v14 + 23);
      else
        v24 = *(_QWORD *)(v14 + 8);
      if (v17 >= 0)
        v25 = (const void *)v14;
      else
        v25 = v15;
      if (v24 >= v22)
        v26 = v22;
      else
        v26 = v24;
      v27 = memcmp(v23, v25, v26);
      if (v27)
        v28 = v27 < 0;
      else
        v28 = v22 < v24;
      if (v11)
      {
        v29 = (unint64_t *)&v11->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v7)
      {
        v31 = (unint64_t *)&v7->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v28)
      {
        v33 = *a1;
        *a1 = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = v33;
        v34 = a1[1];
        a1[1] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v34;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(a1, a1 + 2, (_QWORD *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(a1, a1 + 2, a1 + 4, (uint64_t *)a2 - 2);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, (uint64_t *)a2 - 2);
      return 1;
    default:
      v35 = (uint64_t)(a1 + 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(a1, a1 + 2, a1 + 4);
      v36 = (char *)(a1 + 6);
      if (a1 + 6 == (uint64_t *)a2)
        return 1;
      v37 = 0;
      break;
  }
  while (1)
  {
    v38 = *(_QWORD *)v36;
    v39 = (std::__shared_weak_count *)*((_QWORD *)v36 + 1);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = *(_QWORD *)v35;
    v43 = *(std::__shared_weak_count **)(v35 + 8);
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v48 = *(const void **)(v38 + 48);
    v46 = v38 + 48;
    v47 = v48;
    v49 = *(char *)(v46 + 23);
    v52 = *(const void **)(v42 + 48);
    v50 = v42 + 48;
    v51 = v52;
    v53 = *(char *)(v50 + 23);
    if (v53 >= 0)
      v54 = *(unsigned __int8 *)(v50 + 23);
    else
      v54 = *(_QWORD *)(v50 + 8);
    if (v53 >= 0)
      v55 = (const void *)v50;
    else
      v55 = v51;
    if (v49 >= 0)
      v56 = *(unsigned __int8 *)(v46 + 23);
    else
      v56 = *(_QWORD *)(v46 + 8);
    if (v49 >= 0)
      v57 = (const void *)v46;
    else
      v57 = v47;
    if (v56 >= v54)
      v58 = v54;
    else
      v58 = v56;
    v59 = memcmp(v55, v57, v58);
    if (v59)
      v60 = v59 < 0;
    else
      v60 = v54 < v56;
    if (v43)
    {
      v61 = (unint64_t *)&v43->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v39)
    {
      v63 = (unint64_t *)&v39->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
        break;
    }
    if (v60)
      goto LABEL_74;
LABEL_124:
    v35 = (uint64_t)v36;
    v36 += 16;
    if (v36 == a2)
      return 1;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (!v60)
    goto LABEL_124;
LABEL_74:
  v65 = (std::__shared_weak_count *)*((_QWORD *)v36 + 1);
  *(_QWORD *)&v96 = *(_QWORD *)v36;
  *((_QWORD *)&v96 + 1) = v65;
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)v36, (__int128 *)v35);
  v66 = (uint64_t)a1;
  if ((uint64_t *)v35 != a1)
  {
    while (1)
    {
      v67 = v96;
      if (v65)
      {
        v68 = (unint64_t *)&v65->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v70 = *(_QWORD *)(v35 - 16);
      v71 = *(std::__shared_weak_count **)(v35 - 8);
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      v76 = *(const void **)(v67 + 48);
      v74 = v67 + 48;
      v75 = v76;
      v77 = *(char *)(v74 + 23);
      v80 = *(const void **)(v70 + 48);
      v78 = v70 + 48;
      v79 = v80;
      v81 = *(char *)(v78 + 23);
      if (v81 >= 0)
        v82 = *(unsigned __int8 *)(v78 + 23);
      else
        v82 = *(_QWORD *)(v78 + 8);
      if (v81 >= 0)
        v83 = (const void *)v78;
      else
        v83 = v79;
      if (v77 >= 0)
        v84 = *(unsigned __int8 *)(v74 + 23);
      else
        v84 = *(_QWORD *)(v74 + 8);
      if (v77 >= 0)
        v85 = (const void *)v74;
      else
        v85 = v75;
      if (v84 >= v82)
        v86 = v82;
      else
        v86 = v84;
      v87 = memcmp(v83, v85, v86);
      if (v87)
        v88 = v87 < 0;
      else
        v88 = v82 < v84;
      if (!v71)
        goto LABEL_103;
      v89 = (unint64_t *)&v71->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
        if (!v65)
          goto LABEL_107;
      }
      else
      {
LABEL_103:
        if (!v65)
          goto LABEL_107;
      }
      v91 = (unint64_t *)&v65->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (v92)
      {
LABEL_107:
        if (!v88)
          goto LABEL_116;
        goto LABEL_112;
      }
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
      if (!v88)
      {
LABEL_116:
        v66 = v35;
        break;
      }
LABEL_112:
      std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v35, (__int128 *)(v35 - 16));
      if ((uint64_t *)(v35 - 16) == a1)
      {
        v66 = (uint64_t)a1;
        break;
      }
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
      v35 -= 16;
    }
  }
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100](v66, &v96);
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (++v37 != 8)
    goto LABEL_124;
  return v36 + 16 == a2;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  int v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  _BOOL4 v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  const void *v46;
  const void *v47;
  int v48;
  uint64_t v49;
  const void *v50;
  const void *v51;
  int v52;
  size_t v53;
  const void *v54;
  size_t v55;
  const void *v56;
  size_t v57;
  int v58;
  _BOOL4 v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  const void *v75;
  const void *v76;
  int v77;
  uint64_t v78;
  const void *v79;
  const void *v80;
  int v81;
  size_t v82;
  const void *v83;
  size_t v84;
  const void *v85;
  size_t v86;
  int v87;
  _BOOL4 v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,RIO_MTLX::Node::getDownstreamPorts(void)::$_0 &,std::shared_ptr<RIO_MTLX::PortElement> *>(a1, a2, a3);
  v8 = *a4;
  v9 = (std::__shared_weak_count *)a4[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v18 = *(const void **)(v8 + 48);
  v16 = v8 + 48;
  v17 = v18;
  v19 = *(char *)(v16 + 23);
  v22 = *(const void **)(v12 + 48);
  v20 = v12 + 48;
  v21 = v22;
  v23 = *(char *)(v20 + 23);
  if (v23 >= 0)
    v24 = *(unsigned __int8 *)(v20 + 23);
  else
    v24 = *(_QWORD *)(v20 + 8);
  if (v23 >= 0)
    v25 = (const void *)v20;
  else
    v25 = v21;
  if (v19 >= 0)
    v26 = *(unsigned __int8 *)(v16 + 23);
  else
    v26 = *(_QWORD *)(v16 + 8);
  if (v19 >= 0)
    v27 = (const void *)v16;
  else
    v27 = v17;
  if (v26 >= v24)
    v28 = v24;
  else
    v28 = v26;
  v29 = memcmp(v25, v27, v28);
  if (v29)
    v30 = v29 < 0;
  else
    v30 = v24 < v26;
  if (v13)
  {
    v31 = (unint64_t *)&v13->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v9)
    goto LABEL_34;
  v33 = (unint64_t *)&v9->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v30)
      return;
  }
  else
  {
LABEL_34:
    if (!v30)
      return;
  }
  v35 = *a3;
  *a3 = *a4;
  *a4 = v35;
  v36 = a3[1];
  a3[1] = a4[1];
  a4[1] = v36;
  v37 = *a3;
  v38 = (std::__shared_weak_count *)a3[1];
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = *a2;
  v42 = (std::__shared_weak_count *)a2[1];
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v47 = *(const void **)(v37 + 48);
  v45 = v37 + 48;
  v46 = v47;
  v48 = *(char *)(v45 + 23);
  v51 = *(const void **)(v41 + 48);
  v49 = v41 + 48;
  v50 = v51;
  v52 = *(char *)(v49 + 23);
  if (v52 >= 0)
    v53 = *(unsigned __int8 *)(v49 + 23);
  else
    v53 = *(_QWORD *)(v49 + 8);
  if (v52 >= 0)
    v54 = (const void *)v49;
  else
    v54 = v50;
  if (v48 >= 0)
    v55 = *(unsigned __int8 *)(v45 + 23);
  else
    v55 = *(_QWORD *)(v45 + 8);
  if (v48 >= 0)
    v56 = (const void *)v45;
  else
    v56 = v46;
  if (v55 >= v53)
    v57 = v53;
  else
    v57 = v55;
  v58 = memcmp(v54, v56, v57);
  if (v58)
    v59 = v58 < 0;
  else
    v59 = v53 < v55;
  if (v42)
  {
    v60 = (unint64_t *)&v42->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (!v38)
    goto LABEL_68;
  v62 = (unint64_t *)&v38->__shared_owners_;
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if (!v59)
      return;
  }
  else
  {
LABEL_68:
    if (!v59)
      return;
  }
  v64 = *a2;
  *a2 = *a3;
  *a3 = v64;
  v65 = a2[1];
  a2[1] = a3[1];
  a3[1] = v65;
  v66 = *a2;
  v67 = (std::__shared_weak_count *)a2[1];
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v70 = *a1;
  v71 = (std::__shared_weak_count *)a1[1];
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v76 = *(const void **)(v66 + 48);
  v74 = v66 + 48;
  v75 = v76;
  v77 = *(char *)(v74 + 23);
  v80 = *(const void **)(v70 + 48);
  v78 = v70 + 48;
  v79 = v80;
  v81 = *(char *)(v78 + 23);
  if (v81 >= 0)
    v82 = *(unsigned __int8 *)(v78 + 23);
  else
    v82 = *(_QWORD *)(v78 + 8);
  if (v81 >= 0)
    v83 = (const void *)v78;
  else
    v83 = v79;
  if (v77 >= 0)
    v84 = *(unsigned __int8 *)(v74 + 23);
  else
    v84 = *(_QWORD *)(v74 + 8);
  if (v77 >= 0)
    v85 = (const void *)v74;
  else
    v85 = v75;
  if (v84 >= v82)
    v86 = v82;
  else
    v86 = v84;
  v87 = memcmp(v83, v85, v86);
  if (v87)
    v88 = v87 < 0;
  else
    v88 = v82 < v84;
  if (v71)
  {
    v89 = (unint64_t *)&v71->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v67)
  {
    v91 = (unint64_t *)&v67->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (v88)
  {
    v93 = *a1;
    *a1 = *a2;
    *a2 = v93;
    v94 = a1[1];
    a1[1] = a2[1];
    a2[1] = v94;
  }
}

void realityio::mtlx::UsdMtlxDiscoveryPlugin::DiscoverNodes(RIO_MTLX *a1@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  char v12;
  std::string v13;
  void *__p[2];
  char v15;
  void *v16;
  char v17;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  realityio::mtlx::UsdMtlxGetDocument((uint64_t)__p, &v10);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v10)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "mtlx");
    std::string::basic_string[abi:ne180100]<0>(&v16, "mtlx");
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, (_QWORD *)v13.__r_.__value_.__l.__size_);
    if (v17 < 0)
      operator delete(v16);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  realityio::mtlx::UsdMtlxStandardFileExtensions(&v13);
  std::string::basic_string[abi:ne180100]<0>(&v10, "USDMTLX_PLUGIN_FOLLOW_SYMLINKS");
  pxrInternal__aapl__pxrReserved__::TfGetenvBool();
  pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverFiles();
  if (v12 < 0)
    operator delete(v10);
  v10 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  v5 = (__int128 *)__p[0];
  v6 = (__int128 *)__p[1];
  while (v5 != v6)
  {
    realityio::mtlx::UsdMtlxGetDocument((uint64_t)v5 + 24, &v10);
    if (v10)
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, (_QWORD *)v13.__r_.__value_.__l.__size_);
    }
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 += 3;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_2300DA590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, _QWORD *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a15, a16);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::vector<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::_DiscoverNodes(RIO_MTLX *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t *v7;
  RIO_MTLX::NodeDef **v8;
  const void **v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  const void **v15;
  char *v16;
  const void **v17;
  _BOOL4 v18;
  void **v19;
  const void **v20;
  uint64_t *NodeString;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  int64x2_t v50;
  void **v51;
  unsigned int *v52;
  unsigned int v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  __int128 *v59;
  RIO_MTLX::NodeDef **v60;
  uint64_t v62;
  std::string v63;
  RIO_MTLX::InterfaceElement *v64;
  std::__shared_weak_count *v65;
  uint64_t Version;
  int v67;
  uint64_t v68;
  char v69;
  RIO_MTLX::NodeDef **v70;
  RIO_MTLX::NodeDef **v71;
  void **v72;
  int64x2_t v73;
  void **v74;
  _QWORD *v75;

  v7 = RIO_MTLX::EMPTY_STRING(a1);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeDef>(a2, (unsigned __int8 *)v7, (uint64_t)&v70);
  v8 = v70;
  v60 = v71;
  if (v70 != v71)
  {
    v9 = (const void **)(a4 + 8);
    v59 = (__int128 *)((char *)a3 + 24);
    v10 = a4 + 16;
    do
    {
      v69 = 0;
      MEMORY[0x2348B2764](&v68, (char *)*v8 + 48);
      v11 = (std::__shared_weak_count *)v8[1];
      v64 = *v8;
      v65 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      Version = realityio::mtlx::UsdMtlxGetVersion(&v64, &v69);
      v67 = v14;
      v15 = (const void **)((char *)*v8 + 48);
      v16 = (char *)*v9;
      if (!*v9)
        goto LABEL_13;
      v17 = v9;
      do
      {
        v18 = std::less<std::string>::operator()[abi:ne180100](v10, (const void **)v16 + 4, v15);
        v19 = (void **)(v16 + 8);
        if (!v18)
        {
          v19 = (void **)v16;
          v17 = (const void **)v16;
        }
        v16 = (char *)*v19;
      }
      while (*v19);
      if (v17 == v9 || std::less<std::string>::operator()[abi:ne180100](v10, v15, v17 + 4))
LABEL_13:
        v17 = v9;
      v20 = v17 + 7;
      if (v9 == v17)
        v20 = v15;
      if (*((char *)v20 + 23) < 0)
        std::string::__init_copy_ctor_external(&v63, (const std::string::value_type *)*v20, (std::string::size_type)v20[1]);
      else
        v63 = *(std::string *)v20;
      NodeString = RIO_MTLX::NodeDef::getNodeString(*v8);
      MEMORY[0x2348B2764](&v62, NodeString);
      v25 = *((_QWORD *)a1 + 1);
      v24 = *((_QWORD *)a1 + 2);
      v26 = v68;
      if (v25 >= v24)
      {
        v28 = 0x84BDA12F684BDA13 * ((uint64_t)(v25 - *(_QWORD *)a1) >> 3);
        v29 = v28 + 1;
        if (v28 + 1 > 0x12F684BDA12F684)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v30 = 0x84BDA12F684BDA13 * ((uint64_t)(v24 - *(_QWORD *)a1) >> 3);
        if (2 * v30 > v29)
          v29 = 2 * v30;
        if (v30 >= 0x97B425ED097B42)
          v31 = 0x12F684BDA12F684;
        else
          v31 = v29;
        v75 = (_QWORD *)((char *)a1 + 16);
        if (v31)
        {
          if (v31 > 0x12F684BDA12F684)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v32 = (void **)operator new(216 * v31);
        }
        else
        {
          v32 = 0;
        }
        v72 = v32;
        v73.i64[0] = (uint64_t)&v32[27 * v28];
        v73.i64[1] = v73.i64[0];
        v74 = &v32[27 * v31];
        std::allocator<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::NdrVersion,std::string,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken&,pxrInternal__aapl__pxrReserved__::TfToken&,std::string const&,std::string const&>(v73.i64[0], v26, &Version, (__int128 *)&v63, &v62, v22, v23, a3, v59);
        v33 = v73.i64[0];
        v27 = v73.i64[1] + 216;
        v73.i64[1] += 216;
        v35 = *(_QWORD *)a1;
        v34 = *((_QWORD *)a1 + 1);
        if (v34 == *(_QWORD *)a1)
        {
          v50 = vdupq_n_s64(v34);
        }
        else
        {
          v36 = 0;
          do
          {
            v37 = v33 + v36;
            v38 = v34 + v36;
            *(_QWORD *)(v37 - 216) = *(_QWORD *)(v34 + v36 - 216);
            *(_QWORD *)(v38 - 216) = 0;
            v39 = *(_QWORD *)(v34 + v36 - 208);
            *(_DWORD *)(v37 - 200) = *(_DWORD *)(v34 + v36 - 200);
            *(_QWORD *)(v37 - 208) = v39;
            v40 = *(_OWORD *)(v34 + v36 - 192);
            *(_QWORD *)(v37 - 176) = *(_QWORD *)(v34 + v36 - 176);
            *(_OWORD *)(v37 - 192) = v40;
            *(_QWORD *)(v38 - 184) = 0;
            *(_QWORD *)(v38 - 176) = 0;
            *(_QWORD *)(v38 - 192) = 0;
            *(_QWORD *)(v37 - 168) = *(_QWORD *)(v34 + v36 - 168);
            *(_QWORD *)(v38 - 168) = 0;
            *(_QWORD *)(v37 - 160) = *(_QWORD *)(v34 + v36 - 160);
            *(_QWORD *)(v38 - 160) = 0;
            *(_QWORD *)(v37 - 152) = *(_QWORD *)(v34 + v36 - 152);
            *(_QWORD *)(v38 - 152) = 0;
            v41 = *(_OWORD *)(v34 + v36 - 144);
            *(_QWORD *)(v37 - 128) = *(_QWORD *)(v34 + v36 - 128);
            *(_OWORD *)(v37 - 144) = v41;
            *(_QWORD *)(v38 - 136) = 0;
            *(_QWORD *)(v38 - 128) = 0;
            *(_QWORD *)(v38 - 144) = 0;
            v42 = *(_OWORD *)(v34 + v36 - 120);
            *(_QWORD *)(v37 - 104) = *(_QWORD *)(v34 + v36 - 104);
            *(_OWORD *)(v37 - 120) = v42;
            *(_QWORD *)(v38 - 112) = 0;
            *(_QWORD *)(v38 - 104) = 0;
            *(_QWORD *)(v38 - 120) = 0;
            v43 = *(_OWORD *)(v34 + v36 - 96);
            *(_QWORD *)(v37 - 80) = *(_QWORD *)(v34 + v36 - 80);
            *(_OWORD *)(v37 - 96) = v43;
            *(_QWORD *)(v38 - 96) = 0;
            *(_QWORD *)(v38 - 88) = 0;
            v44 = *(_QWORD *)(v34 + v36 - 72);
            *(_QWORD *)(v38 - 80) = 0;
            *(_QWORD *)(v38 - 72) = 0;
            *(_QWORD *)(v37 - 72) = v44;
            *(_QWORD *)(v37 - 64) = *(_QWORD *)(v34 + v36 - 64);
            *(_QWORD *)(v38 - 64) = 0;
            v45 = *(_QWORD *)(v34 + v36 - 56);
            *(_QWORD *)(v33 + v36 - 56) = v45;
            v46 = *(_QWORD *)(v34 + v36 - 48);
            *(_QWORD *)(v37 - 48) = v46;
            *(_DWORD *)(v37 - 40) = *(_DWORD *)(v34 + v36 - 40);
            if (v46)
            {
              v47 = *(_QWORD *)(v45 + 8);
              v48 = *(_QWORD *)(v37 - 64);
              if ((v48 & (v48 - 1)) != 0)
              {
                if (v47 >= v48)
                  v47 %= v48;
              }
              else
              {
                v47 &= v48 - 1;
              }
              *(_QWORD *)(v44 + 8 * v47) = v33 + v36 - 56;
              *(_QWORD *)(v34 + v36 - 56) = 0;
              *(_QWORD *)(v34 + v36 - 48) = 0;
            }
            v49 = *(_OWORD *)(v38 - 32);
            *(_QWORD *)(v37 - 16) = *(_QWORD *)(v38 - 16);
            *(_OWORD *)(v37 - 32) = v49;
            *(_QWORD *)(v38 - 24) = 0;
            *(_QWORD *)(v38 - 16) = 0;
            *(_QWORD *)(v38 - 32) = 0;
            *(_QWORD *)(v37 - 8) = *(_QWORD *)(v38 - 8);
            *(_QWORD *)(v38 - 8) = 0;
            v36 -= 216;
          }
          while (v34 + v36 != v35);
          v50 = *(int64x2_t *)a1;
          v27 = v73.i64[1];
          v33 += v36;
        }
        *(_QWORD *)a1 = v33;
        *((_QWORD *)a1 + 1) = v27;
        v73 = v50;
        v51 = (void **)*((_QWORD *)a1 + 2);
        *((_QWORD *)a1 + 2) = v74;
        v74 = v51;
        v72 = (void **)v50.i64[0];
        std::__split_buffer<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::~__split_buffer((uint64_t)&v72);
      }
      else
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::NdrVersion,std::string,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken&,pxrInternal__aapl__pxrReserved__::TfToken&,std::string const&,std::string const&>(v25, v68, &Version, (__int128 *)&v63, &v62, v22, v23, a3, v59);
        v27 = v25 + 216;
        *((_QWORD *)a1 + 1) = v25 + 216;
      }
      *((_QWORD *)a1 + 1) = v27;
      if ((v62 & 7) != 0)
      {
        v52 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      v54 = v65;
      if (v65)
      {
        v55 = (unint64_t *)&v65->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if ((v68 & 7) != 0)
      {
        v57 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      v8 += 2;
    }
    while (v8 != v60);
  }
  v72 = (void **)&v70;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v72);
}

void sub_2300DAB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  unsigned int *v28;
  unsigned int v29;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if ((a25 & 7) != 0)
  {
    v28 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  __p = &a27;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void realityio::mtlx::`anonymous namespace'::_ComputeNameMapping(RIO_MTLX *a1, uint64_t a2)
{
  uint64_t *v4;
  char *v5;
  uint64_t *v6;
  uint64_t *i;
  uint64_t v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void **v17;
  unsigned __int8 *v18;
  uint64_t *v19;
  void **v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  char v37;
  void *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  void *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t *v65;
  uint64_t *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void **v71;
  std::__shared_weak_count *v72;

  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 1) = 0;
  *(_QWORD *)a1 = (char *)a1 + 8;
  v4 = RIO_MTLX::EMPTY_STRING(a1);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeDef>(a2, (unsigned __int8 *)v4, (uint64_t)&v65);
  v6 = v65;
  for (i = v66; v6 != i; v6 += 2)
  {
    v8 = *v6;
    v9 = (unsigned __int8 *)RIO_MTLX::Element::INHERIT_ATTRIBUTE((RIO_MTLX::Element *)v5);
    v5 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v8 + 160), v9);
    if (v5)
    {
      v10 = (std::__shared_weak_count *)v6[1];
      v63 = *v6;
      v64 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = atomic_load((unsigned __int8 *)&_MergedGlobals_34);
      if ((v13 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_34))
      {
        std::string::basic_string[abi:ne180100]<0>(byte_255E54AE0, "inherit");
        __cxa_guard_release(&_MergedGlobals_34);
      }
      v14 = v63;
      v71 = (void **)v63;
      v72 = v64;
      if (v64)
      {
        v15 = (unint64_t *)&v64->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = (void **)(v14 + 48);
      do
      {
        while (1)
        {
          v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v71 + 20, byte_255E54AE0);
          v19 = v18 ? (uint64_t *)(v18 + 40) : RIO_MTLX::EMPTY_STRING(0);
          if (*((char *)v19 + 23) < 0)
          {
            if (!v19[1])
              goto LABEL_49;
          }
          else if (!*((_BYTE *)v19 + 23))
          {
            goto LABEL_49;
          }
          v20 = v71;
          v21 = (std::__shared_weak_count *)v71[31];
          if (v21 && (v21 = std::__shared_weak_count::lock(v21)) != 0)
            v22 = v20[30];
          else
            v22 = 0;
          v67 = v22;
          v68 = v21;
          v23 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v22 + 12, (unsigned __int8 *)v19);
          if (v23)
          {
            v24 = (std::__shared_weak_count *)*((_QWORD *)v23 + 6);
            v69 = *((_QWORD *)v23 + 5);
            v70 = v24;
            if (v24)
            {
              v25 = (unint64_t *)&v24->__shared_owners_;
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
            }
          }
          else
          {
            v69 = 0;
            v70 = 0;
          }
          v27 = v68;
          if (v68)
          {
            v28 = (unint64_t *)&v68->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          v30 = v69;
          if (v69)
          {
            std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](&v71, &v69);
            v31 = *((char *)v71 + 71) < 0 ? v71[7] : (void *)*((unsigned __int8 *)v71 + 71);
            v32 = *((char *)v17 + 23) < 0 ? v17[1] : (void *)*((unsigned __int8 *)v17 + 23);
            if (v31 < v32)
              v17 = v71 + 6;
          }
          v33 = v70;
          if (v70)
          {
            v34 = (unint64_t *)&v70->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
              break;
          }
          if (!v30)
            goto LABEL_49;
        }
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      while (v30);
LABEL_49:
      v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string const&>((uint64_t)a1, (const void **)(v63 + 48), v63 + 48, (uint64_t)v17);
      if (!v37)
      {
        v38 = *((char *)v17 + 23) < 0 ? v17[1] : (void *)*((unsigned __int8 *)v17 + 23);
        v39 = *((char *)v36 + 79) < 0 ? v36[8] : *((unsigned __int8 *)v36 + 79);
        if ((unint64_t)v38 < v39)
          std::string::operator=((std::string *)(v36 + 7), (const std::string *)v17);
      }
      do
      {
        while (1)
        {
          v5 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v63 + 160), byte_255E54AE0);
          if (v5)
          {
            v40 = v5 + 40;
          }
          else
          {
            v5 = (char *)RIO_MTLX::EMPTY_STRING(0);
            v40 = v5;
          }
          if (v40[23] < 0)
          {
            if (!*((_QWORD *)v40 + 1))
              goto LABEL_97;
          }
          else if (!v40[23])
          {
            goto LABEL_97;
          }
          v41 = v63;
          v42 = *(std::__shared_weak_count **)(v63 + 248);
          if (v42 && (v42 = std::__shared_weak_count::lock(v42)) != 0)
            v43 = *(_QWORD **)(v41 + 240);
          else
            v43 = 0;
          v67 = v43;
          v68 = v42;
          v5 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v43 + 12, (unsigned __int8 *)v40);
          if (v5)
          {
            v44 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
            v69 = *((_QWORD *)v5 + 5);
            v70 = v44;
            if (v44)
            {
              v45 = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
            }
          }
          else
          {
            v69 = 0;
            v70 = 0;
          }
          v47 = v68;
          if (v68)
          {
            v48 = (unint64_t *)&v68->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v50 = v69;
          if (v69)
          {
            std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](&v63, &v69);
            v5 = (char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string const&>((uint64_t)a1, (const void **)(v63 + 48), v63 + 48, (uint64_t)v17);
            if (!v51)
            {
              v52 = *((char *)v17 + 23) < 0 ? v17[1] : (void *)*((unsigned __int8 *)v17 + 23);
              v53 = v5[79] < 0 ? *((_QWORD *)v5 + 8) : v5[79];
              if ((unint64_t)v52 < v53)
                v5 = (char *)std::string::operator=((std::string *)(v5 + 56), (const std::string *)v17);
            }
          }
          v54 = v70;
          if (v70)
          {
            v55 = (unint64_t *)&v70->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
              break;
          }
          if (!v50)
            goto LABEL_97;
        }
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      while (v50);
LABEL_97:
      v57 = v72;
      if (v72)
      {
        v58 = (unint64_t *)&v72->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = v64;
      if (v64)
      {
        v61 = (unint64_t *)&v64->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
    }
  }
  v71 = (void **)&v65;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v71);
}

void sub_2300DB12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  __cxa_guard_abort(&_MergedGlobals_34);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  a19 = (void **)&a12;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v19, *(_QWORD **)(v19 + 8));
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::UsdMtlxDiscoveryPlugin::GetSearchURIs(realityio::mtlx::UsdMtlxDiscoveryPlugin *this)
{
  return (uint64_t)this + 48;
}

void *realityio::mtlx::_Tf_RegistryFunctionBar0(realityio::mtlx *this, const std::type_info *a2, void *a3)
{
  unsigned __int8 v3;
  char v4;
  int v5;
  uint64_t v6;
  const std::type_info *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v8;
  _QWORD *v9;
  void *result;
  _QWORD *v11;
  void *__p;
  void *__pa;
  char v14;

  v3 = atomic_load(MEMORY[0x24BEE7DE0]);
  if ((v3 & 1) != 0 && pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin())
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
    v4 = 0;
    v5 = 2;
  }
  else
  {
    v5 = 0;
    v4 = 1;
  }
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x24BEE9CB8], a2);
  v6 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::Declare();
  v11 = operator new(8uLL);
  *v11 = v6;
  if (v14 < 0)
    operator delete(__p);
  v8 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::Declare();
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc(v8, MEMORY[0x24BEE9CB8], (void *(*)(void *, BOOL))pxrInternal__aapl__pxrReserved__::Tf_CastToParent<realityio::mtlx::UsdMtlxDiscoveryPlugin,pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin>);
  if (v14 < 0)
    operator delete(__p);
  if (v11)
    operator delete(v11);
  if ((v4 & 1) == 0)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
      --v5;
    }
    while (v5);
  }
  v9 = (_QWORD *)operator new();
  *v9 = &off_24FDF53E0;
  __pa = v9;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory();
  result = __pa;
  if (__pa)
    return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)__pa + 8))(__pa);
  return result;
}

void sub_2300DB34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::UsdMtlxDiscoveryPlugin::~UsdMtlxDiscoveryPlugin(realityio::mtlx::UsdMtlxDiscoveryPlugin *this)
{
  realityio::mtlx::UsdMtlxDiscoveryPlugin::~UsdMtlxDiscoveryPlugin(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_24FDF5398;
  v2 = (void **)((char *)this + 24);
  v3 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(this);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::mtlx::`anonymous namespace'::`anonymous namespace'::_tokens_PrivateStaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::mtlx::`anonymous namespace'::`anonymous namespace'::_tokens_PrivateStaticTokenType>>::operator->()
{
  unint64_t v0;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  void **v13;
  char v14;

  if (!v0)
  {
    v0 = operator new();
    MEMORY[0x2348B2758](v0, "mtlx", 0);
    v2 = *(_QWORD *)v0;
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 2, v3));
      if ((v4 & 1) == 0)
        v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)(v0 + 8) = 0;
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0;
    v13 = (void **)(v0 + 8);
    v14 = 0;
    v5 = operator new(8uLL);
    *(_QWORD *)(v0 + 8) = v5;
    *(_QWORD *)(v0 + 16) = v5;
    *v5 = v2;
    v6 = v5 + 1;
    *(_QWORD *)(v0 + 24) = v5 + 1;
    if ((v2 & 7) != 0)
    {
      v7 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *v5 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v0 + 16) = v6;
      do
        v9 = __ldxr(v7);
      while (__stlxr(v9 - 2, v7));
    }
    else
    {
      *(_QWORD *)(v0 + 16) = v6;
    }
    {
        return v0;
    }
    __clrex();
    v13 = (void **)(v0 + 8);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v13);
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v11 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    MEMORY[0x2348B4E1C](v0, 0x60C405399E965);
  }
  return v0;
}

{
  unint64_t v0;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  char v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  void **v26;
  char v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!v0)
  {
    v0 = operator new();
    MEMORY[0x2348B2758](v0, "light", 0);
    v2 = (_QWORD *)(v0 + 8);
    MEMORY[0x2348B2758](v0 + 8, "mtlx", 0);
    v3 = *(unsigned int **)v0;
    v28 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v28 = v4;
    }
    v6 = (unsigned int *)*v2;
    v29 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v29 = v7;
    }
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = 0;
    v26 = (void **)(v0 + 16);
    v27 = 0;
    v9 = operator new(0x10uLL);
    v10 = 0;
    v11 = 0;
    *(_QWORD *)(v0 + 16) = v9;
    *(_QWORD *)(v0 + 24) = v9;
    *(_QWORD *)(v0 + 32) = v9 + 2;
    do
    {
      v12 = v10;
      v13 = (&v28)[v11];
      *v9 = v13;
      if ((v13 & 7) != 0)
      {
        v14 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 2, v14));
        if ((v15 & 1) == 0)
          *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v9;
      v10 = 1;
      v11 = 1;
    }
    while ((v12 & 1) == 0);
    v16 = (unsigned int **)&v30;
    *(_QWORD *)(v0 + 24) = v9;
    do
    {
      v18 = (uint64_t)*--v16;
      v17 = v18;
      if ((v18 & 7) != 0)
      {
        v19 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
    }
    while (v16 != &v28);
    {
        return v0;
    }
    __clrex();
    v26 = (void **)(v0 + 16);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v26);
    if ((*v2 & 7) != 0)
    {
      v22 = (unsigned int *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v24 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    MEMORY[0x2348B4E1C](v0, 0x60C40F64FA5DBLL);
  }
  return v0;
}

void sub_2300DB570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  if ((v10 & 7) != 0)
  {
    v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((*v9 & 7) != 0)
  {
    v14 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  MEMORY[0x2348B4E1C](v9, 0x60C405399E965);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::NdrVersion,std::string,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken&,pxrInternal__aapl__pxrReserved__::TfToken&,std::string const&,std::string const&>(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, __int128 *a8, __int128 *a9)
{
  unint64_t v9;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t *v31;
  std::string::__raw **v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  _QWORD *v37;
  _QWORD *i;
  unint64_t v39;
  std::string *v40;
  std::string::__raw *v41;
  std::string::size_type v42;
  unsigned int *v43;
  unsigned int v44;
  std::string *v45;
  __int128 v46;
  float v47;
  float v48;
  _BOOL8 v49;
  unint64_t v50;
  unint64_t v51;
  size_t v52;
  uint64_t v53;
  std::string::__raw **v54;
  unint64_t v55;
  size_t __n[2];
  __int128 v58;
  int v59;
  _QWORD v60[2];
  char v61;

  *(_OWORD *)__n = 0u;
  v58 = 0u;
  v59 = 1065353216;
  *(_QWORD *)a1 = a2;
  if ((a2 & 7) != 0)
  {
    v15 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 8) = v17;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v18 = *a4;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v18;
  }
  v19 = *a5;
  *(_QWORD *)(a1 + 48) = *a5;
  if ((v19 & 7) != 0)
  {
    v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 2, v20));
    if ((v21 & 1) == 0)
      *(_QWORD *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  v22 = *a6;
  *(_QWORD *)(a1 + 56) = *a6;
  if ((v22 & 7) != 0)
  {
    v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 2, v23));
    if ((v24 & 1) == 0)
      *(_QWORD *)(a1 + 56) &= 0xFFFFFFFFFFFFFFF8;
  }
  v25 = *a7;
  *(_QWORD *)(a1 + 64) = *a7;
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 2, v26));
    if ((v27 & 1) == 0)
      *(_QWORD *)(a1 + 64) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v28 = *a8;
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(a1 + 72) = v28;
  }
  if (*((char *)a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a9, *((_QWORD *)a9 + 1));
  }
  else
  {
    v29 = *a9;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a9 + 2);
    *(_OWORD *)(a1 + 96) = v29;
  }
  *(_OWORD *)(a1 + 120) = 0u;
  v30 = (uint64_t *)(a1 + 144);
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 176) = v59;
  std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>(a1 + 144, __n[1]);
  v31 = (uint64_t *)v58;
  if ((_QWORD)v58)
  {
    v32 = (std::string::__raw **)(a1 + 160);
    do
    {
      v33 = v31[2] & 0xFFFFFFFFFFFFFFF8;
      v34 = bswap64(0x9E3779B97F4A7C55 * v33);
      v35 = *(_QWORD *)(a1 + 152);
      if (v35)
      {
        v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
        v36.i16[0] = vaddlv_u8(v36);
        if (v36.u32[0] > 1uLL)
        {
          v9 = v34;
          if (v34 >= v35)
            v9 = v34 % v35;
        }
        else
        {
          v9 = v34 & (v35 - 1);
        }
        v37 = *(_QWORD **)(*v30 + 8 * v9);
        if (v37)
        {
          for (i = (_QWORD *)*v37; i; i = (_QWORD *)*i)
          {
            v39 = i[1];
            if (v39 == v34)
            {
              if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v33)
                goto LABEL_78;
            }
            else
            {
              if (v36.u32[0] > 1uLL)
              {
                if (v39 >= v35)
                  v39 %= v35;
              }
              else
              {
                v39 &= v35 - 1;
              }
              if (v39 != v9)
                break;
            }
          }
        }
      }
      v40 = (std::string *)operator new(0x30uLL);
      v41 = (std::string::__raw *)v40;
      v60[0] = v40;
      v60[1] = a1 + 160;
      v61 = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      v40->__r_.__value_.__l.__size_ = v34;
      v42 = v31[2];
      v40->__r_.__value_.__r.__words[2] = v42;
      if ((v42 & 7) != 0)
      {
        v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 2, v43));
        if ((v44 & 1) == 0)
          v40->__r_.__value_.__r.__words[2] &= 0xFFFFFFFFFFFFFFF8;
      }
      v45 = v40 + 1;
      if (*((char *)v31 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v45, (const std::string::value_type *)v31[3], v31[4]);
      }
      else
      {
        v46 = *(_OWORD *)(v31 + 3);
        v41[1].__words[2] = v31[5];
        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
      }
      v61 = 1;
      v47 = (float)(unint64_t)(*(_QWORD *)(a1 + 168) + 1);
      v48 = *(float *)(a1 + 176);
      if (!v35 || (float)(v48 * (float)v35) < v47)
      {
        v49 = (v35 & (v35 - 1)) != 0;
        if (v35 < 3)
          v49 = 1;
        v50 = v49 | (2 * v35);
        v51 = vcvtps_u32_f32(v47 / v48);
        if (v50 <= v51)
          v52 = v51;
        else
          v52 = v50;
        std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>(a1 + 144, v52);
        v35 = *(_QWORD *)(a1 + 152);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v34 >= v35)
            v9 = v34 % v35;
          else
            v9 = v34;
        }
        else
        {
          v9 = (v35 - 1) & v34;
        }
      }
      v53 = *v30;
      v54 = *(std::string::__raw ***)(*v30 + 8 * v9);
      if (v54)
      {
        v41->__words[0] = (std::string::size_type)*v54;
      }
      else
      {
        v41->__words[0] = (std::string::size_type)*v32;
        *v32 = v41;
        *(_QWORD *)(v53 + 8 * v9) = v32;
        if (!v41->__words[0])
          goto LABEL_77;
        v55 = *(_QWORD *)(v41->__words[0] + 8);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v55 >= v35)
            v55 %= v35;
        }
        else
        {
          v55 &= v35 - 1;
        }
        v54 = (std::string::__raw **)(*v30 + 8 * v55);
      }
      *v54 = v41;
LABEL_77:
      v60[0] = 0;
      ++*(_QWORD *)(a1 + 168);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v60);
LABEL_78:
      v31 = (uint64_t *)*v31;
    }
    while (v31);
  }
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>>>::~__hash_table((uint64_t)__n);
}

void sub_2300DBA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void **a4, void **a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  va_list va;

  va_start(va, a5);
  if (*(char *)(v5 + 95) < 0)
    operator delete(*a4);
  v7 = *(_QWORD *)(v5 + 64);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = *(_QWORD *)(v5 + 56);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  v13 = *(_QWORD *)(v5 + 48);
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  if (*(char *)(v5 + 47) < 0)
    operator delete(*a5);
  if ((*(_QWORD *)v5 & 7) != 0)
  {
    v16 = (unsigned int *)(*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::string>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::string>,0>(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;

  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult::~NdrNodeDiscoveryResult(pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v2 = *((_QWORD *)this + 26);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::string>>>::~__hash_table((uint64_t)this + 144);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  v5 = *((_QWORD *)this + 8);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 7);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 6);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if ((*(_QWORD *)this & 7) != 0)
  {
    v14 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 216;
    pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult::~NdrNodeDiscoveryResult((pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult *)(i - 216));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string const&,std::string const&>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  char *v10;
  char *v11;
  std::string *v12;
  uint64_t *v14[2];
  char v15;
  uint64_t v16;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>(a1, &v16, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    v10 = (char *)operator new(0x50uLL);
    v11 = v10;
    v14[0] = (uint64_t *)v10;
    v14[1] = (uint64_t *)(a1 + 8);
    v15 = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v10 + 32), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
      *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
    }
    v12 = (std::string *)(v11 + 56);
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
      *((_QWORD *)v11 + 9) = *(_QWORD *)(a4 + 16);
    }
    v15 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, v16, v9, v14[0]);
    v8 = v14[0];
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
  }
  return v8;
}

void sub_2300DBEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  if (*(char *)(v9 + 55) < 0)
    operator delete(*v10);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::NdrDiscoveryPluginFactory<realityio::mtlx::UsdMtlxDiscoveryPlugin>::~NdrDiscoveryPluginFactory(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);
  JUMPOUT(0x2348B4E1CLL);
}

void pxrInternal__aapl__pxrReserved__::NdrDiscoveryPluginFactory<realityio::mtlx::UsdMtlxDiscoveryPlugin>::New(uint64_t *a1@<X8>)
{
  uint64_t v2;
  realityio::mtlx *v3;
  uint64_t *v4;
  std::string *v5;

  v2 = operator new();
  v3 = (realityio::mtlx *)pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin((pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin *)v2);
  *(_QWORD *)v2 = &off_24FDF5398;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  v4 = realityio::mtlx::UsdMtlxCustomSearchPaths(v3);
  if ((uint64_t *)(v2 + 24) != v4)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v2 + 24), (std::string *)*v4, (__int128 *)v4[1], 0xAAAAAAAAAAAAAAABLL * ((v4[1] - *v4) >> 3));
  v5 = realityio::mtlx::UsdMtlxSearchPaths((realityio::mtlx *)v4);
  if ((std::string *)(v2 + 48) != v5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v2 + 48), (std::string *)v5->__r_.__value_.__l.__data_, (__int128 *)v5->__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5->__r_.__value_.__l.__size_ - v5->__r_.__value_.__r.__words[0]) >> 3));
  *a1 = v2;
}

void sub_2300DC010(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x10A1C402F18DB2ELL);
  _Unwind_Resume(a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult::~NdrNodeDiscoveryResult((pxrInternal__aapl__pxrReserved__::NdrNodeDiscoveryResult *)(v4 - 216));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t RIOBuilderDirtyPropertyDescriptorGetTypeID()
{
  if (RIOBuilderDirtyPropertyDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderDirtyPropertyDescriptorGetTypeID::onceToken, &__block_literal_global_21);
  return RIOBuilderDirtyPropertyDescriptorGetTypeID::typeID;
}

uint64_t RIOBuilderDirtyPropertyDescriptorCreateWithMetadataDescriptors(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex i;
  _QWORD *ValueAtIndex;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;
  char *v18[3];

  memset(v18, 0, sizeof(v18));
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      v5 = ValueAtIndex[3];
      *(_QWORD *)&v17 = ValueAtIndex[2];
      *((_QWORD *)&v17 + 1) = v5;
      if (v5)
      {
        v6 = (unint64_t *)(v5 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100](v18, &v17);
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  v11 = operator new(0x40uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_24FDF54B8;
  *(_QWORD *)&v17 = realityio::PrimitiveDirtyPropertyDescriptor::PrimitiveDirtyPropertyDescriptor((uint64_t)(v11 + 3), (_QWORD **)v18);
  *((_QWORD *)&v17 + 1) = v11;
  v12 = RIOBuilderDirtyPropertyDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> &>(&v17);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)&v17 = v18;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  return v12;
}

void sub_2300DC2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  a10 = (void **)&a12;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

__CFArray *`anonymous namespace'::dirtyMetadataDescriptorsFromPropertyDescriptor(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void **v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(std::__shared_weak_count **)(a1 + 24);
    v24 = v3;
    v25 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    if (v3)
    {
      v22 = 0;
      v23 = 0;
      v21 = 0;
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>((char *)&v21, *(_QWORD **)(v3 + 8), *(_QWORD **)(v3 + 16), (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 4);
      v7 = v21;
      v8 = v22;
      if (v21 != v22)
      {
        do
        {
          v9 = *(std::__shared_weak_count **)(v7 + 8);
          v19 = *(void ***)v7;
          v20 = v9;
          if (v9)
          {
            v10 = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 1, v10));
          }
          v12 = (const void *)RIOBuilderDirtyMetadataDescriptorCreate<std::shared_ptr<realityio::DirtyMetadataDescriptor const> &>(&v19);
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v12);
          v13 = v20;
          if (v20)
          {
            v14 = (unint64_t *)&v20->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
        v4 = v25;
      }
      v19 = (void **)&v21;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    if (v4)
    {
      v16 = (unint64_t *)&v4->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return Mutable;
}

void sub_2300DC49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderAnyValueDirtyPropertyDescriptorCreateWithNameAndMetadataDescriptors(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  CFIndex Count;
  CFIndex i;
  _QWORD *ValueAtIndex;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v23;
  char *v24[3];
  uint64_t v25;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v25 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 2, v4));
      if ((v5 & 1) == 0)
        v25 = (uint64_t)v4;
    }
  }
  else
  {
    v25 = 0;
  }
  memset(v24, 0, sizeof(v24));
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      v9 = ValueAtIndex[3];
      *(_QWORD *)&v23 = ValueAtIndex[2];
      *((_QWORD *)&v23 + 1) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100](v24, &v23);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
  v15 = operator new(0x50uLL);
  v15[1] = 0;
  v15[2] = 0;
  *v15 = &off_24FDF5508;
  *(_QWORD *)&v23 = realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor((uint64_t)(v15 + 3), &v25, (_QWORD **)v24);
  *((_QWORD *)&v23 + 1) = v15;
  v16 = RIOBuilderDirtyPropertyDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> &>(&v23);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_QWORD *)&v23 = v24;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if ((v25 & 7) != 0)
  {
    v20 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  return v16;
}

void sub_2300DC674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v15;
  unsigned int v16;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  if ((a14 & 7) != 0)
  {
    v15 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderAnyValueDirtyPropertyDescriptorCopyName(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (a1)
  {
    v2 = *(const void **)(a1 + 16);
    v3 = *(std::__shared_weak_count **)(a1 + 24);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    if (v2)
    {
      if (v6)
      {
        if (v3)
        {
          v7 = (unint64_t *)&v3->__shared_owners_;
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        v9 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v6 + 5);
        if (v3)
        {
          v10 = (unint64_t *)&v3->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        if (RIOPxrTfTokenEmpty::onceToken != -1)
          dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_1_2);
        v9 = RIOPxrTfTokenEmpty::tokenRef;
      }
      if (v3)
      {
LABEL_26:
        v12 = (unint64_t *)&v3->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    else
    {
      if (RIOPxrTfTokenEmpty::onceToken != -1)
        dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_1_2);
      v9 = RIOPxrTfTokenEmpty::tokenRef;
      if (v3)
        goto LABEL_26;
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1)
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_1_2);
    return RIOPxrTfTokenEmpty::tokenRef;
  }
  return v9;
}

void sub_2300DC890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCreateWithNamespacePrefixAndMetadataDescriptors(__CFString *a1, const __CFArray *a2)
{
  int v4;
  CFIndex Count;
  CFIndex v6;
  _QWORD *ValueAtIndex;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string v20;
  _QWORD *v21;
  std::string v22;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (a1)
  {
    realityio::CFStringCopyUTF8String(a1, (uint64_t)&v21);
    if ((_BYTE)v21)
    {
      v4 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
      else
        v20 = v22;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v20;
      if (v4 < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  v21 = 0;
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = 0uLL;
  Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    v6 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v6);
      v8 = ValueAtIndex[3];
      v20.__r_.__value_.__r.__words[0] = ValueAtIndex[2];
      v20.__r_.__value_.__l.__size_ = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::push_back[abi:ne180100]((char **)&v21, (__int128 *)&v20);
      size = (std::__shared_weak_count *)v20.__r_.__value_.__l.__size_;
      if (v20.__r_.__value_.__l.__size_)
      {
        v12 = (unint64_t *)(v20.__r_.__value_.__l.__size_ + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      ++v6;
    }
    while (v6 != Count);
  }
  v14 = operator new(0x60uLL);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_24FDF5558;
  v20.__r_.__value_.__r.__words[0] = realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor((uint64_t)(v14 + 3), (__int128 *)&__p, &v21);
  v20.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
  v15 = RIOBuilderDirtyPropertyDescriptorCreate<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const> &>(&v20);
  v16 = (std::__shared_weak_count *)v20.__r_.__value_.__l.__size_;
  if (v20.__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(v20.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v15;
}

void sub_2300DCA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const __CFString *RIOBuilderAnyValueNamespacedDirtyPropertyDescriptorCopyNamespacePrefix(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  const char *v9;
  CFStringRef v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  if (!a1)
    return &stru_24FDFD990;
  v2 = *(const void **)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (!v2)
  {
    v10 = &stru_24FDFD990;
    if (!v3)
      return v10;
    goto LABEL_22;
  }
  if (v6)
  {
    if (v3)
    {
      v7 = (unint64_t *)&v3->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v6 + 40;
    if (v6[63] < 0)
      v9 = *(const char **)v9;
    v10 = CFStringCreateWithCString(0, v9, 0x8000100u);
    if (v3)
    {
      v11 = (unint64_t *)&v3->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    v10 = &stru_24FDFD990;
  }
  if (v3)
  {
LABEL_22:
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v10;
}

void sub_2300DCC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDirtyPropertyDescriptorCopyType(uint64_t a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    if (v2)
    {
      {
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        v2 = 2;
        if (v6)
          goto LABEL_23;
        goto LABEL_22;
      }
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (v7)
        v2 = 3;
      else
        v2 = 1;
      if (!v9)
      {
LABEL_22:
        ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
        std::__shared_weak_count::__release_weak(v1);
        goto LABEL_23;
      }
    }
    do
LABEL_23:
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    return v2;
  }
  if (v2)
  {
    {
      return 2;
    }
    {
      return 3;
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t _RIOBuilderDirtyPropertyDescriptorCFFinalize(const void *a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
}

BOOL _RIOBuilderDirtyPropertyDescriptorCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderDirtyPropertyDescriptorCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderDirtyPropertyDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderDirtyPropertyDescriptor %p>"), a1);
}

CFStringRef _RIOBuilderDirtyPropertyDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderDirtyPropertyDescriptor %p>"), a1);
}

void std::__shared_ptr_emplace<realityio::PrimitiveDirtyPropertyDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF54B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::PrimitiveDirtyPropertyDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF54B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::PrimitiveDirtyPropertyDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::AnyValueDirtyPropertyDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF5508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnyValueDirtyPropertyDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF5508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::AnyValueDirtyPropertyDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF5558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF5558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *realityio::RigComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v3 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a2, a1);
  v8 = 0;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v3))
  {
    v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a2);
    realityio::WrappedRERef<REAsset *>::operator=(&v8, v4);
  }
  else
  {
    RERigComponentGetComponentType();
    v5 = REComponentCreateByClass();
    v9[0] = v5;
    if (v5)
      RERetain();
    v6 = v8;
    if (v8 != v5)
    {
      v8 = v5;
      v9[0] = v6;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(v9);
    v9[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy(v9, &v8);
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a2, v9);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    RERelease();
  }
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v8);
}

void sub_2300DD098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v9;

  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

_QWORD *realityio::MeshComponentAction::operator()@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  void **v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  _QWORD *NameToken;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char v23;
  int IsImpl;
  unsigned int *v25;
  unsigned int v26;
  void **v27;
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  _QWORD *v38;
  void **v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned int *v49;
  unsigned int v50;
  int v51;
  unsigned int *v52;
  unsigned int v53;
  void **v54;
  __int128 v55;
  const pxrInternal__aapl__pxrReserved__::VtValue *v56;
  unint64_t *v57;
  unint64_t v58;
  const pxrInternal__aapl__pxrReserved__::VtValue *v59;
  const pxrInternal__aapl__pxrReserved__::VtValue *v60;
  pxrInternal__aapl__pxrReserved__::VtValue *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  _QWORD *v65;
  unsigned int *v66;
  unsigned int v67;
  int v68;
  unsigned int *v69;
  unsigned int v70;
  void **v71;
  _QWORD *v72;
  unsigned int *v73;
  unsigned int v74;
  int v75;
  unsigned int *v76;
  unsigned int v77;
  _QWORD *v78;
  unsigned int *v79;
  unsigned int v80;
  int v81;
  unsigned int *v82;
  unsigned int v83;
  void **v84;
  uint64_t *v85;
  realityio *v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  NSObject *v90;
  uint64_t Text;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  char *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  void **v102;
  unint64_t *v103;
  unint64_t v104;
  char *v105;
  __int128 v106;
  _QWORD *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v116;
  void *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t *v126;
  char *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  unint64_t v131;
  __int128 v132;
  uint64_t v133;
  void **v134;
  uint64_t v135;
  _BYTE buf[32];
  const pxrInternal__aapl__pxrReserved__::VtValue *v137;
  void **v138;
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  a6[1] = 0;
  v133 = 0;
  v132 = 0uLL;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v6 = *a4;
  if (a4[1] == *a4)
    goto LABEL_153;
  v8 = a4;
  v9 = 0;
  v116 = 0;
  v10 = &v131;
  v11 = (void **)&buf[16];
  v119 = 0;
  do
  {
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v138, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * v9));
    v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8 * v9);
    NameToken = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    MEMORY[0x2348B274C](buf, "__meshAsset");
    v14 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8))
    {
      pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v138);
      if ((buf[0] & 7) != 0)
      {
        v16 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
    }
    else if ((buf[0] & 7) != 0)
    {
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    v18 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    MEMORY[0x2348B274C](buf, "__meshAsset");
    v19 = *v18 & 0xFFFFFFFFFFFFFFF8;
    v20 = *(_QWORD *)buf;
    v21 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    if (v19 == (*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8))
    {
      v23 = v139;
      if (v139)
      {
        if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v139 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio26MeshAssetWithMaterialArrayE" & 0x7FFFFFFFFFFFFFFFLL)))
        {
          IsImpl = 1;
        }
        else
        {
          if ((v23 & 4) == 0)
            goto LABEL_17;
          v20 = *(_QWORD *)buf;
        }
LABEL_20:
        if ((v20 & 7) != 0)
        {
          v25 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stlxr(v26 - 2, v25));
        }
        if (!IsImpl)
          goto LABEL_45;
        if ((v139 & 4) != 0)
          v27 = (void **)(*(uint64_t (**)(void ***))((v139 & 0xFFFFFFFFFFFFFFF8) + 168))(&v138);
        else
          v27 = v138;
        v28 = (char *)v27[1];
        *(_QWORD *)buf = *v27;
        *(_QWORD *)&buf[8] = v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
        std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(v11, (uint64_t)v27[2], (uint64_t)v27[3], ((_BYTE *)v27[3] - (_BYTE *)v27[2]) >> 3);
        v32 = *(_QWORD *)buf;
        v31 = *(_QWORD *)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v33 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
        *(_QWORD *)&v132 = v32;
        *((_QWORD *)&v132 + 1) = v31;
        if (v35)
        {
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v38 = a5;
        v39 = v11;
        v40 = v10;
        v41 = *(_QWORD *)&buf[24];
        v42 = *(uint64_t **)&buf[16];
        v43 = (uint64_t)(*(_QWORD *)&buf[24] - *(_QWORD *)&buf[16]) >> 3;
        v44 = v126;
        if (v43 <= (v128 - (uint64_t)v126) >> 3)
        {
          v93 = v127;
          v94 = (v127 - (char *)v126) >> 3;
          if (v94 >= v43)
          {
            if (*(_QWORD *)&buf[16] == *(_QWORD *)&buf[24])
            {
              v97 = (char *)v126;
              v10 = v40;
              v11 = v39;
              a5 = v38;
              v8 = a4;
            }
            else
            {
              v97 = (char *)v126;
              v10 = v40;
              v11 = v39;
              a5 = v38;
              v8 = a4;
              do
              {
                realityio::WrappedRERef<REAsset *>::operator=(v44++, v42++);
                v97 += 8;
              }
              while (v42 != (uint64_t *)v41);
              v93 = v127;
            }
            while (v93 != v97)
              v93 = (char *)realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)v93 - 1);
LABEL_123:
            v127 = v97;
            v134 = v11;
            std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v134);
            v98 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v99 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
            }
            goto LABEL_128;
          }
          if (v127 != (char *)v126)
          {
            v95 = 8 * v94;
            v96 = *(uint64_t **)&buf[16];
            do
            {
              realityio::WrappedRERef<REAsset *>::operator=(v44++, v96++);
              v95 -= 8;
            }
            while (v95);
            v44 = (uint64_t *)v127;
          }
          v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::WrappedRERef<REAsset *>>,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>((uint64_t)&v128, (uint64_t)&v42[v94], v41, (uint64_t)v44);
        }
        else
        {
          std::vector<realityio::WrappedRERef<REAsset *>>::__vdeallocate((void **)&v126);
          if (v41 - (_QWORD)v42 < 0)
            std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
          v45 = (v128 - (uint64_t)v126) >> 2;
          if (v45 <= v43)
            v45 = (v41 - (uint64_t)v42) >> 3;
          if ((unint64_t)(v128 - (_QWORD)v126) >= 0x7FFFFFFFFFFFFFF8)
            v46 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v46 = v45;
          std::vector<realityio::WrappedRERef<REAsset *>>::__vallocate[abi:ne180100](&v126, v46);
          v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::WrappedRERef<REAsset *>>,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>((uint64_t)&v128, (uint64_t)v42, v41, (uint64_t)v127);
        }
        v97 = (char *)v47;
        v10 = v40;
        v11 = v39;
        a5 = v38;
        v8 = a4;
        goto LABEL_123;
      }
LABEL_17:
      IsImpl = 0;
      goto LABEL_20;
    }
    if ((buf[0] & 7) != 0)
    {
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
LABEL_45:
    v48 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    MEMORY[0x2348B274C](buf, "__materialAssets");
    v49 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    if ((*v48 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8))
    {
      v51 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v138);
      if ((buf[0] & 7) != 0)
      {
        v52 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if (v51)
      {
        if ((v139 & 4) != 0)
          v54 = (void **)(*(uint64_t (**)(void ***))((v139 & 0xFFFFFFFFFFFFFFF8) + 168))(&v138);
        else
          v54 = v138;
        v55 = *((_OWORD *)v54 + 1);
        *(_OWORD *)buf = *(_OWORD *)v54;
        *(_OWORD *)&buf[16] = v55;
        v56 = (const pxrInternal__aapl__pxrReserved__::VtValue *)v54[4];
        v137 = v56;
        if (v56)
        {
          v57 = (unint64_t *)((char *)v56 - 16);
          if (*(_QWORD *)&buf[24])
            v57 = *(unint64_t **)&buf[24];
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)buf);
        v59 = v137;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)buf);
        v60 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v137 + 16 * *(_QWORD *)buf);
        while (v59 != v60)
        {
          v61 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v134, v59);
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::MaterialAssetPair>(v61))
          {
            if ((v135 & 4) != 0)
              v62 = (uint64_t *)(*(uint64_t (**)(void ***))((v135 & 0xFFFFFFFFFFFFFFF8) + 168))(&v134);
            else
              v62 = (uint64_t *)v134;
            v63 = v130;
            if ((unint64_t)v130 >= v131)
            {
              v64 = (uint64_t *)std::vector<realityio::MaterialAssetPair>::__push_back_slow_path<realityio::MaterialAssetPair const&>((uint64_t *)&v129, v62);
            }
            else
            {
              std::allocator<realityio::MaterialAssetPair>::construct[abi:ne180100]<realityio::MaterialAssetPair,realityio::MaterialAssetPair const&>((uint64_t)v10, v130, v62);
              v64 = v63 + 2;
            }
            v130 = v64;
          }
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v134);
          v59 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v59 + 16);
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef(buf);
        goto LABEL_128;
      }
    }
    else if ((buf[0] & 7) != 0)
    {
      do
        v50 = __ldxr(v49);
      while (__stlxr(v50 - 2, v49));
    }
    v65 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    MEMORY[0x2348B274C](buf, "__entity");
    v66 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    if ((*v65 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8))
    {
      v68 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v138);
      if ((buf[0] & 7) != 0)
      {
        v69 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
        do
          v70 = __ldxr(v69);
        while (__stlxr(v70 - 2, v69));
      }
      if (v68)
      {
        if ((v139 & 4) != 0)
          goto LABEL_79;
LABEL_89:
        v71 = v138;
LABEL_90:
        v119 = *v71;
        goto LABEL_128;
      }
    }
    else if ((buf[0] & 7) != 0)
    {
      do
        v67 = __ldxr(v66);
      while (__stlxr(v67 - 2, v66));
    }
    v72 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    MEMORY[0x2348B274C](buf, "__entityPreMesh");
    v73 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    if ((*v72 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8))
    {
      v75 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v138);
      if ((buf[0] & 7) != 0)
      {
        v76 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if (v75)
      {
        if ((v139 & 4) == 0)
          goto LABEL_89;
LABEL_79:
        v71 = (void **)(*(uint64_t (**)(void ***))((v139 & 0xFFFFFFFFFFFFFFF8) + 168))(&v138);
        goto LABEL_90;
      }
    }
    else if ((buf[0] & 7) != 0)
    {
      do
        v74 = __ldxr(v73);
      while (__stlxr(v74 - 2, v73));
    }
    v78 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    MEMORY[0x2348B274C](buf, "__materialPBAComponent");
    v79 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    if ((*v78 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8))
    {
      v81 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v138);
      if ((buf[0] & 7) != 0)
      {
        v82 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      if (v81)
      {
        if ((v139 & 4) != 0)
          v84 = (void **)(*(uint64_t (**)(void ***))((v139 & 0xFFFFFFFFFFFFFFF8) + 168))(&v138);
        else
          v84 = v138;
        v116 = *v84;
        goto LABEL_128;
      }
    }
    else if ((buf[0] & 7) != 0)
    {
      do
        v80 = __ldxr(v79);
      while (__stlxr(v80 - 2, v79));
    }
    v85 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v12);
    v86 = (realityio *)MEMORY[0x2348B274C](buf, "__materialPBAComponent");
    v87 = *v85;
    v88 = (unsigned int *)(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFF8);
    if ((buf[0] & 7) != 0)
    {
      do
        v89 = __ldxr(v88);
      while (__stlxr(v89 - 2, v88));
    }
    if ((unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8) != v88)
    {
      v90 = *(id *)(realityio::logObjects(v86) + 24);
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
      {
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
        v92 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v12);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = Text;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v92;
        _os_log_impl(&dword_22FF26000, v90, OS_LOG_TYPE_DEFAULT, "\"%s\" MakeMeshComponentAction::Unused input \"%s\"\n", buf, 0x16u);
      }

    }
LABEL_128:
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v138);
    ++v9;
    v6 = *v8;
  }
  while (v9 < (v8[1] - *v8) >> 3);
  if ((_QWORD)v132)
  {
    v134 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(a6, a3);
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(a3)
      && (v101 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a3),
          realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)&v134, v101),
          (v102 = v134) != 0))
    {
      if ((void *)REComponentGetEntity() != v119)
        REEntityAddExistingComponent();
    }
    else
    {
      REMeshComponentGetComponentType();
      v102 = (void **)REComponentCreateByClass();
      v138 = v102;
      if (v102)
        RERetain();
      pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)buf, (uint64_t)a6);
      a6[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy(a6, (uint64_t *)&v138);
      if (*(_QWORD *)&buf[8])
        (*(void (**)(_BYTE *))(*(_QWORD *)&buf[8] + 32))(buf);
      realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v138);
      RERelease();
      REEntityAddExistingComponent();
    }
    *(_QWORD *)&v120 = v119;
    *((_QWORD *)&v120 + 1) = v102;
    v121 = v132;
    if (*((_QWORD *)&v132 + 1))
    {
      v103 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
    v122 = 0uLL;
    v123 = 0;
    std::vector<realityio::MaterialAssetPair>::__init_with_size[abi:ne180100]<realityio::MaterialAssetPair*,realityio::MaterialAssetPair*>((uint64_t)&v122, v129, v130, ((char *)v130 - (char *)v129) >> 4);
    v124 = (unint64_t)v116;
    v125 = 0uLL;
    std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>((_QWORD *)&v124 + 1, (uint64_t)v126, (uint64_t)v127, (v127 - (char *)v126) >> 3);
    *(_QWORD *)&buf[24] = 0;
    v105 = (char *)operator new(0x60uLL);
    *(_QWORD *)v105 = off_24FDF5618;
    *(_OWORD *)(v105 + 8) = v120;
    *(_OWORD *)(v105 + 24) = v121;
    *(_OWORD *)(v105 + 40) = v122;
    *((_QWORD *)v105 + 7) = v123;
    v123 = 0;
    v122 = 0uLL;
    v106 = v125;
    *((_OWORD *)v105 + 4) = v124;
    *((_OWORD *)v105 + 5) = v106;
    v125 = 0uLL;
    *((_QWORD *)&v124 + 1) = 0;
    *(_QWORD *)&buf[24] = v105;
    realityio::ECSAction::performBlockPostAssetLoadOnEngineQueue(a1, (uint64_t)buf);
    v107 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v108 = 4;
      v107 = buf;
LABEL_151:
      (*(void (**)(void))(*v107 + 8 * v108))();
    }
    else if (*(_QWORD *)&buf[24])
    {
      v108 = 5;
      goto LABEL_151;
    }
    v138 = (void **)&v124 + 1;
    std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v138);
    v138 = (void **)&v122;
    std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&v138);
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v134);
  }
LABEL_153:
  *(_QWORD *)buf = &v126;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v129;
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
  if (*((_QWORD *)&v132 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v133);
}

void sub_2300DDC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::VtValue *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v35 - 120));
  *(_QWORD *)(v35 - 120) = &a32;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 120));
  a32 = (void **)&a35;
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v35 - 200);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(v35 - 184));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a11);
  _Unwind_Resume(a1);
}

uint64_t realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::$_0::~$_0(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 64);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 32);
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 16);
  return a1;
}

uint64_t std::vector<realityio::MaterialAssetPair>::__init_with_size[abi:ne180100]<realityio::MaterialAssetPair*,realityio::MaterialAssetPair*>(uint64_t result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  char v14;
  uint64_t *v15;
  uint64_t *v16;

  if (a4)
  {
    v4 = (_QWORD *)result;
    if (a4 >> 60)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v7 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(result + 16, a4);
    v8 = v7;
    *v4 = v7;
    v4[1] = v7;
    v4[2] = &v7[2 * v9];
    v15 = v7;
    v16 = v7;
    v13[0] = v4 + 2;
    v13[1] = &v15;
    v13[2] = &v16;
    v14 = 0;
    if (a2 != a3)
    {
      v10 = v7;
      do
      {
        v11 = *a2;
        *v10 = *a2;
        if (v11)
          RERetain();
        v12 = a2[1];
        v10[1] = v12;
        if (v12)
          RERetain();
        v10 = v16 + 2;
        v16 += 2;
        a2 += 2;
      }
      while (a2 != a3);
      v8 = v10;
    }
    v14 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,realityio::MaterialAssetPair*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
    v4[1] = v8;
  }
  return result;
}

void sub_2300DE040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,realityio::MaterialAssetPair*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD ***)(a1 + 8);
    v3 = **(_QWORD ***)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        v4 = v3 - 2;
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(v3 - 1);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(v4);
        v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

uint64_t std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FDF5618;
  v3 = (void **)(a1 + 72);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 40);
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 24);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_24FDF5618;
  v3 = (void **)(a1 + 72);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 40);
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 24);
  return MEMORY[0x2348B4E1C](a1, 0xA1C40E599B628);
}

_QWORD *std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x60uLL);
  *v2 = off_24FDF5618;
  std::__compressed_pair_elem<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2300DE1E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24FDF5618;
  return std::__compressed_pair_elem<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t ModelCount;
  uint64_t i;
  uint64_t ModelPartCount;
  uint64_t j;
  unint64_t ModelPartBufferCount;
  uint64_t v9;
  BOOL v10;
  const char *ModelPartBufferName;
  unsigned int v12;
  _QWORD *k;
  _QWORD *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t Entity;
  _QWORD **v19;
  _QWORD *v20[2];

  REMeshComponentSetMesh();
  if (REMeshComponentGetMaterialCount())
    REMeshComponentRemoveAllMaterials();
  if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 72))
  {
    v20[0] = 0;
    v20[1] = 0;
    v19 = v20;
    ModelCount = REMeshAssetGetModelCount();
    if (ModelCount)
    {
      for (i = 0; i != ModelCount; ++i)
      {
        ModelPartCount = REMeshAssetGetModelPartCount();
        if (ModelPartCount)
        {
          for (j = 0; j != ModelPartCount; ++j)
          {
            if (REMeshAssetGetModelPartMaterial()
              && (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4)
            {
              ModelPartBufferCount = REMeshAssetGetModelPartBufferCount();
              if (!ModelPartBufferCount)
                goto LABEL_20;
              v9 = 0;
              v10 = 1;
              do
              {
                ModelPartBufferName = (const char *)REMeshAssetGetModelPartBufferName();
                if (ModelPartBufferName && !strcmp("osdSubdivisionScheme", ModelPartBufferName))
                  break;
                v10 = ++v9 < ModelPartBufferCount;
              }
              while (ModelPartBufferCount != v9);
              if (v10)
                std::__tree<std::__value_type<unsigned int,REAsset *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,REAsset *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,REAsset *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,REAsset *>>((uint64_t *)&v19, 0, 0, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
              else
LABEL_20:
                std::__tree<std::__value_type<unsigned int,REAsset *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,REAsset *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,REAsset *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,REAsset *>>((uint64_t *)&v19, 0, 0, **(_QWORD **)(a1 + 40));
            }
          }
        }
      }
    }
    if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a1 + 40))
    {
      v12 = 0;
      do
      {
        for (k = v20[0]; k; k = (_QWORD *)*v16)
        {
          v14 = k;
          v15 = *((_DWORD *)k + 8);
          v16 = k + 1;
          if (v15 >= v12)
            v16 = v14;
        }
        REMeshComponentAddMaterial();
        ++v12;
      }
      while (v12 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4));
    }
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(v20[0]);
  }
  else
  {
    v2 = 1;
    do
    {
      REMeshComponentAddMaterial();
      v3 = v2++;
    }
    while (v3 < (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3);
  }
  RENetworkMarkComponentDirty();
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    Entity = REComponentGetEntity();
    result = *(_QWORD *)(a1 + 8);
    if (Entity != result)
      return REEntityAddExistingComponent();
  }
  return result;
}

void sub_2300DE4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(a13);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<realityio::MaterialAssetPair>::__init_with_size[abi:ne180100]<realityio::MaterialAssetPair*,realityio::MaterialAssetPair*>(a1 + 32, *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>((_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3);
  return a1;
}

void sub_2300DE610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__alloc_func<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshComponentAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 64);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 32);
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 16);
}

uint64_t *std::__tree<std::__value_type<unsigned int,REAsset *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,REAsset *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,REAsset *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,REAsset *>>(uint64_t *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t *v13;

  v6 = result;
  v8 = (uint64_t **)(result + 1);
  v7 = result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (_QWORD *)v7;
        v10 = *(_DWORD *)(v7 + 32);
        if (v10 <= a2)
          break;
        v7 = *v9;
        v8 = (uint64_t **)v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= a2)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = (uint64_t **)(v9 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = result + 1;
LABEL_9:
    v11 = operator new(0x30uLL);
    v11[8] = a3;
    *((_QWORD *)v11 + 5) = a4;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v9;
    *v8 = (uint64_t *)v11;
    v12 = *(_QWORD *)*v6;
    if (v12)
    {
      *v6 = v12;
      v13 = *v8;
    }
    else
    {
      v13 = (uint64_t *)v11;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], v13);
    ++v6[2];
  }
  return result;
}

uint64_t realityio::visitPrimHierarchy(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _BYTE v10[16];
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  _QWORD v23[2];
  int v24;
  _DWORD v25[8];
  char v26;

  if (*(_QWORD *)(a2 + 24))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v23, result, a3);
    v26 = 1;
    v4 = v23[0];
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, &v24);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v14 + 1, v25);
    v5 = v25[7];
    v18 = v4;
    v19 = v23;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, &v14);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v20 + 1, (_DWORD *)&v14 + 1);
    v21 = v5;
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
    while (1)
    {
      v14 = v23[1];
      v15 = v23;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      LODWORD(v17) = 0;
      WORD2(v17) = 0;
      if (v19 == v15 && v18 == v14)
      {
        v6 = 1;
        if (v20 == v16 && !v21 && !(_BYTE)v22)
          v6 = HIBYTE(v22) != 0;
      }
      else
      {
        v6 = 1;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
      if (!v6)
        break;
      if (HIBYTE(v22))
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator++((uint64_t)v12, (uint64_t)&v18);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator++((uint64_t)v10, (uint64_t)&v18);
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v10, (uint64_t)&v14);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
        v7 = *(_QWORD *)(a2 + 24);
        if (!v7)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v14);
        if ((v17 & 7) != 0)
        {
          v8 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
          do
            v9 = __ldxr(v8);
          while (__stlxr(v9 - 2, v8));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
        if (v15)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v15);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
  }
  return result;
}

void sub_2300DE9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::~iterator((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)va);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)(v17 - 144));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator++(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  return pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)a2);
}

void sub_2300DEA54(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *v1;

  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::~iterator(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::findOriginalSourceAttribute@<X0>(realityio *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51[2];
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;

  *(_DWORD *)a2 = *(_DWORD *)this;
  v5 = *((_QWORD *)this + 1);
  *(_QWORD *)(a2 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 16), (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 20), (_DWORD *)this + 5);
  v8 = *((_QWORD *)this + 3);
  *(_QWORD *)(a2 + 24) = v8;
  v9 = (_QWORD *)(a2 + 24);
  if ((v8 & 7) != 0)
  {
    v10 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  v54 = 1;
  v55 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v58 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v62 = 0;
  v59 = MEMORY[0x24BEE9DC0] + 16;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
  v53 = 0;
  v52 = 0;
  v51[0] = 0;
  v51[1] = 0;
  v50 = (uint64_t *)v51;
  do
  {
    if (!pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
      break;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v54);
    v12 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v54);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
    if (v12)
      break;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, &v54);
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(&v50, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v54, &v54);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
    if (v52 == 2)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v59, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v53);
      v54 = v45;
      v55 = v46;
      if (v46)
      {
        v20 = (unint64_t *)(v46 + 48);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v56, &v47);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v57, &v48);
      v58 = v49;
      if ((v49 & 7) != 0)
      {
        v22 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 2, v22));
        if ((v23 & 1) == 0)
          v58 &= 0xFFFFFFFFFFFFFFF8;
      }
      *(_DWORD *)a2 = v54;
      v24 = v55;
      v55 = 0;
      v25 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v24;
      if (v25)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 16, &v56);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 20);
      if (&v54 == (int *)a2)
      {
        v28 = v58;
      }
      else
      {
        if ((*v9 & 7) != 0)
        {
          v26 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
          do
            v27 = __ldxr(v26);
          while (__stlxr(v27 - 2, v26));
        }
        v28 = 0;
        *v9 = v58;
        v58 = 0;
      }
      if ((v28 & 7) != 0)
      {
        v34 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
      if (v55)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v55);
      if ((v49 & 7) != 0)
      {
        v36 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
    }
    else
    {
      if (v52 == 1)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v59, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v53);
        *(_DWORD *)a2 = v54;
        v13 = v55;
        if (v55)
        {
          v14 = (unint64_t *)(v55 + 48);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v13;
        if (v16)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 16, &v56);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 20, &v57);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)(a2 + 24), &v58);
        if ((v58 & 7) != 0)
        {
          v17 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
        v19 = v55;
        if (!v55)
          continue;
LABEL_66:
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
        continue;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v45, &v60, &v61);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v45, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v53);
      *(_DWORD *)a2 = v54;
      v29 = v55;
      v55 = 0;
      v30 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v29;
      if (v30)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 16, &v56);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a2 + 20);
      if (&v54 == (int *)a2)
      {
        v33 = v58;
      }
      else
      {
        if ((*v9 & 7) != 0)
        {
          v31 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
          do
            v32 = __ldxr(v31);
          while (__stlxr(v32 - 2, v31));
        }
        v33 = 0;
        *v9 = v58;
        v58 = 0;
      }
      if ((v33 & 7) != 0)
      {
        v38 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
      if (v55)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v55);
      if ((v49 & 7) != 0)
      {
        v40 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
    v19 = v46;
    if (v46)
      goto LABEL_66;
  }
  while ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)a2) & 1) != 0);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v50, v51[0]);
  if ((v53 & 7) != 0)
  {
    v42 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  return MEMORY[0x2348B2350](&v59);
}

void sub_2300DEFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute *v14;
  va_list va;

  va_start(va, a14);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute(v14);
  _Unwind_Resume(a1);
}

const void **realityio::assignGamutFromToken(const void **result, _BYTE *a2, uint64_t *a3)
{
  uint64_t v3;
  float32x4_t *v4;
  unint64_t v5;
  uint64_t EmptyString;
  const char *v7;
  const __CFString *v8;
  CGColorSpaceRef v9;
  float64x2_t v10;
  CFTypeRef v11;
  CGFloat components[2];
  float64x2_t v13;
  CFTypeRef cf;
  CFStringRef v15;

  *a2 = 0;
  v3 = *a3;
  if (*a3)
  {
    v4 = (float32x4_t *)result;
    v15 = 0;
    v5 = v3 & 0xFFFFFFFFFFFFFFF8;
    if (v5)
      EmptyString = v5 + 16;
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    if (*(char *)(EmptyString + 23) >= 0)
      v7 = (const char *)EmptyString;
    else
      v7 = *(const char **)EmptyString;
    v15 = CFStringCreateWithCString(0, v7, 0x8000100u);
    v8 = (const __CFString *)MEMORY[0x2348B142C](v15);
    if (v8)
    {
      v9 = CGColorSpaceCreateWithName(v8);
      cf = v9;
      if (v9)
      {
        v10 = vcvt_hight_f64_f32(*v4);
        *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)v4->f32);
        v13 = v10;
        v11 = CGColorCreate(v9, components);
        RECGColorToColorGamut();
        realityio::WrappedCFRef<CGColor *>::~WrappedCFRef(&v11);
      }
      realityio::WrappedCFRef<CGColorSpace *>::~WrappedCFRef(&cf);
    }
    return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v15);
  }
  return result;
}

void sub_2300DF1A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, const void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  realityio::WrappedCFRef<CGColor *>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<CGColorSpace *>::~WrappedCFRef((const void **)va1);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v2 - 40));
  _Unwind_Resume(a1);
}

const void **realityio::assignGamutFromAttribute(const void **a1, _BYTE *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  const void **result;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  *a2 = 0;
  result = (const void **)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(this);
    result = realityio::assignGamutFromToken(a1, a2, &v9);
    if ((v9 & 7) != 0)
    {
      v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
  }
  return result;
}

double realityio::getColorAttributeAndGamut@<D0>(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1@<X0>, __n128 *a2@<X8>, __n128 a3@<Q0>)
{
  unint64_t *v5;
  __n128 v7;
  double result;
  uint64_t TypeName;
  __n128 v11;
  void *__p;
  char v13;
  __n128 v14;

  v14 = a3;
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  v5 = (unint64_t *)MEMORY[0x24BEE82A0];
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1, (uint64_t)&TypeName);
    if ((_BYTE)TypeName)
    {
      v7.n128_u64[0] = v11.n128_u64[0];
      v7.n128_u64[1] = __PAIR64__(1.0, v11.n128_u32[2]);
LABEL_11:
      v14 = v7;
      goto LABEL_14;
    }
LABEL_12:
    if (v13 < 0)
      operator delete(__p);
    goto LABEL_14;
  }
  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  if (!atomic_load(v5))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1, (uint64_t)&TypeName);
    if ((_BYTE)TypeName)
    {
      v7 = v11;
      goto LABEL_11;
    }
    goto LABEL_12;
  }
LABEL_14:
  LOBYTE(TypeName) = 0;
  realityio::assignGamutFromAttribute((const void **)&v14, &TypeName, a1);
  result = v14.n128_f64[0];
  *a2 = v14;
  a2[1].n128_u8[0] = TypeName;
  return result;
}

uint64_t realityio::getAttributeColor4FAndGamut@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, __n128 *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a3 = a4;
  a3[1].n128_u8[0] = 0;
  result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v11))
    {
      realityio::getColorAttributeAndGamut((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v11, &v15, a4);
      *a3 = v15;
      a3[1].n128_u8[0] = v16;
    }
    if ((v14 & 7) != 0)
    {
      v8 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
    result = v12;
    if (v12)
      return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  }
  return result;
}

void sub_2300DF4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::hasInputsLoop(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t hasCyclesHelper;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _OWORD v15[3];
  uint64_t *v16;
  _QWORD *v17[2];

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v9 = 0;
  v6 = MEMORY[0x24BEE9DC0] + 16;
  if (v7
    && (*(_BYTE *)(v7 + 57) & 8) == 0
    && (*(unsigned int (**)(uint64_t *))(MEMORY[0x24BEE9DC0] + 48))(&v6))
  {
    v17[0] = 0;
    v17[1] = 0;
    v16 = (uint64_t *)v17;
    memset(v15, 0, sizeof(v15));
    std::deque<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>::push_back(v15, (uint64_t)&v6);
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v10, &v7, &v8);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v10, &v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
    if ((v13 & 7) != 0)
    {
      v2 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stlxr(v3 - 2, v2));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    if (v11)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
    std::deque<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>::~deque[abi:ne180100]((uint64_t)v15);
  }
  else
  {
    hasCyclesHelper = 0;
  }
  MEMORY[0x2348B2350](&v6);
  return hasCyclesHelper;
}

void sub_2300DF620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  std::deque<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>::~deque[abi:ne180100]((uint64_t)va3);
  MEMORY[0x2348B2350]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  _QWORD *result;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t i;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 16 * (v5 - v4) - 1;
  v8 = a1[4];
  if (v7 == a1[5] + v8)
  {
    v9 = v8 >= 0x80;
    v10 = v8 - 128;
    if (v9)
    {
      a1[4] = v10;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
      goto LABEL_36;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v55 = 1;
          else
            v55 = (v25 - v4) >> 2;
          v56 = 2 * v55;
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v55);
          v4 = &v57[(v56 + 6) & 0xFFFFFFFFFFFFFFF8];
          v59 = (uint64_t *)a1[1];
          v60 = v4;
          v61 = a1[2] - (_QWORD)v59;
          if (v61)
          {
            v60 = &v4[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = 8 * (v61 >> 3);
            v63 = &v57[(v56 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v64 = *v59++;
              *(_QWORD *)v63 = v64;
              v63 += 8;
              v62 -= 8;
            }
            while (v62);
          }
          v65 = (char *)*a1;
          *a1 = v57;
          a1[1] = v4;
          a1[2] = v60;
          a1[3] = &v57[8 * v58];
          if (v65)
          {
            operator delete(v65);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v66 = (char *)a1[1];
        v67 = (char *)a1[2];
        a1[1] = v66 - 8;
        v68 = *((_QWORD *)v66 - 1);
        a1[1] = v66;
        if (v67 == (char *)a1[3])
        {
          v69 = (uint64_t)&v66[-*a1];
          if ((unint64_t)v66 <= *a1)
          {
            if (v67 == (char *)*a1)
              v100 = 1;
            else
              v100 = (uint64_t)&v67[-*a1] >> 2;
            v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v100);
            v103 = &v101[8 * (v100 >> 2)];
            v104 = (uint64_t *)a1[1];
            v67 = v103;
            v105 = a1[2] - (_QWORD)v104;
            if (v105)
            {
              v67 = &v103[v105 & 0xFFFFFFFFFFFFFFF8];
              v106 = 8 * (v105 >> 3);
              v107 = &v101[8 * (v100 >> 2)];
              do
              {
                v108 = *v104++;
                *(_QWORD *)v107 = v108;
                v107 += 8;
                v106 -= 8;
              }
              while (v106);
            }
            v109 = (char *)*a1;
            *a1 = v101;
            a1[1] = v103;
            a1[2] = v67;
            a1[3] = &v101[8 * v102];
            if (v109)
            {
              operator delete(v109);
              v67 = (char *)a1[2];
            }
          }
          else
          {
            v70 = v69 >> 3;
            v16 = v69 >> 3 < -1;
            v71 = (v69 >> 3) + 2;
            if (v16)
              v72 = v71;
            else
              v72 = v70 + 1;
            v73 = -(v72 >> 1);
            v74 = v72 >> 1;
            v75 = &v66[-8 * v74];
            v76 = v67 - v66;
            if (v67 != v66)
            {
              memmove(&v66[-8 * v74], v66, v67 - v66);
              v66 = (char *)a1[1];
            }
            v67 = &v75[v76];
            a1[1] = &v66[8 * v73];
            a1[2] = &v75[v76];
          }
        }
        *(_QWORD *)v67 = v68;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
LABEL_36:
      a1[2] += 8;
      goto LABEL_37;
    }
    v30 = v27 >> 2;
    if (v25 == v26)
      v31 = 1;
    else
      v31 = v30;
    v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v31);
    v34 = v33;
    v35 = operator new(0x1000uLL);
    v36 = &v32[8 * v24];
    v37 = &v32[8 * v34];
    if (v24 == v34)
    {
      v38 = 8 * v24;
      if (v6 < 1)
      {
        v77 = v35;
        v78 = v38 >> 2;
        if (v5 == v4)
          v79 = 1;
        else
          v79 = v78;
        v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v79);
        v36 = &v80[8 * (v79 >> 2)];
        v37 = &v80[8 * v81];
        if (v32)
          operator delete(v32);
        v32 = v80;
        v35 = v77;
      }
      else
      {
        v39 = v38 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v36 -= 8 * (v40 >> 1);
      }
    }
    *(_QWORD *)v36 = v35;
    v82 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      if (v36 == v32)
      {
        if (v82 >= v37)
        {
          if (v37 == v32)
            v88 = 1;
          else
            v88 = (v37 - v32) >> 2;
          v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v88);
          v91 = v89;
          v36 = &v89[(2 * v88 + 6) & 0xFFFFFFFFFFFFFFF8];
          v93 = v82 - v32;
          v92 = v82 == v32;
          v82 = v36;
          if (!v92)
          {
            v82 = &v36[v93 & 0xFFFFFFFFFFFFFFF8];
            v94 = 8 * (v93 >> 3);
            v95 = v36;
            v96 = (uint64_t *)v32;
            do
            {
              v97 = *v96++;
              *(_QWORD *)v95 = v97;
              v95 += 8;
              v94 -= 8;
            }
            while (v94);
          }
          v37 = &v89[8 * v90];
          if (v32)
            operator delete(v32);
          v32 = v91;
        }
        else
        {
          v84 = (v37 - v82) >> 3;
          if (v84 >= -1)
            v85 = v84 + 1;
          else
            v85 = v84 + 2;
          v86 = v85 >> 1;
          v36 = &v32[8 * (v85 >> 1)];
          v87 = v32;
          if (v82 != v32)
          {
            memmove(v36, v32, v82 - v32);
            v87 = v82;
          }
          v82 = &v87[8 * v86];
        }
      }
      v98 = *(_QWORD *)(i - 8);
      *((_QWORD *)v36 - 1) = v98;
      v36 -= 8;
    }
    v99 = (char *)*a1;
    *a1 = v32;
    a1[1] = v36;
    a1[2] = v82;
    a1[3] = v37;
    if (v99)
      operator delete(v99);
  }
LABEL_37:
  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *result = MEMORY[0x24BEE9D58] + 16;
  v52 = *(_QWORD *)(a2 + 24);
  result[3] = v52;
  if ((v52 & 7) != 0)
  {
    v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 2, v53));
    if ((v54 & 1) == 0)
      result[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  *result = MEMORY[0x24BEE9DC0] + 16;
  ++a1[5];
  return result;
}

void sub_2300DFBA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::`anonymous namespace'::CycleState>::operator[](uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  void **v4;
  uint64_t *v5;
  uint64_t **v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v4 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v10, a2);
  v5 = (uint64_t *)*v4;
  if (!*v4)
  {
    v6 = (uint64_t **)v4;
    v5 = (uint64_t *)operator new(0x28uLL);
    v8[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5 + 7, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5 + 8, (_DWORD *)a2 + 1);
    *((_DWORD *)v5 + 9) = 0;
    v9 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, v5);
    v8[0] = 0;
  }
  return (char *)v5 + 36;
}

{
  void **v4;
  uint64_t *v5;
  uint64_t **v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v4 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v10, a2);
  v5 = (uint64_t *)*v4;
  if (!*v4)
  {
    v6 = (uint64_t **)v4;
    v5 = (uint64_t *)operator new(0x28uLL);
    v8[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5 + 7, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5 + 8, (_DWORD *)a2 + 1);
    *((_DWORD *)v5 + 9) = 0;
    v9 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, v5);
    v8[0] = 0;
  }
  return (char *)v5 + 36;
}

uint64_t realityio::`anonymous namespace'::_hasCyclesHelper(uint64_t **a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  char v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  void (***v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v41;
  _DWORD v42[3];
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;

  v4 = a2[5] + a2[4] - 1;
  v5 = *(_QWORD *)(a2[1] + ((v4 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v4 & 0x7F);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v59 = MEMORY[0x24BEE9D58] + 16;
  v6 = *(_QWORD *)(v5 + 24);
  v62 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = MEMORY[0x24BEE9DC0];
  v59 = MEMORY[0x24BEE9DC0] + 16;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v59);
  v10 = v57;
  if (v57 == v58)
  {
    LOBYTE(v41) = 0;
LABEL_45:
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v52, &v60, &v61);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v52, &v48);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    if ((v56 & 7) != 0)
    {
      v28 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
    if (v53)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
    v30 = a2[5] + a2[4] - 1;
    v31 = (void (***)(_QWORD))(*(_QWORD *)(a2[1] + ((v30 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v30 & 0x7F));
    (**v31)(v31);
    v33 = a2[1];
    v32 = a2[2];
    v34 = v32 - v33;
    v35 = v32 == v33;
    v37 = a2[4];
    v36 = a2[5];
    a2[5] = v36 - 1;
    v38 = 16 * v34 - 1;
    if (v35)
      v38 = 0;
    if ((unint64_t)(v38 - (v36 + v37) - 255) <= 0xFFFFFFFFFFFFFEFFLL)
    {
      operator delete(*(void **)(v32 - 8));
      a2[2] -= 8;
    }
    v39 = v41;
  }
  else
  {
    v41 = 0;
    v11 = v9 + 16;
    while (1)
    {
      LODWORD(v52) = *(_DWORD *)v10;
      v12 = *(_QWORD *)(v10 + 8);
      v53 = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 48);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v54, (_DWORD *)(v10 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v55, (_DWORD *)(v10 + 20));
      v15 = *(_QWORD *)(v10 + 24);
      v56 = v15;
      if ((v15 & 7) != 0)
      {
        v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 2, v16));
        if ((v17 & 1) == 0)
          v56 &= 0xFFFFFFFFFFFFFFF8;
      }
      v44 = 1;
      v45 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v47 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v51 = 0;
      v48 = v11;
      if ((v47 & 7) != 0)
      {
        v18 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
      if (v45)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v45);
      v43 = 0;
      v42[2] = 0;
      if (!pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
        goto LABEL_32;
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v44, &v49, &v50);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v44, v42);
      if ((v47 & 7) != 0)
      {
        v20 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
      if (v45)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v45);
      if (v22 != 1
      {
        std::deque<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>::push_back(a2, (uint64_t)&v48);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v42);
      if (v22 == 1)
        v23 = 0;
      else
LABEL_32:
        v23 = 1;
      if ((v43 & 7) != 0)
      {
        v24 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      MEMORY[0x2348B2350](&v48);
      if ((v56 & 7) != 0)
      {
        v26 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
      if (v53)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v53);
      if ((v23 & 1) == 0)
        break;
      v10 += 32;
      if (v10 == v58)
        goto LABEL_45;
    }
    v39 = 1;
  }
  v52 = (void **)&v57;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v52);
  MEMORY[0x2348B2350](&v59);
  return v39 & 1;
}

void sub_2300E0138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  uint64_t v25;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a25);
  a25 = (void **)(v25 - 144);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&a25);
  MEMORY[0x2348B2350](v25 - 120);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::`anonymous namespace'::CycleState>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::`anonymous namespace'::CycleState>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    operator delete(v2);
  }
  return a1;
}

uint64_t std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::`anonymous namespace'::CycleState>,void *>>>::destroy[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::`anonymous namespace'::CycleState>,void,void>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::deque<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 7];
    v7 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(_QWORD *)(a1 + 40) + v5) & 0x7F);
    if ((char *)*v6 + 32 * (v5 & 0x7F) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v6 + 32 * (v5 & 0x7F));
      do
      {
        v9 = *v8;
        v8 += 4;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v6 == 4096)
        {
          v10 = (void (***)(void))v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 64;
    goto LABEL_15;
  }
  if (v12 == 2)
  {
    v13 = 128;
LABEL_15:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::`anonymous namespace'::CycleState>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::`anonymous namespace'::CycleState>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::`anonymous namespace'::CycleState>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    operator delete(a1);
  }
}

uint64_t std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__count_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v2 + 28)) & 1) == 0)
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v2 + 28), a2))return v4;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v9[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 7, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 8, a3 + 1);
    v10 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

const void **realityio::WrappedCFRef<CGColorSpace *>::~WrappedCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t RIOBuilderOutputDescriptorGetTypeID()
{
  if (RIOBuilderOutputDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderOutputDescriptorGetTypeID::onceToken, &__block_literal_global_22);
  return RIOBuilderOutputDescriptorGetTypeID::typeID;
}

uint64_t RIOBuilderOutputDescriptorCreateWithNameAndOutputIdentifierAndOptionality(__CFString *a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v5;
  std::string *v6;
  unint64_t *p_size;
  uint64_t Instance;
  unint64_t v9;
  unint64_t v10;
  std::string v12;
  char v13[8];
  std::string __p;
  std::string v15;

  realityio::CFStringCopyUTF8String(a1, (uint64_t)v13);
  if (!v13[0])
    return 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v12 = __p;
  if (a2)
  {
    v5 = a3 == 0;
    v6 = (std::string *)operator new(0x40uLL);
    v6->__r_.__value_.__l.__size_ = 0;
    p_size = &v6->__r_.__value_.__l.__size_;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDE1F60;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v15, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
    else
      v15 = v12;
    realityio::OutputDescriptor::OutputDescriptor(v6 + 1, (__int128 *)&v15, (std::string::size_type *)(a2 + 16), v5);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (RIOBuilderOutputDescriptorGetTypeID::onceToken != -1)
      dispatch_once(&RIOBuilderOutputDescriptorGetTypeID::onceToken, &__block_literal_global_22);
    Instance = _CFRuntimeCreateInstance();
    a2 = Instance;
    if (Instance)
    {
      *(_QWORD *)(Instance + 16) = v6 + 1;
      *(_QWORD *)(Instance + 24) = v6;
      do
        v9 = __ldxr(p_size);
      while (__stxr(v9 + 1, p_size));
    }
    do
      v10 = __ldaxr(p_size);
    while (__stlxr(v10 - 1, p_size));
    if (!v10)
    {
      (*(void (**)(std::string *))(v6->__r_.__value_.__r.__words[0] + 16))(v6);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
    }
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v13[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a2;
}

void sub_2300E0840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count *v27;
  int v28;
  void *v30;

  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v30);
  if (a16 < 0)
    operator delete(__p);
  if (v28 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderOutputDescriptorCopyOutputName(uint64_t a1)
{
  const char *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  CFStringRef v5;
  unint64_t *v6;
  unint64_t v7;

  v1 = *(const char **)(a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  if (v1[23] < 0)
    v1 = *(const char **)v1;
  v5 = CFStringCreateWithCString(0, v1, 0x8000100u);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v5;
}

void sub_2300E0948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderOutputDescriptorCopyOutputIdentifier(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(v1 + 24));
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v5;
}

void sub_2300E09E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL RIOBuilderOutputDescriptorCopyOptionality(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  unint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    v5 = *(_DWORD *)(v1 + 32);
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  else
  {
    v5 = *(_DWORD *)(v1 + 32);
  }
  return v5 != 1;
}

uint64_t _RIOBuilderOutputDescriptorCFFinalize(const void *a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
}

BOOL _RIOBuilderOutputDescriptorCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderOutputDescriptorCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderOutputDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderOutputDescriptor %p>"), a1);
}

CFStringRef _RIOBuilderOutputDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderOutputDescriptor %p>"), a1);
}

uint64_t RIOPxrUsdStageGetTypeID()
{
  if (RIOPxrUsdStageGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdStageGetTypeID::onceToken, &__block_literal_global_23);
  return RIOPxrUsdStageGetTypeID::typeID;
}

uint64_t RIOPxrUsdStageCreate(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v2;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  uint64_t Identifier;
  int v5;
  const char *v6;
  realityio::USDDiagnostics *v7;
  realityio::USDDiagnostics *v8;
  const char *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  realityio::USDDiagnostics *v18;
  __n128 v20;
  realityio::USDDiagnostics *v21;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v2);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v20);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v3);
  v5 = *(char *)(Identifier + 23);
  v6 = *(const char **)Identifier;
  v7 = (realityio::USDDiagnostics *)operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (const char *)Identifier;
  else
    v9 = v6;
  realityio::USDDiagnostics::USDDiagnostics(v7, v9);
  v10 = v20.n128_u64[1];
  if (v20.n128_u64[1])
  {
    v11 = (unsigned int *)(v20.n128_u64[1] + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  realityio::USDDiagnostics::Add(v8);
  v14 = *a1;
  *a1 = 0;
  v20 = (__n128)(unint64_t)v14;
  v21 = v8;
  v15 = RIOPxrUsdStageCreate<realityio::RIOPxrUsdStageData>(&v20);
  v17 = v16;
  v18 = v21;
  v21 = 0;
  if (v18)
    (*(void (**)(realityio::USDDiagnostics *, __n128))(*(_QWORD *)v18 + 8))(v18, v15);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&v20.n128_u64[1]);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&v20);
  return v17;
}

void sub_2300E0C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::RIOPxrUsdStageData::~RIOPxrUsdStageData((realityio::RIOPxrUsdStageData *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreateWithFilePath(char *a1)
{
  return RIOPxrUsdStageCreateWithFilePathWithErrorReporting(a1, 0);
}

uint64_t RIOPxrUsdStageCreateWithFilePathWithErrorReporting(char *a1, id *a2)
{
  realityio::USDDiagnostics *v4;
  unsigned int *v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  realityio::USDDiagnostics *v9;
  unsigned int *v11;
  __n128 __p;
  realityio::USDDiagnostics *v13;
  _BYTE v14[16];

  realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v14, 2072, (uint64_t)a1);
  __p.n128_u64[1] = 0;
  v13 = 0;
  __p.n128_u64[0] = (unint64_t)&__p.n128_u64[1];
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.n128_u64[1]);
  v4 = (realityio::USDDiagnostics *)operator new();
  realityio::USDDiagnostics::USDDiagnostics(v4, a1);
  realityio::USDDiagnostics::Add(v4);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  if (SHIBYTE(v13) < 0)
    operator delete((void *)__p.n128_u64[0]);
  v5 = v11;
  if (!v11)
  {
    v8 = 0;
    if (!a2)
      goto LABEL_11;
    goto LABEL_9;
  }
  v11 = 0;
  __p = (__n128)(unint64_t)v5;
  v13 = v4;
  v6 = RIOPxrUsdStageCreate<realityio::RIOPxrUsdStageData>(&__p);
  v8 = v7;
  v9 = v13;
  v13 = 0;
  if (v9)
    (*(void (**)(realityio::USDDiagnostics *, __n128))(*(_QWORD *)v9 + 8))(v9, v6);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&__p.n128_u64[1]);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&__p);
  v4 = 0;
  if (a2)
  {
LABEL_9:
    if (!v8)
      *a2 = realityio::USDDiagnostics::GetError((id *)v4);
  }
LABEL_11:
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v11);
  if (v4)
    (*(void (**)(realityio::USDDiagnostics *))(*(_QWORD *)v4 + 8))(v4);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v14);
  return v8;
}

void sub_2300E0E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&a9);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a16);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreateWithFileURL(void *a1)
{
  return RIOPxrUsdStageCreateWithFileURLWithErrorReporting(a1, 0);
}

uint64_t RIOPxrUsdStageCreateWithFileURLWithErrorReporting(void *a1, id *a2)
{
  id v3;
  realityio *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = a1;
  v4 = (realityio *)objc_msgSend(v3, "isFileURL");
  if ((v4 & 1) != 0)
  {
    v5 = RIOPxrUsdStageCreateWithFilePathWithErrorReporting((char *)objc_msgSend(objc_retainAutorelease(v3), "fileSystemRepresentation"), a2);
  }
  else
  {
    v6 = *(NSObject **)(realityio::logObjects(v4) + 32);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_22FF26000, v6, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports loading content from file URLs", v8, 2u);
    }
    v5 = 0;
  }

  return v5;
}

void sub_2300E0FD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreateInMemory()
{
  uint64_t v0;
  unsigned int *v2;
  char **v3;
  char *v4[2];

  v4[0] = 0;
  v4[1] = 0;
  v3 = v4;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v3, v4[0]);
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory();
  v0 = RIOPxrUsdStageCreate((uint64_t *)&v2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v2);
  return v0;
}

void sub_2300E104C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreateWithInMemoryDataBufferWithErrorReporting(const char *a1, CFDataRef theData, id *a3)
{
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  realityio *v9;
  NSObject *v10;
  _BOOL8 v11;
  void **v12;
  int v13;
  void **v14;
  realityio::USDDiagnostics *v15;
  realityio::USDDiagnostics *v16;
  void **v17;
  unsigned int **v18;
  unsigned int *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  realityio::USDDiagnostics *v23;
  NSObject *v24;
  __n128 v26;
  realityio::USDDiagnostics *v27;
  unsigned int *v28;
  void *v29[2];
  char v30;
  void *__p;
  char *v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint8_t buf[4];
  void **v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  CFDataGetLength(theData);
  v32 = 0;
  v33 = 0;
  __p = &v32;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v32);
  CFDataGetBytePtr(theData);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ArMemoryResolver");
  pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver();
  if (SHIBYTE(v33) < 0)
    operator delete(__p);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  v6 = strlen(a1);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"?address=", 9);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"&size=", 6);
  std::ostream::operator<<();
  v9 = (realityio *)std::stringbuf::str();
  v10 = *(NSObject **)(realityio::logObjects(v9) + 32);
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (v11)
  {
    v12 = v29;
    if (v30 < 0)
      v12 = (void **)v29[0];
    *(_DWORD *)buf = 136315138;
    v38 = v12;
    _os_log_impl(&dword_22FF26000, v10, OS_LOG_TYPE_INFO, "assetPath: %s", buf, 0xCu);
  }
  pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v11);
  pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset();
  v13 = v30;
  v14 = (void **)v29[0];
  v15 = (realityio::USDDiagnostics *)operator new();
  v16 = v15;
  if (v13 >= 0)
    v17 = v29;
  else
    v17 = v14;
  realityio::USDDiagnostics::USDDiagnostics(v15, (const char *)v17);
  realityio::USDDiagnostics::Add(v16);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  v28 = (unsigned int *)v26.n128_u64[0];
  v26.n128_u64[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)&v28, 0);
  v18 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&v26);
  v19 = v28;
  if (v28)
  {
    v28 = 0;
    v26.n128_u64[0] = (unint64_t)v19;
    v26.n128_u64[1] = (unint64_t)theData;
    if (theData)
      CFRetain(theData);
    v27 = v16;
    v20 = RIOPxrUsdStageCreate<realityio::RIOPxrUsdStageData>(&v26);
    v22 = v21;
    v23 = v27;
    v27 = 0;
    if (v23)
      (*(void (**)(realityio::USDDiagnostics *, __n128))(*(_QWORD *)v23 + 8))(v23, v20);
    realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)&v26.n128_u64[1]);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&v26);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v28);
  }
  else
  {
    if (a3)
    {
      *a3 = realityio::USDDiagnostics::GetError((id *)v16);
    }
    else
    {
      v24 = *(NSObject **)(realityio::logObjects((realityio *)v18) + 32);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v26.n128_u16[0] = 0;
        _os_log_error_impl(&dword_22FF26000, v24, OS_LOG_TYPE_ERROR, "Unable to create stage from in-memory buffer.", (uint8_t *)&v26, 2u);
      }
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v28);
    (*(void (**)(realityio::USDDiagnostics *))(*(_QWORD *)v16 + 8))(v16);
    v22 = 0;
  }
  v26.n128_u64[0] = (unint64_t)buf;
  std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (v30 < 0)
    operator delete(v29[0]);
  __p = (void *)*MEMORY[0x24BEDB800];
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
  v32 = (char *)(MEMORY[0x24BEDB848] + 16);
  if (v35 < 0)
    operator delete(v34);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2348B4DA4](&v36);
  return v22;
}

void sub_2300E13EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a12);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  a9 = v25 - 96;
  std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreateWithInMemoryBuffer(const char *a1)
{
  size_t v2;
  _QWORD *v3;
  _QWORD *v4;
  realityio *v5;
  NSObject *v6;
  _BOOL8 v7;
  void *v8;
  unsigned int *v9;
  unsigned int **v10;
  uint64_t v11;
  NSObject *v12;
  unsigned int **v13;
  unsigned int *v15;
  uint8_t v16[8];
  void *v17;
  char v18;
  void *__p;
  char *v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  unsigned int *v25;
  uint8_t buf[4];
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  __p = &v20;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v20);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ArMemoryResolver");
  pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver();
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
  v2 = strlen(a1);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"?address=", 9);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"&size=", 6);
  std::ostream::operator<<();
  v5 = (realityio *)std::stringbuf::str();
  v6 = *(NSObject **)(realityio::logObjects(v5) + 32);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v7)
  {
    v8 = &v17;
    if (v18 < 0)
      v8 = v17;
    *(_DWORD *)buf = 136315138;
    v27 = v8;
    _os_log_impl(&dword_22FF26000, v6, OS_LOG_TYPE_INFO, "assetPath: %s", buf, 0xCu);
  }
  pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v7);
  pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset();
  v25 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  v9 = v25;
  v25 = *(unsigned int **)v16;
  *(_QWORD *)v16 = 0;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)&v25, v9);
  v10 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)v16);
  if (v25)
  {
    v15 = v25;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v15);
    v11 = RIOPxrUsdStageCreate((uint64_t *)&v15);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v15);
  }
  else
  {
    v12 = *(NSObject **)(realityio::logObjects((realityio *)v10) + 32);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v16 = 0;
      _os_log_error_impl(&dword_22FF26000, v12, OS_LOG_TYPE_ERROR, "Unable to create stage from in-memory buffer.", v16, 2u);
    }
    v11 = 0;
  }
  v13 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v25);
  v25 = (unsigned int *)buf;
  std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped>>::__destroy_vector::operator()[abi:ne180100]((void ***)v13);
  if (v18 < 0)
    operator delete(v17);
  __p = (void *)*MEMORY[0x24BEDB800];
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
  v20 = (char *)(MEMORY[0x24BEDB848] + 16);
  if (v23 < 0)
    operator delete(v22);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2348B4DA4](&v24);
  return v11;
}

void sub_2300E17A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  unsigned int **v28;

  v28 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)(v26 - 88));
  *(_QWORD *)(v26 - 88) = v26 - 80;
  std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped>>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
  if (a20 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreateWithString(char *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  void *__p;
  char *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  __p = &v14;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v14);
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory();
  v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v2);
  pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v10);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ImportFromString();
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  v3 = v11;
  if (v11)
  {
    v4 = (unsigned int *)(v11 + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v9 = v12;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v9);
  v7 = RIOPxrUsdStageCreate((uint64_t *)&v9);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v9);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v12);
  return v7;
}

void sub_2300E193C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12, unsigned int *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a10);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a13);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageIsSupportedFile(char *a1)
{
  uint64_t IsSupportedFile;
  void *__p;
  char *v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  __p = &v5;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v5);
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  IsSupportedFile = pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile();
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  return IsSupportedFile;
}

void sub_2300E1A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageCopyPseudoRootPrim(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v1);
  v10 = 1;
  v2 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v6, &v10);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  return v2;
}

void sub_2300E1B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageHasPrimAtPrimPath(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  uint64_t IsValid;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  return IsValid;
}

void sub_2300E1BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreateOverridePrim(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  v6 = a1[2];
  v5 = a1 + 2;
  if (v6)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    v9 = EditTarget[1];
    v24 = *EditTarget;
    v25 = v9;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v24);
  v14 = v13;
  v15 = v25;
  if (v25)
  {
    v16 = (unsigned int *)(v25 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
  }
  std::recursive_mutex::lock(v14);
  v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  v28 = 1;
  v20 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v24, &v28);
  if ((v27 & 7) != 0)
  {
    v21 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
  if (v25)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
  std::recursive_mutex::unlock(v14);
  return v20;
}

void sub_2300E1CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreatePrimIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  realityio::UsdLayerMutexTracker *IsValid;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__ *v11;
  void *v12;
  pxrInternal__aapl__pxrReserved__::UsdStage *v13;
  uint64_t *EditTarget;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  __n128 v19;
  std::recursive_mutex *v20;
  std::recursive_mutex *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::UsdStage *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[8];
  pxrInternal__aapl__pxrReserved__ *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  v5 = (uint64_t *)(a1 + 16);
  v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, v7);
  IsValid = (realityio::UsdLayerMutexTracker *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v36);
  if (!(_DWORD)IsValid)
    goto LABEL_7;
  v10 = *(_QWORD *)(a3 + 16);
  if (!v10)
    goto LABEL_12;
  v11 = v37;
  if (!v37 || (*((_BYTE *)v37 + 57) & 8) != 0)
  {
    IsValid = (realityio::UsdLayerMutexTracker *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v37, v9);
    v10 = *(_QWORD *)(a3 + 16);
  }
  if ((**((_QWORD **)v11 + 3) & 0xFFFFFFFFFFFFFFF8) == (v10 & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_12:
    LODWORD(v32) = 1;
    v18 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v36, (int *)&v32);
  }
  else
  {
LABEL_7:
    v12 = realityio::UsdLayerMutexTracker::instance(IsValid);
    if (*v5)
    {
      v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v13);
      v15 = EditTarget[1];
      v32 = *EditTarget;
      v33 = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
    }
    else
    {
      v32 = 0;
      v33 = 0;
    }
    v19.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v12, &v32);
    v21 = v20;
    v22 = v33;
    if (v33)
    {
      v23 = (unsigned int *)(v33 + 8);
      do
      {
        v24 = __ldxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v22 + 8))(v22, v19);
    }
    std::recursive_mutex::lock(v21);
    v26 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v26, v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 16));
    v40 = 1;
    v18 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v32, &v40);
    if ((v35 & 7) != 0)
    {
      v27 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stlxr(v28 - 2, v27));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
    if (v33)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v33);
    std::recursive_mutex::unlock(v21);
  }
  if ((v39 & 7) != 0)
  {
    v29 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
  if (v37)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v37);
  return v18;
}

void sub_2300E1F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  std::recursive_mutex::unlock(v2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCreateClassPrimIfNeeded(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  v6 = a1[2];
  v5 = a1 + 2;
  if (v6)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    v9 = EditTarget[1];
    v24 = *EditTarget;
    v25 = v9;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v24);
  v14 = v13;
  v15 = v25;
  if (v25)
  {
    v16 = (unsigned int *)(v25 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
  }
  std::recursive_mutex::lock(v14);
  v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::CreateClassPrim(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  v28 = 1;
  v20 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v24, &v28);
  if ((v27 & 7) != 0)
  {
    v21 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
  if (v25)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
  std::recursive_mutex::unlock(v14);
  return v20;
}

void sub_2300E20E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void RIOPxrUsdStageSetDefaultPrim(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 && a2)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      v9 = EditTarget[1];
      v20 = *EditTarget;
      v21 = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v20);
    v14 = v13;
    v15 = v21;
    if (v21)
    {
      v16 = (unsigned int *)(v21 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
    }
    std::recursive_mutex::lock(v14);
    if (*v5)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim(v19, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(a2 + 24));
    }
    std::recursive_mutex::unlock(v14);
  }
}

void sub_2300E2218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageCopyDefaultPrim(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetDefaultPrim(v1);
  v10 = 1;
  v2 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v6, &v10);
  if ((v9 & 7) != 0)
  {
    v3 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  return v2;
}

void sub_2300E22F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageClearDefaultPrim(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v1;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  return pxrInternal__aapl__pxrReserved__::UsdStage::ClearDefaultPrim(v1);
}

__CFArray *RIOPxrUsdStageCopyUsedLayers(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v1;
  __CFArray *Mutable;
  uint64_t *i;
  const void *v4;
  _QWORD v6[3];
  void **v7;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(v1);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  for (i = (uint64_t *)v6[0]; i != (uint64_t *)v6[1]; i += 2)
  {
    v4 = (const void *)RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(i);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  v7 = (void **)v6;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v7);
  return Mutable;
}

void sub_2300E23CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCopyRootLayer(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v1);
  v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(&v8);
  v3 = v9;
  if (v9)
  {
    v4 = (unsigned int *)(v9 + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return v2;
}

void sub_2300E245C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageCopySessionLayer(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v1);
  v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(&v8);
  v3 = v9;
  if (v9)
  {
    v4 = (unsigned int *)(v9 + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return v2;
}

void sub_2300E2504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageRemovePrim(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  uint64_t *EditTarget;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  __n128 v13;
  std::recursive_mutex *v14;
  std::recursive_mutex *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v2 = 0;
  if (a1 && a2)
  {
    v5 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v7 = a1[2];
    v6 = a1 + 2;
    if (v7)
    {
      v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v6);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v8);
      v10 = EditTarget[1];
      v22 = *EditTarget;
      v23 = v10;
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v13.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v5, &v22);
    v15 = v14;
    v16 = v23;
    if (v23)
    {
      v17 = (unsigned int *)(v23 + 8);
      do
      {
        v18 = __ldxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v16 + 8))(v16, v13);
    }
    std::recursive_mutex::lock(v15);
    if (*v6)
    {
      v20 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v6);
      v2 = MEMORY[0x2348B2A70](v20, a2 + 16);
    }
    else
    {
      v2 = 0;
    }
    std::recursive_mutex::unlock(v15);
  }
  return v2;
}

void sub_2300E2630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrUsdStageSetEditTarget(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 && a2)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      v9 = EditTarget[1];
      v20 = *EditTarget;
      v21 = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v20);
    v14 = v13;
    v15 = v21;
    if (v21)
    {
      v16 = (unsigned int *)(v21 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
    }
    std::recursive_mutex::lock(v14);
    if (*v5)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(v19, (const pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a2 + 16));
    }
    std::recursive_mutex::unlock(v14);
  }
}

void sub_2300E2758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageCopyEditTarget(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v1;
  uint64_t EditTarget;
  uint64_t Instance;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (!a1)
    return 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v1);
  if (RIOPxrUsdEditTargetGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdEditTargetGetTypeID::onceToken, &__block_literal_global_26);
  Instance = _CFRuntimeCreateInstance();
  v4 = Instance;
  if (Instance)
  {
    v5 = *(_QWORD *)(EditTarget + 8);
    *(_QWORD *)(Instance + 16) = *(_QWORD *)EditTarget;
    *(_QWORD *)(Instance + 24) = v5;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::_Data((_DWORD *)(Instance + 32), EditTarget + 16);
    *(_OWORD *)(v4 + 72) = *(_OWORD *)(EditTarget + 56);
  }
  return v4;
}

void sub_2300E2864(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 24);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrUsdStageCopyUSDA(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v6;
  CFStringRef v7;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;

  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v1);
  pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v9);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString();
  v2 = v10;
  if (v10)
  {
    v3 = (unsigned int *)(v10 + 8);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  if (v12 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = CFStringCreateWithCString(0, (const char *)v6, 0x8000100u);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_2300E294C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrUsdStageCopyFlattenedUSDA(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v1;
  void **v2;
  CFStringRef v3;
  unsigned int *v5;
  void *__p[2];
  uint64_t v7;

  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(v1);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString();
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v5);
  if (v7 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  v3 = CFStringCreateWithCString(0, (const char *)v2, 0x8000100u);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_2300E2A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RIOPxrUsdStageReload(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t *EditTarget;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  __n128 v10;
  std::recursive_mutex *v11;
  std::recursive_mutex *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdStage *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v3);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
      v7 = EditTarget[1];
      v18 = *EditTarget;
      v19 = v7;
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    v10.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v18);
    v12 = v11;
    v13 = v19;
    if (v19)
    {
      v14 = (unsigned int *)(v19 + 8);
      do
      {
        v15 = __ldxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v13 + 8))(v13, v10);
    }
    std::recursive_mutex::lock(v12);
    if (*v3)
    {
      v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::UsdStage::Reload(v17);
    }
    std::recursive_mutex::unlock(v12);
  }
}

void sub_2300E2B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrUsdStageLoadThenUnload(uint64_t *a1, const __CFSet *a2, const __CFSet *a3)
{
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::UsdStage *v9;
  _QWORD *EditTarget;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  __n128 v14;
  std::recursive_mutex *v15;
  std::recursive_mutex *v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD **v21;
  _QWORD *v22[2];
  _QWORD **v23;
  _QWORD *v24[2];

  if (a1)
  {
    v6 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v8 = a1[2];
    v7 = a1 + 2;
    if (v8)
    {
      v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
      EditTarget = (_QWORD *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v9);
      v11 = (_QWORD *)EditTarget[1];
      v23 = (_QWORD **)*EditTarget;
      v24[0] = v11;
      if (v11)
      {
        v12 = (unsigned int *)(v11 + 1);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
    }
    else
    {
      v23 = 0;
      v24[0] = 0;
    }
    v14.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v6, &v23);
    v16 = v15;
    v17 = v24[0];
    if (v24[0])
    {
      v18 = (unsigned int *)(v24[0] + 1);
      do
      {
        v19 = __ldxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(_QWORD *, __n128))(*v17 + 8))(v17, v14);
    }
    std::recursive_mutex::lock(v16);
    if (*v7)
    {
      v24[0] = 0;
      v24[1] = 0;
      v22[1] = 0;
      v23 = v24;
      v21 = v22;
      v22[0] = 0;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
      pxrInternal__aapl__pxrReserved__::UsdStage::LoadAndUnload();
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v21, v22[0]);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v23, v24[0]);
    }
    std::recursive_mutex::unlock(v16);
  }
}

void sub_2300E2CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::convertSetToSDFPathSet(const __CFSet *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  CFIndex Count;
  void **v7;
  void **v8;
  void **values;
  void **v10;
  uint64_t v11;

  v4 = (_QWORD *)(a2 + 8);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = 0;
  *v4 = 0;
  if (RIOPxrSdfPathGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfPathGetTypeID::onceToken, &__block_literal_global_30);
  v5 = RIOPxrSdfPathGetTypeID::typeID;
  values = 0;
  v10 = 0;
  v11 = 0;
  Count = CFSetGetCount(a1);
  std::vector<void const*>::resize((uint64_t)&values, Count);
  CFSetGetValues(a1, (const void **)values);
  v7 = values;
  v8 = v10;
  if (values != v10)
  {
    do
    {
      if (CFGetTypeID(*v7) == v5)
        std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t **)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*v7 + 16), (_DWORD *)*v7 + 4);
      ++v7;
    }
    while (v7 != v8);
    v7 = values;
  }
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_2300E2E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *RIOPxrUsdStageSave(uint64_t *result)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__::UsdStage *v2;

  if (result)
  {
    v1 = result[2];
    result += 2;
    if (v1)
    {
      v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(result);
      return (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::Save(v2);
    }
  }
  return result;
}

uint64_t RIOPxrUsdStageExportWithFileURL(uint64_t a1, void *a2, uint64_t a3, const __CFDictionary *a4)
{
  id v6;
  realityio *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *__p;
  char v14;
  _QWORD **context;
  _QWORD *v16[3];

  v6 = a2;
  v7 = (realityio *)objc_msgSend(v6, "isFileURL");
  if ((v7 & 1) == 0)
  {
    v11 = *(NSObject **)(realityio::logObjects(v7) + 32);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(context) = 0;
      _os_log_error_impl(&dword_22FF26000, v11, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports writing content to file URLs", (uint8_t *)&context, 2u);
    }
    goto LABEL_11;
  }
  if (!a1 || (v9 = *(_QWORD *)(a1 + 16), v8 = (uint64_t *)(a1 + 16), !v9))
  {
LABEL_11:
    v10 = 0;
    goto LABEL_12;
  }
  v16[0] = 0;
  v16[1] = 0;
  context = v16;
  if (a4)
    CFDictionaryApplyFunction(a4, (CFDictionaryApplierFunction)realityio::updateStringMapFromCFDictionary, &context);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v8);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(objc_retainAutorelease(v6), "fileSystemRepresentation"));
  v10 = pxrInternal__aapl__pxrReserved__::UsdStage::Export();
  if (v14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&context, v16[0]);
LABEL_12:

  return v10;
}

void sub_2300E2F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, _QWORD *a17)
{
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a16, a17);

  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCopyFlattened(realityio::UsdLayerMutexTracker *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t EditTarget;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  __n128 v10;
  std::recursive_mutex *v11;
  std::recursive_mutex *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdStage *v17;
  unsigned int *v19;
  uint64_t v20;

  v1 = (uint64_t)a1;
  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance(a1);
    v4 = *(_QWORD *)(v1 + 16);
    v3 = (uint64_t *)(v1 + 16);
    if (v4)
    {
      v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v3);
      EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
      v7 = *(_QWORD *)(EditTarget + 8);
      v19 = *(unsigned int **)EditTarget;
      v20 = v7;
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v10.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v19);
    v12 = v11;
    v13 = v20;
    if (v20)
    {
      v14 = (unsigned int *)(v20 + 8);
      do
      {
        v15 = __ldxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v13 + 8))(v13, v10);
    }
    std::recursive_mutex::lock(v12);
    if (*v3)
    {
      v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(v17);
      v1 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(&v19);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v19);
    }
    else
    {
      v1 = 0;
    }
    std::recursive_mutex::unlock(v12);
  }
  return v1;
}

void sub_2300E30AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  std::recursive_mutex *v9;

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a9);
  std::recursive_mutex::unlock(v9);
  _Unwind_Resume(a1);
}

double RIOPxrUsdStageGetMetersPerUnit(uint64_t a1)
{
  double v1;
  double v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;

  v1 = 0.01;
  if (a1)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v8, (uint64_t *)(a1 + 16));
      pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
      v1 = v2;
      v3 = v9;
      if (v9)
      {
        v4 = (unsigned int *)(v9 + 8);
        do
        {
          v5 = __ldxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  return v1;
}

void sub_2300E318C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrUsdStageSetMetersPerUnit(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t *EditTarget;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  __n128 v10;
  std::recursive_mutex *v11;
  std::recursive_mutex *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;

  if (a1)
  {
    v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v4 = a1[2];
    v3 = a1 + 2;
    if (v4)
    {
      v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v3);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
      v7 = EditTarget[1];
      v21 = *EditTarget;
      v22 = v7;
      if (v7)
      {
        v8 = (unsigned int *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
    }
    else
    {
      v21 = 0;
      v22 = 0;
    }
    v10.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v21);
    v12 = v11;
    v13 = v22;
    if (v22)
    {
      v14 = (unsigned int *)(v22 + 8);
      do
      {
        v15 = __ldxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v13 + 8))(v13, v10);
    }
    std::recursive_mutex::lock(v12);
    if (*v3)
    {
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v21, v3);
      pxrInternal__aapl__pxrReserved__::UsdGeomSetStageMetersPerUnit();
      v17 = v22;
      if (v22)
      {
        v18 = (unsigned int *)(v22 + 8);
        do
        {
          v19 = __ldxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    std::recursive_mutex::unlock(v12);
  }
}

void sub_2300E32D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  std::recursive_mutex *v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (a10)
  {
    v12 = a10 + 2;
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

BOOL RIOPxrUsdStageEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t UniqueIdentifier;
  uint64_t v5;

  v3 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 16));
  UniqueIdentifier = pxrInternal__aapl__pxrReserved__::TfWeakBase::GetUniqueIdentifier((pxrInternal__aapl__pxrReserved__::TfWeakBase *)(v3 + 16));
  v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a2 + 16));
  return UniqueIdentifier == pxrInternal__aapl__pxrReserved__::TfWeakBase::GetUniqueIdentifier((pxrInternal__aapl__pxrReserved__::TfWeakBase *)(v5 + 16));
}

id RIOPxrUsdStageGetUsdError(uint64_t a1)
{
  id *v1;

  if (a1 && (v1 = *(id **)(a1 + 32)) != 0)
    return realityio::USDDiagnostics::GetError(v1);
  else
    return 0;
}

id RIOPxrUsdStageGetUsdErrors(uint64_t a1)
{
  id *v1;

  if (a1 && (v1 = *(id **)(a1 + 32)) != 0)
    return realityio::USDDiagnostics::GetErrors(v1);
  else
    return 0;
}

void RIOPxrUsdStageClearUsdErrors(uint64_t a1)
{
  id *v1;

  if (a1)
  {
    v1 = *(id **)(a1 + 32);
    if (v1)
      realityio::USDDiagnostics::ClearErrors(v1);
  }
}

void RIOPxrUsdStageGatherDiagnostics(uint64_t a1, int a2, void *a3)
{
  void (**v5)(id, _QWORD);
  __int128 **v6;
  std::string::size_type i;
  std::string::size_type size;
  std::string::size_type v9;
  std::string v10;
  std::string *v11;

  v5 = a3;
  if (a1)
  {
    v6 = *(__int128 ***)(a1 + 32);
    if (v6)
    {
      if (a2)
        realityio::USDDiagnostics::GetWarnings(v6, &v10);
      else
        realityio::USDDiagnostics::GetStatusMessages(v6, &v10);
      size = v10.__r_.__value_.__l.__size_;
      for (i = v10.__r_.__value_.__r.__words[0]; i != size; i += 24)
      {
        v9 = i;
        if (*(char *)(i + 23) < 0)
          v9 = *(_QWORD *)i;
        v5[2](v5, v9);
      }
      v11 = &v10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    }
  }

}

void sub_2300E3480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void RIOPxrUsdStageClearDiagnostics(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v6;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      if (a2)
      {
        std::mutex::lock((std::mutex *)(v4 + 120));
        std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(v4 + 16));
        std::mutex::unlock((std::mutex *)(v4 + 120));
      }
      if (a3)
      {
        v6 = *(_QWORD *)(a1 + 32);
        std::mutex::lock((std::mutex *)(v6 + 184));
        std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(v6 + 40));
        std::mutex::unlock((std::mutex *)(v6 + 184));
      }
    }
  }
}

void RIOPxrUsdStageSetDiagnosticChangeNotification(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      v8[0] = &off_24FDF5798;
      v8[1] = MEMORY[0x2348B5260](v3);
      v9 = v8;
      std::function<void ()(void)>::operator=((_QWORD *)(v5 + 88), (uint64_t)v8);
      v6 = v9;
      if (v9 == v8)
      {
        v7 = 4;
        v6 = v8;
        goto LABEL_7;
      }
      if (v9)
      {
        v7 = 5;
LABEL_7:
        (*(void (**)(void))(*v6 + 8 * v7))();
      }
    }
  }

}

void sub_2300E35F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCopyUpAxis(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  pxrInternal__aapl__pxrReserved__::UsdGeomGetFallbackUpAxis((pxrInternal__aapl__pxrReserved__ *)a1);
  if (a1)
  {
    v3 = a1[2];
    v2 = a1 + 2;
    if (v3)
    {
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v14, v2);
      pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis();
      if ((v17 & 7) != 0)
      {
        v4 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v5 = __ldxr(v4);
        while (__stlxr(v5 - 2, v4));
      }
      v6 = v15;
      v7 = v16;
      v16 = 0;
      v17 = v7;
      if (v15)
      {
        v8 = (unsigned int *)(v15 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
  }
  result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v17);
  if ((v17 & 7) != 0)
  {
    v12 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return result;
}

void sub_2300E3708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;

  if (a10)
  {
    v13 = a10 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  if ((a12 & 7) != 0)
  {
    v16 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageSetUpAxis(uint64_t *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t *EditTarget;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  __n128 v11;
  std::recursive_mutex *v12;
  std::recursive_mutex *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;

  if (!a1)
    return 0;
  v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  v4 = a1[2];
  v3 = a1 + 2;
  if (v4)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v3);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    v7 = EditTarget[1];
    v23 = *EditTarget;
    v24 = v7;
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  v11.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v23);
  v13 = v12;
  v14 = v24;
  if (v24)
  {
    v15 = (unsigned int *)(v24 + 8);
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v14 + 8))(v14, v11);
  }
  std::recursive_mutex::lock(v13);
  if (*v3)
  {
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v23, v3);
    v10 = pxrInternal__aapl__pxrReserved__::UsdGeomSetStageUpAxis();
    v18 = v24;
    if (v24)
    {
      v19 = (unsigned int *)(v24 + 8);
      do
      {
        v20 = __ldxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  else
  {
    v10 = 0;
  }
  std::recursive_mutex::unlock(v13);
  return v10;
}

void sub_2300E3898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  std::recursive_mutex *v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (a10)
  {
    v12 = a10 + 2;
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdStageCopyColorConfiguration(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  char *v5;
  uint64_t v6;
  void *v8[2];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)__p);
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v2 = (uint64_t *)(a1 + 16);
    if (v3)
    {
      v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v2);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetColorConfiguration(v4);
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = *(_OWORD *)v8;
      v13 = v9;
      if (SHIBYTE(v15) < 0)
        operator delete((void *)v14);
      v14 = v10;
      v15 = v11;
    }
  }
  if (v13 >= 0)
    v5 = (char *)__p;
  else
    v5 = (char *)__p[0];
  v6 = RIOPxrSdfAssetPathCreateFromCString(v5);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)v14);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_2300E3A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)va);
  _Unwind_Resume(a1);
}

void RIOPxrUsdStageSetColorConfiguration(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      v9 = EditTarget[1];
      v20 = *EditTarget;
      v21 = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v20);
    v14 = v13;
    v15 = v21;
    if (v21)
    {
      v16 = (unsigned int *)(v21 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
    }
    std::recursive_mutex::lock(v14);
    if (*v5)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetColorConfiguration(v19, (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)(a2 + 16));
    }
    std::recursive_mutex::unlock(v14);
  }
}

void sub_2300E3B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageCopyColorManagementSystem(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v7 = 0;
  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v1 = (uint64_t *)(a1 + 16);
    if (v2)
    {
      v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetColorManagementSystem(v3);
    }
  }
  result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v7);
  if ((v7 & 7) != 0)
  {
    v5 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return result;
}

void RIOPxrUsdStageSetColorManagementSystem(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      v9 = EditTarget[1];
      v20 = *EditTarget;
      v21 = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v20);
    v14 = v13;
    v15 = v21;
    if (v21)
    {
      v16 = (unsigned int *)(v21 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
    }
    std::recursive_mutex::lock(v14);
    if (*v5)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetColorManagementSystem(v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    }
    std::recursive_mutex::unlock(v14);
  }
}

void sub_2300E3CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

double RIOPxrUsdStageGetStartTimeCode(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  double result;

  if (!a1)
    return 0.0;
  v2 = *(_QWORD *)(a1 + 16);
  v1 = (uint64_t *)(a1 + 16);
  if (!v2)
    return 0.0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v3);
  return result;
}

void RIOPxrUsdStageSetStartTimeCode(uint64_t *a1, double a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      v9 = EditTarget[1];
      v20 = *EditTarget;
      v21 = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v20);
    v14 = v13;
    v15 = v21;
    if (v21)
    {
      v16 = (unsigned int *)(v21 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
    }
    std::recursive_mutex::lock(v14);
    if (*v5)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetStartTimeCode(v19, a2);
    }
    std::recursive_mutex::unlock(v14);
  }
}

void sub_2300E3E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

double RIOPxrUsdStageGetEndTimeCode(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  double result;

  if (!a1)
    return 0.0;
  v2 = *(_QWORD *)(a1 + 16);
  v1 = (uint64_t *)(a1 + 16);
  if (!v2)
    return 0.0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v3);
  return result;
}

void RIOPxrUsdStageSetEndTimeCode(uint64_t *a1, double a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      v9 = EditTarget[1];
      v20 = *EditTarget;
      v21 = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v20);
    v14 = v13;
    v15 = v21;
    if (v21)
    {
      v16 = (unsigned int *)(v21 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
    }
    std::recursive_mutex::lock(v14);
    if (*v5)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetEndTimeCode(v19, a2);
    }
    std::recursive_mutex::unlock(v14);
  }
}

void sub_2300E3F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageHasAuthoredTimeCodeRange(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  v1 = (uint64_t *)(a1 + 16);
  if (!v2)
    return 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);
  return pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v3);
}

double RIOPxrUsdStageGetTimeCodesPerSecond(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  double result;

  if (!a1)
    return 0.0;
  v2 = *(_QWORD *)(a1 + 16);
  v1 = (uint64_t *)(a1 + 16);
  if (!v2)
    return 0.0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v3);
  return result;
}

void RIOPxrUsdStageSetTimeCodesPerSecond(uint64_t *a1, double a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      v9 = EditTarget[1];
      v20 = *EditTarget;
      v21 = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v20);
    v14 = v13;
    v15 = v21;
    if (v21)
    {
      v16 = (unsigned int *)(v21 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
    }
    std::recursive_mutex::lock(v14);
    if (*v5)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetTimeCodesPerSecond(v19, a2);
    }
    std::recursive_mutex::unlock(v14);
  }
}

void sub_2300E40D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

double RIOPxrUsdStageGetFramesPerSecond(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  double result;

  if (!a1)
    return 0.0;
  v2 = *(_QWORD *)(a1 + 16);
  v1 = (uint64_t *)(a1 + 16);
  if (!v2)
    return 0.0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetFramesPerSecond(v3);
  return result;
}

void RIOPxrUsdStageSetFramesPerSecond(uint64_t *a1, double a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t *EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1)
  {
    v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v6 = a1[2];
    v5 = a1 + 2;
    if (v6)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
      v9 = EditTarget[1];
      v20 = *EditTarget;
      v21 = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v20);
    v14 = v13;
    v15 = v21;
    if (v21)
    {
      v16 = (unsigned int *)(v21 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
    }
    std::recursive_mutex::lock(v14);
    if (*v5)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetFramesPerSecond(v19, a2);
    }
    std::recursive_mutex::unlock(v14);
  }
}

void sub_2300E4224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdStageGetIncludeUnusedMaterials(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::VtValue *ValueAtPath;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = (uint64_t *)(a1 + 16);
  if (!v2)
    return 0;
  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v3);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v16);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v4);
  v5 = v17;
  if (v17)
  {
    v6 = (unsigned int *)(v17 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v16, "RealityKit:includeUnusedMaterials");
  if ((v16 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  v10 = (uint64_t)ValueAtPath;
  if ((v16 & 7) != 0)
  {
    v12 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if (ValueAtPath)
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(ValueAtPath))
    {
      v14 = *(_QWORD *)(v10 + 8);
      if ((v14 & 4) != 0)
        v10 = (*(uint64_t (**)(uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v10);
      v10 = *(_BYTE *)v10 != 0;
    }
    else
    {
      v10 = 0;
    }
  }
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v18, 0);
  return v10;
}

void sub_2300E4398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void RIOPxrUsdStageSetIncludeUnusedMaterials(uint64_t *a1, char a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t EditTarget;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __n128 v12;
  std::recursive_mutex *v13;
  std::recursive_mutex *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdStage *v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  void *__p;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35[8];
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  v6 = a1[2];
  v5 = a1 + 2;
  if (v6)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
    EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    v9 = *(_QWORD *)(EditTarget + 8);
    __p = *(void **)EditTarget;
    v32 = v9;
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    __p = 0;
    v32 = 0;
  }
  v12.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &__p);
  v14 = v13;
  v15 = v32;
  if (v32)
  {
    v16 = (unsigned int *)(v32 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
  }
  std::recursive_mutex::lock(v14);
  v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v19);
  v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v20);
  v21 = v32;
  if (v32)
  {
    v22 = (unsigned int *)(v32 + 8);
    do
    {
      v23 = __ldxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  v36 = &unk_24FDE59C3;
  v35[0] = a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "RealityKit:includeUnusedMaterials");
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  if (v33 < 0)
    operator delete(__p);
  v25 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v25);
  v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(v26, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v34);
  v27 = v32;
  if (v32)
  {
    v28 = (unsigned int *)(v32 + 8);
    do
    {
      v29 = __ldxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v35);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v34, 0);
  std::recursive_mutex::unlock(v14);
}

void sub_2300E45F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, __int16 a17, char a18, char a19)
{
  std::recursive_mutex *v19;

  if (a15 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a17);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a16, 0);
  std::recursive_mutex::unlock(v19);
  _Unwind_Resume(a1);
}

unsigned int **_RIOPxrUsdStageCFFinalize(const void *a1)
{
  uint64_t v2;

  v2 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)a1 + 3);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)a1 + 2);
}

BOOL _RIOPxrUsdStageCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a2[2] == a1[2];
}

unint64_t _RIOPxrUsdStageCFHash(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * a1[2]);
}

CFStringRef _RIOPxrUsdStageCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdStage %p>"), a1);
}

CFStringRef _RIOPxrUsdStageCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdStage %p>"), a1);
}

void std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::ArResolverContext::_Untyped>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_24FDF5798;
  v2[1] = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24FDF5798;
  result = MEMORY[0x2348B5260](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::destroy(uint64_t a1)
{

}

void std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{

  operator delete(a1);
}

uint64_t std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0,std::allocator<RIOPxrUsdStageSetDiagnosticChangeNotification::$_0>,void ()(void)>::target_type()
{
}

realityio::InstancedEntityBuilder *realityio::InstancedEntityBuilder::InstancedEntityBuilder(realityio::InstancedEntityBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  void **v24[3];
  _QWORD *v25[3];
  __int128 v26;
  _QWORD *v27[3];
  _QWORD *v28[3];
  __int128 v29;
  _QWORD *v30[3];
  uint64_t v31;
  uint64_t v32;
  void ***v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v22, "InstancedEntityBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kInstancedEntityBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54B08);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54B08))
  {
    v15 = operator new();
    v16 = operator new();
    memset(v28, 0, sizeof(v28));
    v17 = operator new();
    memset(v25, 0, sizeof(v25));
    memset(v24, 0, sizeof(v24));
    realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor(v17, v25, v24);
    std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitiveDirtyPrimDescriptor,void>(&v26, v17);
    v38 = v26;
    v26 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v27, &v38, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v28, v27);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v29, v16);
    v39 = v29;
    v29 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v30, &v39, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v30);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v31, v15);
    _MergedGlobals_35 = v31;
    unk_255E54B00 = v32;
    v31 = 0;
    v32 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v31);
    v33 = (void ***)v30;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v29);
    v33 = (void ***)v27;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v26);
    v33 = v24;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    v24[0] = (void **)v25;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v24);
    v27[0] = v28;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
    __cxa_guard_release(&qword_255E54B08);
  }
  v18 = _MergedGlobals_35;
  v19 = (std::__shared_weak_count *)unk_255E54B00;
  if (unk_255E54B00)
  {
    v5 = (unint64_t *)(unk_255E54B00 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v37 = v36;
  v34[0] = &off_24FDF5910;
  v35 = v34;
  v36[0] = &off_24FDF5890;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v22, (uint64_t)__p, &v18, (uint64_t)v36, (uint64_t)v34);
  v7 = v35;
  if (v35 == v34)
  {
    v8 = 4;
    v7 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
LABEL_10:
  v9 = v37;
  if (v37 == v36)
  {
    v10 = 4;
    v9 = v36;
    goto LABEL_14;
  }
  if (v37)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  *(_QWORD *)this = &off_24FDF5818;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = 0;
  return this;
}

void sub_2300E4E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v38 - 112);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  *(_QWORD *)(v38 - 200) = &a31;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 200));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v38 - 128);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  *(_QWORD *)(v38 - 200) = &a23;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 200));
  a23 = &a26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a31 = &a34;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  MEMORY[0x2348B4E1C](v37, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54B08);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t gatherEntities(uint64_t a1, void **a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t i;
  uint64_t Child;

  v4 = (uint64_t)(a2 + 2);
  v5 = (unint64_t)a2[2];
  v6 = a2[1];
  if ((unint64_t)v6 >= v5)
  {
    v8 = ((char *)v6 - (_BYTE *)*a2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v9 = v5 - (_QWORD)*a2;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v4, v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = a1;
    v7 = v13 + 8;
    v16 = (char *)*a2;
    v15 = (char *)a2[1];
    if (v15 != *a2)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = (char *)*a2;
    }
    *a2 = v13;
    a2[1] = v7;
    a2[2] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v6 = a1;
    v7 = v6 + 1;
  }
  a2[1] = v7;
  result = REEntityGetChildCount();
  if (result)
  {
    v19 = result;
    for (i = 0; i != v19; ++i)
    {
      Child = REEntityGetChild();
      result = gatherEntities(Child, a2);
    }
  }
  return result;
}

pxrInternal__aapl__pxrReserved__ *realityio::InstancedEntityBuilder::run(uint64_t **this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  realityio::EntityBuilder *PrimAtPath;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t EntityAtPath;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  char **v21;
  unint64_t v22;
  uint64_t ComponentCount;
  uint64_t v24;
  uint64_t v25;
  uint64_t Class;
  uint64_t v27;
  unint64_t MaterialCount;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void **v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  pxrInternal__aapl__pxrReserved__ *result;
  uint64_t **v53;
  uint64_t v54;
  char v56;
  _QWORD v57[3];
  char v58[8];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[8];
  uint64_t v64;
  int v65;
  pxrInternal__aapl__pxrReserved__ *v66;
  int v67;
  int v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  char **v74;
  char **v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  void **v80;
  int64x2_t v81;
  uint64_t *v82;
  _QWORD v83[3];

  v83[1] = *MEMORY[0x24BDAC8D0];
  v3 = (realityio::Inputs *)((char *)a2 + 32);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  PrimAtPath = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v4, v3);
  if (!v66 || (v7 = *((_QWORD *)v66 + 7), (v7 & 0x800) != 0))
  {
    PrimAtPath = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v66, v6);
    v7 = *((_QWORD *)v66 + 7);
  }
  if ((v7 & 0x100) != 0)
  {
    v8 = realityio::EntityBuilder::kInputName(PrimAtPath);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v8, (uint64_t)v63);
    if (v63[0])
    {
      v62 = v64;
      if (v64)
      {
        RERetain();
        v9 = (void **)REComponentClassFromName();
        v80 = v9;
        std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)&v80, (uint64_t *)&v80);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v65);
        v10 = *realityio::ImportSessionImpl::getPrototypeEntityRoot(*(realityio::ImportSessionImpl **)(*((_QWORD *)a2 + 5) + 16));
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v58, &v80);
        EntityAtPath = getEntityAtPath(v10, (uint64_t)v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v80);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v80);
        if (EntityAtPath)
        {
          memset(v57, 0, sizeof(v57));
          LODWORD(v80) = v65;
          v81.i64[0] = (uint64_t)v66;
          if (v66)
          {
            v12 = (unint64_t *)((char *)v66 + 48);
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v81.i32[2], &v67);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v81.i32[3], &v68);
          v82 = v69;
          if ((v69 & 7) != 0)
          {
            v14 = (unsigned int *)((unint64_t)v69 & 0xFFFFFFFFFFFFFFF8);
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 2, v14));
            if ((v15 & 1) == 0)
              v82 = (uint64_t *)((unint64_t)v82 & 0xFFFFFFFFFFFFFFF8);
          }
          v77 = 0;
          v78 = 0;
          v79 = 0;
          v74 = &v77;
          LOBYTE(v75) = 0;
          v77 = (char *)operator new(0x20uLL);
          v78 = v77;
          v79 = v77 + 32;
          v78 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::UsdPrim const*,pxrInternal__aapl__pxrReserved__::UsdPrim const*,pxrInternal__aapl__pxrReserved__::UsdPrim*>((uint64_t)&v79, (uint64_t)&v80, (uint64_t)v83, (uint64_t)v77);
          if (!atomic_load(MEMORY[0x24BEE8128]))
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterials();
          v74 = &v77;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if ((v82 & 7) != 0)
          {
            v17 = (unsigned int *)((unint64_t)v82 & 0xFFFFFFFFFFFFFFF8);
            do
              v18 = __ldxr(v17);
            while (__stlxr(v18 - 2, v17));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v81.i64[1]);
          if (v81.i64[0])
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v81.i64[0]);
          v19 = v62;
          v77 = 0;
          v78 = 0;
          v79 = 0;
          v74 = 0;
          v75 = 0;
          v76 = 0;
          gatherEntities(EntityAtPath, (void **)&v77);
          gatherEntities(v19, (void **)&v74);
          v20 = v77;
          v21 = v74;
          if (v78 - v77 == (char *)v75 - (char *)v74)
          {
            if (v78 == v77)
            {
              v20 = v78;
            }
            else
            {
              v22 = 0;
              v53 = this + 35;
              do
              {
                ComponentCount = REEntityGetComponentCount();
                v24 = ComponentCount;
                if (ComponentCount)
                {
                  v25 = 0;
                  v54 = ComponentCount;
                  do
                  {
                    REEntityGetComponentAtIndex();
                    Class = REComponentGetClass();
                    if (Class == REMeshComponentGetComponentType())
                    {
                      v27 = REComponentCopy();
                      REEntityGetComponentByClass();
                      MaterialCount = REMeshComponentGetMaterialCount();
                      v29 = MaterialCount;
                      v71 = 0;
                      v72 = 0;
                      v73 = 0;
                      if (MaterialCount)
                      {
                        if (MaterialCount >> 61)
                          std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
                        v30 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v73, MaterialCount);
                        v71 = v30;
                        v73 = (char *)&v30[v31];
                        bzero(v30, 8 * v29);
                        v32 = 0;
                        v72 = &v30[v29];
                        do
                          v71[v32++] = REMeshComponentGetMaterialAtIndex();
                        while (v29 != v32);
                      }
                      REComponentGetClass();
                      REEntityRemoveComponentByClass();
                      REEntityAddExistingComponent();
                      REMeshComponentRemoveAllMaterials();
                      if (v29)
                      {
                        for (i = 0; i != v29; ++i)
                          REMeshComponentAddMaterial();
                      }
                      v24 = v54;
                      if (v27)
                      {
                        v70 = v27;
                        RERetain();
                        v34 = this;
                        v35 = this[36];
                        v36 = this[37];
                        if (v35 >= v36)
                        {
                          v38 = *v53;
                          v39 = v35 - *v53;
                          v40 = v39 + 1;
                          if ((unint64_t)(v39 + 1) >> 61)
                            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                          if (((char *)v36 - (char *)v38) >> 2 > v40)
                            v40 = ((char *)v36 - (char *)v38) >> 2;
                          if ((unint64_t)((char *)v36 - (char *)v38) >= 0x7FFFFFFFFFFFFFF8)
                            v41 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v41 = v40;
                          v83[0] = this + 37;
                          if (v41)
                          {
                            if (v41 >> 61)
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            v42 = (void **)operator new(8 * v41);
                            v34 = this;
                          }
                          else
                          {
                            v42 = 0;
                          }
                          v43 = (uint64_t *)&v42[v39];
                          *v43 = v70;
                          v80 = v42;
                          v81.i64[0] = (uint64_t)v43;
                          v44 = (uint64_t *)&v42[v41];
                          v70 = 0;
                          v81.i64[1] = (uint64_t)(v43 + 1);
                          v82 = v44;
                          if (v35 == v38)
                          {
                            v47 = vdupq_n_s64((unint64_t)v35);
                            v37 = v43 + 1;
                          }
                          else
                          {
                            v45 = 0;
                            do
                            {
                              v46 = v35[v45 - 1];
                              v43[v45 - 1] = v46;
                              if (v46)
                                RERetain();
                              --v45;
                            }
                            while (&v35[v45] != v38);
                            v47 = *(int64x2_t *)v53;
                            v36 = this[37];
                            v43 = (uint64_t *)((char *)v43 + v45 * 8);
                            v37 = (uint64_t *)v81.i64[1];
                            v44 = v82;
                            v34 = this;
                          }
                          v34[35] = v43;
                          v34[36] = v37;
                          v81 = v47;
                          v34[37] = v44;
                          v82 = v36;
                          v80 = (void **)v47.i64[0];
                          std::__split_buffer<realityio::WrappedRERef<REComponent *>>::~__split_buffer((uint64_t)&v80);
                          v24 = v54;
                          v34 = this;
                        }
                        else
                        {
                          *v35 = v70;
                          v37 = v35 + 1;
                          v70 = 0;
                          this[36] = v37;
                        }
                        v34[36] = v37;
                        realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v70);
                        RERelease();
                      }
                      if (v71)
                      {
                        v72 = v71;
                        operator delete(v71);
                      }
                    }
                    ++v25;
                  }
                  while (v25 != v24);
                }
                ++v22;
                v20 = v77;
              }
              while (v22 < (v78 - v77) >> 3);
              v21 = v74;
            }
          }
          if (v21)
          {
            v75 = v21;
            operator delete(v21);
            v20 = v77;
          }
          if (v20)
          {
            v78 = v20;
            operator delete(v20);
          }
          v80 = (void **)&v56;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v80);
          v80 = (void **)v57;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100](&v80);
        }
        if ((v61 & 7) != 0)
        {
          v48 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
        if (v59)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v59);
      }
    }
    else
    {
      v62 = 0;
    }
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v62);
    realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v63);
  }
  if ((v69 & 7) != 0)
  {
    v50 = (unsigned int *)((unint64_t)v69 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
  result = v66;
  if (v66)
    return (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v66);
  return result;
}

void sub_2300E5824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  *(_QWORD *)(v32 - 160) = &a15;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 160));
  *(_QWORD *)(v32 - 160) = &a18;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 160));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a21);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a25);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a26);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a32);
  _Unwind_Resume(a1);
}

uint64_t getEntityAtPath(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  const char *v6;
  const char *Text;
  uint64_t ChildCount;
  uint64_t v9;
  uint64_t v10;
  uint64_t Child;
  uint64_t EntityAtPath;

  if (!REEntityGetComponentByClass()
    || (v6 = *(const char **)RECustomComponentGetObject(),
        Text = (const char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3),
        strcmp(v6, Text)))
  {
    ChildCount = REEntityGetChildCount();
    if (ChildCount)
    {
      v9 = ChildCount;
      v10 = 0;
      while (1)
      {
        Child = REEntityGetChild();
        EntityAtPath = getEntityAtPath(Child, a2, a3);
        if (EntityAtPath)
          break;
        if (v9 == ++v10)
          return 0;
      }
      return EntityAtPath;
    }
    else
    {
      return 0;
    }
  }
  return a1;
}

_QWORD *realityio::InstancedEntityBuilder::clear(realityio::InstancedEntityBuilder *this, realityio::Inputs *a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = (_QWORD *)*((_QWORD *)this + 36);
  v4 = (_QWORD *)*((_QWORD *)this + 35);
  while (result != v4)
    result = realityio::WrappedRERef<REComponent *>::~WrappedRERef(result - 1);
  *((_QWORD *)this + 36) = v4;
  return result;
}

void realityio::InstancedEntityBuilder::~InstancedEntityBuilder(realityio::InstancedEntityBuilder *this)
{
  realityio::InstancedEntityBuilder::~InstancedEntityBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  realityio::InstancedEntityBuilder *v5;
  uint64_t v6;
  realityio::InstancedEntityBuilder *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  *(_QWORD *)this = &off_24FDF5818;
  v2 = (_QWORD *)*((_QWORD *)this + 35);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 36);
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = realityio::WrappedRERef<REComponent *>::~WrappedRERef(v3 - 1);
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 36) = v2;
    operator delete(v4);
  }
  *(_QWORD *)this = off_24FDE1CA0;
  v5 = (realityio::InstancedEntityBuilder *)*((_QWORD *)this + 34);
  if (v5 == (realityio::InstancedEntityBuilder *)((char *)this + 248))
  {
    v6 = 4;
    v5 = (realityio::InstancedEntityBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (realityio::InstancedEntityBuilder *)*((_QWORD *)this + 30);
  if (v7 == (realityio::InstancedEntityBuilder *)((char *)this + 216))
  {
    v8 = 4;
    v7 = (realityio::InstancedEntityBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v9 = *((_QWORD *)this + 24);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  v12 = *((_QWORD *)this + 23);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  realityio::Builder::~Builder(this);
}

uint64_t std::__split_buffer<realityio::WrappedRERef<REComponent *>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    realityio::WrappedRERef<REComponent *>::~WrappedRERef((_QWORD *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF5890;
  return result;
}

void std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF5890;
}

void std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  realityio::EntityBuilder *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v26) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)&v26, &v28);
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (realityio::EntityBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v28);
  v10 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::EntityBuilder::kPrimPathOutputName(v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v25 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v13, (uint64_t *)v14 + 20, &v25, &v26);
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v26);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2300E5EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;

  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v19 = __ldaxr(v15);
  while (__stlxr(v19 - 1, v15));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF5910;
  return result;
}

void std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF5910;
}

char *std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::InstancedEntityBuilder::InstancedEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::tokens::EntityBuilderTokens_StaticTokenType::~EntityBuilderTokens_StaticTokenType(realityio::tokens::EntityBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  void **v25;

  v25 = (void **)((char *)this + 64);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v25);
  v2 = *((_QWORD *)this + 7);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 6);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 5);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 2);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 1);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v23 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
}

realityio::tokens::EntityBuilderTokens_StaticTokenType *realityio::tokens::EntityBuilderTokens_StaticTokenType::EntityBuilderTokens_StaticTokenType(realityio::tokens::EntityBuilderTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(MEMORY[0x2348B2758](this, "active", 0) + 8);
  MEMORY[0x2348B2758](v2, "specifier", 0);
  MEMORY[0x2348B2758]((char *)this + 16, "typeName", 0);
  MEMORY[0x2348B2758]((char *)this + 24, "RealityKitEntityAPI", 0);
  MEMORY[0x2348B2758]((char *)this + 32, "RealityKit:requireEntityAPI", 0);
  MEMORY[0x2348B2758]((char *)this + 40, "RealityKit:__entityTaggingEditMode", 0);
  MEMORY[0x2348B2758]((char *)this + 48, "RealityKit:entity", 0);
  MEMORY[0x2348B2758]((char *)this + 56, "RealityKit:entityName", 0);
  v3 = *(_QWORD *)this;
  v38 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = *v2;
  v39 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = *((_QWORD *)this + 2);
  v40 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  v12 = *((_QWORD *)this + 3);
  v41 = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = *((_QWORD *)this + 4);
  v42 = v15;
  if ((v15 & 7) != 0)
  {
    v16 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 2, v16));
    if ((v17 & 1) == 0)
      v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  v18 = *((_QWORD *)this + 5);
  v43 = v18;
  if ((v18 & 7) != 0)
  {
    v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 2, v19));
    if ((v20 & 1) == 0)
      v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  v21 = *((_QWORD *)this + 6);
  v44 = v21;
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 2, v22));
    if ((v23 & 1) == 0)
      v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  v24 = *((_QWORD *)this + 7);
  v45 = v24;
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 2, v25));
    if ((v26 & 1) == 0)
      v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  v27 = operator new(0x40uLL);
  v28 = 0;
  *((_QWORD *)this + 8) = v27;
  *((_QWORD *)this + 9) = v27;
  *((_QWORD *)this + 10) = v27 + 8;
  do
  {
    v29 = *(&v38 + v28);
    *v27 = v29;
    if ((v29 & 7) != 0)
    {
      v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 2, v30));
      if ((v31 & 1) == 0)
        *v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v28;
    ++v27;
  }
  while (v28 != 8);
  v32 = &v46;
  *((_QWORD *)this + 9) = v27;
  do
  {
    v34 = *--v32;
    v33 = v34;
    if ((v34 & 7) != 0)
    {
      v35 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stlxr(v36 - 2, v35));
    }
  }
  while (v32 != &v38);
  return this;
}

void sub_2300E65BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  v29 = &a20;
  while (1)
  {
    v31 = *--v29;
    v30 = v31;
    if ((v31 & 7) != 0)
    {
      v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if (v29 == (uint64_t *)&a12)
    {
      if ((*v27 & 7) != 0)
      {
        v34 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      if ((*v26 & 7) != 0)
      {
        v36 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      if ((*v25 & 7) != 0)
      {
        v38 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((*v24 & 7) != 0)
      {
        v40 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      if ((*v23 & 7) != 0)
      {
        v42 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
      if ((*v22 & 7) != 0)
      {
        v44 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      if ((*v21 & 7) != 0)
      {
        v46 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((*v20 & 7) != 0)
      {
        v48 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::generateEntityDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  realityio::tokens::EntityBuilderTokens_StaticTokenType *Data;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  realityio::tokens::EntityBuilderTokens_StaticTokenType *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  realityio::tokens::EntityBuilderTokens_StaticTokenType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t i;
  void **v27[3];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31[3];
  __int128 v32;
  _QWORD *v33[3];
  _QWORD *v34[3];
  __int128 v35;
  _QWORD *v36[3];
  uint64_t v37;
  uint64_t v38;
  void ***v39;
  _OWORD v40[3];
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54B20);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54B20))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v34, 0, sizeof(v34));
    v9 = operator new();
    v10 = operator new();
    Data = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::EntityBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
    v12 = *((_QWORD *)Data + 2);
    *(_QWORD *)v10 = v12;
    if ((v12 & 7) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      v12 = *(_QWORD *)v10;
      if ((v14 & 1) == 0)
      {
        v12 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v10 = v12;
      }
    }
    *(_BYTE *)(v10 + 8) = v12 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v30, v10);
    v40[0] = v30;
    v30 = 0uLL;
    v15 = operator new();
    v16 = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::EntityBuilderTokens);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = v17;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      v17 = *(_QWORD *)v15;
      if ((v19 & 1) == 0)
      {
        v17 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v15 = v17;
      }
    }
    *(_BYTE *)(v15 + 8) = v17 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v29, v15);
    v40[1] = v29;
    v29 = 0uLL;
    v20 = operator new();
    v21 = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::EntityBuilderTokens);
    if (!v21)
      v21 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
    v22 = *(_QWORD *)v21;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    if ((v22 & 7) != 0)
    {
      v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 2, v23));
      v22 = *(_QWORD *)v20;
      if ((v24 & 1) == 0)
      {
        v22 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v20 = v22;
      }
    }
    *(_BYTE *)(v20 + 8) = v22 == 0;
    std::shared_ptr<realityio::DirtyMetadataDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyMetadataDescriptor,void>(&v28, v20);
    v40[2] = v28;
    v28 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::vector[abi:ne180100](v31, v40, 3uLL);
    memset(v27, 0, sizeof(v27));
    realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor(v9, v31, v27);
    std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitiveDirtyPrimDescriptor,void>(&v32, v9);
    v41 = v32;
    v32 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v33, &v41, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v34, v33);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v35, v8);
    v42 = v35;
    v35 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v36, &v42, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v36);
    v25 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v37, v7);
    _MergedGlobals_36 = v37;
    *(_QWORD *)algn_255E54B18 = v38;
    v37 = 0;
    v38 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v25);
    v39 = (void ***)v36;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v35);
    v39 = (void ***)v33;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v41);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v32);
    v39 = v27;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
    v27[0] = (void **)v31;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v27);
    for (i = 2; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v40[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v29);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v30);
    *(_QWORD *)&v40[0] = v34;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
    __cxa_guard_release(&qword_255E54B20);
  }
  v4 = *(_QWORD *)algn_255E54B18;
  *a1 = _MergedGlobals_36;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_2300E6B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  MEMORY[0x2348B4E1C](v30, 0x1060C40E5A1EACFLL);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  v34 = v32 - 144;
  do
  {
    v34 -= 16;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v34);
  }
  while (v34 != v32 - 176);
  MEMORY[0x2348B4E1C](v29, 0x10A1C402FEF67C7);
  *(_QWORD *)(v32 - 176) = &a28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 176));
  MEMORY[0x2348B4E1C](v28, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v31, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54B20);
  _Unwind_Resume(a1);
}

uint64_t realityio::getPrimEntityProvidingSetting(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  unsigned int Metadata;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  realityio::tokens::EntityBuilderTokens_StaticTokenType *Data;
  _QWORD v12[3];
  char v13;
  void **v14;

  v13 = 0;
  MEMORY[0x2348B274C](v12, "customData");
  if (!atomic_load(&realityio::tokens::EntityBuilderTokens))
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
  Metadata = pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<BOOL>((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v12);
  if ((v12[0] & 7) != 0)
  {
    v5 = (unsigned int *)(v12[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if (v13)
    v7 = Metadata;
  else
    v7 = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(this);
  v8 = (_QWORD *)v12[0];
  v9 = (_QWORD *)v12[1];
  while (v8 != v9)
  {
    Data = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::EntityBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
    if ((*v8 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 3) & 0xFFFFFFFFFFFFFFF8))
    {
      v7 = 1;
      break;
    }
    ++v8;
  }
  v14 = (void **)v12;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v14);
  return v7;
}

void sub_2300E6F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t realityio::primLayerIsEntityTaggingEditMode(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v2;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  realityio::tokens::EntityBuilderTokens_StaticTokenType *Data;
  pxrInternal__aapl__pxrReserved__::VtValue *ValueAtPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this);
  v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v17);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v2);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v19);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v3);
  v4 = v20;
  if (v20)
  {
    v5 = (unsigned int *)(v20 + 8);
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v8 = v18;
  if (v18)
  {
    v9 = (unsigned int *)(v18 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  Data = (realityio::tokens::EntityBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::EntityBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
  if ((*((_QWORD *)Data + 5) & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Data);
  ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  v14 = (uint64_t)ValueAtPath;
  if (ValueAtPath)
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(ValueAtPath))
    {
      v15 = *(_QWORD *)(v14 + 8);
      if ((v15 & 4) != 0)
        v14 = (*(uint64_t (**)(uint64_t))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v14);
      v14 = *(_BYTE *)v14 != 0;
    }
    else
    {
      v14 = 0;
    }
  }
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v21, 0);
  return v14;
}

void sub_2300E709C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)(v1 - 24), 0);
  _Unwind_Resume(a1);
}

uint64_t realityio::calculateOptInFromTargetPrim(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t PrimEntityProvidingSetting;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v22 = *(_DWORD *)this;
  v3 = *((_QWORD *)this + 1);
  v23 = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 48);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v24, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v25, (_DWORD *)this + 5);
  v7 = *((_QWORD *)this + 3);
  v26 = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  do
  {
    PrimEntityProvidingSetting = realityio::getPrimEntityProvidingSetting((realityio *)&v22, v6);
    if ((PrimEntityProvidingSetting & 1) != 0)
      break;
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v22, (uint64_t)&v18);
    v22 = v18;
    v11 = v19;
    v19 = 0;
    v12 = v23;
    v23 = v11;
    if (v12)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v24, &v20);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v25);
    if ((v26 & 7) != 0)
    {
      v13 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    v26 = v21;
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
    if (v19)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
  }
  while ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v22) & 1) == 0);
  if ((v26 & 7) != 0)
  {
    v15 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
  if (v23)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v23);
  return PrimEntityProvidingSetting;
}

void sub_2300E72CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

unint64_t realityio::calculateIsEntityProvidingAtExportTime(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  char IsAbsoluteRootPath;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v4;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v6;
  int v7;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, &v7);
  IsAbsoluteRootPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if ((IsAbsoluteRootPath & 1) != 0)
    return 1;
  v6 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)realityio::calculateOptInFromTargetPrim(this, v4);
  return realityio::isEntityProviding(this, v6);
}

void sub_2300E735C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

unint64_t realityio::isEntityProviding(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  int v2;
  char IsAbsoluteRootPath;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v5;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v6;
  char isSceneLibrary;
  unsigned int *v8;
  unsigned int v9;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v10;
  unint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfPath *PrimPath;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (int)a2;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, &v15);
  IsAbsoluteRootPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if ((IsAbsoluteRootPath & 1) != 0)
    return 1;
  if (!v2 || (realityio::primLayerIsEntityTaggingEditMode(this, v5) & 1) != 0)
  {
    if ((realityio::isSceneLibrary(this, v5) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent(this, (uint64_t)&v15);
      isSceneLibrary = realityio::isSceneLibrary((realityio *)&v15, v6);
      if ((v18 & 7) != 0)
      {
        v8 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
      if (v16)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
      if ((isSceneLibrary & 1) == 0)
        return realityio::isEntityConvertible(this, v10);
    }
    return 1;
  }
  result = realityio::getPrimEntityProvidingSetting(this, v5);
  if ((_DWORD)result)
  {
    PrimPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath(this);
    if (*(_QWORD *)PrimPath == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(PrimPath))
    {
      return 0;
    }
    else
    {
      result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
      if ((_DWORD)result)
      {
        result = pxrInternal__aapl__pxrReserved__::UsdPrim::IsActive(this, v13);
        if ((_DWORD)result)
          return pxrInternal__aapl__pxrReserved__::UsdPrim::IsDefined(this, v14);
      }
    }
  }
  return result;
}

void sub_2300E74B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

unint64_t realityio::calculateIsEntityProviding(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  char IsAbsoluteRootPath;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v4;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v6;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v7;
  int v8;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, &v8);
  IsAbsoluteRootPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if ((IsAbsoluteRootPath & 1) != 0)
    return 1;
  if ((realityio::primLayerIsEntityTaggingEditMode(this, v4) & 1) != 0)
    v7 = 0;
  else
    v7 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)realityio::calculateOptInFromTargetPrim(this, v6);
  return realityio::isEntityProviding(this, v7);
}

void sub_2300E7564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsActive(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    v3 = *(_QWORD *)(v2 + 56);
  }
  return v3 & 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsDefined(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    v3 = *(_QWORD *)(v2 + 56);
  }
  return (v3 >> 6) & 1;
}

uint64_t realityio::isEntityConvertible(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  char *PrimPath;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable *IsValid;

  PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath(this);
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath) & 1) == 0
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this)
    && pxrInternal__aapl__pxrReserved__::UsdPrim::IsActive(this, v4)
    && ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsDefined(this, v4) & 1) != 0
     || realityio::isInSceneHierarchy(this, v4))
    && realityio::isSceneGraphNode((pxrInternal__aapl__pxrReserved__ **)this, v4)
    && (IsValid = (pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this),
        (_DWORD)IsValid)
    && (pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(IsValid),
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
        (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) != 0))
  {
    return 1;
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::IsPrototype(this, v4);
  }
}

uint64_t realityio::isInSceneHierarchy(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v3;
  uint64_t v4;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
    return 0;
  if ((realityio::isScene(this, v3) & 1) != 0)
    return 1;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent(this, (uint64_t)&v9);
  v4 = realityio::isInSceneHierarchy((realityio *)&v9, v5);
  if ((v12 & 7) != 0)
  {
    v6 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v10)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  return v4;
}

void sub_2300E772C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::isSceneGraphNode(pxrInternal__aapl__pxrReserved__ **this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  _QWORD *v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)this);
  if ((_DWORD)result)
  {
    v5 = this[1];
    if (!v5 || (*((_BYTE *)v5 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(this[1], v4);
    v6 = (_QWORD *)*((_QWORD *)v5 + 3);
    v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)MEMORY[0x2348B274C](&v11, &str_19_0);
    v8 = v11;
    if ((*v6 & 0xFFFFFFFFFFFFFFF8) == (v11 & 0xFFFFFFFFFFFFFFF8))
    {
      result = 1;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(v7);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      result = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      v8 = v11;
    }
    if ((v8 & 7) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsPrototype(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
    if ((*(_QWORD *)(v2 + 56) & 0x1000) == 0)
      return 0;
  }
  else if ((v3 & 0x1000) == 0)
  {
    return 0;
  }
  return pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + 16));
}

uint64_t RIOPxrSdrShaderNodeGetTypeID()
{
  if (qword_255E54B30 != -1)
    dispatch_once(&qword_255E54B30, &__block_literal_global_24);
  return _MergedGlobals_37;
}

uint64_t RIOPxrSdrShaderPropertyGetTypeID()
{
  if (qword_255E54B40 != -1)
    dispatch_once(&qword_255E54B40, &__block_literal_global_1_1);
  return qword_255E54B38;
}

__CFArray *RIOPxrSdrRegistryCopyNodeNames(pxrInternal__aapl__pxrReserved__::SdrRegistry *a1)
{
  __CFArray *Mutable;
  char *v2;
  const char *v3;
  CFStringRef v4;
  char *v6;
  char *v7;

  pxrInternal__aapl__pxrReserved__::SdrRegistry::GetInstance(a1);
  pxrInternal__aapl__pxrReserved__::NdrRegistry::GetNodesByFamily();
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v2 = v6;
  if (v6 != v7)
  {
    do
    {
      v3 = (const char *)(*(_QWORD *)v2 + 40);
      if (*(char *)(*(_QWORD *)v2 + 63) < 0)
        v3 = *(const char **)v3;
      v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
      CFArrayAppendValue(Mutable, v4);
      CFRelease(v4);
      v2 += 8;
    }
    while (v2 != v7);
    v2 = v6;
  }
  if (v2)
    operator delete(v2);
  return Mutable;
}

void sub_2300E7A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdrRegistryGetShaderNodeByName(pxrInternal__aapl__pxrReserved__::SdrRegistry *a1)
{
  uint64_t ShaderNodeByName;
  uint64_t result;
  void *v4[3];
  void *__p;
  char v6;
  void **v7;

  pxrInternal__aapl__pxrReserved__::SdrRegistry::GetInstance(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)a1);
  memset(v4, 0, sizeof(v4));
  ShaderNodeByName = pxrInternal__aapl__pxrReserved__::SdrRegistry::GetShaderNodeByName();
  v7 = v4;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (v6 < 0)
  {
    operator delete(__p);
    if (ShaderNodeByName)
      goto LABEL_3;
    return 0;
  }
  if (!ShaderNodeByName)
    return 0;
LABEL_3:
  if (qword_255E54B30 != -1)
    dispatch_once(&qword_255E54B30, &__block_literal_global_24);
  result = _CFRuntimeCreateInstance();
  if (result)
    *(_QWORD *)(result + 16) = ShaderNodeByName;
  return result;
}

void sub_2300E7B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v19 - 40) = v18;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 40));
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrSdrShaderNodeCopyInputNames(uint64_t a1)
{
  uint64_t **InputNames;
  __CFArray *Mutable;
  uint64_t *v3;
  uint64_t *v4;
  const void *v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  InputNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::NdrNode::GetInputNames(*(pxrInternal__aapl__pxrReserved__::NdrNode **)(a1 + 16));
  v8 = 0;
  v9 = 0;
  v7 = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>(&v7, *InputNames, InputNames[1], InputNames[1] - *InputNames);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v3 = v7;
  v4 = v8;
  while (v3 != v4)
  {
    v5 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v3);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
    ++v3;
  }
  v10 = (void **)&v7;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v10);
  return Mutable;
}

void sub_2300E7C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrSdrShaderNodeCopyOutputNames(uint64_t a1)
{
  uint64_t **OutputNames;
  __CFArray *Mutable;
  uint64_t *v3;
  uint64_t *v4;
  const void *v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  OutputNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::NdrNode::GetOutputNames(*(pxrInternal__aapl__pxrReserved__::NdrNode **)(a1 + 16));
  v8 = 0;
  v9 = 0;
  v7 = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>(&v7, *OutputNames, OutputNames[1], OutputNames[1] - *OutputNames);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v3 = v7;
  v4 = v8;
  while (v3 != v4)
  {
    v5 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v3);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
    ++v3;
  }
  v10 = (void **)&v7;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v10);
  return Mutable;
}

void sub_2300E7D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrSdrShaderNodeCopyName(uint64_t a1)
{
  uint64_t v1;
  std::string *p_p;
  CFStringRef v3;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 16);
  if (*(char *)(v1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v1 + 40), *(_QWORD *)(v1 + 48));
  else
    __p = *(std::string *)(v1 + 40);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v3 = CFStringCreateWithCString(0, (const char *)p_p, 0x8000100u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_2300E7DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdrShaderNodeGetFamily(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(*(_QWORD *)(a1 + 16) + 64));
}

uint64_t RIOPxrSdrShaderNodeCopyFamily(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(*(_QWORD *)(a1 + 16) + 64));
}

CFStringRef RIOPxrSdrShaderNodeCopyInfoString(uint64_t a1)
{
  void **v1;
  CFStringRef v2;
  void *__p[2];
  char v5;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 16) + 24))(__p);
  if (v5 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_2300E7E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdrShaderNodeGetShaderInput(uint64_t a1, uint64_t a2)
{
  uint64_t ShaderInput;

  ShaderInput = pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(*(pxrInternal__aapl__pxrReserved__::SdrShaderNode **)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  return RIOPxrSdrShaderPropertyCreate<pxrInternal__aapl__pxrReserved__::SdrShaderProperty const*>(&ShaderInput);
}

uint64_t RIOPxrSdrShaderNodeCopyShaderInput(uint64_t a1, uint64_t a2)
{
  uint64_t ShaderInput;

  ShaderInput = pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderInput(*(pxrInternal__aapl__pxrReserved__::SdrShaderNode **)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  return RIOPxrSdrShaderPropertyCreate<pxrInternal__aapl__pxrReserved__::SdrShaderProperty const*>(&ShaderInput);
}

uint64_t RIOPxrSdrShaderPropertyCreate<pxrInternal__aapl__pxrReserved__::SdrShaderProperty const*>(_QWORD *a1)
{
  uint64_t result;

  if (qword_255E54B40 != -1)
    dispatch_once(&qword_255E54B40, &__block_literal_global_1_1);
  result = _CFRuntimeCreateInstance();
  if (result)
    *(_QWORD *)(result + 16) = *a1;
  return result;
}

uint64_t RIOPxrSdrShaderNodeGetShaderOutput(uint64_t a1, uint64_t a2)
{
  uint64_t ShaderOutput;

  ShaderOutput = pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderOutput(*(pxrInternal__aapl__pxrReserved__::SdrShaderNode **)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  return RIOPxrSdrShaderPropertyCreate<pxrInternal__aapl__pxrReserved__::SdrShaderProperty const*>(&ShaderOutput);
}

uint64_t RIOPxrSdrShaderNodeCopyShaderOutput(uint64_t a1, uint64_t a2)
{
  uint64_t ShaderOutput;

  ShaderOutput = pxrInternal__aapl__pxrReserved__::SdrShaderNode::GetShaderOutput(*(pxrInternal__aapl__pxrReserved__::SdrShaderNode **)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  return RIOPxrSdrShaderPropertyCreate<pxrInternal__aapl__pxrReserved__::SdrShaderProperty const*>(&ShaderOutput);
}

uint64_t RIOPxrSdrShaderPropertyGetName(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(*(_QWORD *)(a1 + 16) + 8));
}

uint64_t RIOPxrSdrShaderPropertyCopyName(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(*(_QWORD *)(a1 + 16) + 8));
}

uint64_t RIOPxrSdrShaderPropertyGetType(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(*(_QWORD *)(a1 + 16) + 16));
}

uint64_t RIOPxrSdrShaderPropertyCopyType(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(*(_QWORD *)(a1 + 16) + 16));
}

uint64_t RIOPxrSdrShaderPropertyGetDefaultValue(uint64_t a1)
{
  return RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)(*(_QWORD *)(a1 + 16) + 24));
}

uint64_t RIOPxrSdrShaderPropertyCopyDefaultValue(uint64_t a1)
{
  return RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)(*(_QWORD *)(a1 + 16) + 24));
}

BOOL RIOPxrSdrShaderPropertyIsArray(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return *(_QWORD *)(v1 + 48) || *(_BYTE *)(v1 + 56) != 0;
}

uint64_t RIOPxrSdrShaderPropertyGetArraySize(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 16) + 48);
}

uint64_t RIOPxrSdrShaderPropertyIsConnectable(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

CFStringRef RIOPxrSdrShaderPropertyCopyInfoString(uint64_t a1)
{
  void **v1;
  CFStringRef v2;
  void *__p[2];
  char v5;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 16) + 16))(__p);
  if (v5 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_2300E80A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL _RIOPxrSdrShaderNodeCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOPxrSdrShaderNodeCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOPxrSdrShaderNodeCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdrShaderNode %p>"), a1);
}

CFStringRef _RIOPxrSdrShaderNodeCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdrShaderNode %p>"), a1);
}

BOOL _RIOPxrSdrShaderPropertyCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOPxrSdrShaderPropertyCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOPxrSdrShaderPropertyCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdrShaderProperty %p>"), a1);
}

CFStringRef _RIOPxrSdrShaderPropertyCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdrShaderProperty %p>"), a1);
}

uint64_t realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(realityio::MeshModelDescriptorBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "mesh_model_descriptor");
    realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(void)::kOutputName;
}

void sub_2300E82A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::MeshModelDescriptorBuilder *realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(realityio::MeshModelDescriptorBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "MeshModelDescriptorBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kMeshModelDescriptorBuilderIdentifier);
  realityio::generateMeshDirtyStageSubscription(&v12);
  v20[0] = &off_24FDF5B08;
  v21 = v20;
  v18[0] = &off_24FDF5B88;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDF5A90;
  return this;
}

void sub_2300E846C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t realityio::MeshModelDescriptorBuilder::run(realityio::MeshModelDescriptorBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *IsValid;
  uint64_t IsA;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t Text;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v19;
  pxrInternal__aapl__pxrReserved__::UsdStage *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::VtValue *ValueAtPath;
  pxrInternal__aapl__pxrReserved__::TfToken *v27;
  unsigned int *v28;
  unsigned int v29;
  pxrInternal__aapl__pxrReserved__::TfToken *v30;
  unsigned int *v31;
  unsigned int v32;
  pxrInternal__aapl__pxrReserved__::TfToken *v33;
  unsigned int *v34;
  unsigned int v35;
  pxrInternal__aapl__pxrReserved__::TfToken *v36;
  unsigned int *v37;
  unsigned int v38;
  pxrInternal__aapl__pxrReserved__::TfToken *v39;
  unsigned int *v40;
  unsigned int v41;
  pxrInternal__aapl__pxrReserved__::TfToken *v42;
  unsigned int *v43;
  unsigned int v44;
  pxrInternal__aapl__pxrReserved__::TfToken *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v49;
  unsigned int v50;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *i;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v52;
  _DWORD *v53;
  _DWORD *v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *Data;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  pxrInternal__aapl__pxrReserved__::UsdStage *v66;
  pxrInternal__aapl__pxrReserved__::UsdStage *v67;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *PrimAtPath;
  char v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  realityio::MeshModelDescriptorBuilder *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  __int128 *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  pxrInternal__aapl__pxrReserved__::TfToken *v94;
  uint64_t EmptyString;
  __int128 v96;
  unint64_t v97;
  __int128 v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  _QWORD *v102;
  realityio::MeshModelDescriptorBuilder *v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  __int128 *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  realityio::MeshModelDescriptorBuilder *v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  __int128 *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v128;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v129;
  std::__shared_weak_count *v130;
  pxrInternal__aapl__pxrReserved__::UsdStage *v131;
  pxrInternal__aapl__pxrReserved__::UsdStage *v132;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *v133;
  char v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  int v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _QWORD *v143;
  std::string __p;
  int v145;
  int v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  _QWORD v150[4];
  int v151;
  _BYTE v152[4];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156[3];
  __n128 v157;
  unint64_t v158;
  _DWORD *v159;
  _DWORD *v160;
  unint64_t v161;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v162;
  _BYTE v163[16];
  uint64_t v164;
  uint64_t v165;
  char v166[8];
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 buf;
  int v171;
  int v172;
  uint64_t v173;
  void *v174;
  void *v175;
  _QWORD v176[3];
  _QWORD v177[6];

  v177[4] = *MEMORY[0x24BDAC8D0];
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  IsValid = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v166);
  if ((IsValid & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(IsValid);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((IsA & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v164 = MEMORY[0x24BEE9D10] + 16;
      if (realityio::isGuide((realityio *)v166, v8))
        goto LABEL_177;
      if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 16) + 272)
        && v165
        && (*(_BYTE *)(v165 + 57) & 8) == 0
        && (*(unsigned int (**)(uint64_t *))(v164 + 32))(&v164))
      {
        *(_QWORD *)&v140 = 0x7FF8000000000000;
        pxrInternal__aapl__pxrReserved__::UsdGeomImageable::ComputeVisibility((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&v164, (const pxrInternal__aapl__pxrReserved__::UsdTimeCode *)&v140);
        MEMORY[0x2348B274C](v150, "invisible");
        v9 = buf;
        v10 = (unsigned int *)(v150[0] & 0xFFFFFFFFFFFFFFF8);
        if ((v150[0] & 7) != 0)
        {
          do
            v11 = __ldxr(v10);
          while (__stlxr(v11 - 2, v10));
          v12 = buf;
        }
        else
        {
          v12 = buf;
        }
        v15 = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v12 & 7) != 0)
        {
          v16 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
          do
            v17 = __ldxr(v16);
          while (__stlxr(v17 - 2, v16));
        }
        if ((unsigned int *)v15 == v10)
          goto LABEL_177;
      }
      realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v163, 2034, (uint64_t)this);
      v162 = 0;
      v18 = REMeshCompileOptionsCreate();
      v19 = v162;
      if (v162)
        v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)RERelease();
      v162 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v18;
      if (v18)
      {
        REMeshCompileOptionsSetPreserveSubdivisonSurfaceData();
        v20 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
        pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v20);
        v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&buf);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v21);
        v22 = *((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          v23 = (unsigned int *)(*((_QWORD *)&buf + 1) + 8);
          do
          {
            v24 = __ldxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        }
        std::string::basic_string[abi:ne180100]<0>(&buf, "realityio:decimateAllMeshes");
        ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
        if (SHIBYTE(v172) < 0)
          operator delete((void *)buf);
        if (ValueAtPath && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(ValueAtPath))
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>(ValueAtPath);
          REMeshCompileOptionsSetGenerateDecimatedMesh();
        }
        std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)&v140, 0);
        *(_QWORD *)&v140 = v162;
        v27 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&buf, "RE:mesh:v1:generateVertexFaceAdjacencyAttributes");
        if ((buf & 7) != 0)
        {
          v28 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
          do
            v29 = __ldxr(v28);
          while (__stlxr(v29 - 2, v28));
        }
        v30 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&buf, "RE:mesh:v1:reorderVertexCaching");
        if ((buf & 7) != 0)
        {
          v31 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
          do
            v32 = __ldxr(v31);
          while (__stlxr(v32 - 2, v31));
        }
        v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&buf, "RE:mesh:v1:repairTangents");
        if ((buf & 7) != 0)
        {
          v34 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
          do
            v35 = __ldxr(v34);
          while (__stlxr(v35 - 2, v34));
        }
        v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&buf, "RE:mesh:v1:mergeVerticesIfPolygonSoup");
        if ((buf & 7) != 0)
        {
          v37 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
        v39 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&buf, "RE:mesh:v1:preserveSharpFeatures");
        if ((buf & 7) != 0)
        {
          v40 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stlxr(v41 - 2, v40));
        }
        v42 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&buf, "RE:mesh:v1:preserveSubdivisionSurfaceData");
        if ((buf & 7) != 0)
        {
          v43 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
          do
            v44 = __ldxr(v43);
          while (__stlxr(v44 - 2, v43));
        }
        v45 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&buf, "RE:mesh:v1:decimateMesh");
        if ((buf & 7) != 0)
        {
          v46 = (unsigned int *)(buf & 0xFFFFFFFFFFFFFFF8);
          do
            v47 = __ldxr(v46);
          while (__stlxr(v47 - 2, v46));
        }
      }
      v159 = 0;
      v160 = 0;
      v161 = 0;
      v157 = 0uLL;
      v158 = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v19);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) == 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v166, &v140);
        std::allocate_shared[abi:ne180100]<realityio::MeshModelDescriptorBuilder::MeshModelDataT,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDataT>,realityio::WrappedRERef<REMeshCompileOptions *>,pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,void>(&buf, &v162, &v140, (uint64_t)&v159, &v157);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v74 = (realityio::MeshModelDescriptorBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v140);
        v76 = *((_QWORD *)this + 2);
        v75 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
        *(_QWORD *)&v140 = v76;
        *((_QWORD *)&v140 + 1) = v75;
        if (v75)
        {
          p_shared_owners = (unint64_t *)&v75->__shared_owners_;
          do
            v78 = __ldxr(p_shared_owners);
          while (__stxr(v78 + 1, p_shared_owners));
        }
        v79 = (__int128 *)realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v74);
        realityio::Outputs::storeValue<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>(v76, v79, (uint64_t *)&buf);
        if (v75)
        {
          v80 = (unint64_t *)&v75->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v82 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          v83 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        goto LABEL_176;
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v156[0] = MEMORY[0x24BEE9CF0] + 16;
      if (!atomic_load(MEMORY[0x24BEE7FE8]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
      *(_QWORD *)&v140 = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets();
      if ((v140 & 7) != 0)
      {
        v49 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::reserve((uint64_t *)&v159, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3));
      v52 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)*((_QWORD *)&buf + 1);
      for (i = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)buf;
            i != v52;
            i = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)i + 24))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath(i, &v140);
        v53 = v160;
        if ((unint64_t)v160 >= v161)
        {
          v54 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v159, &v140);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v160, &v140);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v53 + 1, (_DWORD *)&v140 + 1);
          v54 = v53 + 2;
        }
        v160 = v54;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v140);
      }
      *(_QWORD *)&v140 = &buf;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
      LODWORD(buf) = 1;
      *((_QWORD *)&buf + 1) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      v173 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v153 = MEMORY[0x24BEE9D50] + 16;
      if ((v173 & 7) != 0)
      {
        v55 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v171);
      if (*((_QWORD *)&buf + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v150[3] = 0;
      v150[0] = MEMORY[0x24BEE9DA0] + 16;
      pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v150);
      v57 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&buf + 1) + 48);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v60 = v154;
      v154 = v57;
      if (v60)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v60);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v155, &v171);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v155 + 4, &v172);
      MEMORY[0x2348B1F9C](&buf);
      if (v154 && (*(_BYTE *)(v154 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v153 + 32))(&v153))
      {
        v61 = (unint64_t *)MEMORY[0x24BEE8040];
        Data = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(MEMORY[0x24BEE8040]);
        if (!Data)
          Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
        if (pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v166, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)Data + 136)))
        {
          v63 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v61);
          if (!v63)
            v63 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v166, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v63 + 136));
          v147 = 0;
          v148 = 0;
          v149 = 0;
          pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
          v64 = v147;
          v65 = v148;
          if (v147 != v148)
          {
            while (1)
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v145, v64);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v146, (_DWORD *)&v64->__vftable + 1);
              v66 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
              pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v66, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v145);
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v140))
              {
                v67 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
                PrimAtPath = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v67, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v145);
                pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(PrimAtPath);
                pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
                v69 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
                if ((__p.__r_.__value_.__s.__data_[16] & 7) != 0)
                {
                  v70 = (unsigned int *)(__p.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v71 = __ldxr(v70);
                  while (__stlxr(v71 - 2, v70));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p.__r_.__value_.__l.__size_);
                if (__p.__r_.__value_.__r.__words[0])
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p.__r_.__value_.__l.__data_);
              }
              else
              {
                v69 = 0;
              }
              if ((BYTE8(v141) & 7) != 0)
              {
                v72 = (unsigned int *)(*((_QWORD *)&v141 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v73 = __ldxr(v72);
                while (__stlxr(v73 - 2, v72));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v141);
              if (*((_QWORD *)&v140 + 1))
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v140 + 1));
              if ((v69 & 1) != 0)
                break;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v145);
              v64 = (std::__shared_weak_count *)((char *)v64 + 8);
              if (v64 == v65)
                goto LABEL_205;
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v151, &v145);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v152, &v146);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v145);
          }
LABEL_205:
          *(_QWORD *)&v140 = &v147;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
          pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&buf);
        }
        else
        {
          v128 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v61);
          if (!v128)
            v128 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v166, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v128 + 136));
          v147 = 0;
          v148 = 0;
          v149 = 0;
          pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
          v129 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v147;
          v130 = v148;
          if (v147 != v148)
          {
            while (1)
            {
              v131 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
              pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v131, v129);
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v140))
              {
                v132 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
                v133 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v132, v129);
                pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(v133);
                pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
                v134 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
                if ((__p.__r_.__value_.__s.__data_[16] & 7) != 0)
                {
                  v135 = (unsigned int *)(__p.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8);
                  do
                    v136 = __ldxr(v135);
                  while (__stlxr(v136 - 2, v135));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p.__r_.__value_.__l.__size_);
                if (__p.__r_.__value_.__r.__words[0])
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p.__r_.__value_.__l.__data_);
              }
              else
              {
                v134 = 0;
              }
              if ((BYTE8(v141) & 7) != 0)
              {
                v137 = (unsigned int *)(*((_QWORD *)&v141 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v138 = __ldxr(v137);
                while (__stlxr(v138 - 2, v137));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v141);
              if (*((_QWORD *)&v140 + 1))
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v140 + 1));
              if ((v134 & 1) != 0)
                break;
              v129 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v129 + 8);
              if (v129 == (const pxrInternal__aapl__pxrReserved__::SdfPath *)v130)
                goto LABEL_203;
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v151, v129);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v152, (_DWORD *)v129 + 1);
          }
LABEL_203:
          *(_QWORD *)&v140 = &v147;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&buf);
        }
        v85 = 1;
      }
      else
      {
        v85 = 0;
      }
      MEMORY[0x2348B235C](&buf, v150);
      v87 = v176[0];
      v86 = v176[1];
      v142 = 0;
      v140 = 0u;
      v141 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v150);
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>())
      {
        v88 = v140;
        if ((__p.__r_.__value_.__s.__data_[16] & 7) != 0)
        {
          v89 = (unsigned int *)(__p.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8);
          do
            v90 = __ldxr(v89);
          while (__stlxr(v90 - 2, v89));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p.__r_.__value_.__l.__size_);
        if (__p.__r_.__value_.__r.__words[0])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p.__r_.__value_.__l.__data_);
        if (v86 != v87)
        {
          v91 = (v86 - v87) / 40;
          if (v88 == v91)
          {
            v92 = 0;
            if (v91 <= 1)
              v93 = 1;
            else
              v93 = v91;
            do
            {
              pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::GetBlendShape((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *)&buf);
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v147, &v145);
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v140);
              if ((*(_QWORD *)(v142 + 8 * v92) & 0xFFFFFFFFFFFFFFF8) != 0)
                EmptyString = (*(_QWORD *)(v142 + 8 * v92) & 0xFFFFFFFFFFFFFFF8) + 16;
              else
                EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v94);
              LODWORD(v143) = v145;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
              HIDWORD(v143) = v146;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
              if (*(char *)(EmptyString + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
              }
              else
              {
                v96 = *(_OWORD *)EmptyString;
                __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v96;
              }
              v97 = v157.n128_u64[1];
              if (v157.n128_u64[1] >= v158)
              {
                v157.n128_u64[1] = std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>((uint64_t *)&v157, (uint64_t)&v143);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v157.n128_u64[1], &v143);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v97 + 4), (_DWORD *)&v143 + 1);
                v98 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(_QWORD *)(v97 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)(v97 + 8) = v98;
                memset(&__p, 0, sizeof(__p));
                v157.n128_u64[1] = v97 + 32;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v143);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v145);
              MEMORY[0x2348B2188](&v147);
              ++v92;
            }
            while (v93 != v92);
          }
        }
      }
      else
      {
        if ((__p.__r_.__value_.__s.__data_[16] & 7) != 0)
        {
          v99 = (unsigned int *)(__p.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8);
          do
            v100 = __ldxr(v99);
          while (__stlxr(v100 - 2, v99));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p.__r_.__value_.__l.__size_);
        if (__p.__r_.__value_.__r.__words[0])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p.__r_.__value_.__l.__data_);
      }
      if ((v85 & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v166, &v145);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v153, &v139);
        v101 = (uint64_t)v162;
        v102 = operator new(0x68uLL);
        v102[1] = 0;
        v102[2] = 0;
        *v102 = &off_24FDF0A08;
        v147 = (std::__shared_weak_count *)v101;
        if (v101)
          RERetain();
        realityio::MeshModelDescriptorBuilder::MeshModelDataT::MeshModelDataT((uint64_t)(v102 + 3), (uint64_t *)&v147, &v145, &v139, &v151, &v159, (uint64_t *)&v157);
        realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(&v147);
        v143 = v102 + 3;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v139);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v103 = (realityio::MeshModelDescriptorBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v145);
        v105 = *((_QWORD *)this + 2);
        v104 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
        v147 = (std::__shared_weak_count *)v105;
        v148 = v104;
        if (v104)
        {
          v106 = (unint64_t *)&v104->__shared_owners_;
          do
            v107 = __ldxr(v106);
          while (__stxr(v107 + 1, v106));
        }
        v108 = (__int128 *)realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v103);
        realityio::Outputs::storeValue<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>(v105, v108, (uint64_t *)&v143);
        if (v104)
        {
          v109 = (unint64_t *)&v104->__shared_owners_;
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v111 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0])
          goto LABEL_168;
        v112 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v166, &v147);
        std::allocate_shared[abi:ne180100]<realityio::MeshModelDescriptorBuilder::MeshModelDataT,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDataT>,realityio::WrappedRERef<REMeshCompileOptions *>,pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,void>(&v143, &v162, &v147, (uint64_t)&v159, &v157);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v114 = (realityio::MeshModelDescriptorBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v147);
        v116 = *((_QWORD *)this + 2);
        v115 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
        v147 = (std::__shared_weak_count *)v116;
        v148 = v115;
        if (v115)
        {
          v117 = (unint64_t *)&v115->__shared_owners_;
          do
            v118 = __ldxr(v117);
          while (__stxr(v118 + 1, v117));
        }
        v119 = (__int128 *)realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v114);
        realityio::Outputs::storeValue<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>(v116, v119, (uint64_t *)&v143);
        if (v115)
        {
          v120 = (unint64_t *)&v115->__shared_owners_;
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
        v111 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0])
          goto LABEL_168;
        v122 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
        do
          v113 = __ldaxr(v122);
        while (__stlxr(v113 - 1, v122));
      }
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
LABEL_168:
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v140);
      *(_QWORD *)&v140 = v177;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
      *(_QWORD *)&v140 = v176;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::_BlendShape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
      if (v174)
      {
        v175 = v174;
        operator delete(v174);
      }
      if ((v173 & 7) != 0)
      {
        v123 = (unsigned int *)(v173 & 0xFFFFFFFFFFFFFFF8);
        do
          v124 = __ldxr(v123);
        while (__stlxr(v124 - 2, v123));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v171);
      if (*((_QWORD *)&buf + 1))
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
      MEMORY[0x2348B217C](v150);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v151);
      MEMORY[0x2348B1F9C](&v153);
      MEMORY[0x2348B1AF8](v156);
LABEL_176:
      *(_QWORD *)&buf = &v157;
      std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      *(_QWORD *)&buf = &v159;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(&v162);
      realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v163);
LABEL_177:
      MEMORY[0x2348B1BE8](&v164);
      goto LABEL_178;
    }
    v13 = *(id *)realityio::logObjects((realityio *)IsA);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v166, &v140);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v140);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = Text;
      _os_log_impl(&dword_22FF26000, v13, OS_LOG_TYPE_INFO, "Skipping MeshModelDescriptorBuilder on %s", (uint8_t *)&buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v140);
    }

  }
LABEL_178:
  if ((v169 & 7) != 0)
  {
    v125 = (unsigned int *)(v169 & 0xFFFFFFFFFFFFFFF8);
    do
      v126 = __ldxr(v125);
    while (__stlxr(v126 - 2, v125));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v168);
  result = v167;
  if (v167)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v167);
  return result;
}

void sub_2300E9654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44)
{
  uint64_t v44;

  MEMORY[0x2348B1AF8](&a32);
  a11 = (void **)&a35;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__destroy_vector::operator()[abi:ne180100](&a11);
  a11 = (void **)&a38;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a11);
  realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(&a41);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a42);
  MEMORY[0x2348B1BE8](&a44);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v44 - 240));
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 *v18;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDF0A58;
  v7[3] = &off_24FDF0AA8;
  v8 = *a3;
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v7[4] = v8;
  v7[5] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)&v17 = v7 + 3;
  *((_QWORD *)&v17 + 1) = v7;
  v18 = a2;
  v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v18);
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v13 + 7), &v17);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_2300E9CAC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::~UsdSkelBlendShapeQuery(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery *this)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  void **v7;

  v7 = (void **)((char *)this + 80);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 56);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::_BlendShape>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 3);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v6 = *((_QWORD *)this + 1);
  if (v6)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
}

uint64_t realityio::MeshModelDescriptorBuilder::clear(realityio::MeshModelDescriptorBuilder *this, realityio::Inputs *a2)
{
  std::__shared_weak_count *v3;
  std::mutex *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const void **v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  realityio::MeshModelDescriptorBuilder *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  const void **v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v24;
  char v25[8];
  __int128 v26;
  std::string v27;
  __int128 v28;
  std::string v29;
  uint64_t v30;
  __int128 v31;
  std::string v32;

  v4 = (std::mutex *)*((_QWORD *)this + 2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (const void **)realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(this);
  realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>(v4, v7, (uint64_t)&v30);
  if ((_BYTE)v30)
  {
    v8 = v31;
    if (*((_QWORD *)&v31 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 + 1, v9));
      v25[0] = 1;
      v26 = v8;
      do
        v12 = __ldaxr(v9);
      while (__stlxr(v12 - 1, v9));
      if (!v12)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 16))(*((_QWORD *)&v8 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
      }
    }
    else
    {
      v25[0] = 1;
      v26 = (unint64_t)v31;
    }
  }
  else
  {
    v28 = v31;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v29, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    else
      v29 = v32;
    v25[0] = 0;
    v26 = v28;
    v27 = v29;
  }
  v13 = (realityio::MeshModelDescriptorBuilder *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v30);
  if (v24)
  {
    v14 = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v25[0])
  {
    v17 = *((_QWORD *)this + 2);
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v30 = v17;
    *(_QWORD *)&v31 = v16;
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = (const void **)realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v13);
    std::mutex::lock((std::mutex *)(v17 + 64));
    if (v17 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v17 + 40, v20))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v17 + 40), v20);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v17, (unsigned __int8 *)v20);
    std::mutex::unlock((std::mutex *)(v17 + 64));
    if (v16)
    {
      v21 = (unint64_t *)&v16->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  return realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v25);
}

void sub_2300E9FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result(v9 - 96);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void realityio::MeshModelDescriptorBuilder::~MeshModelDescriptorBuilder(realityio::MeshModelDescriptorBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t `anonymous namespace'::setCompileOptionFromCustomMetadata<BOOL>(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t (*a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  result = pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomDataKey(this, a1);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomDataByKey(this, a1);
    v9 = *(unsigned __int8 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
    return a4(*a2, v9);
  }
  return result;
}

void sub_2300EA0F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::_BlendShape>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = MEMORY[0x2348B2188](v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF5B08;
  return result;
}

void std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF5B08;
}

char *std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF5B88;
  return result;
}

void std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF5B88;
}

void std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName((realityio::MeshModelDescriptorBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 13, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2300EA508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDescriptorBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

__n128 std::allocate_shared[abi:ne180100]<realityio::MeshModelDescriptorBuilder::MeshModelDataT,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDataT>,realityio::WrappedRERef<REMeshCompileOptions *>,pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>,std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,void>(_QWORD *a1, _QWORD *a2, _DWORD *a3, uint64_t a4, __n128 *a5)
{
  char *v10;
  __n128 result;

  v10 = (char *)operator new(0x68uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_24FDF0A08;
  *((_QWORD *)v10 + 3) = *a2;
  *a2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 8, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 9, a3 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_OWORD *)(v10 + 56) = *(_OWORD *)a4;
  *((_QWORD *)v10 + 9) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  result = *a5;
  *((__n128 *)v10 + 5) = *a5;
  *((_QWORD *)v10 + 12) = a5[1].n128_u64[0];
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  a5->n128_u64[0] = 0;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  std::string v16;
  void *__p[2];
  std::string::size_type v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v13 = std::string::append(&v16, "\" does not exist in the builder outputs");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v18 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v19, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v19;
    v15 = v21;
    *(_QWORD *)(a3 + 24) = v20;
    *(_QWORD *)(a3 + 32) = v15;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v21 + 7);
    LOBYTE(v15) = HIBYTE(v21);
    v21 = 0uLL;
    v20 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v15;
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 56);
    v10 = *(_QWORD *)(v8 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v11 = (unint64_t *)(v9 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v9;
  }
  std::mutex::unlock(v6);
}

void sub_2300EA820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityBuilder::kInputName(realityio::EntityBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "entity");
    realityio::EntityBuilder::kInputName(void)::kInputName = (uint64_t)v3;
  }
  return realityio::EntityBuilder::kInputName(void)::kInputName;
}

void sub_2300EA8CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityBuilder::kRootEntityInputName(realityio::EntityBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "rootEntity");
    realityio::EntityBuilder::kRootEntityInputName(void)::kRootEntityInputName = (uint64_t)v3;
  }
  return realityio::EntityBuilder::kRootEntityInputName(void)::kRootEntityInputName;
}

void sub_2300EA980(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityBuilder::kPrimPathInputName(realityio::EntityBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_255E54B50);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_255E54B50))
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "primPath");
    _MergedGlobals_38 = (uint64_t)v3;
    __cxa_guard_release(&qword_255E54B50);
  }
  return _MergedGlobals_38;
}

void sub_2300EAA34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_255E54B50);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityBuilder::kOutputName(realityio::EntityBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "entity");
    realityio::EntityBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::EntityBuilder::kOutputName(void)::kOutputName;
}

void sub_2300EAAE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityBuilder::kPrimPathOutputName(realityio::EntityBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "primPath");
    realityio::EntityBuilder::kPrimPathOutputName(void)::kPrimPathOutputName = (uint64_t)v3;
  }
  return realityio::EntityBuilder::kPrimPathOutputName(void)::kPrimPathOutputName;
}

void sub_2300EAB9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::EntityBuilder *realityio::EntityBuilder::EntityBuilder(realityio::EntityBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "EntityBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kEntityBuilderIdentifier);
  realityio::generateEntityDirtyStageSubscription(&v12);
  v20[0] = &off_24FDF5C68;
  v21 = v20;
  v18[0] = &off_24FDF5D78;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDF5C08;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_WORD *)this + 144) = 0;
  *((_QWORD *)this + 37) = 0;
  return this;
}

void sub_2300EAD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityBuilder::EntityBuilder(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v20[4];
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *__p[2];
  char v25;
  void *v26[2];
  char v27;
  void **v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v26, "EntityBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kEntityBuilderIdentifier);
  v6 = operator new();
  memset(v20, 0, 24);
  realityio::DirtyStageSubscription::DirtyStageSubscription(v6, v20);
  v7 = (std::__shared_weak_count *)operator new();
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2628;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  v22 = v6;
  v23 = v7;
  v20[3] = 0;
  v21 = 0;
  v31[0] = &off_24FDF5DF8;
  v32 = v31;
  v29[0] = &off_24FDF5E78;
  v30 = v29;
  realityio::DynamicBuilder::DynamicBuilder((realityio::Builder *)a1, a2, (uint64_t)v26, (uint64_t)__p, &v22, (uint64_t)v31, (uint64_t)v29);
  v8 = v30;
  if (v30 == v29)
  {
    v9 = 4;
    v8 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v32;
  if (v32 == v31)
  {
    v11 = 4;
    v10 = v31;
    goto LABEL_10;
  }
  if (v32)
  {
    v11 = 5;
LABEL_10:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v12 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v28 = (void **)v20;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  *(_QWORD *)a1 = &off_24FDF5C08;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_WORD *)(a1 + 288) = 256;
  v18 = *a3;
  *(_QWORD *)(a1 + 296) = *a3;
  if (v18)
    RERetain();
  return a1;
}

void sub_2300EB09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  realityio::DynamicBuilder *v33;
  pxrInternal__aapl__pxrReserved__::SdfPath *v34;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v34);
  realityio::DynamicBuilder::~DynamicBuilder(v33);
  _Unwind_Resume(a1);
}

void realityio::EntityBuilder::run(realityio::EntityBuilder *this, realityio::Inputs *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 *v7;
  realityio::EntityBuilder *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 *v15;
  unint64_t *v16;
  unint64_t v17;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  realityio *IsValid;
  uint64_t *v21;
  uint64_t String;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _BOOL4 v28;
  realityio *v29;
  realityio::Inputs *v30;
  pxrInternal__aapl__pxrReserved__::UsdStage *v31;
  uint64_t Text;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  BOOL v37;
  realityio *v38;
  uint64_t v39;
  char *PrimPath;
  pxrInternal__aapl__pxrReserved__::SdfPath *v41;
  realityio::EntityBuilder *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  _QWORD *v48;
  std::string::size_type v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  pxrInternal__aapl__pxrReserved__::SdfPath *v54;
  unint64_t *v55;
  unint64_t v56;
  _DWORD *v57;
  realityio::EntityBuilder *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 *v63;
  unint64_t *v64;
  unint64_t v65;
  NSObject *v66;
  uint64_t v67;
  realityio::Inputs *v68;
  realityio::EntityBuilder *v69;
  uint64_t v70;
  realityio::EntityBuilder *v71;
  realityio *v72;
  realityio::Inputs *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  realityio::Inputs *v78;
  uint64_t v79;
  uint64_t v80;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v81;
  NSObject *v82;
  char v83;
  uint64_t v84;
  _QWORD *v85;
  BOOL v86;
  char v87;
  char v88;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t EmptyString;
  realityio::EntityBuilder *v91;
  uint64_t v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  __int128 *v96;
  realityio::EntityBuilder *v97;
  uint64_t v98;
  void *v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 *v102;
  __int128 v103;
  unint64_t Data;
  pxrInternal__aapl__pxrReserved__::TfToken *v106;
  const std::string *v107;
  uint64_t v108;
  void **v109;
  void **p_p;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  uint64_t v114;
  std::string v115;
  char v116;
  uint64_t IsPrototype;
  char v118;
  int v119;
  int v120;
  void *v121;
  uint64_t v122;
  pxrInternal__aapl__pxrReserved__ *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  realityio::Inputs *v127;
  void *__p;
  uint64_t v129;
  char v130;
  void **v131;
  __int128 buf;
  void *v133;
  char v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  v127 = a2;
  if (*((_BYTE *)this + 289))
  {
    v4 = *((_QWORD *)this + 2);
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *(_QWORD *)&v135 = v4;
    *((_QWORD *)&v135 + 1) = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = (__int128 *)realityio::EntityBuilder::kOutputName(this);
    realityio::Outputs::storeValue<realityio::WrappedRERef<REEntity *> &>(v4, v7, (uint64_t *)this + 37);
    if (v3)
    {
      v9 = (unint64_t *)&v3->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v12 = *((_QWORD *)this + 2);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *(_QWORD *)&v135 = v12;
    *((_QWORD *)&v135 + 1) = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = (__int128 *)realityio::EntityBuilder::kPrimPathOutputName(v8);
    *(_QWORD *)&buf = (char *)this + 280;
    realityio::Outputs::storeValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(v12, v15, &buf);
    if (v11)
    {
      v16 = (unint64_t *)&v11->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    return;
  }
  v18 = (realityio::Inputs *)((char *)a2 + 32);
  v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v19, v18);
  IsValid = (realityio *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v123);
  if ((IsValid & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::IsInPrototype(&v123);
    v21 = (uint64_t *)((char *)this + 280);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::EntityBuilder *)((char *)this + 280));
    if (*(char *)(String + 23) < 0)
    {
      if (!*(_QWORD *)(String + 8))
        goto LABEL_46;
    }
    else if (!*(_BYTE *)(String + 23))
    {
      goto LABEL_46;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v123, &v135);
    v24 = *v21;
    v25 = v135;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v135);
    v26 = *(_QWORD *)v127;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v123, &v135);
    v27 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v26 + 64, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v135);
    v28 = (_QWORD *)(v26 + 72) != v27 && *(_QWORD *)(*(_QWORD *)(v26 + 40) + 104 * v27[5] + 24) == (_QWORD)v135;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v29 = (realityio *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v135);
    if (v28 && v24 == v25)
    {
      v23 = *(id *)(realityio::logObjects(v29) + 24);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v30 = v127;
        v31 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)v127 + 8));
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v31, (realityio::Inputs *)((char *)v30 + 32));
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v135, &__p);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = Text;
        _os_log_impl(&dword_22FF26000, v23, OS_LOG_TYPE_INFO, "Skipping prim at path (%s) because the entity has already been created.\n", (uint8_t *)&buf, 0xCu);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
        if ((v137 & 7) != 0)
        {
          v33 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
          do
            v34 = __ldxr(v33);
          while (__stlxr(v34 - 2, v33));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v136);
        if (*((_QWORD *)&v135 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v135 + 1));
      }
    }
    else
    {
      v35 = *(_QWORD *)v127;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v123, &v135);
      v36 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v35 + 64, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v135);
      v37 = (_QWORD *)(v35 + 72) != v36 && *(_QWORD *)(*(_QWORD *)(v35 + 40) + 104 * v36[5] + 24) == (_QWORD)v135;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      v38 = (realityio *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v135);
      if (v37 || v24 == v25)
      {
LABEL_46:
        PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v123);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v122, PrimPath);
        v41 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v122 + 1, (_DWORD *)PrimPath + 1);
        v42 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v41);
        if (v122 == *(_QWORD *)v42)
        {
          v44 = *((_QWORD *)this + 2);
          v43 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
          *(_QWORD *)&buf = v44;
          *((_QWORD *)&buf + 1) = v43;
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v47 = (void *)realityio::EntityBuilder::kOutputName(v42);
          v115.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v127 + 5)
                                                                                              + 16)
                                                                                + 16))(*(_QWORD *)(*((_QWORD *)v127 + 5) + 16));
          if (v115.__r_.__value_.__r.__words[0])
            RERetain();
          std::mutex::lock((std::mutex *)(v44 + 64));
          v48 = operator new(0x28uLL);
          v48[1] = 0;
          v48[2] = 0;
          *v48 = &off_24FDF5EF8;
          v49 = v115.__r_.__value_.__r.__words[0];
          __p = (void *)v115.__r_.__value_.__r.__words[0];
          v115.__r_.__value_.__r.__words[0] = 0;
          v48[3] = &off_24FDF5F48;
          v48[4] = v49;
          if (v49)
            RERetain();
          realityio::WrappedRERef<REEntity *>::~WrappedRERef(&__p);
          *(_QWORD *)&v135 = v48 + 3;
          *((_QWORD *)&v135 + 1) = v48;
          __p = v47;
          v50 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v44 + 40), (const void **)v47, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
          std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v50 + 7), &v135);
          v51 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
          if (*((_QWORD *)&v135 + 1))
          {
            v52 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v44, (unsigned __int8 *)v47, (uint64_t)v47);
          std::mutex::unlock((std::mutex *)(v44 + 64));
          v54 = (pxrInternal__aapl__pxrReserved__::SdfPath *)realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v115);
          if (v43)
          {
            v55 = (unint64_t *)&v43->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v57 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v54);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 280, v57);
          v58 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 284, v57 + 1);
          v60 = *((_QWORD *)this + 2);
          v59 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
          *(_QWORD *)&v135 = v60;
          *((_QWORD *)&v135 + 1) = v59;
          if (v59)
          {
            v61 = (unint64_t *)&v59->__shared_owners_;
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
          }
          v63 = (__int128 *)realityio::EntityBuilder::kPrimPathOutputName(v58);
          *(_QWORD *)&buf = v21;
          realityio::Outputs::storeValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(v60, v63, &buf);
          if (v59)
          {
            v64 = (unint64_t *)&v59->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          goto LABEL_134;
        }
        v66 = *(id *)(realityio::logObjects(v42) + 24);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
        {
          v67 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v122);
          LODWORD(v135) = 136315138;
          *(_QWORD *)((char *)&v135 + 4) = v67;
          _os_log_impl(&dword_22FF26000, v66, OS_LOG_TYPE_INFO, "Updating entity with path: %s\n", (uint8_t *)&v135, 0xCu);
        }

        v68 = v127;
        v70 = realityio::EntityBuilder::kInputName(v69);
        realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)v68, v70, (uint64_t)&v135);
        if ((_BYTE)v135)
        {
          v71 = (realityio::EntityBuilder *)*((_QWORD *)&v135 + 1);
          v121 = (void *)*((_QWORD *)&v135 + 1);
          if (*((_QWORD *)&v135 + 1))
          {
            v72 = (realityio *)RERetain();
            goto LABEL_86;
          }
        }
        else
        {
          v121 = 0;
        }
        v73 = v127;
        v74 = realityio::EntityBuilder::kRootEntityInputName(v71);
        realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)v73, v74, (uint64_t)&buf);
        if ((_BYTE)buf)
        {
          __p = (void *)*((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
          {
            RERetain();
            v75 = __p;
          }
          else
          {
            v75 = 0;
          }
        }
        else
        {
          v75 = 0;
          __p = 0;
        }
        v77 = v121;
        if (v121 != v75)
        {
          v121 = v75;
          __p = v77;
        }
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&__p);
        v72 = (realityio *)realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&buf);
        if (!v121)
        {
          v82 = *(id *)(realityio::logObjects(v72) + 24);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
          {
            v114 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v122);
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = v114;
            _os_log_error_impl(&dword_22FF26000, v82, OS_LOG_TYPE_ERROR, "Unable to create entity at path (%s) because an ancestor entity does not exist.\n", (uint8_t *)&buf, 0xCu);
          }

          realityio::EntityBuilder::_clearEntity(this, v127);
          goto LABEL_133;
        }
LABEL_86:
        v78 = v127;
        v79 = realityio::EntityBuilder::kPrimPathInputName(v72);
        realityio::Inputs::_getValue<pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)v78, v79, (uint64_t)&buf);
        if ((_BYTE)buf)
        {
          v80 = *((_QWORD *)&buf + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v119, *((_DWORD **)&buf + 1));
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v120, (_DWORD *)(v80 + 4));
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "/");
          MEMORY[0x2348B26F8](&v119, &__p);
          if (v130 < 0)
            operator delete(__p);
        }
        v118 = 0;
        IsPrototype = pxrInternal__aapl__pxrReserved__::UsdPrim::IsPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v123, v81);
        v83 = pxrInternal__aapl__pxrReserved__::UsdPrim::IsInPrototype(&v123);
        v84 = *(_QWORD *)v127;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v123, &__p);
        v85 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v84 + 64, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        v86 = (_QWORD *)(v84 + 72) != v85 && *(_QWORD *)(*(_QWORD *)(v84 + 40) + 104 * v85[5] + 24) == (_QWORD)__p;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
        if ((_BYTE)IsPrototype)
          v87 = 1;
        else
          v87 = v86;
        if ((v87 & 1) == 0)
        {
          if (*v21 == v122)
            realityio::EntityBuilder::_clearEntity(this, v127);
          realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)((char *)&IsPrototype + 1), (uint64_t *)&v121);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 280, &v119);
          v91 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 284, &v120);
          *((_BYTE *)this + 288) = 0;
          v93 = (void *)*((_QWORD *)this + 2);
          v92 = *((_QWORD *)this + 3);
          __p = v93;
          v129 = v92;
          if (v92)
          {
            v94 = (unint64_t *)(v92 + 8);
            do
              v95 = __ldxr(v94);
            while (__stxr(v95 + 1, v94));
          }
          v96 = (__int128 *)realityio::EntityBuilder::kOutputName(v91);
          realityio::Outputs::storeValue<realityio::WrappedRERef<REEntity *> &>((uint64_t)v93, v96, (uint64_t *)((char *)&IsPrototype + 1));
          v97 = (realityio::EntityBuilder *)std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
          v99 = (void *)*((_QWORD *)this + 2);
          v98 = *((_QWORD *)this + 3);
          __p = v99;
          v129 = v98;
          if (v98)
          {
            v100 = (unint64_t *)(v98 + 8);
            do
              v101 = __ldxr(v100);
            while (__stxr(v101 + 1, v100));
          }
          v102 = (__int128 *)realityio::EntityBuilder::kPrimPathOutputName(v97);
          v115.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 280;
          realityio::Outputs::storeValue<pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)v99, v102, &v115);
          std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
          goto LABEL_130;
        }
        v88 = v83 ^ 1;
        if ((_BYTE)IsPrototype)
          v88 = 0;
        v116 = v88;
        Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v123);
        if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
        if (*(char *)(EmptyString + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
        }
        else
        {
          v103 = *(_OWORD *)EmptyString;
          v115.__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
          *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v103;
        }
        Data = atomic_load(MEMORY[0x24BEE7E98]);
        if (!Data)
          Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData(MEMORY[0x24BEE7E98]);
        if (!atomic_load(&realityio::tokens::EntityBuilderTokens))
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EntityBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EntityBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::EntityBuilderTokens);
        v106 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v123, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(Data + 72));
        if ((_DWORD)v106)
        {
          v107 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v106);
          std::string::operator=(&v115, v107);
        }
        v108 = *((_QWORD *)v127 + 6);
        v109 = (void **)operator new(0x50uLL);
        *v109 = &off_24FDF5FF8;
        v109[1] = (char *)&IsPrototype + 1;
        v109[2] = &IsPrototype;
        v109[3] = &v127;
        v109[4] = &v121;
        v109[5] = this;
        v109[6] = &v115;
        v109[7] = &v123;
        v109[8] = &v122;
        v109[9] = &v116;
        v131 = v109;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v108 + 16))(v108, &__p);
        p_p = v131;
        if (v131 == &__p)
        {
          v111 = 4;
          p_p = &__p;
        }
        else
        {
          if (!v131)
            goto LABEL_128;
          v111 = 5;
        }
        (*((void (**)(void))*p_p + v111))();
LABEL_128:
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v115.__r_.__value_.__l.__data_);
LABEL_130:
        realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)((char *)&IsPrototype + 1));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v119);
        if (!(_BYTE)buf && v134 < 0)
          operator delete(v133);
LABEL_133:
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v121);
        realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v135);
LABEL_134:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v122);
        goto LABEL_135;
      }
      v23 = *(id *)(realityio::logObjects(v38) + 24);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        realityio::Inputs::prim((uint64_t *)&v135, v127);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v135, &__p);
        v39 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v39;
        _os_log_impl(&dword_22FF26000, v23, OS_LOG_TYPE_INFO, "Skipping prim at path (%s) because the ancestor entity has already being returned.\n", (uint8_t *)&buf, 0xCu);
        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v135);
      }
    }
  }
  else
  {
    v23 = *(id *)(realityio::logObjects(IsValid) + 24);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v123, &buf);
      v76 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&buf);
      LODWORD(v135) = 136315138;
      *(_QWORD *)((char *)&v135 + 4) = v76;
      _os_log_error_impl(&dword_22FF26000, v23, OS_LOG_TYPE_ERROR, "Skipping prim at path (%s) because the prim is invalid.\n", (uint8_t *)&v135, 0xCu);
      pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&buf);
    }
  }

LABEL_135:
  if ((v126 & 7) != 0)
  {
    v112 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
    do
      v113 = __ldxr(v112);
    while (__stlxr(v113 - 2, v112));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v125);
  if (v124)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v124);
}

void sub_2300EBE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,uint64_t a25,__int16 a26,char a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  uint64_t v53;

  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a25);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result(v53 - 144);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a26);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a30);
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<realityio::WrappedRERef<REEntity *> &>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  std::mutex *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 *v12;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  std::allocate_shared[abi:ne180100]<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>,std::allocator<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>,realityio::WrappedRERef<REEntity *>&,void>(a3, &v11);
  v12 = a2;
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v7 + 7), &v11);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_2300EC1A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 *v12;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x28uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDF5F78;
  v7[3] = &off_24FDF5FC8;
  v7[4] = *a3;
  v12 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
  v9 = (std::__shared_weak_count *)v8[8];
  v8[7] = (uint64_t)(v7 + 3);
  v8[8] = (uint64_t)v7;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_2300EC300(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsInPrototype(pxrInternal__aapl__pxrReserved__ **this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  pxrInternal__aapl__pxrReserved__ *v3;
  unint64_t v4;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this);
    JUMPOUT(0x2348B277CLL);
  }
  v3 = this[1];
  if (!v3 || (v4 = *((_QWORD *)v3 + 7), (v4 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v3, v2);
    v4 = *((_QWORD *)v3 + 7);
  }
  return (v4 >> 12) & 1;
}

_QWORD *realityio::EntityBuilder::_clearEntity(realityio::EntityBuilder *this, realityio::Inputs *a2)
{
  char v2;
  std::__shared_weak_count *v5;
  std::mutex *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void **v9;
  realityio::EntityBuilder *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  const void **v17;
  pxrInternal__aapl__pxrReserved__::SdfPath *v18;
  unint64_t *v19;
  unint64_t v20;
  realityio::EntityBuilder *v21;
  uint64_t v22;
  uint64_t v23;
  std::mutex *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const void **v28;
  realityio::EntityBuilder *v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::string::size_type v34;
  unint64_t *v35;
  unint64_t v36;
  const void **v37;
  unint64_t *v38;
  unint64_t v39;
  std::string::size_type size;
  __int128 v42;
  std::string v43;
  std::string v44;
  std::string __p;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v6 = (std::mutex *)*((_QWORD *)this + 2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *(_QWORD *)&v42 = v6;
  *((_QWORD *)&v42 + 1) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (const void **)realityio::EntityBuilder::kOutputName(this);
  v10 = (realityio::EntityBuilder *)realityio::Outputs::getValue<realityio::WrappedRERef<REEntity *>>(v6, v9, &v44);
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (!v44.__r_.__value_.__s.__data_[0])
    goto LABEL_21;
  v14 = *((_QWORD *)this + 2);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *(_QWORD *)&v42 = v14;
  *((_QWORD *)&v42 + 1) = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (const void **)realityio::EntityBuilder::kOutputName(v10);
  std::mutex::lock((std::mutex *)(v14 + 64));
  if (v14 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v14 + 40, v17))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v14 + 40), v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v14, (unsigned __int8 *)v17);
  std::mutex::unlock((std::mutex *)(v14 + 64));
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*((_QWORD *)a2 + 4) != *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v18))
  {
    size = v44.__r_.__value_.__l.__size_;
    if (v44.__r_.__value_.__l.__size_)
      RERetain();
  }
  else
  {
LABEL_21:
    size = 0;
  }
  v21 = (realityio::EntityBuilder *)realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v44);
  if (size && *((_BYTE *)this + 288))
  {
    v22 = *((_QWORD *)a2 + 6);
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDF6078;
    v44.__r_.__value_.__l.__size_ = (std::string::size_type)&size;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 16))(v22, &v44);
    v21 = (realityio::EntityBuilder *)__p.__r_.__value_.__r.__words[0];
    if ((std::string *)__p.__r_.__value_.__l.__data_ == &v44)
    {
      v23 = 4;
      v21 = (realityio::EntityBuilder *)&v44;
    }
    else
    {
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_31;
      v23 = 5;
    }
    v21 = (realityio::EntityBuilder *)(*(uint64_t (**)(void))(*(_QWORD *)v21 + 8 * v23))();
  }
LABEL_31:
  v24 = (std::mutex *)*((_QWORD *)this + 2);
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = (const void **)realityio::EntityBuilder::kPrimPathOutputName(v21);
  realityio::Outputs::getRawValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(v24, v28, (uint64_t)&v44);
  v30 = v44.__r_.__value_.__s.__data_[0];
  if (!v44.__r_.__value_.__s.__data_[0])
  {
    v42 = *(_OWORD *)&v44.__r_.__value_.__r.__words[1];
    v29 = (realityio::EntityBuilder *)&v43;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v43, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v24 = (std::mutex *)v43.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      if (!v44.__r_.__value_.__s.__data_[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v43 = __p;
      v24 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (!v25)
    goto LABEL_44;
  v31 = (unint64_t *)&v25->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (!v30)
      goto LABEL_56;
  }
  else
  {
LABEL_44:
    if (!v30)
      goto LABEL_56;
  }
  v34 = *((_QWORD *)this + 2);
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v44.__r_.__value_.__r.__words[0] = v34;
  v44.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
  if (v33)
  {
    v35 = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = (const void **)realityio::EntityBuilder::kPrimPathOutputName(v29);
  std::mutex::lock((std::mutex *)(v34 + 64));
  if (v34 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v34 + 40, v37))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v34 + 40), v37);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v34, (unsigned __int8 *)v37);
  std::mutex::unlock((std::mutex *)(v34 + 64));
  if (v33)
  {
    v38 = (unint64_t *)&v33->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
LABEL_56:
  v44.__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 280, (int *)&v44);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this + 284);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44);
  *((_BYTE *)this + 288) = 0;
  if (!v30 && v2 < 0)
    operator delete(v24);
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef(&size);
}

void sub_2300EC79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a20 && a28 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a12);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityBuilder::clear(realityio::EntityBuilder *this, realityio::Inputs *a2)
{
  uint64_t result;

  result = (uint64_t)realityio::EntityBuilder::_clearEntity(this, a2);
  if (*((_BYTE *)this + 289))
  {
    result = *((_QWORD *)this + 37);
    if (result)
      result = RERelease();
    *((_QWORD *)this + 37) = 0;
  }
  return result;
}

void realityio::EntityBuilder::~EntityBuilder(realityio::EntityBuilder *this)
{
  realityio::EntityBuilder::~EntityBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  realityio::EntityBuilder *v2;
  uint64_t v3;
  realityio::EntityBuilder *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_QWORD *)this = &off_24FDF5C08;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)this + 37);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 280);
  *(_QWORD *)this = off_24FDE1CA0;
  v2 = (realityio::EntityBuilder *)*((_QWORD *)this + 34);
  if (v2 == (realityio::EntityBuilder *)((char *)this + 248))
  {
    v3 = 4;
    v2 = (realityio::EntityBuilder *)((char *)this + 248);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (realityio::EntityBuilder *)*((_QWORD *)this + 30);
  if (v4 == (realityio::EntityBuilder *)((char *)this + 216))
  {
    v5 = 4;
    v4 = (realityio::EntityBuilder *)((char *)this + 216);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  v6 = *((_QWORD *)this + 24);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = *((_QWORD *)this + 23);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF5C68;
  return result;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF5C68;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  realityio::EntityBuilder *v6;
  uint64_t v7;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  realityio::EntityBuilder *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  realityio::EntityBuilder *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  v4 = (char *)operator new(0x40uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24FDE1E30;
  *(_OWORD *)(v4 + 24) = 0u;
  v5 = (uint64_t)(v4 + 24);
  *(_OWORD *)(v4 + 40) = 0u;
  *((_DWORD *)v4 + 14) = 1065353216;
  v6 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
  if (*a1 == *(_QWORD *)v6)
  {
    *a2 = v5;
    a2[1] = (uint64_t)v4;
  }
  else
  {
    v7 = realityio::EntityBuilder::kInputName(v6);
    Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
    LODWORD(v44) = 0;
    v9 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = (realityio::EntityBuilder *)realityio::InputsDescriptor::addInputDescriptor(v5, &v46);
    v13 = v47;
    if (v47)
    {
      v14 = (unint64_t *)&v47->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = realityio::EntityBuilder::kPrimPathInputName(v12);
    v17 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
    if (!v17)
      v17 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
    LODWORD(v42) = 1;
    v18 = v45;
    if (v45)
    {
      v19 = (unint64_t *)&v45->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = (realityio::EntityBuilder *)realityio::InputsDescriptor::addInputDescriptor(v5, &v44);
    v22 = v45;
    if (v45)
    {
      v23 = (unint64_t *)&v45->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)realityio::EntityBuilder::kRootEntityInputName(v21);
    v26 = (uint64_t)v25;
    v27 = atomic_load(&realityio::tokens::OutputIdentifiers);
    if (!v27)
    {
      v25 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
      v27 = (unint64_t)v25;
    }
    v28 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v25);
    v41 = 0;
    std::allocate_shared[abi:ne180100]<realityio::StaticPrimInputDescriptor,std::allocator<realityio::StaticPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::InputDescriptor::Optionality,void>(v26, (uint64_t *)(v27 + 64), v28, &v41, &v42);
    v29 = v43;
    if (v43)
    {
      v30 = (unint64_t *)&v43->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    realityio::InputsDescriptor::addInputDescriptor(v5, &v42);
    v32 = v43;
    if (v43)
    {
      v33 = (unint64_t *)&v43->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    *a2 = v5;
    a2[1] = (uint64_t)v4;
    if (v29)
    {
      v35 = (unint64_t *)&v29->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v18)
    {
      v37 = (unint64_t *)&v18->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v9)
    {
      v39 = (unint64_t *)&v9->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_2300ECD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (v18)
  {
    v23 = (unint64_t *)&v18->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v17)
  {
    v25 = (unint64_t *)&v17->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v16)
  {
    v27 = (unint64_t *)&v16->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v29 = __ldaxr(v19);
  while (__stlxr(v29 - 1, v19));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::make_shared[abi:ne180100]<`anonymous namespace'::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(_QWORD *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  std::string __p;
  std::string v12;

  v8 = operator new(0x48uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24FDF5CD8;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v9 = *a4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v12 = __p;
  v10 = v8 + 3;
  realityio::InputDescriptor::InputDescriptor((uint64_t)(v8 + 3), (__int128 *)&v12, a3, v9);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *v10 = &off_24FDF5D28;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = v10;
  a1[1] = v8;
}

void sub_2300ED02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;

  if (a14 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<`anonymous namespace'::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF5CD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF5CD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor::~ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor(_anonymous_namespace_::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *`anonymous namespace'::ParentEntitySpawningPrimOfCurrentEntitySpawningPrimInputDescriptor::resolvedPrimPaths@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X2>, const realityio::internal::PrimToEntityMap *a2@<X3>, uint64_t a3@<X8>)
{
  char *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v8 = (char *)a2 + 48;
  result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2 + 48, a1);
  if ((_QWORD *)((char *)a2 + 56) != result)
  {
    v10 = *((_QWORD *)a2 + 3);
    if (v10)
    {
      v11 = v10 + 104 * result[5];
      v13 = *(_QWORD *)(v11 + 24);
      v12 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 24);
      if (v13 == *(_QWORD *)a1)
      {
        result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v8, v12);
        if ((_QWORD *)((char *)a2 + 56) != result)
        {
          v14 = result[5];
          if (v14 < (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3)
          {
            v15 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v14);
            if (v15 != -1)
            {
              v16 = *((_QWORD *)a2 + 3);
              v17 = 0x4EC4EC4EC4EC4EC5 * ((*((_QWORD *)a2 + 4) - v16) >> 3);
              v18 = v16 + 104 * v15;
              if (v17 <= v15)
                v19 = 0;
              else
                v19 = v18;
              return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, (unsigned int *)(v19 + 24), (_DWORD *)(v19 + 24));
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_2300ED1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF5D78;
  return result;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF5D78;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL8 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  std::string::size_type v28;
  std::__shared_weak_count *v29;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::EntityBuilder::kOutputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v26) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 8, (int *)&v26, &v28);
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = realityio::OutputsDescriptor::addOutputDescriptor(v3, &v28);
  v10 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::EntityBuilder::kPrimPathOutputName((realityio::EntityBuilder *)v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v25 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v13, (std::string::size_type *)v14 + 20, &v25, &v26);
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v26);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2300ED48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;

  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v19 = __ldaxr(v15);
  while (__stlxr(v19 - 1, v15));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF5DF8;
  return result;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF5DF8;
}

char *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF5E78;
  return result;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF5E78;
}

void std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL8 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  std::string::size_type v28;
  std::__shared_weak_count *v29;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::EntityBuilder::kOutputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v26) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 8, (int *)&v26, &v28);
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = realityio::OutputsDescriptor::addOutputDescriptor(v3, &v28);
  v10 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::EntityBuilder::kPrimPathOutputName((realityio::EntityBuilder *)v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v25 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v13, (std::string::size_type *)v14 + 20, &v25, &v26);
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v26);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2300ED980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;

  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v19 = __ldaxr(v15);
  while (__stlxr(v19 - 1, v15));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1,std::allocator<realityio::EntityBuilder::EntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::WrappedRERef<REEntity *> const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>,std::allocator<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>,realityio::WrappedRERef<REEntity *>&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::__shared_ptr_emplace[abi:ne180100]<realityio::WrappedRERef<REEntity *>&,std::allocator<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2300EDB3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::__shared_ptr_emplace[abi:ne180100]<realityio::WrappedRERef<REEntity *>&,std::allocator<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDF5EF8;
  std::allocator<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::construct[abi:ne180100]<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>,realityio::WrappedRERef<REEntity *>&>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_2300EDB98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF5EF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF5EF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_24FDF5F48;
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 32));
}

_QWORD *std::allocator<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>>::construct[abi:ne180100]<realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>,realityio::WrappedRERef<REEntity *>&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;

  v4 = *a3;
  v6 = v4;
  if (v4)
  {
    RERetain();
    *a2 = &off_24FDF5F48;
    a2[1] = v4;
    RERetain();
  }
  else
  {
    *a2 = &off_24FDF5F48;
    a2[1] = 0;
  }
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v6);
}

void sub_2300EDC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::InputOutputWrapperObject<realityio::WrappedRERef<REEntity *>>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<pxrInternal__aapl__pxrReserved__::SdfPath *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF5F78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<pxrInternal__aapl__pxrReserved__::SdfPath *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF5F78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<pxrInternal__aapl__pxrReserved__::SdfPath *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void realityio::Inputs::_getValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type size;
  char v4;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  uint64_t String;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  std::mutex *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::mutex *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  const void **EmptyString;
  __int128 v39;
  int v40;
  int v41;
  BOOL v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  std::string v52;
  std::string v53;
  std::string v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  void *__p[2];
  std::string v59;
  _BYTE v60[48];

  v55 = 0;
  v56 = 0;
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (v8)
  {
    v56 = std::__shared_weak_count::lock(v8);
    if (v56)
      v55 = *(_QWORD *)(a1 + 16);
  }
  MEMORY[0x2348B2764](&v57, a2);
  v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a1 + 8), &v55);
  if (v9 == v10)
  {
    std::operator+<char>();
    v22 = std::string::append(&v52, ") at prim path (");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    v25 = *(char *)(String + 23);
    if (v25 >= 0)
      v26 = (const std::string::value_type *)String;
    else
      v26 = *(const std::string::value_type **)String;
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(String + 23);
    else
      v27 = *(_QWORD *)(String + 8);
    v28 = std::string::append(&v53, v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v54, ")");
LABEL_22:
    v30 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v30;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v60, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v60;
    v31 = *(_QWORD *)&v60[24];
    *(_QWORD *)(a3 + 24) = *(_QWORD *)&v60[16];
    *(_QWORD *)(a3 + 32) = v31;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)&v60[31];
    LOBYTE(v31) = v60[39];
    memset(&v60[16], 0, 24);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v31;
    if (v59.__r_.__value_.__s.__data_[7] < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    {
      v32 = (std::mutex *)v52.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v32);
      goto LABEL_58;
    }
    goto LABEL_58;
  }
  v11 = 1;
  v12 = v9;
  do
  {
    v12 = (_QWORD *)*v12;
    --v11;
  }
  while (v12 != v10);
  if (v11)
  {
    std::operator+<char>();
    v13 = std::string::append(&v52, ") at prim path (");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    v16 = *(char *)(v15 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)v15;
    else
      v17 = *(const std::string::value_type **)v15;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(v15 + 23);
    else
      v18 = *(_QWORD *)(v15 + 8);
    v19 = std::string::append(&v53, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v54, ") because more than one connected builder produced the same output type");
    goto LABEL_22;
  }
  v33 = v9[5];
  v35 = *(std::mutex **)(v33 + 16);
  v34 = *(std::__shared_weak_count **)(v33 + 24);
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  v54.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (const void **)((v9[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v9);
  realityio::Outputs::getRawValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(v35, EmptyString, (uint64_t)v60);
  v40 = v60[0];
  if (v60[0])
  {
    *(_QWORD *)&v39 = *(_QWORD *)&v60[8];
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&v60[8];
    if ((v60[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)&v60[24], *(std::string::size_type *)&v60[32]);
      if (v60[0])
        v42 = 0;
      else
        v42 = v60[47] < 0;
      v41 = v42;
    }
    else
    {
      v41 = 0;
      v59 = *(std::string *)&v60[24];
    }
    v39 = *(_OWORD *)__p;
    size = v59.__r_.__value_.__l.__size_;
    v35 = (std::mutex *)v59.__r_.__value_.__r.__words[0];
    LODWORD(v53.__r_.__value_.__l.__data_) = v59.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v53.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v59.__r_.__value_.__r.__words[2] + 3);
    v4 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    if (v41)
    {
      v50 = *(_OWORD *)__p;
      operator delete(*(void **)&v60[24]);
      v39 = v50;
    }
  }
  if (!v34)
    goto LABEL_53;
  v43 = (unint64_t *)&v34->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    v51 = v39;
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v39 = v51;
    if (v40)
      goto LABEL_54;
  }
  else
  {
LABEL_53:
    if (v40)
    {
LABEL_54:
      *(_BYTE *)a3 = 1;
      *(_QWORD *)(a3 + 8) = v39;
      goto LABEL_58;
    }
  }
  *(_OWORD *)v60 = v39;
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v60[16], (const std::string::value_type *)v35, size);
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v60;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v60[16];
    *(_QWORD *)(a3 + 40) = *(_QWORD *)&v60[32];
    v32 = v35;
    goto LABEL_30;
  }
  *(_QWORD *)&v60[16] = v35;
  *(_QWORD *)&v60[24] = size;
  *(_DWORD *)&v60[32] = v53.__r_.__value_.__l.__data_;
  *(_DWORD *)&v60[35] = *(_DWORD *)((char *)v53.__r_.__value_.__r.__words + 3);
  v60[39] = v4;
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v60;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)&v60[16];
  *(_QWORD *)(a3 + 40) = *(_QWORD *)&v60[32];
LABEL_58:
  if ((v57 & 7) != 0)
  {
    v45 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = v56;
  if (v56)
  {
    v48 = (unint64_t *)&v56->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_2300EE138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  unsigned int *v35;
  unsigned int v36;

  operator delete(v33);
  if ((a33 & 7) != 0)
  {
    v35 = (unsigned int *)(a33 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::EntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::EntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24FDF5FF8;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::EntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDF5FF8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<realityio::EntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *Object;
  const char *Text;
  char *v9;
  uint64_t v10;
  realityio::EntityBuilder *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 *v16;
  realityio::EntityBuilder *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 *v24;
  realityio *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 buf;
  __int128 *p_buf;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v38 = 0;
  v3 = REEntityCreate();
  RENetworkComponentGetComponentType();
  *(_QWORD *)&buf = &off_24FDEEC60;
  p_buf = &buf;
  v39 = REEntityGetOrAddComponentByClass();
  if (!p_buf)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(__int128 *, uint64_t *))(*(_QWORD *)p_buf + 48))(p_buf, &v39);
  RENetworkMarkComponentDirty();
  v4 = p_buf;
  if (p_buf == &buf)
  {
    v5 = 4;
    v4 = &buf;
  }
  else
  {
    if (!p_buf)
      goto LABEL_7;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_7:
  v38 = v3;
  realityio::WrappedRERef<REAsset *>::operator=(*(_QWORD **)(a1 + 8), &v38);
  RERelease();
  if (**(_BYTE **)(a1 + 16))
    realityio::ImportSessionImpl::getPrototypeEntityRoot(*(realityio::ImportSessionImpl **)(*(_QWORD *)(**(_QWORD **)(a1 + 24) + 40)
                                                                                          + 16));
  REEntitySetParent();
  *(_BYTE *)(v2 + 288) = 1;
  REEntitySetName();
  if (REComponentClassFromName())
  {
    v6 = REEntityGetOrAddComponentByClass();
    realityio::Builder::addComponent((uint64_t *)v2, v6);
    Object = (_QWORD *)RECustomComponentGetObject();
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 56), &buf);
    Text = (const char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&buf);
    if (*Object)
    {
      RECIntrospectionFree();
      *Object = 0;
    }
    if (Text)
    {
      strlen(Text);
      v9 = (char *)RECIntrospectionAlloc();
      *Object = v9;
      strcpy(v9, Text);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 56), &buf);
  v10 = v2 + 280;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v2 + 280, (int *)&buf);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v2 + 284);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v11 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf);
  v13 = *(_QWORD *)(v2 + 16);
  v12 = *(std::__shared_weak_count **)(v2 + 24);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (__int128 *)realityio::EntityBuilder::kOutputName(v11);
  realityio::Outputs::storeValue<realityio::WrappedRERef<REEntity *> &>(v13, v16, *(uint64_t **)(a1 + 8));
  if (v12)
  {
    v18 = (unint64_t *)&v12->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v21 = *(_QWORD *)(v2 + 16);
  v20 = *(std::__shared_weak_count **)(v2 + 24);
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (__int128 *)realityio::EntityBuilder::kPrimPathOutputName(v17);
  *(_QWORD *)&buf = v10;
  realityio::Outputs::storeValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(v21, v24, &buf);
  if (v20)
  {
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v28 = *(id *)(realityio::logObjects(v25) + 24);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 64));
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v29;
    _os_log_impl(&dword_22FF26000, v28, OS_LOG_TYPE_INFO, "Created and parented new entity for prim path: %s\n", (uint8_t *)&buf, 0xCu);
  }

  if (**(_BYTE **)(a1 + 72))
  {
    MEMORY[0x2348B0A30](**(_QWORD **)(a1 + 8), 0);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(_QWORD *)&buf = MEMORY[0x24BEE9D70] + 16;
    realityio::LiveSceneManager::enableEntityOnCompletion(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 24) + 40) + 16) + 40), *(uint64_t **)(a1 + 8));
    if (*((_QWORD *)&buf + 1)
      && (*(_BYTE *)(*((_QWORD *)&buf + 1) + 57) & 8) == 0
      && (*(unsigned int (**)(__int128 *))(buf + 32))(&buf))
    {
      v38 = 0x7FF8000000000000;
      pxrInternal__aapl__pxrReserved__::UsdGeomImageable::ComputeVisibility((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&buf, (const pxrInternal__aapl__pxrReserved__::UsdTimeCode *)&v38);
      MEMORY[0x2348B274C](&v37, "invisible");
      v30 = v39;
      v31 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      if ((v37 & 7) != 0)
      {
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
        v33 = v39;
      }
      else
      {
        v33 = v39;
      }
      v34 = v30 & 0xFFFFFFFFFFFFFFF8;
      if ((v33 & 7) != 0)
      {
        v35 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((unsigned int *)v34 == v31)
      {
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RERenderOptionsComponentSetVisibilityMode();
      }
    }
    MEMORY[0x2348B205C](&buf);
  }
}

void sub_2300EE754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  unsigned int *v6;
  unsigned int v7;
  va_list va;

  va_start(va, a5);
  if ((a5 & 7) != 0)
  {
    v6 = (unsigned int *)(a5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  MEMORY[0x2348B205C](va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::EntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF6078;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF6078;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0>,void ()(void)>::operator()()
{
  return REEntitySetParent();
}

uint64_t std::__function::__func<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0,std::allocator<realityio::EntityBuilder::_clearEntity(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::Outputs::getRawValue<pxrInternal__aapl__pxrReserved__::SdfPath *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    v11 = v17;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    v17 = 0uLL;
    v16 = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_2300EEAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  if (a15 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void realityio::tokens::MeshBuilderTokens_StaticTokenType::~MeshBuilderTokens_StaticTokenType(realityio::tokens::MeshBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  void **v49;

  v49 = (void **)((char *)this + 128);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v49);
  v2 = *((_QWORD *)this + 15);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 14);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 13);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 12);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 11);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 10);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 9);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 8);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 7);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 6);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *((_QWORD *)this + 5);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *((_QWORD *)this + 4);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *((_QWORD *)this + 3);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *((_QWORD *)this + 2);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *((_QWORD *)this + 1);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v47 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
}

realityio::tokens::MeshBuilderTokens_StaticTokenType *realityio::tokens::MeshBuilderTokens_StaticTokenType::MeshBuilderTokens_StaticTokenType(realityio::tokens::MeshBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v61 = (uint64_t *)(MEMORY[0x2348B2758](this, "displayColor", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 56, "UsdPrimvarReader_float2", 0);
  MEMORY[0x2348B2758]((char *)this + 64, "varname", 0);
  MEMORY[0x2348B2758]((char *)this + 72, "mtlx", 0);
  MEMORY[0x2348B2758]((char *)this + 80, "geomprop", 0);
  MEMORY[0x2348B2758]((char *)this + 88, "xformOp", 0);
  MEMORY[0x2348B2758]((char *)this + 96, "xformOpOrder", 0);
  MEMORY[0x2348B2758]((char *)this + 104, "material:binding", 0);
  MEMORY[0x2348B2758]((char *)this + 112, "importAllMeshAttributes", 0);
  MEMORY[0x2348B2758]((char *)this + 120, "index", 0);
  v2 = *(_QWORD *)this;
  v62 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v61;
  v63 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v64 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v65 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v66 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v67 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v68 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v69 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v70 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v71 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v72 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  v35 = *((_QWORD *)this + 11);
  v73 = v35;
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 2, v36));
    if ((v37 & 1) == 0)
      v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  v38 = *((_QWORD *)this + 12);
  v74 = v38;
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 2, v39));
    if ((v40 & 1) == 0)
      v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  v41 = *((_QWORD *)this + 13);
  v75 = v41;
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 2, v42));
    if ((v43 & 1) == 0)
      v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  v44 = *((_QWORD *)this + 14);
  v76 = v44;
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 2, v45));
    if ((v46 & 1) == 0)
      v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  v47 = *((_QWORD *)this + 15);
  v77 = v47;
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 2, v48));
    if ((v49 & 1) == 0)
      v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  v50 = operator new(0x80uLL);
  v51 = 0;
  *((_QWORD *)this + 16) = v50;
  *((_QWORD *)this + 17) = v50;
  *((_QWORD *)this + 18) = v50 + 16;
  do
  {
    v52 = *(&v62 + v51);
    *v50 = v52;
    if ((v52 & 7) != 0)
    {
      v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 2, v53));
      if ((v54 & 1) == 0)
        *v50 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v51;
    ++v50;
  }
  while (v51 != 16);
  v55 = &v78;
  *((_QWORD *)this + 17) = v50;
  do
  {
    v57 = *--v55;
    v56 = v57;
    if ((v57 & 7) != 0)
    {
      v58 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v59 = __ldxr(v58);
      while (__stlxr(v59 - 2, v58));
    }
  }
  while (v55 != &v62);
  return this;
}

void sub_2300EF2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, _QWORD *a11, _QWORD *a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, _QWORD *a16, void **a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a17);
  v45 = (char *)&a35;
  while (1)
  {
    v47 = *((_QWORD *)v45 - 1);
    v45 -= 8;
    v46 = v47;
    if ((v47 & 7) != 0)
    {
      v48 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
      do
        v49 = __ldxr(v48);
      while (__stlxr(v49 - 2, v48));
    }
    if (v45 == &a19)
    {
      if ((*v41 & 7) != 0)
      {
        v50 = (unsigned int *)(*v41 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      if ((*v40 & 7) != 0)
      {
        v52 = (unsigned int *)(*v40 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if ((*v39 & 7) != 0)
      {
        v54 = (unsigned int *)(*v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
      if ((*v38 & 7) != 0)
      {
        v56 = (unsigned int *)(*v38 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      if ((*v37 & 7) != 0)
      {
        v58 = (unsigned int *)(*v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((*v36 & 7) != 0)
      {
        v60 = (unsigned int *)(*v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((*v44 & 7) != 0)
      {
        v62 = (unsigned int *)(*v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((*v43 & 7) != 0)
      {
        v64 = (unsigned int *)(*v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v42 & 7) != 0)
      {
        v66 = (unsigned int *)(*v42 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      if ((*a11 & 7) != 0)
      {
        v68 = (unsigned int *)(*a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v69 = __ldxr(v68);
        while (__stlxr(v69 - 2, v68));
      }
      if ((*a12 & 7) != 0)
      {
        v70 = (unsigned int *)(*a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      if ((*a13 & 7) != 0)
      {
        v72 = (unsigned int *)(*a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if ((*a14 & 7) != 0)
      {
        v74 = (unsigned int *)(*a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v75 = __ldxr(v74);
        while (__stlxr(v75 - 2, v74));
      }
      if ((*a15 & 7) != 0)
      {
        v76 = (unsigned int *)(*a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      if ((*a16 & 7) != 0)
      {
        v78 = (unsigned int *)(*a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      if ((*v35 & 7) != 0)
      {
        v80 = (unsigned int *)(*v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v81 = __ldxr(v80);
        while (__stlxr(v81 - 2, v80));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_2300EF598()
{
  JUMPOUT(0x2300EF498);
}

void sub_2300EF5A0()
{
  JUMPOUT(0x2300EF4BCLL);
}

void sub_2300EF5A8()
{
  JUMPOUT(0x2300EF4E0);
}

void sub_2300EF5B0()
{
  JUMPOUT(0x2300EF504);
}

void sub_2300EF5B8()
{
  JUMPOUT(0x2300EF528);
}

void sub_2300EF5C0()
{
  JUMPOUT(0x2300EF54CLL);
}

void sub_2300EF5C8()
{
  JUMPOUT(0x2300EF570);
}

uint64_t realityio::materialBindingCallback@<X0>(realityio *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdStage *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v12;
  BOOL v14;
  _QWORD *UsdPrimDefaultPredicate;
  uint64_t v16;
  BOOL v17;
  char IsValid;
  unsigned int *v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *v21;
  int IsA;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v35;
  int IsEntityProviding;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t result;
  char v44[8];
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  int v57;
  char v58;
  char v59;
  char v60[8];
  uint64_t v61;
  _QWORD v62[3];
  char v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  v6 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v62[1] = 0;
  v62[2] = 0;
  v63 = 0;
  v7 = v65;
  if (!v65)
    goto LABEL_20;
  v8 = *(_QWORD *)(v65 + 40) & 7;
  v9 = *(_QWORD *)(v65 + 40) & 0xFFFFFFFFFFFFFFF8;
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 0;
  if (v10)
    goto LABEL_21;
  if (!v8 || v9 == 0)
  {
LABEL_20:
    v9 = 0;
  }
  else
  {
    while (1)
    {
      v12 = *(_QWORD *)(v9 + 40);
      v9 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 7) == 0 && v9 != 0)
        break;
      if (v9)
        v14 = (v12 & 7) == 0;
      else
        v14 = 1;
      if (v14)
        goto LABEL_20;
    }
  }
LABEL_21:
  UsdPrimDefaultPredicate = (_QWORD *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v6);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::_Init((uint64_t)v60, v7, v9, &v66, UsdPrimDefaultPredicate);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)v60, (uint64_t)v55);
  v16 = MEMORY[0x24BEE9DC8] + 16;
  while (1)
  {
    v51 = v61;
    v52 = v60;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    LODWORD(v54) = 0;
    WORD2(v54) = 0;
    if ((char *)v55[1] == v52 && v55[0] == v51)
    {
      v17 = 1;
      if (v56 == v53 && !v57 && !v58)
        v17 = v59 != 0;
    }
    else
    {
      v17 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
    if (!v17)
      break;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)v55, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v51);
    IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v51);
    if ((v54 & 7) != 0)
    {
      v19 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
    if (v52)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v52);
    if ((IsValid & 1) != 0)
    {
      v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)v55, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v51);
      pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(v21);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) != 0)
      {
        IsA = 1;
      }
      else
      {
        v23 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator->((uint64_t)v55, (pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v47);
        pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v23);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
        if ((v50 & 7) != 0)
        {
          v24 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
        if (v48)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
      }
      if ((v54 & 7) != 0)
      {
        v26 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stlxr(v27 - 2, v26));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
      if (v52)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v52);
      if (IsA)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v55, (uint64_t)&v47);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v54 = 0;
        v51 = v16;
        if ((v50 & 7) != 0)
        {
          v28 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
          do
            v29 = __ldxr(v28);
          while (__stlxr(v29 - 2, v28));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
        if (v48)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
        Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
        if (!Data)
          Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v51, Data, 0);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v47, &v45, &v46);
        v31 = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v47);
        if ((v50 & 7) != 0)
        {
          v32 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
        if (v48)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
        if (v31)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v44, &v47);
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, &v47, &v47);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
        }
        MEMORY[0x2348B20B0](v44);
        MEMORY[0x2348B24C4](&v51);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v55, (uint64_t)&v51);
      if ((_DWORD)v51 == v64
        && v52 == (char *)v65
        && v53 == v66
        && (v34 = v54, (v54 & 0xFFFFFFFFFFFFFFF8) == (v67 & 0xFFFFFFFFFFFFFFF8)))
      {
        IsEntityProviding = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)v55, (uint64_t)&v47);
        IsEntityProviding = realityio::calculateIsEntityProviding((realityio *)&v47, v35);
        if ((v50 & 7) != 0)
        {
          v37 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
        if (v48)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
        v34 = v54;
      }
      if ((v34 & 7) != 0)
      {
        v39 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
      if (v52)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v52);
      if (IsEntityProviding)
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v55);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v55);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v62);
  if ((v67 & 7) != 0)
  {
    v41 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
    do
      v42 = __ldxr(v41);
    while (__stlxr(v42 - 2, v41));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
  result = v65;
  if (v65)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v65);
  return result;
}

void sub_2300EFB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::SdfPath *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)&a29);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v30 - 120));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v29);
  _Unwind_Resume(a1);
}

void realityio::generateMeshDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  realityio::tokens::MeshBuilderTokens_StaticTokenType *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v11;
  realityio::tokens::MeshBuilderTokens_StaticTokenType *v12;
  realityio::AnyValueDirtyPropertyDescriptor *v13;
  realityio::tokens::MeshBuilderTokens_StaticTokenType *v14;
  realityio::AnyValueDirtyPropertyDescriptor *v15;
  realityio::tokens::MeshBuilderTokens_StaticTokenType *v16;
  realityio::AnyValueDirtyPropertyDescriptor *v17;
  realityio::tokens::MeshBuilderTokens_StaticTokenType *v18;
  realityio::AnyValueDirtyPropertyDescriptor *v19;
  unint64_t *v20;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v21;
  realityio::AnyValueDirtyPropertyDescriptor *v22;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v23;
  realityio::AnyValueDirtyPropertyDescriptor *v24;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v25;
  uint64_t i;
  uint64_t j;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35[3];
  _QWORD *v36[3];
  __int128 v37;
  _QWORD *v38[3];
  _QWORD *v39[3];
  __int128 v40;
  _QWORD *v41[3];
  uint64_t v42;
  uint64_t v43;
  void **v44;
  _OWORD v45[7];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[4];

  v52[2] = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54B68);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54B68))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v39, 0, sizeof(v39));
    v9 = (_BYTE *)operator new();
    Data = (realityio::tokens::MeshBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MeshBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MeshBuilderTokens);
    memset(v36, 0, sizeof(v36));
    v11 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v12 = (realityio::tokens::MeshBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MeshBuilderTokens);
    if (!v12)
      v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MeshBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v11, (realityio::tokens::MeshBuilderTokens_StaticTokenType *)((char *)v12 + 24));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v34, (uint64_t)v11);
    v45[0] = v34;
    v34 = 0uLL;
    v13 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v14 = (realityio::tokens::MeshBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MeshBuilderTokens);
    if (!v14)
      v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MeshBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v13, (realityio::tokens::MeshBuilderTokens_StaticTokenType *)((char *)v14 + 32));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v33, (uint64_t)v13);
    v45[1] = v33;
    v33 = 0uLL;
    v15 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v16 = (realityio::tokens::MeshBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MeshBuilderTokens);
    if (!v16)
      v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MeshBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v15, (realityio::tokens::MeshBuilderTokens_StaticTokenType *)((char *)v16 + 48));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v32, (uint64_t)v15);
    v45[2] = v32;
    v32 = 0uLL;
    v17 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v18 = (realityio::tokens::MeshBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MeshBuilderTokens);
    if (!v18)
      v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MeshBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v17, (realityio::tokens::MeshBuilderTokens_StaticTokenType *)((char *)v18 + 104));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v31, (uint64_t)v17);
    v45[3] = v31;
    v31 = 0uLL;
    v19 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v20 = (unint64_t *)MEMORY[0x24BEE8040];
    v21 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(MEMORY[0x24BEE8040]);
    if (!v21)
      v21 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v19, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v21 + 144));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v30, (uint64_t)v19);
    v45[4] = v30;
    v30 = 0uLL;
    v22 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v23 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v20);
    if (!v23)
      v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v22, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v23 + 152));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v29, (uint64_t)v22);
    v45[5] = v29;
    v29 = 0uLL;
    v24 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v25 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v20);
    if (!v25)
      v25 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v24, (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)((char *)v25 + 136));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v28, (uint64_t)v24);
    v45[6] = v28;
    v28 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v35, v45, 7uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v9, (uint64_t *)Data + 5, v36, v35);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v37, (uint64_t)v9);
    v46 = v37;
    v37 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v38, &v46, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v39, v38);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v40, v8);
    v47 = v40;
    v40 = 0uLL;
    realityio::getCapsuleMeshBuilderDirtyStageDescriptor(&v48);
    realityio::getConeMeshBuilderDirtyStageDescriptor(&v49);
    realityio::getCubeMeshBuilderDirtyStageDescriptor(&v50);
    realityio::getCylinderMeshBuilderDirtyStageDescriptor(&v51);
    realityio::getSphereMeshBuilderDirtyStageDescriptor(v52);
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v41, &v47, 6uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v41);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v42, v7);
    _MergedGlobals_39 = v42;
    unk_255E54B60 = v43;
    v42 = 0;
    v43 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
    v44 = (void **)v41;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v44);
    for (i = 80; i != -16; i -= 16)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v47 + i);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v40);
    v44 = (void **)v38;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v44);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v37);
    v44 = (void **)v35;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v44);
    for (j = 6; j != -1; --j)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v45[j]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v29);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v30);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v31);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v32);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v34);
    *(_QWORD *)&v45[0] = v36;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
    *(_QWORD *)&v45[0] = v39;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
    __cxa_guard_release(&qword_255E54B68);
  }
  v4 = unk_255E54B60;
  *a1 = _MergedGlobals_39;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_2300F0274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char *a47)
{
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  MEMORY[0x2348B4E1C](v48, 0x10A1C40F82F910ELL);
  a47 = &a36;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  MEMORY[0x2348B4E1C](v47, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v49, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54B68);
  _Unwind_Resume(a1);
}

void realityio::generateMeshAssetBuilderDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *v9;
  realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *v10;
  uint64_t i;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15[3];
  _QWORD *v16[3];
  __int128 v17;
  _QWORD *v18[3];
  uint64_t v19;
  uint64_t v20;
  void **v21;
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54B80);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54B80))
  {
    v12 = a1;
    v7 = operator new();
    v8 = operator new();
    memset(v16, 0, sizeof(v16));
    v9 = (realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *)operator new();
    realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor(v9);
    std::shared_ptr<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,void>(&v14, (uint64_t)v9);
    v22[0] = v14;
    v14 = 0uLL;
    v10 = (realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *)operator new();
    realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor(v10);
    std::shared_ptr<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,void>(&v13, (uint64_t)v10);
    v22[1] = v13;
    v13 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v15, v22, 2uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v16, v15);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v17, v8);
    v23 = v17;
    v17 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v18, &v23, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v18);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v19, v7);
    qword_255E54B70 = v19;
    *(_QWORD *)algn_255E54B78 = v20;
    v19 = 0;
    v20 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v19);
    v21 = (void **)v18;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v21);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v23);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v17);
    v21 = (void **)v15;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v21);
    for (i = 1; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v22[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v13);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v14);
    *(_QWORD *)&v22[0] = v16;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
    __cxa_guard_release(&qword_255E54B80);
    a1 = v12;
  }
  v4 = *(_QWORD *)algn_255E54B78;
  *a1 = qword_255E54B70;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_2300F0928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;
  uint64_t v19;
  uint64_t v20;
  va_list va4;

  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v17 = va_arg(va4, _QWORD);
  v19 = va_arg(va4, _QWORD);
  v20 = va_arg(va4, _QWORD);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v4 - 96);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  *(_QWORD *)(v4 - 136) = va2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 136));
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v4 - 128 + i);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  *(_QWORD *)(v4 - 128) = va3;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 128));
  MEMORY[0x2348B4E1C](v3, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54B80);
  _Unwind_Resume(a1);
}

realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor(realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *this)
{
  void **v3[3];
  _QWORD *v4[3];
  void ***v5;

  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor((uint64_t)this, v4, v3);
  v5 = v3;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  v3[0] = (void **)v4;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v3);
  *(_QWORD *)this = off_24FDF6110;
  return this;
}

void sub_2300F0B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v3 - 40) = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::~MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor(realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_24FDF1378;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_24FDF1378;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2348B4E1C](this, 0x10A1C402FEF67C7);
}

uint64_t realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  pxrInternal__aapl__pxrReserved__ *v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v39;
  pxrInternal__aapl__pxrReserved__ *v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  _QWORD *v53;
  _QWORD *v54;
  BOOL v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  _QWORD *v60;
  _BYTE v61[8];
  pxrInternal__aapl__pxrReserved__ *v62;
  uint64_t v63;
  uint64_t v64;
  pxrInternal__aapl__pxrReserved__ *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[24];
  _BYTE *v69;
  _BYTE v70[24];
  _BYTE *v71;
  _BYTE v72[24];
  _BYTE *v73;
  _BYTE v74[24];
  _BYTE *v75;
  _BYTE v76[24];
  _BYTE *v77;
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  _BYTE v82[24];
  _BYTE *v83;
  _BYTE v84[24];
  _BYTE *v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v84, a7);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v82, a8);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v80, a9);
  v17 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, a2, a3, a4, a5, a6, (uint64_t)v84, (uint64_t)v82, (uint64_t)v80);
  v18 = v81;
  if (v81 == v80)
  {
    v19 = 4;
    v18 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  v20 = v83;
  if (v83 == v82)
  {
    v21 = 4;
    v20 = v82;
  }
  else
  {
    if (!v83)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_11:
  v22 = v85;
  if (v85 == v84)
  {
    v23 = 4;
    v22 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_16;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_16:
  if ((v17 & 1) != 0)
    return 1;
  v25 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a5 + 48, a2);
  if ((_QWORD *)(a5 + 56) == v25)
    return 0;
  v26 = *(_QWORD *)(a5 + 24);
  if (!v26)
    return 0;
  v27 = v26 + 104 * v25[5];
  v28 = *(_QWORD **)(v27 + 56);
  v60 = (_QWORD *)(v27 + 64);
  if (v28 == (_QWORD *)(v27 + 64))
    return 0;
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v28 + 28));
    v30 = v65;
    if (!v65 || (*((_BYTE *)v65 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v65, v29);
    v31 = *((_QWORD *)v30 + 3);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v78, a7);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v76, a8);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v74, a9);
    v32 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v28 + 28), a3, a4, a5, v31, (uint64_t)v78, (uint64_t)v76, (uint64_t)v74);
    v33 = v75;
    if (v75 == v74)
    {
      v33 = v74;
      v34 = 4;
    }
    else
    {
      if (!v75)
        goto LABEL_29;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_29:
    v35 = v77;
    if (v77 == v76)
    {
      v35 = v76;
      v36 = 4;
    }
    else
    {
      if (!v77)
        goto LABEL_34;
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_34:
    v37 = v79;
    if (v79 == v78)
    {
      v37 = v78;
      v38 = 4;
    }
    else
    {
      if (!v79)
        goto LABEL_39;
      v38 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_39:
    if ((v32 & 1) != 0)
      goto LABEL_83;
    if (a3)
      break;
LABEL_66:
    if ((v67 & 7) != 0)
    {
      v51 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
      do
        v52 = __ldxr(v51);
      while (__stlxr(v52 - 2, v51));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
    if (v65)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v65);
    v53 = (_QWORD *)v28[1];
    if (v53)
    {
      do
      {
        v54 = v53;
        v53 = (_QWORD *)*v53;
      }
      while (v53);
    }
    else
    {
      do
      {
        v54 = (_QWORD *)v28[2];
        v55 = *v54 == (_QWORD)v28;
        v28 = v54;
      }
      while (!v55);
    }
    v28 = v54;
    if (v54 == v60)
      return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v28 + 28));
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v61))
    goto LABEL_61;
  v40 = v62;
  if (!v62 || (*((_BYTE *)v62 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v62, v39);
  v41 = *((_QWORD *)v40 + 3);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v72, a7);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v70, a8);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v68, a9);
  v42 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v28 + 28), a3, a4, a5, v41, (uint64_t)v72, (uint64_t)v70, (uint64_t)v68);
  v43 = v69;
  if (v69 == v68)
  {
    v43 = v68;
    v44 = 4;
LABEL_49:
    (*(void (**)(void))(*v43 + 8 * v44))();
  }
  else if (v69)
  {
    v44 = 5;
    goto LABEL_49;
  }
  v45 = v71;
  if (v71 == v70)
  {
    v45 = v70;
    v46 = 4;
LABEL_54:
    (*(void (**)(void))(*v45 + 8 * v46))();
  }
  else if (v71)
  {
    v46 = 5;
    goto LABEL_54;
  }
  v47 = v73;
  if (v73 == v72)
  {
    v47 = v72;
    v48 = 4;
LABEL_59:
    (*(void (**)(void))(*v47 + 8 * v48))();
  }
  else if (v73)
  {
    v48 = 5;
    goto LABEL_59;
  }
  if ((v42 & 1) == 0)
  {
LABEL_61:
    if ((v64 & 7) != 0)
    {
      v49 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
      do
        v50 = __ldxr(v49);
      while (__stlxr(v50 - 2, v49));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
    if (v62)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v62);
    goto LABEL_66;
  }
  if ((v64 & 7) != 0)
  {
    v56 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
    do
      v57 = __ldxr(v56);
    while (__stlxr(v57 - 2, v56));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
  if (v62)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v62);
LABEL_83:
  if ((v67 & 7) != 0)
  {
    v58 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFF8);
    do
      v59 = __ldxr(v58);
    while (__stlxr(v59 - 2, v58));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
  if (v65)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v65);
  return 1;
}

void sub_2300F115C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

CFStringRef realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::description@<X0>(CFStringRef *a1@<X8>)
{
  CFStringRef result;

  *a1 = 0;
  result = CFStringCreateWithCString(0, "MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor", 0x8000100u);
  *a1 = result;
  return result;
}

void sub_2300F13DC(_Unwind_Exception *a1)
{
  const void **v1;

  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor(realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *this)
{
  realityio::AnyValueDirtyPropertyDescriptor *v2;
  unint64_t *v3;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *Data;
  uint64_t v5;
  realityio::AnyValueDirtyPropertyDescriptor *v6;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v7;
  uint64_t v8;
  realityio::AnyValueDirtyPropertyDescriptor *v9;
  pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *v10;
  uint64_t v11;
  realityio::AnyValueDirtyPropertyDescriptor *v12;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t i;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25[3];
  void **v26;
  char v27;
  void **v28[9];

  v28[8] = *(void ***)MEMORY[0x24BDAC8D0];
  memset(v25, 0, sizeof(v25));
  v2 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v3 = (unint64_t *)MEMORY[0x24BEE7FE8];
  Data = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(MEMORY[0x24BEE7FE8]);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v2, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)Data + 920));
  v5 = operator new();
  *(_QWORD *)v5 = &off_24FDE24C0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = v2;
  v28[0] = (void **)v2;
  v28[1] = (void **)v5;
  v6 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v3);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v6, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v7 + 408));
  v8 = operator new();
  *(_QWORD *)v8 = &off_24FDE24C0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = v6;
  v28[2] = (void **)v6;
  v28[3] = (void **)v8;
  v9 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load(v3);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData(MEMORY[0x24BEE7FE8]);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v9, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v10 + 1008));
  v11 = operator new();
  *(_QWORD *)v11 = &off_24FDE24C0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v9;
  v28[4] = (void **)v9;
  v28[5] = (void **)v11;
  v12 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v13 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
  if (!v13)
    v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v12, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v13 + 104));
  v14 = operator new();
  *(_QWORD *)v14 = &off_24FDE24C0;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = v12;
  v28[6] = (void **)v12;
  v28[7] = (void **)v14;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v26 = (void **)&v22;
  v27 = 0;
  v15 = operator new(0x40uLL);
  v16 = 0;
  v22 = v15;
  v23 = v15;
  v24 = v15 + 8;
  do
  {
    v17 = *(_OWORD *)&v28[2 * v16];
    *(_OWORD *)v15 = v17;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    ++v16;
    v15 += 2;
  }
  while (v16 != 4);
  v23 = v15;
  realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor((uint64_t)this, v25, &v22);
  v26 = (void **)&v22;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v26);
  for (i = 6; i != -2; i -= 2)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v28[i]);
  v28[0] = (void **)v25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v28);
  *(_QWORD *)this = off_24FDF6170;
  return this;
}

void sub_2300F17C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  MEMORY[0x2348B4E1C](v21, 0x10E1C40C8742A8BLL);
  v24 = v22 - 72;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  do
  {
    v24 -= 16;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v24);
  }
  while (v24 != v22 - 120);
  *(_QWORD *)(v22 - 120) = &a21;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 120));
  _Unwind_Resume(a1);
}

void sub_2300F1950()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x2300F1938);
}

void sub_2300F1968()
{
  JUMPOUT(0x2300F1938);
}

void realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::~PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor(realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_24FDF1378;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_24FDF1378;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2348B4E1C](this, 0x10A1C402FEF67C7);
}

uint64_t realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v29;
  pxrInternal__aapl__pxrReserved__ *v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  _QWORD *v52;
  _QWORD *v53;
  BOOL v54;
  unsigned int *v55;
  unsigned int v56;
  _QWORD *v57;
  pxrInternal__aapl__pxrReserved__ *v58;
  uint64_t v59;
  uint64_t v60;
  pxrInternal__aapl__pxrReserved__ *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[24];
  _BYTE *v65;
  _BYTE v66[24];
  _BYTE *v67;
  _BYTE v68[24];
  _BYTE *v69;
  _BYTE v70[24];
  _BYTE *v71;
  _BYTE v72[24];
  _BYTE *v73;
  _BYTE v74[24];
  _BYTE *v75;
  _BYTE v76[24];
  _BYTE *v77;
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v80, a7);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v78, a8);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v76, a9);
  v17 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, a2, a3, a4, a5, a6, (uint64_t)v80, (uint64_t)v78, (uint64_t)v76);
  v18 = v77;
  if (v77 == v76)
  {
    v19 = 4;
    v18 = v76;
  }
  else
  {
    if (!v77)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  v20 = v79;
  if (v79 == v78)
  {
    v21 = 4;
    v20 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_11:
  v22 = v81;
  if (v81 == v80)
  {
    v23 = 4;
    v22 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_16;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_16:
  if ((v17 & 1) != 0)
    return 1;
  v25 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a5 + 48, a2);
  if ((_QWORD *)(a5 + 56) == v25)
    return 0;
  v26 = *(_QWORD *)(a5 + 24);
  if (!v26)
    return 0;
  v27 = v26 + 104 * v25[5];
  v28 = *(_QWORD **)(v27 + 80);
  v57 = (_QWORD *)(v27 + 88);
  if (v28 == (_QWORD *)(v27 + 88))
    return 0;
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v28 + 28));
    v30 = v61;
    if (!v61 || (*((_BYTE *)v61 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v61, v29);
    v31 = *((_QWORD *)v30 + 3);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v74, a7);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v72, a8);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v70, a9);
    v32 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v28 + 28), a3, a4, a5, v31, (uint64_t)v74, (uint64_t)v72, (uint64_t)v70);
    v33 = v71;
    if (v71 == v70)
    {
      v33 = v70;
      v34 = 4;
    }
    else
    {
      if (!v71)
        goto LABEL_29;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_29:
    v35 = v73;
    if (v73 == v72)
    {
      v35 = v72;
      v36 = 4;
    }
    else
    {
      if (!v73)
        goto LABEL_34;
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_34:
    v37 = v75;
    if (v75 == v74)
    {
      v37 = v74;
      v38 = 4;
    }
    else
    {
      if (!v75)
        goto LABEL_39;
      v38 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_39:
    if ((v32 & 1) != 0)
      goto LABEL_77;
    if (a3)
      break;
LABEL_65:
    if ((v63 & 7) != 0)
    {
      v50 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
    if (v61)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v61);
    v52 = (_QWORD *)v28[1];
    if (v52)
    {
      do
      {
        v53 = v52;
        v52 = (_QWORD *)*v52;
      }
      while (v52);
    }
    else
    {
      do
      {
        v53 = (_QWORD *)v28[2];
        v54 = *v53 == (_QWORD)v28;
        v28 = v53;
      }
      while (!v54);
    }
    v28 = v53;
    if (v53 == v57)
      return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v28 + 28));
  if (!v58 || (*((_BYTE *)v58 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v58, v39);
  v40 = *((_QWORD *)v58 + 3);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v68, a7);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v66, a8);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v64, a9);
  v41 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v28 + 28), a3, a4, a5, v40, (uint64_t)v68, (uint64_t)v66, (uint64_t)v64);
  v42 = v65;
  if (v65 == v64)
  {
    v42 = v64;
    v43 = 4;
LABEL_48:
    (*(void (**)(void))(*v42 + 8 * v43))();
  }
  else if (v65)
  {
    v43 = 5;
    goto LABEL_48;
  }
  v44 = v67;
  if (v67 == v66)
  {
    v44 = v66;
    v45 = 4;
LABEL_53:
    (*(void (**)(void))(*v44 + 8 * v45))();
  }
  else if (v67)
  {
    v45 = 5;
    goto LABEL_53;
  }
  v46 = v69;
  if (v69 == v68)
  {
    v46 = v68;
    v47 = 4;
LABEL_58:
    (*(void (**)(void))(*v46 + 8 * v47))();
  }
  else if (v69)
  {
    v47 = 5;
    goto LABEL_58;
  }
  if ((v60 & 7) != 0)
  {
    v48 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
  if (v58)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v58);
  if ((v41 & 1) == 0)
    goto LABEL_65;
LABEL_77:
  if ((v63 & 7) != 0)
  {
    v55 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
  if (v61)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v61);
  return 1;
}

void sub_2300F1F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2300F216C()
{
  JUMPOUT(0x2300F2164);
}

CFStringRef realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor::description@<X0>(CFStringRef *a1@<X8>)
{
  CFStringRef result;

  *a1 = 0;
  result = CFStringCreateWithCString(0, "PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor", 0x8000100u);
  *a1 = result;
  return result;
}

void sub_2300F21B0(_Unwind_Exception *a1)
{
  const void **v1;

  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

realityio::tokens::MeshBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  realityio::tokens::MeshBuilderTokens_StaticTokenType *result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::MeshBuilderTokens_StaticTokenType::~MeshBuilderTokens_StaticTokenType(result);
    MEMORY[0x2348B4E1C]();
  }
  return (realityio::tokens::MeshBuilderTokens_StaticTokenType *)atomic_load(a1);
}

realityio::tokens::MeshBuilderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>::New()
{
  realityio::tokens::MeshBuilderTokens_StaticTokenType *v0;

  v0 = (realityio::tokens::MeshBuilderTokens_StaticTokenType *)operator new();
  realityio::tokens::MeshBuilderTokens_StaticTokenType::MeshBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_2300F2258(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C403D1A7531);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FDF61D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2300F22D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *,std::shared_ptr<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>,std::allocator<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *,std::shared_ptr<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>,std::allocator<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *,std::shared_ptr<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>,std::allocator<realityio::MeshPrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FDF6248;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2300F23C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *,std::shared_ptr<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>,std::allocator<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *,std::shared_ptr<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>,std::allocator<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor *,std::shared_ptr<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor,realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>,std::allocator<realityio::PrimitivePrimsOnPrimGeneratingEntityOnlyDirtyPrimDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

__int128 *RIO_MTLX::GEOM_PATH_SEPARATOR(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v, "/");
  }
  return &RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v;
}

void sub_2300F24C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__int128 *RIO_MTLX::UNIVERSAL_GEOM_NAME(RIO_MTLX *this)
{
  unsigned __int8 v1;
  RIO_MTLX *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      RIO_MTLX::GEOM_PATH_SEPARATOR(v3);
      if (byte_255E53C4F < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&RIO_MTLX::UNIVERSAL_GEOM_NAME(void)::v, (const std::string::value_type *)RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v, *((std::string::size_type *)&RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v + 1));
      }
      else
      {
        RIO_MTLX::UNIVERSAL_GEOM_NAME(void)::v = RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v;
        qword_255E53C68 = unk_255E53C48;
      }
    }
  }
  return &RIO_MTLX::UNIVERSAL_GEOM_NAME(void)::v;
}

void sub_2300F257C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::UDIM_TOKEN(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::UDIM_TOKEN(void)::v, "<UDIM>");
  }
  return RIO_MTLX::UDIM_TOKEN(void)::v;
}

void sub_2300F25F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::UV_TILE_TOKEN(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::UV_TILE_TOKEN(void)::v, "<UVTILE>");
  }
  return RIO_MTLX::UV_TILE_TOKEN(void)::v;
}

void sub_2300F2674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::UDIM_SET_PROPERTY(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::UDIM_SET_PROPERTY(void)::v, "udimset");
  }
  return RIO_MTLX::UDIM_SET_PROPERTY(void)::v;
}

void sub_2300F26F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::GeomElement::GEOM_ATTRIBUTE(RIO_MTLX::GeomElement *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::GeomElement::GEOM_ATTRIBUTE(void)::v, "geom");
  }
  return RIO_MTLX::GeomElement::GEOM_ATTRIBUTE(void)::v;
}

void sub_2300F276C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RIO_MTLX::GeomElement::COLLECTION_ATTRIBUTE(RIO_MTLX::GeomElement *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_40);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_40))
    {
      std::string::basic_string[abi:ne180100]<0>(qword_255E54BA8, "collection");
      __cxa_guard_release(&_MergedGlobals_40);
    }
  }
}

void sub_2300F27E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_40);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Collection::INCLUDE_GEOM_ATTRIBUTE(RIO_MTLX::Collection *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_255E54B90);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_255E54B90))
    {
      std::string::basic_string[abi:ne180100]<0>(qword_255E54BC0, "includegeom");
      __cxa_guard_release(&qword_255E54B90);
    }
  }
}

void sub_2300F285C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255E54B90);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Collection::EXCLUDE_GEOM_ATTRIBUTE(RIO_MTLX::Collection *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_255E54B98);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_255E54B98))
    {
      std::string::basic_string[abi:ne180100]<0>(qword_255E54BD8, "excludegeom");
      __cxa_guard_release(&qword_255E54B98);
    }
  }
}

void sub_2300F28D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255E54B98);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::geomStringsMatch(RIO_MTLX *a1, std::string *a2, int a3)
{
  unsigned __int8 **v4;
  RIO_MTLX *v5;
  void **v6;
  void **v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  RIO_MTLX *v23;
  unsigned __int8 **v24;
  RIO_MTLX *v25;
  std::string *v26;
  std::string::size_type size;
  uint64_t *v28;
  uint64_t *v29;
  void **v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  void **v38;
  uint64_t v39;
  void *v40;
  void *v41;
  int v42;
  void **v43;
  uint64_t v44;
  __int128 v48;
  std::string *i;
  void **v50;
  void **v51;
  _BYTE v52[24];
  void ***v53;
  _BYTE v54[24];
  _BYTE *v55;
  std::string *v56;
  std::string *v57;
  __int128 *v58;
  char v59;
  __int128 v60;
  __int128 v61;

  memset(v52, 0, sizeof(v52));
  v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)&v50);
  v6 = v50;
  v7 = v51;
  if (v50 != v51)
  {
    v8 = *(_QWORD *)&v52[8];
    do
    {
      if (v8 >= *(_QWORD *)&v52[16])
      {
        v10 = (uint64_t)(v8 - *(_QWORD *)v52) >> 5;
        if ((unint64_t)(v10 + 1) >> 59)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v11 = (uint64_t)(*(_QWORD *)&v52[16] - *(_QWORD *)v52) >> 4;
        if (v11 <= v10 + 1)
          v11 = v10 + 1;
        if (*(_QWORD *)&v52[16] - *(_QWORD *)v52 >= 0x7FFFFFFFFFFFFFE0uLL)
          v12 = 0x7FFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        v55 = &v52[16];
        if (v12)
        {
          if (v12 >> 59)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v5 = (RIO_MTLX *)operator new(32 * v12);
          v13 = (void **)v5;
        }
        else
        {
          v13 = 0;
        }
        v53 = (void ***)v13;
        *(_QWORD *)v54 = &v13[4 * v10];
        *(_QWORD *)&v54[8] = *(_QWORD *)v54;
        *(_QWORD *)&v54[16] = &v13[4 * v12];
        RIO_MTLX::GEOM_PATH_SEPARATOR(v5);
        RIO_MTLX::splitString((std::string *)v6, (unsigned __int8 **)&RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v, (uint64_t)&v13[4 * v10]);
        v14 = (void *)*((unsigned __int8 *)v6 + 23);
        if ((char)v14 < 0)
          v14 = v6[1];
        LOBYTE(v13[4 * v10 + 3]) = v14 == 0;
        v15 = *(_QWORD *)v54;
        *(_QWORD *)&v54[8] += 32;
        v17 = *(_QWORD *)&v52[8];
        v16 = *(_QWORD *)v52;
        *(_QWORD *)&v61 = *(_QWORD *)v54;
        *((_QWORD *)&v61 + 1) = *(_QWORD *)v54;
        v60 = v61;
        v56 = (std::string *)&v52[16];
        v57 = (std::string *)&v60;
        v58 = &v61;
        v59 = 0;
        if (*(_QWORD *)&v52[8] != *(_QWORD *)v52)
        {
          v18 = *(_QWORD *)&v52[8];
          do
          {
            *(_QWORD *)(v15 - 32) = 0;
            *(_QWORD *)(v15 - 24) = 0;
            *(_QWORD *)(v15 - 16) = 0;
            v19 = *(__int128 **)(v18 - 32);
            v20 = *(__int128 **)(v18 - 24);
            v18 -= 32;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v15 - 32), v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
            *(_BYTE *)(v15 - 8) = *(_BYTE *)(v17 - 8);
            v15 = *((_QWORD *)&v61 + 1) - 32;
            *((_QWORD *)&v61 + 1) -= 32;
            v17 = v18;
          }
          while (v18 != v16);
        }
        v59 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::GeomPath>,std::reverse_iterator<RIO_MTLX::GeomPath*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v56);
        v21 = *(_QWORD *)&v52[16];
        v48 = *(_OWORD *)&v54[8];
        v22 = *(_OWORD *)v52;
        *(_QWORD *)v52 = v15;
        *(_OWORD *)v54 = v22;
        *(_OWORD *)&v52[8] = v48;
        *(_QWORD *)&v54[16] = v21;
        v53 = (void ***)v22;
        v5 = (RIO_MTLX *)std::__split_buffer<RIO_MTLX::GeomPath>::~__split_buffer((uint64_t)&v53);
        v8 = v48;
      }
      else
      {
        RIO_MTLX::GEOM_PATH_SEPARATOR(v5);
        RIO_MTLX::splitString((std::string *)v6, (unsigned __int8 **)&RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v, v8);
        v9 = (void *)*((unsigned __int8 *)v6 + 23);
        if ((char)v9 < 0)
          v9 = v6[1];
        *(_BYTE *)(v8 + 24) = v9 == 0;
        v8 += 32;
      }
      *(_QWORD *)&v52[8] = v8;
      v6 += 3;
    }
    while (v6 != v7);
  }
  v53 = &v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  v24 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(v23);
  RIO_MTLX::splitString(a2, v24, (uint64_t)&v56);
  v26 = v56;
  for (i = v57; v26 != i; ++v26)
  {
    RIO_MTLX::GEOM_PATH_SEPARATOR(v25);
    RIO_MTLX::splitString(v26, (unsigned __int8 **)&RIO_MTLX::GEOM_PATH_SEPARATOR(void)::v, (uint64_t)&v53);
    if ((v26->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v26->__r_.__value_.__r.__words[2]);
    else
      size = v26->__r_.__value_.__l.__size_;
    v54[16] = size == 0;
    v29 = *(uint64_t **)&v52[8];
    v28 = *(uint64_t **)v52;
    if (*(_QWORD *)v52 != *(_QWORD *)&v52[8])
    {
      v30 = (void **)v53;
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v54 - (_QWORD)v53) >> 3);
      do
      {
        if (*((_BYTE *)v28 + 24))
          v32 = 1;
        else
          v32 = size == 0;
        if (!v32)
        {
          v33 = *v28;
          v34 = 0xAAAAAAAAAAAAAAABLL * ((v28[1] - *v28) >> 3);
          if (!a3 || v34 <= v31)
          {
            if (v31 >= v34)
              v35 = 0xAAAAAAAAAAAAAAABLL * ((v28[1] - *v28) >> 3);
            else
              v35 = v31;
            if (!v35)
            {
LABEL_62:
              v50 = (void **)&v53;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v50);
              v53 = (void ***)&v56;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
              v44 = 1;
              goto LABEL_63;
            }
            v36 = 0;
            while (1)
            {
              v37 = (unsigned __int8 *)(v33 + 24 * v36);
              v38 = &v30[3 * v36];
              v39 = v37[23];
              if ((v39 & 0x80u) == 0)
                v40 = (void *)v37[23];
              else
                v40 = (void *)*((_QWORD *)v37 + 1);
              v41 = (void *)*((unsigned __int8 *)v38 + 23);
              v42 = (char)v41;
              if ((char)v41 < 0)
                v41 = v38[1];
              if (v40 != v41)
                break;
              if (v42 >= 0)
                v43 = &v30[3 * v36];
              else
                v43 = (void **)*v38;
              if ((v39 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v37, v43, *((_QWORD *)v37 + 1)))
                  break;
              }
              else if (v37[23])
              {
                while (*v37 == *(unsigned __int8 *)v43)
                {
                  ++v37;
                  v43 = (void **)((char *)v43 + 1);
                  if (!--v39)
                    goto LABEL_58;
                }
                break;
              }
LABEL_58:
              if (++v36 == v35)
                goto LABEL_62;
            }
          }
        }
        v28 += 4;
      }
      while (v28 != v29);
    }
    v50 = (void **)&v53;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v50);
  }
  v53 = (void ***)&v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  v44 = 0;
LABEL_63:
  v53 = (void ***)v52;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  return v44;
}

void sub_2300F2D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 128) = &a17;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 128));
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::GeomElement::getCollectionString(RIO_MTLX::GeomElement *this)
{
  unsigned __int8 *v2;

  RIO_MTLX::GeomElement::COLLECTION_ATTRIBUTE(this);
  v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)this + 20, (unsigned __int8 *)qword_255E54BA8);
  if (v2)
    return (uint64_t *)(v2 + 40);
  else
    return RIO_MTLX::EMPTY_STRING(0);
}

uint64_t RIO_MTLX::GeomElement::validate(RIO_MTLX::GeomElement *a1, std::string *a2)
{
  std::string *CollectionString;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t result;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;

  v14 = 1;
  RIO_MTLX::GeomElement::COLLECTION_ATTRIBUTE(a1);
  if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)qword_255E54BA8))
  {
    CollectionString = (std::string *)RIO_MTLX::GeomElement::getCollectionString(a1);
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Collection>((uint64_t)a1, CollectionString, &v12);
    v5 = v12;
    std::string::basic_string[abi:ne180100]<0>(__p, "Invalid collection string");
    RIO_MTLX::Element::validateRequire((uint64_t)a1, v5 != 0, &v14, a2, (const void **)__p);
    if (v11 < 0)
      operator delete(__p[0]);
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  LODWORD(result) = RIO_MTLX::Element::validate((uint64_t)a1, a2);
  if (v14)
    return result;
  else
    return 0;
}

void sub_2300F2EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void RIO_MTLX::Collection::getIncludeCollections(RIO_MTLX::Collection *this, uint64_t a2)
{
  unsigned __int8 v4;
  std::string *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11[3];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = atomic_load((unsigned __int8 *)&qword_255E54BA0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54BA0))
  {
    std::string::basic_string[abi:ne180100]<0>(byte_255E54BF0, "includecollection");
    __cxa_guard_release(&qword_255E54BA0);
  }
  RIO_MTLX::Element::getTypedAttribute<std::vector<std::string>>(a2, byte_255E54BF0, v11);
  v5 = (std::string *)v11[0];
  v6 = v11[1];
  while (v5 != (std::string *)v6)
  {
    RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Collection>(a2, v5, &v10);
    if ((_QWORD)v10)
      std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)this, &v10);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    ++v5;
  }
  *(_QWORD *)&v10 = v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_2300F3024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_guard_abort(&qword_255E54BA0);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::Collection::matchesGeomString(RIO_MTLX::Collection *a1, std::string *a2)
{
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;
  RIO_MTLX::Collection *v7;
  RIO_MTLX *v8;
  RIO_MTLX *v9;
  uint64_t *v10;
  __int128 v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t v21;
  RIO_MTLX::Collection *v22;
  RIO_MTLX *v23;
  RIO_MTLX *v24;
  uint64_t *v25;
  __int128 v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char v31;
  char v32;
  char *v33;
  unint64_t i;
  __int128 v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::string::size_type size;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  __int128 v74;
  char *v75;
  std::string::size_type v76;
  char *v77;
  char *v78;
  char *v79;
  char *j;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t **v102;
  BOOL v103;
  __int128 v105;
  uint64_t *v106;
  uint64_t *v107;
  __int128 v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t **v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::string v115;
  char *v116;
  char **v117;

  RIO_MTLX::Collection::EXCLUDE_GEOM_ATTRIBUTE(a1);
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)qword_255E54BD8);
  if (v4)
  {
    v5 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v4);
    RIO_MTLX::Element::createStringResolver(a1, (uint64_t)v5, (uint64_t *)&v112);
    v6 = (uint64_t)v112;
    RIO_MTLX::Collection::EXCLUDE_GEOM_ATTRIBUTE(v7);
    v8 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)qword_255E54BD8);
    if (v8)
    {
      v9 = (RIO_MTLX *)((char *)v8 + 40);
    }
    else
    {
      v8 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
      v9 = v8;
    }
    v12 = RIO_MTLX::GEOMNAME_TYPE_STRING(v8);
    (*(void (**)(std::string *__return_ptr, uint64_t, RIO_MTLX *, _QWORD *))(*(_QWORD *)v6 + 16))(&v115, v6, v9, v12);
    v13 = v113;
    if (v113)
    {
      p_shared_owners = (unint64_t *)&v113->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v10 = RIO_MTLX::EMPTY_STRING(0);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v115, (const std::string::value_type *)*v10, v10[1]);
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v115.__r_.__value_.__r.__words[2] = v10[2];
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v11;
    }
  }
  v16 = RIO_MTLX::geomStringsMatch((RIO_MTLX *)&v115, a2, 1);
  v17 = v16;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v115.__r_.__value_.__l.__data_);
    if ((v17 & 1) != 0)
      return 0;
  }
  else if ((v16 & 1) != 0)
  {
    return 0;
  }
  RIO_MTLX::Collection::INCLUDE_GEOM_ATTRIBUTE((RIO_MTLX::Collection *)v16);
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)qword_255E54BC0);
  if (v19)
  {
    v20 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v19);
    RIO_MTLX::Element::createStringResolver(a1, (uint64_t)v20, (uint64_t *)&v112);
    v21 = (uint64_t)v112;
    RIO_MTLX::Collection::INCLUDE_GEOM_ATTRIBUTE(v22);
    v23 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)a1 + 20, (unsigned __int8 *)qword_255E54BC0);
    if (v23)
    {
      v24 = (RIO_MTLX *)((char *)v23 + 40);
    }
    else
    {
      v23 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
      v24 = v23;
    }
    v27 = RIO_MTLX::GEOMNAME_TYPE_STRING(v23);
    (*(void (**)(std::string *__return_ptr, uint64_t, RIO_MTLX *, _QWORD *))(*(_QWORD *)v21 + 16))(&v115, v21, v24, v27);
    v28 = v113;
    if (v113)
    {
      v29 = (unint64_t *)&v113->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    v25 = RIO_MTLX::EMPTY_STRING(0);
    if (*((char *)v25 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v115, (const std::string::value_type *)*v25, v25[1]);
    }
    else
    {
      v26 = *(_OWORD *)v25;
      v115.__r_.__value_.__r.__words[2] = v25[2];
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v26;
    }
  }
  v31 = RIO_MTLX::geomStringsMatch((RIO_MTLX *)&v115, a2, 0);
  v32 = v31;
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v115.__r_.__value_.__l.__data_);
    if ((v32 & 1) != 0)
      return 1;
  }
  else if ((v31 & 1) != 0)
  {
    return 1;
  }
  v113 = 0;
  v114 = 0;
  v112 = (uint64_t **)&v113;
  RIO_MTLX::Collection::getIncludeCollections((RIO_MTLX::Collection *)&v109, (uint64_t)a1);
  v33 = v109;
  if (v110 != v109)
  {
    for (i = 0; i < (v110 - v109) >> 4; ++i)
    {
      v35 = *(_OWORD *)&v33[16 * i];
      v108 = v35;
      v105 = v35;
      v36 = *((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = (uint64_t *)v113;
      v40 = (uint64_t **)&v113;
      v41 = (uint64_t **)&v113;
      if (v113)
      {
        v42 = v35;
        while (1)
        {
          while (1)
          {
            v41 = (uint64_t **)v39;
            v43 = v39[4];
            if (v43 <= (unint64_t)v35)
              break;
            v39 = *v41;
            v40 = v41;
            if (!*v41)
              goto LABEL_46;
          }
          if (v43 >= (unint64_t)v35)
            break;
          v39 = v41[1];
          if (!v39)
          {
            v40 = v41 + 1;
            goto LABEL_46;
          }
        }
      }
      else
      {
LABEL_46:
        v44 = (uint64_t *)operator new(0x30uLL);
        v45 = v44;
        *((_OWORD *)v44 + 2) = v105;
        if (v36)
        {
          v46 = (unint64_t *)(v36 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        *v44 = 0;
        v44[1] = 0;
        v44[2] = (uint64_t)v41;
        *v40 = v44;
        if (*v112)
        {
          v112 = (uint64_t **)*v112;
          v45 = *v40;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v113, v45);
        ++v114;
        v42 = v108;
      }
      RIO_MTLX::Collection::getIncludeCollections((RIO_MTLX::Collection *)&v106, v42);
      v49 = v106;
      v48 = v107;
      if ((char *)v107 - (char *)v106 < 1)
        goto LABEL_105;
      v50 = ((char *)v107 - (char *)v106) >> 4;
      v51 = (unint64_t)v110;
      v52 = v110 - v109;
      v53 = &v109[(v110 - v109) & 0xFFFFFFFFFFFFFFF0];
      if (v50 <= (v111 - v110) >> 4)
      {
        v58 = v110 - v53;
        v59 = (v110 - v53) >> 4;
        if (v59 >= v50)
        {
          v60 = &v106[2 * v50];
          v62 = v110;
        }
        else
        {
          v60 = &v106[2 * v59];
          if (v60 == v107)
          {
            v62 = v110;
          }
          else
          {
            v61 = &v106[2 * v59];
            v62 = v110;
            do
            {
              *(_QWORD *)v62 = *v61;
              v63 = v61[1];
              *((_QWORD *)v62 + 1) = v63;
              if (v63)
              {
                v64 = (unint64_t *)(v63 + 8);
                do
                  v65 = __ldxr(v64);
                while (__stxr(v65 + 1, v64));
              }
              v61 += 2;
              v62 += 16;
            }
            while (v61 != v48);
          }
          v110 = v62;
          if (v58 < 1)
            goto LABEL_105;
        }
        v78 = &v62[-16 * v50];
        v79 = v62;
        for (j = v78; (unint64_t)j < v51; j += 16)
        {
          *(_OWORD *)v79 = *(_OWORD *)j;
          v79 += 16;
          *(_QWORD *)j = 0;
          *((_QWORD *)j + 1) = 0;
        }
        v110 = v79;
        if (v62 != &v53[16 * v50])
        {
          do
          {
            v81 = *((_OWORD *)v78 - 1);
            v78 -= 16;
            *(_QWORD *)v78 = 0;
            *((_QWORD *)v78 + 1) = 0;
            v82 = (std::__shared_weak_count *)*((_QWORD *)v62 - 1);
            *((_OWORD *)v62 - 1) = v81;
            v62 -= 16;
            if (v82)
            {
              v83 = (unint64_t *)&v82->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
          }
          while (v78 != v53);
        }
        for (; v49 != v60; v53 += 16)
        {
          v86 = *v49;
          v85 = v49[1];
          if (v85)
          {
            v87 = (unint64_t *)(v85 + 8);
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          v89 = (std::__shared_weak_count *)*((_QWORD *)v53 + 1);
          *(_QWORD *)v53 = v86;
          *((_QWORD *)v53 + 1) = v85;
          if (v89)
          {
            v90 = (unint64_t *)&v89->__shared_owners_;
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          v49 += 2;
        }
      }
      else
      {
        v54 = v52 >> 4;
        v55 = (v52 >> 4) + v50;
        if (v55 >> 60)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        if ((v111 - v109) >> 3 > v55)
          v55 = (v111 - v109) >> 3;
        if ((unint64_t)(v111 - v109) >= 0x7FFFFFFFFFFFFFF0)
          v56 = 0xFFFFFFFFFFFFFFFLL;
        else
          v56 = v55;
        v117 = &v111;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v111, v56);
        else
          v57 = 0;
        size = (std::string::size_type)&v57[16 * v54];
        v115.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
        v116 = &v57[16 * v56];
        v67 = (char *)(size + 16 * v50);
        v68 = (char *)size;
        do
        {
          *(_QWORD *)v68 = *v49;
          v69 = v49[1];
          *((_QWORD *)v68 + 1) = v69;
          if (v69)
          {
            v70 = (unint64_t *)(v69 + 8);
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          v68 += 16;
          v49 += 2;
        }
        while (v68 != v67);
        v72 = v109;
        if (v109 != v53)
        {
          v73 = v53;
          do
          {
            v74 = *((_OWORD *)v73 - 1);
            v73 -= 16;
            *(_OWORD *)(size - 16) = v74;
            size -= 16;
            *(_QWORD *)v73 = 0;
            *((_QWORD *)v73 + 1) = 0;
          }
          while (v73 != v72);
        }
        v115.__r_.__value_.__l.__size_ = size;
        v75 = v110;
        if (v110 != v53)
        {
          do
          {
            *(_OWORD *)v67 = *(_OWORD *)v53;
            v67 += 16;
            *(_QWORD *)v53 = 0;
            *((_QWORD *)v53 + 1) = 0;
            v53 += 16;
          }
          while (v53 != v75);
          size = v115.__r_.__value_.__l.__size_;
          v53 = v110;
        }
        v76 = (std::string::size_type)v109;
        v77 = v111;
        v109 = (char *)size;
        v110 = v67;
        v111 = v116;
        v115.__r_.__value_.__r.__words[2] = (std::string::size_type)v53;
        v116 = v77;
        v115.__r_.__value_.__r.__words[0] = v76;
        v115.__r_.__value_.__l.__size_ = v76;
        std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)&v115);
      }
LABEL_105:
      v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
      v92 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
      if (*((_QWORD *)&v108 + 1))
      {
        v93 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v33 = v109;
    }
  }
  v95 = (uint64_t *)v112;
  if (v112 == (uint64_t **)&v113)
  {
    v18 = 0;
  }
  else
  {
    while (1)
    {
      v96 = (std::__shared_weak_count *)v95[5];
      v115.__r_.__value_.__r.__words[0] = v95[4];
      v115.__r_.__value_.__l.__size_ = (std::string::size_type)v96;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldxr(v97);
        while (__stxr(v98 + 1, v97));
      }
      v18 = RIO_MTLX::Collection::matchesGeomString();
      if (v96)
      {
        v99 = (unint64_t *)&v96->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      if ((v18 & 1) != 0)
        break;
      v101 = (uint64_t *)v95[1];
      if (v101)
      {
        do
        {
          v102 = (uint64_t **)v101;
          v101 = (uint64_t *)*v101;
        }
        while (v101);
      }
      else
      {
        do
        {
          v102 = (uint64_t **)v95[2];
          v103 = *v102 == v95;
          v95 = (uint64_t *)v102;
        }
        while (!v103);
      }
      v95 = (uint64_t *)v102;
      if (v102 == (uint64_t **)&v113)
        goto LABEL_130;
    }
    v18 = 1;
  }
LABEL_130:
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(v113);
  return v18;
}

void sub_2300F37EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(a22);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::Collection::validate(RIO_MTLX *a1, std::string *a2)
{
  uint64_t result;
  void *__p[2];
  char v6;
  char v7;

  v7 = 1;
  RIO_MTLX::UNIVERSAL_GEOM_NAME(a1);
  RIO_MTLX::Collection::matchesGeomString(a1, (std::string *)&RIO_MTLX::UNIVERSAL_GEOM_NAME(void)::v);
  std::string::basic_string[abi:ne180100]<0>(__p, "Cycle in collection include chain");
  RIO_MTLX::Element::validateRequire((uint64_t)a1, 1, &v7, a2, (const void **)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  LODWORD(result) = RIO_MTLX::Element::validate((uint64_t)a1, a2);
  if (v7)
    return result;
  else
    return 0;
}

void sub_2300F3914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::GeomElement::~GeomElement(RIO_MTLX::GeomElement *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

void RIO_MTLX::Collection::~Collection(RIO_MTLX::Collection *this)
{
  RIO_MTLX::Element::~Element(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<RIO_MTLX::GeomPath>,std::reverse_iterator<RIO_MTLX::GeomPath*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **i;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
    for (i = *(void ***)(*(_QWORD *)(a1 + 16) + 8); i != v3; i += 4)
    {
      v5 = i;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<RIO_MTLX::GeomPath>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(*a1);
    std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(a1[1]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

_QWORD *realityio::UsdStageObserver::UsdStageObserver(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::UsdStage *v9;
  pxrInternal__aapl__pxrReserved__ *PseudoRoot;
  int8x16_t *UsdPrimDefaultPredicate;
  uint64_t v12;
  int8x16_t v13;
  __int128 *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int **v18;
  realityio::UsdStageObserver *v19;
  realityio::UsdStageDelta *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = &off_24FDF6380;
  a1[2] = *a2;
  v7 = a1 + 2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(a1 + 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
    goto LABEL_4;
  if (v8 != a3)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
LABEL_4:
    a1[9] = v8;
    goto LABEL_6;
  }
  a1[9] = a1 + 6;
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 6);
LABEL_6:
  a1[14] = 0;
  a1[11] = 0;
  a1[10] = a1 + 11;
  a1[15] = 0;
  a1[12] = 0;
  a1[13] = a1 + 14;
  v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
  PseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v9);
  *(_QWORD *)&v53 = &off_24FDF6458;
  *((_QWORD *)&v53 + 1) = a1;
  v55 = &v53;
  UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(PseudoRoot);
  v12 = UsdPrimDefaultPredicate[1].i64[0];
  v13.i64[0] = -8193;
  v13.i64[0] = vandq_s8(*UsdPrimDefaultPredicate, v13).u64[0];
  v13.i64[1] = vorrq_s8(*UsdPrimDefaultPredicate, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  v51 = v13;
  v52 = v12;
  realityio::visitPrimHierarchy((uint64_t)&v47, (uint64_t)&v53, &v51);
  v14 = v55;
  if (v55 == &v53)
  {
    v15 = 4;
    v14 = &v53;
  }
  else
  {
    if (!v55)
      goto LABEL_11;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_11:
  if ((v50 & 7) != 0)
  {
    v16 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
  if (v48)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48);
  if (a1[9])
  {
    v46 = (unsigned int *)*v7;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v46);
    *((_QWORD *)&v53 + 1) = 0;
    v54 = 0;
    *(_QWORD *)&v53 = (char *)&v53 + 8;
    realityio::UsdStageDelta::UsdStageDelta(&v47, &v46, (uint64_t)&v53);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&v53, *((_QWORD **)&v53 + 1));
    v18 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v46);
    v19 = (realityio::UsdStageObserver *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v18);
    realityio::UsdStageObserver::_updateStageDeltaWithResyncWithRootPrim(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v47, v20);
    v21 = a1[9];
    if (!v21)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 48))(v21, &v47);
    realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)&v47);
  }
  pxrInternal__aapl__pxrReserved__::Tf_Remnant::Register(v6, (unint64_t *)&v47);
  v22 = v47;
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v47, a2);
  v23 = operator new();
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v51);
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = 0;
  *(_WORD *)(v23 + 32) = 1;
  *(_QWORD *)v23 = &off_24FDF63E0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 40) = a1;
  *(_QWORD *)(v23 + 48) = v22;
  if (v22)
  {
    v25 = (unsigned int *)(v22 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = v48;
  *(_QWORD *)(v23 + 56) = v47;
  *(_QWORD *)(v23 + 64) = v27;
  if (v27)
  {
    v28 = (unsigned int *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = v48;
    *(_QWORD *)(v23 + 72) = realityio::UsdStageObserver::_OnUsdObjectsChanged;
    *(_QWORD *)(v23 + 80) = 0;
    if (v30)
    {
      v31 = (unsigned int *)(v30 + 8);
      do
      {
        v32 = __ldxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    }
  }
  else
  {
    *(_QWORD *)(v23 + 72) = realityio::UsdStageObserver::_OnUsdObjectsChanged;
    *(_QWORD *)(v23 + 80) = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_Register((pxrInternal__aapl__pxrReserved__::TfNotice *)v23, v24);
  v34 = (unsigned int *)a1[5];
  *((_OWORD *)a1 + 2) = v53;
  *((_QWORD *)&v53 + 1) = 0;
  if (v34)
  {
    v35 = v34 + 2;
    do
    {
      v36 = __ldxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
    v38 = *((_QWORD *)&v53 + 1);
    *(_QWORD *)&v53 = 0;
    if (*((_QWORD *)&v53 + 1))
    {
      v39 = (unsigned int *)(*((_QWORD *)&v53 + 1) + 8);
      do
      {
        v40 = __ldxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v22)
  {
    v42 = (unsigned int *)(v22 + 8);
    do
    {
      v43 = __ldxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  return a1;
}

void sub_2300F3E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,_QWORD *a26)
{
  uint64_t v26;
  unsigned int **v27;
  unsigned int **v28;
  unsigned int **v29;
  _QWORD *v30;
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  const void *v38;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&a25, a26);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a9);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(*(_QWORD **)(v26 + 112));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(*(_QWORD **)(v26 + 88));
  v32 = *(_QWORD **)(v26 + 72);
  if (v32 == v30)
  {
    v33 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
    v30 = *(_QWORD **)(v26 + 72);
  }
  (*(void (**)(_QWORD *))(*v30 + 8 * v33))(v30);
LABEL_6:
  v34 = *(unsigned int **)(v26 + 40);
  if (v34)
  {
    v35 = v34 + 2;
    do
    {
      v36 = __ldxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v29);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v28);
  pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase(v27, v38);
  _Unwind_Resume(a1);
}

void realityio::UsdStageObserver::_updateStageDeltaWithResyncWithRootPrim(realityio::UsdStageObserver *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, realityio::UsdStageDelta *a3)
{
  _QWORD **v5;
  _QWORD *v6[2];
  _BYTE v7[96];

  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  realityio::UsdPrimDelta::UsdPrimDelta((uint64_t)v7, this, 1, (uint64_t)&v5);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)&v5, v6[0]);
  realityio::UsdStageDelta::setPrimDeltaForPrimPath(a2, (const realityio::UsdPrimDelta *)v7, this);
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)v7);
}

void sub_2300F4070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)va);
  _Unwind_Resume(a1);
}

void realityio::UsdStageObserver::_OnUsdObjectsChanged(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a2, _QWORD *a3)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t ResyncedPaths;
  uint64_t ChangedInfoOnlyPaths;
  int8x16_t v12;
  uint64_t *v13;
  char *v14;
  char *i;
  _DWORD *j;
  _DWORD *v17;
  pxrInternal__aapl__pxrReserved__::UsdStage *v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  char *v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  int8x16_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD *v39[2];
  unsigned int *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  pxrInternal__aapl__pxrReserved__::SdfPath *v47;
  pxrInternal__aapl__pxrReserved__::SdfPath *v48;
  void **v49;
  unint64_t v50;
  void (**v51)(realityio::UsdMetadataDelta *__hidden);
  uint64_t v52;
  _QWORD v53[3];
  char **v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const(a3);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (uint64_t *)(a1 + 16);
    if (a3[1]
      && (v9 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a3 + 1),
          (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9)))
    {
      if (!a3[1]
        || !*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a3 + 1)
                     + 14)
        || !*a3
        || *a3 != *v8)
      {
        return;
      }
    }
    else if (*v8)
    {
      return;
    }
    if (*(_QWORD *)(a1 + 72))
    {
      ResyncedPaths = pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResyncedPaths(a2);
      ChangedInfoOnlyPaths = pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedInfoOnlyPaths(a2);
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator,0>(&v47, *(_QWORD **)ChangedInfoOnlyPaths, (_QWORD *)(ChangedInfoOnlyPaths + 8));
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator,0>(&v44, *(_QWORD **)ResyncedPaths, (_QWORD *)(ResyncedPaths + 8));
      v13 = (uint64_t *)(a1 + 24);
      v37 = a1;
      if (*(_QWORD *)(a1 + 24))
      {
        v41 = 0;
        v42 = 0;
        v43 = 0;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(&v41, v44, v45, (v45 - v44) >> 3);
        v14 = v44;
        for (i = v45;
              i != v14;
              std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)&v46, (uint64_t)i))
        {
          i -= 8;
        }
        v45 = v14;
        v17 = v41;
        for (j = v42; v17 != j; v17 += 2)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v53, v17);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v53 + 1, v17 + 1);
          v49 = 0;
          v50 = 0;
          v51 = 0;
          v18 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v13);
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v53);
          v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v8);
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v53);
          if ((convertResyncToInfoChange((pxrInternal__aapl__pxrReserved__::UsdObject *)&v54, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v59, (uint64_t *)&v49) & 1) != 0)
          {
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>((uint64_t *)&v47, v48, v49, (_DWORD *)v50, (uint64_t)(v50 - (_QWORD)v49) >> 3);
          }
          else
          {
            v20 = v45;
            if ((unint64_t)v45 >= v46)
            {
              v21 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t *)&v44, v53);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v45, v53);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v20 + 1, (_DWORD *)v53 + 1);
              v21 = v20 + 8;
            }
            v45 = v21;
          }
          if ((v62 & 7) != 0)
          {
            v22 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
            do
              v23 = __ldxr(v22);
            while (__stlxr(v23 - 2, v22));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
          if (v60)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v60);
          if ((v57 & 7) != 0)
          {
            v24 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
            do
              v25 = __ldxr(v24);
            while (__stlxr(v25 - 2, v24));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
          if (v55)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v55);
          v54 = (char **)&v49;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v53);
        }
        v54 = (char **)&v41;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
        a1 = v37;
      }
      realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)v44, (pxrInternal__aapl__pxrReserved__::SdfPath *)v45, 1, v12);
      realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(a1, v47, v48, 0, v26);
      v40 = (unsigned int *)*v8;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v40);
      v55 = 0;
      v56 = 0;
      v54 = (char **)&v55;
      realityio::UsdStageDelta::UsdStageDelta(&v41, &v40, (uint64_t)&v54);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&v54, v55);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v40);
      v39[0] = 0;
      v39[1] = 0;
      v38 = (uint64_t *)v39;
      realityio::UsdStageObserver::_updateStageDelta(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)v44, (pxrInternal__aapl__pxrReserved__::SdfPath *)v45, 1, &v38, (realityio::UsdStageDelta *)&v41, a2);
      realityio::UsdStageObserver::_updateStageDelta(a1, v47, v48, 0, &v38, (realityio::UsdStageDelta *)&v41, a2);
      v58 = (unsigned int *)*v8;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v58);
      v55 = 0;
      v56 = 0;
      v54 = (char **)&v55;
      realityio::UsdStageDelta::UsdStageDelta(&v59, &v58, (uint64_t)&v54);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy((uint64_t)&v54, v55);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v58);
      v27 = v38;
      if (v38 != (uint64_t *)v39)
      {
        do
        {
          v50 = 0;
          v51 = 0;
          v49 = (void **)&v50;
          realityio::UsdPrimDelta::UsdPrimDelta((uint64_t)&v54, (_DWORD *)v27 + 8, 0, (uint64_t)&v49);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)&v49, (_QWORD *)v50);
          memset(v53, 0, sizeof(v53));
          v28 = (uint64_t *)v27[5];
          if (v28 != v27 + 6)
          {
            do
            {
              realityio::UsdPropertyDelta::UsdPropertyDelta((realityio::UsdPropertyDelta *)&v49, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v28 + 4));
              realityio::UsdPrimDelta::setPropertyDeltaForPropertyName((realityio::UsdPrimDelta *)&v54, (const realityio::UsdPropertyDelta *)&v49, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v28 + 4), 0);
              v49 = (void **)&off_24FDF1338;
              v51 = &off_24FDF4548;
              std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&v52);
              if ((v50 & 7) != 0)
              {
                v29 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
                do
                  v30 = __ldxr(v29);
                while (__stlxr(v30 - 2, v29));
              }
              v31 = (uint64_t *)v28[1];
              if (v31)
              {
                do
                {
                  v32 = v31;
                  v31 = (uint64_t *)*v31;
                }
                while (v31);
              }
              else
              {
                do
                {
                  v32 = (uint64_t *)v28[2];
                  v33 = *v32 == (_QWORD)v28;
                  v28 = v32;
                }
                while (!v33);
              }
              v28 = v32;
            }
            while (v32 != v27 + 6);
          }
          realityio::UsdStageDelta::setPrimDeltaForPrimPath((realityio::UsdStageDelta *)&v59, (const realityio::UsdPrimDelta *)&v54, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 + 4));
          v49 = (void **)v53;
          std::vector<realityio::UsdPropertyDelta>::__destroy_vector::operator()[abi:ne180100](&v49);
          realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)&v54);
          v34 = (uint64_t *)v27[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (uint64_t *)v27[2];
              v33 = *v35 == (_QWORD)v27;
              v27 = v35;
            }
            while (!v33);
          }
          v27 = v35;
        }
        while (v35 != (uint64_t *)v39);
      }
      realityio::UsdStageDelta::updateWithStageDelta((realityio::UsdStageDelta *)&v41, (const realityio::UsdStageDelta *)&v59);
      realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)&v59);
      v36 = *(_QWORD *)(v37 + 72);
      if (!v36)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v36 + 48))(v36, &v41);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::destroy((uint64_t)&v38, v39[0]);
      realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)&v41);
      v54 = &v44;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      v54 = (char **)&v47;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
    }
  }
}

void sub_2300F4648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44)
{
  a44 = (void **)&a27;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a44);
  a44 = (void **)&a30;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a44);
  _Unwind_Resume(a1);
}

void realityio::UsdStageObserver::~UsdStageObserver(realityio::UsdStageObserver *this)
{
  realityio::UsdStageObserver *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  const void *v8;

  *(_QWORD *)this = &off_24FDF6380;
  if (pxrInternal__aapl__pxrReserved__::TfNotice::Key::IsValid((realityio::UsdStageObserver *)((char *)this + 32)))
    pxrInternal__aapl__pxrReserved__::TfNotice::Revoke();
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(*((_QWORD **)this + 14));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(*((_QWORD **)this + 11));
  v2 = (realityio::UsdStageObserver *)*((_QWORD *)this + 9);
  if (v2 == (realityio::UsdStageObserver *)((char *)this + 48))
  {
    v3 = 4;
    v2 = (realityio::UsdStageObserver *)((char *)this + 48);
    goto LABEL_7;
  }
  if (v2)
  {
    v3 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)this + 3);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)this + 2);
  pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase((unsigned int **)this + 1, v8);
}

{
  realityio::UsdStageObserver::~UsdStageObserver(this);
  JUMPOUT(0x2348B4E1CLL);
}

CFStringRef realityio::UsdStageObserver::description@<X0>(realityio::UsdStageObserver *this@<X0>, CFStringRef *a2@<X8>)
{
  _BOOL4 IsValid;
  const char *v5;
  CFStringRef result;

  *a2 = 0;
  IsValid = pxrInternal__aapl__pxrReserved__::TfNotice::Key::IsValid((realityio::UsdStageObserver *)((char *)this + 32));
  v5 = "false";
  if (IsValid)
    v5 = "true";
  result = CFStringCreateWithFormat(0, 0, CFSTR("<UsdStageObserver: %p { stage: %p, observing stage: %s }>"), this, (char *)this + 16, v5);
  *a2 = result;
  return result;
}

void sub_2300F491C(_Unwind_Exception *a1)
{
  const void **v1;

  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

uint64_t convertResyncToInfoChange(pxrInternal__aapl__pxrReserved__::UsdObject *a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  std::string::value_type *v14;
  std::string::size_type v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  std::string::value_type *v21;
  _DWORD *v22;
  char *v23;
  void ***v24;
  _QWORD *v25;
  void **v26;
  void ***v27;
  BOOL v28;
  _QWORD *v29;
  _QWORD *v30;
  void **v31;
  void **v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unint64_t v40;
  pxrInternal__aapl__pxrReserved__::UsdPrim *v41;
  unint64_t v42;
  pxrInternal__aapl__pxrReserved__::UsdObject *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::UsdObject *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v55;
  pxrInternal__aapl__pxrReserved__::SdfPath *v56;
  void ***v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  void **v61;
  unsigned int *v62;
  unsigned int v63;
  char **v64;
  void **v65;
  char *v66;
  char **v67;
  void **v68;
  void **v69;
  const pxrInternal__aapl__pxrReserved__::SdfAssetPath *v70;
  const pxrInternal__aapl__pxrReserved__::SdfAssetPath *v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  pxrInternal__aapl__pxrReserved__::SdfPath *v79;
  pxrInternal__aapl__pxrReserved__::SdfPath *v80;
  pxrInternal__aapl__pxrReserved__::UsdObject *v81;
  uint64_t v82;
  uint64_t v83;
  pxrInternal__aapl__pxrReserved__::UsdObject *v84;
  pxrInternal__aapl__pxrReserved__::UsdObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t i;
  pxrInternal__aapl__pxrReserved__::UsdObject *v89;
  unint64_t v90;
  uint64_t v91;
  std::string *v92;
  _QWORD *v93;
  std::string *v94;
  std::string *v95;
  _QWORD *v96;
  _QWORD *v97;
  const pxrInternal__aapl__pxrReserved__::TfToken *Name;
  char v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  pxrInternal__aapl__pxrReserved__::UsdPrim *v104;
  unint64_t v105;
  pxrInternal__aapl__pxrReserved__::UsdPrim *v106;
  void ***v107;
  pxrInternal__aapl__pxrReserved__::SdfPath *v108;
  uint64_t v109;
  uint64_t v110;
  __n128 v111;
  int v112;
  int v113;
  void **v114;
  std::string v115;
  uint64_t v116[7];
  std::string v117;
  uint64_t v118[3];
  pxrInternal__aapl__pxrReserved__::UsdObject *v119;
  pxrInternal__aapl__pxrReserved__::UsdObject *v120;
  uint64_t v121;
  uint64_t v122;
  void **v123;
  char *v124;
  uint64_t v125;
  char **v126;
  char *v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  pxrInternal__aapl__pxrReserved__::SdfPath *size;
  pxrInternal__aapl__pxrReserved__::SdfPath *v133;
  pxrInternal__aapl__pxrReserved__::SdfPath *v134;
  uint64_t v135;
  void ***v136;
  uint64_t v137;
  uint64_t v138;

  v5 = a1;
  v138 = *MEMORY[0x24BDAC8D0];
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1)
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2))
  {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAllChildrenNames(v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAllChildrenNames(a2);
  v6 = (_QWORD *)v115.__r_.__value_.__r.__words[0];
  v7 = (_QWORD *)v117.__r_.__value_.__r.__words[0];
  if (v115.__r_.__value_.__l.__size_ - v115.__r_.__value_.__r.__words[0] != v117.__r_.__value_.__l.__size_
                                                                           - v117.__r_.__value_.__r.__words[0])
  {
LABEL_7:
    v111.n128_u64[0] = (unint64_t)&v117;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    return 0;
  }
  while (v6 != (_QWORD *)v115.__r_.__value_.__l.__size_)
  {
    if ((*v6 & 0xFFFFFFFFFFFFFFF8) != (*v7 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_7;
    ++v6;
    ++v7;
  }
  v111.n128_u64[0] = (unint64_t)&v117;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
  v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships(v5);
  v106 = a2;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships(a2);
  v10 = v111.n128_u64[1];
  v11 = v111.n128_u64[0];
  v104 = v5;
  if (v111.n128_u64[0] != v111.n128_u64[1])
  {
    v12 = (char *)&v107 + 4;
    v13 = (_DWORD *)&v136 + 1;
    v14 = &v117.__r_.__value_.__s.__data_[20];
    v105 = v111.n128_u64[1];
    while (1)
    {
      LODWORD(v115.__r_.__value_.__l.__data_) = *(_DWORD *)v11;
      v15 = *(_QWORD *)(v11 + 8);
      v115.__r_.__value_.__l.__size_ = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 48);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v115.__r_.__value_.__r.__words[2], (_DWORD *)(v11 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v115.__r_.__value_.__r.__words[2] + 1, (_DWORD *)(v11 + 20));
      v18 = *(_QWORD *)(v11 + 24);
      v116[0] = v18;
      if ((v18 & 7) != 0)
      {
        v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 2, v19));
        if ((v20 & 1) == 0)
          v116[0] &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v115, &v107);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationshipAtPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v107);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107);
      if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v117) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v115);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v117);
        if (v109 == v131)
        {
          v21 = v14;
          v22 = v13;
          v23 = v12;
          v24 = v107;
          if (v107 == (void ***)&v108)
          {
LABEL_37:
            v126 = 0;
            v127 = 0;
            v128 = 0;
            v123 = 0;
            v124 = 0;
            v125 = 0;
            v12 = v23;
            v13 = v22;
            v14 = v21;
            v10 = v105;
            if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets()
              && pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets())
            {
              v31 = (void **)v126;
              v32 = v123;
              if (v127 - (char *)v126 == v124 - (char *)v123)
              {
                while (v31 != (void **)v127)
                {
                  if (*v31 != *v32)
                    goto LABEL_46;
                  ++v31;
                  ++v32;
                }
              }
              else
              {
LABEL_46:
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v117, &v136);
                v34 = a3[1];
                if (v34 >= a3[2])
                {
                  v35 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v136);
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v136);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v34 + 4), v13);
                  v35 = v34 + 8;
                }
                a3[1] = v35;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v136);
              }
            }
            v136 = &v123;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
            v123 = (void **)&v126;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v123);
            v33 = 0;
          }
          else
          {
            v25 = v129;
            while (((unint64_t)v24[4] & 0xFFFFFFFFFFFFFFF8) == (v25[4] & 0xFFFFFFFFFFFFFFF8)
                 && pxrInternal__aapl__pxrReserved__::VtValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v24 + 5), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v25 + 5)))
            {
              v26 = v24[1];
              v27 = v24;
              if (v26)
              {
                do
                {
                  v24 = (void ***)v26;
                  v26 = (void **)*v26;
                }
                while (v26);
              }
              else
              {
                do
                {
                  v24 = (void ***)v27[2];
                  v28 = *v24 == (void **)v27;
                  v27 = v24;
                }
                while (!v28);
              }
              v29 = (_QWORD *)v25[1];
              if (v29)
              {
                do
                {
                  v30 = v29;
                  v29 = (_QWORD *)*v29;
                }
                while (v29);
              }
              else
              {
                do
                {
                  v30 = (_QWORD *)v25[2];
                  v28 = *v30 == (_QWORD)v25;
                  v25 = v30;
                }
                while (!v28);
              }
              v25 = v30;
              if (v24 == (void ***)&v108)
                goto LABEL_37;
            }
            v33 = 1;
            v12 = v23;
            v13 = v22;
            v14 = v21;
            v10 = v105;
          }
        }
        else
        {
          v33 = 1;
        }
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v129, v130);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v107, v108);
      }
      else
      {
        v33 = 1;
      }
      if ((v118[0] & 7) != 0)
      {
        v36 = (unsigned int *)(v118[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v117.__r_.__value_.__r.__words[2]);
      if (v117.__r_.__value_.__l.__size_)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v117.__r_.__value_.__l.__size_);
      if ((v116[0] & 7) != 0)
      {
        v38 = (unsigned int *)(v116[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115.__r_.__value_.__r.__words[2]);
      if (v115.__r_.__value_.__l.__size_)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v115.__r_.__value_.__l.__size_);
      if (v33)
        break;
      v11 += 32;
      if (v11 == v10)
      {
        v40 = v111.n128_u64[1];
        v11 = v111.n128_u64[0];
        v5 = v104;
        goto LABEL_66;
      }
    }
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    return 0;
  }
  v40 = v111.n128_u64[0];
LABEL_66:
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&v117, (uint64_t)(v40 - v11) >> 5);
  v41 = a2;
  v42 = v111.n128_u64[1];
  v43 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v111.n128_u64[0];
  if (v111.n128_u64[0] != v111.n128_u64[1])
  {
    v44 = v117.__r_.__value_.__r.__words[0];
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v43, &v115);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v44, (int *)&v115);
      v45 = v44 + 4;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v45);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
      v43 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v43 + 32);
      v44 = v45 + 4;
    }
    while (v43 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v42);
  }
  v46 = 126 - 2 * __clz((uint64_t)(v117.__r_.__value_.__l.__size_ - v117.__r_.__value_.__r.__words[0]) >> 3);
  if (v117.__r_.__value_.__l.__size_ == v117.__r_.__value_.__r.__words[0])
    v47 = 0;
  else
    v47 = v46;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *,false>((uint64_t)v117.__r_.__value_.__l.__data_, (pxrInternal__aapl__pxrReserved__::SdfPath *)v117.__r_.__value_.__l.__size_, v47, 1);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&v107, (v120 - v119) >> 5);
  v49 = v119;
  v48 = (uint64_t)v120;
  if (v119 != v120)
  {
    v50 = (uint64_t)v107;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v49, &v115);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v50, (int *)&v115);
      v51 = v50 + 4;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v51);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
      v49 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v49 + 32);
      v50 = v51 + 4;
    }
    while (v49 != (pxrInternal__aapl__pxrReserved__::UsdObject *)v48);
  }
  v129 = 0;
  v130 = 0;
  v136 = v107;
  v133 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v117.__r_.__value_.__r.__words[0];
  v134 = v108;
  v131 = 0;
  size = (pxrInternal__aapl__pxrReserved__::SdfPath *)v117.__r_.__value_.__l.__size_;
  v126 = (char **)&v129;
  v127 = 0;
  std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::insert_iterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>> &>((uint64_t)&v115, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v136, &v134, &v133, &size, (uint64_t)&v126);
  v53 = v129;
  v52 = v130;
  if (v129 != v130)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v115, v53);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v115.__r_.__value_.__r.__words + 1, v53 + 1);
      v54 = a3[1];
      if (v54 >= a3[2])
      {
        v55 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, &v115);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v115);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v54 + 4), (_DWORD *)v115.__r_.__value_.__r.__words + 1);
        v55 = v54 + 8;
      }
      a3[1] = v55;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
      v53 += 2;
    }
    while (v53 != (_DWORD *)v52);
  }
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes(v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes(v106);
  v57 = v107;
  v56 = v108;
  if (v107 != (void ***)v108)
  {
    while (1)
    {
      v111.n128_u32[0] = *(_DWORD *)v57;
      v58 = (unint64_t)v57[1];
      v111.n128_u64[1] = v58;
      if (v58)
      {
        v59 = (unint64_t *)(v58 + 48);
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v112, (_DWORD *)v57 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v113, (_DWORD *)v57 + 5);
      v61 = v57[3];
      v114 = v61;
      if ((v61 & 7) != 0)
      {
        v62 = (unsigned int *)((unint64_t)v61 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 2, v62));
        if ((v63 & 1) == 0)
          v114 = (void **)((unint64_t)v114 & 0xFFFFFFFFFFFFFFF8);
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v111, &v115);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributeAtPath(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v115);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
      if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v119) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v111);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v119);
        if (v128 == v125)
        {
          v64 = v126;
          if (v126 == &v127)
          {
LABEL_106:
            v137 = 0;
            v135 = 0;
            v41 = v106;
            if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
              && pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
              && (pxrInternal__aapl__pxrReserved__::VtValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v136, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v134) & 1) == 0)
            {
              if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)&v136)
                && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)&v134))
              {
                if ((v137 & 4) != 0)
                  v70 = (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)(*(uint64_t (**)(void ****))((v137 & 0xFFFFFFFFFFFFFFF8) + 168))(&v136);
                else
                  v70 = (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v136;
                pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v115, v70);
                if ((v135 & 4) != 0)
                  v71 = (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPath **))((v135 & 0xFFFFFFFFFFFFFFF8) + 168))(&v134);
                else
                  v71 = v134;
                pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v117, v71);
                if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)v116, (unsigned __int8 *)v118))
                {
                  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v119, &v133);
                  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back[abi:ne180100](a3, &v133);
                  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v133);
                }
                pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)&v117.__r_.__value_.__l.__data_);
                pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)&v115.__r_.__value_.__l.__data_);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v119, &v115);
                v73 = a3[1];
                if (v73 >= a3[2])
                {
                  v74 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a3, &v115);
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v115);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v73 + 4), (_DWORD *)v115.__r_.__value_.__r.__words + 1);
                  v74 = v73 + 8;
                }
                a3[1] = v74;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
              }
            }
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v134);
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v136);
            v72 = 0;
          }
          else
          {
            v65 = v123;
            while (((unint64_t)v64[4] & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v65[4] & 0xFFFFFFFFFFFFFFF8)
                 && pxrInternal__aapl__pxrReserved__::VtValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v64 + 5), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v65 + 5)))
            {
              v66 = v64[1];
              v67 = v64;
              if (v66)
              {
                do
                {
                  v64 = (char **)v66;
                  v66 = *(char **)v66;
                }
                while (v66);
              }
              else
              {
                do
                {
                  v64 = (char **)v67[2];
                  v28 = *v64 == (char *)v67;
                  v67 = v64;
                }
                while (!v28);
              }
              v68 = (void **)v65[1];
              if (v68)
              {
                do
                {
                  v69 = v68;
                  v68 = (void **)*v68;
                }
                while (v68);
              }
              else
              {
                do
                {
                  v69 = (void **)v65[2];
                  v28 = *v69 == v65;
                  v65 = v69;
                }
                while (!v28);
              }
              v65 = v69;
              if (v64 == &v127)
                goto LABEL_106;
            }
            v72 = 1;
            v41 = v106;
          }
        }
        else
        {
          v72 = 1;
        }
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v123, v124);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v126, v127);
      }
      else
      {
        v72 = 1;
      }
      if ((v122 & 7) != 0)
      {
        v75 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
        do
          v76 = __ldxr(v75);
        while (__stlxr(v76 - 2, v75));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v121);
      if (v120)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v120);
      if ((v114 & 7) != 0)
      {
        v77 = (unsigned int *)((unint64_t)v114 & 0xFFFFFFFFFFFFFFF8);
        do
          v78 = __ldxr(v77);
        while (__stlxr(v78 - 2, v77));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v112);
      if (v111.n128_u64[1])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v111.n128_i64[1]);
      if (v72)
        break;
      v57 += 4;
      if (v57 == (void ***)v56)
      {
        v57 = v107;
        v79 = v108;
        v5 = v104;
        goto LABEL_145;
      }
    }
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    return 0;
  }
  v79 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v107;
LABEL_145:
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&v117, (v79 - (pxrInternal__aapl__pxrReserved__::SdfPath *)v57) >> 5);
  v81 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v107;
  v80 = v108;
  if (v107 != (void ***)v108)
  {
    v82 = v117.__r_.__value_.__r.__words[0];
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v81, &v115);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v82, (int *)&v115);
      v83 = v82 + 4;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v83);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
      v81 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v81 + 32);
      v82 = v83 + 4;
    }
    while (v81 != v80);
  }
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector(&v111, ((char *)v130 - (char *)v129) >> 5);
  v85 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v129;
  v84 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v130;
  if (v129 != v130)
  {
    v86 = v111.n128_u64[0];
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v85, &v115);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v86, (int *)&v115);
      v87 = v86 + 4;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v87);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
      v85 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v85 + 32);
      v86 = v87 + 4;
    }
    while (v85 != v84);
  }
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v136 = (void ***)v111.n128_u64[0];
  v133 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v117.__r_.__value_.__r.__words[0];
  v134 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v111.n128_u64[1];
  size = (pxrInternal__aapl__pxrReserved__::SdfPath *)v117.__r_.__value_.__l.__size_;
  v126 = (char **)&v119;
  v127 = 0;
  std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::insert_iterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>> &>((uint64_t)&v115, (const pxrInternal__aapl__pxrReserved__::SdfPath **)&v136, &v134, &v133, &size, (uint64_t)&v126);
  v89 = v119;
  for (i = (uint64_t)v120;
        v89 != (pxrInternal__aapl__pxrReserved__::UsdObject *)i;
        v89 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v89 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v115, v89);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v115.__r_.__value_.__r.__words + 1, (_DWORD *)v89 + 1);
    v90 = a3[1];
    if (v90 >= a3[2])
    {
      v91 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, &v115);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a3[1], &v115);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v90 + 4), (_DWORD *)v115.__r_.__value_.__r.__words + 1);
      v91 = v90 + 8;
    }
    a3[1] = v91;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v115);
  }
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata(v5);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata(v41);
  if (v115.__r_.__value_.__r.__words[2] != v117.__r_.__value_.__r.__words[2])
  {
LABEL_187:
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v117, (_QWORD *)v117.__r_.__value_.__l.__size_);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v115, (_QWORD *)v115.__r_.__value_.__l.__size_);
    return 0;
  }
  v92 = (std::string *)v115.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v115.__r_.__value_.__l.__data_ != &v115.__r_.__value_.__r.__words[1])
  {
    v93 = (_QWORD *)v117.__r_.__value_.__r.__words[0];
    while ((v92[1].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) == (v93[4] & 0xFFFFFFFFFFFFFFF8)
         && pxrInternal__aapl__pxrReserved__::VtValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v92[1].__r_.__value_.__r.__words[2], (const pxrInternal__aapl__pxrReserved__::VtValue *)(v93 + 5)))
    {
      v94 = (std::string *)v92->__r_.__value_.__l.__size_;
      v95 = v92;
      if (v94)
      {
        do
        {
          v92 = v94;
          v94 = (std::string *)v94->__r_.__value_.__r.__words[0];
        }
        while (v94);
      }
      else
      {
        do
        {
          v92 = (std::string *)v95->__r_.__value_.__r.__words[2];
          v28 = v92->__r_.__value_.__r.__words[0] == (_QWORD)v95;
          v95 = v92;
        }
        while (!v28);
      }
      v96 = (_QWORD *)v93[1];
      if (v96)
      {
        do
        {
          v97 = v96;
          v96 = (_QWORD *)*v96;
        }
        while (v96);
      }
      else
      {
        do
        {
          v97 = (_QWORD *)v93[2];
          v28 = *v97 == (_QWORD)v93;
          v93 = v97;
        }
        while (!v28);
      }
      v93 = v97;
      if (v92 == (std::string *)&v115.__r_.__value_.__r.__words[1])
        goto LABEL_172;
    }
    goto LABEL_187;
  }
LABEL_172:
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v117, (_QWORD *)v117.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v115, (_QWORD *)v115.__r_.__value_.__l.__size_);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAllChildren((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v115, (uint64_t)v5);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::begin((__n128 *)&v115, (__n128 *)&v117);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::end((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *)&v115, &v111);
  while (*(_OWORD *)&v117.__r_.__value_.__l.__data_ != *(_OWORD *)&v111
       || (pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v117.__r_.__value_.__r.__words[2], (uint64_t)&v112) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v117, (uint64_t)&v119);
    Name = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v119);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild(v106, Name);
    v99 = convertResyncToInfoChange(&v119, &v107, a3);
    if ((v110 & 7) != 0)
    {
      v100 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
      do
        v101 = __ldxr(v100);
      while (__stlxr(v101 - 2, v100));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v109);
    if (v108)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v108);
    if ((v122 & 7) != 0)
    {
      v102 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
      do
        v103 = __ldxr(v102);
      while (__stlxr(v103 - 2, v102));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v121);
    if (v120)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v120);
    if ((v99 & 1) == 0)
    {
      v8 = 0;
      goto LABEL_189;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v117);
  }
  v8 = 1;
LABEL_189:
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v111);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v117);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::~UsdPrimSiblingRange((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *)&v115);
  return v8;
}

void sub_2300F58E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v40 - 136));
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)&a34);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a24);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v40 - 128));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v40 - 112));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(v40 - 216, *(_QWORD **)(v40 - 208));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(v40 - 192, *(_QWORD **)(v40 - 184));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a40);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a19);
  a34 = (uint64_t *)(v40 - 168);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  a34 = &a15;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= a1[2])
  {
    result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1[1], a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v4 + 4), a2 + 1);
    result = v4 + 8;
  }
  a1[1] = result;
  return result;
}

{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= a1[2])
  {
    result = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(a1, a2);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1[1], a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v4 + 4), a2 + 1);
    result = v4 + 8;
  }
  a1[1] = result;
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(std::string *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2300F5D0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAllChildren(pxrInternal__aapl__pxrReserved__::UsdPrim *this, uint64_t a2)
{
  uint64_t *UsdPrimAllPrimsPredicate;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];

  UsdPrimAllPrimsPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(this);
  v6 = *UsdPrimAllPrimsPredicate;
  v5 = UsdPrimAllPrimsPredicate[1];
  v7 = UsdPrimAllPrimsPredicate[2];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  v9[0] = v6;
  v9[1] = v5;
  v9[2] = v7;
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(a2, v9, (uint64_t)this);
}

__n128 pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::begin@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  a2->n128_u64[0] = this->n128_u64[0];
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&a2->n128_u32[2], &this->n128_u32[2]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&a2->n128_u32[3], &this->n128_u32[3]);
  result = this[1];
  a2[1] = result;
  a2[2].n128_u64[0] = this[2].n128_u64[0];
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::end@<Q0>(pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  a2->n128_u64[0] = *((_QWORD *)this + 5);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&a2->n128_u32[2], (_DWORD *)this + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&a2->n128_u32[3], (_DWORD *)this + 13);
  result = *(__n128 *)((char *)this + 56);
  a2[1] = result;
  a2[2].n128_u64[0] = *((_QWORD *)this + 9);
  return result;
}

uint64_t realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(uint64_t result, pxrInternal__aapl__pxrReserved__::SdfPath *this, pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4, int8x16_t a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t **v8;
  uint64_t *v9;
  pxrInternal__aapl__pxrReserved__::UsdStage *v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  unsigned int *v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__ *IsPrimPath;
  int8x16_t *UsdPrimDefaultPredicate;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  int8x16_t v22;
  int8x16_t v23;
  __int128 v24;
  uint64_t v25;
  char v26[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[8];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[8];
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (this != a3)
  {
    v7 = this;
    v8 = (uint64_t **)result;
    v9 = (uint64_t *)(result + 16);
    a5.i64[0] = -8193;
    v23 = a5;
    v22 = (int8x16_t)vdupq_n_s64(0x2000uLL);
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v7);
      v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v9);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v34);
      if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v30) & 1) != 0)
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(v7))
        {
          NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v7);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)v30, NameToken);
          realityio::UsdStageObserver::_clearPreviousPropertyAndPrimMappings(v8, (const pxrInternal__aapl__pxrReserved__::UsdProperty *)v26);
          realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromPrimAndProperty(v8, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v30, (const pxrInternal__aapl__pxrReserved__::UsdProperty *)v26);
          if ((v29 & 7) != 0)
          {
            v12 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
            do
              v13 = __ldxr(v12);
            while (__stlxr(v13 - 2, v12));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
          if (v27)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v27);
          goto LABEL_17;
        }
        if (a4)
        {
          IsPrimPath = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v7);
          if ((_DWORD)IsPrimPath)
          {
            v35[0] = &off_24FDF64D8;
            v35[1] = v8;
            v36 = v35;
            UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(IsPrimPath);
            v16 = UsdPrimDefaultPredicate[1].i64[0];
            *(_QWORD *)&v17 = vandq_s8(*UsdPrimDefaultPredicate, v23).u64[0];
            *((_QWORD *)&v17 + 1) = vorrq_s8(*UsdPrimDefaultPredicate, v22).i64[1];
            v24 = v17;
            v25 = v16;
            realityio::visitPrimHierarchy((uint64_t)v30, (uint64_t)v35, &v24);
            v18 = v36;
            if (v36 == v35)
            {
              v18 = v35;
              v19 = 4;
              goto LABEL_16;
            }
            if (v36)
            {
              v19 = 5;
LABEL_16:
              (*(void (**)(void))(*v18 + 8 * v19))();
            }
          }
        }
      }
LABEL_17:
      if ((v33 & 7) != 0)
      {
        v20 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
      if (v31)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v34);
      v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
    }
    while (v7 != a3);
  }
  return result;
}

void sub_2300F6094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,int a25,char a26,uint64_t a27,uint64_t a28,char *a29)
{
  char *v30;
  uint64_t v31;

  v30 = a29;
  if (a29 == &a26)
  {
    v31 = 4;
    v30 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a20);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a24);
  _Unwind_Resume(a1);
}

uint64_t realityio::UsdStageObserver::_updateStageDelta(uint64_t result, pxrInternal__aapl__pxrReserved__::SdfPath *this, pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4, uint64_t **a5, realityio::UsdStageDelta *a6, pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a7)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  _QWORD *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *AbsoluteRootOrPrimPath;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::UsdStage *v14;
  pxrInternal__aapl__pxrReserved__::UsdStage *v15;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  void **v22;
  void **v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t *j;
  uint64_t *v36;
  uint64_t *i;
  realityio::UsdStageDelta *v38;
  pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  const std::string *EmptyString;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v41;
  _QWORD *v42;
  pxrInternal__aapl__pxrReserved__::SdfPath *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  _QWORD *v48;
  _QWORD *v49;
  unsigned int *v50;
  unsigned int v51;
  BOOL v52;
  const pxrInternal__aapl__pxrReserved__::TfToken *v53;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  pxrInternal__aapl__pxrReserved__::TfToken *v63;
  uint64_t *v67;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _BYTE v72[32];
  int64x2_t v73;
  uint64_t v74;
  _QWORD **v75;
  _QWORD *v76[2];
  void ***v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  void ***v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  void **v88[3];
  pxrInternal__aapl__pxrReserved__ *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[2];

  if (this != a3)
  {
    v8 = this;
    v67 = (uint64_t *)(result + 16);
    v71 = result + 104;
    v70 = (_QWORD *)(result + 112);
    v9 = a5 + 1;
    v69 = (uint64_t)a6 + 48;
    while (1)
    {
      AbsoluteRootOrPrimPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(v8);
      v11 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(AbsoluteRootOrPrimPath);
      v12 = v93[0];
      v13 = *v11;
      v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v67);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v93);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v89)
        && pxrInternal__aapl__pxrReserved__::UsdPrim::IsInPrototype(&v89))
      {
        v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v67);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v93);
        while (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v72)
             && pxrInternal__aapl__pxrReserved__::UsdPrim::IsInPrototype((pxrInternal__aapl__pxrReserved__ **)v72)
             && (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)v72, v16) & 1) == 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)v72, (uint64_t)&v77);
          *(_DWORD *)v72 = (_DWORD)v77;
          v17 = v78;
          v78 = 0;
          v18 = *(_QWORD *)&v72[8];
          *(_QWORD *)&v72[8] = v17;
          if (v18)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v72[16], &v79);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v72[20]);
          if ((v72[24] & 7) != 0)
          {
            v19 = (unsigned int *)(*(_QWORD *)&v72[24] & 0xFFFFFFFFFFFFFFF8);
            do
              v20 = __ldxr(v19);
            while (__stlxr(v20 - 2, v19));
          }
          *(_QWORD *)&v72[24] = v80;
          v80 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v79);
          if (v78)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v78);
        }
        v21 = v13;
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetInstances((pxrInternal__aapl__pxrReserved__::UsdPrim *)v72);
        v22 = v88[0];
        v23 = v88[1];
        while (v22 != v23)
        {
          LODWORD(v83) = *(_DWORD *)v22;
          v24 = (uint64_t)v22[1];
          v84 = v24;
          if (v24)
          {
            v25 = (unint64_t *)(v24 + 48);
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v85, (_DWORD *)v22 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v86, (_DWORD *)v22 + 5);
          v27 = (unint64_t)v22[3];
          v87 = v27;
          if ((v27 & 7) != 0)
          {
            v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 2, v28));
            if ((v29 & 1) == 0)
              v87 &= 0xFFFFFFFFFFFFFFF8;
          }
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v83, &v82);
          v76[0] = 0;
          v76[1] = 0;
          v75 = v76;
          realityio::UsdPrimDelta::UsdPrimDelta((uint64_t)&v77, &v82, 1, (uint64_t)&v75);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)&v75, v76[0]);
          realityio::UsdStageDelta::setPrimDeltaForPrimPath(a6, (const realityio::UsdPrimDelta *)&v77, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v82);
          realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)&v77);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v82);
          if ((v87 & 7) != 0)
          {
            v30 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
            do
              v31 = __ldxr(v30);
            while (__stlxr(v31 - 2, v30));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v85);
          if (v84)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v84);
          v22 += 4;
        }
        v77 = v88;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
        if ((v72[24] & 7) != 0)
        {
          v32 = (unsigned int *)(*(_QWORD *)&v72[24] & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v13 = v21;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72[16]);
        if (*(_QWORD *)&v72[8])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v72[8]);
      }
      *(_OWORD *)&v72[8] = 0uLL;
      *(_QWORD *)v72 = &v72[8];
      realityio::UsdPrimDelta::UsdPrimDelta((uint64_t)&v77, v93, 0, (uint64_t)v72);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)v72, *(_QWORD **)&v72[8]);
      if (v12 == v13)
        break;
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v8))
      {
        pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields(a7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v93);
        v36 = *(uint64_t **)&v72[8];
        for (i = *(uint64_t **)v72; i != v36; ++i)
          std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v81, i, i);
        goto LABEL_45;
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(v8))
        goto LABEL_52;
      NameToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v8);
      v63 = NameToken;
      if ((*(_QWORD *)NameToken & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (const std::string *)((*(_QWORD *)NameToken & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
      std::string::basic_string((std::string *)v72, EmptyString, 0, 3uLL, (std::allocator<char> *)&v83);
      if ((v72[23] & 0x80000000) != 0)
      {
        if (*(_QWORD *)&v72[8] != 3)
        {
          operator delete(*(void **)v72);
LABEL_95:
          v53 = v63;
LABEL_96:
          realityio::UsdPropertyDelta::UsdPropertyDelta((realityio::UsdPropertyDelta *)v72, v53);
          pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields(a7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v93);
          v57 = (uint64_t *)v83;
          v56 = v84;
          while (v57 != (uint64_t *)v56)
          {
            MEMORY[0x2348B274C](v88, "default");
            v58 = *v57;
            v59 = (unsigned int *)((unint64_t)v88[0] & 0xFFFFFFFFFFFFFFF8);
            if (((uint64_t)v88[0] & 7) != 0)
            {
              do
                v60 = __ldxr(v59);
              while (__stlxr(v60 - 2, v59));
            }
            if ((unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8) != v59)
              std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v72[24], v57, v57);
            ++v57;
          }
          realityio::UsdPrimDelta::setPropertyDeltaForPropertyName((realityio::UsdPrimDelta *)&v77, (const realityio::UsdPropertyDelta *)v72, v63, v74 == 0);
          v88[0] = (void **)&v83;
          std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](v88);
          *(_QWORD *)v72 = &off_24FDF1338;
          *(_QWORD *)&v72[16] = &off_24FDF4548;
          std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&v72[24]);
          if ((v72[8] & 7) != 0)
          {
            v61 = (unsigned int *)(*(_QWORD *)&v72[8] & 0xFFFFFFFFFFFFFFF8);
            do
              v62 = __ldxr(v61);
            while (__stlxr(v62 - 2, v61));
          }
LABEL_46:
          if (v12 == v13)
          {
            if (!a4)
              goto LABEL_54;
LABEL_53:
            realityio::UsdStageObserver::_updateStageDeltaWithResyncWithRootPrim((realityio::UsdStageObserver *)v93, a6, v38);
          }
          else
          {
LABEL_52:
            if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v8) & a4 & 1) != 0)
              goto LABEL_53;
          }
LABEL_54:
          realityio::UsdStageDelta::setPrimDeltaForPrimPath(a6, (const realityio::UsdPrimDelta *)&v77, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v93);
          v73 = 0u;
          memset(v72, 0, sizeof(v72));
          std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(v72, v93);
          for (; v73.i64[1]; v8 = v43)
          {
            v41 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*(_QWORD *)(*(_QWORD *)&v72[8]
                                                                                + (((unint64_t)v73.i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                    + 8 * (v73.i16[0] & 0x1FF));
            std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)&v73.i64[1], (uint64_t)v41);
            v73 = vaddq_s64(v73, (int64x2_t)xmmword_230208240);
            if (v73.i64[0] >= 0x400uLL)
            {
              operator delete(**(void ***)&v72[8]);
              *(_QWORD *)&v72[8] += 8;
              v73.i64[0] -= 512;
            }
            v42 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v71, v41);
            v43 = v8;
            if (v70 != v42)
            {
              v44 = (_QWORD *)v42[5];
              v45 = v42 + 6;
              if (v44 != v42 + 6)
              {
                do
                {
                  v46 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v44 + 28));
                  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v44 + 28));
                  if (v9 == std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v88))std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(v72, v88);
                  v83 = v88;
                  v47 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)v88, (uint64_t)&std::piecewise_construct, (_DWORD **)&v83);
                  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t **)v47 + 5, v46, v46);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v88);
                  v48 = (_QWORD *)v44[1];
                  if (v48)
                  {
                    do
                    {
                      v49 = v48;
                      v48 = (_QWORD *)*v48;
                    }
                    while (v48);
                  }
                  else
                  {
                    do
                    {
                      v49 = (_QWORD *)v44[2];
                      v52 = *v49 == (_QWORD)v44;
                      v44 = v49;
                    }
                    while (!v52);
                  }
                  v44 = v49;
                }
                while (v49 != v45);
              }
            }
          }
          std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::~deque[abi:ne180100](v72);
          goto LABEL_69;
        }
        v55 = **(_WORD **)v72 != 26997 || *(_BYTE *)(*(_QWORD *)v72 + 2) != 58;
        operator delete(*(void **)v72);
        v53 = v63;
        if (v55)
          goto LABEL_96;
      }
      else
      {
        if (v72[23] != 3)
          goto LABEL_95;
        v52 = *(unsigned __int16 *)v72 == 26997 && v72[2] == 58;
        v53 = v63;
        if (!v52)
          goto LABEL_96;
      }
LABEL_69:
      realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)&v77);
      if ((v92 & 7) != 0)
      {
        v50 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v91);
      if (v90)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v90);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v93);
      v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
      if (v8 == a3)
        return result;
    }
    pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields(a7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v93);
    v34 = *(uint64_t **)&v72[8];
    for (j = *(uint64_t **)v72; j != v34; ++j)
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(v69, j, j);
LABEL_45:
    v83 = (void ***)v72;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    goto LABEL_46;
  }
  return result;
}

void sub_2300F695C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;

  *(_QWORD *)(v47 - 152) = v47 - 184;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 152));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(a18);
  if ((a36 & 7) != 0)
  {
    v49 = (unsigned int *)(a36 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)&a47);
  v51 = *(_QWORD *)(v47 - 104);
  if ((v51 & 7) != 0)
  {
    v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a12);
  v54 = *(_QWORD *)(v47 - 120);
  if (v54)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v47 - 96);
  _Unwind_Resume(a1);
}

_DWORD *std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = ((v5 - v4) << 6) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (_DWORD *)(*(_QWORD *)(v4 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF));
  }
  v9 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8, a2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9 + 1, a2 + 1);
  ++a1[5];
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = ((v5 - v4) << 6) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (_DWORD *)(*(_QWORD *)(v4 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF));
  }
  v9 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8, a2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9 + 1, a2 + 1);
  ++a1[5];
  return result;
}

uint64_t realityio::UsdStageObserver::_clearPreviousPropertyAndPrimMappings(uint64_t **this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  int v20;
  int *v21;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v20);
  v3 = this + 10;
  v21 = &v20;
  v4 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(this + 10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, &v21);
  v5 = (uint64_t *)v4[5];
  v6 = v4 + 6;
  if (v5 != v4 + 6)
  {
    v7 = this + 13;
    do
    {
      v21 = (int *)v5 + 7;
      v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 28), &v21);
      v9 = (uint64_t **)(v8 + 5);
      v10 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)(v8 + 5), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
      v11 = v10;
      if (v8 + 6 != v10)
      {
        v12 = (uint64_t *)v10[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          v14 = v10;
          do
          {
            v13 = (uint64_t *)v14[2];
            v15 = *v13 == (_QWORD)v14;
            v14 = v13;
          }
          while (!v15);
        }
        if (*v9 == v10)
          *v9 = v13;
        v16 = (uint64_t *)v8[6];
        --v8[7];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v16, v11);
        std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)v11 + 28);
        operator delete(v11);
        if (!v8[7])
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__erase_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 28));
      }
      v17 = (uint64_t *)v5[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v5[2];
          v15 = *v18 == (_QWORD)v5;
          v5 = v18;
        }
        while (!v15);
      }
      v5 = v18;
    }
    while (v18 != v6);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__erase_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
}

void sub_2300F6D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);
  _Unwind_Resume(a1);
}

void realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromPrimAndProperty(uint64_t **this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::UsdProperty *a3)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *Name;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *i;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  pxrInternal__aapl__pxrReserved__::SdfPath *v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  pxrInternal__aapl__pxrReserved__::SdfPath *v40;
  pxrInternal__aapl__pxrReserved__::SdfPath *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48[2];
  pxrInternal__aapl__pxrReserved__::SdfPath **v49;

  v48[0] = 0;
  v48[1] = 0;
  v47 = (uint64_t *)v48;
  Name = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a3);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(a2, Name);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v43))
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
    v49 = &v40;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  }
  if ((v46 & 7) != 0)
  {
    v7 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
  if (v44)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a2, Name);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v43)
    && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v43))
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
    v9 = v40;
    for (i = v41; v9 != i; v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v9);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v47, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, &v39);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
    }
    v49 = &v40;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  }
  if ((v46 & 7) != 0)
  {
    v11 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
  if (v44)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a3, &v40);
  v13 = v47;
  if (v47 != (uint64_t *)v48)
  {
    do
    {
      v43 = (uint64_t *)((char *)v13 + 28);
      v14 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(this + 13, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), (_DWORD **)&v43);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t **)v14 + 5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v40);
      v15 = (uint64_t *)v13[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v13[2];
          v17 = *v16 == (_QWORD)v13;
          v13 = v16;
        }
        while (!v17);
      }
      v13 = v16;
    }
    while (v16 != (uint64_t *)v48);
  }
  v43 = (uint64_t *)&v40;
  v18 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(this + 10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (_DWORD **)&v43);
  v19 = v18;
  v20 = (uint64_t **)(v18 + 5);
  if (v18 + 5 != (uint64_t *)&v47)
  {
    v21 = v47;
    if (v18[7])
    {
      v23 = (uint64_t **)(v18 + 6);
      v22 = v18[6];
      v24 = v18[5];
      v18[5] = (uint64_t)(v18 + 6);
      *(_QWORD *)(v22 + 16) = 0;
      v18[6] = 0;
      v18[7] = 0;
      if (*(_QWORD *)(v24 + 8))
        v25 = *(uint64_t **)(v24 + 8);
      else
        v25 = (uint64_t *)v24;
      v43 = v18 + 5;
      v44 = v25;
      v45 = v25;
      if (v25)
      {
        v44 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v25);
        if (v21 == (uint64_t *)v48)
        {
          v30 = (uint64_t *)v48;
        }
        else
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v25 + 28, (_DWORD *)v21 + 7);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v25 + 4), (_DWORD *)v21 + 8);
            v26 = *v23;
            v27 = (uint64_t **)(v19 + 6);
            v28 = (uint64_t **)(v19 + 6);
            if (*v23)
            {
              do
              {
                while (1)
                {
                  v27 = (uint64_t **)v26;
                  if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v25 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v26 + 28)))break;
                  v26 = *v27;
                  v28 = v27;
                  if (!*v27)
                    goto LABEL_38;
                }
                v26 = v27[1];
              }
              while (v26);
              v28 = v27 + 1;
            }
LABEL_38:
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v20, (uint64_t)v27, v28, v25);
            v25 = v44;
            v45 = v44;
            if (v44)
              v44 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v44);
            v29 = (uint64_t *)v21[1];
            if (v29)
            {
              do
              {
                v30 = v29;
                v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                v30 = (uint64_t *)v21[2];
                v17 = *v30 == (_QWORD)v21;
                v21 = v30;
              }
              while (!v17);
            }
            if (!v25)
              break;
            v21 = v30;
          }
          while (v30 != (uint64_t *)v48);
        }
      }
      else
      {
        v30 = v21;
      }
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v43);
      v21 = v30;
    }
    if (v21 != (uint64_t *)v48)
    {
      v31 = v19 + 6;
      do
      {
        v32 = (uint64_t *)operator new(0x28uLL);
        v43 = v32;
        v44 = v31;
        v33 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v32 + 28);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v32 + 7, (_DWORD *)v21 + 7);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v32 + 8, (_DWORD *)v21 + 8);
        LOBYTE(v45) = 1;
        v34 = (uint64_t *)*v31;
        v35 = (uint64_t **)v31;
        v36 = (uint64_t **)v31;
        if (*v31)
        {
          do
          {
            while (1)
            {
              v35 = (uint64_t **)v34;
              if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v33, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v34 + 28)))break;
              v34 = *v35;
              v36 = v35;
              if (!*v35)
                goto LABEL_59;
            }
            v34 = v35[1];
          }
          while (v34);
          v36 = v35 + 1;
        }
LABEL_59:
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v20, (uint64_t)v35, v36, v43);
        v43 = 0;
        std::unique_ptr<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)&v43, 0);
        v37 = (uint64_t *)v21[1];
        if (v37)
        {
          do
          {
            v38 = v37;
            v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = (uint64_t *)v21[2];
            v17 = *v38 == (_QWORD)v21;
            v21 = v38;
          }
          while (!v17);
        }
        v21 = v38;
      }
      while (v38 != (uint64_t *)v48);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v47, v48[0]);
}

void sub_2300F7230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18)
{
  uint64_t v18;

  *(_QWORD *)(v18 - 72) = &a10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 72));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a13);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdProperty::~UsdProperty(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 3);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
}

_QWORD *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::vector<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::PathRange::iterator,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _DWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v15[3];
  char v16;
  _DWORD *v17;
  _DWORD *v18;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = v5;
    do
    {
      v8 = (_QWORD *)v7[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v7[2];
          v10 = *v9 == (_QWORD)v7;
          v7 = v9;
        }
        while (!v10);
      }
      ++v6;
      v7 = v9;
    }
    while (v9 != a3);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](a1, v6);
    v11 = (_DWORD *)a1[1];
    v18 = v11;
    v17 = v11;
    v15[0] = a1 + 2;
    v15[1] = &v17;
    v15[2] = &v18;
    v16 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11, (_DWORD *)v5 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11 + 1, (_DWORD *)v5 + 9);
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v10 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v10);
      }
      v11 = v18 + 2;
      v18 += 2;
      v5 = v13;
    }
    while (v13 != a3);
    v16 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
    a1[1] = v11;
  }
  return a1;
}

void sub_2300F7498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,0>(uint64_t a1)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::UsdStageObserver::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>::~_DelivererWithSender(pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_24FDF63E0;
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 6);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_24FDF63E0;
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 6);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::UsdStageObserver::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::_SendToListener(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  void (*v19)(_QWORD *, uint64_t, uint64_t *);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v9 = a1[6];
  v8 = a1 + 6;
  if (!v9)
    return 0;
  v13 = v8 - 1;
  v14 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v8);
  v15 = *v13;
  v16 = !*(_BYTE *)(v14 + 14) || v15 == 0;
  if (v16
    || a1[8]
    && !*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a1 + 8)
                 + 14))
  {
    return 0;
  }
  if (*a7 != a7[1])
  {
    (*(void (**)(uint64_t *))(*a1 + 40))(a1);
    pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,realityio::UsdStageObserver>::operator->(v13);
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_BeginDelivery();
  }
  if (a4)
    v18 = a4 - 16;
  else
    v18 = 0;
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v26, v18);
  v19 = (void (*)(_QWORD *, uint64_t, uint64_t *))a1[9];
  v20 = a1[10];
  v21 = (_QWORD *)(v15 + (v20 >> 1));
  if ((v20 & 1) != 0)
    v19 = *(void (**)(_QWORD *, uint64_t, uint64_t *))(*v21 + v19);
  v19(v21, a2, &v26);
  v22 = v27;
  if (v27)
  {
    v23 = (unsigned int *)(v27 + 8);
    do
    {
      v24 = __ldxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (*a7 != a7[1])
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery();
  return 1;
}

void sub_2300F77B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::UsdStageObserver::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::GetNoticeType(uint64_t a1, const std::type_info *a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;
  _QWORD v14[4];
  char v15;
  int v16;

  v2 = MEMORY[0x24BEE9CD0];
  v3 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEE9CD0], a2);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v14);
  if (v14[0] == v3)
  {
    v14[0] = "tf/notice.h";
    v14[1] = "GetNoticeType";
    v14[2] = 563;
    v14[3] = "virtual TfType pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserve"
             "d__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver"
             ">, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>, void (realityio"
             "::UsdStageObserver::*)(const pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged &, const pxrIntern"
             "al__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &), pxrInternal__aapl__pxrRe"
             "served__::UsdNotice::ObjectsChanged>>::GetNoticeType() const [Derived = pxrInternal__aapl__pxrReserved__::T"
             "fNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>, pxr"
             "Internal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>, void (realityio::UsdS"
             "tageObserver::*)(const pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged &, const pxrInternal__aa"
             "pl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &), pxrInternal__aapl__pxrReserved"
             "__::UsdNotice::ObjectsChanged>]";
    v15 = 0;
    v16 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(v2 + 8) & 0x7FFFFFFFFFFFFFFFLL), v4);
    v5 = std::string::insert(&v10, 0, "notice type ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, " undefined in the TfType system");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError();
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_2300F7904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::UsdStageObserver::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::Delivers(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;

  (*(void (**)(uint64_t *))(*a1 + 24))(a1);
  result = pxrInternal__aapl__pxrReserved__::TfType::IsA();
  if ((_DWORD)result)
  {
    v8 = a1[8];
    v7 = a1 + 8;
    v6 = v8;
    if (v8)
      v6 = *(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v7)
                    + 14) == 0;
    result = 0;
    if (a3)
    {
      if (!v6)
        return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7 - 1)
             + 16 == a3;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::UsdStageObserver::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::GetSenderWeakBase(uint64_t a1)
{
  uint64_t *v1;
  uint64_t (*v2)(uint64_t *);
  char v3;

  v1 = (uint64_t *)(a1 + 56);
  v2 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const((_QWORD *)(a1 + 56));
  if (v3 & 1 | (unint64_t)v2)
    return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v1)
         + 16;
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererWithSender<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::UsdStageObserver>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,void (realityio::UsdStageObserver::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::Clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v2 = operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 32) = 1;
  *(_QWORD *)v2 = &off_24FDF63E0;
  *(_QWORD *)(v2 + 8) = 0;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 48) = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v2 + 64) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  return v2;
}

void sub_2300F7AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x10E1C40C1C1184DLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,realityio::UsdStageObserver>::operator->(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         result = *a1,
         v4)
      ? (v6 = result == 0)
      : (v6 = 1),
        v6))
  {
    v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *,false>(uint64_t result, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, char a4)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  char v14;
  pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  pxrInternal__aapl__pxrReserved__::SdfPath *v16;
  pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  BOOL v18;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  int v20;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v21;
  pxrInternal__aapl__pxrReserved__::SdfPath *v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  _DWORD *v33;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  pxrInternal__aapl__pxrReserved__::SdfPath *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  pxrInternal__aapl__pxrReserved__::SdfPath *v51;
  _DWORD *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  pxrInternal__aapl__pxrReserved__::SdfPath *v56;
  int64_t v57;
  int v59[2];
  int v60;
  int v61;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)result;
LABEL_2:
  v7 = a2;
  v56 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 8);
  v8 = v6;
  while (2)
  {
    v6 = v8;
    v9 = v7 - v8;
    v10 = v9 >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v56, v6);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
          return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8), v56);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 16), v56);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 16), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 24), v56);
      default:
        if (v9 <= 191)
        {
          if ((a4 & 1) != 0)
          {
            if (v6 != v7)
            {
              v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8);
              if ((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8) != a2)
              {
                v23 = 0;
                v24 = (int *)v6;
                do
                {
                  v25 = (int *)v22;
                  result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v24);
                  v26 = (int *)a2;
                  if ((_DWORD)result)
                  {
                    v60 = *v25;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
                    v61 = v24[3];
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
                    v27 = v23;
                    while (1)
                    {
                      v28 = (char *)v6 + v27;
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v6 + v27 + 8, (int *)((char *)v6 + v27));
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v6 + v27 + 12);
                      if (!v27)
                        break;
                      v27 -= 8;
                      if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v28 - 8)) & 1) == 0)
                      {
                        v29 = (uint64_t)v6 + v27 + 8;
                        goto LABEL_69;
                      }
                    }
                    v29 = (uint64_t)v6;
LABEL_69:
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v29, &v60);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v28 + 4));
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    v26 = (int *)a2;
                    result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
                  }
                  v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v25 + 2);
                  v23 += 8;
                  v24 = v25;
                }
                while (v25 + 2 != v26);
              }
            }
          }
          else if (v6 != v7)
          {
            v51 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8);
            if ((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8) != a2)
            {
              v52 = (_DWORD *)((char *)v6 + 12);
              do
              {
                v53 = (int *)v51;
                result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v51, v6);
                if ((_DWORD)result)
                {
                  v60 = *v53;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
                  v61 = *((_DWORD *)v6 + 3);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
                  v54 = (uint64_t)v52;
                  do
                  {
                    v55 = v54;
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v54 - 4, (int *)(v54 - 12));
                    v54 -= 8;
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v55);
                  }
                  while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v55 - 20)) & 1) != 0);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v54 - 4, &v60);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v54);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
                }
                v51 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v53 + 2);
                v52 += 2;
                v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v53;
              }
              while (v53 + 2 != (int *)a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v6 != v7)
          {
            v57 = (v10 - 2) >> 1;
            v30 = v57;
            do
            {
              v31 = v30;
              if (v57 >= v30)
              {
                v32 = (2 * v30) | 1;
                v33 = (_DWORD *)((char *)v6 + 8 * v32);
                if (2 * v30 + 2 < (uint64_t)v10
                  && pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8 * v32), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v33 + 2)))
                {
                  v33 += 2;
                  v32 = 2 * v31 + 2;
                }
                v34 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8 * v31);
                result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)v33, v34);
                if ((result & 1) == 0)
                {
                  v60 = *(_DWORD *)v34;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
                  v61 = *((_DWORD *)v6 + 2 * v31 + 1);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
                  do
                  {
                    v35 = (uint64_t)v33;
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v34, v33);
                    v36 = (uint64_t)(v33 + 1);
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v34 + 4);
                    if (v57 < v32)
                      break;
                    v37 = (2 * v32) | 1;
                    v33 = (_DWORD *)((char *)v6 + 8 * v37);
                    v32 = 2 * v32 + 2;
                    if (v32 >= (uint64_t)v10)
                    {
                      v32 = v37;
                    }
                    else if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8 * v37), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v33 + 2)))
                    {
                      v33 += 2;
                    }
                    else
                    {
                      v32 = v37;
                    }
                    v34 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v35;
                  }
                  while (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)v33, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v60));
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v35, &v60);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v36);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
                }
              }
              v30 = v31 - 1;
            }
            while (v31);
            v38 = (unint64_t)v9 >> 3;
            do
            {
              v39 = a2;
              if (v38 >= 2)
              {
                v59[0] = *(_DWORD *)v6;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
                v59[1] = *((_DWORD *)v6 + 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
                v40 = 0;
                v41 = (uint64_t)v6;
                do
                {
                  v42 = (int *)(v41 + 8 * v40 + 8);
                  v43 = (2 * v40) | 1;
                  v44 = 2 * v40 + 2;
                  if (v44 < v38
                    && pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v41 + 8 * v40 + 8), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v41 + 8 * v40 + 16)))
                  {
                    v42 += 2;
                    v43 = v44;
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v41, v42);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v41 + 4);
                  v41 = (uint64_t)v42;
                  v40 = v43;
                }
                while (v43 <= (uint64_t)((unint64_t)(v38 - 2) >> 1));
                if (v42 == (int *)((char *)a2 - 8))
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v42, v59);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v42 + 1));
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v42, (int *)a2 - 2);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v42 + 1));
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 - 8, v59);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 - 4);
                  v45 = (char *)v42 - (char *)v6 + 8;
                  if (v45 >= 9)
                  {
                    v46 = (((unint64_t)v45 >> 3) - 2) >> 1;
                    v47 = (int *)((char *)v6 + 8 * v46);
                    if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)v47, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v42))
                    {
                      v60 = *v42;
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
                      v61 = v42[1];
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
                      do
                      {
                        v48 = (uint64_t)v47;
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v42, v47);
                        v49 = (uint64_t)(v47 + 1);
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v42 + 1));
                        if (!v46)
                          break;
                        v46 = (v46 - 1) >> 1;
                        v47 = (int *)((char *)v6 + 8 * v46);
                        v42 = (int *)v48;
                      }
                      while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)v47, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v60) & 1) != 0);
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v48, &v60);
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v49);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
                    }
                  }
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v59);
                v39 = a2;
              }
              a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v39 - 8);
            }
            while ((unint64_t)v38-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (_DWORD *)((char *)v6 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8 * (v10 >> 1)), v6, v56);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8 * (v10 >> 1)), v56);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 - 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 16));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 16), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8 * v11 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 24));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 - 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8 * (v10 >> 1)), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8 * v11 + 8));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
        }
        --a3;
        if ((a4 & 1) == 0
          && (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 - 8), v6) & 1) == 0)
        {
          v60 = *(_DWORD *)v6;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
          v61 = *((_DWORD *)v6 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
          if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, v56) & 1) != 0)
          {
            v8 = v6;
            do
              v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
            while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, v8) & 1) == 0);
          }
          else
          {
            v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8);
            do
            {
              v8 = v19;
              if (v19 >= v7)
                break;
              v20 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, v19);
              v19 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
            }
            while (!v20);
          }
          v21 = v7;
          if (v8 < v7)
          {
            v21 = v7;
            do
              v21 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 - 8);
            while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, v21) & 1) != 0);
          }
          while (v8 < v21)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
            do
              v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
            while (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, v8));
            do
              v21 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v21 - 8);
            while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, v21) & 1) != 0);
          }
          if ((const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 - 8) != v6)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v6, (int *)v8 - 2);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v6 + 4);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v8 - 8, &v60);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v8 - 4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
          a4 = 0;
          continue;
        }
        v60 = *(_DWORD *)v6;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
        v61 = *((_DWORD *)v6 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
        v13 = 0;
        do
        {
          v14 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + v13 + 8), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v60);
          v13 += 8;
        }
        while ((v14 & 1) != 0);
        v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + v13);
        v16 = a2;
        if (v13 == 8)
        {
          v16 = a2;
          do
          {
            if (v15 >= v16)
              break;
            v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v16 - 8);
          }
          while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v60) & 1) == 0);
        }
        else
        {
          do
            v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v16 - 8);
          while (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v60));
        }
        v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + v13);
        if (v15 >= v16)
        {
          v7 = a2;
        }
        else
        {
          v17 = v16;
          v7 = a2;
          do
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
            do
              v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
            while ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v60) & 1) != 0);
            do
              v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 - 8);
            while (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v60));
          }
          while (v8 < v17);
        }
        if ((const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 - 8) != v6)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v6, (int *)v8 - 2);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v6 + 4);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v8 - 8, &v60);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v8 - 4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
        if (v15 < v16)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *,false>(v6, (char *)v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 - 8));
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)v8, v7);
        if (!(_DWORD)result)
        {
          if (v18)
            continue;
          goto LABEL_32;
        }
        a2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 - 8);
        if (!v18)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_2300F85BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v6;
  uint64_t result;

  v6 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, a1);
  result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, a2);
  if ((v6 & 1) != 0)
  {
    if ((_DWORD)result
      || (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(),
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(),
          result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, a2),
          (_DWORD)result))
    {
LABEL_8:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
      return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
    }
  }
  else if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
    result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, a1);
    if ((_DWORD)result)
      goto LABEL_8;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  _BOOL8 result;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13[2];

  v4 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 8), (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((const pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((const pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 8));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((const pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 8));
      return 1;
    default:
      v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>((const pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
      v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24);
      if ((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24) == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v7, v6))
    {
      v13[0] = *(_DWORD *)v7;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
      v13[1] = *((_DWORD *)v7 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
      v10 = v8;
      while (1)
      {
        v11 = a1 + v10;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + v10 + 24, (int *)(a1 + v10 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + v10 + 28);
        if (v10 == -16)
          break;
        v10 -= 8;
        if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 8)) & 1) == 0)
        {
          v12 = a1 + v10 + 24;
          goto LABEL_12;
        }
      }
      v12 = a1;
LABEL_12:
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v12, v13);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v11 + 20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      ++v9;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v13);
      if (v9 == 8)
        return (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8) == a2;
    }
    v6 = v7;
    v8 += 8;
    v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
    if (v7 == a2)
      return 1;
  }
}

void sub_2300F89AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(a1, a2, a3);
  result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a4, a3);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
    result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, a2);
    if ((_DWORD)result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
      result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, a1);
      if ((_DWORD)result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
        return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  uint64_t result;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,pxrInternal__aapl__pxrReserved__::SdfPath *>(a1, a2, a3, a4);
  result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a5, a4);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
    result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a4, a3);
    if ((_DWORD)result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
      result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a3, a2);
      if ((_DWORD)result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
        result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, a1);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
          return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
        }
      }
    }
  }
  return result;
}

uint64_t std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath *> &,std::insert_iterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>> &>(uint64_t result, const pxrInternal__aapl__pxrReserved__::SdfPath **a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3, pxrInternal__aapl__pxrReserved__::SdfPath **a4, pxrInternal__aapl__pxrReserved__::SdfPath **a5, uint64_t a6)
{
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v15;
  pxrInternal__aapl__pxrReserved__::SdfPath **v16;
  _DWORD *v17;
  _QWORD *v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  pxrInternal__aapl__pxrReserved__::SdfPath *v20;

  v7 = (_QWORD *)result;
  v8 = *a2;
  v9 = *a3;
  if (*a2 == *a3)
  {
LABEL_14:
    v18 = *(_QWORD **)a6;
    v17 = *(_DWORD **)(a6 + 8);
    v9 = v8;
LABEL_15:
    v20 = v8;
    goto LABEL_16;
  }
  v13 = *a4;
  if (*a4 != *a5)
  {
    while (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v8, v13))
    {
      result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(*a4, *a2);
      v16 = a4;
      if ((result & 1) == 0)
      {
        result = (uint64_t)*a2;
        v15 = a2;
        v16 = a4;
        goto LABEL_7;
      }
LABEL_8:
      *v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*v16 + 8);
      v8 = *a2;
      v9 = *a3;
      if (*a2 == *a3)
        goto LABEL_14;
      v13 = *a4;
      if (*a4 == *a5)
        goto LABEL_10;
    }
    result = (uint64_t)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::insert(*(_QWORD **)a6, *(_DWORD **)(a6 + 8), *a2);
    v15 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)(a6 + 8);
    v16 = a2;
LABEL_7:
    *v15 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 8);
    goto LABEL_8;
  }
LABEL_10:
  v18 = *(_QWORD **)a6;
  v17 = *(_DWORD **)(a6 + 8);
  if (v8 == v9)
    goto LABEL_15;
  v19 = v8;
  do
  {
    result = (uint64_t)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::insert(v18, v17, v19);
    v17 = (_DWORD *)(result + 8);
    v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v19 + 8);
  }
  while (v19 != v9);
  v20 = v9;
  v9 = v8;
LABEL_16:
  *v7 = (char *)v9 + v20 - v8;
  v7[1] = v18;
  v7[2] = v17;
  return result;
}

_DWORD *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::insert(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  char *v32;
  _DWORD *v33;
  char *v35;
  char *v36;
  void *v37;
  char *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  void *v42[5];

  v4 = a2;
  v7 = (_DWORD *)*a1;
  v6 = a1[1];
  v8 = (uint64_t)a2 - *a1;
  v9 = v8 >> 3;
  v11 = a1 + 2;
  v10 = a1[2];
  if (v6 >= v10)
  {
    v12 = ((uint64_t)(v6 - (_QWORD)v7) >> 3) + 1;
    if (v12 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v13 = v10 - (_QWORD)v7;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v41 = a1 + 2;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 2), v14);
    else
      v15 = 0;
    v16 = &v15[8 * v9];
    v37 = v15;
    v38 = v16;
    v39 = v16;
    v40 = &v15[8 * v14];
    if (v9 == v14)
    {
      if (v8 < 1)
      {
        if (v7 == v4)
          v18 = 1;
        else
          v18 = v8 >> 2;
        v42[4] = v11;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)v11, v18);
        v21 = v19;
        v22 = &v19[8 * (v18 >> 2)];
        v23 = &v19[8 * v20];
        v24 = v38;
        v25 = v38;
        v26 = v22;
        v27 = v39 - v38;
        if (v39 != v38)
        {
          v35 = &v22[v27 & 0xFFFFFFFFFFFFFFF8];
          v36 = &v19[8 * v20];
          v28 = 8 * (v27 >> 3);
          v29 = &v19[8 * (v18 >> 2)];
          v30 = v38;
          do
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v29, v30);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v29 + 1, (_DWORD *)v30 + 1);
            v29 += 8;
            v30 += 8;
            v28 -= 8;
          }
          while (v28);
          v25 = v39;
          v26 = v35;
          v23 = v36;
        }
        v31 = v37;
        v32 = v40;
        v37 = v21;
        v38 = v22;
        v42[0] = v31;
        v42[1] = v24;
        v39 = v26;
        v40 = v23;
        v42[2] = v25;
        v42[3] = v32;
        std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(v42);
        v16 = v39;
      }
      else
      {
        v17 = v9 + 2;
        if (v9 >= -1)
          v17 = v9 + 1;
        v16 -= 8 * (v17 >> 1);
        v38 = v16;
        v39 = v16;
      }
    }
    v33 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v16, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v33 + 1, a3 + 1);
    v39 += 8;
    v4 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer((uint64_t)a1, &v37, v4);
    std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(&v37);
  }
  else if (a2 == (_DWORD *)v6)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7[2 * v9 + 1], a3 + 1);
    a1[1] = v4 + 2;
  }
  else
  {
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__move_range((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 2));
    if (v4 <= a3)
      a3 += 2 * (a1[1] > (unint64_t)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v4, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v7[2 * v9 + 1], a3 + 1);
  }
  return v4;
}

void sub_2300F8F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = (_DWORD *)v6;
  if (v7 < a3)
  {
    v10 = (_DWORD *)(a2 + v6 - a4);
    v8 = *(_DWORD **)(a1 + 8);
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8, v10);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8 + 1, v10 + 1);
      v10 += 2;
      v8 += 2;
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)&v12, a2, v7, v6);
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfPath*>>(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(v7, a3, *(_DWORD **)(a1 + 8), (_DWORD *)a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 != a2)
  {
    v7 = a3;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a4 - 8, (int *)(v7 - 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a4 - 4);
      a4 -= 8;
      v7 -= 8;
    }
    while (v7 != a2);
  }
  return a3;
}

_DWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *v4;
  _DWORD *v6;
  _QWORD v8[3];
  char v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, v6);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, v6 + 1);
      v6 += 2;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

_DWORD *std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>(uint64_t *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  _DWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      v19 = v12 - (_QWORD)a2;
      v20 = (uint64_t)(v12 - (_QWORD)a2) >> 3;
      if (v20 >= a5)
      {
        v21 = &a3[2 * a5];
      }
      else
      {
        v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(v9, v21, a4, *(_DWORD **)(v9 - 8));
        if (v19 < 1)
          return v5;
      }
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *,pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)&v23, a3, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61)
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      v15 = ((uint64_t)a2 - v13) >> 3;
      v16 = v10 - v13;
      if (v16 >> 2 > v14)
        v14 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      v27 = v9;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v9, v17);
      else
        v18 = 0;
      v23 = v18;
      v24 = &v18[8 * v15];
      v25 = v24;
      v26 = &v18[8 * v17];
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end_with_size<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>(&v23, a3, a5);
      v5 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer((uint64_t)a1, &v23, v5);
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(&v23);
    }
  }
  return v5;
}

void sub_2300F930C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_DWORD *std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::__construct_at_end_with_size<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::SdfPath*>>(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v6;
  _DWORD *v7;

  v3 = result;
  v4 = (_DWORD *)*((_QWORD *)result + 2);
  if (a3)
  {
    v6 = 8 * a3;
    v7 = &v4[2 * a3];
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, a2);
      result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, a2 + 1);
      v4 += 2;
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
    v4 = v7;
  }
  *((_QWORD *)v3 + 2) = v4;
  return result;
}

uint64_t std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::~deque[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 >> 9];
    v7 = (uint64_t)*v6 + 8 * (v5 & 0x1FF);
    v8 = *(uint64_t *)((char *)v3 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != v8)
    {
      do
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 8;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 256;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 512;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

void std::deque<pxrInternal__aapl__pxrReserved__::SdfPath>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2300F9784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<realityio::UsdPropertyDelta>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 64;
      v7 = v4 - 64;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 64;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0,std::allocator<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0,std::allocator<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF6458;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0,std::allocator<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF6458;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0,std::allocator<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t **v3;
  const pxrInternal__aapl__pxrReserved__::UsdProperty *i;
  _QWORD v5[3];
  void **v6[5];

  v6[4] = *(void ***)MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t ***)(a1 + 8);
  v6[3] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties();
  if (!v6)
    (*((void (**)(void))v6[0] + 4))();
  for (i = (const pxrInternal__aapl__pxrReserved__::UsdProperty *)v5[0];
        i != (const pxrInternal__aapl__pxrReserved__::UsdProperty *)v5[1];
        i = (const pxrInternal__aapl__pxrReserved__::UsdProperty *)((char *)i + 32))
  {
    realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromPrimAndProperty(v3, a2, i);
  }
  v6[0] = (void **)v5;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdProperty>::__destroy_vector::operator()[abi:ne180100](v6);
}

void sub_2300F9998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  uint64_t *v15;
  uint64_t *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0,std::allocator<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0,std::allocator<realityio::UsdStageObserver::_buildRelationshipPropertyPathAndTargetRelatedPrimPathMappings(void)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::target_type()
{
}

void std::__function::__func<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0,std::allocator<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0,std::allocator<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF64D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0,std::allocator<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF64D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0,std::allocator<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t **v3;
  const pxrInternal__aapl__pxrReserved__::UsdProperty *i;
  _QWORD v5[3];
  void **v6[5];

  v6[4] = *(void ***)MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t ***)(a1 + 8);
  v6[3] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties();
  if (!v6)
    (*((void (**)(void))v6[0] + 4))();
  for (i = (const pxrInternal__aapl__pxrReserved__::UsdProperty *)v5[0];
        i != (const pxrInternal__aapl__pxrReserved__::UsdProperty *)v5[1];
        i = (const pxrInternal__aapl__pxrReserved__::UsdProperty *)((char *)i + 32))
  {
    realityio::UsdStageObserver::_clearPreviousPropertyAndPrimMappings(v3, i);
    realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromPrimAndProperty(v3, a2, i);
  }
  v6[0] = (void **)v5;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdProperty>::__destroy_vector::operator()[abi:ne180100](v6);
}

void sub_2300F9B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  uint64_t *v15;
  uint64_t *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0,std::allocator<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0,std::allocator<realityio::UsdStageObserver::_updateRelationshipPropertyPathAndTargetRelatedPrimPathMappingsFromNotice(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_10:
    v11 = *a3;
    v10 = (uint64_t *)operator new(0x40uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 8, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 9, v11 + 1);
    v10[7] = 0;
    v10[6] = 0;
    v10[5] = (uint64_t)(v10 + 6);
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v12 = (uint64_t *)**a1;
    v13 = v10;
    if (v12)
    {
      *a1 = v12;
      v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4);
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4)))break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_10;
  return v10;
}

uint64_t std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__erase_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;

  v3 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    v4 = v3;
    v5 = (uint64_t *)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    else
    {
      v7 = v3;
      do
      {
        v6 = (uint64_t *)v7[2];
        v8 = *v6 == (_QWORD)v7;
        v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3)
      *a1 = v6;
    v9 = a1[1];
    a1[2] = (uint64_t *)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

realityio::EndOfUpdateBuilder *realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(realityio::EndOfUpdateBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  realityio::_anonymous_namespace_::EndOfUpdateDirtyPrimDescriptor *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  __int128 v24;
  _QWORD *v25[3];
  _QWORD *v26[3];
  __int128 v27;
  _QWORD *v28[3];
  uint64_t v29;
  uint64_t v30;
  void **v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v22, "EndOfUpdateBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kEndOfUpdateBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54C18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54C18))
  {
    v15 = operator new();
    v16 = operator new();
    memset(v26, 0, sizeof(v26));
    v17 = (realityio::_anonymous_namespace_::EndOfUpdateDirtyPrimDescriptor *)operator new();
    v36 = v24;
    v24 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v25, &v36, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v26, v25);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v27, v16);
    v37 = v27;
    v27 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v28, &v37, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v28);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v29, v15);
    _MergedGlobals_41 = v29;
    unk_255E54C10 = v30;
    v29 = 0;
    v30 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v29);
    v31 = (void **)v28;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v31);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v37);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
    v31 = (void **)v25;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v31);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v24);
    v25[0] = v26;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v25);
    __cxa_guard_release(&qword_255E54C18);
  }
  v18 = _MergedGlobals_41;
  v19 = (std::__shared_weak_count *)unk_255E54C10;
  if (unk_255E54C10)
  {
    v5 = (unint64_t *)(unk_255E54C10 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v35 = v34;
  v32[0] = &off_24FDF6728;
  v33 = v32;
  v34[0] = &off_24FDF66A8;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v22, (uint64_t)__p, &v18, (uint64_t)v34, (uint64_t)v32);
  v7 = v33;
  if (v33 == v32)
  {
    v8 = 4;
    v7 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
LABEL_10:
  v9 = v35;
  if (v35 == v34)
  {
    v10 = 4;
    v9 = v34;
    goto LABEL_14;
  }
  if (v35)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  *(_QWORD *)this = &off_24FDF6558;
  return this;
}

void sub_2300FA14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t *a38)
{
  uint64_t v38;
  uint64_t v39;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v39 - 96);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  a38 = (uint64_t *)&a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v39 - 112);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  a25 = &a28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  MEMORY[0x2348B4E1C](v38, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54C18);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

void realityio::EndOfUpdateBuilder::run(realityio::EndOfUpdateBuilder *this, realityio::Inputs *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  void **v18;

  v3 = *((_QWORD *)this + 2);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v15 = v3;
  v16 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "end_of_update");
  std::mutex::lock((std::mutex *)(v3 + 64));
  v6 = operator new(0x28uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24FDF67A8;
  v6[3] = &off_24FDF67F8;
  v6[4] = 0;
  *(_QWORD *)&v17 = v6 + 3;
  *((_QWORD *)&v17 + 1) = v6;
  v18 = __p;
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v3 + 40), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v18);
  std::shared_ptr<realityio::Outputs>::operator=[abi:ne180100]((uint64_t)(v7 + 7), &v17);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v3, (unsigned __int8 *)__p, (uint64_t)__p);
  std::mutex::unlock((std::mutex *)(v3 + 64));
  if (v14 < 0)
    operator delete(__p[0]);
  if (v2)
  {
    v11 = (unint64_t *)&v2->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_2300FA470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::mutex *v18;

  std::mutex::unlock(v18);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void realityio::EndOfUpdateBuilder::~EndOfUpdateBuilder(realityio::EndOfUpdateBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

realityio::_anonymous_namespace_::EndOfUpdateDirtyPrimDescriptor *realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor::EndOfUpdateDirtyPrimDescriptor(realityio::_anonymous_namespace_::EndOfUpdateDirtyPrimDescriptor *this)
{
  void **v3[3];
  _QWORD *v4[3];
  void ***v5;

  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor((uint64_t)this, v4, v3);
  v5 = v3;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  v3[0] = (void **)v4;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v3);
  *(_QWORD *)this = off_24FDF65D0;
  return this;
}

void sub_2300FA564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v3 - 40) = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FDF6630;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2300FA5DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor::~EndOfUpdateDirtyPrimDescriptor(realityio::_anonymous_namespace_::EndOfUpdateDirtyPrimDescriptor *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_24FDF1378;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_24FDF1378;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2348B4E1C](this, 0x10A1C402FEF67C7);
}

BOOL realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor::validate(pxrInternal__aapl__pxrReserved__::SdfPath *a1, _QWORD *a2)
{
  return *a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
}

CFStringRef realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor::description@<X0>(CFStringRef *a1@<X8>)
{
  CFStringRef result;

  *a1 = 0;
  result = CFStringCreateWithCString(0, "EndOfUpdateDirtyPrimDescriptor", 0x8000100u);
  *a1 = result;
  return result;
}

void sub_2300FA724(_Unwind_Exception *a1)
{
  const void **v1;

  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor *,std::shared_ptr<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor,realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>,std::allocator<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor *,std::shared_ptr<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor,realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>,std::allocator<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor *,std::shared_ptr<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>::__shared_ptr_default_delete<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor,realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>,std::allocator<realityio::`anonymous namespace'::EndOfUpdateDirtyPrimDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF66A8;
  return result;
}

void std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF66A8;
}

char *std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF6728;
  return result;
}

void std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF6728;
}

void std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v5;
  void *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  void *__p;
  std::__shared_weak_count *v16;
  char v17;
  void *v18;
  std::__shared_weak_count *v19;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "end_of_update");
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)Data + 7, &v14, &v18);
  v6 = v18;
  v5 = v19;
  v18 = 0;
  v19 = 0;
  if (v17 < 0)
    operator delete(__p);
  __p = v6;
  v16 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, (std::string::size_type *)&__p);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2300FAA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v19;

  if (a16 < 0)
    operator delete(__p);
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::EndOfUpdateBuilder::EndOfUpdateBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<void *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF67A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<void *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF67A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t realityio::InputOutputWrapperObject<void *>::getRawValue(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

realityio::SpotOrPointOrAmbientLightComponentBuilder *realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(realityio::SpotOrPointOrAmbientLightComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  realityio::AnyValueDirtyPropertyDescriptor *v34;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v35;
  realityio::AnyValueDirtyPropertyDescriptor *v36;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v37;
  realityio::AnyValueDirtyPropertyDescriptor *v38;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v39;
  realityio::AnyValueDirtyPropertyDescriptor *v40;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v41;
  realityio::AnyValueDirtyPropertyDescriptor *v42;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v43;
  realityio::AnyValueDirtyPropertyDescriptor *v44;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v45;
  realityio::AnyValueDirtyPropertyDescriptor *v46;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v47;
  realityio::AnyValueDirtyPropertyDescriptor *v48;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v49;
  realityio::AnyValueDirtyPropertyDescriptor *v50;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v51;
  uint64_t i;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  char v61;
  void *v62[2];
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _QWORD *v73[3];
  _QWORD *v74[3];
  _BYTE v75[8];
  _QWORD *v76;
  __int128 v77;
  _QWORD *v78[3];
  _QWORD *v79[3];
  __int128 v80;
  _QWORD *v81[3];
  uint64_t v82;
  uint64_t v83;
  void **v84;
  _QWORD v85[3];
  _QWORD *v86;
  _QWORD v87[3];
  _QWORD *v88;
  _OWORD v89[9];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v62, "SpotOrPointOrAmbientLightComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSpotOrPointOrAmbientLightComponentBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54C40);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54C40))
  {
    v15 = operator new();
    v16 = operator new();
    memset(v79, 0, sizeof(v79));
    v17 = (_BYTE *)operator new();
    Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    v19 = *((_QWORD *)Data + 1);
    v90 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      if ((v21 & 1) == 0)
        v90 &= 0xFFFFFFFFFFFFFFF8;
    }
    v22 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v22)
      v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    v23 = *((_QWORD *)v22 + 4);
    v91 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 2, v24));
      if ((v25 & 1) == 0)
        v91 &= 0xFFFFFFFFFFFFFFF8;
    }
    v26 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v26)
      v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    v27 = *((_QWORD *)v26 + 2);
    v92 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if ((v29 & 1) == 0)
        v92 &= 0xFFFFFFFFFFFFFFF8;
    }
    v30 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v30)
      v30 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    v31 = *((_QWORD *)v30 + 3);
    v93 = v31;
    if ((v31 & 7) != 0)
    {
      v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 2, v32));
      if ((v33 & 1) == 0)
        v93 &= 0xFFFFFFFFFFFFFFF8;
    }
    std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100]((uint64_t)v75, &v90, 4);
    memset(v74, 0, sizeof(v74));
    v34 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v35 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v35)
      v35 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v34, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v35 + 56));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v72, (uint64_t)v34);
    v89[0] = v72;
    v72 = 0uLL;
    v36 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v37 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v37)
      v37 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v36, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v37 + 64));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v71, (uint64_t)v36);
    v89[1] = v71;
    v71 = 0uLL;
    v38 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v39 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v39)
      v39 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v38, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v39 + 72));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v70, (uint64_t)v38);
    v89[2] = v70;
    v70 = 0uLL;
    v40 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v41 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v41)
      v41 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v40, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v41 + 80));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v69, (uint64_t)v40);
    v89[3] = v69;
    v69 = 0uLL;
    v42 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v43 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v43)
      v43 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v42, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v43 + 88));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v68, (uint64_t)v42);
    v89[4] = v68;
    v68 = 0uLL;
    v44 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v45 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v45)
      v45 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v44, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v45 + 96));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v67, (uint64_t)v44);
    v89[5] = v67;
    v67 = 0uLL;
    v46 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v47 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v47)
      v47 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v46, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v47 + 120));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v66, (uint64_t)v46);
    v89[6] = v66;
    v66 = 0uLL;
    v48 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v49 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v49)
      v49 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v48, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v49 + 128));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v65, (uint64_t)v48);
    v89[7] = v65;
    v65 = 0uLL;
    v50 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v51 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v51)
      v51 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v50, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v51 + 136));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v64, (uint64_t)v50);
    v89[8] = v64;
    v64 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v73, v89, 9uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v17, (uint64_t)v75, v74, v73);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v77, (uint64_t)v17);
    v94 = v77;
    v77 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v78, &v94, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v79, v78);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v80, v16);
    v95 = v80;
    v80 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v81, &v95, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v81);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v82, v15);
    qword_255E54C30 = v82;
    *(_QWORD *)algn_255E54C38 = v83;
    v82 = 0;
    v83 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v82);
    v84 = (void **)v81;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v84);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v95);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v80);
    v84 = (void **)v78;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v84);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v94);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v77);
    v84 = (void **)v73;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v84);
    for (i = 8; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v89[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v64);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v65);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v66);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v67);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v68);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v69);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v70);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v71);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v72);
    *(_QWORD *)&v89[0] = v74;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)v75, v76);
    v53 = (uint64_t *)&v94;
    do
    {
      v55 = *--v53;
      v54 = v55;
      if ((v55 & 7) != 0)
      {
        v56 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
    }
    while (v53 != &v90);
    *(_QWORD *)&v89[0] = v79;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
    __cxa_guard_release(&qword_255E54C40);
  }
  v58 = qword_255E54C30;
  v59 = *(std::__shared_weak_count **)algn_255E54C38;
  if (*(_QWORD *)algn_255E54C38)
  {
    v5 = (unint64_t *)(*(_QWORD *)algn_255E54C38 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v88 = v87;
  v85[0] = &off_24FDF6920;
  v86 = v85;
  v87[0] = &off_24FDF68A0;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v62, (uint64_t)__p, &v58, (uint64_t)v87, (uint64_t)v85);
  v7 = v86;
  if (v86 == v85)
  {
    v8 = 4;
    v7 = v85;
  }
  else
  {
    if (!v86)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
LABEL_10:
  v9 = v88;
  if (v88 == v87)
  {
    v10 = 4;
    v9 = v87;
    goto LABEL_14;
  }
  if (v88)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  v11 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v61 < 0)
    operator delete(__p[0]);
  if (v63 < 0)
    operator delete(v62[0]);
  *(_QWORD *)this = &off_24FDF6828;
  *((_QWORD *)this + 35) = RECameraMovementComponentGetComponentType();
  return this;
}

void sub_2300FB4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  MEMORY[0x2348B4E1C](v72, 0x10A1C40F82F910ELL);
  a72 = (uint64_t)&a56;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  MEMORY[0x2348B4E1C](v73, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v74, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54C40);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__ *realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::SpotOrPointOrAmbientLightComponentBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  int v6;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v7;
  int v8;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v9;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v10;
  float v11;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v12;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  pxrInternal__aapl__pxrReserved__ *v15;
  _QWORD *v16;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__ *v18;
  _QWORD *v19;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v20;
  pxrInternal__aapl__pxrReserved__ *v21;
  _QWORD *v22;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v23;
  float v24;
  int v25;
  float *v26;
  std::string::size_type size;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  int v33;
  realityio *v34;
  int v35;
  uint64_t ComponentType;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v37;
  uint64_t v38;
  _QWORD *v39;
  std::string *p_buf;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned __int8 v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  pxrInternal__aapl__pxrReserved__ *result;
  NSObject *v52;
  uint64_t Text;
  pxrInternal__aapl__pxrReserved__ *v54;
  char v55;
  _BYTE *v56;
  size_t v57;
  realityio *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  float v62;
  realityio::Inputs *v63;
  uint64_t ServiceLocator;
  CGColorSpace *v65;
  char *v66;
  uint64_t v67;
  realityio::RIOIESInfo *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t i;
  float v74;
  float v75;
  char *v76;
  CGContext *v77;
  uint64_t v78;
  uint64_t String;
  int v80;
  uint64_t AssetHandle;
  void *v82;
  size_t v83;
  _BYTE *v84;
  const void *v85;
  _BYTE *v86;
  size_t v87;
  void **v88;
  const void *v89;
  void **v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  NSObject *v94;
  std::string *v95;
  uint64_t v96;
  void *v97;
  realityio::EntityBuilder *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  _QWORD *v105;
  uint64_t v106;
  void *v107[2];
  char v108;
  uint64_t v109;
  char *__s;
  realityio::RIOIESInfo *v111;
  realityio::RIOIESInfo *v112;
  uint64_t v113;
  void *v114[2];
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::string v118;
  int v119;
  std::string::size_type v120;
  _BYTE v121[4];
  int v122;
  std::string::size_type v123;
  std::string v124;
  std::string v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  float v130;
  char v131[8];
  pxrInternal__aapl__pxrReserved__ *v132;
  uint64_t v133;
  uint64_t v134;
  realityio::Inputs *v135;
  void *v136[2];
  char v137;
  _BYTE v138[24];
  _BYTE *v139;
  std::string buf;
  std::string __p;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  float v145;
  void *v146;
  void *v147;
  uint64_t v148;
  __int128 v149;
  std::string::value_type v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  v135 = a2;
  v3 = (realityio::Inputs *)((char *)a2 + 32);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v4, v3);
  Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeValue<BOOL>((pxrInternal__aapl__pxrReserved__::UsdObject *)v131, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)Data + 88), (uint64_t)&buf);
  if (buf.__r_.__value_.__s.__data_[0])
  {
    v6 = buf.__r_.__value_.__s.__data_[8];
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v6 = 1;
  }
  v7 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeValue<BOOL>((pxrInternal__aapl__pxrReserved__::UsdObject *)v131, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v7 + 80), (uint64_t)&buf);
  if (buf.__r_.__value_.__s.__data_[0])
  {
    v8 = buf.__r_.__value_.__s.__data_[8];
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v8 = 0;
  }
  v9 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v9)
    v9 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeColor4FAndGamut((pxrInternal__aapl__pxrReserved__::UsdObject *)v131, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v9 + 72), (__n128 *)&buf, (__n128)xmmword_230214180);
  v149 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v150 = buf.__r_.__value_.__s.__data_[16];
  v130 = 0.0;
  v10 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v131, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v10 + 56), (uint64_t)&buf);
  if (buf.__r_.__value_.__s.__data_[0])
  {
    v11 = *(float *)&buf.__r_.__value_.__r.__words[1];
  }
  else
  {
    v11 = 1.0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v130 = v11;
  v129 = 0;
  v12 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v12)
    v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v131, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v12 + 64), (uint64_t)&buf);
  if (buf.__r_.__value_.__s.__data_[0])
  {
    v14 = buf.__r_.__value_.__r.__words[1];
  }
  else
  {
    v14 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v129 = v14;
  v15 = v132;
  if (!v132 || (*((_BYTE *)v132 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v132, v13);
  v16 = (_QWORD *)*((_QWORD *)v15 + 3);
  v17 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v17)
    v17 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  if ((*v16 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 4) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_49;
  v18 = v132;
  if (!v132 || (*((_BYTE *)v132 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v132, v13);
  v19 = (_QWORD *)*((_QWORD *)v18 + 3);
  v20 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v20)
    v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  if ((*v19 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v20 + 3) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_49;
  v21 = v132;
  if (!v132 || (*((_BYTE *)v132 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v132, v13);
  v22 = (_QWORD *)*((_QWORD *)v21 + 3);
  v23 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v23)
    v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  if ((*v22 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v23 + 2) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_49:
    v24 = *MEMORY[0x24BE21AD0];
  }
  else
  {
    v24 = *MEMORY[0x24BE21AD0];
    if (!v6)
    {
      v25 = 0;
      v26 = (float *)MEMORY[0x24BE21AF0];
      goto LABEL_51;
    }
  }
  v26 = (float *)MEMORY[0x24BE21AE0];
  v25 = 1;
LABEL_51:
  if (!v8)
    v24 = *v26;
  v130 = v130 * v24;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v128 = 0;
  v126 = MEMORY[0x24BEE9D80] + 16;
  if (!v127
    || (*(_BYTE *)(v127 + 57) & 8) != 0
    || !(*(unsigned int (**)(uint64_t *))(MEMORY[0x24BEE9D80] + 48))(&v126))
  {
    v35 = 0;
    goto LABEL_74;
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v124);
  pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI::GetShapingIesFileAttr((pxrInternal__aapl__pxrReserved__::UsdLuxShapingAPI *)&v126);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v119) & 1) == 0)
  {
    MEMORY[0x2348B274C](v138, "inputs:shaping:ies:file");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v131, (const pxrInternal__aapl__pxrReserved__::TfToken *)v138);
    v119 = (int)buf.__r_.__value_.__l.__data_;
    size = buf.__r_.__value_.__l.__size_;
    buf.__r_.__value_.__l.__size_ = 0;
    v28 = v120;
    v120 = size;
    if (v28)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v121, (int *)&buf.__r_.__value_.__r.__words[2]);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v122);
    if ((v123 & 7) != 0)
    {
      v29 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    v123 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf.__r_.__value_.__r.__words[2]);
    if (buf.__r_.__value_.__l.__size_)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(buf.__r_.__value_.__l.__size_);
    if ((v138[0] & 7) != 0)
    {
      v31 = (unsigned int *)(*(_QWORD *)v138 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stlxr(v32 - 2, v31));
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v119, &buf);
  v33 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf);
  if (v33)
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
  v34 = (realityio *)pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&buf);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  v124 = buf;
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v125.__r_.__value_.__l.__data_);
    v125 = __p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  else
  {
    v125 = __p;
  }
  v52 = *(id *)(realityio::logObjects(v34) + 24);
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v131, v138);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v138);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = Text;
    _os_log_impl(&dword_22FF26000, v52, OS_LOG_TYPE_DEFAULT, "Error IES light is not suppoorted on light \"%s\"", (uint8_t *)&buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v138);
  }

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&buf);
  v54 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==((unsigned __int8 *)&v124, (unsigned __int8 *)&buf);
  v55 = (char)v54;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v55 & 1) != 0)
      goto LABEL_109;
LABEL_111:
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v118, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
    else
      v118 = v125;
    pxrInternal__aapl__pxrReserved__::ArGetResolver(v54);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&buf, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
    else
      buf = v125;
    pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    memset(&buf, 0, sizeof(buf));
    v146 = 0;
    v148 = 0;
    v147 = 0;
    v142 = 0u;
    v143 = 0u;
    v144 = 0u;
    v114[0] = 0;
    v114[1] = 0;
    v115 = 0;
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v116 + 24))(v138);
    v56 = *(_BYTE **)v138;
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 16))(v116);
    v58 = (realityio *)realityio::RIOIESInfoLoadFromString(v56, v57, (uint64_t)&buf, 1, (uint64_t)v114);
    v35 = (int)v58;
    v59 = *(std::__shared_weak_count **)&v138[8];
    if (*(_QWORD *)&v138[8])
    {
      v60 = (unint64_t *)(*(_QWORD *)&v138[8] + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (!v35)
    {
      v94 = *(id *)(realityio::logObjects(v58) + 24);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = &v118;
        else
          v95 = (std::string *)v118.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v131, v136);
        v96 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v136);
        *(_DWORD *)v138 = 136315394;
        *(_QWORD *)&v138[4] = v95;
        *(_WORD *)&v138[12] = 2080;
        *(_QWORD *)&v138[14] = v96;
        _os_log_impl(&dword_22FF26000, v94, OS_LOG_TYPE_DEFAULT, "Error reading IES file \"%s\" on light \"%s\"", v138, 0x16u);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v136);
      }

      goto LABEL_185;
    }
    v62 = v145 * 4.0 * 3.14159265 * 683.0;
    v130 = v62;
    v63 = v135;
    ServiceLocator = REEngineGetServiceLocator();
    MEMORY[0x2348B1264]();
    MEMORY[0x2348B1288](ServiceLocator);
    v111 = 0;
    v112 = 0;
    v113 = 0;
    std::vector<float>::resize((uint64_t)&v111, 0x100000uLL);
    __s = "texture";
    realityio::RIOIESInfoGenerateTexture2D((realityio *)&buf, v111, (void *)0x200, 0x200u, 4, 4);
    v65 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x24BDBF318]);
    v66 = (char *)operator new(0x100000uLL);
    bzero(v66, 0x100000uLL);
    v67 = 0;
    v68 = v111;
    v69 = (char *)v111 + 12;
    v70 = (char *)v111 + 8;
    v71 = (char *)v111 + 4;
    v72 = v66;
    do
    {
      for (i = 0; i != 2048; i += 4)
      {
        v74 = *((float *)v68 + i);
        v75 = 0.0;
        if (v74 >= 0.0)
        {
          v75 = 1.0;
          if (v74 <= 1.0)
            v75 = *((float *)v68 + i);
        }
        v76 = &v72[i];
        *v76 = (int)(float)(v75 * 255.0);
        v76[1] = (int)(float)(*(float *)&v71[4 * i] * 255.0);
        v76[2] = (int)(float)(*(float *)&v70[4 * i] * 255.0);
        v76[3] = (int)(float)(*(float *)&v69[4 * i] * 255.0);
      }
      ++v67;
      v69 += 0x2000;
      v68 = (realityio::RIOIESInfo *)((char *)v68 + 0x2000);
      v70 += 0x2000;
      v72 += 2048;
      v71 += 0x2000;
    }
    while (v67 != 512);
    v77 = CGBitmapContextCreate(v66, 0x200uLL, 0x200uLL, 8uLL, 0x800uLL, v65, 5u);
    CGBitmapContextCreateImage(v77);
    operator delete(v66);
    v78 = REAssetManagerTextureMemoryAssetCreateWithCGImage();
    REAssetSetMetadataString();
    realityio::Builder::addAsset((uint64_t *)this, v78, 0);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v131, &v109);
    v106 = (uint64_t)v63;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v109);
    v80 = v25;
    std::string::basic_string[abi:ne180100]<0>(v107, __s);
    AssetHandle = REAssetManagerCreateAssetHandle();
    REMaterialAssetBuilderCreate();
    REMaterialAssetBuilderSetMaterialDefinition();
    REMaterialAssetBuilderSetTextureFromAsset();
    REMaterialAssetBuilderBindTextureToSampler();
    v82 = (void *)REAssetManagerMaterialAssetBuilderBuild();
    if (*(char *)(String + 23) >= 0)
      v83 = *(unsigned __int8 *)(String + 23);
    else
      v83 = *(_QWORD *)(String + 8);
    v84 = v138;
    std::string::basic_string[abi:ne180100]((uint64_t)v138, v83 + 17);
    if (v138[23] < 0)
      v84 = *(_BYTE **)v138;
    if (v83)
    {
      if (*(char *)(String + 23) >= 0)
        v85 = (const void *)String;
      else
        v85 = *(const void **)String;
      memmove(v84, v85, v83);
    }
    strcpy(&v84[v83], "_lightMaterialDef");
    if (v138[23] >= 0)
      v86 = v138;
    else
      v86 = *(_BYTE **)v138;
    realityio::Builder::addAsset((uint64_t *)this, AssetHandle, (uint64_t)v86);
    if (*(char *)(String + 23) >= 0)
      v87 = *(unsigned __int8 *)(String + 23);
    else
      v87 = *(_QWORD *)(String + 8);
    v88 = v136;
    std::string::basic_string[abi:ne180100]((uint64_t)v136, v87 + 14);
    v25 = v80;
    if (v137 < 0)
      v88 = (void **)v136[0];
    if (v87)
    {
      if (*(char *)(String + 23) >= 0)
        v89 = (const void *)String;
      else
        v89 = *(const void **)String;
      memmove(v88, v89, v87);
    }
    strcpy((char *)v88 + v87, "_lightMaterial");
    if (v137 >= 0)
      v90 = v136;
    else
      v90 = (void **)v136[0];
    realityio::Builder::addAsset((uint64_t *)this, (uint64_t)v82, (uint64_t)v90);
    RERelease();
    if (v137 < 0)
      operator delete(v136[0]);
    if ((v138[23] & 0x80000000) != 0)
      operator delete(*(void **)v138);
    if (v108 < 0)
      operator delete(v107[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v109);
    v136[0] = v82;
    if (v82)
      RERetain();
    realityio::Builder::addAsset((uint64_t *)this, (uint64_t)v82, 0);
    RERelease();
    v91 = *(_QWORD *)(v106 + 48);
    *(_QWORD *)v138 = &off_24FDF69A0;
    *(_QWORD *)&v138[8] = v136;
    *(_QWORD *)&v138[16] = &__s;
    v139 = v138;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v91 + 16))(v91, v138);
    v92 = v139;
    if (v139 == v138)
    {
      v93 = 4;
      v92 = v138;
    }
    else
    {
      if (!v139)
      {
LABEL_177:
        REFilterMapComponentGetComponentType();
        v97 = (void *)REComponentCreateByClass();
        v107[0] = v97;
        if (v97)
          RERetain();
        realityio::Builder::addComponent((uint64_t *)this, (uint64_t)v97);
        RERelease();
        v98 = (realityio::EntityBuilder *)REFilterMapComponentSetMaterial();
        v99 = realityio::EntityBuilder::kInputName(v98);
        realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v106, v99, (uint64_t)v138);
        if (v138[0])
        {
          v109 = *(_QWORD *)&v138[8];
          if (*(_QWORD *)&v138[8])
            RERetain();
        }
        else
        {
          v109 = 0;
        }
        REEntityAddExistingComponent();
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v109);
        realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v138);
        realityio::WrappedRERef<REComponent *>::~WrappedRERef(v107);
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(v136);
        if (v111)
        {
          v112 = v111;
          operator delete(v111);
        }
LABEL_185:
        if (SHIBYTE(v115) < 0)
          operator delete(v114[0]);
        if (v146)
        {
          v147 = v146;
          operator delete(v146);
        }
        if (*((_QWORD *)&v143 + 1))
        {
          *(_QWORD *)&v144 = *((_QWORD *)&v143 + 1);
          operator delete(*((void **)&v143 + 1));
        }
        if ((_QWORD)v142)
        {
          *((_QWORD *)&v142 + 1) = v142;
          operator delete((void *)v142);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v100 = v117;
        if (v117)
        {
          p_shared_owners = (unint64_t *)&v117->__shared_owners_;
          do
            v102 = __ldaxr(p_shared_owners);
          while (__stlxr(v102 - 1, p_shared_owners));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v118.__r_.__value_.__l.__data_);
        goto LABEL_202;
      }
      v93 = 5;
    }
    (*(void (**)(void))(*v92 + 8 * v93))();
    goto LABEL_177;
  }
  if ((v55 & 1) == 0)
    goto LABEL_111;
LABEL_109:
  v35 = 0;
LABEL_202:
  if ((v123 & 7) != 0)
  {
    v103 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFFFF8);
    do
      v104 = __ldxr(v103);
    while (__stlxr(v104 - 2, v103));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v121);
  if (v120)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v120);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
LABEL_74:
  if (v8)
  {
    ComponentType = REAmbientLightComponentGetComponentType();
  }
  else if (v25)
  {
    ComponentType = REPointLightComponentGetComponentType();
  }
  else
  {
    ComponentType = RESpotLightComponentGetComponentType();
  }
  v124.__r_.__value_.__r.__words[0] = ComponentType;
  if (v35)
    v124.__r_.__value_.__r.__words[0] = REPointLightComponentGetComponentType();
  v130 = realityio::scaleLightIntensityByStageUnits((realityio *)v131, v37, v130);
  *(_QWORD *)v138 = 0;
  v38 = *((_QWORD *)v135 + 6);
  v39 = operator new(0x48uLL);
  *v39 = &off_24FDF6A20;
  v39[1] = &v135;
  v39[2] = v131;
  v39[3] = &v124;
  v39[4] = this;
  v39[5] = v138;
  v39[6] = &v130;
  v39[7] = &v129;
  v39[8] = &v149;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v38 + 16))(v38, &buf);
  p_buf = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((std::string *)__p.__r_.__value_.__l.__data_ == &buf)
  {
    v41 = 4;
    p_buf = &buf;
  }
  else
  {
    if (!__p.__r_.__value_.__r.__words[0])
      goto LABEL_86;
    v41 = 5;
  }
  (*(void (**)(void))(p_buf->__r_.__value_.__r.__words[0] + 8 * v41))();
LABEL_86:
  v43 = *((_QWORD *)this + 2);
  v42 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  buf.__r_.__value_.__r.__words[0] = v43;
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = atomic_load((unsigned __int8 *)&qword_255E54C28);
  if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_255E54C28))
  {
    v105 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v105, "light_component");
    _MergedGlobals_42 = (uint64_t)v105;
    __cxa_guard_release(&qword_255E54C28);
  }
  realityio::Outputs::storeValue<REComponent *&>(v43, (__int128 *)_MergedGlobals_42, v138);
  if (v42)
  {
    v47 = (unint64_t *)&v42->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  MEMORY[0x2348B208C](&v126);
  if ((v134 & 7) != 0)
  {
    v49 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
    do
      v50 = __ldxr(v49);
    while (__stlxr(v50 - 2, v49));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v133);
  result = v132;
  if (v132)
    return (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v132);
  return result;
}

void sub_2300FCA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  uint64_t v57;

  MEMORY[0x2348B4E1C](v57, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_255E54C28);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  MEMORY[0x2348B208C](&a37);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a42);
  _Unwind_Resume(a1);
}

_QWORD *realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::SpotOrPointOrAmbientLightComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  realityio::Inputs *v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a2 + 6);
  v5 = a2;
  v6[0] = &off_24FDF6B20;
  v6[1] = &v5;
  v6[2] = this;
  v7 = v6;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_2300FCDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::SpotOrPointOrAmbientLightComponentBuilder::~SpotOrPointOrAmbientLightComponentBuilder(realityio::SpotOrPointOrAmbientLightComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF68A0;
  return result;
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF68A0;
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2300FCFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF6920;
  return result;
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF6920;
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  std::string::size_type v14;
  std::__shared_weak_count *v15;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v13 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>("none", (std::string::size_type *)Data + 11, &v13, &v14);
  v5 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2300FD2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::SpotOrPointOrAmbientLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::getAttributeValue<BOOL>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  realityio *v6;
  NSObject *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  __int128 __p;
  _BYTE v20[8];
  uint64_t v21;
  _BYTE buf[24];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<BOOL>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(_BYTE *)a3)
      {
        v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0)
              v9 = *(const char **)v9;
          }
          else
          {
            v9 = "";
          }
          v16 = *(_QWORD *)(a3 + 24);
          v15 = a3 + 24;
          v14 = v16;
          if (*(char *)(v15 + 23) >= 0)
            v14 = v15;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v14;
          _os_log_error_impl(&dword_22FF26000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v17);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      v11 = v23;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
      *(_QWORD *)(a3 + 32) = v11;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
      LOBYTE(v11) = HIBYTE(v23);
      v23 = 0uLL;
      *(_QWORD *)&buf[16] = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v11;
      if (v18 < 0)
        operator delete(v17[0]);
    }
    if ((v21 & 7) != 0)
    {
      v12 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((_QWORD *)&__p + 1))
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    v10 = v23;
    *(_QWORD *)(a3 + 24) = *(_QWORD *)&buf[16];
    *(_QWORD *)(a3 + 32) = v10;
    *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v23 + 7);
    LOBYTE(v10) = HIBYTE(v23);
    v23 = 0uLL;
    *(_QWORD *)&buf[16] = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 47) = v10;
    if ((v20[7] & 0x80000000) != 0)
      operator delete((void *)__p);
  }
}

void sub_2300FD5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (!*(_BYTE *)v5 && *(char *)(v5 + 47) < 0)
    operator delete(*(void **)(v5 + 24));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<BOOL>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<BOOL>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_2300FD7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<BOOL>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  char v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v11;
  std::type_info *v12;
  pxrInternal__aapl__pxrReserved__::VtValue *v13;
  char v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v25;
  std::string v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  std::string v33;
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v35 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        v6 = *(_BYTE *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(_BYTE *)a3 = 1;
        *(_BYTE *)(a3 + 8) = v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      if ((pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB770], v11) & 1) != 0)
      {
        v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          v14 = *(_BYTE *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>(v13);
          *(_BYTE *)a3 = 1;
          *(_BYTE *)(a3 + 8) = v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          v25 = v32;
          *(_QWORD *)(a3 + 24) = v31;
          *(_QWORD *)(a3 + 32) = v25;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          v32 = 0uLL;
          v31 = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v23 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      v22 = __p[0];
    }
    else
    {
      v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      std::operator+<char>();
      v15 = std::string::append(&v27, ") at the given time: ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v26;
      else
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      else
        size = v26.__r_.__value_.__l.__size_;
      v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      v21 = v32;
      *(_QWORD *)(a3 + 24) = v31;
      *(_QWORD *)(a3 + 32) = v21;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      v32 = 0uLL;
      v31 = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  v9 = v32;
  *(_QWORD *)(a3 + 24) = v31;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  v32 = 0uLL;
  v31 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
}

void sub_2300FDBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDF69A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF69A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::operator()()
{
  return REMaterialAssetSetSamplerBinding();
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24FDF6A20;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDF6A20;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  realityio *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint8_t *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t Text;
  __int128 v16;
  realityio *v17;
  char v18[8];
  realityio *v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = **(_QWORD **)(a1 + 8);
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v3, v4, (uint64_t)v18);
  if (!v18[0])
  {
    v17 = 0;
    goto LABEL_11;
  }
  v5 = v19;
  v17 = v19;
  if (!v19)
  {
LABEL_11:
    v13 = *(id *)(realityio::logObjects(v5) + 24);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), &v20);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
      *(_DWORD *)buf = 136315138;
      v22 = Text;
      _os_log_impl(&dword_22FF26000, v13, OS_LOG_TYPE_DEFAULT, "Stopping operation to set spot/point/ambient light component because entity no longer exists for prim \"%s\"", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
    }

    goto LABEL_14;
  }
  RERetain();
  v6 = *(_QWORD *)(v2 + 280);
  if (**(_QWORD **)(a1 + 24) != v6 && v6 != RECameraMovementComponentGetComponentType())
    REEntityRemoveComponentByClass();
  *(_QWORD *)(v2 + 280) = **(_QWORD **)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  v16 = *(_OWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 16);
  v23 = 0;
  v10 = (char *)operator new(0x38uLL);
  *(_QWORD *)v10 = &off_24FDF6A90;
  *((_QWORD *)v10 + 1) = v7;
  *((_QWORD *)v10 + 2) = v2;
  *(_OWORD *)(v10 + 24) = v16;
  *((_QWORD *)v10 + 5) = v8;
  *((_QWORD *)v10 + 6) = v9;
  v23 = (uint8_t *)v10;
  v20 = REEntityGetOrAddComponentByClass();
  if (!v23)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint8_t *, uint64_t *))(*(_QWORD *)v23 + 48))(v23, &v20);
  RENetworkMarkComponentDirty();
  v11 = v23;
  if (v23 == buf)
  {
    v12 = 4;
    v11 = buf;
    goto LABEL_16;
  }
  if (v23)
  {
    v12 = 5;
LABEL_16:
    (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
  }
LABEL_14:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v17);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v18);
}

void sub_2300FDFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24FDF6A90;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDF6A90;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ComponentType;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  char v28[8];
  void *__p;
  char v30;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 16);
  **(_QWORD **)(a1 + 8) = *a2;
  realityio::Builder::addComponent(v4, v3);
  v5 = v4[35];
  if (v5 == REPointLightComponentGetComponentType())
  {
    exp2f(**(float **)(a1 + 32));
    REPointLightComponentSetIntensity();
    REPointLightComponentSetColorGamut3F();
    return REPointLightComponentSetAttenuationRadius();
  }
  else
  {
    v6 = v4[35];
    ComponentType = RESpotLightComponentGetComponentType();
    exp2f(**(float **)(a1 + 32));
    if (v6 == ComponentType)
    {
      RESpotLightComponentSetIntensity();
      RESpotLightComponentSetColorGamut3F();
      Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
      if (!Data)
        Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
      v10 = (unsigned int *)*((_QWORD *)Data + 15);
      v27 = (unint64_t)v10;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 2, v11));
        if ((v12 & 1) == 0)
          v27 &= 0xFFFFFFFFFFFFFFF8;
      }
      realityio::getAttributeValue<float>(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27, (uint64_t)v28);
      if (!v28[0] && v30 < 0)
        operator delete(__p);
      if ((v27 & 7) != 0)
      {
        v13 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      RESpotLightComponentSetOuterAngle();
      v15 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
      if (!v15)
        v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
      v16 = (unsigned int *)*((_QWORD *)v15 + 16);
      v27 = (unint64_t)v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 2, v17));
        if ((v18 & 1) == 0)
          v27 = (unint64_t)v17;
      }
      realityio::getAttributeValue<float>(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27, (uint64_t)v28);
      if (!v28[0] && v30 < 0)
        operator delete(__p);
      if ((v27 & 7) != 0)
      {
        v19 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      v21 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
      if (!v21)
        v21 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
      v22 = (unsigned int *)*((_QWORD *)v21 + 17);
      v27 = (unint64_t)v22;
      if ((v22 & 7) != 0)
      {
        v23 = (unsigned int *)((unint64_t)v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 2, v23));
        if ((v24 & 1) == 0)
          v27 = (unint64_t)v23;
      }
      realityio::getAttributeValue<float>(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 48), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27, (uint64_t)v28);
      if (!v28[0] && v30 < 0)
        operator delete(__p);
      if ((v27 & 7) != 0)
      {
        v25 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      return RESpotLightComponentSetInnerAngle();
    }
    else
    {
      REAmbientLightComponentSetIntensity();
      return REAmbientLightComponentSetColorGamut3F();
    }
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio41SpotOrPointOrAmbientLightComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDF6B20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF6B20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::EntityBuilder *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[8];
  uint64_t v6;

  v1 = **((_QWORD **)a1 + 1);
  v2 = realityio::EntityBuilder::kInputName(a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v1, v2, (uint64_t)v5);
  if (v5[0])
  {
    v4 = v6;
    if (v6)
    {
      RERetain();
      REEntityRemoveComponentByClass();
    }
  }
  else
  {
    v4 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v4);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v5);
}

void sub_2300FE664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::SpotOrPointOrAmbientLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

std::string *ExecFault::fromString@<X0>(int a1@<W0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_DWORD *)a3 = a1;
  return std::string::operator=((std::string *)(a3 + 8), a2);
}

void sub_2300FE704(_Unwind_Exception *a1)
{
  void **v1;

  ExecFault::~ExecFault(v1);
  _Unwind_Resume(a1);
}

std::string *ExecFault::fromError@<X0>(int a1@<W0>, const std::string *a2@<X1>, __CFError *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v5;
  std::string *result;
  __CFString *v7;
  int v8;
  void *v9;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _BYTE v13[8];
  std::string v14;
  CFTypeRef cf;

  *(_QWORD *)(a4 + 8) = 0;
  v5 = (std::string *)(a4 + 8);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_DWORD *)a4 = a1;
  result = std::string::operator=((std::string *)(a4 + 8), a2);
  if (a3)
  {
    v7 = (__CFString *)CFErrorCopyDescription(a3);
    cf = v7;
    if (!v7)
      goto LABEL_20;
    realityio::CFStringCopyUTF8String(v7, (uint64_t)v13);
    if (!v13[0])
      goto LABEL_20;
    v8 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    {
      v9 = (void *)v14.__r_.__value_.__r.__words[0];
      if (!v14.__r_.__value_.__l.__size_)
      {
LABEL_19:
        operator delete(v9);
        goto LABEL_20;
      }
      std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else
    {
      if (!*((_BYTE *)&v14.__r_.__value_.__s + 23))
      {
LABEL_20:
        CFRelease(a3);
        return (std::string *)realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
      }
      __p = v14;
    }
    std::string::append(v5, ": ");
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append(v5, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_20;
    v9 = (void *)v14.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }
  return result;
}

void sub_2300FE844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19)
{
  void **v19;
  void *v20;

  operator delete(v20);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&a19);
  ExecFault::~ExecFault(v19);
  _Unwind_Resume(a1);
}

void ExecFault::stringValue(int a1@<W0>, const std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  _BYTE v4[8];
  void *__p;
  char v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  ExecFault::fromString(a1, a2, (uint64_t)v4);
  a3[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<ExecFault>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>::_PlaceCopy(a3, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  if (v6 < 0)
    operator delete(__p);
}

void sub_2300FE92C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ExecFault::~ExecFault((void **)va);
  _Unwind_Resume(a1);
}

void ExecFault::errorValue(int a1@<W0>, const std::string *a2@<X1>, __CFError *a3@<X2>, uint64_t *a4@<X8>)
{
  _BYTE v5[8];
  void *__p;
  char v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  ExecFault::fromError(a1, a2, a3, (uint64_t)v5);
  a4[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<ExecFault>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>::_PlaceCopy(a4, (uint64_t)v5);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  if (v7 < 0)
    operator delete(__p);
}

void sub_2300FE9D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ExecFault::~ExecFault((void **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrTfTokenGetTypeID()
{
  if (RIOPxrTfTokenGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrTfTokenGetTypeID::onceToken, &__block_literal_global_25);
  return RIOPxrTfTokenGetTypeID::typeID;
}

uint64_t RIOPxrTfTokenCreateWithCString(_BYTE *a1, int a2)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  if (a1 && *a1)
  {
    if (a2)
    {
      MEMORY[0x2348B2758](&v7, a1, 0);
      result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v7);
      if ((v7 & 7) != 0)
      {
        v3 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v4 = __ldxr(v3);
        while (__stlxr(v4 - 2, v3));
      }
    }
    else
    {
      MEMORY[0x2348B274C](&v7, a1);
      result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v7);
      if ((v7 & 7) != 0)
      {
        v5 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1)
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_1_2);
    return RIOPxrTfTokenEmpty::tokenRef;
  }
  return result;
}

uint64_t RIOPxrTfTokenEmpty()
{
  if (RIOPxrTfTokenEmpty::onceToken != -1)
    dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_1_2);
  return RIOPxrTfTokenEmpty::tokenRef;
}

CFStringRef RIOPxrTfTokenCopyString(uint64_t a1)
{
  unint64_t v1;
  const char *v2;

  if (!a1)
    return &stru_24FDFD990;
  v1 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
  if (v1)
  {
    v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0)
      v2 = *(const char **)v2;
  }
  else
  {
    v2 = "";
  }
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

uint64_t RIOPxrTfTokenIsImmortal(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      if ((v1 & 7) == 0)
        return 1;
      v2 = (_DWORD *)(v1 & 0xFFFFFFFFFFFFFFF8);
      if ((*v2 & 1) == 0)
      {
        *(_QWORD *)(result + 16) = v2;
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL RIOPxrTfTokenIsEmpty(uint64_t a1)
{
  return !a1 || *(_QWORD *)(a1 + 16) == 0;
}

uint64_t RIOPxrTfTokenGetLength(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v1)
    {
      if (*(char *)(v1 + 39) < 0)
        return *(_QWORD *)(v1 + 24);
      else
        return *(unsigned __int8 *)(v1 + 39);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFArray *RIOPxrTfTokenCopyTypeSchemaPropertyNames(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t Instance;
  int8x8_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t *j;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  char *v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  const void *v48;
  char *v50;
  char *v51;
  uint64_t v52;
  char v53;
  char **v54;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  if (a1)
  {
    v50 = 0;
    v51 = 0;
    v52 = 0;
    Instance = atomic_load((unint64_t *)off_24FDDF030);
    if (!Instance)
      Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
    v4 = *(int8x8_t *)(Instance + 40);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
      v6 = bswap64(0x9E3779B97F4A7C55 * v5);
      v7 = (uint8x8_t)vcnt_s8(v4);
      v7.i16[0] = vaddlv_u8(v7);
      if (v7.u32[0] > 1uLL)
      {
        v8 = v6;
        if (v6 >= *(_QWORD *)&v4)
          v8 = v6 % *(_QWORD *)&v4;
      }
      else
      {
        v8 = v6 & (*(_QWORD *)&v4 - 1);
      }
      v9 = *(_QWORD **)(*(_QWORD *)(Instance + 32) + 8 * v8);
      if (v9)
      {
        for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
        {
          v11 = i[1];
          if (v6 == v11)
          {
            if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v5)
            {
              v12 = i[3];
              if (v12)
                v13 = &v50 == (char **)(v12 + 80);
              else
                v13 = 1;
              if (!v13)
              {
                v15 = *(uint64_t **)(v12 + 80);
                v14 = *(uint64_t **)(v12 + 88);
                v16 = v14 - v15;
                v17 = v50;
                if (v16 <= (v52 - (uint64_t)v50) >> 3)
                {
                  v20 = v51;
                  v21 = (v51 - v50) >> 3;
                  if (v21 >= v16)
                  {
                    if (v15 == v14)
                    {
                      v26 = (uint64_t *)v50;
                    }
                    else
                    {
                      v26 = (uint64_t *)v50;
                      do
                      {
                        pxrInternal__aapl__pxrReserved__::TfToken::operator=(v17, v15++);
                        v17 += 8;
                        ++v26;
                      }
                      while (v15 != v14);
                      v20 = v51;
                    }
                    while (v20 != (char *)v26)
                    {
                      v28 = *((_QWORD *)v20 - 1);
                      v20 -= 8;
                      v27 = v28;
                      if ((v28 & 7) != 0)
                      {
                        v29 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v30 = __ldxr(v29);
                        while (__stlxr(v30 - 2, v29));
                      }
                    }
                  }
                  else
                  {
                    for (j = &v15[v21]; j != v14; ++j)
                    {
                      v23 = *j;
                      *(_QWORD *)v17 = *j;
                      if ((v23 & 7) != 0)
                      {
                        v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v25 = __ldxr(v24);
                        while (__stxr(v25 + 2, v24));
                        if ((v25 & 1) == 0)
                          *(_QWORD *)v17 &= 0xFFFFFFFFFFFFFFF8;
                      }
                      v17 += 8;
                    }
                    v26 = (uint64_t *)v17;
                  }
                  v51 = (char *)v26;
                }
                else
                {
                  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vdeallocate((void **)&v50);
                  if ((char *)v14 - (char *)v15 < 0)
                    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
                  v18 = (v52 - (uint64_t)v50) >> 2;
                  if (v18 <= v16)
                    v18 = v14 - v15;
                  if ((unint64_t)(v52 - (_QWORD)v50) >= 0x7FFFFFFFFFFFFFF8)
                    v19 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v19 = v18;
                  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vallocate[abi:ne180100](&v50, v19);
                  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_at_end<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>((uint64_t)&v50, v15, v14);
                }
              }
              break;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= *(_QWORD *)&v4)
                v11 %= *(_QWORD *)&v4;
            }
            else
            {
              v11 &= *(_QWORD *)&v4 - 1;
            }
            if (v11 != v8)
              break;
          }
        }
      }
    }
    if (v50 != v51)
    {
      std::__introsort<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *,false>((uint64_t)v50, (uint64_t *)v51, (uint64_t)&v53, 126 - 2 * __clz((v51 - v50) >> 3), 1);
      v32 = (uint64_t *)v50;
      v31 = v51;
      if (v50 != v51)
      {
        v33 = (uint64_t *)(v50 + 8);
        do
        {
          if (v33 == (uint64_t *)v51)
            goto LABEL_77;
          v34 = *(v33 - 1) & 0xFFFFFFFFFFFFFFF8;
          v35 = *v33++ & 0xFFFFFFFFFFFFFFF8;
        }
        while (v34 != v35);
        v36 = v33 - 2;
        if (v33 != (uint64_t *)v51)
        {
          v37 = v33 - 1;
          do
          {
            v38 = v37;
            v37 = v33;
            v39 = *v33;
            if ((*v36 & 0xFFFFFFFFFFFFFFF8) != (*v33 & 0xFFFFFFFFFFFFFFF8))
            {
              v40 = v36 + 1;
              if (v38 != v36)
              {
                if ((*v40 & 7) != 0)
                {
                  v41 = (unsigned int *)(*v40 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v42 = __ldxr(v41);
                  while (__stlxr(v42 - 2, v41));
                  v39 = *v37;
                }
                *v40 = v39;
                *v37 = 0;
              }
              v36 = v40;
            }
            v33 = v37 + 1;
          }
          while (v37 + 1 != (uint64_t *)v31);
          v32 = (uint64_t *)v50;
          v31 = v51;
        }
        v43 = v36 + 1;
        if (v36 + 1 == (uint64_t *)v31)
        {
LABEL_77:
          v43 = (uint64_t *)v31;
          goto LABEL_79;
        }
        while (v31 != (char *)v43)
        {
          v45 = *((_QWORD *)v31 - 1);
          v31 -= 8;
          v44 = v45;
          if ((v45 & 7) != 0)
          {
            v46 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
            do
              v47 = __ldxr(v46);
            while (__stlxr(v47 - 2, v46));
          }
        }
        v51 = (char *)v43;
        v32 = (uint64_t *)v50;
LABEL_79:
        while (v32 != v43)
        {
          v48 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v32);
          CFArrayAppendValue(Mutable, v48);
          CFRelease(v48);
          ++v32;
        }
      }
    }
    v54 = &v50;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  }
  return Mutable;
}

void sub_2300FF180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t _RIOPxrTfTokenCFFinalize(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(result + 16);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  return result;
}

BOOL _RIOPxrTfTokenCFEqual(_QWORD *a1, _QWORD *a2)
{
  return (a1[2] & 0xFFFFFFFFFFFFFFF8) == (a2[2] & 0xFFFFFFFFFFFFFFF8);
}

unint64_t _RIOPxrTfTokenCFHash(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * (a1[2] & 0xFFFFFFFFFFFFFFF8));
}

CFStringRef _RIOPxrTfTokenCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrTfToken %p>"), a1);
}

CFStringRef _RIOPxrTfTokenCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrTfToken %p>"), a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v6;
  uint64_t *k;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *n;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  int v52;
  char *v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  char v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  int v66;
  char *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  int v78;
  char *v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  int v97;
  char *v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  BOOL v103;
  char *v104;
  unint64_t v105;
  char *v106;
  int v107;
  char *v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  char *v114;
  unint64_t v115;
  char *v116;
  int v117;
  char *v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  uint64_t *m;
  char *v125;
  unint64_t v126;
  char *v127;
  int v128;
  char *v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  int v139;
  char *v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  int v149;
  char *v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  BOOL v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  unint64_t v163;
  uint64_t *v164;
  BOOL v166;
  uint64_t *v167;
  uint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  int v172;
  char *v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  BOOL v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *j;
  uint64_t *v182;
  unsigned int *v183;
  unsigned int v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  int v188;
  char *v189;
  int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  BOOL v194;
  unsigned int *v195;
  unsigned int v196;
  int64_t v197;
  int64_t v198;
  uint64_t v199;
  uint64_t *v200;
  int64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  int v205;
  char *v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  BOOL v211;
  unint64_t v212;
  uint64_t *v213;
  unint64_t v214;
  char *v215;
  int v216;
  char *v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  BOOL v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t *v225;
  unsigned int *v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  char *v232;
  int v233;
  char *v234;
  int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  BOOL v239;
  unint64_t v240;
  char *v241;
  char *v242;
  int v243;
  char *v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  BOOL v249;
  unsigned int *v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  int v264;
  char *v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  BOOL v270;
  unsigned int *v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int *v275;
  unsigned int v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t *v279;
  unint64_t v280;
  unsigned int *v281;
  unsigned int v282;
  unint64_t v283;
  char *v284;
  int v285;
  char *v286;
  int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t *v293;
  unsigned int *v294;
  unsigned int v295;
  unint64_t v296;
  unint64_t v297;
  char *v298;
  int v299;
  char *v300;
  int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  BOOL v305;
  unsigned int *v306;
  unsigned int v307;
  uint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  char *v312;
  int v313;
  char *v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  BOOL v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *i;
  uint64_t *v323;
  unsigned int *v324;
  unsigned int v325;
  unint64_t v326;
  unint64_t v327;
  char *v328;
  int v329;
  char *v330;
  int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  BOOL v335;
  unsigned int *v336;
  unsigned int v337;
  unint64_t v338;
  char *v339;
  int v340;
  char *v341;
  int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  BOOL v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v350;
  uint64_t *v351;
  int64_t v352;

  v6 = (uint64_t *)result;
LABEL_2:
  v351 = a2 - 1;
  k = v6;
  while (2)
  {
    v6 = k;
    v8 = (char *)a2 - (char *)k;
    v9 = a2 - k;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if ((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v163 = (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          v163 = result;
        }
        if ((*v6 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v338 = (*v6 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          v338 = result;
        }
        if (*(char *)(v163 + 23) >= 0)
          v339 = (char *)v163;
        else
          v339 = *(char **)v163;
        v340 = *v339;
        if (*(char *)(v338 + 23) >= 0)
          v341 = (char *)v338;
        else
          v341 = *(char **)v338;
        if (v340 < 0
          || (v342 = *v341, v342 < 0)
          || ((v343 = v340,
               v344 = v342,
               v345 = (v342 ^ v343) & 0xFFFFFFDF,
               v343 >= 0x40)
            ? (v346 = v345 == 0)
            : (v346 = 1),
              v346 || v344 < 0x40))
        {
          result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
          if (!(_DWORD)result)
            return result;
        }
        else if ((((_BYTE)v343 + 5) & 0x1Fu) >= (((_BYTE)v344 + 5) & 0x1Fu))
        {
          return result;
        }
        v347 = *v6;
        *v6 = *(a2 - 1);
        *(a2 - 1) = v347;
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)v6, v6 + 1, v351);
      case 4:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(v6, v6 + 1, v6 + 2, v351);
      case 5:
        return (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(v6, v6 + 1, v6 + 2, v6 + 3, v351);
      default:
        if (v8 <= 191)
        {
          v164 = v6 + 1;
          v166 = v6 == a2 || v164 == a2;
          if ((a5 & 1) == 0)
          {
            if (v166)
              return result;
            while (1)
            {
              v309 = v6;
              v6 = v164;
              if ((v309[1] & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v310 = (v309[1] & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v310 = result;
              }
              if ((*v309 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v311 = (*v309 & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v311 = result;
              }
              if (*(char *)(v310 + 23) >= 0)
                v312 = (char *)v310;
              else
                v312 = *(char **)v310;
              v313 = *v312;
              if (*(char *)(v311 + 23) >= 0)
                v314 = (char *)v311;
              else
                v314 = *(char **)v311;
              if (v313 < 0
                || (v315 = *v314, v315 < 0)
                || ((v316 = v313,
                     v317 = v315,
                     v318 = (v315 ^ v316) & 0xFFFFFFDF,
                     v316 >= 0x40)
                  ? (v319 = v318 == 0)
                  : (v319 = 1),
                    v319 || v317 < 0x40))
              {
                result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
                if ((_DWORD)result)
                {
LABEL_609:
                  v320 = 0;
                  v321 = *v6;
                  *v6 = 0;
                  for (i = v6; ; i = v323)
                  {
                    v323 = v309;
                    if ((v320 & 7) != 0)
                    {
                      v324 = (unsigned int *)(v320 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v325 = __ldxr(v324);
                      while (__stlxr(v325 - 2, v324));
                    }
                    *i = *v309;
                    *v309 = 0;
                    v326 = (v321 & 0xFFFFFFFFFFFFFFF8) + 16;
                    if ((v321 & 0xFFFFFFFFFFFFFFF8) == 0)
                    {
                      result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                      v326 = result;
                    }
                    --v309;
                    if ((*(v323 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      v327 = (*(v323 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
                    }
                    else
                    {
                      result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                      v327 = result;
                    }
                    if (*(char *)(v326 + 23) >= 0)
                      v328 = (char *)v326;
                    else
                      v328 = *(char **)v326;
                    v329 = *v328;
                    if (*(char *)(v327 + 23) >= 0)
                      v330 = (char *)v327;
                    else
                      v330 = *(char **)v327;
                    if (v329 < 0
                      || (v331 = *v330, v331 < 0)
                      || ((v332 = v329,
                           v333 = v331,
                           v334 = (v331 ^ v332) & 0xFFFFFFDF,
                           v332 >= 0x40)
                        ? (v335 = v334 == 0)
                        : (v335 = 1),
                          v335 || v333 < 0x40))
                    {
                      result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
                      if (!(_DWORD)result)
                      {
LABEL_634:
                        if ((*v323 & 7) != 0)
                        {
                          v336 = (unsigned int *)(*v323 & 0xFFFFFFFFFFFFFFF8);
                          do
                            v337 = __ldxr(v336);
                          while (__stlxr(v337 - 2, v336));
                        }
                        *v323 = v321;
                        break;
                      }
                    }
                    else if ((((_BYTE)v332 + 5) & 0x1Fu) >= (((_BYTE)v333 + 5) & 0x1Fu))
                    {
                      goto LABEL_634;
                    }
                    v320 = *v323;
                  }
                }
              }
              else if ((((_BYTE)v316 + 5) & 0x1Fu) < (((_BYTE)v317 + 5) & 0x1Fu))
              {
                goto LABEL_609;
              }
              v164 = v6 + 1;
              if (v6 + 1 == a2)
                return result;
            }
          }
          if (v166)
            return result;
          v167 = v6;
          while (1)
          {
            v168 = v167;
            v167 = v164;
            if ((v168[1] & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v169 = (v168[1] & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v169 = result;
            }
            if ((*v168 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v170 = (*v168 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v170 = result;
            }
            if (*(char *)(v169 + 23) >= 0)
              v171 = (char *)v169;
            else
              v171 = *(char **)v169;
            v172 = *v171;
            if (*(char *)(v170 + 23) >= 0)
              v173 = (char *)v170;
            else
              v173 = *(char **)v170;
            if (v172 < 0
              || (v174 = *v173, v174 < 0)
              || ((v175 = v172,
                   v176 = v174,
                   v177 = (v174 ^ v175) & 0xFFFFFFDF,
                   v175 >= 0x40)
                ? (v178 = v177 == 0)
                : (v178 = 1),
                  v178 || v176 < 0x40))
            {
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
              if (!(_DWORD)result)
                goto LABEL_375;
            }
            else if ((((_BYTE)v175 + 5) & 0x1Fu) >= (((_BYTE)v176 + 5) & 0x1Fu))
            {
              goto LABEL_375;
            }
            v179 = 0;
            v180 = *v167;
            *v167 = 0;
            for (j = v167; ; j = v182)
            {
              v182 = v168;
              if ((v179 & 7) != 0)
              {
                v183 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFFFF8);
                do
                  v184 = __ldxr(v183);
                while (__stlxr(v184 - 2, v183));
              }
              *j = *v168;
              *v168 = 0;
              if (v168 == v6)
                break;
              v185 = (v180 & 0xFFFFFFFFFFFFFFF8) + 16;
              if ((v180 & 0xFFFFFFFFFFFFFFF8) == 0)
              {
                result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v185 = result;
              }
              --v168;
              if ((*(v182 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v186 = (*(v182 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v186 = result;
              }
              if (*(char *)(v185 + 23) >= 0)
                v187 = (char *)v185;
              else
                v187 = *(char **)v185;
              v188 = *v187;
              if (*(char *)(v186 + 23) >= 0)
                v189 = (char *)v186;
              else
                v189 = *(char **)v186;
              if (v188 < 0
                || (v190 = *v189, v190 < 0)
                || ((v191 = v188,
                     v192 = v190,
                     v193 = (v190 ^ v191) & 0xFFFFFFDF,
                     v191 >= 0x40)
                  ? (v194 = v193 == 0)
                  : (v194 = 1),
                    v194 || v192 < 0x40))
              {
                result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
                if (!(_DWORD)result)
                  goto LABEL_371;
              }
              else if ((((_BYTE)v191 + 5) & 0x1Fu) >= (((_BYTE)v192 + 5) & 0x1Fu))
              {
                goto LABEL_371;
              }
              v179 = *v182;
            }
            v182 = v6;
LABEL_371:
            if ((*v182 & 7) != 0)
            {
              v195 = (unsigned int *)(*v182 & 0xFFFFFFFFFFFFFFF8);
              do
                v196 = __ldxr(v195);
              while (__stlxr(v196 - 2, v195));
            }
            *v182 = v180;
LABEL_375:
            v164 = v167 + 1;
            if (v167 + 1 == a2)
              return result;
          }
        }
        if (!a4)
        {
          if (v6 == a2)
            return result;
          v197 = (unint64_t)(v9 - 2) >> 1;
          v352 = v197;
          while (1)
          {
            v198 = v197;
            if (v352 < v197)
              goto LABEL_482;
            v199 = (2 * v197) | 1;
            v200 = &v6[v199];
            if (2 * v197 + 2 >= v9)
            {
              v201 = v197;
              goto LABEL_405;
            }
            v201 = v197;
            if ((*v200 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v202 = (*v200 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v202 = result;
            }
            if ((v200[1] & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v203 = (v200[1] & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v203 = result;
            }
            v204 = *(char *)(v202 + 23) >= 0 ? (char *)v202 : *(char **)v202;
            v205 = *v204;
            v206 = *(char *)(v203 + 23) >= 0 ? (char *)v203 : *(char **)v203;
            if ((v205 & 0x80000000) == 0)
            {
              v207 = *v206;
              if ((v207 & 0x80000000) == 0)
              {
                v208 = v205;
                v209 = v207;
                v210 = (v207 ^ v208) & 0xFFFFFFDF;
                v211 = v208 < 0x40 || v210 == 0;
                if (!v211 && v209 >= 0x40)
                  break;
              }
            }
            result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            if ((_DWORD)result)
              goto LABEL_404;
LABEL_405:
            if ((*v200 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v212 = (*v200 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v212 = result;
            }
            v198 = v201;
            v213 = &v6[v201];
            if ((*v213 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v214 = (*v213 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v214 = result;
            }
            if (*(char *)(v212 + 23) >= 0)
              v215 = (char *)v212;
            else
              v215 = *(char **)v212;
            v216 = *v215;
            if (*(char *)(v214 + 23) >= 0)
              v217 = (char *)v214;
            else
              v217 = *(char **)v214;
            if (v216 < 0
              || (v218 = *v217, v218 < 0)
              || ((v219 = v216,
                   v220 = v218,
                   v221 = (v218 ^ v219) & 0xFFFFFFDF,
                   v219 >= 0x40)
                ? (v222 = v221 == 0)
                : (v222 = 1),
                  v222 || v220 < 0x40))
            {
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
              if ((result & 1) != 0)
                goto LABEL_482;
            }
            else if ((((_BYTE)v219 + 5) & 0x1Fu) < (((_BYTE)v220 + 5) & 0x1Fu))
            {
              goto LABEL_482;
            }
            v223 = *v213;
            *v213 = 0;
            v348 = v223;
            v224 = v223 & 0xFFFFFFFFFFFFFFF8;
            v350 = (v223 & 0xFFFFFFFFFFFFFFF8) + 16;
            while (1)
            {
              v225 = v200;
              if (v200 != v213)
              {
                if ((*v213 & 7) != 0)
                {
                  v226 = (unsigned int *)(*v213 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v227 = __ldxr(v226);
                  while (__stlxr(v227 - 2, v226));
                }
                *v213 = *v200;
                *v200 = 0;
              }
              if (v352 < v199)
                break;
              v228 = 2 * v199;
              v199 = (2 * v199) | 1;
              v200 = &v6[v199];
              v229 = v228 + 2;
              if (v228 + 2 < v9)
              {
                if ((*v200 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  v230 = (*v200 & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else
                {
                  result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  v230 = result;
                }
                if ((v200[1] & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  v231 = (v200[1] & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else
                {
                  result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  v231 = result;
                }
                if (*(char *)(v230 + 23) >= 0)
                  v232 = (char *)v230;
                else
                  v232 = *(char **)v230;
                v233 = *v232;
                if (*(char *)(v231 + 23) >= 0)
                  v234 = (char *)v231;
                else
                  v234 = *(char **)v231;
                if (v233 < 0
                  || (v235 = *v234, v235 < 0)
                  || ((v236 = v233,
                       v237 = v235,
                       v238 = (v235 ^ v236) & 0xFFFFFFDF,
                       v236 >= 0x40)
                    ? (v239 = v238 == 0)
                    : (v239 = 1),
                      v239 || v237 < 0x40))
                {
                  result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
                  if (!(_DWORD)result)
                    goto LABEL_454;
LABEL_453:
                  ++v200;
                  v199 = v229;
                  goto LABEL_454;
                }
                if ((((_BYTE)v236 + 5) & 0x1Fu) < (((_BYTE)v237 + 5) & 0x1Fu))
                  goto LABEL_453;
              }
LABEL_454:
              if ((*v200 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v240 = (*v200 & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v240 = result;
              }
              v241 = (char *)v350;
              if (!v224)
              {
                result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v241 = (char *)result;
              }
              if (*(char *)(v240 + 23) >= 0)
                v242 = (char *)v240;
              else
                v242 = *(char **)v240;
              v243 = *v242;
              if (v241[23] >= 0)
                v244 = v241;
              else
                v244 = *(char **)v241;
              if (v243 < 0
                || (v245 = *v244, v245 < 0)
                || ((v246 = v243,
                     v247 = v245,
                     v248 = (v245 ^ v246) & 0xFFFFFFDF,
                     v246 >= 0x40)
                  ? (v249 = v248 == 0)
                  : (v249 = 1),
                    v249 || v247 < 0x40))
              {
                result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
                v213 = v225;
                if ((_DWORD)result)
                  break;
              }
              else
              {
                v213 = v225;
                if ((((_BYTE)v246 + 5) & 0x1Fu) < (((_BYTE)v247 + 5) & 0x1Fu))
                  break;
              }
            }
            if ((*v225 & 7) != 0)
            {
              v250 = (unsigned int *)(*v225 & 0xFFFFFFFFFFFFFFF8);
              do
                v251 = __ldxr(v250);
              while (__stlxr(v251 - 2, v250));
            }
            v198 = v201;
            *v225 = v348;
LABEL_482:
            v197 = v198 - 1;
            if (!v198)
            {
              v252 = (unint64_t)v8 >> 3;
              while (1)
              {
                v253 = 0;
                v254 = *v6;
                *v6 = 0;
                v255 = v252 - 2;
                if (v252 < 2)
                  v255 = v252 - 1;
                v256 = v255 >> 1;
                v257 = v6;
                do
                {
                  v258 = &v257[v253 + 1];
                  v259 = 2 * v253;
                  v253 = (2 * v253) | 1;
                  v260 = v259 + 2;
                  if (v259 + 2 >= v252)
                    goto LABEL_513;
                  if ((*v258 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    v261 = (*v258 & 0xFFFFFFFFFFFFFFF8) + 16;
                  }
                  else
                  {
                    result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                    v261 = result;
                  }
                  if ((v258[1] & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    v262 = (v258[1] & 0xFFFFFFFFFFFFFFF8) + 16;
                  }
                  else
                  {
                    result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                    v262 = result;
                  }
                  if (*(char *)(v261 + 23) >= 0)
                    v263 = (char *)v261;
                  else
                    v263 = *(char **)v261;
                  v264 = *v263;
                  if (*(char *)(v262 + 23) >= 0)
                    v265 = (char *)v262;
                  else
                    v265 = *(char **)v262;
                  if ((v264 & 0x80000000) == 0)
                  {
                    v266 = *v265;
                    if ((v266 & 0x80000000) == 0)
                    {
                      v267 = v264;
                      v268 = v266;
                      v269 = (v266 ^ v267) & 0xFFFFFFDF;
                      v270 = v267 < 0x40 || v269 == 0;
                      if (!v270 && v268 >= 0x40)
                      {
                        if ((((_BYTE)v267 + 5) & 0x1Fu) >= (((_BYTE)v268 + 5) & 0x1Fu))
                          goto LABEL_513;
LABEL_512:
                        ++v258;
                        v253 = v260;
                        goto LABEL_513;
                      }
                    }
                  }
                  result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
                  if ((_DWORD)result)
                    goto LABEL_512;
LABEL_513:
                  if (v258 != v257)
                  {
                    if ((*v257 & 7) != 0)
                    {
                      v271 = (unsigned int *)(*v257 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v272 = __ldxr(v271);
                      while (__stlxr(v272 - 2, v271));
                    }
                    *v257 = *v258;
                    *v258 = 0;
                  }
                  v257 = v258;
                }
                while (v253 <= v256);
                v273 = *v258;
                v274 = *v258 & 7;
                if (v258 == --a2)
                {
                  if (v274)
                  {
                    v281 = (unsigned int *)(v273 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v282 = __ldxr(v281);
                    while (__stlxr(v282 - 2, v281));
                  }
                  *v258 = v254;
                }
                else
                {
                  if (v274)
                  {
                    v275 = (unsigned int *)(v273 & 0xFFFFFFFFFFFFFFF8);
                    do
                      v276 = __ldxr(v275);
                    while (__stlxr(v276 - 2, v275));
                  }
                  *v258 = *a2;
                  *a2 = v254;
                  v277 = (char *)v258 - (char *)v6 + 8;
                  if (v277 >= 9)
                  {
                    v278 = (((unint64_t)v277 >> 3) - 2) >> 1;
                    v279 = &v6[v278];
                    if ((*v279 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      v280 = (*v279 & 0xFFFFFFFFFFFFFFF8) + 16;
                    }
                    else
                    {
                      result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                      v280 = result;
                    }
                    if ((*v258 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      v283 = (*v258 & 0xFFFFFFFFFFFFFFF8) + 16;
                    }
                    else
                    {
                      result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                      v283 = result;
                    }
                    if (*(char *)(v280 + 23) >= 0)
                      v284 = (char *)v280;
                    else
                      v284 = *(char **)v280;
                    v285 = *v284;
                    if (*(char *)(v283 + 23) >= 0)
                      v286 = (char *)v283;
                    else
                      v286 = *(char **)v283;
                    if (v285 < 0
                      || (v287 = *v286, v287 < 0)
                      || ((v288 = v285,
                           v289 = v287,
                           v290 = (v287 ^ v288) & 0xFFFFFFDF,
                           v288 >= 0x40)
                        ? (v291 = v290 == 0)
                        : (v291 = 1),
                          v291 || v289 < 0x40))
                    {
                      result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
                      if ((_DWORD)result)
                        goto LABEL_551;
                    }
                    else if ((((_BYTE)v288 + 5) & 0x1Fu) < (((_BYTE)v289 + 5) & 0x1Fu))
                    {
LABEL_551:
                      v292 = *v258;
                      *v258 = 0;
                      while (1)
                      {
                        v293 = v279;
                        if (v279 != v258)
                        {
                          if ((*v258 & 7) != 0)
                          {
                            v294 = (unsigned int *)(*v258 & 0xFFFFFFFFFFFFFFF8);
                            do
                              v295 = __ldxr(v294);
                            while (__stlxr(v295 - 2, v294));
                          }
                          *v258 = *v279;
                          *v279 = 0;
                        }
                        if (!v278)
                          break;
                        v278 = (v278 - 1) >> 1;
                        v279 = &v6[v278];
                        if ((*v279 & 0xFFFFFFFFFFFFFFF8) != 0)
                        {
                          v296 = (*v279 & 0xFFFFFFFFFFFFFFF8) + 16;
                        }
                        else
                        {
                          result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                          v296 = result;
                        }
                        v297 = (v292 & 0xFFFFFFFFFFFFFFF8) + 16;
                        if ((v292 & 0xFFFFFFFFFFFFFFF8) == 0)
                        {
                          result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                          v297 = result;
                        }
                        if (*(char *)(v296 + 23) >= 0)
                          v298 = (char *)v296;
                        else
                          v298 = *(char **)v296;
                        v299 = *v298;
                        if (*(char *)(v297 + 23) >= 0)
                          v300 = (char *)v297;
                        else
                          v300 = *(char **)v297;
                        if (v299 < 0
                          || (v301 = *v300, v301 < 0)
                          || ((v302 = v299,
                               v303 = v301,
                               v304 = (v301 ^ v302) & 0xFFFFFFDF,
                               v302 >= 0x40)
                            ? (v305 = v304 == 0)
                            : (v305 = 1),
                              v305 || v303 < 0x40))
                        {
                          result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
                          v258 = v293;
                          if ((result & 1) == 0)
                            break;
                        }
                        else
                        {
                          v258 = v293;
                          if ((((_BYTE)v302 + 5) & 0x1Fu) >= (((_BYTE)v303 + 5) & 0x1Fu))
                            break;
                        }
                      }
                      if ((*v293 & 7) != 0)
                      {
                        v306 = (unsigned int *)(*v293 & 0xFFFFFFFFFFFFFFF8);
                        do
                          v307 = __ldxr(v306);
                        while (__stlxr(v307 - 2, v306));
                      }
                      *v293 = v292;
                    }
                  }
                }
                if (v252-- <= 2)
                  return result;
              }
            }
          }
          if ((((_BYTE)v208 + 5) & 0x1Fu) >= (((_BYTE)v209 + 5) & 0x1Fu))
            goto LABEL_405;
LABEL_404:
          ++v200;
          v199 = 2 * v198 + 2;
          goto LABEL_405;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v6[(unint64_t)v9 >> 1];
        if ((unint64_t)v8 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)v11, v6, v351);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)v6, v11, v351);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)(v6 + 1), v11 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)(v6 + 2), &v6[v10 + 1], a2 - 3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)(v11 - 1), v11, &v6[v10 + 1]);
          v12 = *v6;
          *v6 = *v11;
          *v11 = v12;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          if ((*(v6 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v13 = (*(v6 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            v13 = result;
          }
          if ((*v6 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v14 = (*v6 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            v14 = result;
          }
          if (*(char *)(v13 + 23) >= 0)
            v15 = (char *)v13;
          else
            v15 = *(char **)v13;
          v16 = *v15;
          if (*(char *)(v14 + 23) >= 0)
            v17 = (char *)v14;
          else
            v17 = *(char **)v14;
          if (v16 < 0
            || (v18 = *v17, v18 < 0)
            || ((v19 = v16,
                 v20 = v18,
                 v21 = (v18 ^ v19) & 0xFFFFFFDF,
                 v19 >= 0x40)
              ? (v22 = v21 == 0)
              : (v22 = 1),
                v22 || v20 < 0x40))
          {
            result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            if ((result & 1) != 0)
              goto LABEL_30;
          }
          else if ((((_BYTE)v19 + 5) & 0x1Fu) < (((_BYTE)v20 + 5) & 0x1Fu))
          {
            goto LABEL_30;
          }
          v92 = *v6;
          *v6 = 0;
          v93 = v92 & 0xFFFFFFFFFFFFFFF8;
          if ((v92 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v94 = (char *)(v93 + 16);
          }
          else
          {
            result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            v94 = (char *)result;
          }
          if ((*v351 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v95 = (*v351 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            v95 = result;
          }
          if (v94[23] >= 0)
            v96 = v94;
          else
            v96 = *(char **)v94;
          v97 = *v96;
          if (*(char *)(v95 + 23) >= 0)
            v98 = (char *)v95;
          else
            v98 = *(char **)v95;
          if (v97 < 0
            || (v99 = *v98, v99 < 0)
            || ((v100 = v97,
                 v101 = v99,
                 v102 = (v99 ^ v100) & 0xFFFFFFDF,
                 v100 >= 0x40)
              ? (v103 = v102 == 0)
              : (v103 = 1),
                v103 || v101 < 0x40))
          {
            result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            if ((_DWORD)result)
            {
LABEL_182:
              for (k = v6 + 1; ; ++k)
              {
                v104 = (char *)(v93 + 16);
                if (!v93)
                {
                  result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  v104 = (char *)result;
                }
                if ((*k & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  v105 = (*k & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else
                {
                  result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  v105 = result;
                }
                if (v104[23] >= 0)
                  v106 = v104;
                else
                  v106 = *(char **)v104;
                v107 = *v106;
                if (*(char *)(v105 + 23) >= 0)
                  v108 = (char *)v105;
                else
                  v108 = *(char **)v105;
                if (v107 < 0
                  || (v109 = *v108, v109 < 0)
                  || ((v110 = v107,
                       v111 = v109,
                       v112 = (v109 ^ v110) & 0xFFFFFFDF,
                       v110 >= 0x40)
                    ? (v113 = v112 == 0)
                    : (v113 = 1),
                      v113 || v111 < 0x40))
                {
                  result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
                  if ((result & 1) != 0)
                    goto LABEL_229;
                }
                else if ((((_BYTE)v110 + 5) & 0x1Fu) < (((_BYTE)v111 + 5) & 0x1Fu))
                {
                  goto LABEL_229;
                }
              }
            }
          }
          else if ((((_BYTE)v100 + 5) & 0x1Fu) < (((_BYTE)v101 + 5) & 0x1Fu))
          {
            goto LABEL_182;
          }
          for (k = v6 + 1; k < a2; ++k)
          {
            v114 = (char *)(v93 + 16);
            if (!v93)
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v114 = (char *)result;
            }
            if ((*k & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v115 = (*k & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v115 = result;
            }
            if (v114[23] >= 0)
              v116 = v114;
            else
              v116 = *(char **)v114;
            v117 = *v116;
            if (*(char *)(v115 + 23) >= 0)
              v118 = (char *)v115;
            else
              v118 = *(char **)v115;
            if (v117 < 0
              || (v119 = *v118, v119 < 0)
              || ((v120 = v117,
                   v121 = v119,
                   v122 = (v119 ^ v120) & 0xFFFFFFDF,
                   v120 >= 0x40)
                ? (v123 = v122 == 0)
                : (v123 = 1),
                  v123 || v121 < 0x40))
            {
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
              if ((result & 1) != 0)
                break;
            }
            else if ((((_BYTE)v120 + 5) & 0x1Fu) < (((_BYTE)v121 + 5) & 0x1Fu))
            {
              break;
            }
          }
LABEL_229:
          m = a2;
          if (k < a2)
          {
            for (m = a2 - 1; ; --m)
            {
              v125 = (char *)(v93 + 16);
              if (!v93)
              {
                result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v125 = (char *)result;
              }
              if ((*m & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v126 = (*m & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v126 = result;
              }
              if (v125[23] >= 0)
                v127 = v125;
              else
                v127 = *(char **)v125;
              v128 = *v127;
              if (*(char *)(v126 + 23) >= 0)
                v129 = (char *)v126;
              else
                v129 = *(char **)v126;
              if (v128 < 0
                || (v130 = *v129, v130 < 0)
                || ((v131 = v128,
                     v132 = v130,
                     v133 = (v130 ^ v131) & 0xFFFFFFDF,
                     v131 >= 0x40)
                  ? (v134 = v133 == 0)
                  : (v134 = 1),
                    v134 || v132 < 0x40))
              {
                result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
                if (!(_DWORD)result)
                  break;
              }
              else if ((((_BYTE)v131 + 5) & 0x1Fu) >= (((_BYTE)v132 + 5) & 0x1Fu))
              {
                break;
              }
            }
          }
          if (k >= m)
            goto LABEL_297;
          do
          {
            v135 = *k;
            *k++ = *m;
            *m = v135;
            while (1)
            {
              v136 = v93 + 16;
              if (!v93)
              {
                result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v136 = result;
              }
              if ((*k & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v137 = (*k & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v137 = result;
              }
              v138 = *(char *)(v136 + 23) >= 0 ? (char *)v136 : *(char **)v136;
              v139 = *v138;
              v140 = *(char *)(v137 + 23) >= 0 ? (char *)v137 : *(char **)v137;
              if (v139 < 0)
                break;
              v141 = *v140;
              if (v141 < 0)
                break;
              v142 = v139;
              v143 = v141;
              v144 = (v141 ^ v142) & 0xFFFFFFDF;
              v145 = v142 < 0x40 || v144 == 0;
              if (v145 || v143 < 0x40)
                break;
              if ((((_BYTE)v142 + 5) & 0x1Fu) < (((_BYTE)v143 + 5) & 0x1Fu))
                goto LABEL_275;
LABEL_273:
              ++k;
            }
            result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            if ((result & 1) == 0)
              goto LABEL_273;
            do
            {
              while (1)
              {
LABEL_275:
                --m;
                v146 = v93 + 16;
                if (!v93)
                {
                  result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  v146 = result;
                }
                if ((*m & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  v147 = (*m & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else
                {
                  result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                  v147 = result;
                }
                v148 = *(char *)(v146 + 23) >= 0 ? (char *)v146 : *(char **)v146;
                v149 = *v148;
                v150 = *(char *)(v147 + 23) >= 0 ? (char *)v147 : *(char **)v147;
                if (v149 < 0)
                  break;
                v151 = *v150;
                if (v151 < 0)
                  break;
                v152 = v149;
                v153 = v151;
                v154 = (v151 ^ v152) & 0xFFFFFFDF;
                v155 = v152 < 0x40 || v154 == 0;
                if (v155 || v153 < 0x40)
                  break;
                if ((((_BYTE)v152 + 5) & 0x1Fu) >= (((_BYTE)v153 + 5) & 0x1Fu))
                  goto LABEL_296;
              }
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            }
            while ((_DWORD)result);
LABEL_296:
            ;
          }
          while (k < m);
LABEL_297:
          v156 = k - 1;
          v157 = *v6;
          v158 = *v6 & 7;
          if (k - 1 == v6)
          {
            if (v158)
            {
              v161 = (unsigned int *)(v157 & 0xFFFFFFFFFFFFFFF8);
              do
                v162 = __ldxr(v161);
              while (__stlxr(v162 - 2, v161));
            }
          }
          else
          {
            if (v158)
            {
              v159 = (unsigned int *)(v157 & 0xFFFFFFFFFFFFFFF8);
              do
                v160 = __ldxr(v159);
              while (__stlxr(v160 - 2, v159));
            }
            *v6 = *v156;
            *v156 = 0;
          }
          a5 = 0;
          *v156 = v92;
          continue;
        }
LABEL_30:
        v23 = 0;
        v24 = *v6;
        *v6 = 0;
        v25 = v24 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          if ((v6[v23 + 1] & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v26 = (v6[v23 + 1] & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            v26 = result;
          }
          v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
          if (!v25)
          {
            result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
            v27 = result;
          }
          v28 = *(char *)(v26 + 23) >= 0 ? (char *)v26 : *(char **)v26;
          v29 = *v28;
          v30 = *(char *)(v27 + 23) >= 0 ? (char *)v27 : *(char **)v27;
          if (v29 < 0)
            break;
          v31 = *v30;
          if (v31 < 0)
            break;
          v32 = v29;
          v33 = v31;
          v34 = (v31 ^ v32) & 0xFFFFFFDF;
          v35 = v32 < 0x40 || v34 == 0;
          if (v35 || v33 < 0x40)
            break;
          if ((((_BYTE)v32 + 5) & 0x1Fu) >= (((_BYTE)v33 + 5) & 0x1Fu))
            goto LABEL_52;
LABEL_50:
          ++v23;
        }
        result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
        if ((_DWORD)result)
          goto LABEL_50;
LABEL_52:
        v36 = &v6[v23];
        v37 = (unint64_t)&v6[v23 + 1];
        n = a2 - 1;
        if (v23 * 8)
        {
          while (1)
          {
            if ((*n & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v39 = (*n & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v39 = result;
            }
            v40 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
            if (!v25)
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v40 = result;
            }
            if (*(char *)(v39 + 23) >= 0)
              v41 = (char *)v39;
            else
              v41 = *(char **)v39;
            v42 = *v41;
            if (*(char *)(v40 + 23) >= 0)
              v43 = (char *)v40;
            else
              v43 = *(char **)v40;
            if (v42 < 0
              || (v44 = *v43, v44 < 0)
              || ((v45 = v42,
                   v46 = v44,
                   v47 = (v44 ^ v45) & 0xFFFFFFDF,
                   v45 >= 0x40)
                ? (v48 = v47 == 0)
                : (v48 = 1),
                  v48 || v46 < 0x40))
            {
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
              if ((result & 1) != 0)
                goto LABEL_102;
            }
            else if ((((_BYTE)v45 + 5) & 0x1Fu) < (((_BYTE)v46 + 5) & 0x1Fu))
            {
              goto LABEL_102;
            }
            --n;
          }
        }
        n = a2;
        if (v37 < (unint64_t)a2)
        {
          for (n = a2 - 1; ; --n)
          {
            if ((*n & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v49 = (*n & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v49 = result;
            }
            v50 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
            if (!v25)
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v50 = result;
            }
            if (*(char *)(v49 + 23) >= 0)
              v51 = (char *)v49;
            else
              v51 = *(char **)v49;
            v52 = *v51;
            if (*(char *)(v50 + 23) >= 0)
              v53 = (char *)v50;
            else
              v53 = *(char **)v50;
            if (v52 < 0
              || (v54 = *v53, v54 < 0)
              || ((v55 = v52,
                   v56 = v54,
                   v57 = (v54 ^ v55) & 0xFFFFFFDF,
                   v55 >= 0x40)
                ? (v58 = v57 == 0)
                : (v58 = 1),
                  v58 || v56 < 0x40))
            {
              result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
              if (v37 >= (unint64_t)n)
                v59 = 1;
              else
                v59 = result;
              if ((v59 & 1) != 0)
                break;
            }
            else if (v37 >= (unint64_t)n || (((_BYTE)v55 + 5) & 0x1Fu) < (((_BYTE)v56 + 5) & 0x1Fu))
            {
              break;
            }
          }
        }
LABEL_102:
        if (v37 >= (unint64_t)n)
          goto LABEL_149;
        v60 = &v6[v23 + 1];
        v61 = n;
        while (2)
        {
          v62 = *v60;
          *v60++ = *v61;
          *v61 = v62;
          while (2)
          {
            if ((*v60 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v63 = (*v60 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v63 = result;
            }
            v64 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
            if (!v25)
            {
              result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
              v64 = result;
            }
            if (*(char *)(v63 + 23) >= 0)
              v65 = (char *)v63;
            else
              v65 = *(char **)v63;
            v66 = *v65;
            if (*(char *)(v64 + 23) >= 0)
              v67 = (char *)v64;
            else
              v67 = *(char **)v64;
            if ((v66 & 0x80000000) == 0)
            {
              v68 = *v67;
              if ((v68 & 0x80000000) == 0)
              {
                v69 = v66;
                v70 = v68;
                v71 = (v68 ^ v69) & 0xFFFFFFDF;
                v72 = v69 < 0x40 || v71 == 0;
                if (!v72 && v70 >= 0x40)
                {
                  if ((((_BYTE)v69 + 5) & 0x1Fu) >= (((_BYTE)v70 + 5) & 0x1Fu))
                    goto LABEL_126;
                  goto LABEL_124;
                }
              }
            }
            result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            if ((_DWORD)result)
            {
LABEL_124:
              ++v60;
              continue;
            }
            break;
          }
          do
          {
            while (1)
            {
LABEL_126:
              v73 = *--v61;
              v74 = v73 & 0xFFFFFFFFFFFFFFF8;
              if ((v73 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v75 = v74 + 16;
              }
              else
              {
                result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v75 = result;
              }
              v76 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
              if (!v25)
              {
                result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                v76 = result;
              }
              v77 = *(char *)(v75 + 23) >= 0 ? (char *)v75 : *(char **)v75;
              v78 = *v77;
              v79 = *(char *)(v76 + 23) >= 0 ? (char *)v76 : *(char **)v76;
              if (v78 < 0)
                break;
              v80 = *v79;
              if (v80 < 0)
                break;
              v81 = v78;
              v82 = v80;
              v83 = (v80 ^ v81) & 0xFFFFFFDF;
              v84 = v81 < 0x40 || v83 == 0;
              if (v84 || v82 < 0x40)
                break;
              if ((((_BYTE)v81 + 5) & 0x1Fu) < (((_BYTE)v82 + 5) & 0x1Fu))
                goto LABEL_147;
            }
            result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
          }
          while ((result & 1) == 0);
LABEL_147:
          if (v60 < v61)
            continue;
          break;
        }
        v36 = v60 - 1;
LABEL_149:
        v85 = *v6;
        v86 = *v6 & 7;
        if (v36 == v6)
        {
          if (v86)
          {
            v89 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
            do
              v90 = __ldxr(v89);
            while (__stlxr(v90 - 2, v89));
          }
        }
        else
        {
          if (v86)
          {
            v87 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
            do
              v88 = __ldxr(v87);
            while (__stlxr(v88 - 2, v87));
          }
          *v6 = *v36;
          *v36 = 0;
        }
        *v36 = v24;
        if (v37 < (unint64_t)n)
        {
LABEL_160:
          result = std::__introsort<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *,false>(v6, v36, a3, a4, a5 & 1);
          a5 = 0;
          k = v36 + 1;
          continue;
        }
        v91 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(v6, v36);
        k = v36 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(v36 + 1, a2);
        if (!(_DWORD)result)
        {
          if ((v91 & 1) != 0)
            continue;
          goto LABEL_160;
        }
        a2 = v36;
        if ((v91 & 1) == 0)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_230100B4C(_Unwind_Exception *a1)
{
  unsigned int *v1;
  char v2;
  unsigned int v3;

  if ((v2 & 7) != 0)
  {
    do
      v3 = __ldxr(v1);
    while (__stlxr(v3 - 2, v1));
  }
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  int v40;
  char *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  char *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  uint64_t v61;

  v4 = a2;
  v5 = (uint64_t *)result;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v6 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v6 = result;
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v7 = (*v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v7 = result;
  }
  if (*(char *)(v6 + 23) >= 0)
    v8 = (char *)v6;
  else
    v8 = *(char **)v6;
  v9 = *v8;
  if (*(char *)(v7 + 23) >= 0)
    v10 = (char *)v7;
  else
    v10 = *(char **)v7;
  if (v9 < 0
    || (v11 = *v10, v11 < 0)
    || ((v12 = v9,
         v13 = v11,
         v14 = (v11 ^ v12) & 0xFFFFFFDF,
         v12 >= 0x40)
      ? (v15 = v14 == 0)
      : (v15 = 1),
        v15 || v13 < 0x40))
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if ((result & 1) != 0)
      goto LABEL_21;
  }
  else if ((((_BYTE)v12 + 5) & 0x1Fu) < (((_BYTE)v13 + 5) & 0x1Fu))
  {
LABEL_21:
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v16 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      v16 = result;
    }
    if ((*v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v17 = (*v4 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      v17 = result;
    }
    if (*(char *)(v16 + 23) >= 0)
      v18 = (char *)v16;
    else
      v18 = *(char **)v16;
    v19 = *v18;
    if (*(char *)(v17 + 23) >= 0)
      v20 = (char *)v17;
    else
      v20 = *(char **)v17;
    if (v19 < 0
      || (v21 = *v20, v21 < 0)
      || ((v22 = v19,
           v23 = v21,
           v24 = (v21 ^ v22) & 0xFFFFFFDF,
           v22 >= 0x40)
        ? (v25 = v24 == 0)
        : (v25 = 1),
          v25 || v23 < 0x40))
    {
      result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
      if ((result & 1) != 0)
        goto LABEL_41;
    }
    else if ((((_BYTE)v22 + 5) & 0x1Fu) < (((_BYTE)v23 + 5) & 0x1Fu))
    {
LABEL_41:
      v4 = a3;
LABEL_105:
      v61 = *v5;
      *v5 = *v4;
      *v4 = v61;
      return result;
    }
    v49 = *v5;
    *v5 = *v4;
    *v4 = v49;
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v50 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      v50 = result;
      v49 = *v4;
    }
    v51 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (v51)
    {
      v52 = (char *)(v51 + 16);
    }
    else
    {
      result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      v52 = (char *)result;
    }
    if (*(char *)(v50 + 23) >= 0)
      v53 = (char *)v50;
    else
      v53 = *(char **)v50;
    v54 = *v53;
    if (v52[23] >= 0)
      v55 = v52;
    else
      v55 = *(char **)v52;
    if (v54 < 0
      || (v56 = *v55, v56 < 0)
      || ((v57 = v54,
           v58 = v56,
           v59 = (v56 ^ v57) & 0xFFFFFFDF,
           v57 >= 0x40)
        ? (v60 = v59 == 0)
        : (v60 = 1),
          v60 || v58 < 0x40))
    {
      result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
      v5 = v4;
      v4 = a3;
      if (!(_DWORD)result)
        return result;
      goto LABEL_105;
    }
    v47 = ((_BYTE)v57 + 5) & 0x1F;
    v48 = ((_BYTE)v58 + 5) & 0x1F;
    v5 = v4;
    v4 = a3;
LABEL_104:
    if (v47 >= v48)
      return result;
    goto LABEL_105;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v26 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v26 = result;
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v27 = (*v4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v27 = result;
  }
  if (*(char *)(v26 + 23) >= 0)
    v28 = (char *)v26;
  else
    v28 = *(char **)v26;
  v29 = *v28;
  if (*(char *)(v27 + 23) >= 0)
    v30 = (char *)v27;
  else
    v30 = *(char **)v27;
  if (v29 < 0
    || (v31 = *v30, v31 < 0)
    || ((v32 = v29,
         v33 = v31,
         v34 = (v31 ^ v32) & 0xFFFFFFDF,
         v32 >= 0x40)
      ? (v35 = v34 == 0)
      : (v35 = 1),
        v35 || v33 < 0x40))
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v32 + 5) & 0x1Fu) >= (((_BYTE)v33 + 5) & 0x1Fu))
  {
    return result;
  }
  v36 = *v4;
  *v4 = *a3;
  *a3 = v36;
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v37 = (*v4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v37 = result;
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v38 = (*v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    v38 = result;
  }
  if (*(char *)(v37 + 23) >= 0)
    v39 = (char *)v37;
  else
    v39 = *(char **)v37;
  v40 = *v39;
  if (*(char *)(v38 + 23) >= 0)
    v41 = (char *)v38;
  else
    v41 = *(char **)v38;
  if ((v40 & 0x80000000) == 0)
  {
    v42 = *v41;
    if ((v42 & 0x80000000) == 0)
    {
      v43 = v40;
      v44 = v42;
      v45 = (v42 ^ v43) & 0xFFFFFFDF;
      v46 = v43 < 0x40 || v45 == 0;
      if (!v46 && v44 >= 0x40)
      {
        v47 = ((_BYTE)v43 + 5) & 0x1F;
        v48 = ((_BYTE)v44 + 5) & 0x1F;
        goto LABEL_104;
      }
    }
  }
  result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
  if ((result & 1) != 0)
    goto LABEL_105;
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t EmptyString;
  char *v40;
  int v41;
  char *v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v6 = (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)1);
        v6 = result;
      }
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      if (*(char *)(v6 + 23) >= 0)
        v40 = (char *)v6;
      else
        v40 = *(char **)v6;
      v41 = *v40;
      if (*(char *)(EmptyString + 23) >= 0)
        v42 = (char *)EmptyString;
      else
        v42 = *(char **)EmptyString;
      if ((v41 & 0x80000000) == 0)
      {
        v43 = *v42;
        if ((v43 & 0x80000000) == 0)
        {
          v44 = v41;
          v45 = v43;
          v46 = (v43 ^ v44) & 0xFFFFFFDF;
          v47 = v44 < 0x40 || v46 == 0;
          if (!v47 && v45 >= 0x40)
          {
            if ((((_BYTE)v44 + 5) & 0x1Fu) >= (((_BYTE)v45 + 5) & 0x1Fu))
              return 1;
            goto LABEL_83;
          }
        }
      }
      if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl())
      {
LABEL_83:
        v48 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v48;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v7 = a1 + 2;
      v8 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      while (2)
      {
        if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v11 = (*v9 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
          v11 = v8;
        }
        if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v12 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
          v12 = v8;
        }
        if (*(char *)(v11 + 23) >= 0)
          v13 = (char *)v11;
        else
          v13 = *(char **)v11;
        v14 = *v13;
        if (*(char *)(v12 + 23) >= 0)
          v15 = (char *)v12;
        else
          v15 = *(char **)v12;
        if (v14 < 0
          || (v16 = *v15, v16 < 0)
          || ((v17 = v14,
               v18 = v16,
               v19 = (v16 ^ v17) & 0xFFFFFFDF,
               v17 >= 0x40)
            ? (v20 = v19 == 0)
            : (v20 = 1),
              v20 || v18 < 0x40))
        {
          v8 = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
          if (!(_DWORD)v8)
            goto LABEL_58;
        }
        else if ((((_BYTE)v17 + 5) & 0x1Fu) >= (((_BYTE)v18 + 5) & 0x1Fu))
        {
          goto LABEL_58;
        }
        v21 = *v9;
        *v9 = 0;
        v22 = v9;
        while (1)
        {
          v23 = v7;
          if ((*v22 & 7) != 0)
          {
            v24 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
            do
              v25 = __ldxr(v24);
            while (__stlxr(v25 - 2, v24));
          }
          *v22 = *v7;
          *v7 = 0;
          if (v7 == a1)
            break;
          v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 16;
          if ((v21 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
            v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
            v26 = v8;
          }
          --v7;
          if ((*(v23 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v27 = (*(v23 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
            v27 = v8;
          }
          if (*(char *)(v26 + 23) >= 0)
            v28 = (char *)v26;
          else
            v28 = *(char **)v26;
          v29 = *v28;
          if (*(char *)(v27 + 23) >= 0)
            v30 = (char *)v27;
          else
            v30 = *(char **)v27;
          if (v29 < 0
            || (v31 = *v30, v31 < 0)
            || ((v32 = v29,
                 v33 = v31,
                 v34 = (v31 ^ v32) & 0xFFFFFFDF,
                 v32 >= 0x40)
              ? (v35 = v34 == 0)
              : (v35 = 1),
                v35 || v33 < 0x40))
          {
            v8 = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
            v22 = v23;
            if ((v8 & 1) == 0)
              goto LABEL_54;
          }
          else
          {
            v36 = ((_BYTE)v33 + 5) & 0x1F;
            v22 = v23;
            if ((((_BYTE)v32 + 5) & 0x1Fu) >= v36)
              goto LABEL_54;
          }
        }
        v23 = a1;
LABEL_54:
        if ((*v23 & 7) != 0)
        {
          v37 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
        *v23 = v21;
        if (++v10 != 8)
        {
LABEL_58:
          v7 = v9++;
          if (v9 == a2)
            return 1;
          continue;
        }
        return v9 + 1 == a2;
      }
  }
}

pxrInternal__aapl__pxrReserved__::TfToken *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::TfToken *result;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int v23;
  char *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  int v34;
  char *v35;
  int v36;
  uint64_t v37;

  result = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>((uint64_t)a1, a2, a3);
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v9 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v9 = (unint64_t)result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v10 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v10 = (unint64_t)result;
  }
  if (*(char *)(v9 + 23) >= 0)
    v11 = (char *)v9;
  else
    v11 = *(char **)v9;
  v12 = *v11;
  if (*(char *)(v10 + 23) >= 0)
    v13 = (char *)v10;
  else
    v13 = *(char **)v10;
  if (v12 < 0
    || (v14 = *v13, v14 < 0)
    || ((v15 = v12,
         v16 = v14,
         v17 = (v14 ^ v15) & 0xFFFFFFDF,
         v15 >= 0x40)
      ? (v18 = v17 == 0)
      : (v18 = 1),
        v18 || v16 < 0x40))
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v15 + 5) & 0x1Fu) >= (((_BYTE)v16 + 5) & 0x1Fu))
  {
    return result;
  }
  v19 = *a3;
  *a3 = *a4;
  *a4 = v19;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v20 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v20 = (unint64_t)result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v21 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v21 = (unint64_t)result;
  }
  if (*(char *)(v20 + 23) >= 0)
    v22 = (char *)v20;
  else
    v22 = *(char **)v20;
  v23 = *v22;
  if (*(char *)(v21 + 23) >= 0)
    v24 = (char *)v21;
  else
    v24 = *(char **)v21;
  if (v23 < 0
    || (v25 = *v24, v25 < 0)
    || ((v26 = v23,
         v27 = v25,
         v28 = (v25 ^ v26) & 0xFFFFFFDF,
         v26 >= 0x40)
      ? (v29 = v28 == 0)
      : (v29 = 1),
        v29 || v27 < 0x40))
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v26 + 5) & 0x1Fu) >= (((_BYTE)v27 + 5) & 0x1Fu))
  {
    return result;
  }
  v30 = *a2;
  *a2 = *a3;
  *a3 = v30;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v31 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v31 = (unint64_t)result;
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v32 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v32 = (unint64_t)result;
  }
  if (*(char *)(v31 + 23) >= 0)
    v33 = (char *)v31;
  else
    v33 = *(char **)v31;
  v34 = *v33;
  if (*(char *)(v32 + 23) >= 0)
    v35 = (char *)v32;
  else
    v35 = *(char **)v32;
  if (v34 < 0
    || (v36 = *v35, v36 < 0)
    || v34 < 0x40u
    || ((v36 ^ v34) & 0xFFFFFFDF) == 0
    || v36 < 0x40u)
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v34 + 5) & 0x1Fu) >= (((_BYTE)v36 + 5) & 0x1Fu))
  {
    return result;
  }
  v37 = *a1;
  *a1 = *a2;
  *a2 = v37;
  return result;
}

pxrInternal__aapl__pxrReserved__::TfToken *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  pxrInternal__aapl__pxrReserved__::TfToken *result;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  int v43;
  char *v44;
  int v45;
  uint64_t v46;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan &,pxrInternal__aapl__pxrReserved__::TfToken *>(a1, a2, a3, a4);
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v11 = (*a5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v11 = (unint64_t)result;
  }
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v12 = (unint64_t)result;
  }
  if (*(char *)(v11 + 23) >= 0)
    v13 = (char *)v11;
  else
    v13 = *(char **)v11;
  v14 = *v13;
  if (*(char *)(v12 + 23) >= 0)
    v15 = (char *)v12;
  else
    v15 = *(char **)v12;
  if (v14 < 0
    || (v16 = *v15, v16 < 0)
    || ((v17 = v14,
         v18 = v16,
         v19 = (v16 ^ v17) & 0xFFFFFFDF,
         v17 >= 0x40)
      ? (v20 = v19 == 0)
      : (v20 = 1),
        v20 || v18 < 0x40))
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v17 + 5) & 0x1Fu) >= (((_BYTE)v18 + 5) & 0x1Fu))
  {
    return result;
  }
  v21 = *a4;
  *a4 = *a5;
  *a5 = v21;
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v22 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v22 = (unint64_t)result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v23 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v23 = (unint64_t)result;
  }
  if (*(char *)(v22 + 23) >= 0)
    v24 = (char *)v22;
  else
    v24 = *(char **)v22;
  v25 = *v24;
  if (*(char *)(v23 + 23) >= 0)
    v26 = (char *)v23;
  else
    v26 = *(char **)v23;
  if (v25 < 0
    || (v27 = *v26, v27 < 0)
    || ((v28 = v25,
         v29 = v27,
         v30 = (v27 ^ v28) & 0xFFFFFFDF,
         v28 >= 0x40)
      ? (v31 = v30 == 0)
      : (v31 = 1),
        v31 || v29 < 0x40))
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v28 + 5) & 0x1Fu) >= (((_BYTE)v29 + 5) & 0x1Fu))
  {
    return result;
  }
  v32 = *a3;
  *a3 = *a4;
  *a4 = v32;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v33 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v33 = (unint64_t)result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v34 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v34 = (unint64_t)result;
  }
  if (*(char *)(v33 + 23) >= 0)
    v35 = (char *)v33;
  else
    v35 = *(char **)v33;
  v36 = *v35;
  if (*(char *)(v34 + 23) >= 0)
    v37 = (char *)v34;
  else
    v37 = *(char **)v34;
  if (v36 < 0
    || (v38 = *v37, v38 < 0)
    || v36 < 0x40u
    || ((v38 ^ v36) & 0xFFFFFFDF) == 0
    || v38 < 0x40u)
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v36 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu))
  {
    return result;
  }
  v39 = *a2;
  *a2 = *a3;
  *a3 = v39;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v40 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v40 = (unint64_t)result;
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v41 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    v41 = (unint64_t)result;
  }
  if (*(char *)(v40 + 23) >= 0)
    v42 = (char *)v40;
  else
    v42 = *(char **)v40;
  v43 = *v42;
  if (*(char *)(v41 + 23) >= 0)
    v44 = (char *)v41;
  else
    v44 = *(char **)v41;
  if (v43 < 0
    || (v45 = *v44, v45 < 0)
    || v43 < 0x40u
    || ((v45 ^ v43) & 0xFFFFFFDF) == 0
    || v45 < 0x40u)
  {
    result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl();
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v43 + 5) & 0x1Fu) >= (((_BYTE)v45 + 5) & 0x1Fu))
  {
    return result;
  }
  v46 = *a1;
  *a1 = *a2;
  *a2 = v46;
  return result;
}

uint64_t RIOPxrUsdEditTargetGetTypeID()
{
  if (RIOPxrUsdEditTargetGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrUsdEditTargetGetTypeID::onceToken, &__block_literal_global_26);
  return RIOPxrUsdEditTargetGetTypeID::typeID;
}

uint64_t RIOPxrUsdEditTargetCreateEmpty()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[8];

  v8[7] = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B1CF0](&v6);
  v0 = RIOPxrUsdEditTargetCreate<pxrInternal__aapl__pxrReserved__::UsdEditTarget>((uint64_t)&v6);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)v8);
  v1 = v7;
  if (v7)
  {
    v2 = (unsigned int *)(v7 + 8);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return v0;
}

void sub_230101AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::~UsdEditTarget((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)&a9);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdEditTargetCreateWithLayer(uint64_t a1)
{
  uint64_t v1;
  uint64_t Instance;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  double v11[2];
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[56];
  uint64_t v15;

  v1 = a1;
  v15 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v11, 0.0, 1.0);
    MEMORY[0x2348B1CE4](&v12, v1 + 16, v11[0], v11[1]);
    if (RIOPxrUsdEditTargetGetTypeID::onceToken != -1)
      dispatch_once(&RIOPxrUsdEditTargetGetTypeID::onceToken, &__block_literal_global_26);
    Instance = _CFRuntimeCreateInstance();
    v1 = Instance;
    if (Instance)
    {
      v3 = v13;
      *(_QWORD *)(Instance + 16) = v12;
      *(_QWORD *)(Instance + 24) = v3;
      if (v3)
      {
        v4 = (unsigned int *)(v3 + 8);
        do
          v5 = __ldxr(v4);
        while (__stxr(v5 + 1, v4));
      }
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::_Data((_DWORD *)(Instance + 32), (uint64_t)v14);
      *(_OWORD *)(v1 + 72) = *(_OWORD *)&v14[40];
    }
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)v14);
    v6 = v13;
    if (v13)
    {
      v7 = (unsigned int *)(v13 + 8);
      do
      {
        v8 = __ldxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return v1;
}

void sub_230101C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  va_list va;

  va_start(va, a3);
  v5 = *(unsigned int **)(v3 + 24);
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::~UsdEditTarget((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdEditTargetIsNull(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v9[7] = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 1;
  MEMORY[0x2348B1CF0](&v7);
  v1 = pxrInternal__aapl__pxrReserved__::UsdEditTarget::operator==();
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)v9);
  v2 = v8;
  if (v8)
  {
    v3 = (unsigned int *)(v8 + 8);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return v1;
}

void sub_230101D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)(v10 + 16));
  if (a10)
  {
    v12 = a10 + 2;
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(a1);
}

BOOL RIOPxrUsdEditTargetIsValid(_BOOL8 result)
{
  uint64_t (*v1)(uint64_t *);
  char v2;

  if (result)
  {
    v1 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator pxrInternal__aapl__pxrReserved__::SdfLayer* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::*)(void)const((_QWORD *)(result + 16));
    return (v2 & 1 | (unint64_t)v1) != 0;
  }
  return result;
}

uint64_t RIOPxrUsdEditTargetGetLayer(uint64_t result)
{
  if (result)
    return RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>((uint64_t *)(result + 16));
  return result;
}

uint64_t RIOPxrUsdEditTargetCopyLayer(uint64_t result)
{
  if (result)
    return RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>((uint64_t *)(result + 16));
  return result;
}

uint64_t RIOPxrUsdEditTargetCopyPrimSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;

  v2 = 0;
  if (a1 && a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPrimSpecForScenePath((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4) & 1) != 0)
      v2 = 0;
    else
      v2 = RIOPxrSdfPrimSpecCreate<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec> &>(&v4);
    MEMORY[0x2348B2704](&v4);
  }
  return v2;
}

uint64_t RIOPxrSdfPrimSpecCreate<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec> &>(unsigned int **a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;

  if (RIOPxrSdfPrimSpecGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfPrimSpecGetTypeID::onceToken, &__block_literal_global_3);
  result = _CFRuntimeCreateInstance();
  if (result)
  {
    v3 = *a1;
    *(_QWORD *)(result + 16) = *a1;
    if (v3)
    {
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
    }
  }
  return result;
}

unsigned int *_RIOPxrUsdEditTargetCFFinalize(_QWORD *a1)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)(a1 + 4));
  result = (unsigned int *)a1[3];
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL _RIOPxrUsdEditTargetCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrUsdEditTargetCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrUsdEditTargetCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdEditTarget %p>"), a1);
}

CFStringRef _RIOPxrUsdEditTargetCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrUsdEditTarget %p>"), a1);
}

uint64_t realityio::UsdPrimDelta::UsdPrimDelta(uint64_t a1, _DWORD *a2, int a3, uint64_t a4)
{
  _OWORD v9[2];
  int v10;

  *(_QWORD *)a1 = &off_24FDF6CC0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a2 + 1);
  *(_BYTE *)(a1 + 16) = a3;
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>::map[abi:ne180100]((uint64_t *)(a1 + 24), a4);
  memset(v9, 0, sizeof(v9));
  v10 = 1065353216;
  *(_QWORD *)(a1 + 48) = &off_24FDF4548;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(a1 + 56, (uint64_t)v9);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v9);
  if (a3)
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_unique<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const*>((uint64_t **)(a1 + 24), 0, 0);
  return a1;
}

void sub_230102078(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 48) = v5;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v4);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(v3, *(_QWORD **)(v2 + 32));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

void realityio::UsdPrimDelta::setPropertyDeltaForPropertyName(realityio::UsdPrimDelta *this, const realityio::UsdPropertyDelta *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  _QWORD *v8;
  uint64_t **v9;
  uint64_t **v10;
  int v11;
  _QWORD *v12;
  std::string::size_type *v13;
  std::string::size_type v14;
  uint64_t **v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::TfToken *v20;
  uint64_t EmptyString;
  __int128 v22;
  std::string::size_type v23;
  unsigned int *v24;
  unsigned int v25;
  std::string v26;
  std::string __str;
  uint64_t v28;

  v9 = (uint64_t **)((char *)this + 32);
  v8 = (_QWORD *)*((_QWORD *)this + 4);
  if (v8)
  {
    v10 = (uint64_t **)((char *)this + 32);
    do
    {
      v11 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)this + 40, v8 + 4, (uint64_t *)a3);
      v12 = v8 + 1;
      if (!v11)
      {
        v12 = v8;
        v10 = (uint64_t **)v8;
      }
      v8 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v10 != v9
      && !std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)this + 40, (uint64_t *)a3, (uint64_t *)v10 + 4))
    {
      v20 = (pxrInternal__aapl__pxrReserved__::TfToken *)realityio::UsdPropertyDelta::updateWithPropertyDelta(v10 + 5, (uint64_t)a2);
      if (!a4)
        return;
      goto LABEL_18;
    }
  }
  v13 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)(v9 - 1), &v28, (uint64_t *)a3);
  v14 = *v13;
  if (!*v13)
  {
    v15 = (uint64_t **)v13;
    v16 = operator new(0x68uLL);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
    __str.__r_.__value_.__s.__data_[16] = 0;
    v17 = *(_QWORD *)a3;
    v16[4] = *(_QWORD *)a3;
    if ((v17 & 7) != 0)
    {
      v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 2, v18));
      if ((v19 & 1) == 0)
        v16[4] &= 0xFFFFFFFFFFFFFFF8;
    }
    v26.__r_.__value_.__r.__words[0] = 0;
    realityio::UsdPropertyDelta::UsdPropertyDelta((realityio::UsdPropertyDelta *)(v16 + 5), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26);
    __str.__r_.__value_.__s.__data_[16] = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v9 - 1, v28, v15, (uint64_t *)__str.__r_.__value_.__l.__data_);
    v14 = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>>>>::reset[abi:ne180100]((uint64_t)&__str, 0);
  }
  v20 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::operator=((_QWORD *)(v14 + 48), (_QWORD *)a2 + 1);
  if ((const realityio::UsdPropertyDelta *)(v14 + 40) != a2)
  {
    *(_DWORD *)(v14 + 96) = *((_DWORD *)a2 + 14);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>((_QWORD *)(v14 + 64), *((_QWORD **)a2 + 5), 0);
  }
  if (a4)
  {
LABEL_18:
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) + 16;
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v20);
    if (*(char *)(EmptyString + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
    }
    else
    {
      v22 = *(_OWORD *)EmptyString;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(EmptyString + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v22;
    }
    v23 = std::string::rfind(&__str, 58, 0xFFFFFFFFFFFFFFFFLL);
    if (v23 != -1)
    {
      std::string::basic_string(&v26, &__str, 0, v23, (std::allocator<char> *)&v28);
      MEMORY[0x2348B2764](&v28, &v26);
      realityio::UsdPrimDelta::setPropertyDeltaForPropertyName(this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, 1);
      if ((v28 & 7) != 0)
      {
        v24 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_230102318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;

  v24 = *(_QWORD *)(v22 + 32);
  if ((v24 & 7) != 0)
  {
    v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v26 = __ldxr(v25);
    while (__stlxr(v26 - 2, v25));
  }
  std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>>>>::reset[abi:ne180100]((uint64_t)&a16, 0);
  _Unwind_Resume(a1);
}

void realityio::UsdPrimDelta::updateWithPrimDelta(uint64_t **this, const realityio::UsdPrimDelta *a2)
{
  _QWORD *i;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;
  _OWORD v10[2];
  int v11;
  void (**v12)(realityio::UsdMetadataDelta *__hidden);
  _QWORD *v13[4];
  int v14;

  if (this[1] == *((uint64_t **)a2 + 1))
  {
    if (*((_BYTE *)a2 + 16))
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_unique<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const*>(this + 3, 0, 0);
      memset(v10, 0, sizeof(v10));
      v11 = 1065353216;
      v12 = &off_24FDF4548;
      std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)v13, (uint64_t)v10);
      if (this + 6 != (uint64_t **)&v12)
      {
        *((_DWORD *)this + 22) = v14;
        std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>(this + 7, v13[2], 0);
      }
      v12 = &off_24FDF4548;
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v13);
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v10);
      *((_BYTE *)this + 16) = 1;
    }
    else
    {
      for (i = (_QWORD *)*((_QWORD *)a2 + 9); i; i = (_QWORD *)*i)
        std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)(this + 7), i + 2, i + 2);
      v5 = (char *)*((_QWORD *)a2 + 3);
      v6 = (char *)a2 + 32;
      if (v5 != v6)
      {
        do
        {
          realityio::UsdPrimDelta::setPropertyDeltaForPropertyName((realityio::UsdPrimDelta *)this, (const realityio::UsdPropertyDelta *)(v5 + 40), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 32), 0);
          v7 = (char *)*((_QWORD *)v5 + 1);
          if (v7)
          {
            do
            {
              v8 = v7;
              v7 = *(char **)v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              v8 = (char *)*((_QWORD *)v5 + 2);
              v9 = *(_QWORD *)v8 == (_QWORD)v5;
              v5 = v8;
            }
            while (!v9);
          }
          v5 = v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_2301024F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v9);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void **realityio::UsdPrimDelta::description@<X0>(realityio::UsdPrimDelta *this@<X0>, CFStringRef *a2@<X8>)
{
  const char *v4;
  __CFArray *Mutable;
  realityio::UsdPrimDelta *v6;
  const CFArrayCallBacks *v7;
  __CFArray *v8;
  const char *v9;
  CFStringRef v10;
  realityio::UsdPrimDelta *v11;
  realityio::UsdPrimDelta *v12;
  BOOL v13;
  CFStringRef v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t Text;
  CFTypeRef cf;
  void *v20;
  void *value;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  cf = 0;
  v22[0] = &off_24FDF6D00;
  v23 = v22;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = (realityio::UsdPrimDelta *)*((_QWORD *)this + 3);
  if (v6 != (realityio::UsdPrimDelta *)((char *)this + 32))
  {
    v7 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
    do
    {
      v8 = CFArrayCreateMutable(0, 0, v7);
      if (!v23)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(void **__return_ptr, _QWORD *, _QWORD *))(*v23 + 48))(&value, v23, (_QWORD *)v6 + 4);
      CFArrayAppendValue(v8, value);
      (*(void (**)(void **__return_ptr, _QWORD *))(*((_QWORD *)v6 + 5) + 16))(&v20, (_QWORD *)v6 + 5);
      CFArrayAppendValue(v8, v20);
      v10 = realityio::joinAsCFStringRef(v8, (const __CFArray *)": ", v9);
      CFRelease(v8);
      CFArrayAppendValue(Mutable, v10);
      CFRelease(v10);
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v20);
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
      v11 = (realityio::UsdPrimDelta *)*((_QWORD *)v6 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(realityio::UsdPrimDelta **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (realityio::UsdPrimDelta *)*((_QWORD *)v6 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v13);
      }
      v6 = v12;
    }
    while (v12 != (realityio::UsdPrimDelta *)((char *)this + 32));
  }
  v14 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v4);
  CFRelease(Mutable);
  cf = v14;
  v15 = v23;
  if (v23 == v22)
  {
    v16 = 4;
    v15 = v22;
    goto LABEL_14;
  }
  if (v23)
  {
    v16 = 5;
LABEL_14:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  *a2 = 0;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((realityio::UsdPrimDelta *)((char *)this + 8));
  realityio::UsdMetadataDelta::description((realityio::UsdPrimDelta *)((char *)this + 48), (CFStringRef *)&value);
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<UsdPrimDelta: %p { primPath: %s, metadata: %@, property deltas: (%lu) [ %@ ] }>"), this, Text, value, *((_QWORD *)this + 5), cf);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_230102770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void **v7;
  const void *v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, const void *);
  v11 = va_arg(va1, _QWORD);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va1);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v7);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_unique<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const*>(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v10 = result;
    v11 = v8;
    v12 = v8;
    if (v8)
    {
      v11 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__node_assign_unique(v5, a2, v8);
        if ((v9 & 1) != 0)
        {
          v8 = v11;
          v12 = v11;
          if (!v11)
          {
            a2 += 9;
            break;
          }
          v11 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v11);
        }
        else
        {
          v8 = v12;
        }
        a2 += 9;
        if (!v8)
          break;
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    result = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>(v5, a2, a2);
    a2 += 9;
  }
  return result;
}

void sub_23010291C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__node_assign_unique(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v9;
  _QWORD v10[2];

  v6 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v9, a2);
  if (*v6)
    return *v6;
  v7 = v6;
  v10[0] = a3 + 4;
  v10[1] = a3 + 5;
  std::pair<pxrInternal__aapl__pxrReserved__::TfToken &,realityio::UsdPropertyDelta &>::operator=[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta,(void *)0>((uint64_t)v10, (uint64_t)a2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v9, v7, a3);
  return a3;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::UsdPropertyDelta> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::__function::__func<realityio::UsdPrimDelta::description(void)::$_0,std::allocator<realityio::UsdPrimDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::UsdPrimDelta::description(void)::$_0,std::allocator<realityio::UsdPrimDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF6D00;
  return result;
}

void std::__function::__func<realityio::UsdPrimDelta::description(void)::$_0,std::allocator<realityio::UsdPrimDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF6D00;
}

void std::__function::__func<realityio::UsdPrimDelta::description(void)::$_0,std::allocator<realityio::UsdPrimDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, _QWORD *a2@<X1>, CFStringRef *a3@<X8>)
{
  unint64_t EmptyString;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  realityio::asWrappedCFStringRef(EmptyString, a3);
}

uint64_t std::__function::__func<realityio::UsdPrimDelta::description(void)::$_0,std::allocator<realityio::UsdPrimDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::UsdPrimDelta::description(void)::$_0,std::allocator<realityio::UsdPrimDelta::description(void)::$_0>,realityio::WrappedCFRef<__CFString const*> ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

uint64_t shouldForceDisableSubdsIfHighGeometricComplexity(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v1;
  pxrInternal__aapl__pxrReserved__ *PseudoRoot;
  uint64_t UsdPrimAllPrimsPredicate;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v11;
  const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v12;
  uint64_t FaceCount;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[8];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  _BYTE v36[8];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v48;
  int v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v53;
  int v54;
  int v55;
  __int128 v56;
  uint64_t v57;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  PseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v1);
  UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(PseudoRoot);
  v5 = *(_QWORD *)UsdPrimAllPrimsPredicate;
  v4 = *(_QWORD *)(UsdPrimAllPrimsPredicate + 8);
  v6 = *(_QWORD *)(UsdPrimAllPrimsPredicate + 16);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  v44 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v5;
  v45 = v4;
  *(_QWORD *)&v46 = v6;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)v26, (uint64_t *)&v44, (uint64_t)&v48);
  if ((v29 & 7) != 0)
  {
    v7 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  if (v27)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v27);
  v44 = v48;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v45, &v49);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v45 + 1, &v50);
  v46 = v51;
  v47 = v52;
  v40 = v53;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v41, &v54);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v41 + 1, &v55);
  v9 = 0;
  v42 = v56;
  v43 = v57;
  v10 = MEMORY[0x24BEE9CF0] + 16;
  while (v44 != v40
       || v45 != v41
       || (pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v46, (uint64_t)&v42) & 1) == 0)
  {
    v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v44, (uint64_t)v36);
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v11);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v35[0] = v10;
      if (!realityio::isCatmullClarkSurface((realityio *)v35, v12))
        goto LABEL_37;
      pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v35);
      if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v31) & 1) != 0)
      {
        FaceCount = pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceCount();
        realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v31, (uint64_t)v26);
        v9 += FaceCount;
        if (v26[0])
        {
          v14 = v27;
          if (v27)
          {
            v15 = 0;
            do
            {
              pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v27);
              v16 = *(int *)(v30 + 4 * v15);
              if (v16 <= 1 || v16 == 4)
                v18 = 0;
              else
                v18 = v16 - 1;
              v9 += v18;
              ++v15;
            }
            while (v14 != v15);
          }
        }
        v19 = v9 > 0x88B7;
        realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v26);
      }
      else
      {
        v19 = 1;
      }
      if ((v34 & 7) != 0)
      {
        v21 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
      if (v32)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
      if (v19)
        v20 = 1;
      else
LABEL_37:
        v20 = 0;
      MEMORY[0x2348B1AF8](v35);
    }
    else
    {
      v20 = 3;
    }
    if ((v39 & 7) != 0)
    {
      v23 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
    if (v37)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v37);
    if (v20 != 3 && v20)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
      return 1;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v44);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
  return 0;
}

void sub_230102F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneUpdate::makeFromTrackedStageState(void **this@<X0>, realityio::UsdStageStateTracker *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  pxrInternal__aapl__pxrReserved__::UsdStage *v8;
  double v9;
  double v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  int isDetailedResyncEnabled;
  unsigned int **v16;
  _QWORD *v17;
  unsigned int *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  _QWORD *v39;
  unsigned int *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int *v52;
  _QWORD *v53[2];
  unsigned int *v54;
  unsigned int *v55[3];
  unsigned int *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int *v61;
  uint8_t buf[16];
  void **v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD **v66;
  _QWORD *v67[2];
  void *__p[6];
  _QWORD **v69;
  _QWORD *v70[2];
  char **v71;
  char *v72[3];
  unsigned int *v73;
  void **v74;
  __int128 *v75;
  uint64_t v76;
  _QWORD v77[11];

  __p[0] = this[1];
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)__p);
  v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)__p);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)__p);
  __p[0] = this[1];
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)__p);
  v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)__p);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v8);
  v10 = v9;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)__p);
  if (v10 == 0.0)
  {
    realityio::UsdStageStateTracker::getAndCleanAccumulatedStageDelta((realityio::UsdStageStateTracker *)this, v77);
    memset(__p, 0, 24);
    v75 = 0;
    v76 = 0;
    v74 = (void **)&v75;
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous();
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v74, v75);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)__p, (uint64_t *)v55);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open();
    v11 = __p[1];
    if (__p[1])
    {
      v12 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
    }
    v73 = (unsigned int *)this[1];
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v73);
    v16 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v73);
    if (isDetailedResyncEnabled)
    {
      v17 = *(_QWORD **)(*((_QWORD *)a2 + 2) + 24);
      v18 = (unsigned int *)v17[3];
      v17 += 3;
      *v17 = v52;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v52);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)v17, v18);
    }
    memset(__p, 0, sizeof(__p));
    v69 = v70;
    v70[0] = 0;
    v72[0] = 0;
    v72[1] = 0;
    v70[1] = 0;
    v71 = v72;
    v75 = 0;
    v76 = 0;
    v74 = (void **)&v75;
    v67[0] = 0;
    v67[1] = 0;
    v65 = 0;
    v66 = v67;
    v63 = (void **)&v64;
    v64 = 0;
    v19 = *(NSObject **)realityio::logObjects((realityio *)v16);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_22FF26000, v19, OS_LOG_TYPE_ERROR, "Invalid Stage.timeCodesPerSecond == 0 - No conversion performed", buf, 2u);
    }
    do
      v20 = __ldaxr(&realityio::LiveSceneUpdate::makeFromTrackedStageState(realityio::UsdStageStateTracker &,realityio::ImportSession const&)::nextUniqueIdentifier);
    while (__stlxr(v20 + 1, &realityio::LiveSceneUpdate::makeFromTrackedStageState(realityio::UsdStageStateTracker &,realityio::ImportSession const&)::nextUniqueIdentifier));
    realityio::LiveSceneUpdate::LiveSceneUpdate(a3, &v52, (uint64_t)v77, (uint64_t)__p, &v74, &v66, &v63, v20, 0);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy((uint64_t)&v63, v64);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)&v66, v67[0]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)&v74, v75);
    std::__tree<std::string>::destroy((uint64_t)&v71, v72[0]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&v69, v70[0]);
    v74 = &__p[3];
    std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](&v74);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v52);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(v55);
LABEL_54:
    realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)v77);
    return;
  }
  if (*((_DWORD *)a2 + 15))
  {
    realityio::UsdStageStateTracker::getAndCleanAccumulatedStageDelta((realityio::UsdStageStateTracker *)this, v77);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v7);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open();
    v21 = __p[1];
    if (__p[1])
    {
      v22 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v23 = __ldxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
        (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
    }
    if (*((_BYTE *)a2 + 273))
    {
      v50 = v55[0];
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v50);
      v25 = shouldForceDisableSubdsIfHighGeometricComplexity((uint64_t *)&v50) ^ 1;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v50);
    }
    else
    {
      v25 = 0;
    }
    v49 = v55[0];
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v49);
    realityio::internal::PrimToEntityMap::makePrimToEntityMap((uint64_t *)&v49, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v49);
    v48 = v55[0];
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v48);
    realityio::internal::TexturePrimToMaterialPrimMap::makeTexturePrimToMaterialMap((uint64_t *)&v48, &v74);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v48);
    v42 = *((_QWORD *)a2 + 2);
    v47 = v55[0];
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v47);
    realityio::makeSdfAssetPathToTextureImportSettingsMapWithSpecifiedSemantics((const std::string *)(v42 + 328), (uint64_t *)&v47, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v74, &v66);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v47);
    if (v25)
    {
      v46 = v55[0];
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v46);
      realityio::internal::makeMaterialPrimToBoundSurfaceUsageMap((uint64_t *)&v46, (uint64_t)&v63);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v46);
    }
    else
    {
      v64 = 0;
      v65 = 0;
      v63 = (void **)&v64;
    }
    do
      v43 = __ldaxr(&realityio::LiveSceneUpdate::makeFromTrackedStageState(realityio::UsdStageStateTracker &,realityio::ImportSession const&)::nextUniqueIdentifier);
    while (__stlxr(v43 + 1, &realityio::LiveSceneUpdate::makeFromTrackedStageState(realityio::UsdStageStateTracker &,realityio::ImportSession const&)::nextUniqueIdentifier));
    realityio::LiveSceneUpdate::LiveSceneUpdate(a3, v55, (uint64_t)v77, (uint64_t)__p, &v74, &v66, &v63, v43, v25);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy((uint64_t)&v63, v64);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)&v66, v67[0]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)&v74, v75);
    std::__tree<std::string>::destroy((uint64_t)&v71, v72[0]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&v69, v70[0]);
    v74 = &__p[3];
    std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](&v74);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v55);
    goto LABEL_54;
  }
  std::chrono::steady_clock::now();
  pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(v7);
  realityio::MultipleLayerMutex::MultipleLayerMutex<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>>((uint64_t *)&v66, (__int128 *)v74, v75);
  realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)&v66);
  pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(v7);
  realityio::UsdStageStateTracker::getAndCleanAccumulatedStageDelta((realityio::UsdStageStateTracker *)this, v77);
  memset(__p, 0, 24);
  v64 = 0;
  v65 = 0;
  v63 = (void **)&v64;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous();
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v63, v64);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v61);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent();
  v26 = __p[1];
  if (__p[1])
  {
    v27 = (unsigned int *)((char *)__p[1] + 8);
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      (*(void (**)(void *))(*(_QWORD *)v26 + 8))(v26);
  }
  realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)&v66);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)__p, (uint64_t *)buf);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v63, (uint64_t *)&v61);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  v30 = v64;
  if (v64)
  {
    v31 = (unsigned int *)(v64 + 1);
    do
    {
      v32 = __ldxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
      (*(void (**)(_QWORD *))(*v30 + 8))(v30);
  }
  v34 = __p[1];
  if (__p[1])
  {
    v35 = (unsigned int *)((char *)__p[1] + 8);
    do
    {
      v36 = __ldxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
      (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  }
  v59 = (unsigned int *)this[1];
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v59);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v59);
  if (v38)
  {
    v39 = *(_QWORD **)(*((_QWORD *)a2 + 2) + 24);
    v40 = (unsigned int *)v39[3];
    v39 += 3;
    *v39 = v60;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v60);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)v39, v40);
  }
  if (*((_BYTE *)a2 + 273))
  {
    v58 = v60;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v58);
    v41 = shouldForceDisableSubdsIfHighGeometricComplexity((uint64_t *)&v58) ^ 1;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v58);
  }
  else
  {
    v41 = 0;
  }
  v57 = v60;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v57);
  realityio::internal::PrimToEntityMap::makePrimToEntityMap((uint64_t *)&v57, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v57);
  v56 = v60;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v56);
  realityio::internal::TexturePrimToMaterialPrimMap::makeTexturePrimToMaterialMap((uint64_t *)&v56, &v63);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v56);
  v44 = *((_QWORD *)a2 + 2);
  v54 = v60;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v54);
  realityio::makeSdfAssetPathToTextureImportSettingsMapWithSpecifiedSemantics((const std::string *)(v44 + 328), (uint64_t *)&v54, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, v55);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v54);
  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  if (v41)
  {
    v51 = v60;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v51);
    realityio::internal::makeMaterialPrimToBoundSurfaceUsageMap((uint64_t *)&v51, (uint64_t)&v52);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v51);
  }
  else
  {
    v53[0] = 0;
    v53[1] = 0;
    v52 = (unsigned int *)v53;
  }
  do
    v45 = __ldaxr(&realityio::LiveSceneUpdate::makeFromTrackedStageState(realityio::UsdStageStateTracker &,realityio::ImportSession const&)::nextUniqueIdentifier);
  while (__stlxr(v45 + 1, &realityio::LiveSceneUpdate::makeFromTrackedStageState(realityio::UsdStageStateTracker &,realityio::ImportSession const&)::nextUniqueIdentifier));
  realityio::LiveSceneUpdate::LiveSceneUpdate(a3, &v60, (uint64_t)v77, (uint64_t)__p, &v63, v55, &v52, v45, v41);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy((uint64_t)&v52, v53[0]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)v55, (_QWORD *)v55[1]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)&v63, v64);
  std::__tree<std::string>::destroy((uint64_t)&v71, v72[0]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&v69, v70[0]);
  v63 = &__p[3];
  std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](&v63);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v60);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v61);
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)v77);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr((unsigned int **)buf);
  __p[0] = &v66;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v74;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_230103804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int16 a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned int *a27,unsigned int *a28,unsigned int *a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p)
{
  uint64_t v37;

  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a15);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)&a20, (_QWORD *)a21);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)&a31, (_QWORD *)a32);
  realityio::internal::PrimToEntityMap::~PrimToEntityMap((char **)&__p);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a27);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a28);
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)(v37 - 152));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a29);
  __p = &a34;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v37 - 176);
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::isDetailedResyncEnabled(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v1;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t ValueAtPath;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v1);
  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v2);
  v3 = v12;
  if (v12)
  {
    v4 = (unsigned int *)(v12 + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "realityio:enableDetailedResync");
  ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  v8 = ValueAtPath;
  if (v13 < 0)
  {
    operator delete(__p);
    if (!v8)
      goto LABEL_15;
  }
  else if (!ValueAtPath)
  {
    goto LABEL_15;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v8))
  {
    v9 = *(_QWORD *)(v8 + 8);
    if ((v9 & 4) != 0)
      v8 = (*(uint64_t (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v8);
    v8 = *(_BYTE *)v8 != 0;
  }
  else
  {
    v8 = 0;
  }
LABEL_15:
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v14, 0);
  return v8;
}

void sub_230103CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a15, 0);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfPath *realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(pxrInternal__aapl__pxrReserved__::SdfPath *result, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t *v9;
  pxrInternal__aapl__pxrReserved__::UsdStage *v10;
  pxrInternal__aapl__pxrReserved__::UsdStage *v11;
  pxrInternal__aapl__pxrReserved__::UsdStage *v12;
  pxrInternal__aapl__pxrReserved__::UsdStage *v13;
  unsigned int *v14;
  unsigned int *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD v21[2];
  int v22;

  if (*(_QWORD *)(a3 + 24))
  {
    v4 = result;
    memset(v21, 0, sizeof(v21));
    v22 = 1065353216;
    v19 = a3;
    v20 = v21;
    v17 = &v19;
    v18 = &v19;
    v5 = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(result);
    if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v20, v5))
    {
      v6 = *(_QWORD *)(v19 + 24);
      if (!v6)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v6 + 48))(v6, v5);
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>((uint64_t)v20, v5, v5);
    }
    v7 = (unsigned int *)*((_QWORD *)v4 + 25);
    v8 = (unsigned int *)((char *)v4 + 208);
    if (v7 != (unsigned int *)((char *)v4 + 208))
    {
      v9 = (uint64_t *)((char *)v4 + 8);
      do
      {
        if (*((_BYTE *)v7 + 56))
        {
          if (a2)
          {
            v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a2 + 8));
            realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(realityio::LiveSceneUpdate const*,std::function<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>)const::$_1::operator()(&v18, v7 + 8, v10);
          }
          v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v9);
          realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(realityio::LiveSceneUpdate const*,std::function<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>)const::$_1::operator()(&v18, v7 + 8, v11);
        }
        else
        {
          if (a2)
          {
            v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a2 + 8));
            realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(realityio::LiveSceneUpdate const*,std::function<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>)const::$_2::operator()(&v17, (uint64_t)(v7 + 10), v12);
          }
          v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v9);
          realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(realityio::LiveSceneUpdate const*,std::function<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>)const::$_2::operator()(&v17, (uint64_t)(v7 + 10), v13);
        }
        v14 = (unsigned int *)*((_QWORD *)v7 + 1);
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = *(unsigned int **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (unsigned int *)*((_QWORD *)v7 + 2);
            v16 = *(_QWORD *)v15 == (_QWORD)v7;
            v7 = v15;
          }
          while (!v16);
        }
        v7 = v15;
      }
      while (v15 != v8);
    }
    return (pxrInternal__aapl__pxrReserved__::SdfPath *)std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)v21);
  }
  return result;
}

void sub_230103E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(realityio::LiveSceneUpdate const*,std::function<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>)const::$_1::operator()(uint64_t **a1, unsigned int *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int *PrimPath;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::UsdObject *i;
  uint64_t *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__::UsdObject *v38;
  pxrInternal__aapl__pxrReserved__::UsdObject *v39;
  _BYTE v40[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  _BYTE v58[8];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v6 = *a1;
  if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((_QWORD *)(*a1)[1], a2))
  {
    v7 = *(_QWORD *)(*v6 + 24);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v7 + 48))(v7, a2);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v6[1], a2, a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v58) & 1) != 0)
  {
    v50 = 0uLL;
    LOBYTE(v51) = 0;
    v8 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v50, 0);
    v47 = *(_OWORD *)v8;
    *(_QWORD *)&v48 = *(_QWORD *)(v8 + 16);
    v50 = v47;
    LOBYTE(v51) = v48;
    v9 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v50, 1);
    v44 = *(_OWORD *)v9;
    *(_QWORD *)&v45 = *(_QWORD *)(v9 + 16);
    v50 = v44;
    LOBYTE(v51) = v45;
    v10 = (uint64_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v50, 0x100000005);
    v12 = *v10;
    v11 = v10[1];
    v13 = v10[2];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
    v36 = v11 | 0x2000;
    *(_QWORD *)&v47 = v12 & 0xFFFFFFFFFFFFDFFFLL;
    *((_QWORD *)&v47 + 1) = v11 | 0x2000;
    v37 = v13;
    *(_QWORD *)&v48 = v13;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)v58, (uint64_t *)&v47, (uint64_t)&v50);
    *(_QWORD *)&v47 = v50;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v47 + 2, (_DWORD *)&v50 + 2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v47 + 3, (_DWORD *)&v50 + 3);
    v48 = v51;
    v49 = v52;
    *(_QWORD *)&v44 = v53;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v44 + 2, &v54);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v44 + 3, &v55);
    v45 = v56;
    v46 = v57;
    while (v47 != v44 || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v48, (uint64_t)&v45))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v47, (uint64_t)v40);
      v14 = *a1;
      PrimPath = (unsigned int *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v40);
      if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((_QWORD *)v14[1], PrimPath))
      {
        v16 = *(_QWORD *)(*v14 + 24);
        if (!v16)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v16 + 48))(v16, PrimPath);
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v14[1], PrimPath, PrimPath);
      }
      if ((v43 & 7) != 0)
      {
        v17 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
      if (v41)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
      pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v47);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44 + 8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47 + 8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50 + 8);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)v58))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v58);
      v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v50);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrototypes(v19);
      v20 = *((_QWORD *)&v50 + 1);
      if (*((_QWORD *)&v50 + 1))
      {
        v21 = (unsigned int *)(*((_QWORD *)&v50 + 1) + 8);
        do
        {
          v22 = __ldxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      }
      for (i = v38; i != v39; i = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)i + 32))
      {
        v25 = *a1;
        v26 = (unsigned int *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath(i);
        if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((_QWORD *)v25[1], v26))
        {
          v27 = *(_QWORD *)(*v25 + 24);
          if (!v27)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v27 + 48))(v27, v26);
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v25[1], v26, v26);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
        *(_QWORD *)&v47 = v12 & 0xFFFFFFFFFFFFDFFFLL;
        *((_QWORD *)&v47 + 1) = v36;
        *(_QWORD *)&v48 = v37;
        pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)i, (uint64_t *)&v47, (uint64_t)&v50);
        *(_QWORD *)&v47 = v50;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v47 + 2, (_DWORD *)&v50 + 2);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v47 + 3, (_DWORD *)&v50 + 3);
        v48 = v51;
        v49 = v52;
        *(_QWORD *)&v44 = v53;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v44 + 2, &v54);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v44 + 3, &v55);
        v45 = v56;
        v46 = v57;
        while (v47 != v44 || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v48, (uint64_t)&v45))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v47, (uint64_t)v40);
          v28 = *a1;
          v29 = (unsigned int *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v40);
          if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((_QWORD *)v28[1], v29))
          {
            v30 = *(_QWORD *)(*v28 + 24);
            if (!v30)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v30 + 48))(v30, v29);
            std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v28[1], v29, v29);
          }
          if ((v43 & 7) != 0)
          {
            v31 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
            do
              v32 = __ldxr(v31);
            while (__stlxr(v32 - 2, v31));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
          if (v41)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
          pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v47);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v44 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50 + 8);
      }
      *(_QWORD *)&v50 = &v38;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    }
  }
  if ((v61 & 7) != 0)
  {
    v33 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60);
  result = v59;
  if (v59)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v59);
  return result;
}

void sub_2301044BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(realityio::LiveSceneUpdate const*,std::function<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>)const::$_2::operator()(uint64_t **a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  unsigned int *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int IsPrimvar;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  pxrInternal__aapl__pxrReserved__::UsdStage *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  pxrInternal__aapl__pxrReserved__ *PrimAtPath;
  uint64_t UsdPrimAllPrimsPredicate;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *PrimPath;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t result;
  uint64_t **v47;
  pxrInternal__aapl__pxrReserved__::UsdStage *v48;
  _BYTE v49[8];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  void **v65;
  int v66;
  int v67;
  __int128 v68;
  uint64_t v69;
  _BYTE v70[8];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v6 = (unsigned int *)(a2 + 8);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 8));
  v7 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v80 = 0;
  v78 = MEMORY[0x24BEE9DB0] + 16;
  if (!v79
    || (*(_BYTE *)(v79 + 57) & 8) != 0
    || !(*(unsigned int (**)(uint64_t))(MEMORY[0x24BEE9DB0] + 48))(v7)
    || (v48 = this,
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v78),
        v8 = v61,
        v9 = v62,
        v57 = (void **)&v61,
        std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100](&v57),
        v8 == (void **)v9))
  {
    v20 = *a1;
    if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((_QWORD *)(*a1)[1], v6))
    {
      v21 = *(_QWORD *)(*v20 + 24);
      if (!v21)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v21 + 48))(v21, v6);
      std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v20[1], v6, v6);
    }
  }
  else
  {
    v10 = *(_QWORD **)(a2 + 24);
    v11 = (_QWORD *)(a2 + 32);
    if (v10 == (_QWORD *)(a2 + 32))
    {
      IsPrimvar = 0;
    }
    else
    {
      while (1)
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v78, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 4));
        IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar();
        if ((v64 & 7) != 0)
        {
          v13 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
          do
            v14 = __ldxr(v13);
          while (__stlxr(v14 - 2, v13));
        }
        if ((BYTE8(v63) & 7) != 0)
        {
          v15 = (unsigned int *)(*((_QWORD *)&v63 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stlxr(v16 - 2, v15));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v63);
        if (v62)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v62);
        if ((IsPrimvar & 1) != 0)
          break;
        v17 = (_QWORD *)v10[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v10[2];
            v19 = *v18 == (_QWORD)v10;
            v10 = v18;
          }
          while (!v19);
        }
        v10 = v18;
        if (v18 == v11)
          goto LABEL_27;
      }
      IsPrimvar = 1;
    }
LABEL_27:
    v47 = a1;
    v75 = &v75;
    v76 = (uint64_t *)&v75;
    v77 = 0;
    v22 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v6);
    v23 = (uint64_t)v75;
    *v22 = v75;
    v22[1] = &v75;
    *(_QWORD *)(v23 + 8) = v22;
    v24 = __CFADD__(v77, 1);
    v75 = v22;
    ++v77;
    v25 = this;
    if (!v24)
    {
      do
      {
        v26 = v76;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v74, (_DWORD *)v76 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v74 + 1, (_DWORD *)v26 + 5);
        v27 = v76;
        v28 = *v76;
        *(_QWORD *)(v28 + 8) = v76[1];
        *(_QWORD *)v27[1] = v28;
        --v77;
        std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)(v27 + 2));
        operator delete(v27);
        PrimAtPath = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v74);
        if (IsPrimvar)
        {
          UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(PrimAtPath);
          v31 = *(_QWORD *)UsdPrimAllPrimsPredicate;
          v32 = *(_QWORD *)(UsdPrimAllPrimsPredicate + 8);
          v33 = *(_QWORD *)(UsdPrimAllPrimsPredicate + 16);
          if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
            && ((v31 & 0x2000) != 0 || (v32 & 0x2000) == 0))
          {
            v31 |= 0x2000uLL;
            v32 &= ~0x2000uLL;
          }
          v57 = (void **)v31;
          v58 = v32;
          *(_QWORD *)&v59 = v33;
          pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)v70, (uint64_t *)&v57, (uint64_t)&v61);
          v57 = v61;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v58, &v62);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v58 + 1, (_DWORD *)&v62 + 1);
          v59 = v63;
          v60 = v64;
          v53 = v65;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v54, &v66);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v54 + 1, &v67);
          v55 = v68;
          v56 = v69;
          v25 = v48;
          while (v57 != v53
               || v58 != v54
               || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v59, (uint64_t)&v55))
          {
            pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v57, (uint64_t)v49);
            PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v49);
            v35 = std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath const&>(PrimPath);
            v36 = (uint64_t)v75;
            *v35 = v75;
            v35[1] = &v75;
            *(_QWORD *)(v36 + 8) = v35;
            v75 = v35;
            ++v77;
            if ((v52 & 7) != 0)
            {
              v37 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
              do
                v38 = __ldxr(v37);
              while (__stlxr(v38 - 2, v37));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
            if (v50)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v50);
            pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v57);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          PrimAtPath = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
        }
        v39 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(PrimAtPath);
        if (v74 != *v39)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v70))
          {
            v40 = *v47;
            if (!std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((_QWORD *)(*v47)[1], (unsigned int *)&v74))
            {
              v41 = *(_QWORD *)(*v40 + 24);
              if (!v41)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v41 + 48))(v41, &v74);
              std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v40[1], (unsigned int *)&v74, &v74);
            }
          }
        }
        if ((v73 & 7) != 0)
        {
          v42 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
          do
            v43 = __ldxr(v42);
          while (__stlxr(v43 - 2, v42));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
        if (v71)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v71);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v74);
      }
      while (v77);
    }
    std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::clear((uint64_t *)&v75);
  }
  MEMORY[0x2348B21DC](&v78);
  if ((v83 & 7) != 0)
  {
    v44 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v82);
  result = v81;
  if (v81)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v81);
  return result;
}

void sub_230104BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::clear((uint64_t *)(v1 - 176));
  MEMORY[0x2348B21DC](v1 - 152);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t realityio::LiveSceneUpdate::isStageMetadataDirty(realityio::LiveSceneUpdate *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v2;
  uint64_t HasMetadata;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  _DWORD *v8;
  _DWORD *v9;
  pxrInternal__aapl__pxrReserved__::UsdStage *v10;
  void (**v11)(realityio::UsdPrimDelta *__hidden);
  int v12;
  int v13;
  char v14;
  uint64_t v15[4];
  uint64_t v16;

  v2 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!v2)
    return 1;
  if (*(char *)(v2 + 39) < 0)
  {
    if (!*(_QWORD *)(v2 + 24))
      return 1;
  }
  else if (!*(_BYTE *)(v2 + 39))
  {
    return 1;
  }
  if (std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>((_QWORD *)this + 29, a2))
  {
    return 1;
  }
  v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(0);
  v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, v7);
  if ((_DWORD *)((char *)this + 208) == v8)
    return 0;
  v9 = v8;
  v11 = &off_24FDF6CC0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, v8 + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, v9 + 13);
  v14 = *((_BYTE *)v9 + 56);
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>::map[abi:ne180100](v15, (uint64_t)(v9 + 16));
  v15[3] = (uint64_t)&off_24FDF4548;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)&v16, (uint64_t)(v9 + 24));
  if (v14)
  {
    v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)this + 1);
    HasMetadata = pxrInternal__aapl__pxrReserved__::UsdStage::HasMetadata(v10, a2);
  }
  else
  {
    HasMetadata = 0;
  }
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)&v11);
  return HasMetadata;
}

void sub_230104E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v13;
  uint64_t v14;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy(v14, a13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v13);
  _Unwind_Resume(a1);
}

uint64_t realityio::LiveSceneUpdate::isPrimMetadataDirty(realityio::LiveSceneUpdate *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t result;
  const realityio::UsdStageDelta *v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10[3];

  v10[0] = this;
  v10[1] = a2;
  v10[2] = a3;
  v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, a2);
  if ((_QWORD *)((char *)this + 208) != v6)
  {
    v7 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      if (*(char *)(v7 + 39) < 0)
      {
        if (*(_QWORD *)(v7 + 24))
        {
LABEL_5:
          if (*((_BYTE *)v6 + 56))
            return realityio::LiveSceneUpdate::isPrimMetadataDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(v10);
          else
            return std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v6 + 12, a3) != 0;
        }
      }
      else if (*(_BYTE *)(v7 + 39))
      {
        goto LABEL_5;
      }
    }
    return 1;
  }
  result = realityio::LiveSceneUpdate::isPrimMetadataDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(v10);
  if ((_DWORD)result)
  return result;
}

uint64_t realityio::LiveSceneUpdate::isPrimMetadataDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(const pxrInternal__aapl__pxrReserved__::SdfPath **a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v2;
  uint64_t HasMetadata;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a1 + 1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v2, a1[1]);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7) & 1) != 0)
    HasMetadata = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7, a1[2]);
  else
    HasMetadata = 0;
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  return HasMetadata;
}

void sub_230104FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::isPrimPathPartOfResyncedSubtreeInStageDelta(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const realityio::UsdStageDelta *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(realityio::UsdPrimDelta *__hidden);
  int v14;
  int v15;
  unsigned __int8 v16;
  uint64_t v17[4];
  uint64_t v18;

  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v5);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this);
  if (v11 == v12)
  {
LABEL_5:
    v9 = 0;
  }
  else
  {
    while (1)
    {
      v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2 + 16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
      v7 = v6;
      if ((_DWORD *)((char *)a2 + 24) != v6)
      {
        v13 = &off_24FDF6CC0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, v6 + 12);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, v7 + 13);
        v16 = *((_BYTE *)v7 + 56);
        std::map<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>::map[abi:ne180100](v17, (uint64_t)(v7 + 16));
        v17[3] = (uint64_t)&off_24FDF4548;
        std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)&v18, (uint64_t)(v7 + 24));
        v8 = v16;
        realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)&v13);
        if (v8)
          break;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v11, (int *)&v13);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v11 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
      if (v11 == v12)
        goto LABEL_5;
    }
    v9 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  return v9;
}

void sub_23010515C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::LiveSceneUpdate::isPropertyDirty(realityio::LiveSceneUpdate *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  _BYTE *v6;
  unint64_t v7;
  uint64_t result;
  const realityio::UsdStageDelta *v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10[3];

  v10[0] = this;
  v10[1] = a2;
  v10[2] = a3;
  v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, a2);
  if ((char *)this + 208 != v6)
  {
    v7 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      if (*(char *)(v7 + 39) < 0)
      {
        if (*(_QWORD *)(v7 + 24))
        {
LABEL_5:
          if (v6[56])
            return realityio::LiveSceneUpdate::isPropertyDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(v10);
          else
            return v6 + 72 != (_BYTE *)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)(v6 + 64), (uint64_t *)a3);
        }
      }
      else if (*(_BYTE *)(v7 + 39))
      {
        goto LABEL_5;
      }
    }
    return 1;
  }
  result = realityio::LiveSceneUpdate::isPropertyDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(v10);
  if ((_DWORD)result)
  return result;
}

uint64_t realityio::LiveSceneUpdate::isPropertyDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(const pxrInternal__aapl__pxrReserved__::SdfPath **a1)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v2;
  uint64_t HasProperty;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a1 + 1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v2, a1[1]);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7)
    && (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7) & 1) == 0)
  {
    HasProperty = pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7, a1[2]);
  }
  else
  {
    HasProperty = 0;
  }
  if ((v10 & 7) != 0)
  {
    v4 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  return HasProperty;
}

void sub_230105340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::LiveSceneUpdate::isPropertyMetadataDirty(realityio::LiveSceneUpdate *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  const realityio::UsdStageDelta *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD v23[4];

  v23[0] = a3;
  v23[1] = this;
  v23[2] = a2;
  v23[3] = a4;
  v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 200, a2);
  if ((_QWORD *)((char *)this + 208) == v8)
  {
    result = realityio::LiveSceneUpdate::isPropertyMetadataDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()((uint64_t)v23);
    if ((_DWORD)result)
    return result;
  }
  v9 = v8;
  if (*((_BYTE *)v8 + 56))
    return realityio::LiveSceneUpdate::isPropertyMetadataDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()((uint64_t)v23);
  v12 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (v12)
  {
    if (*(char *)(v12 + 39) < 0)
    {
      if (*(_QWORD *)(v12 + 24))
      {
LABEL_9:
        v13 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)(v8 + 8), (uint64_t *)a3);
        if (v9 + 9 != v13)
        {
          v14 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
          if (v14)
          {
            if (*(char *)(v14 + 39) < 0 ? *(_QWORD *)(v14 + 24) : *(unsigned __int8 *)(v14 + 39))
              return std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v13 + 8, a4) != 0;
          }
          return 1;
        }
        return 0;
      }
    }
    else if (*(_BYTE *)(v12 + 39))
    {
      goto LABEL_9;
    }
  }
  v16 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
  if (!v16)
    return 1;
  if ((*(char *)(v16 + 39) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v16 + 39))
      return 1;
    goto LABEL_19;
  }
  if (!*(_QWORD *)(v16 + 24))
    return 1;
LABEL_19:
  v17 = (_QWORD *)v8[8];
  v18 = v8 + 9;
  if (v17 == v8 + 9)
    return 0;
  do
  {
    v19 = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v17 + 8, a4);
    result = v19 != 0;
    if (v19)
      break;
    v20 = (_QWORD *)v17[1];
    if (v20)
    {
      do
      {
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (_QWORD *)v17[2];
        v22 = *v21 == (_QWORD)v17;
        v17 = v21;
      }
      while (!v22);
    }
    v17 = v21;
  }
  while (v21 != v18);
  return result;
}

uint64_t realityio::LiveSceneUpdate::isPropertyMetadataDirty(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)const::$_0::operator()(uint64_t a1)
{
  unint64_t v1;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  uint64_t HasMetadata;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = **(_QWORD **)a1 & 0xFFFFFFFFFFFFFFF8;
  if (!v1)
    return 1;
  if ((*(char *)(v1 + 39) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v1 + 39))
      goto LABEL_4;
    return 1;
  }
  if (!*(_QWORD *)(v1 + 24))
    return 1;
LABEL_4:
  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)(a1 + 8) + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v3, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 16));
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v14) & 1) != 0
    && pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)v14, *(const pxrInternal__aapl__pxrReserved__::TfToken **)a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)v14, *(const pxrInternal__aapl__pxrReserved__::TfToken **)a1);
    HasMetadata = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10, *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a1 + 24));
    if ((v13 & 7) != 0)
    {
      v5 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    if (v11)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  }
  else
  {
    HasMetadata = 0;
  }
  if ((v17 & 7) != 0)
  {
    v7 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  if (v15)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v15);
  return HasMetadata;
}

void sub_230105640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty::~UsdProperty((pxrInternal__aapl__pxrReserved__::UsdProperty *)&a9);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a13);
  _Unwind_Resume(a1);
}

CFStringRef realityio::LiveSceneUpdate::description@<X0>(realityio::LiveSceneUpdate *this@<X0>, CFStringRef *a2@<X8>)
{
  CFStringRef result;

  *a2 = 0;
  result = CFStringCreateWithFormat(0, 0, CFSTR("<LiveSceneUpdate: %p>"), this);
  *a2 = result;
  return result;
}

void sub_2301056B0(_Unwind_Exception *a1)
{
  const void **v1;

  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneUpdate::~LiveSceneUpdate(realityio::LiveSceneUpdate *this)
{
  realityio::LiveSceneUpdate::~LiveSceneUpdate(this);
  JUMPOUT(0x2348B4E1CLL);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_24FDF6D90;
  realityio::UsdStageDelta::~UsdStageDelta((realityio::LiveSceneUpdate *)((char *)this + 184));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy((uint64_t)this + 136, *((_QWORD **)this + 18));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)this + 112, *((_QWORD **)this + 15));
  std::__tree<std::string>::destroy((uint64_t)this + 88, *((char **)this + 12));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  v3 = (void **)((char *)this + 40);
  std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)this + 1);
}

uint64_t realityio::LiveSceneUpdate::LiveSceneUpdate(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, uint64_t a8, char a9)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)(a1 + 8) = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24FDF6D90;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a4 + 24);
  v12 = a4 + 40;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a4 + 40);
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  v13 = (_QWORD *)(a4 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a4 + 48);
  v15 = (_QWORD *)(a4 + 56);
  v14 = *(_QWORD *)(a4 + 56);
  *(_QWORD *)(a1 + 72) = v14;
  v16 = a1 + 72;
  v17 = *(_QWORD *)(a4 + 64);
  *(_QWORD *)(a1 + 80) = v17;
  if (v17)
  {
    *(_QWORD *)(v14 + 16) = v16;
    *v13 = v15;
    *v15 = 0;
    *(_QWORD *)(a4 + 64) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = v16;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a4 + 72);
  v19 = (_QWORD *)(a4 + 80);
  v18 = *(_QWORD *)(a4 + 80);
  *(_QWORD *)(a1 + 96) = v18;
  v20 = a1 + 96;
  v21 = *(_QWORD *)(a4 + 88);
  *(_QWORD *)(a1 + 104) = v21;
  if (v21)
  {
    *(_QWORD *)(v18 + 16) = v20;
    *(_QWORD *)(a4 + 72) = v19;
    *v19 = 0;
    *(_QWORD *)(a4 + 88) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = v20;
  }
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v23 = *(_QWORD *)(a4 + 24);
  for (i = *(_QWORD *)(a4 + 32);
        i != v23;
        std::allocator<realityio::internal::PrimToEntityMap::EntityData>::destroy[abi:ne180100](v12, i))
  {
    i -= 104;
  }
  *(_QWORD *)(a4 + 32) = v23;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)v13, *(_QWORD **)(a4 + 56));
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 48) = v15;
  std::__tree<std::string>::destroy(a4 + 72, *(char **)(a4 + 80));
  *(_QWORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 72) = v19;
  *(_QWORD *)(a1 + 112) = *a5;
  v24 = a5 + 1;
  v25 = a5[1];
  *(_QWORD *)(a1 + 120) = v25;
  v26 = a1 + 120;
  v27 = a5[2];
  *(_QWORD *)(a1 + 128) = v27;
  if (v27)
  {
    *(_QWORD *)(v25 + 16) = v26;
    *a5 = v24;
    *v24 = 0;
    a5[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 112) = v26;
  }
  *(_QWORD *)(a1 + 136) = *a6;
  v28 = a6 + 1;
  v29 = a6[1];
  *(_QWORD *)(a1 + 144) = v29;
  v30 = a1 + 144;
  v31 = a6[2];
  *(_QWORD *)(a1 + 152) = v31;
  if (v31)
  {
    *(_QWORD *)(v29 + 16) = v30;
    *a6 = v28;
    *v28 = 0;
    a6[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 136) = v30;
  }
  *(_QWORD *)(a1 + 160) = *a7;
  v32 = a7 + 1;
  v33 = a7[1];
  *(_QWORD *)(a1 + 168) = v33;
  v34 = a1 + 168;
  v35 = a7[2];
  *(_QWORD *)(a1 + 176) = v35;
  if (v35)
  {
    *(_QWORD *)(v33 + 16) = v34;
    *a7 = v32;
    *v32 = 0;
    a7[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 160) = v34;
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 184) = &off_24FDE8388;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(a1 + 192));
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::map[abi:ne180100]((uint64_t *)(a1 + 200), a3 + 16);
  *(_QWORD *)(a1 + 224) = &off_24FDF4548;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(a1 + 232, a3 + 48);
  *(_QWORD *)(a1 + 272) = a8;
  *(_BYTE *)(a1 + 280) = a9;
  return a1;
}

void sub_230105990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, unsigned int **a10)
{
  unsigned int **v10;
  _QWORD **v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(v14, *(_QWORD **)(v13 + 208));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v10);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(v15, *v12);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy(v17, *v18);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(v16, *v11);
  realityio::internal::PrimToEntityMap::~PrimToEntityMap(a9);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(a10);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<pxrInternal__aapl__pxrReserved__::SdfPath>::__create_node[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath const&>(_DWORD *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  *v2 = 0;
  v2[1] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v2 + 4, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v2 + 5, a1 + 1);
  return v2;
}

_QWORD *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v4 = bswap64(0x9E3779B97F4A7C55 * v3);
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v4;
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v2 - 1);
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v4 == v9)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v3)
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v2)
            v9 %= *(_QWORD *)&v2;
        }
        else
        {
          v9 &= *(_QWORD *)&v2 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t RIOBuilderDirtyMetadataDescriptorGetTypeID()
{
  if (RIOBuilderDirtyMetadataDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderDirtyMetadataDescriptorGetTypeID::onceToken, &__block_literal_global_27);
  return RIOBuilderDirtyMetadataDescriptorGetTypeID::typeID;
}

uint64_t RIOBuilderDirtyMetadataDescriptorCreateWithMetadata(uint64_t a1)
{
  unint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  char *v15;
  std::__shared_weak_count *v16;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 16);
    if ((v1 & 7) != 0)
    {
      v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stxr(v3 + 2, v2));
      if ((v3 & 1) == 0)
        v1 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    v1 = 0;
  }
  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF6E50;
  v4[3] = v1;
  v5 = v1;
  if ((v1 & 7) != 0)
  {
    v6 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    v5 = v1;
    if ((v7 & 1) == 0)
    {
      v4[3] = v6;
      v5 = v1 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  *((_BYTE *)v4 + 32) = v5 == 0;
  v15 = (char *)(v4 + 3);
  v16 = (std::__shared_weak_count *)v4;
  v8 = RIOBuilderDirtyMetadataDescriptorCreate<std::shared_ptr<realityio::DirtyMetadataDescriptor const> &>(&v15);
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if ((v1 & 7) != 0)
  {
    v12 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return v8;
}

void sub_230105D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v10)
  {
    v12 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDirtyMetadataDescriptorCopyMetadata(uint64_t a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14[2];
  std::__shared_weak_count *v15;

  if (a1)
  {
    v1 = *(uint64_t **)(a1 + 16);
    v2 = *(std::__shared_weak_count **)(a1 + 24);
    v14[1] = (uint64_t)v1;
    v15 = v2;
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    if (v1)
    {
      v5 = *v1;
      v14[0] = v5;
      if ((v5 & 7) != 0)
      {
        v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 2, v6));
        if ((v7 & 1) == 0)
          v14[0] = (uint64_t)v6;
      }
      v8 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v14);
      if ((v14[0] & 7) != 0)
      {
        v9 = (unsigned int *)(v14[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
        v2 = v15;
      }
      if (!v2)
        return v8;
LABEL_23:
      v11 = (unint64_t *)&v2->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
      return v8;
    }
    if (RIOPxrTfTokenEmpty::onceToken != -1)
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_1_2);
    v8 = RIOPxrTfTokenEmpty::tokenRef;
    if (v2)
      goto LABEL_23;
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1)
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_1_2);
    return RIOPxrTfTokenEmpty::tokenRef;
  }
  return v8;
}

void sub_230105EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _RIOBuilderDirtyMetadataDescriptorCFFinalize(const void *a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
}

BOOL _RIOBuilderDirtyMetadataDescriptorCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderDirtyMetadataDescriptorCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderDirtyMetadataDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderDirtyMetadataDescriptor %p>"), a1);
}

CFStringRef _RIOBuilderDirtyMetadataDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderDirtyMetadataDescriptor %p>"), a1);
}

void std::__shared_ptr_emplace<realityio::DirtyMetadataDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF6E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::DirtyMetadataDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF6E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::DirtyMetadataDescriptor>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *(_QWORD *)(result + 24);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  return result;
}

uint64_t RIOBuilderInputDescriptorGetTypeID()
{
  if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1)
    dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
  return RIOBuilderInputDescriptorGetTypeID::typeID;
}

uint64_t RIOBuilderCurrentPrimInputDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t Instance;
  unint64_t v9;
  unint64_t v10;
  std::string v12;
  char v13[8];
  std::string __p;
  std::string v15;

  realityio::CFStringCopyUTF8String(a1, (uint64_t)v13);
  if (!v13[0])
    return 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v12 = __p;
  if (a2)
  {
    v5 = a3 == 0;
    v6 = (std::__shared_weak_count *)operator new(0x48uLL);
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2A20;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v15, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
    else
      v15 = v12;
    realityio::CurrentPrimInputDescriptor::CurrentPrimInputDescriptor(&v6[1].__vftable, (uint64_t)&v15, (uint64_t *)(a2 + 16), v5);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1)
      dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
    Instance = _CFRuntimeCreateInstance();
    a2 = Instance;
    if (Instance)
    {
      *(_QWORD *)(Instance + 16) = v6 + 1;
      *(_QWORD *)(Instance + 24) = v6;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v13[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a2;
}

void sub_230106250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count *v27;
  int v28;
  void *v30;

  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v30);
  if (a16 < 0)
    operator delete(__p);
  if (v28 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderCurrentPrimInputDescriptorCopyInputName(uint64_t a1)
{
}

CFStringRef `anonymous namespace'::inputNameRefFromInputDescriptorRef(uint64_t a1, std::__shared_weak_count *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  const char *v5;
  CFStringRef v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v5 = *(const char **)v5;
  v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
  if (a2)
  {
    v7 = (unint64_t *)&a2->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
      std::__shared_weak_count::__release_weak(a2);
    }
  }
  return v6;
}

void sub_230106368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::outputIdentifierRefFromInputDescriptorRef(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 16);
    v2 = *(std::__shared_weak_count **)(a1 + 24);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    v5 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(v1 + 32));
    if (v2)
    {
      v6 = (unint64_t *)&v2->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1)
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_1_2);
    return RIOPxrTfTokenEmpty::tokenRef;
  }
  return v5;
}

void sub_23010643C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL RIOBuilderCurrentPrimInputDescriptorCopyOptionality(uint64_t a1)
{
}

BOOL `anonymous namespace'::apiOptionalityFromInputDescriptorRef(uint64_t a1, std::__shared_weak_count *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  unint64_t v6;

  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    v5 = *(_DWORD *)(a1 + 40);
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))a2->__on_zero_shared)(a2);
      std::__shared_weak_count::__release_weak(a2);
    }
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 40);
  }
  return v5 != 1;
}

uint64_t RIOBuilderChildPrimInputDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t Instance;
  unint64_t v17;
  unint64_t v18;
  std::string v20;
  char v21[8];
  std::string __p;
  uint64_t v23;
  std::string v24;

  realityio::CFStringCopyUTF8String(a1, (uint64_t)v21);
  if (!v21[0])
    return 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  if (a2)
  {
    v8 = a4 == 0;
    v9 = (std::__shared_weak_count *)operator new(0x50uLL);
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6B18;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v24, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    else
      v24 = v20;
    v11 = *(_QWORD *)(a3 + 16);
    v23 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v23 = (uint64_t)v12;
    }
    realityio::ChildPrimInputDescriptor::ChildPrimInputDescriptor(&v9[1].__vftable, (uint64_t)&v24, (uint64_t *)(a2 + 16), &v23, v8);
    if ((v23 & 7) != 0)
    {
      v14 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1)
      dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
    Instance = _CFRuntimeCreateInstance();
    v7 = Instance;
    if (Instance)
    {
      *(_QWORD *)(Instance + 16) = v9 + 1;
      *(_QWORD *)(Instance + 24) = v9;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v7 = 0;
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v21[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_2301066F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;
  void *v32;

  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v32);
  if (a16 < 0)
    operator delete(__p);
  if (a17)
  {
    if (a23 < 0)
      operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDescendantPrimInputDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v13[2];
  std::string v14;
  _BYTE v15[8];
  std::string __p;
  std::string v17;

  realityio::CFStringCopyUTF8String(a1, (uint64_t)v15);
  if (!v15[0])
    return 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v14 = __p;
  if (a2)
  {
    v8 = a4 == 0;
    v9 = (std::__shared_weak_count *)operator new(0x60uLL);
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4A98;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v17, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      v17 = v14;
    realityio::DescendantPrimInputDescriptor::DescendantPrimInputDescriptor(&v9[1].__vftable, (uint64_t)&v17, (uint64_t *)(a2 + 16), (uint64_t *)(a3 + 16), v8);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    v13[0] = v9 + 1;
    v13[1] = v9;
    v7 = RIOBuilderInputDescriptorCreate<std::shared_ptr<realityio::InputDescriptor const> &>(v13);
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v7 = 0;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v15[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_230106904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count *v27;
  int v28;
  void *v30;

  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v30);
  if (a16 < 0)
    operator delete(__p);
  if (v28 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderDescendantPrimsInputDescriptorCreate(__CFString *a1, uint64_t a2, const __CFArray *a3, uint64_t a4)
{
  CFIndex Count;
  CFIndex v8;
  _QWORD *ValueAtIndex;
  _BOOL4 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v15[2];
  _QWORD **v16;
  _QWORD *v17[2];
  std::string v18;
  _BYTE v19[8];
  std::string __p;
  std::string v21;

  realityio::CFStringCopyUTF8String(a1, (uint64_t)v19);
  if (!v19[0])
    return 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v18 = __p;
  if (a2)
  {
    v17[0] = 0;
    v17[1] = 0;
    v16 = v17;
    Count = CFArrayGetCount(a3);
    if (Count >= 1)
    {
      v8 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a3, v8);
        std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v16, ValueAtIndex + 2, ValueAtIndex + 2);
        ++v8;
      }
      while (Count != v8);
    }
    v10 = a4 == 0;
    v11 = (std::__shared_weak_count *)operator new(0x60uLL);
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__shared_weak_owners_ = 0;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4A98;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v21, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    else
      v21 = v18;
    realityio::DescendantPrimInputDescriptor::DescendantPrimInputDescriptor(&v11[1].__vftable, (uint64_t)&v21, (uint64_t *)(a2 + 16), (uint64_t)&v16, v10);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    v15[0] = v11 + 1;
    v15[1] = v11;
    a2 = RIOBuilderInputDescriptorCreate<std::shared_ptr<realityio::InputDescriptor const> &>(v15);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&v16, v17[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (v19[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a2;
}

void sub_230106B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23)
{
  std::__shared_weak_count *v23;
  int v24;
  void *v26;

  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v26);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&a12, a13);
  if (a20 < 0)
    operator delete(__p);
  if (v24 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderChildPrimInputDescriptorCopyInputName(uint64_t a1)
{
}

uint64_t RIOBuilderChildPrimInputDescriptorCopyChildPrimType(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(const void **)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2
  {
    if (v3)
    {
      v7 = (unint64_t *)&v3->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v6 + 6);
    if (v3)
    {
      v10 = (unint64_t *)&v3->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1)
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_1_2);
    v9 = RIOPxrTfTokenEmpty::tokenRef;
  }
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v9;
}

void sub_230106D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL RIOBuilderChildPrimInputDescriptorCopyOptionality(uint64_t a1)
{
}

uint64_t RIOBuilderParentPrimInputDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BOOL4 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t Instance;
  unint64_t v12;
  unint64_t v13;
  std::string v15;
  char v16[8];
  std::string __p;
  std::string v18;
  std::string v19;

  realityio::CFStringCopyUTF8String(a1, (uint64_t)v16);
  if (!v16[0])
    return 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v15 = __p;
  if (a2)
  {
    v6 = a3 == 0;
    v7 = (std::__shared_weak_count *)operator new(0x48uLL);
    v7->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF6F20;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v18, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    else
      v18 = v15;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v19, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    else
      v19 = v18;
    v9 = (uint64_t *)(a2 + 16);
    v10 = &v7[1].__vftable;
    realityio::InputDescriptor::InputDescriptor((uint64_t)&v7[1], (__int128 *)&v19, v9, v6);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    *v10 = &off_24FDF6F70;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1)
      dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
    Instance = _CFRuntimeCreateInstance();
    v5 = Instance;
    if (Instance)
    {
      *(_QWORD *)(Instance + 16) = v10;
      *(_QWORD *)(Instance + 24) = v7;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v16[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_230106F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count *v27;
  int v28;
  void *v30;

  if (a27 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v30);
  if (a16 < 0)
    operator delete(a11);
  if (v28 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderParentPrimInputDescriptorCopyInputName(uint64_t a1)
{
}

BOOL RIOBuilderParentPrimInputDescriptorCopyOptionality(uint64_t a1)
{
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t Instance;
  unint64_t v17;
  unint64_t v18;
  std::string v20;
  char v21[8];
  std::string __p;
  uint64_t v23;
  std::string v24;

  realityio::CFStringCopyUTF8String(a1, (uint64_t)v21);
  if (!v21[0])
    return 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  if (a2)
  {
    v8 = a4 == 0;
    v9 = (std::__shared_weak_count *)operator new(0x50uLL);
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE6A88;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v24, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    else
      v24 = v20;
    v11 = *(_QWORD *)(a3 + 16);
    v23 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        v23 = (uint64_t)v12;
    }
    realityio::RelatedPrimInputDescriptor::RelatedPrimInputDescriptor(&v9[1].__vftable, (uint64_t)&v24, (uint64_t *)(a2 + 16), &v23, v8);
    if ((v23 & 7) != 0)
    {
      v14 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1)
      dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
    Instance = _CFRuntimeCreateInstance();
    v7 = Instance;
    if (Instance)
    {
      *(_QWORD *)(Instance + 16) = v9 + 1;
      *(_QWORD *)(Instance + 24) = v9;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v7 = 0;
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v21[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_23010720C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;
  void *v32;

  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v32);
  if (a16 < 0)
    operator delete(__p);
  if (a17)
  {
    if (a23 < 0)
      operator delete(a18);
  }
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderRelatedPrimInputDescriptorCopyInputName(uint64_t a1)
{
}

uint64_t RIOBuilderRelatedPrimInputDescriptorCopyPropertyNameOnCurrentPrimWithRelationship(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(const void **)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2
  {
    if (v3)
    {
      v7 = (unint64_t *)&v3->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v6 + 6);
    if (v3)
    {
      v10 = (unint64_t *)&v3->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1)
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_1_2);
    v9 = RIOPxrTfTokenEmpty::tokenRef;
  }
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v9;
}

void sub_2301073E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL RIOBuilderRelatedPrimInputDescriptorCopyOptionality(uint64_t a1)
{
}

uint64_t RIOBuilderStaticPrimInputDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  uint64_t Instance;
  unint64_t v12;
  unint64_t v13;
  std::string v15;
  char v16[8];
  std::string __p;
  int v18;
  int v19;
  std::string v20;

  realityio::CFStringCopyUTF8String(a1, (uint64_t)v16);
  if (!v16[0])
    return 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v15 = __p;
  if (a2)
  {
    v8 = a4 == 0;
    v9 = (std::__shared_weak_count *)operator new(0x50uLL);
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE4FB8;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v20, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    else
      v20 = v15;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, (_DWORD *)(a3 + 20));
    realityio::StaticPrimInputDescriptor::StaticPrimInputDescriptor((uint64_t)&v9[1], (uint64_t)&v20, (uint64_t *)(a2 + 16), &v18, v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1)
      dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
    Instance = _CFRuntimeCreateInstance();
    v7 = Instance;
    if (Instance)
    {
      *(_QWORD *)(Instance + 16) = v9 + 1;
      *(_QWORD *)(Instance + 24) = v9;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v7 = 0;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v16[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_230107624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count *v27;
  int v28;
  void *v30;

  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v30);
  if (a16 < 0)
    operator delete(__p);
  if (v28 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderStaticPrimInputDescriptorCopyInputName(uint64_t a1)
{
}

uint64_t RIOBuilderStaticPrimInputDescriptorCopyPrimPath(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _DWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t EmptyPath;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(const void **)(a1 + 16);
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2
  {
    if (v3)
    {
      v7 = (unint64_t *)&v3->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    EmptyPath = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v6 + 11);
    if (v3)
    {
      v10 = (unint64_t *)&v3->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    EmptyPath = RIOPxrSdfPathCreateEmptyPath();
  }
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return EmptyPath;
}

void sub_2301077C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL RIOBuilderStaticPrimInputDescriptorCopyOptionality(uint64_t a1)
{
}

uint64_t RIOBuilderEntityGeneratingPrimDescriptorCreate(__CFString *a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t Instance;
  unint64_t v9;
  unint64_t v10;
  std::string v12;
  char v13[8];
  std::string __p;
  std::string v15;

  realityio::CFStringCopyUTF8String(a1, (uint64_t)v13);
  if (!v13[0])
    return 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v12 = __p;
  if (a2)
  {
    v5 = a3 == 0;
    v6 = (std::__shared_weak_count *)operator new(0x48uLL);
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF0DC0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v15, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
    else
      v15 = v12;
    realityio::EntityGeneratingOwningPrimInputDescriptor::EntityGeneratingOwningPrimInputDescriptor(&v6[1].__vftable, (uint64_t)&v15, (uint64_t *)(a2 + 16), v5);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1)
      dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
    Instance = _CFRuntimeCreateInstance();
    a2 = Instance;
    if (Instance)
    {
      *(_QWORD *)(Instance + 16) = v6 + 1;
      *(_QWORD *)(Instance + 24) = v6;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v13[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a2;
}

void sub_2301079B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count *v27;
  int v28;
  void *v30;

  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v30);
  if (a16 < 0)
    operator delete(__p);
  if (v28 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderEntityGeneratingPrimInputDescriptorCopyInputName(uint64_t a1)
{
}

BOOL RIOBuilderEntityGeneratingPrimInputDescriptorCopyOptionality(uint64_t a1)
{
}

uint64_t RIOBuilderCustomCallbackInputDescriptorCreate(__CFString *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  _BOOL4 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  id v12;
  uint64_t Instance;
  unint64_t v14;
  unint64_t v15;
  std::string v17;
  char v18[8];
  std::string __p;
  std::string v20;
  std::string v21;

  v7 = a3;
  realityio::CFStringCopyUTF8String(a1, (uint64_t)v18);
  if (v18[0])
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v17 = __p;
    if (a2)
    {
      v9 = a4 == 0;
      v10 = (std::__shared_weak_count *)operator new(0x50uLL);
      v10->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      v10->__shared_weak_owners_ = 0;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF6FB0;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v20, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
      else
        v20 = v17;
      v12 = v7;
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v21, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
      else
        v21 = v20;
      realityio::InputDescriptor::InputDescriptor((uint64_t)&v10[1], (__int128 *)&v21, (uint64_t *)(a2 + 16), v9);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE45C0;
      v10[3].__vftable = (std::__shared_weak_count_vtbl *)MEMORY[0x2348B5260](v12);

      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1)
        dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
      Instance = _CFRuntimeCreateInstance();
      v8 = Instance;
      if (Instance)
      {
        *(_QWORD *)(Instance + 16) = v10 + 1;
        *(_QWORD *)(Instance + 24) = v10;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      v8 = 0;
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (v18[0] && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_230107C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  std::__shared_weak_count *v28;
  void *v29;
  int v30;
  void *v32;

  if (a27 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v32);
  if (a16 < 0)
    operator delete(a11);
  if (v30 < 0)
    operator delete(a19);

  _Unwind_Resume(a1);
}

CFStringRef RIOBuilderCustomCallbackInputDescriptorCopyInputName(uint64_t a1)
{
}

BOOL RIOBuilderCustomCallbackInputDescriptorCopyOptionality(uint64_t a1)
{
}

id RIOBuilderCustomCallbackInputDescriptorCopyCallbackFunction(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  unint64_t v7;

  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = (void *)MEMORY[0x2348B5260](v2[6]);
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v6 = (void *)MEMORY[0x2348B5260](v2[6]);
  }
  return v6;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<realityio::ObjCCustomInputDescriptor const,realityio::InputDescriptor const>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t RIOBuilderInputDescriptorCopyType(uint64_t a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[2];
  _QWORD v24[2];

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  if (!v2)
    goto LABEL_54;
  {
    {
      if (!v1)
        return 2;
      v8 = (unint64_t *)&v1->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 - 1, v8));
      v2 = 2;
      if (v10)
        goto LABEL_55;
      goto LABEL_44;
    }
    {
      if (!v1)
        return 3;
      v11 = (unint64_t *)&v1->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      v2 = 3;
      if (v13)
        goto LABEL_55;
      goto LABEL_44;
    }
    {
      if (!v1)
        return 4;
      v14 = (unint64_t *)&v1->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 - 1, v14));
      v2 = 4;
      if (v16)
        goto LABEL_55;
      goto LABEL_44;
    }
    {
      if (!v1)
        return 5;
      v17 = (unint64_t *)&v1->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      v2 = 5;
      if (v19)
        goto LABEL_55;
      goto LABEL_44;
    }
    std::dynamic_pointer_cast[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor const,realityio::InputDescriptor const>(v24, (void *)v2, (uint64_t)v1);
    if (v24[0])
    {
      v2 = 6;
    }
    else
    {
      std::dynamic_pointer_cast[abi:ne180100]<realityio::ObjCCustomInputDescriptor const,realityio::InputDescriptor const>(v23, (void *)v2, (uint64_t)v1);
      if (v23[0])
        v2 = 7;
      else
        v2 = 0;
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v23);
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v24);
LABEL_54:
    if (!v1)
      return v2;
    goto LABEL_55;
  }
  if (!v1)
    return 1;
  v5 = (unint64_t *)&v1->__shared_owners_;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 - 1, v5));
  v2 = 1;
  if (v7)
    goto LABEL_55;
LABEL_44:
  ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
  std::__shared_weak_count::__release_weak(v1);
LABEL_55:
  v20 = (unint64_t *)&v1->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  return v2;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor const,realityio::InputDescriptor const>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t _RIOBuilderInputDescriptorCFFinalize(const void *a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 16);
}

BOOL _RIOBuilderInputDescriptorCFEqual(_QWORD *a1, _QWORD *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderInputDescriptorCFHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1[2];
  v2 = HIDWORD(v1);
  v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderInputDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderInputDescriptor %p>"), a1);
}

CFStringRef _RIOBuilderInputDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOBuilderInputDescriptor %p>"), a1);
}

_QWORD *realityio::DescendantPrimInputDescriptor::DescendantPrimInputDescriptor(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (__int128 *)&__p, a3, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &off_24FDE4AE8;
  std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100](a1 + 6, a4);
  return a1;
}

void sub_2301082D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  realityio::InputDescriptor *v14;

  realityio::InputDescriptor::~InputDescriptor(v14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::ParentPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF6F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ParentPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF6F20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::ParentPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void realityio::ParentPrimInputDescriptor::~ParentPrimInputDescriptor(realityio::ParentPrimInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *realityio::ParentPrimInputDescriptor::resolvedPrimPaths@<X0>(realityio::ParentPrimInputDescriptor *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *result;
  unsigned int v8;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  if (*(_QWORD *)a2 != *result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2);
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, &v8, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return (_QWORD *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  }
  return result;
}

void sub_2301083F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::ObjCCustomInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF6FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ObjCCustomInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF6FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::ObjCCustomInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

realityio::ArbitraryComponentStructBuilder *realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(realityio::ArbitraryComponentStructBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _anonymous_namespace_::ArbitraryComponentStructDirtyPrimDescriptor *v17;
  _BYTE *v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t i;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  void **v32[3];
  void **v33[3];
  uint64_t v34;
  __int128 v35;
  void **v36[3];
  _QWORD *v37[3];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41[3];
  _QWORD *v42[3];
  __int128 v43;
  _QWORD *v44[3];
  uint64_t v45;
  uint64_t v46;
  void ***v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD *v51;
  _OWORD v52[3];
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v30, "ArbitraryComponentStructBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kArbitraryComponentStructBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54C58);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54C58))
  {
    v15 = operator new();
    v16 = operator new();
    memset(v42, 0, sizeof(v42));
    v17 = (_anonymous_namespace_::ArbitraryComponentStructDirtyPrimDescriptor *)operator new();
    v52[0] = v40;
    v40 = 0uLL;
    v18 = (_BYTE *)operator new();
    MEMORY[0x2348B274C](&v38, "RealityKitAnimationFile");
    memset(v37, 0, sizeof(v37));
    memset(v36, 0, sizeof(v36));
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v18, &v38, v37, v36);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v39, (uint64_t)v18);
    v52[1] = v39;
    v39 = 0uLL;
    v19 = (_BYTE *)operator new();
    MEMORY[0x2348B274C](&v34, "RealityKitClipDefinition");
    memset(v33, 0, sizeof(v33));
    memset(v32, 0, sizeof(v32));
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v19, &v34, v33, v32);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v35, (uint64_t)v19);
    v52[2] = v35;
    v35 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v41, v52, 3uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v42, v41);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v43, v16);
    v53 = v43;
    v43 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v44, &v53, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v44);
    v20 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v45, v15);
    _MergedGlobals_43 = v45;
    unk_255E54C50 = v46;
    v45 = 0;
    v46 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v20);
    v47 = (void ***)v44;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v53);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
    v47 = (void ***)v41;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
    for (i = 2; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v52[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v35);
    v47 = v32;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
    v32[0] = (void **)v33;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v32);
    if ((v34 & 7) != 0)
    {
      v22 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
    v33[0] = (void **)v36;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v33);
    v36[0] = (void **)v37;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v36);
    if ((v38 & 7) != 0)
    {
      v24 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v40);
    *(_QWORD *)&v52[0] = v42;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
    __cxa_guard_release(&qword_255E54C58);
  }
  v26 = _MergedGlobals_43;
  v27 = (std::__shared_weak_count *)unk_255E54C50;
  if (unk_255E54C50)
  {
    v5 = (unint64_t *)(unk_255E54C50 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v51 = v50;
  v48[0] = &off_24FDF71D0;
  v49 = v48;
  v50[0] = &off_24FDF7150;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v30, (uint64_t)__p, &v26, (uint64_t)v50, (uint64_t)v48);
  v7 = v49;
  if (v49 == v48)
  {
    v8 = 4;
    v7 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_10:
  v9 = v51;
  if (v51 == v50)
  {
    v10 = 4;
    v9 = v50;
    goto LABEL_14;
  }
  if (v51)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v11 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  *(_QWORD *)this = &off_24FDF7000;
  return this;
}

void sub_23010894C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char ***a24,uint64_t a25,uint64_t a26,char **a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t i;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v52 - 112);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  *(_QWORD *)(v52 - 232) = &a45;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 232));
  for (i = 32; i != -16; i -= 16)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v52 - 160 + i);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  *(_QWORD *)(v52 - 232) = &a24;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 232));
  a24 = &a27;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if ((a30 & 7) != 0)
  {
    v55 = (unsigned int *)(a30 & 0xFFFFFFFFFFFFFFF8);
    do
      v56 = __ldxr(v55);
    while (__stlxr(v56 - 2, v55));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  a27 = &a34;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  a34 = &a37;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  if ((a40 & 7) != 0)
  {
    v57 = (unsigned int *)(a40 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  *(_QWORD *)(v52 - 160) = &a48;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 160));
  MEMORY[0x2348B4E1C](v51, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54C58);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void realityio::ArbitraryComponentStructBuilder::run(realityio::ArbitraryComponentStructBuilder *this, realityio::Inputs *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  pxrInternal__aapl__pxrReserved__::UsdStage *v14;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  pxrInternal__aapl__pxrReserved__::UsdStage *v29;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 __p;
  _BYTE v45[7];
  char v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;

  v5 = *((_QWORD *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v50 = v5;
  v51 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentStructPrimPath");
  std::allocate_shared[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath const&,void>(&v48, (_DWORD *)this + 2);
  realityio::Outputs::storeValue<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>(v5, &__p, &v48);
  v8 = v49;
  if (v49)
  {
    v9 = (unint64_t *)&v49->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v46 < 0)
    operator delete((void *)__p);
  v11 = v51;
  if (v51)
  {
    v12 = (unint64_t *)&v51->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v14, (realityio::Inputs *)((char *)a2 + 32));
  if (!*((_QWORD *)&__p + 1) || (*(_BYTE *)(*((_QWORD *)&__p + 1) + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&__p + 1), v15);
  v16 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
  if ((v47 & 7) != 0)
  {
    v17 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v45);
  if (*((_QWORD *)&__p + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  if (v16)
  {
    v20 = *((_QWORD *)this + 2);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v50 = v20;
    v51 = v19;
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentAnimationFilePrimPath");
    std::allocate_shared[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath const&,void>(&v48, (_DWORD *)this + 2);
    realityio::Outputs::storeValue<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>(v20, &__p, &v48);
    v23 = v49;
    if (v49)
    {
      v24 = (unint64_t *)&v49->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v46 < 0)
      operator delete((void *)__p);
    v26 = v51;
    if (v51)
    {
      v27 = (unint64_t *)&v51->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  v29 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v29, (realityio::Inputs *)((char *)a2 + 32));
  if (!*((_QWORD *)&__p + 1) || (*(_BYTE *)(*((_QWORD *)&__p + 1) + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&__p + 1), v30);
  v31 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
  if ((v47 & 7) != 0)
  {
    v32 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v45);
  if (*((_QWORD *)&__p + 1))
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
  if (v31)
  {
    v35 = *((_QWORD *)this + 2);
    v34 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v50 = v35;
    v51 = v34;
    if (v34)
    {
      v36 = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentClipDefinitionPrimPath");
    std::allocate_shared[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath const&,void>(&v48, (_DWORD *)this + 2);
    realityio::Outputs::storeValue<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>(v35, &__p, &v48);
    v38 = v49;
    if (v49)
    {
      v39 = (unint64_t *)&v49->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v46 < 0)
      operator delete((void *)__p);
    v41 = v51;
    if (v51)
    {
      v42 = (unint64_t *)&v51->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
}

void sub_230109070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDF72A0;
  v7[3] = &off_24FDF72F0;
  v8 = *a3;
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v7[4] = v8;
  v7[5] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v17 = a2;
  v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v17);
  v14 = (std::__shared_weak_count *)v13[8];
  v13[7] = (uint64_t)(v7 + 3);
  v13[8] = (uint64_t)v7;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_230109260(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::ArbitraryComponentStructBuilder::clear(realityio::ArbitraryComponentStructBuilder *this, realityio::Inputs *a2)
{
  std::__shared_weak_count *v3;
  std::mutex *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::mutex *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  std::mutex *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  void *__p[2];
  char v43;
  std::mutex *v44;
  std::__shared_weak_count *v45;

  v4 = (std::mutex *)*((_QWORD *)this + 2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v44 = v4;
  v45 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentStructPrimPath");
  std::mutex::lock(v4 + 1);
  v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v4->__m_.__opaque[32], (const void **)__p);
  std::mutex::unlock(v4 + 1);
  if (v43 < 0)
    operator delete(__p[0]);
  if (v3)
  {
    v8 = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (&v4->__m_.__opaque[40] != (char *)v7)
  {
    v11 = *((_QWORD *)this + 2);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v44 = (std::mutex *)v11;
    v45 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentStructPrimPath");
    std::mutex::lock((std::mutex *)(v11 + 64));
    if (v11 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v11 + 40, (const void **)__p))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v11 + 40), (const void **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v11, (unsigned __int8 *)__p);
    std::mutex::unlock((std::mutex *)(v11 + 64));
    if (v43 < 0)
      operator delete(__p[0]);
    if (v10)
    {
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v17 = (std::mutex *)*((_QWORD *)this + 2);
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v44 = v17;
  v45 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentAnimationFilePrimPath");
  std::mutex::lock(v17 + 1);
  v20 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v17->__m_.__opaque[32], (const void **)__p);
  std::mutex::unlock(v17 + 1);
  if (v43 < 0)
    operator delete(__p[0]);
  if (v16)
  {
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (&v17->__m_.__opaque[40] != (char *)v20)
  {
    v24 = *((_QWORD *)this + 2);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v44 = (std::mutex *)v24;
    v45 = v23;
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentAnimationFilePrimPath");
    std::mutex::lock((std::mutex *)(v24 + 64));
    if (v24 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v24 + 40, (const void **)__p))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v24 + 40), (const void **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v24, (unsigned __int8 *)__p);
    std::mutex::unlock((std::mutex *)(v24 + 64));
    if (v43 < 0)
      operator delete(__p[0]);
    if (v23)
    {
      v27 = (unint64_t *)&v23->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v30 = (std::mutex *)*((_QWORD *)this + 2);
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v44 = v30;
  v45 = v29;
  if (v29)
  {
    v31 = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentClipDefinitionPrimPath");
  std::mutex::lock(v30 + 1);
  v33 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v30->__m_.__opaque[32], (const void **)__p);
  std::mutex::unlock(v30 + 1);
  if (v43 < 0)
    operator delete(__p[0]);
  if (v29)
  {
    v34 = (unint64_t *)&v29->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (&v30->__m_.__opaque[40] != (char *)v33)
  {
    v37 = *((_QWORD *)this + 2);
    v36 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v44 = (std::mutex *)v37;
    v45 = v36;
    if (v36)
    {
      v38 = (unint64_t *)&v36->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentClipDefinitionPrimPath");
    std::mutex::lock((std::mutex *)(v37 + 64));
    if (v37 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v37 + 40, (const void **)__p))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v37 + 40), (const void **)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v37, (unsigned __int8 *)__p);
    std::mutex::unlock((std::mutex *)(v37 + 64));
    if (v43 < 0)
      operator delete(__p[0]);
    if (v36)
    {
      v40 = (unint64_t *)&v36->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
}

void sub_2301096DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::mutex *v16;

  std::mutex::unlock(v16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void realityio::ArbitraryComponentStructBuilder::~ArbitraryComponentStructBuilder(realityio::ArbitraryComponentStructBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

_anonymous_namespace_::ArbitraryComponentStructDirtyPrimDescriptor *`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor::ArbitraryComponentStructDirtyPrimDescriptor(_anonymous_namespace_::ArbitraryComponentStructDirtyPrimDescriptor *this)
{
  void **v3[3];
  _QWORD *v4[3];
  void ***v5;

  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor((uint64_t)this, v4, v3);
  v5 = v3;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  v3[0] = (void **)v4;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v3);
  *(_QWORD *)this = off_24FDF7078;
  return this;
}

void sub_230109808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v3 - 40) = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24FDF70D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_230109880(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor::~ArbitraryComponentStructDirtyPrimDescriptor(_anonymous_namespace_::ArbitraryComponentStructDirtyPrimDescriptor *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_24FDF1378;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_24FDF1378;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2348B4E1C](this, 0x10A1C402FEF67C7);
}

uint64_t `anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *a4, int a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  BOOL v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t IsValid;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  pxrInternal__aapl__pxrReserved__ *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  BOOL v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  pxrInternal__aapl__pxrReserved__ *v48;
  pxrInternal__aapl__pxrReserved__ *v49;
  unsigned int *v50;
  unsigned int v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v59;
  pxrInternal__aapl__pxrReserved__ *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  BOOL v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  pxrInternal__aapl__pxrReserved__ *v74;
  pxrInternal__aapl__pxrReserved__ *v75;
  unsigned int *v76;
  unsigned int v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  int v92;
  pxrInternal__aapl__pxrReserved__::SdfPath *v93;
  uint64_t v94;
  pxrInternal__aapl__pxrReserved__ *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  pxrInternal__aapl__pxrReserved__ *v101;
  _BYTE v102[4];
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  pxrInternal__aapl__pxrReserved__ *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  pxrInternal__aapl__pxrReserved__ *v111;
  _BYTE v112[4];
  int v113;
  uint64_t v114;
  _BYTE v115[24];
  _BYTE *v116;
  _BYTE v117[24];
  _BYTE *v118;
  _BYTE v119[24];
  _BYTE *v120;
  _BYTE v121[24];
  _BYTE *v122;
  _BYTE v123[24];
  _BYTE *v124;
  _BYTE v125[24];
  _BYTE *v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2348B274C](&v110, "RealityKitStruct");
  v17 = v110;
  if ((*a6 & 0xFFFFFFFFFFFFFFF8) == (v110 & 0xFFFFFFFFFFFFFFF8))
  {
    v21 = 0;
  }
  else
  {
    MEMORY[0x2348B274C](&v106, "RealityKitDict");
    v18 = v106;
    if ((*a6 & 0xFFFFFFFFFFFFFFF8) == (v106 & 0xFFFFFFFFFFFFFFF8))
    {
      v21 = 0;
    }
    else
    {
      MEMORY[0x2348B274C](&v100, "Struct");
      v19 = v100;
      if ((*a6 & 0xFFFFFFFFFFFFFFF8) == (v100 & 0xFFFFFFFFFFFFFFF8))
      {
        v21 = 0;
      }
      else
      {
        MEMORY[0x2348B274C](&v94, "Dict");
        v20 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
        v21 = (*a6 & 0xFFFFFFFFFFFFFFF8) != (v94 & 0xFFFFFFFFFFFFFFF8);
        if ((v94 & 7) != 0)
        {
          do
            v22 = __ldxr(v20);
          while (__stlxr(v22 - 2, v20));
        }
        v19 = v100;
      }
      if ((v19 & 7) != 0)
      {
        v23 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      v18 = v106;
    }
    if ((v18 & 7) != 0)
    {
      v25 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    v17 = v110;
  }
  if ((v17 & 7) != 0)
  {
    v27 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if (v21)
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a4, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v106, (uint64_t)&v110);
  if ((v109 & 7) != 0)
  {
    v30 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v93 = a2;
  v92 = a5;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
  v32 = (uint64_t)v107;
  if (v107)
  {
LABEL_27:
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
    goto LABEL_28;
  }
  while (1)
  {
LABEL_28:
    if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v110))
      goto LABEL_77;
    v34 = v111;
    if (!v111 || (*((_BYTE *)v111 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v111, v33);
    v35 = (_QWORD *)*((_QWORD *)v34 + 3);
    MEMORY[0x2348B274C](&v106, "RealityKitComponent");
    v36 = v106;
    if ((*v35 & 0xFFFFFFFFFFFFFFF8) == (v106 & 0xFFFFFFFFFFFFFFF8))
    {
      v40 = 1;
    }
    else
    {
      MEMORY[0x2348B274C](&v100, "RealityKitCustomComponent");
      v37 = v100;
      if ((*v35 & 0xFFFFFFFFFFFFFFF8) == (v100 & 0xFFFFFFFFFFFFFFF8))
      {
        v40 = 1;
      }
      else
      {
        MEMORY[0x2348B274C](&v94, "Component");
        v38 = v94;
        if ((*v35 & 0xFFFFFFFFFFFFFFF8) == (v94 & 0xFFFFFFFFFFFFFFF8))
        {
          v40 = 1;
        }
        else
        {
          MEMORY[0x2348B274C](&v105, "CustomComponent");
          v39 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
          v40 = (*v35 & 0xFFFFFFFFFFFFFFF8) == (v105 & 0xFFFFFFFFFFFFFFF8);
          if ((v105 & 7) != 0)
          {
            do
              v41 = __ldxr(v39);
            while (__stlxr(v41 - 2, v39));
          }
          v38 = v94;
        }
        if ((v38 & 7) != 0)
        {
          v42 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
          do
            v43 = __ldxr(v42);
          while (__stlxr(v43 - 2, v42));
        }
        v37 = v100;
      }
      if ((v37 & 7) != 0)
      {
        v44 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      v36 = v106;
    }
    if ((v36 & 7) != 0)
    {
      v46 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
      do
        v47 = __ldxr(v46);
      while (__stlxr(v47 - 2, v46));
    }
    if (v40)
      break;
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v110, (uint64_t)&v106);
    LODWORD(v110) = v106;
    v48 = v107;
    v107 = 0;
    v49 = v111;
    v111 = v48;
    if (v49)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v49);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v112, &v108);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v113);
    if ((v114 & 7) != 0)
    {
      v50 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
    v114 = v109;
    v109 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
    v32 = (uint64_t)v107;
    if (v107)
      goto LABEL_27;
  }
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v125, a7);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v123, a8);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v121, a9);
  v52 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, a2, a3, a4, a5, (int)a6, (uint64_t)v125, (uint64_t)v123, (uint64_t)v121);
  v53 = v122;
  if (v122 == v121)
  {
    v54 = 4;
    v53 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_65;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_65:
  v55 = v124;
  if (v124 == v123)
  {
    v56 = 4;
    v55 = v123;
  }
  else
  {
    if (!v124)
      goto LABEL_70;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_70:
  v57 = v126;
  if (v126 == v125)
  {
    v58 = 4;
    v57 = v125;
  }
  else
  {
    if (!v126)
    {
      if ((v52 & 1) != 0)
        goto LABEL_75;
      goto LABEL_77;
    }
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
  if ((v52 & 1) != 0)
  {
LABEL_75:
    IsValid = 1;
    goto LABEL_143;
  }
LABEL_77:
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a3, a2);
    IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v106);
    if ((IsValid & 1) == 0)
    {
      v78 = 1;
      goto LABEL_136;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v106, (uint64_t)&v100);
    while (1)
    {
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v100))
        goto LABEL_128;
      v60 = v101;
      if (!v101 || (*((_BYTE *)v101 + 57) & 8) != 0)
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v101, v59);
      v61 = (_QWORD *)*((_QWORD *)v60 + 3);
      MEMORY[0x2348B274C](&v94, "RealityKitComponent");
      v62 = v94;
      if ((*v61 & 0xFFFFFFFFFFFFFFF8) == (v94 & 0xFFFFFFFFFFFFFFF8))
      {
        v66 = 1;
      }
      else
      {
        MEMORY[0x2348B274C](&v105, "RealityKitCustomComponent");
        v63 = v105;
        if ((*v61 & 0xFFFFFFFFFFFFFFF8) == (v105 & 0xFFFFFFFFFFFFFFF8))
        {
          v66 = 1;
        }
        else
        {
          MEMORY[0x2348B274C](&v99, "Component");
          v64 = v99;
          if ((*v61 & 0xFFFFFFFFFFFFFFF8) == (v99 & 0xFFFFFFFFFFFFFFF8))
          {
            v66 = 1;
          }
          else
          {
            MEMORY[0x2348B274C](&v98, "CustomComponent");
            v65 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
            v66 = (*v61 & 0xFFFFFFFFFFFFFFF8) == (v98 & 0xFFFFFFFFFFFFFFF8);
            if ((v98 & 7) != 0)
            {
              do
                v67 = __ldxr(v65);
              while (__stlxr(v67 - 2, v65));
            }
            v64 = v99;
          }
          if ((v64 & 7) != 0)
          {
            v68 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFF8);
            do
              v69 = __ldxr(v68);
            while (__stlxr(v69 - 2, v68));
          }
          v63 = v105;
        }
        if ((v63 & 7) != 0)
        {
          v70 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
          do
            v71 = __ldxr(v70);
          while (__stlxr(v71 - 2, v70));
        }
        v62 = v94;
      }
      if ((v62 & 7) != 0)
      {
        v72 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      if (v66)
        break;
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v100, (uint64_t)&v94);
      LODWORD(v100) = v94;
      v74 = v95;
      v95 = 0;
      v75 = v101;
      v101 = v74;
      if (v75)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v75);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v102, &v96);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v103);
      if ((v104 & 7) != 0)
      {
        v76 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      v104 = v97;
      v97 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v96);
      if (v95)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v95);
    }
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v119, a7);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v117, a8);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v115, a9);
    v78 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, v93, a3, a4, v92, (int)a6, (uint64_t)v119, (uint64_t)v117, (uint64_t)v115);
    v79 = v116;
    if (v116 == v115)
    {
      v80 = 4;
      v79 = v115;
    }
    else
    {
      if (!v116)
        goto LABEL_118;
      v80 = 5;
    }
    (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_118:
    v81 = v118;
    if (v118 == v117)
    {
      v82 = 4;
      v81 = v117;
    }
    else
    {
      if (!v118)
        goto LABEL_123;
      v82 = 5;
    }
    (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_123:
    v83 = v120;
    if (v120 == v119)
    {
      v84 = 4;
      v83 = v119;
    }
    else
    {
      if (!v120)
      {
        if (!v78)
        {
LABEL_131:
          if ((v104 & 7) != 0)
          {
            v85 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
            do
              v86 = __ldxr(v85);
            while (__stlxr(v86 - 2, v85));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v102);
          if (v101)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v101);
LABEL_136:
          if ((v109 & 7) != 0)
          {
            v87 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFF8);
            do
              v88 = __ldxr(v87);
            while (__stlxr(v88 - 2, v87));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
          if (v107)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v107);
          if (v78)
            goto LABEL_143;
          goto LABEL_142;
        }
LABEL_130:
        v78 = 1;
        goto LABEL_131;
      }
      v84 = 5;
    }
    (*(void (**)(void))(*v83 + 8 * v84))();
    if ((v78 & 1) == 0)
    {
LABEL_128:
      v78 = 0;
      goto LABEL_131;
    }
    goto LABEL_130;
  }
LABEL_142:
  IsValid = 0;
LABEL_143:
  if ((v114 & 7) != 0)
  {
    v89 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stlxr(v90 - 2, v89));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v112);
  if (v111)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v111);
  return IsValid;
}

void sub_23010A290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char *a40,char a41,uint64_t a42,uint64_t a43,char *a44)
{
  uint64_t v44;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;

  v46 = a40;
  if (a40 == &a37)
  {
    v47 = 4;
    v46 = &a37;
  }
  else
  {
    if (!a40)
      goto LABEL_6;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_6:
  v48 = a44;
  if (a44 == &a41)
  {
    v49 = 4;
    v48 = &a41;
  }
  else
  {
    if (!a44)
      goto LABEL_11;
    v49 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_11:
  v50 = *(_QWORD **)(v44 - 200);
  if (v50 == (_QWORD *)(v44 - 224))
  {
    v51 = 4;
    v50 = (_QWORD *)(v44 - 224);
  }
  else
  {
    if (!v50)
      goto LABEL_16;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_16:
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a24);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a29);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a33);
  _Unwind_Resume(a1);
}

CFStringRef `anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor::description@<X0>(CFStringRef *a1@<X8>)
{
  CFStringRef result;

  *a1 = 0;
  result = CFStringCreateWithCString(0, "ArbitraryComponentStructDirtyPrimDescriptor", 0x8000100u);
  *a1 = result;
  return result;
}

void sub_23010A618(_Unwind_Exception *a1)
{
  const void **v1;

  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor *,std::shared_ptr<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>::__shared_ptr_default_delete<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor,`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>,std::allocator<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_pointer<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor *,std::shared_ptr<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>::__shared_ptr_default_delete<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor,`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>,std::allocator<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor *,std::shared_ptr<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>::__shared_ptr_default_delete<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor,`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>,std::allocator<`anonymous namespace'::ArbitraryComponentStructDirtyPrimDescriptor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF7150;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF7150;
}

char *std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF71D0;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF71D0;
}

void std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v5;
  std::string::size_type v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v12;
  std::__shared_weak_count *v13;
  std::string::size_type v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v20;
  std::__shared_weak_count *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  void *v35;
  std::__shared_weak_count *v36;
  std::string::size_type v37;
  std::__shared_weak_count *v38;
  void *__p;
  std::__shared_weak_count *v40;
  char v41;
  std::string::size_type v42;
  std::__shared_weak_count *v43;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentStructPrimPath");
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v37) = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)Data + 1, (int *)&v37, &v42);
  v6 = v42;
  v5 = v43;
  v42 = 0;
  v43 = 0;
  if (v41 < 0)
    operator delete(__p);
  v42 = v6;
  v43 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v42);
  v9 = v43;
  if (v43)
  {
    v10 = (unint64_t *)&v43->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentAnimationFilePrimPath");
  v12 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v12)
    v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v35) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)v12 + 4, (int *)&v35, &v37);
  v14 = v37;
  v13 = v38;
  v37 = 0;
  v38 = 0;
  if (v41 < 0)
    operator delete(__p);
  v37 = v14;
  v38 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v37);
  v17 = v38;
  if (v38)
  {
    v18 = (unint64_t *)&v38->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentClipDefinitionPrimPath");
  v20 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v20)
    v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v34 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)v20 + 5, &v34, &v35);
  v22 = v35;
  v21 = v36;
  v35 = 0;
  v36 = 0;
  if (v41 < 0)
    operator delete(__p);
  __p = v22;
  v40 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, (std::string::size_type *)&__p);
  v25 = v40;
  if (v40)
  {
    v26 = (unint64_t *)&v40->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v21)
  {
    v28 = (unint64_t *)&v21->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v13)
  {
    v30 = (unint64_t *)&v13->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v5)
  {
    v32 = (unint64_t *)&v5->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_23010AB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;

  if (a20 < 0)
    operator delete(__p);
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v23)
  {
    v29 = (unint64_t *)&v23->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  do
    v31 = __ldaxr(v25);
  while (__stlxr(v31 - 1, v25));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentStructBuilder::ArbitraryComponentStructBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

_DWORD *std::allocate_shared[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath const&,void>(_QWORD *a1, _DWORD *a2)
{
  _QWORD *v4;
  _DWORD *result;

  v4 = operator new(0x20uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF7250;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v4 + 6, a2);
  result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v4 + 7, a2 + 1);
  *a1 = v4 + 3;
  a1[1] = v4;
  return result;
}

void std::__shared_ptr_emplace<pxrInternal__aapl__pxrReserved__::SdfPath>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<pxrInternal__aapl__pxrReserved__::SdfPath>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7250;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<pxrInternal__aapl__pxrReserved__::SdfPath>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF72A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF72A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_24FDF72F0;
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<pxrInternal__aapl__pxrReserved__::SdfPath>>::getRawValue(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

realityio::SkeletalAnimationAggregationBuilder *realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(realityio::SkeletalAnimationAggregationBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "SkeletalAnimationAggregationBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSkeletalAnimationAggregationBuilderIdentifier);
  realityio::generateSkeletalMeshDirtyStageSubscription(&v12);
  v20[0] = &off_24FDF7398;
  v21 = v20;
  v18[0] = &off_24FDF74A8;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDF7320;
  return this;
}

void sub_23010B08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAggregationBuilder::createSkeletalAnimationAssetsAndAppendToArrayHelper(uint64_t result, uint64_t a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, std::vector<std::string>::size_type *a5, uint64_t *a6, void **a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t SkeletonAtIndex;
  uint64_t ServiceLocator;
  uint64_t TimelineAsset;
  uint64_t v20;
  uint64_t String;
  char *v22;
  size_t v23;
  void **v24;
  char *v25;
  void **v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  std::vector<std::string>::size_type **v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  std::vector<std::string>::size_type **v44;
  unint64_t v45;
  char *v46;
  char *v47;
  std::vector<std::string>::size_type *v48;
  uint64_t v49;
  void *__p[2];
  char v51;
  _QWORD v52[5];

  v7 = (_QWORD *)(a3 + 72);
  v8 = *(_QWORD **)(a3 + 72);
  if (v8)
  {
    v13 = (uint64_t *)result;
    v14 = (_QWORD *)(a3 + 72);
    do
    {
      result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), a4);
      v15 = v8 + 1;
      if (!(_DWORD)result)
      {
        v15 = v8;
        v14 = v8;
      }
      v8 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v14 != v7)
    {
      result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v14 + 28));
      if ((result & 1) == 0)
      {
        v16 = *((unsigned int *)v14 + 9);
        if ((_DWORD)v16 != -1)
        {
          SkeletonAtIndex = REMeshAssetGetSkeletonAtIndex();
          result = realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT::createTimelineDefinitionRef(a5, v16, SkeletonAtIndex);
          if (result)
          {
            ServiceLocator = REEngineGetServiceLocator();
            MEMORY[0x2348B1264](ServiceLocator);
            TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
            if (TimelineAsset)
            {
              v20 = TimelineAsset;
              String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a4);
              v22 = (char *)String;
              if (*(char *)(String + 23) >= 0)
                v23 = *(unsigned __int8 *)(String + 23);
              else
                v23 = *(_QWORD *)(String + 8);
              std::string::basic_string[abi:ne180100]((uint64_t)__p, v23 + 23);
              if (v51 >= 0)
                v24 = __p;
              else
                v24 = (void **)__p[0];
              if (v23)
              {
                if (v22[23] >= 0)
                  v25 = v22;
                else
                  v25 = *(char **)v22;
                memmove(v24, v25, v23);
              }
              strcpy((char *)v24 + v23, "_skeletalAnimationAsset");
              if (v51 >= 0)
                v26 = __p;
              else
                v26 = (void **)__p[0];
              realityio::Builder::addAsset(v13, v20, (uint64_t)v26);
              v49 = v20;
              RERetain();
              v27 = a6[2];
              v28 = (uint64_t *)a6[1];
              if ((unint64_t)v28 >= v27)
              {
                v30 = ((uint64_t)v28 - *a6) >> 3;
                if ((unint64_t)(v30 + 1) >> 61)
                  std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
                v31 = v27 - *a6;
                v32 = v31 >> 2;
                if (v31 >> 2 <= (unint64_t)(v30 + 1))
                  v32 = v30 + 1;
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
                  v33 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v33 = v32;
                v52[4] = a6 + 2;
                if (v33)
                  v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a6 + 2), v33);
                else
                  v34 = 0;
                v35 = (uint64_t *)&v34[8 * v30];
                v52[0] = v34;
                v52[1] = v35;
                v52[3] = &v34[8 * v33];
                *v35 = v49;
                v49 = 0;
                v52[2] = v35 + 1;
                std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer(a6, v52);
                v29 = (_QWORD *)a6[1];
                std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)v52);
              }
              else
              {
                *v28 = v49;
                v29 = v28 + 1;
                v49 = 0;
                a6[1] = (uint64_t)v29;
              }
              a6[1] = (uint64_t)v29;
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v49);
              v37 = (std::vector<std::string>::size_type **)a7[1];
              v36 = (unint64_t)a7[2];
              if ((unint64_t)v37 >= v36)
              {
                v39 = ((char *)v37 - (_BYTE *)*a7) >> 3;
                if ((unint64_t)(v39 + 1) >> 61)
                  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                v40 = v36 - (_QWORD)*a7;
                v41 = v40 >> 2;
                if (v40 >> 2 <= (unint64_t)(v39 + 1))
                  v41 = v39 + 1;
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                  v42 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v42 = v41;
                if (v42)
                  v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v42);
                else
                  v43 = 0;
                v44 = (std::vector<std::string>::size_type **)(v42 + 8 * v39);
                v45 = v42 + 8 * v43;
                *v44 = a5;
                v38 = v44 + 1;
                v47 = (char *)*a7;
                v46 = (char *)a7[1];
                if (v46 != *a7)
                {
                  do
                  {
                    v48 = (std::vector<std::string>::size_type *)*((_QWORD *)v46 - 1);
                    v46 -= 8;
                    *--v44 = v48;
                  }
                  while (v46 != v47);
                  v46 = (char *)*a7;
                }
                *a7 = v44;
                a7[1] = v38;
                a7[2] = (void *)v45;
                if (v46)
                  operator delete(v46);
              }
              else
              {
                *v37 = a5;
                v38 = v37 + 1;
              }
              a7[1] = v38;
              RERelease();
              if (v51 < 0)
                operator delete(__p[0]);
            }
            return RERelease();
          }
        }
      }
    }
  }
  return result;
}

void sub_23010B468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)&a17);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfPath *pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

uint64_t realityio::SkeletalAnimationAggregationBuilder::kOutputName(realityio::SkeletalAnimationAggregationBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "skeletal_animation_scene_data");
    realityio::SkeletalAnimationAggregationBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::SkeletalAnimationAggregationBuilder::kOutputName(void)::kOutputName;
}

void sub_23010B55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(realityio::SkeletalAnimationAggregationBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "blendshape_animation_scene_data");
    realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(void)::kOutputName;
}

void sub_23010B610(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAggregationBuilder::run(realityio::SkeletalAnimationAggregationBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  realityio::EntityBuilder *v9;
  uint64_t v10;
  uint64_t v11;
  realityio::MeshAssetBuilder *v12;
  std::string::value_type *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  realityio::SkeletalAnimationAssetBuilder *v18;
  uint64_t v19;
  realityio::Inputs *v20;
  pxrInternal__aapl__pxrReserved__::UsdStage *v21;
  char *PrimPath;
  unsigned int *v23;
  unsigned int v24;
  realityio *v25;
  NSObject *v26;
  uint64_t v27;
  realityio::SkeletonPoseDefinitionBuilder *v28;
  uint64_t v29;
  uint64_t Text;
  realityio::Inputs *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::mutex *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  const void **EmptyString;
  std::mutex *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  std::string *v51;
  __int128 v52;
  std::string::size_type size;
  std::string::size_type v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  std::string *v68;
  __int128 v69;
  uint64_t String;
  int v71;
  const std::string::value_type *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  char v78;
  char *v79;
  unsigned int *v80;
  unsigned int v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  realityio::SkeletalAnimationAssetBuilder *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD **v92;
  std::string::size_type i;
  _DWORD *v94;
  uint64_t *v95;
  uint64_t **v96;
  uint64_t **v97;
  pxrInternal__aapl__pxrReserved__::SdfPath *v98;
  void **v99;
  uint64_t v100;
  _QWORD *v101;
  realityio *v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  realityio::SkeletalAnimationAssetBuilder *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  realityio::SkeletonPoseDefinitionBuilder *v111;
  uint64_t v112;
  _QWORD *v113;
  realityio::SkeletalAnimationAggregationBuilder *v114;
  std::string::size_type v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  __int128 *v119;
  __int128 *v120;
  __int128 *v121;
  __int128 *v122;
  __int128 *v123;
  __int128 *v124;
  BOOL v125;
  uint64_t ServiceLocator;
  uint64_t v127;
  std::string *v128;
  std::string *v129;
  uint64_t v130;
  realityio::SkeletalAnimationAggregationBuilder *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  __int128 *v136;
  std::string *v137;
  realityio::Inputs *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  std::mutex *v149;
  unint64_t *v150;
  unint64_t v151;
  const void **v152;
  std::mutex *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  std::string *v158;
  __int128 v159;
  std::string::size_type v160;
  std::string::size_type v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  std::string *v171;
  __int128 v172;
  uint64_t v173;
  int v174;
  const std::string::value_type *v175;
  std::string::size_type v176;
  std::string *v177;
  __int128 v178;
  std::string *v179;
  __int128 v180;
  char v181;
  unsigned int *v182;
  unsigned int v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  realityio::SkeletalAnimationAggregationBuilder *v193;
  std::string::size_type v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  __int128 *v198;
  realityio *v199;
  NSObject *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  uint64_t result;
  uint64_t v207;
  uint64_t v208;
  realityio::SkeletalAnimationAggregationBuilder *v209;
  realityio::SkeletalAnimationAggregationBuilder *v210;
  __int128 v211;
  __int128 v212;
  int v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219[2];
  uint64_t *v220;
  uint64_t *v221;
  uint64_t v222;
  _QWORD **v223;
  _QWORD *v224;
  uint64_t v225;
  _BYTE v226[4];
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233[8];
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  realityio::Inputs *v237;
  std::string v238;
  std::string v239;
  std::string v240;
  std::string *v241;
  std::string v242;
  void *v243;
  char v244;
  void *__p[2];
  realityio::SkeletalAnimationAggregationBuilder *v246;
  void *v247;
  char v248;
  __int128 v249;
  std::string v250;
  uint64_t (**v251)();
  __int128 v252;
  _BYTE v253[23];
  char v254;
  uint8_t buf[4];
  _BYTE v256[12];
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;

  v259 = *MEMORY[0x24BDAC8D0];
  v237 = a2;
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  v6 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v233, &v231);
  v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v6 + 64, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v231);
  v8 = (_QWORD *)(v6 + 72) != v7 && *(_QWORD *)(*(_QWORD *)(v6 + 40) + 104 * v7[5] + 24) == v231;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v9 = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v231);
  if (v8)
  {
    v10 = (uint64_t)v237;
    v11 = realityio::EntityBuilder::kOutputName(v9);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v10, v11, (uint64_t)&v231);
    v13 = (std::string::value_type *)&v249;
    if (!(_BYTE)v231 || !v232)
    {
      v20 = v237;
      v21 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)v237 + 8));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v21, (realityio::Inputs *)((char *)v20 + 32));
      PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)buf);
      if ((v258 & 7) != 0)
      {
        v23 = (unsigned int *)(v258 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v257);
      v25 = *(realityio **)&v256[4];
      if (*(_QWORD *)&v256[4])
        v25 = (realityio *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v256[4]);
      v26 = *(id *)(realityio::logObjects(v25) + 24);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v256 = Text;
        _os_log_error_impl(&dword_22FF26000, v26, OS_LOG_TYPE_ERROR, "Stopping operation to set skeletal components because the entity does not exist at path (%s).\n", buf, 0xCu);
      }

      goto LABEL_286;
    }
    v230 = v232;
    v14 = (uint64_t)v237;
    v15 = realityio::MeshAssetBuilder::kOutputName(v12);
    realityio::Inputs::_getValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>(v14, v15, (uint64_t)buf);
    if (!buf[0] || (v16 = *(_QWORD *)&v256[4]) == 0)
    {
LABEL_285:
      realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)buf);
LABEL_286:
      realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v231);
      goto LABEL_287;
    }
    v229 = *(_QWORD *)(**(_QWORD **)&v256[4] + 8);
    if (v229)
      RERetain();
    v228 = 0;
    v17 = *((_QWORD *)v237 + 6);
    v251 = &off_24FDF7528;
    *(_QWORD *)&v252 = &v230;
    *(_QWORD *)v253 = &v251;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v17 + 16))(v17, &v251);
    v18 = *(realityio::SkeletalAnimationAssetBuilder **)v253;
    if (*(uint64_t (****)())v253 == &v251)
    {
      v19 = 4;
      v18 = (realityio::SkeletalAnimationAssetBuilder *)&v251;
    }
    else
    {
      if (!*(_QWORD *)v253)
        goto LABEL_24;
      v19 = 5;
    }
    v18 = (realityio::SkeletalAnimationAssetBuilder *)(*(uint64_t (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_24:
    if (!*(_QWORD *)(v16 + 80))
      goto LABEL_184;
    realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v226, 2030, (uint64_t)this);
    v27 = *((_QWORD *)v237 + 6);
    v251 = &off_24FDF7628;
    *(_QWORD *)&v252 = &v230;
    *((_QWORD *)&v252 + 1) = this;
    *(_QWORD *)v253 = &v251;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v27 + 16))(v27, &v251);
    v28 = *(realityio::SkeletonPoseDefinitionBuilder **)v253;
    if (*(uint64_t (****)())v253 == &v251)
    {
      v29 = 4;
      v28 = (realityio::SkeletonPoseDefinitionBuilder *)&v251;
    }
    else
    {
      if (!*(_QWORD *)v253)
      {
LABEL_30:
        v31 = v237;
        v32 = realityio::SkeletonPoseDefinitionBuilder::kOutputName(v28);
        *(_OWORD *)&v240.__r_.__value_.__l.__data_ = 0uLL;
        v33 = (std::__shared_weak_count *)*((_QWORD *)v31 + 3);
        if (v33)
        {
          v240.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v33);
          if (v240.__r_.__value_.__l.__size_)
            v240.__r_.__value_.__r.__words[0] = *((_QWORD *)v31 + 2);
        }
        MEMORY[0x2348B2764](&v240.__r_.__value_.__r.__words[2], v32);
        v34 = (unint64_t)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((_QWORD **)v31 + 1), &v240);
        v35 = (_QWORD *)v34;
        v37 = v36;
        if ((_QWORD *)v34 != v36)
        {
          v207 = v16;
          v209 = this;
          v38 = 0;
          v39 = 0;
          v214 = 0;
          while (1)
          {
            v40 = v35[5];
            v42 = *(std::mutex **)(v40 + 16);
            v41 = *(std::__shared_weak_count **)(v40 + 24);
            v239.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
            v239.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
            if (v41)
            {
              p_shared_owners = (unint64_t *)&v41->__shared_owners_;
              do
                v44 = __ldxr(p_shared_owners);
              while (__stxr(v44 + 1, p_shared_owners));
            }
            if ((v35[7] & 0xFFFFFFFFFFFFFFF8) != 0)
              EmptyString = (const void **)((v35[7] & 0xFFFFFFFFFFFFFFF8) + 16);
            else
              EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v34);
            v46 = v42 + 1;
            std::mutex::lock(v42 + 1);
            v47 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v42->__m_.__opaque[32], EmptyString);
            v48 = v47;
            v49 = &v42->__m_.__opaque[40];
            if (v49 == (char *)v47)
            {
              std::operator+<char>();
              v51 = std::string::append(&v242, "\" does not exist in the builder outputs");
              v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
              v246 = (realityio::SkeletalAnimationAggregationBuilder *)v51->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v52;
              v51->__r_.__value_.__l.__size_ = 0;
              v51->__r_.__value_.__r.__words[2] = 0;
              v51->__r_.__value_.__r.__words[0] = 0;
              realityio::DetailedError::DetailedError(&v249, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
              v211 = v249;
              size = v250.__r_.__value_.__l.__size_;
              v13 = (std::string::value_type *)v250.__r_.__value_.__r.__words[0];
              v213 = SHIBYTE(v250.__r_.__value_.__r.__words[2]);
              memset(&v250, 0, sizeof(v250));
              if (SHIBYTE(v246) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v242.__r_.__value_.__l.__data_);
              std::mutex::unlock(v46);
              v249 = v211;
              if (v213 < 0)
              {
                std::string::__init_copy_ctor_external(&v250, v13, size);
                v50 = v249;
                v54 = v250.__r_.__value_.__r.__words[0];
                LOBYTE(v213) = *((_BYTE *)&v250.__r_.__value_.__s + 23);
                operator delete(v13);
                v13 = (std::string::value_type *)v54;
                if (v41)
                {
LABEL_52:
                  v55 = (unint64_t *)&v41->__shared_owners_;
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                    std::__shared_weak_count::__release_weak(v41);
                  }
                }
              }
              else
              {
                v50 = v211;
                if (v41)
                  goto LABEL_52;
              }
            }
            else
            {
              v50 = *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8);
              std::mutex::unlock(v46);
              if (v41)
                goto LABEL_52;
            }
            if (v49 == (char *)v48)
            {
              if ((v213 & 0x80) != 0)
                operator delete(v13);
            }
            else if ((unint64_t)v39 >= v214)
            {
              v57 = (v39 - v38) >> 3;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61)
                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v214 - (_QWORD)v38) >> 2 > v58)
                v58 = (uint64_t)(v214 - (_QWORD)v38) >> 2;
              if (v214 - (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v58;
              if (v34)
                v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v34);
              else
                v59 = 0;
              v60 = (char *)(v34 + 8 * v57);
              *(_QWORD *)v60 = v50;
              v61 = v60 + 8;
              while (v39 != v38)
              {
                v62 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *((_QWORD *)v60 - 1) = v62;
                v60 -= 8;
              }
              v214 = v34 + 8 * v59;
              if (v38)
                operator delete(v38);
              v38 = v60;
              v39 = v61;
            }
            else
            {
              *(_QWORD *)v39 = v50;
              v39 += 8;
            }
            v35 = (_QWORD *)*v35;
            if (v35 == v37)
            {
              v63 = v39 - v38;
              this = v209;
              if (v39 == v38)
              {
                v64 = 0;
                v67 = 0;
                v66 = 0;
                v16 = v207;
                v13 = (std::string::value_type *)&v249;
              }
              else
              {
                v16 = v207;
                if (v63 < 0)
                  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                v13 = (std::string::value_type *)&v249;
                v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v63 >> 3);
                v66 = &v64[8 * v65];
                memmove(v64, v38, v63);
                v67 = &v64[8 * (v63 >> 3)];
              }
              LOBYTE(v251) = 1;
              *(_QWORD *)&v252 = v64;
              *((_QWORD *)&v252 + 1) = v67;
              *(_QWORD *)v253 = v66;
              if (v38)
              {
                v79 = v38;
LABEL_97:
                operator delete(v79);
              }
              goto LABEL_98;
            }
          }
        }
        std::operator+<char>();
        v68 = std::string::append(&v238, ") at prim path (");
        v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
        v239.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v69;
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::Inputs *)((char *)v31 + 32));
        v71 = *(char *)(String + 23);
        if (v71 >= 0)
          v72 = (const std::string::value_type *)String;
        else
          v72 = *(const std::string::value_type **)String;
        if (v71 >= 0)
          v73 = *(unsigned __int8 *)(String + 23);
        else
          v73 = *(_QWORD *)(String + 8);
        v74 = std::string::append(&v239, v72, v73);
        v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
        v242.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v75;
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        v76 = std::string::append(&v242, ")");
        v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        v246 = (realityio::SkeletalAnimationAggregationBuilder *)v76->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        realityio::DetailedError::DetailedError(&v249, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
        v252 = v249;
        *(_OWORD *)v253 = *(_OWORD *)&v250.__r_.__value_.__l.__data_;
        *(_QWORD *)&v253[15] = *(std::string::size_type *)((char *)&v250.__r_.__value_.__r.__words[1] + 7);
        v78 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
        memset(&v250, 0, sizeof(v250));
        LOBYTE(v251) = 0;
        v254 = v78;
        if (SHIBYTE(v246) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v242.__r_.__value_.__l.__data_);
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v239.__r_.__value_.__l.__data_);
        if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
        {
          v79 = (char *)v238.__r_.__value_.__r.__words[0];
          goto LABEL_97;
        }
LABEL_98:
        if ((v240.__r_.__value_.__s.__data_[16] & 7) != 0)
        {
          v80 = (unsigned int *)(v240.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8);
          do
            v81 = __ldxr(v80);
          while (__stlxr(v81 - 2, v80));
        }
        v82 = (std::__shared_weak_count *)v240.__r_.__value_.__l.__size_;
        if (v240.__r_.__value_.__l.__size_)
        {
          v83 = (unint64_t *)(v240.__r_.__value_.__l.__size_ + 8);
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        if (!(_BYTE)v251 || (_QWORD)v252 == *((_QWORD *)&v252 + 1))
        {
          v89 = 1;
          goto LABEL_183;
        }
        memset(&v239, 0, sizeof(v239));
        memset(&v238, 0, sizeof(v238));
        v224 = 0;
        v225 = 0;
        v222 = 0;
        v223 = &v224;
        v220 = (uint64_t *)&v221;
        v221 = 0;
        v85 = *((_QWORD *)v237 + 6);
        v86 = operator new(0x40uLL);
        *v86 = &off_24FDF7728;
        v86[1] = &v251;
        v86[2] = this;
        v86[3] = &v237;
        v86[4] = v16;
        v86[5] = &v239;
        v86[6] = &v238;
        v86[7] = &v223;
        v250.__r_.__value_.__l.__size_ = (std::string::size_type)v86;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v85 + 16))(v85, &v249);
        v87 = (realityio::SkeletalAnimationAssetBuilder *)v250.__r_.__value_.__l.__size_;
        if ((__int128 *)v250.__r_.__value_.__l.__size_ == &v249)
        {
          v88 = 4;
          v87 = (realityio::SkeletalAnimationAssetBuilder *)&v249;
        }
        else
        {
          if (!v250.__r_.__value_.__l.__size_)
          {
LABEL_114:
            v90 = (uint64_t)v237;
            v91 = realityio::SkeletalAnimationAssetBuilder::kOutputName(v87);
            realityio::Inputs::getAccumulatedValues<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>((uint64_t)&v249, v90, v91);
            if ((_BYTE)v249)
            {
              v92 = (_DWORD **)*((_QWORD *)&v249 + 1);
              for (i = v250.__r_.__value_.__r.__words[0]; v92 != (_DWORD **)i; ++v92)
              {
                v94 = *v92;
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, *v92);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)__p + 1, v94 + 1);
                __p[1] = v94;
                v95 = v221;
                v96 = &v221;
                v97 = &v221;
                if (!v221)
                  goto LABEL_125;
                v96 = &v221;
                while (1)
                {
                  while (1)
                  {
                    v97 = (uint64_t **)v95;
                    v98 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v95 + 4);
                    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v95 + 4)))break;
                    v95 = *v97;
                    v96 = v97;
                    if (!*v97)
                      goto LABEL_125;
                  }
                  if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v98, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p))break;
                  v96 = v97 + 1;
                  v95 = v97[1];
                  if (!v95)
                    goto LABEL_125;
                }
                if (!*v96)
                {
LABEL_125:
                  v99 = (void **)operator new(0x30uLL);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v99 + 8, __p);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v99 + 9, (_DWORD *)__p + 1);
                  v99[5] = __p[1];
                  *v99 = 0;
                  v99[1] = 0;
                  v99[2] = v97;
                  *v96 = (uint64_t *)v99;
                  if (*v220)
                  {
                    v220 = (uint64_t *)*v220;
                    v99 = (void **)*v96;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v221, (uint64_t *)v99);
                  ++v222;
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
              }
            }
            v100 = *((_QWORD *)v237 + 6);
            v101 = operator new(0x40uLL);
            *v101 = &off_24FDF77A8;
            v101[1] = &v223;
            v101[2] = v16;
            v101[3] = &v220;
            v101[4] = this;
            v101[5] = &v237;
            v101[6] = &v239;
            v101[7] = &v238;
            v247 = v101;
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v100 + 16))(v100, __p);
            v102 = (realityio *)v247;
            if (v247 == __p)
            {
              v103 = 4;
              v102 = (realityio *)__p;
            }
            else
            {
              if (!v247)
                goto LABEL_134;
              v103 = 5;
            }
            v102 = (realityio *)(*(uint64_t (**)(void))(*(_QWORD *)v102 + 8 * v103))();
LABEL_134:
            v104 = *(id *)(realityio::logObjects(v102) + 24);
            if (os_log_type_enabled(v104, OS_LOG_TYPE_INFO))
            {
              LOWORD(__p[0]) = 0;
              _os_log_impl(&dword_22FF26000, v104, OS_LOG_TYPE_INFO, "Updating entity with skeletal component and data.", (uint8_t *)__p, 2u);
            }

            v105 = *((_QWORD *)v237 + 6);
            __p[0] = &off_24FDF7828;
            __p[1] = &v230;
            v246 = this;
            v247 = __p;
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v105 + 16))(v105, __p);
            v106 = (realityio::SkeletalAnimationAssetBuilder *)v247;
            if (v247 == __p)
            {
              v107 = 4;
              v106 = (realityio::SkeletalAnimationAssetBuilder *)__p;
            }
            else
            {
              if (!v247)
              {
LABEL_141:
                v108 = (uint64_t)v237;
                v109 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v106);
                realityio::Inputs::_getValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v108, v109, (uint64_t)__p);
                v110 = (uint64_t)v237;
                v112 = realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(v111);
                realityio::Inputs::_getValue<std::map<std::string,realityio::WrappedRERef<REAsset *>> *>(v110, v112, (uint64_t)&v242);
                v113 = __p[1];
                if (!LOBYTE(__p[0]) || !__p[1])
                {
                  if (!v242.__r_.__value_.__s.__data_[0] || !v242.__r_.__value_.__l.__size_)
                  {
                    v131 = (realityio::SkeletalAnimationAggregationBuilder *)std::allocate_shared[abi:ne180100]<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,REEntity *&,REAsset *,std::vector<realityio::WrappedRERef<REAsset *>> &,std::vector<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*> &,void>(&v240, v230, v228, (uint64_t *)&v239, (uint64_t)&v238);
                    v133 = *((_QWORD *)this + 2);
                    v132 = *((_QWORD *)this + 3);
                    v219[0] = v133;
                    v219[1] = v132;
                    if (v132)
                    {
                      v134 = (unint64_t *)(v132 + 8);
                      do
                        v135 = __ldxr(v134);
                      while (__stxr(v135 + 1, v134));
                    }
                    v136 = (__int128 *)realityio::SkeletalAnimationAggregationBuilder::kOutputName(v131);
                    realityio::Outputs::storeValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>(v133, v136, (uint64_t *)&v240);
                    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v219);
                    v137 = &v240;
                    goto LABEL_173;
                  }
                  if (!LOBYTE(__p[0]))
                    v113 = 0;
                }
                v114 = (realityio::SkeletalAnimationAggregationBuilder *)std::allocate_shared[abi:ne180100]<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,REEntity *&,REAsset *,std::vector<realityio::WrappedRERef<REAsset *>> &,std::vector<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*> &,void>(v219, v230, v228, (uint64_t *)&v239, (uint64_t)&v238);
                v116 = *((_QWORD *)this + 2);
                v115 = *((_QWORD *)this + 3);
                v240.__r_.__value_.__r.__words[0] = v116;
                v240.__r_.__value_.__l.__size_ = v115;
                if (v115)
                {
                  v117 = (unint64_t *)(v115 + 8);
                  do
                    v118 = __ldxr(v117);
                  while (__stxr(v118 + 1, v117));
                }
                v119 = (__int128 *)realityio::SkeletalAnimationAggregationBuilder::kOutputName(v114);
                realityio::Outputs::storeValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>(v116, v119, v219);
                std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v240);
                if (!v113 && (v113 = (_QWORD *)v242.__r_.__value_.__l.__size_) == 0 || !v113[2])
                {
                  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v219);
                  v89 = 1;
                  goto LABEL_174;
                }
                v218 = REAnimationLibraryDefinitionCreate();
                v122 = (__int128 *)*v113;
                v120 = (__int128 *)(v113 + 1);
                v121 = v122;
                if (v122 != v120)
                {
                  do
                  {
                    std::pair<std::string const,realityio::WrappedRERef<REAsset *>>::pair[abi:ne180100](&v240, v121 + 2);
                    REAnimationLibraryDefinitionAddEntryAsset();
                    REAnimationLibraryDefinitionAddKeyedEntryIndex();
                    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v241);
                    if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v240.__r_.__value_.__l.__data_);
                    v123 = (__int128 *)*((_QWORD *)v121 + 1);
                    if (v123)
                    {
                      do
                      {
                        v124 = v123;
                        v123 = *(__int128 **)v123;
                      }
                      while (v123);
                    }
                    else
                    {
                      do
                      {
                        v124 = (__int128 *)*((_QWORD *)v121 + 2);
                        v125 = *(_QWORD *)v124 == (_QWORD)v121;
                        v121 = v124;
                      }
                      while (!v125);
                    }
                    v121 = v124;
                  }
                  while (v124 != v120);
                }
                ServiceLocator = REEngineGetServiceLocator();
                v216 = 0;
                v217 = MEMORY[0x2348B1264](ServiceLocator);
                v127 = *((_QWORD *)v237 + 6);
                v128 = (std::string *)operator new(0x40uLL);
                v128->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDF7AF8;
                v128->__r_.__value_.__l.__size_ = (std::string::size_type)&v216;
                v128->__r_.__value_.__r.__words[2] = (std::string::size_type)&v218;
                v128[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
                v128[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v237;
                v128[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v233;
                v128[2].__r_.__value_.__r.__words[0] = (std::string::size_type)this;
                v128[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v230;
                v241 = v128;
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v127 + 16))(v127, &v240);
                v129 = v241;
                if (v241 == &v240)
                {
                  v130 = 4;
                  v129 = &v240;
                }
                else
                {
                  if (!v241)
                  {
LABEL_172:
                    realityio::WrappedRERef<REAnimationLibraryDefinition *>::~WrappedRERef(&v218);
                    v137 = (std::string *)v219;
LABEL_173:
                    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v137);
                    v89 = 0;
LABEL_174:
                    if (!v242.__r_.__value_.__s.__data_[0] && v244 < 0)
                      operator delete(v243);
                    if (!LOBYTE(__p[0]) && v248 < 0)
                      operator delete(v247);
                    realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&v249);
                    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>>>::destroy(v221);
                    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v223, v224);
                    if (v238.__r_.__value_.__r.__words[0])
                    {
                      v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
                      operator delete(v238.__r_.__value_.__l.__data_);
                    }
                    *(_QWORD *)&v249 = &v239;
                    std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v249);
LABEL_183:
                    realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&v251);
                    realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v226);
                    if (v89)
                    {
LABEL_284:
                      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v228);
                      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v229);
                      goto LABEL_285;
                    }
LABEL_184:
                    v224 = 0;
                    v225 = 0;
                    v223 = &v224;
                    v138 = v237;
                    v139 = realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v18);
                    *(_OWORD *)&v240.__r_.__value_.__l.__data_ = 0uLL;
                    v140 = (std::__shared_weak_count *)*((_QWORD *)v138 + 3);
                    if (v140)
                    {
                      v240.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v140);
                      if (v240.__r_.__value_.__l.__size_)
                        v240.__r_.__value_.__r.__words[0] = *((_QWORD *)v138 + 2);
                    }
                    MEMORY[0x2348B2764](&v240.__r_.__value_.__r.__words[2], v139);
                    v141 = (unint64_t)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((_QWORD **)v138 + 1), &v240);
                    v142 = (_QWORD *)v141;
                    v144 = v143;
                    if ((_QWORD *)v141 != v143)
                    {
                      v208 = v16;
                      v210 = this;
                      v145 = 0;
                      v146 = 0;
                      v215 = 0;
                      while (1)
                      {
                        v147 = v142[5];
                        v149 = *(std::mutex **)(v147 + 16);
                        v148 = *(std::__shared_weak_count **)(v147 + 24);
                        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)v149;
                        v239.__r_.__value_.__l.__size_ = (std::string::size_type)v148;
                        if (v148)
                        {
                          v150 = (unint64_t *)&v148->__shared_owners_;
                          do
                            v151 = __ldxr(v150);
                          while (__stxr(v151 + 1, v150));
                        }
                        if ((v142[7] & 0xFFFFFFFFFFFFFFF8) != 0)
                          v152 = (const void **)((v142[7] & 0xFFFFFFFFFFFFFFF8) + 16);
                        else
                          v152 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v141);
                        v153 = v149 + 1;
                        std::mutex::lock(v149 + 1);
                        v154 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v149->__m_.__opaque[32], v152);
                        v155 = v154;
                        v156 = &v149->__m_.__opaque[40];
                        if (v156 == (char *)v154)
                        {
                          std::operator+<char>();
                          v158 = std::string::append(&v242, "\" does not exist in the builder outputs");
                          v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
                          v246 = (realityio::SkeletalAnimationAggregationBuilder *)v158->__r_.__value_.__r.__words[2];
                          *(_OWORD *)__p = v159;
                          v158->__r_.__value_.__l.__size_ = 0;
                          v158->__r_.__value_.__r.__words[2] = 0;
                          v158->__r_.__value_.__r.__words[0] = 0;
                          realityio::DetailedError::DetailedError(&v249, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
                          v212 = v249;
                          v160 = v250.__r_.__value_.__l.__size_;
                          v13 = (std::string::value_type *)v250.__r_.__value_.__r.__words[0];
                          v213 = SHIBYTE(v250.__r_.__value_.__r.__words[2]);
                          memset(&v250, 0, sizeof(v250));
                          if (SHIBYTE(v246) < 0)
                            operator delete(__p[0]);
                          if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v242.__r_.__value_.__l.__data_);
                          std::mutex::unlock(v153);
                          v249 = v212;
                          if (v213 < 0)
                          {
                            std::string::__init_copy_ctor_external(&v250, v13, v160);
                            v157 = v249;
                            v161 = v250.__r_.__value_.__r.__words[0];
                            LOBYTE(v213) = *((_BYTE *)&v250.__r_.__value_.__s + 23);
                            operator delete(v13);
                            v13 = (std::string::value_type *)v161;
                            if (v148)
                            {
LABEL_206:
                              v162 = (unint64_t *)&v148->__shared_owners_;
                              do
                                v163 = __ldaxr(v162);
                              while (__stlxr(v163 - 1, v162));
                              if (!v163)
                              {
                                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                                std::__shared_weak_count::__release_weak(v148);
                              }
                            }
                          }
                          else
                          {
                            v157 = v212;
                            if (v148)
                              goto LABEL_206;
                          }
                        }
                        else
                        {
                          v157 = *(_QWORD *)(*(_QWORD *)(v154 + 56) + 8);
                          std::mutex::unlock(v153);
                          if (v148)
                            goto LABEL_206;
                        }
                        if (v156 == (char *)v155)
                        {
                          if ((v213 & 0x80) != 0)
                            operator delete(v13);
                        }
                        else if ((unint64_t)v146 >= v215)
                        {
                          v164 = (v146 - v145) >> 3;
                          v165 = v164 + 1;
                          if ((unint64_t)(v164 + 1) >> 61)
                            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                          if ((uint64_t)(v215 - (_QWORD)v145) >> 2 > v165)
                            v165 = (uint64_t)(v215 - (_QWORD)v145) >> 2;
                          if (v215 - (unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8)
                            v141 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v141 = v165;
                          if (v141)
                            v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v141);
                          else
                            v166 = 0;
                          v167 = (char *)(v141 + 8 * v164);
                          *(_QWORD *)v167 = v157;
                          v168 = v167 + 8;
                          while (v146 != v145)
                          {
                            v169 = *((_QWORD *)v146 - 1);
                            v146 -= 8;
                            *((_QWORD *)v167 - 1) = v169;
                            v167 -= 8;
                          }
                          v215 = v141 + 8 * v166;
                          if (v145)
                            operator delete(v145);
                          v145 = v167;
                          v146 = v168;
                        }
                        else
                        {
                          *(_QWORD *)v146 = v157;
                          v146 += 8;
                        }
                        v142 = (_QWORD *)*v142;
                        if (v142 == v144)
                        {
                          v249 = 0uLL;
                          v250.__r_.__value_.__r.__words[0] = 0;
                          std::vector<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(&v249, v145, (uint64_t)v146, (v146 - v145) >> 3);
                          LOBYTE(v251) = 1;
                          v252 = v249;
                          *(_QWORD *)v253 = v250.__r_.__value_.__r.__words[0];
                          v16 = v208;
                          this = v210;
                          if (v145)
                          {
                            v170 = v145;
                            goto LABEL_247;
                          }
                          goto LABEL_248;
                        }
                      }
                    }
                    std::operator+<char>();
                    v171 = std::string::append(&v238, ") at prim path (");
                    v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
                    v239.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v172;
                    v171->__r_.__value_.__l.__size_ = 0;
                    v171->__r_.__value_.__r.__words[2] = 0;
                    v171->__r_.__value_.__r.__words[0] = 0;
                    v173 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((realityio::Inputs *)((char *)v138 + 32));
                    v174 = *(char *)(v173 + 23);
                    if (v174 >= 0)
                      v175 = (const std::string::value_type *)v173;
                    else
                      v175 = *(const std::string::value_type **)v173;
                    if (v174 >= 0)
                      v176 = *(unsigned __int8 *)(v173 + 23);
                    else
                      v176 = *(_QWORD *)(v173 + 8);
                    v177 = std::string::append(&v239, v175, v176);
                    v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
                    v242.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v178;
                    v177->__r_.__value_.__l.__size_ = 0;
                    v177->__r_.__value_.__r.__words[2] = 0;
                    v177->__r_.__value_.__r.__words[0] = 0;
                    v179 = std::string::append(&v242, ")");
                    v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
                    v246 = (realityio::SkeletalAnimationAggregationBuilder *)v179->__r_.__value_.__r.__words[2];
                    *(_OWORD *)__p = v180;
                    v179->__r_.__value_.__l.__size_ = 0;
                    v179->__r_.__value_.__r.__words[2] = 0;
                    v179->__r_.__value_.__r.__words[0] = 0;
                    realityio::DetailedError::DetailedError(&v249, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
                    v252 = v249;
                    *(_OWORD *)v253 = *(_OWORD *)&v250.__r_.__value_.__l.__data_;
                    *(_QWORD *)&v253[15] = *(std::string::size_type *)((char *)&v250.__r_.__value_.__r.__words[1] + 7);
                    v181 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
                    memset(&v250, 0, sizeof(v250));
                    LOBYTE(v251) = 0;
                    v254 = v181;
                    if (SHIBYTE(v246) < 0)
                      operator delete(__p[0]);
                    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v242.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v239.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v170 = (char *)v238.__r_.__value_.__r.__words[0];
LABEL_247:
                      operator delete(v170);
                    }
LABEL_248:
                    if ((v240.__r_.__value_.__s.__data_[16] & 7) != 0)
                    {
                      v182 = (unsigned int *)(v240.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8);
                      do
                        v183 = __ldxr(v182);
                      while (__stlxr(v183 - 2, v182));
                    }
                    v184 = (std::__shared_weak_count *)v240.__r_.__value_.__l.__size_;
                    if (v240.__r_.__value_.__l.__size_)
                    {
                      v185 = (unint64_t *)(v240.__r_.__value_.__l.__size_ + 8);
                      do
                        v186 = __ldaxr(v185);
                      while (__stlxr(v186 - 1, v185));
                      if (!v186)
                      {
                        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                        std::__shared_weak_count::__release_weak(v184);
                      }
                    }
                    if (!(_BYTE)v251 || !*(_BYTE *)(v16 + 168))
                      goto LABEL_283;
                    memset(&v240, 0, sizeof(v240));
                    std::vector<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(&v240, (const void *)v252, *((uint64_t *)&v252 + 1), (uint64_t)(*((_QWORD *)&v252 + 1) - v252) >> 3);
                    std::sort[abi:ne180100]<std::__wrap_iter<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2>((uint64_t)v240.__r_.__value_.__l.__data_, (uint64_t *)v240.__r_.__value_.__l.__size_);
                    memset(&v239, 0, sizeof(v239));
                    memset(&v238, 0, sizeof(v238));
                    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                    v250.__r_.__value_.__l.__size_ = 0;
                    *(_QWORD *)&v249 = MEMORY[0x24BEE9DA0] + 16;
                    pxrInternal__aapl__pxrReserved__::UsdPrim::UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
                    if (*((_QWORD *)&v249 + 1)
                      && (*(_BYTE *)(*((_QWORD *)&v249 + 1) + 57) & 8) == 0
                      && (*(unsigned int (**)(__int128 *))(v249 + 32))(&v249))
                    {
                      pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetAnimationSource((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v249, (pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
                    }
                    v187 = *((_QWORD *)v237 + 6);
                    v188 = operator new(0x38uLL);
                    *v188 = &off_24FDF7BF8;
                    v188[1] = &v240;
                    v188[2] = this;
                    v188[3] = &v237;
                    v188[4] = v16;
                    v188[5] = &v239;
                    v188[6] = &v238;
                    v243 = v188;
                    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v187 + 16))(v187, &v242);
                    v189 = v243;
                    if (v243 == &v242)
                    {
                      v190 = 4;
                      v189 = &v242;
                    }
                    else
                    {
                      if (!v243)
                        goto LABEL_267;
                      v190 = 5;
                    }
                    (*(void (**)(void))(*v189 + 8 * v190))();
LABEL_267:
                    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v226);
                    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)__p))
                    {
                      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)__p, &v242);
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v226, (int *)&v242);
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v227);
                      pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v242);
                    }
                    v191 = v228;
                    v192 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v226);
                    std::allocate_shared[abi:ne180100]<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT,std::allocator<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>,REEntity *&,REAsset *,std::vector<realityio::WrappedRERef<REAsset *>> &,std::vector<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*> &,std::string const&,void>(&v220, v230, v191, (uint64_t *)&v239, (uint64_t)&v238, v192);
                    v195 = *((_QWORD *)this + 2);
                    v194 = *((_QWORD *)this + 3);
                    v242.__r_.__value_.__r.__words[0] = v195;
                    v242.__r_.__value_.__l.__size_ = v194;
                    if (v194)
                    {
                      v196 = (unint64_t *)(v194 + 8);
                      do
                        v197 = __ldxr(v196);
                      while (__stxr(v197 + 1, v196));
                    }
                    v198 = (__int128 *)realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(v193);
                    realityio::Outputs::storeValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>(v195, v198, (uint64_t *)&v220);
                    v199 = (realityio *)std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v242);
                    v200 = *(id *)(realityio::logObjects(v199) + 24);
                    if (os_log_type_enabled(v200, OS_LOG_TYPE_INFO))
                    {
                      LOWORD(v242.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_22FF26000, v200, OS_LOG_TYPE_INFO, "Updating entity with blend shape component and data.", (uint8_t *)&v242, 2u);
                    }

                    v201 = *((_QWORD *)v237 + 6);
                    v242.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24FDF7D48;
                    v242.__r_.__value_.__l.__size_ = (std::string::size_type)&v230;
                    v242.__r_.__value_.__r.__words[2] = (std::string::size_type)this;
                    v243 = &v242;
                    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v201 + 16))(v201, &v242);
                    v202 = v243;
                    if (v243 == &v242)
                    {
                      v203 = 4;
                      v202 = &v242;
                    }
                    else
                    {
                      if (!v243)
                      {
LABEL_279:
                        std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v220);
                        pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v226);
                        pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
                        MEMORY[0x2348B217C](&v249);
                        if (v238.__r_.__value_.__r.__words[0])
                        {
                          v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
                          operator delete(v238.__r_.__value_.__l.__data_);
                        }
                        *(_QWORD *)&v249 = &v239;
                        std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v249);
                        if (v240.__r_.__value_.__r.__words[0])
                        {
                          v240.__r_.__value_.__l.__size_ = v240.__r_.__value_.__r.__words[0];
                          operator delete(v240.__r_.__value_.__l.__data_);
                        }
LABEL_283:
                        realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&v251);
                        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>>>::destroy(v224);
                        goto LABEL_284;
                      }
                      v203 = 5;
                    }
                    (*(void (**)(void))(*v202 + 8 * v203))();
                    goto LABEL_279;
                  }
                  v130 = 5;
                }
                (*(void (**)(void))(v129->__r_.__value_.__r.__words[0] + 8 * v130))();
                goto LABEL_172;
              }
              v107 = 5;
            }
            v106 = (realityio::SkeletalAnimationAssetBuilder *)(*(uint64_t (**)(void))(*(_QWORD *)v106 + 8 * v107))();
            goto LABEL_141;
          }
          v88 = 5;
        }
        v87 = (realityio::SkeletalAnimationAssetBuilder *)(*(uint64_t (**)(void))(*(_QWORD *)v87 + 8 * v88))();
        goto LABEL_114;
      }
      v29 = 5;
    }
    v28 = (realityio::SkeletonPoseDefinitionBuilder *)(*(uint64_t (**)(void))(*(_QWORD *)v28 + 8 * v29))();
    goto LABEL_30;
  }
LABEL_287:
  if ((v236 & 7) != 0)
  {
    v204 = (unsigned int *)(v236 & 0xFFFFFFFFFFFFFFF8);
    do
      v205 = __ldxr(v204);
    while (__stlxr(v205 - 2, v204));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v235);
  result = v234;
  if (v234)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v234);
  return result;
}

void sub_23010CC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a64;
  void *a67;
  char a72;
  uint64_t v72;

  if (!(_BYTE)a55 && a63 < 0)
    operator delete(__p);
  if (!a64 && a72 < 0)
    operator delete(a67);
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result(v72 - 256);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>>>::destroy(a23);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a25, (_QWORD *)a26);
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  *(_QWORD *)(v72 - 256) = &a47;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 256));
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result(v72 - 208);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a28);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a30);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a31);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result(v72 - 160);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a33);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a39);
  _Unwind_Resume(a1);
}

void realityio::Inputs::getAccumulatedValues<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  std::__shared_weak_count *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::mutex *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  const void **EmptyString;
  int v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  std::string *v32;
  __int128 v33;
  uint64_t String;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  uint64_t v42;
  std::string::value_type v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  void *__p;
  std::string v52;
  std::string v53;
  std::string v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  void *v58[2];
  std::string v59;
  _BYTE v60[24];
  std::string v61;
  _QWORD v62[5];

  v62[2] = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v56 = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 24);
  if (v7)
  {
    v56 = std::__shared_weak_count::lock(v7);
    if (v56)
      v55 = *(_QWORD *)(a2 + 16);
  }
  MEMORY[0x2348B2764](&v57, a3);
  v8 = (unint64_t)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(_QWORD **)(a2 + 8), &v55);
  v9 = (_QWORD *)v8;
  v11 = v10;
  if ((_QWORD *)v8 != v10)
  {
    v50 = a1;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = v9[5];
      v17 = *(std::mutex **)(v15 + 16);
      v16 = *(std::__shared_weak_count **)(v15 + 24);
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      v54.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      if ((v9[7] & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (const void **)((v9[7] & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
      realityio::Outputs::getRawValue<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>(v17, EmptyString, (uint64_t)v60);
      v21 = v60[0];
      if (v60[0])
      {
        v22 = *(void **)&v60[8];
      }
      else
      {
        *(_OWORD *)v58 = *(_OWORD *)&v60[8];
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v59, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
          v22 = v58[0];
          __p = (void *)v59.__r_.__value_.__r.__words[0];
          v3 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
          if (!v60[0] && SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
        }
        else
        {
          v59 = v61;
          v22 = v58[0];
          __p = (void *)v61.__r_.__value_.__r.__words[0];
          v3 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        }
      }
      if (!v16)
        goto LABEL_23;
      v23 = (unint64_t *)&v16->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if (!v21)
        {
LABEL_35:
          if (v3 < 0)
            operator delete(__p);
          goto LABEL_44;
        }
      }
      else
      {
LABEL_23:
        if (!v21)
          goto LABEL_35;
      }
      if ((unint64_t)v13 >= v14)
      {
        v25 = (v13 - v12) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v14 - (_QWORD)v12) >> 2 > v26)
          v26 = (uint64_t)(v14 - (_QWORD)v12) >> 2;
        if (v14 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v8 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v8 = v26;
        if (v8)
          v8 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v8);
        else
          v27 = 0;
        v28 = (char *)(v8 + 8 * v25);
        *(_QWORD *)v28 = v22;
        v29 = v28 + 8;
        while (v13 != v12)
        {
          v30 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v28 - 1) = v30;
          v28 -= 8;
        }
        v14 = v8 + 8 * v27;
        if (v12)
          operator delete(v12);
        v12 = v28;
        v13 = v29;
      }
      else
      {
        *(_QWORD *)v13 = v22;
        v13 += 8;
      }
LABEL_44:
      v9 = (_QWORD *)*v9;
      if (v9 == v11)
      {
        memset(v60, 0, sizeof(v60));
        std::vector<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const**>(v60, v12, (uint64_t)v13, (v13 - v12) >> 3);
        *(_BYTE *)v50 = 1;
        *(_OWORD *)(v50 + 8) = *(_OWORD *)v60;
        *(_QWORD *)(v50 + 24) = *(_QWORD *)&v60[16];
        if (v12)
        {
          v31 = v12;
          goto LABEL_61;
        }
        goto LABEL_62;
      }
    }
  }
  std::operator+<char>();
  v32 = std::string::append(&v52, ") at prim path (");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
  v35 = *(char *)(String + 23);
  if (v35 >= 0)
    v36 = (const std::string::value_type *)String;
  else
    v36 = *(const std::string::value_type **)String;
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(String + 23);
  else
    v37 = *(_QWORD *)(String + 8);
  v38 = std::string::append(&v53, v36, v37);
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  v40 = std::string::append(&v54, ")");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[0] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)v58 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  realityio::DetailedError::DetailedError(v60, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)v58);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v60;
  v42 = *(_QWORD *)&v60[16];
  v62[0] = v61.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v62 + 7) = *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 7);
  v43 = v61.__r_.__value_.__s.__data_[15];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = 0uLL;
  *(_QWORD *)&v60[16] = 0;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v62 + 7);
  v44 = v62[0];
  *(_QWORD *)(a1 + 24) = v42;
  *(_QWORD *)(a1 + 32) = v44;
  *(_BYTE *)(a1 + 47) = v43;
  if (v59.__r_.__value_.__s.__data_[7] < 0)
    operator delete(v58[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    v31 = (char *)v52.__r_.__value_.__r.__words[0];
LABEL_61:
    operator delete(v31);
  }
LABEL_62:
  if ((v57 & 7) != 0)
  {
    v45 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = v56;
  if (v56)
  {
    v48 = (unint64_t *)&v56->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_23010D68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35)
{
  unsigned int *v36;
  unsigned int v37;

  if (a32 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a19 < 0)
    operator delete(a14);
  if ((a35 & 7) != 0)
  {
    v36 = (unsigned int *)(a35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void realityio::Outputs::storeValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDF7A78;
  v7[3] = &off_24FDF7AC8;
  v8 = *a3;
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v7[4] = v8;
  v7[5] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v17 = a2;
  v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v17);
  v14 = (std::__shared_weak_count *)v13[8];
  v13[7] = (uint64_t)(v7 + 3);
  v13[8] = (uint64_t)v7;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23010D908(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::sort[abi:ne180100]<std::__wrap_iter<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2>(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3);
  if (a2 == (uint64_t *)a1)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,false>(a1, a2, v3, 1);
}

pxrInternal__aapl__pxrReserved__::UsdPrim *pxrInternal__aapl__pxrReserved__::UsdPrim::UsdPrim(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((_QWORD *)this + 3) = 0;
  return this;
}

void realityio::Outputs::storeValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  std::mutex *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;

  v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDF7CC8;
  v7[3] = &off_24FDF7D18;
  v8 = *a3;
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v7[4] = v8;
  v7[5] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v17 = a2;
  v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v17);
  v14 = (std::__shared_weak_count *)v13[8];
  v13[7] = (uint64_t)(v7 + 3);
  v13[8] = (uint64_t)v7;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23010DB1C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::SkeletalAnimationAggregationBuilder::clear(realityio::SkeletalAnimationAggregationBuilder *this, realityio::Inputs *a2)
{
  uint64_t v3;
  std::mutex *v4;
  unint64_t *v5;
  unint64_t v6;
  const void **v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  realityio::SkeletalAnimationAggregationBuilder *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const void **v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::mutex *v25;
  unint64_t *v26;
  unint64_t v27;
  const void **v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  realityio::SkeletalAnimationAggregationBuilder *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  const void **v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v45;
  _BYTE v46[48];
  char v47[8];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  std::string v52;
  uint64_t v53;
  __int128 v54;
  std::string v55;

  v4 = (std::mutex *)*((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  *(_QWORD *)&v51 = v4;
  *((_QWORD *)&v51 + 1) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (const void **)realityio::SkeletalAnimationAggregationBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>(v4, v7, (uint64_t)&v53);
  if ((_BYTE)v53)
  {
    v8 = v54;
    if (*((_QWORD *)&v54 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      do
        v11 = __ldxr(v9);
      while (__stxr(v11 + 1, v9));
      v47[0] = 1;
      v48 = v8;
      do
        v12 = __ldaxr(v9);
      while (__stlxr(v12 - 1, v9));
      if (!v12)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 16))(*((_QWORD *)&v8 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
      }
    }
    else
    {
      v47[0] = 1;
      v48 = (unint64_t)v54;
    }
  }
  else
  {
    *(_OWORD *)v46 = v54;
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)&v46[16], v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
    else
      *(std::string *)&v46[16] = v55;
    v47[0] = 0;
    v48 = *(_OWORD *)v46;
    v49 = *(_OWORD *)&v46[16];
    v50 = *(_QWORD *)&v46[32];
  }
  v13 = (realityio::SkeletalAnimationAggregationBuilder *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v53);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v47[0])
  {
    v18 = *((_QWORD *)this + 2);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v53 = v18;
    *(_QWORD *)&v54 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    v21 = (const void **)realityio::SkeletalAnimationAggregationBuilder::kOutputName(v13);
    std::mutex::lock((std::mutex *)(v18 + 64));
    if (v18 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v18 + 40, v21))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v18 + 40), v21);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v18, (unsigned __int8 *)v21);
    std::mutex::unlock((std::mutex *)(v18 + 64));
    if (v17)
    {
      v22 = (unint64_t *)&v17->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v25 = (std::mutex *)*((_QWORD *)this + 2);
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v45 = v24;
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = (const void **)realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(v13);
  realityio::Outputs::getRawValue<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>(v25, v28, (uint64_t)&v53);
  if ((_BYTE)v53)
  {
    v29 = v54;
    if (*((_QWORD *)&v54 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      do
        v32 = __ldxr(v30);
      while (__stxr(v32 + 1, v30));
      v46[0] = 1;
      *(_OWORD *)&v46[8] = v29;
      do
        v33 = __ldaxr(v30);
      while (__stlxr(v33 - 1, v30));
      if (!v33)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v29 + 1) + 16))(*((_QWORD *)&v29 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v29 + 1));
      }
    }
    else
    {
      v46[0] = 1;
      *(_QWORD *)&v46[8] = v54;
      *(_QWORD *)&v46[16] = 0;
    }
  }
  else
  {
    v51 = v54;
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v52, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
    else
      v52 = v55;
    v46[0] = 0;
    *(_OWORD *)&v46[8] = v51;
    *(std::string *)&v46[24] = v52;
  }
  v34 = (realityio::SkeletalAnimationAggregationBuilder *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v53);
  if (v45)
  {
    v35 = (unint64_t *)&v45->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v46[0])
  {
    v38 = *((_QWORD *)this + 2);
    v37 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v53 = v38;
    *(_QWORD *)&v54 = v37;
    if (v37)
    {
      v39 = (unint64_t *)&v37->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (const void **)realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName(v34);
    std::mutex::lock((std::mutex *)(v38 + 64));
    if (v38 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v38 + 40, v41))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v38 + 40), v41);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v38, (unsigned __int8 *)v41);
    std::mutex::unlock((std::mutex *)(v38 + 64));
    if (v37)
    {
      v42 = (unint64_t *)&v37->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v46);
  return realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v47);
}

void sub_23010DF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result(v17 - 112);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void realityio::SkeletalAnimationAggregationBuilder::~SkeletalAnimationAggregationBuilder(realityio::SkeletalAnimationAggregationBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::vector<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_23010E0BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF7398;
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF7398;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  unint64_t *p_shared_owners;
  unint64_t v7;
  realityio::MeshAssetBuilder *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  realityio::SkeletonPoseDefinitionBuilder *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  realityio::SkeletalAnimationAssetBuilder *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v31;
  unint64_t *v32;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  realityio::SkeletalAnimationAssetBuilder *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v42;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  realityio::SkeletalAnimationAssetBuilder *v46;
  uint64_t v47;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v48;
  uint64_t *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  char v57;
  uint64_t v58;
  char v59;
  std::__shared_count v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t i;
  realityio::SkeletalAnimationAssetBuilder *v64;
  uint64_t v65;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  realityio::SkeletalAnimationAssetBuilder *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v81;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  realityio::SkeletonPoseDefinitionBuilder *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v91;
  pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t *v111;
  char *v112;
  std::__shared_weak_count *v113;
  int v114;
  _QWORD *v115;
  std::__shared_weak_count *v116;
  uint64_t *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  void **v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  v112 = v2;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kOutputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v115) = 0;
  std::allocate_shared[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, (int *)&v115, &v128);
  v124 = v128;
  v125 = v129;
  v113 = v129;
  if (v129)
  {
    p_shared_owners = (unint64_t *)&v129->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (realityio::MeshAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v124);
  v9 = v125;
  if (v125)
  {
    v10 = (unint64_t *)&v125->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = realityio::MeshAssetBuilder::kOutputName(v8);
  v13 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v13)
    v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v115) = 0;
  std::allocate_shared[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v12, (uint64_t *)v13 + 12, (int *)&v115, &v128);
  v14 = v129;
  v122 = v128;
  v123 = v129;
  if (v129)
  {
    v15 = (unint64_t *)&v129->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (realityio::SkeletonPoseDefinitionBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v122);
  v18 = v123;
  if (v123)
  {
    v19 = (unint64_t *)&v123->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = realityio::SkeletonPoseDefinitionBuilder::kOutputName(v17);
  v22 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v22)
    v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v115) = 1;
  std::allocate_shared[abi:ne180100]<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v21, (uint64_t *)v22 + 28, (int *)&v115, &v128);
  v23 = v129;
  v120 = v128;
  v121 = v129;
  if (v129)
  {
    v24 = (unint64_t *)&v129->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = (realityio::SkeletalAnimationAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v120);
  v27 = v121;
  if (v121)
  {
    v28 = (unint64_t *)&v121->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = realityio::SkeletalAnimationAssetBuilder::kOutputName(v26);
  v31 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v31)
    v31 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v32 = (unint64_t *)MEMORY[0x24BEE8040];
  v33 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(MEMORY[0x24BEE8040]);
  if (!v33)
    v33 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
  LODWORD(v115) = 1;
  std::allocate_shared[abi:ne180100]<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(&v128, v30, (uint64_t *)v31 + 25, (uint64_t *)v33 + 17, (int *)&v115);
  v34 = v129;
  v118 = v128;
  v119 = v129;
  if (v129)
  {
    v35 = (unint64_t *)&v129->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = (realityio::SkeletalAnimationAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v118);
  v38 = v119;
  if (v119)
  {
    v39 = (unint64_t *)&v119->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v37);
  v42 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v42)
    v42 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v43 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v32);
  if (!v43)
    v43 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
  v111 = a1;
  LODWORD(v115) = 1;
  std::allocate_shared[abi:ne180100]<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(&v128, v41, (uint64_t *)v42 + 30, (uint64_t *)v43 + 17, (int *)&v115);
  v44 = v128;
  v45 = v129;
  v47 = realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v46);
  v48 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v48)
    v48 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v49 = (uint64_t *)atomic_load(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
  if (!v49)
    v49 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletalAnimationAssetBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SkeletalAnimationAssetBuilderTokens);
  LODWORD(v115) = 1;
  std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v47, (uint64_t *)v48 + 30, v49, (int *)&v115, &v128);
  v50 = v128;
  v51 = v129;
  v128 = v44;
  v129 = v45;
  if (v45)
  {
    v52 = (unint64_t *)&v45->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v130 = v50;
  v131 = v51;
  if (v51)
  {
    v54 = (unint64_t *)&v51->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v126 = (void **)&v115;
  LOBYTE(v127) = 0;
  v56 = (std::__shared_weak_count *)operator new(0x20uLL);
  v57 = 0;
  v58 = 0;
  v115 = &v56->__vftable;
  v116 = v56;
  v117 = &v56[1].__shared_owners_;
  do
  {
    v59 = v57;
    v60 = (std::__shared_count)*((_OWORD *)&v128 + v58);
    v56->std::__shared_count = v60;
    if (v60.__shared_owners_)
    {
      v61 = (unint64_t *)(v60.__shared_owners_ + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v56 = (std::__shared_weak_count *)((char *)v56 + 16);
    v57 = 1;
    v58 = 1;
  }
  while ((v59 & 1) == 0);
  v116 = v56;
  for (i = 16; i != -16; i -= 16)
    v64 = (realityio::SkeletalAnimationAssetBuilder *)std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v128 + i);
  v65 = realityio::SkeletalAnimationAssetBuilder::kOutputBlendShapeName(v64);
  v66 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v66)
    v66 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v126) = 1;
  std::allocate_shared[abi:ne180100]<realityio::UnionInputDescriptor,std::allocator<realityio::UnionInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::vector<std::shared_ptr<realityio::InputDescriptor const>> &,void>(v65, (uint64_t *)v66 + 30, (int *)&v126, &v115, &v128);
  v67 = v129;
  if (v129)
  {
    v68 = (unint64_t *)&v129->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v128);
  v70 = v129;
  if (v129)
  {
    v71 = (unint64_t *)&v129->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v67)
  {
    v73 = (unint64_t *)&v67->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v126 = (void **)&v115;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v126);
  if (v51)
  {
    v76 = (unint64_t *)&v51->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v45)
  {
    v78 = (unint64_t *)&v45->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v80 = realityio::SkeletalAnimationAssetBuilder::kOutputLibraryName(v75);
  v81 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v81)
    v81 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v82 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v32);
  if (!v82)
    v82 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
  LODWORD(v126) = 1;
  std::allocate_shared[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::allocator<realityio::RelatedPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(v80, (uint64_t *)v81 + 26, (uint64_t *)v82 + 17, (int *)&v126, &v115);
  v83 = v116;
  if (v116)
  {
    v84 = (unint64_t *)&v116->__shared_owners_;
    do
      v85 = __ldxr(v84);
    while (__stxr(v85 + 1, v84));
  }
  v86 = (realityio::SkeletonPoseDefinitionBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v115);
  v87 = v116;
  if (v116)
  {
    v88 = (unint64_t *)&v116->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = realityio::SkeletonPoseDefinitionBuilder::kAnimationLibraryOutputName(v86);
  v91 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v91)
    v91 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v92 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load(v32);
  if (!v92)
    v92 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdSkelTokensType>>::_TryToCreateData(MEMORY[0x24BEE8040]);
  v114 = 1;
  std::allocate_shared[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::allocator<realityio::RelatedPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(v90, (uint64_t *)v91 + 26, (uint64_t *)v92 + 21, &v114, &v126);
  v93 = v127;
  if (v127)
  {
    v94 = (unint64_t *)&v127->__shared_owners_;
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v126);
  v96 = v127;
  if (v127)
  {
    v97 = (unint64_t *)&v127->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  *v111 = v3;
  v111[1] = (uint64_t)v112;
  if (v93)
  {
    v99 = (unint64_t *)&v93->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v83)
  {
    v101 = (unint64_t *)&v83->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v34)
  {
    v103 = (unint64_t *)&v34->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v23)
  {
    v105 = (unint64_t *)&v23->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v14)
  {
    v107 = (unint64_t *)&v14->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v113)
  {
    v109 = (unint64_t *)&v113->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
}

void sub_23010EA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  unint64_t *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;

  if (a25)
  {
    p_shared_owners = (unint64_t *)&a25->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a25->__on_zero_shared)(a25);
      std::__shared_weak_count::__release_weak(a25);
    }
  }
  if (v30)
  {
    v34 = (unint64_t *)&v30->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v28)
  {
    v38 = (unint64_t *)&v28->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v27)
  {
    v40 = (unint64_t *)&v27->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v26)
  {
    v42 = (unint64_t *)&v26->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (a11)
  {
    v44 = (unint64_t *)&a11->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  do
    v46 = __ldaxr(v25);
  while (__stlxr(v46 - 1, v25));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_23010EF3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  char v6;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24FDF7E48;
  std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::construct[abi:ne180100]<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>((uint64_t)&v6, a1 + 3, a2, a3, a4);
  return a1;
}

void sub_23010EFA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7E48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::construct[abi:ne180100]<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, int *a5)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor(a2, (uint64_t)&__p, a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_23010F084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor(_QWORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (__int128 *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &off_24FDF7E98;
  return a1;
}

void sub_23010F134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor::~SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor(realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

void realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor::resolvedPrimPaths(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X2>, const realityio::internal::PrimToEntityMap *a2@<X3>, uint64_t a3@<X8>)
{
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  BOOL v17;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v8 = (char *)a2 + 48;
  v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2 + 48, a1);
  if ((_QWORD *)((char *)a2 + 56) != v9 && *(_QWORD *)(*((_QWORD *)a2 + 3) + 104 * v9[5] + 24) == *(_QWORD *)a1)
  {
    v10 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v8, a1);
    if ((_QWORD *)((char *)a2 + 56) != v10)
    {
      v11 = *((_QWORD *)a2 + 3);
      if (v11)
      {
        v12 = (_QWORD *)(v11 + 104 * v10[5]);
        v13 = (unsigned int *)v12[4];
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a3, vcvtps_u32_f32((float)(unint64_t)v12[9] / *(float *)(a3 + 32)));
        v14 = (unsigned int *)(v12 + 5);
        if (v13 != v14)
        {
          do
          {
            std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, v13 + 7, v13 + 7);
            v15 = (unsigned int *)*((_QWORD *)v13 + 1);
            if (v15)
            {
              do
              {
                v16 = v15;
                v15 = *(unsigned int **)v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                v16 = (unsigned int *)*((_QWORD *)v13 + 2);
                v17 = *(_QWORD *)v16 == (_QWORD)v13;
                v13 = v16;
              }
              while (!v17);
            }
            v13 = v16;
          }
          while (v16 != v14);
        }
      }
    }
  }
}

void sub_23010F294(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  _QWORD *v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  std::string __p;
  std::string v16;

  v10 = operator new(0x50uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_24FDF7408;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v11 = *a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v16 = __p;
  realityio::InputDescriptor::InputDescriptor((uint64_t)(v10 + 3), (__int128 *)&v16, a3, v11);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v10[3] = &off_24FDF7458;
  v12 = *a4;
  v10[9] = *a4;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v10[9] &= 0xFFFFFFFFFFFFFFF8;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_23010F3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;

  if (a14 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor::~RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor(realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_24FDF7458;
  v1 = *((_QWORD *)this + 6);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  realityio::InputDescriptor::~InputDescriptor(this);
}

{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = &off_24FDF7458;
  v1 = *((_QWORD *)this + 6);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

void realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor::resolvedPrimPaths(realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdStage *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, const realityio::internal::PrimToEntityMap *a4@<X3>, uint64_t a5@<X8>)
{
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const pxrInternal__aapl__pxrReserved__::TfToken *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[8];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int **v41;

  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  v10 = (char *)a4 + 48;
  v11 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a4 + 48, a3);
  if ((_QWORD *)((char *)a4 + 56) != v11 && *(_QWORD *)(*((_QWORD *)a4 + 3) + 104 * v11[5] + 24) == *(_QWORD *)a3)
  {
    v12 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v10, a3);
    if ((_QWORD *)((char *)a4 + 56) != v12)
    {
      v13 = *((_QWORD *)a4 + 3);
      if (v13)
      {
        v14 = (_QWORD *)(v13 + 104 * v12[5]);
        v15 = (_QWORD *)v14[7];
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a5, vcvtps_u32_f32((float)(unint64_t)v14[9] / *(float *)(a5 + 32)));
        v16 = v14 + 8;
        if (v15 != v14 + 8)
        {
          v17 = (realityio::RelatedOrConnectedToMeshPrimsOnPrimGeneratingEntityOnlyInputDescriptor *)((char *)this + 48);
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 28));
            if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v37))
            {
              if (pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v37, v17))
              {
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v37, v17);
                v31 = 0;
                v32 = 0;
                v33 = 0;
                pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
                v19 = v31;
                v18 = v32;
                while (v19 != v18)
                {
                  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, v19, v19);
                  v19 += 2;
                }
                v41 = &v31;
                std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
                if ((v36 & 7) != 0)
                {
                  v22 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v23 = __ldxr(v22);
                  while (__stlxr(v23 - 2, v22));
                }
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v37, v17);
                v31 = 0;
                v32 = 0;
                v33 = 0;
                pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
                v21 = v31;
                v20 = v32;
                while (v21 != v20)
                {
                  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a5, v21, v21);
                  v21 += 2;
                }
                v41 = &v31;
                std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
                if ((v36 & 7) != 0)
                {
                  v24 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v25 = __ldxr(v24);
                  while (__stlxr(v25 - 2, v24));
                }
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
              if (v34)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v34);
            }
            if ((v40 & 7) != 0)
            {
              v26 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
              do
                v27 = __ldxr(v26);
              while (__stlxr(v27 - 2, v26));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
            if (v38)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v38);
            v28 = (_QWORD *)v15[1];
            if (v28)
            {
              do
              {
                v29 = v28;
                v28 = (_QWORD *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                v29 = (_QWORD *)v15[2];
                v30 = *v29 == (_QWORD)v15;
                v15 = v29;
              }
              while (!v30);
            }
            v15 = v29;
          }
          while (v29 != v16);
        }
      }
    }
  }
}

void sub_23010F7C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF74A8;
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF74A8;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL8 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::string::size_type v26;
  std::__shared_weak_count *v27;
  std::string::size_type v28;
  std::__shared_weak_count *v29;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::SkeletalAnimationAggregationBuilder::kOutputName((realityio::SkeletalAnimationAggregationBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v26) = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 27, (int *)&v26, &v28);
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = realityio::OutputsDescriptor::addOutputDescriptor(v3, &v28);
  v10 = v29;
  if (v29)
  {
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = realityio::SkeletalAnimationAggregationBuilder::kOutputBlendShapeName((realityio::SkeletalAnimationAggregationBuilder *)v9);
  v14 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14)
    v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v25 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v13, (std::string::size_type *)v14 + 32, &v25, &v26);
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v26);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_23010FAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;

  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v19 = __ldaxr(v15);
  while (__stlxr(v19 - 1, v15));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationAggregationBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF7528;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF7528;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()()
{
  uint64_t ComponentByClass;
  _QWORD *result;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  REAnimationLibraryComponentGetComponentType();
  v4[0] = &off_24FDF7598;
  v5 = v4;
  ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    v3 = ComponentByClass;
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, uint64_t *))(*v5 + 48))(v5, &v3);
    RENetworkMarkComponentDirty();
  }
  result = v5;
  if (v5 == v4)
  {
    v2 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v2))(result);
}

void sub_23010FDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF7598;
  return result;
}

void _ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF7598;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_()
{
  return REAnimationLibraryComponentAssignAnimationLibraryAsset();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDF7628;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF7628;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 16);
  RESkeletalPoseComponentGetComponentType();
  v5[0] = &off_24FDF7698;
  v5[1] = v1;
  v6 = v5;
  v4 = REEntityGetOrAddComponentByClass();
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v6 + 48))(v6, &v4);
  RENetworkMarkComponentDirty();
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
}

void sub_230110010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF7698;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF7698;
  a2[1] = v2;
  return result;
}

uint64_t *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_3::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target_type()
{
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>>>::destroy(a1[1]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24FDF7728;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDF7728;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::vector<std::string>::size_type *v7;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(uint64_t **)(v1 + 8);
  v3 = *(uint64_t **)(v1 + 16);
  if (v2 != v3)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 16);
    do
    {
      v6 = *v2;
      v7 = *(std::vector<std::string>::size_type **)(*v2 + 8);
      if (v7)
        result = realityio::SkeletalAnimationAggregationBuilder::createSkeletalAnimationAssetsAndAppendToArrayHelper(v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v4 + 24) + 40) + 16) + 16), *(_QWORD *)(v4 + 32), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 16), v7, *(uint64_t **)(v4 + 40), *(void ***)(v4 + 48));
      else
        result = (uint64_t)std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(*(uint64_t ***)(v4 + 56), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 16), (_DWORD *)(v6 + 16));
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_4>,void ()(void)>::target_type()
{
}

_QWORD *std::vector<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_230110388(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24FDF77A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDF77A8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5>,void ()(void)>::operator()(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;

  v1 = *(_QWORD **)(result + 8);
  v4 = (_QWORD *)*v1;
  v2 = v1 + 1;
  v3 = v4;
  if (v4 != v2)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 32);
    do
    {
      v7 = *(_QWORD *)(v5 + 16);
      v8 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v7 + 88, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 28));
      if ((_QWORD *)(v7 + 96) == v8)
      {
        v20 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      }
      else
      {
        v9 = v8;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, (_DWORD *)v8 + 9);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v20 + 1, (_DWORD *)v9 + 10);
      }
      v10 = *(_QWORD *)(v5 + 24);
      v13 = *(_QWORD **)(v10 + 8);
      v11 = (_QWORD *)(v10 + 8);
      v12 = v13;
      if (!v13)
        goto LABEL_13;
      v14 = v11;
      do
      {
        v15 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
        v16 = v12 + 1;
        if (!v15)
        {
          v16 = v12;
          v14 = v12;
        }
        v12 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v14 == v11
        || pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v14 + 4)))
      {
LABEL_13:
        v14 = v11;
      }
      if ((_QWORD *)(*(_QWORD *)(v5 + 24) + 8) != v14)
        realityio::SkeletalAnimationAggregationBuilder::createSkeletalAnimationAssetsAndAppendToArrayHelper(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v5 + 40) + 40) + 16) + 16), *(_QWORD *)(v5 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 28), (std::vector<std::string>::size_type *)v14[5], *(uint64_t **)(v5 + 48), *(void ***)(v5 + 56));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
      v17 = (_QWORD *)v3[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v3[2];
          v19 = *v18 == (_QWORD)v3;
          v3 = v18;
        }
        while (!v19);
      }
      v3 = v18;
    }
    while (v18 != v2);
  }
  return result;
}

void sub_2301105D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_5>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDF7828;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF7828;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 16);
  RERigComponentGetComponentType();
  v13[0] = &off_24FDF7898;
  v13[1] = v1;
  v14 = v13;
  v11[0] = REEntityGetOrAddComponentByClass();
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, _QWORD *))(*v14 + 48))(v14, v11);
  RENetworkMarkComponentDirty();
  v2 = v14;
  if (v14 == v13)
  {
    v3 = 4;
    v2 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_7;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
  REMeshDeformationComponentGetComponentType();
  v11[0] = &off_24FDF7918;
  v11[1] = v1;
  v12 = v11;
  v9[0] = REEntityGetOrAddComponentByClass();
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, _QWORD *))(*v12 + 48))(v12, v9);
  RENetworkMarkComponentDirty();
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  REAnimationComponentGetComponentType();
  v9[0] = &off_24FDF7998;
  v9[1] = v1;
  v10 = v9;
  v8 = REEntityGetOrAddComponentByClass();
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v10 + 48))(v10, &v8);
  RENetworkMarkComponentDirty();
  result = v10;
  if (v10 == v9)
  {
    v7 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v7))(result);
}

void sub_2301108B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF7898;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF7898;
  a2[1] = v2;
  return result;
}

uint64_t *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF7918;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF7918;
  a2[1] = v2;
  return result;
}

uint64_t *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#2}>,void ()(REComponent *)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3}>,void ()(REComponent *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF7998;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3}>,void ()(REComponent *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF7998;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  result = REAnimationComponentActiveAnimationCount();
  if (result)
    return REAnimationComponentStopAllAnimations();
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_6::operator() const(void)::{lambda(REComponent *)#3}>,void ()(REComponent *)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT,std::allocator<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,REEntity *&,REAsset *,std::vector<realityio::WrappedRERef<REAsset *>> &,std::vector<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*> &,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x58uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_24FDF7A28;
  v10[3] = a2;
  if (a2)
    RERetain();
  v10[4] = a3;
  if (a3)
    RERetain();
  v10[5] = 0;
  v10[6] = 0;
  v10[7] = 0;
  std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(v10 + 5, *a4, a4[1], (a4[1] - *a4) >> 3);
  v10[8] = 0;
  v10[9] = 0;
  v10[10] = 0;
  result = std::vector<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::SkeletalAnimationAssetDataT const**>(v10 + 8, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_230110CAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  _QWORD *v2;
  void *v4;

  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 40);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v4);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(a1 + 32));
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 24));
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7A78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7A78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_24FDF7AC8;
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::getRawValue(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24FDF7AF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDF7AF8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v2;
  uint64_t String;
  char *v4;
  size_t v5;
  void **v6;
  char *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 48);
  **(_QWORD **)(a1 + 8) = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
  if (**(_QWORD **)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 40), v15);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v15);
    v4 = (char *)String;
    if (*(char *)(String + 23) >= 0)
      v5 = *(unsigned __int8 *)(String + 23);
    else
      v5 = *(_QWORD *)(String + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 17);
    if (v13 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if (v5)
    {
      if (v4[23] >= 0)
        v7 = v4;
      else
        v7 = *(char **)v4;
      memmove(v6, v7, v5);
    }
    strcpy((char *)v6 + v5, "_animationLibrary");
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v15);
    if (v13 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    realityio::Builder::addAsset(v2, **(_QWORD **)(a1 + 8), (uint64_t)v8);
    REAnimationLibraryComponentGetComponentType();
    v9 = *(_QWORD *)(a1 + 8);
    v15[0] = &off_24FDF7B68;
    v15[1] = v2;
    v15[2] = v9;
    v16 = v15;
    v14 = REEntityGetOrAddComponentByClass();
    if (!v16)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, uint64_t *))(*v16 + 48))(v16, &v14);
    RENetworkMarkComponentDirty();
    v10 = v16;
    if (v16 == v15)
    {
      v11 = 4;
      v10 = v15;
    }
    else
    {
      if (!v16)
        goto LABEL_22;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_22:
    if (v13 < 0)
      operator delete(__p[0]);
  }
}

void sub_2301110E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__1clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__1clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDF7B68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__1clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF7B68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__1clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  REAnimationLibraryComponentAssignAnimationLibraryAsset();
  return RERelease();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__1clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS_6InputsEENK3__1clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS2_6InputsEENK3__1clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio35SkeletalAnimationAggregationBuilder3runEPNS_6InputsEENK3__1clEvEUlT_E_;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>>>::destroy(a1[1]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  BOOL v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_DWORD *)(v38 + 8) < *(_DWORD *)(*v8 + 8))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*(_DWORD *)(v43 + 8) < *(_DWORD *)(v44 + 8))
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = *(_DWORD *)(*v42 + 8);
          if (v47 < *(_DWORD *)(*v41 + 8))
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 < *(_DWORD *)(*v40 + 8))
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 < *(_DWORD *)(*v8 + 8))
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 8;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *(_DWORD *)(v55 + 8);
                if (v57 < *(_DWORD *)(v56 + 8))
                {
                  v58 = v53;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58) = v56;
                    v59 = v58 - 8;
                    if (v58 == 8)
                      break;
                    v56 = *(uint64_t *)((char *)v8 + v58 - 16);
                    v58 -= 8;
                    if (v57 >= *(_DWORD *)(v56 + 8))
                    {
                      v60 = (uint64_t *)((char *)v8 + v59);
                      goto LABEL_80;
                    }
                  }
                  v60 = v8;
LABEL_80:
                  *v60 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v91 = *v7;
              v90 = v7[1];
              v7 = v50;
              v92 = *(_DWORD *)(v90 + 8);
              if (v92 < *(_DWORD *)(v91 + 8))
              {
                do
                {
                  *v50 = v91;
                  v91 = *(v50 - 2);
                  --v50;
                }
                while (v92 < *(_DWORD *)(v91 + 8));
                *v50 = v90;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v61 = (v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = &v8[v64];
                v66 = *v65;
                if (2 * v63 + 2 < (uint64_t)v10)
                {
                  result = *(unsigned int *)(v66 + 8);
                  if (result < *(_DWORD *)(v65[1] + 8))
                  {
                    v66 = v65[1];
                    ++v65;
                    v64 = 2 * v63 + 2;
                  }
                }
                v67 = &v8[v63];
                v68 = *v67;
                v69 = *(_DWORD *)(*v67 + 8);
                if (*(_DWORD *)(v66 + 8) >= v69)
                {
                  do
                  {
                    v70 = v65;
                    *v67 = v66;
                    if (v61 < v64)
                      break;
                    result = (2 * v64) | 1;
                    v65 = &v8[result];
                    v71 = 2 * v64 + 2;
                    v66 = *v65;
                    if (v71 < (uint64_t)v10 && *(_DWORD *)(v66 + 8) < *(_DWORD *)(v65[1] + 8))
                    {
                      v66 = v65[1];
                      ++v65;
                      result = v71;
                    }
                    v67 = v70;
                    v64 = result;
                  }
                  while (*(_DWORD *)(v66 + 8) >= v69);
                  *v70 = v68;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v72 = (unint64_t)v9 >> 3;
            do
            {
              v73 = 0;
              v74 = *v8;
              v75 = v8;
              do
              {
                v76 = &v75[v73];
                v79 = v76[1];
                v77 = v76 + 1;
                v78 = v79;
                v80 = (2 * v73) | 1;
                v81 = 2 * v73 + 2;
                if (v81 < v72)
                {
                  result = *(unsigned int *)(v78 + 8);
                  if (result < *(_DWORD *)(v77[1] + 8))
                  {
                    v78 = v77[1];
                    ++v77;
                    v80 = v81;
                  }
                }
                *v75 = v78;
                v75 = v77;
                v73 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              if (v77 == --a2)
              {
                *v77 = v74;
              }
              else
              {
                *v77 = *a2;
                *a2 = v74;
                v82 = (char *)v77 - (char *)v8 + 8;
                if (v82 >= 9)
                {
                  v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                  v84 = &v8[v83];
                  v85 = *v84;
                  v86 = *v77;
                  v87 = *(_DWORD *)(*v77 + 8);
                  if (*(_DWORD *)(*v84 + 8) < v87)
                  {
                    do
                    {
                      v88 = v84;
                      *v77 = v85;
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = &v8[v83];
                      v85 = *v84;
                      v77 = v88;
                    }
                    while (*(_DWORD *)(*v84 + 8) < v87);
                    *v88 = v86;
                  }
                }
              }
            }
            while (v72-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 8);
          if (*(_DWORD *)(*(v7 - 1) + 8) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)(*(a2 - 1) + 8))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(_DWORD *)(*v8 + 8));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)(v29 + 8));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(_DWORD *)(v32 + 8));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(_DWORD *)(v35 + 8));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(_DWORD *)(v36 + 8));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 8);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 8) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 8) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 8) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(_DWORD *)(v25 + 8) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(_DWORD *)(v26 + 8) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v7, v27);
        v8 = v27 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 8);
  v6 = *(_DWORD *)(*result + 8);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 8);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 8) < *(_DWORD *)(*result + 8))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 8) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 8) < *(_DWORD *)(*a1 + 8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_DWORD *)(v21 + 8) < *(_DWORD *)(v22 + 8))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_DWORD *)(*v20 + 8);
        if (v25 < *(_DWORD *)(*v19 + 8))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 8))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 8))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 8);
    if (v14 < *(_DWORD *)(*v8 + 8))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 8))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_2 &,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*a4 + 8) < *(_DWORD *)(*a3 + 8))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)(*a3 + 8) < *(_DWORD *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)(*a2 + 8) < *(_DWORD *)(*a1 + 8))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24FDF7BF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24FDF7BF8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7>,void ()(void)>::operator()(_QWORD *result)
{
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT ***v1;
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT **v2;
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT **v3;
  _QWORD *v4;
  uint64_t *v5;
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *v6;
  uint64_t *v7;
  void **v8;
  uint64_t TimelineDefinitionRef;
  uint64_t ServiceLocator;
  uint64_t TimelineAsset;
  uint64_t String;
  char *v13;
  size_t v14;
  void **v15;
  char *v16;
  void **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT **v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT **v29;
  char *v30;
  char *v31;
  realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *v32;
  uint64_t v33;
  void *__p[2];
  char v35;
  uint64_t v36;
  uint64_t v37;

  v1 = (realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT ***)result[1];
  v2 = *v1;
  v3 = v1[1];
  if (*v1 != v3)
  {
    v4 = result;
    v5 = (uint64_t *)result[2];
    do
    {
      v6 = *v2;
      v7 = (uint64_t *)v4[5];
      v8 = (void **)v4[6];
      v37 = 0;
      TimelineDefinitionRef = realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT::createTimelineDefinitionRef(v6);
      if (v37)
        RERelease();
      v37 = TimelineDefinitionRef;
      if (TimelineDefinitionRef)
      {
        ServiceLocator = REEngineGetServiceLocator();
        MEMORY[0x2348B1264](ServiceLocator);
        v36 = 0;
        TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (v36)
          RERelease();
        v36 = TimelineAsset;
        if (TimelineAsset)
        {
          String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v6);
          v13 = (char *)String;
          if (*(char *)(String + 23) >= 0)
            v14 = *(unsigned __int8 *)(String + 23);
          else
            v14 = *(_QWORD *)(String + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 25);
          if (v35 >= 0)
            v15 = __p;
          else
            v15 = (void **)__p[0];
          if (v14)
          {
            if (v13[23] >= 0)
              v16 = v13;
            else
              v16 = *(char **)v13;
            memmove(v15, v16, v14);
          }
          strcpy((char *)v15 + v14, "_blendShapeAnimationAsset");
          v33 = v36;
          if (v36)
            RERetain();
          if (v35 >= 0)
            v17 = __p;
          else
            v17 = (void **)__p[0];
          realityio::Builder::addAsset(v5, &v33, (uint64_t)v17);
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v33);
          v18 = (_QWORD *)v7[1];
          if ((unint64_t)v18 >= v7[2])
          {
            v20 = std::vector<realityio::WrappedRERef<REAsset *>>::__push_back_slow_path<realityio::WrappedRERef<REAsset *> const&>(v7, &v36);
          }
          else
          {
            v19 = v36;
            *v18 = v36;
            if (v19)
              RERetain();
            v20 = (uint64_t)(v18 + 1);
            v7[1] = (uint64_t)(v18 + 1);
          }
          v7[1] = v20;
          v22 = (realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT **)v8[1];
          v21 = (unint64_t)v8[2];
          if ((unint64_t)v22 >= v21)
          {
            v24 = ((char *)v22 - (_BYTE *)*v8) >> 3;
            if ((unint64_t)(v24 + 1) >> 61)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v25 = v21 - (_QWORD)*v8;
            v26 = v25 >> 2;
            if (v25 >> 2 <= (unint64_t)(v24 + 1))
              v26 = v24 + 1;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
              v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v27);
            else
              v28 = 0;
            v29 = (realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT **)(v27 + 8 * v24);
            *v29 = v6;
            v23 = v29 + 1;
            v31 = (char *)*v8;
            v30 = (char *)v8[1];
            if (v30 != *v8)
            {
              do
              {
                v32 = (realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT *)*((_QWORD *)v30 - 1);
                v30 -= 8;
                *--v29 = v32;
              }
              while (v30 != v31);
              v30 = (char *)*v8;
            }
            *v8 = v29;
            v8[1] = v23;
            v8[2] = (void *)(v27 + 8 * v28);
            if (v30)
              operator delete(v30);
          }
          else
          {
            *v22 = v6;
            v23 = v22 + 1;
          }
          v8[1] = v23;
          if (v35 < 0)
            operator delete(__p[0]);
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v36);
      }
      result = realityio::WrappedRERef<RETimelineDefinition *>::~WrappedRERef(&v37);
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_23011201C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a16);
  realityio::WrappedRERef<RETimelineDefinition *>::~WrappedRERef(&a17);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_7>,void ()(void)>::target_type()
{
}

void std::allocate_shared[abi:ne180100]<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT,std::allocator<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>,REEntity *&,REAsset *,std::vector<realityio::WrappedRERef<REAsset *>> &,std::vector<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*> &,std::string const&,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  std::string *v13;
  std::string __p;

  v12 = operator new(0x70uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_24FDF7C78;
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    __p = *(std::string *)a6;
  v12[3] = a2;
  if (a2)
    RERetain();
  v12[4] = a3;
  if (a3)
    RERetain();
  v12[5] = 0;
  v12[6] = 0;
  v12[7] = 0;
  std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(v12 + 5, *a4, a4[1], (a4[1] - *a4) >> 3);
  v12[8] = 0;
  v12[9] = 0;
  v12[10] = 0;
  std::vector<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const*>::__init_with_size[abi:ne180100]<realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**,realityio::SkeletalAnimationAssetBuilder::BlendShapeAnimationAssetDataT const**>(v12 + 8, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
  v13 = (std::string *)(v12 + 11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v12[13] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *a1 = v12 + 3;
  a1[1] = v12;
}

void sub_230112208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__shared_weak_count *v15;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  std::__shared_weak_count_vtbl *v20;
  void *v21;

  v20 = (std::__shared_weak_count_vtbl *)*v18;
  if (*v18)
  {
    v15[3].__vftable = v20;
    operator delete(v20);
  }
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v17);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v16);
  if (a14 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7C78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__shared_ptr_emplace<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 40);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v4);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(a1 + 32));
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(a1 + 24));
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF7CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_24FDF7D18;
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::BlendShapeAnimationSceneDataT>>::getRawValue(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDF7D48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF7D48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 16);
  REAnimationComponentGetComponentType();
  v5[0] = &off_24FDF7DB8;
  v5[1] = v1;
  v6 = v5;
  v4 = REEntityGetOrAddComponentByClass();
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v6 + 48))(v6, &v4);
  RENetworkMarkComponentDirty();
  result = v6;
  if (v6 == v5)
  {
    v3 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
}

void sub_230112534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8,std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF7DB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF7DB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  result = REAnimationComponentActiveAnimationCount();
  if (result)
    return REAnimationComponentStopAllAnimations();
  return result;
}

uint64_t std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1},std::allocator<realityio::SkeletalAnimationAggregationBuilder::run(realityio::Inputs *)::$_8::operator() const(void)::{lambda(REComponent *)#1}>,void ()(REComponent *)>::target_type()
{
}

_QWORD *RIO_MTLX::TypedValue<int>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<int>::TYPE(void)::v, "integer");
  }
  return RIO_MTLX::TypedValue<int>::TYPE(void)::v;
}

void sub_23011270C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::toValueString<int>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_230112750(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t RIO_MTLX::`anonymous namespace'::dataToString<int>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[13];
  char v9;
  uint64_t v10;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  v3 = v8[0];
  *(_DWORD *)((char *)&v8[1] + *(_QWORD *)(v8[0] - 24)) &= 0xFFFFFEFB;
  *(_QWORD *)((char *)&v8[2] + *(_QWORD *)(v3 - 24)) = 6;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  v8[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v8[2] = v4;
  v8[3] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2348B4DA4](&v10);
}

void sub_23011286C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::`anonymous namespace'::stringToData<int>(const std::string *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[13];
  char v6;
  uint64_t v7;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v5, a1, 24);
  MEMORY[0x2348B4BAC](v5, a2);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v5[3] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2348B4DA4](&v7);
}

void sub_230112930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<BOOL>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<BOOL>::TYPE(void)::v, "BOOLean");
  }
  return RIO_MTLX::TypedValue<BOOL>::TYPE(void)::v;
}

void sub_2301129A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *RIO_MTLX::toValueString<BOOL>@<X0>(RIO_MTLX *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
}

void sub_2301129EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *RIO_MTLX::`anonymous namespace'::dataToString<BOOL>(RIO_MTLX *a1, std::string *a2)
{
  const std::string *v3;

  if (*(_BYTE *)a1)
    v3 = (const std::string *)RIO_MTLX::VALUE_STRING_TRUE(a1);
  else
    v3 = (const std::string *)RIO_MTLX::VALUE_STRING_FALSE(a1);
  return std::string::operator=(a2, v3);
}

RIO_MTLX *RIO_MTLX::`anonymous namespace'::stringToData<BOOL>(RIO_MTLX *a1, _BYTE *a2)
{
  RIO_MTLX *v3;
  RIO_MTLX *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  RIO_MTLX *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;

  v3 = a1;
  result = (RIO_MTLX *)RIO_MTLX::VALUE_STRING_TRUE(a1);
  v5 = *((unsigned __int8 *)v3 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = *((unsigned __int8 *)v3 + 23);
  else
    v6 = *((_QWORD *)v3 + 1);
  v7 = *((unsigned __int8 *)result + 23);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)result + 1);
  if (v6 != v7)
    goto LABEL_17;
  if (v8 >= 0)
    v9 = (unsigned __int8 *)result;
  else
    v9 = *(unsigned __int8 **)result;
  if ((v5 & 0x80) != 0)
  {
    result = (RIO_MTLX *)memcmp(*(const void **)v3, v9, *((_QWORD *)v3 + 1));
    if ((_DWORD)result)
      goto LABEL_17;
LABEL_31:
    LOBYTE(v11) = 1;
    goto LABEL_32;
  }
  if (!*((_BYTE *)v3 + 23))
    goto LABEL_31;
  v10 = v3;
  while (*(unsigned __int8 *)v10 == *v9)
  {
    v10 = (RIO_MTLX *)((char *)v10 + 1);
    ++v9;
    if (!--v5)
      goto LABEL_31;
  }
LABEL_17:
  result = (RIO_MTLX *)RIO_MTLX::VALUE_STRING_FALSE(result);
  v11 = *((unsigned __int8 *)v3 + 23);
  if ((v11 & 0x80u) == 0)
    v12 = *((unsigned __int8 *)v3 + 23);
  else
    v12 = *((_QWORD *)v3 + 1);
  v13 = *((unsigned __int8 *)result + 23);
  v14 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)result + 1);
  if (v12 != v13)
    return result;
  if (v14 >= 0)
    v15 = (unsigned __int8 *)result;
  else
    v15 = *(unsigned __int8 **)result;
  if ((v11 & 0x80) != 0)
  {
    result = (RIO_MTLX *)memcmp(*(const void **)v3, v15, *((_QWORD *)v3 + 1));
    if ((_DWORD)result)
      return result;
    LOBYTE(v11) = 0;
LABEL_32:
    *a2 = v11;
    return result;
  }
  if (!*((_BYTE *)v3 + 23))
    goto LABEL_32;
  while (*(unsigned __int8 *)v3 == *v15)
  {
    v3 = (RIO_MTLX *)((char *)v3 + 1);
    ++v15;
    if (!--v11)
      goto LABEL_32;
  }
  return result;
}

_QWORD *RIO_MTLX::TypedValue<float>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<float>::TYPE(void)::v, "float");
  }
  return RIO_MTLX::TypedValue<float>::TYPE(void)::v;
}

void sub_230112BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::toValueString<float>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_230112C0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t RIO_MTLX::`anonymous namespace'::dataToString<float>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[13];
  char v9;
  uint64_t v10;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
  v3 = v8[0];
  *(_DWORD *)((char *)&v8[1] + *(_QWORD *)(v8[0] - 24)) &= 0xFFFFFEFB;
  *(_QWORD *)((char *)&v8[2] + *(_QWORD *)(v3 - 24)) = 6;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  v8[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v8[2] = v4;
  v8[3] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2348B4DA4](&v10);
}

void sub_230112D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t RIO_MTLX::`anonymous namespace'::stringToData<float>(const std::string *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[13];
  char v6;
  uint64_t v7;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v5, a1, 24);
  MEMORY[0x2348B4BA0](v5, a2);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v5[3] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2348B4DA4](&v7);
}

void sub_230112DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v, "color3");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v;
}

void sub_230112E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RIO_MTLX::toValueString<RIO_MTLX::Color3>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;
  const std::string::value_type *p_p;
  std::string::size_type v6;
  std::string *v7;
  const std::string::value_type *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  void *__p;
  std::string::size_type v13;
  uint64_t v14;

  v4 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
    if (v14 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v14 >= 0)
      v6 = HIBYTE(v14);
    else
      v6 = v13;
    v7 = std::string::append(a2, p_p, v6);
    if (v4 <= 1)
    {
      v8 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v7);
      v9 = v8[23];
      if (v9 >= 0)
        v10 = v8;
      else
        v10 = *(const std::string::value_type **)v8;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v8 + 23);
      else
        v11 = *((_QWORD *)v8 + 1);
      std::string::append(a2, v10, v11);
    }
    if (SHIBYTE(v14) < 0)
      operator delete(__p);
    ++v4;
    a1 += 4;
  }
  while (v4 != 3);
}

void sub_230112F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v, "color4");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v;
}

void sub_230112FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v, "vector2");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v;
}

void sub_230113048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RIO_MTLX::toValueString<RIO_MTLX::Vector2>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  const std::string::value_type *p_p;
  std::string::size_type v8;
  std::string *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  void *__p;
  std::string::size_type v15;
  uint64_t v16;

  v4 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    __p = 0;
    v15 = 0;
    v16 = 0;
    if (v16 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v16 >= 0)
      v8 = HIBYTE(v16);
    else
      v8 = v15;
    v9 = std::string::append(a2, p_p, v8);
    if ((v6 & 1) != 0)
    {
      v10 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v9);
      v11 = v10[23];
      if (v11 >= 0)
        v12 = v10;
      else
        v12 = *(const std::string::value_type **)v10;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)v10 + 23);
      else
        v13 = *((_QWORD *)v10 + 1);
      std::string::append(a2, v12, v13);
    }
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
    v5 = 0;
    v4 = 1;
  }
  while ((v6 & 1) != 0);
}

void sub_230113120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v, "vector3");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v;
}

void sub_2301131B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RIO_MTLX::toValueString<RIO_MTLX::Vector3>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;
  const std::string::value_type *p_p;
  std::string::size_type v6;
  std::string *v7;
  const std::string::value_type *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  void *__p;
  std::string::size_type v13;
  uint64_t v14;

  v4 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
    if (v14 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v14 >= 0)
      v6 = HIBYTE(v14);
    else
      v6 = v13;
    v7 = std::string::append(a2, p_p, v6);
    if (v4 <= 1)
    {
      v8 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v7);
      v9 = v8[23];
      if (v9 >= 0)
        v10 = v8;
      else
        v10 = *(const std::string::value_type **)v8;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v8 + 23);
      else
        v11 = *((_QWORD *)v8 + 1);
      std::string::append(a2, v10, v11);
    }
    if (SHIBYTE(v14) < 0)
      operator delete(__p);
    ++v4;
    a1 += 4;
  }
  while (v4 != 3);
}

void sub_230113288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

float RIO_MTLX::fromValueString<RIO_MTLX::Vector3>(RIO_MTLX *a1)
{
  unsigned __int8 **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  int v7;
  _QWORD v8[3];
  void **v9;

  v7 = 0;
  v6 = 0;
  v2 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v2, (uint64_t)v8);
  v3 = 0;
  v4 = &v6;
  do
  {
    v3 += 24;
    v4 = (uint64_t *)((char *)v4 + 4);
  }
  while (v3 != 72);
  v9 = (void **)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  return *(float *)&v6;
}

void sub_230113334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 24) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 24));
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v, "vector4");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v;
}

void sub_2301133B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v, "matrix33");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v;
}

void sub_230113430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v, "matrix44");
  }
  return &RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v;
}

void sub_2301134AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<std::string>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<std::string>::TYPE(void)::v, "string");
  }
  return RIO_MTLX::TypedValue<std::string>::TYPE(void)::v;
}

void sub_230113528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *RIO_MTLX::toValueString<std::string>@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::operator=(a2, __str);
}

void sub_230113570(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *RIO_MTLX::fromValueString<std::string>@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::operator=(a2, __str);
}

void sub_2301135BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *RIO_MTLX::TypedValue<std::vector<int>>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<std::vector<int>>::TYPE(void)::v, "integerarray");
  }
  return RIO_MTLX::TypedValue<std::vector<int>>::TYPE(void)::v;
}

void sub_23011363C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE(void)::v, "BOOLeanarray");
  }
  return RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE(void)::v;
}

void sub_2301136B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<std::vector<float>>::TYPE()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<std::vector<float>>::TYPE(void)::v, "floatarray");
  }
  return RIO_MTLX::TypedValue<std::vector<float>>::TYPE(void)::v;
}

void sub_230113734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v, "stringarray");
  }
  return RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v;
}

void sub_2301137B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RIO_MTLX::toValueString<std::vector<std::string>>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string v14;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      memset(&v14, 0, sizeof(v14));
      std::string::operator=(&v14, (const std::string *)(v3 + v5));
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v14;
      else
        v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      else
        size = v14.__r_.__value_.__l.__size_;
      v9 = std::string::append(a2, (const std::string::value_type *)v7, size);
      if (++v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3))
      {
        v10 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v9);
        v11 = v10[23];
        if (v11 >= 0)
          v12 = v10;
        else
          v12 = *(const std::string::value_type **)v10;
        if (v11 >= 0)
          v13 = *((unsigned __int8 *)v10 + 23);
        else
          v13 = *((_QWORD *)v10 + 1);
        std::string::append(a2, v12, v13);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      v3 = *a1;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
}

void sub_2301138C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::fromValueString<std::vector<std::string>>(RIO_MTLX *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 **v4;
  const std::string *v5;
  const std::string *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  std::string __p;
  _QWORD v11[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v11);
  v5 = (const std::string *)v11[0];
  v6 = (const std::string *)v11[1];
  while (v5 != v6)
  {
    memset(&__p, 0, sizeof(__p));
    std::string::operator=(&__p, v5);
    v7 = a2[1];
    if (v7 >= a2[2])
    {
      v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v7 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v7 = v8;
      }
      v9 = v7 + 24;
      a2[1] = v7 + 24;
    }
    a2[1] = v9;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ++v5;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_2301139D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<long>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<long>::TYPE(void)::v, "integer");
  }
  return RIO_MTLX::TypedValue<long>::TYPE(void)::v;
}

void sub_230113A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<double>::TYPE()
{
  unsigned __int8 v0;

  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::TypedValue<double>::TYPE(void)::v, "float");
  }
  return RIO_MTLX::TypedValue<double>::TYPE(void)::v;
}

void sub_230113B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__int128 *RIO_MTLX::Value::_creatorMap(RIO_MTLX::Value *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::Value::_creatorMap(void)::v = 0u;
    unk_255E53D78 = 0u;
    dword_255E53D88 = 1065353216;
  }
  return &RIO_MTLX::Value::_creatorMap(void)::v;
}

void RIO_MTLX::Value::createValueFromStrings(RIO_MTLX::Value *a1@<X0>, unsigned __int8 *a2@<X1>, _OWORD *a3@<X8>)
{
  unsigned __int8 *v6;

  RIO_MTLX::Value::_creatorMap(a1);
  v6 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, a2);
  RIO_MTLX::Value::_creatorMap((RIO_MTLX::Value *)v6);
  if (v6)
    (*((void (**)(RIO_MTLX::Value *))v6 + 5))(a1);
  else
    RIO_MTLX::TypedValue<std::string>::createFromString((std::string *)a1, a3);
}

void RIO_MTLX::TypedValue<std::string>::createFromString(std::string *a1@<X0>, _OWORD *a2@<X8>)
{
  std::string __p;
  __int128 v4;

  RIO_MTLX::fromValueString<std::string>(a1, &__p);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::string>,std::allocator<RIO_MTLX::TypedValue<std::string>>,std::string const&,void>((__int128 *)&__p, &v4);
  *a2 = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_230113C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *RIO_MTLX::TypedValue<int>::getTypeString()
{
  RIO_MTLX::TypedValue<int>::TYPE();
  return RIO_MTLX::TypedValue<int>::TYPE(void)::v;
}

uint64_t RIO_MTLX::TypedValue<int>::getValueString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return RIO_MTLX::toValueString<int>(a1 + 8, a2);
}

void *RIO_MTLX::registryint(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<int>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryint(void)::registryint);
  }
  return &RIO_MTLX::registryint(void)::registryint;
}

void sub_230113CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<BOOL>::getTypeString()
{
  RIO_MTLX::TypedValue<BOOL>::TYPE();
  return RIO_MTLX::TypedValue<BOOL>::TYPE(void)::v;
}

std::string *RIO_MTLX::TypedValue<BOOL>::getValueString@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return RIO_MTLX::toValueString<BOOL>((RIO_MTLX *)(a1 + 8), a2);
}

void *RIO_MTLX::registryBOOL(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<BOOL>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryBOOL(void)::registryBOOL);
  }
  return &RIO_MTLX::registryBOOL(void)::registryBOOL;
}

void sub_230113D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<float>::getTypeString()
{
  RIO_MTLX::TypedValue<float>::TYPE();
  return RIO_MTLX::TypedValue<float>::TYPE(void)::v;
}

uint64_t RIO_MTLX::TypedValue<float>::getValueString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return RIO_MTLX::toValueString<float>(a1 + 8, a2);
}

void *RIO_MTLX::registryfloat(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<float>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryfloat(void)::registryfloat);
  }
  return &RIO_MTLX::registryfloat(void)::registryfloat;
}

void sub_230113E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Color3>::getTypeString()
{
  RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE();
  return &RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Color3>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  RIO_MTLX::toValueString<RIO_MTLX::Color3>(a1 + 8, a2);
}

void *RIO_MTLX::registryColor3(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Color3>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryColor3(void)::registryColor3);
  }
  return &RIO_MTLX::registryColor3(void)::registryColor3;
}

void sub_230113EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Color4>::getTypeString()
{
  RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE();
  return &RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Color4>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  const std::string::value_type *p_p;
  std::string::size_type v6;
  std::string *v7;
  const std::string::value_type *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  void *__p;
  std::string::size_type v13;
  uint64_t v14;

  v3 = 0;
  v4 = a1 + 8;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
    if (v14 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v14 >= 0)
      v6 = HIBYTE(v14);
    else
      v6 = v13;
    v7 = std::string::append(a2, p_p, v6);
    if (v3 <= 2)
    {
      v8 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v7);
      v9 = v8[23];
      if (v9 >= 0)
        v10 = v8;
      else
        v10 = *(const std::string::value_type **)v8;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v8 + 23);
      else
        v11 = *((_QWORD *)v8 + 1);
      std::string::append(a2, v10, v11);
    }
    if (SHIBYTE(v14) < 0)
      operator delete(__p);
    ++v3;
    v4 += 4;
  }
  while (v3 != 4);
}

void sub_230113F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryColor4(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Color4>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryColor4(void)::registryColor4);
  }
  return &RIO_MTLX::registryColor4(void)::registryColor4;
}

void sub_230114020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::getTypeString()
{
  RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE();
  return &RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  RIO_MTLX::toValueString<RIO_MTLX::Vector2>(a1 + 8, a2);
}

void *RIO_MTLX::registryVector2(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Vector2>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryVector2(void)::registryVector2);
  }
  return &RIO_MTLX::registryVector2(void)::registryVector2;
}

void sub_2301140B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::getTypeString()
{
  RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE();
  return &RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  RIO_MTLX::toValueString<RIO_MTLX::Vector3>(a1 + 8, a2);
}

void *RIO_MTLX::registryVector3(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Vector3>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryVector3(void)::registryVector3);
  }
  return &RIO_MTLX::registryVector3(void)::registryVector3;
}

void sub_230114150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::getTypeString()
{
  RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE();
  return &RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  const std::string::value_type *p_p;
  std::string::size_type v6;
  std::string *v7;
  const std::string::value_type *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  void *__p;
  std::string::size_type v13;
  uint64_t v14;

  v3 = 0;
  v4 = a1 + 8;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
    if (v14 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v14 >= 0)
      v6 = HIBYTE(v14);
    else
      v6 = v13;
    v7 = std::string::append(a2, p_p, v6);
    if (v3 <= 2)
    {
      v8 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v7);
      v9 = v8[23];
      if (v9 >= 0)
        v10 = v8;
      else
        v10 = *(const std::string::value_type **)v8;
      if (v9 >= 0)
        v11 = *((unsigned __int8 *)v8 + 23);
      else
        v11 = *((_QWORD *)v8 + 1);
      std::string::append(a2, v10, v11);
    }
    if (SHIBYTE(v14) < 0)
      operator delete(__p);
    ++v3;
    v4 += 4;
  }
  while (v3 != 4);
}

void sub_230114244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryVector4(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Vector4>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryVector4(void)::registryVector4);
  }
  return &RIO_MTLX::registryVector4(void)::registryVector4;
}

void sub_2301142CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::getTypeString()
{
  RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE();
  return &RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const std::string::value_type *p_p;
  std::string::size_type v8;
  std::string *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  void *__p;
  std::string::size_type v15;
  uint64_t v16;

  v3 = 0;
  v4 = a1 + 8;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    v5 = 0;
    v6 = v4;
    do
    {
      __p = 0;
      v15 = 0;
      v16 = 0;
      if (v16 >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (v16 >= 0)
        v8 = HIBYTE(v16);
      else
        v8 = v15;
      v9 = std::string::append(a2, p_p, v8);
      if (v3 < 2 || v5 <= 1)
      {
        v10 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v9);
        v11 = v10[23];
        if (v11 >= 0)
          v12 = v10;
        else
          v12 = *(const std::string::value_type **)v10;
        if (v11 >= 0)
          v13 = *((unsigned __int8 *)v10 + 23);
        else
          v13 = *((_QWORD *)v10 + 1);
        std::string::append(a2, v12, v13);
      }
      if (SHIBYTE(v16) < 0)
        operator delete(__p);
      ++v5;
      v6 += 4;
    }
    while (v5 != 3);
    ++v3;
    v4 += 12;
  }
  while (v3 != 3);
}

void sub_2301143E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryMatrix33(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Matrix33>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryMatrix33(void)::registryMatrix33);
  }
  return &RIO_MTLX::registryMatrix33(void)::registryMatrix33;
}

void sub_230114470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::getTypeString()
{
  RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE();
  return &RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const std::string::value_type *p_p;
  std::string::size_type v8;
  std::string *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  void *__p;
  std::string::size_type v15;
  uint64_t v16;

  v3 = 0;
  v4 = a1 + 8;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    v5 = 0;
    v6 = v4;
    do
    {
      __p = 0;
      v15 = 0;
      v16 = 0;
      if (v16 >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (v16 >= 0)
        v8 = HIBYTE(v16);
      else
        v8 = v15;
      v9 = std::string::append(a2, p_p, v8);
      if (v3 < 3 || v5 <= 2)
      {
        v10 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v9);
        v11 = v10[23];
        if (v11 >= 0)
          v12 = v10;
        else
          v12 = *(const std::string::value_type **)v10;
        if (v11 >= 0)
          v13 = *((unsigned __int8 *)v10 + 23);
        else
          v13 = *((_QWORD *)v10 + 1);
        std::string::append(a2, v12, v13);
      }
      if (SHIBYTE(v16) < 0)
        operator delete(__p);
      ++v5;
      v6 += 4;
    }
    while (v5 != 4);
    ++v3;
    v4 += 16;
  }
  while (v3 != 4);
}

void sub_23011458C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryMatrix44(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<RIO_MTLX::Matrix44>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryMatrix44(void)::registryMatrix44);
  }
  return &RIO_MTLX::registryMatrix44(void)::registryMatrix44;
}

void sub_230114614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<std::string>::getTypeString()
{
  RIO_MTLX::TypedValue<std::string>::TYPE();
  return RIO_MTLX::TypedValue<std::string>::TYPE(void)::v;
}

std::string *RIO_MTLX::TypedValue<std::string>::getValueString@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return RIO_MTLX::toValueString<std::string>((std::string *)(a1 + 8), a2);
}

void *RIO_MTLX::registrystring(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<std::string>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registrystring(void)::registrystring);
  }
  return &RIO_MTLX::registrystring(void)::registrystring;
}

void sub_2301146AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<std::vector<int>>::getTypeString()
{
  RIO_MTLX::TypedValue<std::vector<int>>::TYPE();
  return RIO_MTLX::TypedValue<std::vector<int>>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<std::vector<int>>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  const std::string::value_type *p_p;
  std::string::size_type v8;
  std::string *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  void *__p;
  std::string::size_type v15;
  uint64_t v16;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v3)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      __p = 0;
      v15 = 0;
      v16 = 0;
      if (v16 >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (v16 >= 0)
        v8 = HIBYTE(v16);
      else
        v8 = v15;
      v9 = std::string::append(a2, p_p, v8);
      if (++v6 < (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2)
      {
        v10 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v9);
        v11 = v10[23];
        if (v11 >= 0)
          v12 = v10;
        else
          v12 = *(const std::string::value_type **)v10;
        if (v11 >= 0)
          v13 = *((unsigned __int8 *)v10 + 23);
        else
          v13 = *((_QWORD *)v10 + 1);
        std::string::append(a2, v12, v13);
      }
      if (SHIBYTE(v16) < 0)
        operator delete(__p);
      v3 = *(_QWORD *)(a1 + 8);
      v5 += 4;
    }
    while (v6 < (*(_QWORD *)(a1 + 16) - v3) >> 2);
  }
}

void sub_2301147C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryIntVec(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<std::vector<int>>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryIntVec(void)::registryIntVec);
  }
  return &RIO_MTLX::registryIntVec(void)::registryIntVec;
}

void sub_230114850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<std::vector<BOOL>>::getTypeString()
{
  RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE();
  return RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<std::vector<BOOL>>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;
  std::string *p_p;
  std::string::size_type size;
  std::string *v7;
  const std::string::value_type *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  char v12;
  std::string __p;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = 0;
    do
    {
      memset(&__p, 0, sizeof(__p));
      v12 = (*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4) & 1;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v7 = std::string::append(a2, (const std::string::value_type *)p_p, size);
      if (++v4 < *(_QWORD *)(a1 + 16))
      {
        v8 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v7);
        v9 = v8[23];
        if (v9 >= 0)
          v10 = v8;
        else
          v10 = *(const std::string::value_type **)v8;
        if (v9 >= 0)
          v11 = *((unsigned __int8 *)v8 + 23);
        else
          v11 = *((_QWORD *)v8 + 1);
        std::string::append(a2, v10, v11);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    while (v4 < *(_QWORD *)(a1 + 16));
  }
}

void sub_23011496C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryBoolVec(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<std::vector<BOOL>>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryBoolVec(void)::registryBoolVec);
  }
  return &RIO_MTLX::registryBoolVec(void)::registryBoolVec;
}

void sub_2301149F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<std::vector<float>>::getTypeString()
{
  RIO_MTLX::TypedValue<std::vector<float>>::TYPE();
  return RIO_MTLX::TypedValue<std::vector<float>>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<std::vector<float>>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  const std::string::value_type *p_p;
  std::string::size_type v8;
  std::string *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  void *__p;
  std::string::size_type v15;
  uint64_t v16;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v3)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      __p = 0;
      v15 = 0;
      v16 = 0;
      if (v16 >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (v16 >= 0)
        v8 = HIBYTE(v16);
      else
        v8 = v15;
      v9 = std::string::append(a2, p_p, v8);
      if (++v6 < (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2)
      {
        v10 = (const std::string::value_type *)RIO_MTLX::ARRAY_PREFERRED_SEPARATOR((RIO_MTLX *)v9);
        v11 = v10[23];
        if (v11 >= 0)
          v12 = v10;
        else
          v12 = *(const std::string::value_type **)v10;
        if (v11 >= 0)
          v13 = *((unsigned __int8 *)v10 + 23);
        else
          v13 = *((_QWORD *)v10 + 1);
        std::string::append(a2, v12, v13);
      }
      if (SHIBYTE(v16) < 0)
        operator delete(__p);
      v3 = *(_QWORD *)(a1 + 8);
      v5 += 4;
    }
    while (v6 < (*(_QWORD *)(a1 + 16) - v3) >> 2);
  }
}

void sub_230114B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void *RIO_MTLX::registryFloatVec(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<std::vector<float>>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryFloatVec(void)::registryFloatVec);
  }
  return &RIO_MTLX::registryFloatVec(void)::registryFloatVec;
}

void sub_230114B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<std::vector<std::string>>::getTypeString()
{
  RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE();
  return RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v;
}

void RIO_MTLX::TypedValue<std::vector<std::string>>::getValueString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  RIO_MTLX::toValueString<std::vector<std::string>>((uint64_t *)(a1 + 8), a2);
}

void *RIO_MTLX::registryStringVec(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<std::vector<std::string>>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registryStringVec(void)::registryStringVec);
  }
  return &RIO_MTLX::registryStringVec(void)::registryStringVec;
}

void sub_230114C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<long>::getTypeString()
{
  RIO_MTLX::TypedValue<long>::TYPE();
  return RIO_MTLX::TypedValue<long>::TYPE(void)::v;
}

uint64_t RIO_MTLX::TypedValue<long>::getValueString@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  _QWORD v7[13];
  char v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  v2 = v7[0];
  *(_DWORD *)((char *)&v7[1] + *(_QWORD *)(v7[0] - 24)) &= 0xFFFFFEFB;
  *(_QWORD *)((char *)&v7[2] + *(_QWORD *)(v2 - 24)) = 6;
  std::ostream::operator<<();
  std::stringbuf::str();
  v7[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a1[2] = v6;
  *(_OWORD *)a1 = v5;
  v7[2] = v3;
  v7[3] = MEMORY[0x24BEDB848] + 16;
  if (v8 < 0)
    operator delete((void *)v7[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2348B4DA4](&v9);
}

void sub_230114D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v32;

  a12 = *MEMORY[0x24BEDB7F0];
  v32 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a12 + *(_QWORD *)(a12 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a14 = v32;
  a15 = MEMORY[0x24BEDB848] + 16;
  if (a28 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](&a31);
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registrylong(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<long>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registrylong(void)::registrylong);
  }
  return &RIO_MTLX::registrylong(void)::registrylong;
}

void sub_230114E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *RIO_MTLX::TypedValue<double>::getTypeString()
{
  RIO_MTLX::TypedValue<double>::TYPE();
  return RIO_MTLX::TypedValue<double>::TYPE(void)::v;
}

uint64_t RIO_MTLX::TypedValue<double>::getValueString@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  _QWORD v7[13];
  char v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  v2 = v7[0];
  *(_DWORD *)((char *)&v7[1] + *(_QWORD *)(v7[0] - 24)) &= 0xFFFFFEFB;
  *(_QWORD *)((char *)&v7[2] + *(_QWORD *)(v2 - 24)) = 6;
  std::ostream::operator<<();
  std::stringbuf::str();
  v7[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a1[2] = v6;
  *(_OWORD *)a1 = v5;
  v7[2] = v3;
  v7[3] = MEMORY[0x24BEDB848] + 16;
  if (v8 < 0)
    operator delete((void *)v7[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2348B4DA4](&v9);
}

void sub_230114F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v32;

  a12 = *MEMORY[0x24BEDB7F0];
  v32 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a12 + *(_QWORD *)(a12 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a14 = v32;
  a15 = MEMORY[0x24BEDB848] + 16;
  if (a28 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](&a31);
  _Unwind_Resume(a1);
}

void *RIO_MTLX::registrydouble(RIO_MTLX *this)
{
  unsigned __int8 v1;

  {
    RIO_MTLX::ValueRegistry<double>::ValueRegistry((RIO_MTLX::Value *)&RIO_MTLX::registrydouble(void)::registrydouble);
  }
  return &RIO_MTLX::registrydouble(void)::registrydouble;
}

void sub_230115034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *RIO_MTLX::Value::initValueTypeRegistry(RIO_MTLX::Value *this)
{
  RIO_MTLX *v1;
  RIO_MTLX *v2;
  RIO_MTLX *v3;
  RIO_MTLX *v4;
  RIO_MTLX *v5;
  RIO_MTLX *v6;
  RIO_MTLX *v7;
  RIO_MTLX *v8;
  RIO_MTLX *v9;
  RIO_MTLX *v10;
  RIO_MTLX *v11;
  RIO_MTLX *v12;
  RIO_MTLX *v13;
  RIO_MTLX *v14;
  RIO_MTLX *v15;
  RIO_MTLX *v16;

  v1 = (RIO_MTLX *)RIO_MTLX::registryint(this);
  v2 = (RIO_MTLX *)RIO_MTLX::registryBOOL(v1);
  v3 = (RIO_MTLX *)RIO_MTLX::registryfloat(v2);
  v4 = (RIO_MTLX *)RIO_MTLX::registryColor3(v3);
  v5 = (RIO_MTLX *)RIO_MTLX::registryColor4(v4);
  v6 = (RIO_MTLX *)RIO_MTLX::registryVector2(v5);
  v7 = (RIO_MTLX *)RIO_MTLX::registryVector3(v6);
  v8 = (RIO_MTLX *)RIO_MTLX::registryVector4(v7);
  v9 = (RIO_MTLX *)RIO_MTLX::registryMatrix33(v8);
  v10 = (RIO_MTLX *)RIO_MTLX::registryMatrix44(v9);
  v11 = (RIO_MTLX *)RIO_MTLX::registrystring(v10);
  v12 = (RIO_MTLX *)RIO_MTLX::registryIntVec(v11);
  v13 = (RIO_MTLX *)RIO_MTLX::registryBoolVec(v12);
  v14 = (RIO_MTLX *)RIO_MTLX::registryFloatVec(v13);
  v15 = (RIO_MTLX *)RIO_MTLX::registryStringVec(v14);
  v16 = (RIO_MTLX *)RIO_MTLX::registrylong(v15);
  return RIO_MTLX::registrydouble(v16);
}

_QWORD *std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::string>,std::allocator<RIO_MTLX::TypedValue<std::string>>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x38uLL);
  result = std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::string>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<RIO_MTLX::TypedValue<std::string>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2301150E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::string>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<RIO_MTLX::TypedValue<std::string>>,0>(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = &off_24FDF8080;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = off_24FDF80D0;
  v3 = (std::string *)(a1 + 4);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_230115158(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t RIO_MTLX::TypedValue<std::string>::~TypedValue(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FDF80D0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void RIO_MTLX::TypedValue<std::string>::~TypedValue(uint64_t a1)
{
  *(_QWORD *)a1 = off_24FDF80D0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x2348B4E1CLL);
}

double RIO_MTLX::TypedValue<std::string>::copy@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::string>,std::allocator<RIO_MTLX::TypedValue<std::string>>,std::string const&,void>((__int128 *)(a1 + 8), v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  a1[16] = MEMORY[0x24BEDB858] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3);
  return a1;
}

void sub_230115378(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](v1);
  _Unwind_Resume(a1);
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<int>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<int>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<int>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<int>::TYPE();
    v3 = (__int128 *)RIO_MTLX::TypedValue<int>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<int>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<int>::createFromString;
  }
  return a1;
}

char *RIO_MTLX::TypedValue<int>::createFromString@<X0>(const std::string *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  _QWORD *v4;
  char *result;
  int v6;

  v6 = 0;
  v3 = v6;
  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF8108;
  *((_DWORD *)v4 + 8) = v3;
  a2[1] = v4;
  v4[3] = &off_24FDF8158;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypedValue<int>::~TypedValue()
{
  JUMPOUT(0x2348B4E1CLL);
}

char *RIO_MTLX::TypedValue<int>::copy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  char *result;

  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF8108;
  *((_DWORD *)v4 + 8) = *(_DWORD *)(a1 + 8);
  a2[1] = v4;
  v4[3] = &off_24FDF8158;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

char *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  char *v15;
  unint64_t v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v41;

  v8 = a1 + 3;
  v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v10 = v9;
  v11 = a1[1];
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*a1 + 8 * v4);
    if (v14)
    {
      v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          v16 = *((_QWORD *)v15 + 1);
          if (v16 == v10)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), (unsigned __int8 *)v15 + 16, a2) & 1) != 0)return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  v17 = *a4;
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  v18 = (std::string *)(v15 + 16);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v19 = *v17;
    *((_QWORD *)v15 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  *((_QWORD *)v15 + 5) = 0;
  v20 = (float)(unint64_t)(a1[3] + 1);
  v21 = *((float *)a1 + 8);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v11 = a1[1];
    if (*(_QWORD *)&prime > v11)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v11)
    {
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v11)
      {
        v11 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)a1[2];
          if (v29)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v30) = a1 + 2;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v36))
                  {
                    *(_QWORD *)(*a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*a1 + 8 * v36);
                  **(_QWORD **)(*a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v11 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = (void *)*a1;
        *a1 = 0;
        if (v41)
          operator delete(v41);
        v11 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v37 = *a1;
  v38 = *(_QWORD **)(*a1 + 8 * v4);
  if (v38)
  {
    *(_QWORD *)v15 = *v38;
LABEL_75:
    *v38 = v15;
    goto LABEL_76;
  }
  *(_QWORD *)v15 = a1[2];
  a1[2] = (uint64_t)v15;
  *(_QWORD *)(v37 + 8 * v4) = a1 + 2;
  if (*(_QWORD *)v15)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11)
        v39 %= v11;
    }
    else
    {
      v39 &= v11 - 1;
    }
    v38 = (_QWORD *)(*a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  ++*v8;
  return v15;
}

void sub_230115984(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<BOOL>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<BOOL>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<BOOL>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<BOOL>::TYPE();
    v3 = (__int128 *)RIO_MTLX::TypedValue<BOOL>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<BOOL>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<BOOL>::createFromString;
  }
  return a1;
}

char *RIO_MTLX::TypedValue<BOOL>::createFromString@<X0>(RIO_MTLX *a1@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  _QWORD *v4;
  char *result;
  char v6;

  v6 = 0;
  v3 = v6;
  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF8190;
  *((_BYTE *)v4 + 32) = v3;
  a2[1] = v4;
  v4[3] = &off_24FDF81E0;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<BOOL>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypedValue<BOOL>::~TypedValue()
{
  JUMPOUT(0x2348B4E1CLL);
}

char *RIO_MTLX::TypedValue<BOOL>::copy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  char *result;

  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF8190;
  *((_BYTE *)v4 + 32) = *(_BYTE *)(a1 + 8);
  a2[1] = v4;
  v4[3] = &off_24FDF81E0;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<float>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<float>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<float>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<float>::TYPE();
    v3 = (__int128 *)RIO_MTLX::TypedValue<float>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<float>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<float>::createFromString;
  }
  return a1;
}

char *RIO_MTLX::TypedValue<float>::createFromString@<X0>(const std::string *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  _QWORD *v4;
  char *result;
  int v6;

  v6 = 0;
  v3 = v6;
  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF8218;
  *((_DWORD *)v4 + 8) = v3;
  a2[1] = v4;
  v4[3] = &off_24FDF8268;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypedValue<float>::~TypedValue()
{
  JUMPOUT(0x2348B4E1CLL);
}

char *RIO_MTLX::TypedValue<float>::copy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  char *result;

  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF8218;
  *((_DWORD *)v4 + 8) = *(_DWORD *)(a1 + 8);
  a2[1] = v4;
  v4[3] = &off_24FDF8268;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Color3>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE();
    v3 = (__int128 *)&RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Color3>::createFromString;
  }
  return a1;
}

char *RIO_MTLX::TypedValue<RIO_MTLX::Color3>::createFromString@<X0>(RIO_MTLX *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  char *result;
  uint64_t v11;
  int v12;
  _QWORD v13[3];
  void **v14;

  v12 = 0;
  v11 = 0;
  v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v13);
  v5 = 0;
  v6 = &v11;
  do
  {
    v5 += 24;
    v6 = (uint64_t *)((char *)v6 + 4);
  }
  while (v5 != 72);
  v14 = (void **)v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v14);
  v7 = v12;
  v8 = v11;
  v9 = operator new(0x30uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_24FDF82A0;
  v9[4] = v8;
  *((_DWORD *)v9 + 10) = v7;
  a2[1] = v9;
  v9[3] = &off_24FDF82F0;
  result = (char *)(v9 + 3);
  *a2 = result;
  return result;
}

void sub_230115E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Color3>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF82A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Color3>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF82A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Color3>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypedValue<RIO_MTLX::Color3>::~TypedValue()
{
  JUMPOUT(0x2348B4E1CLL);
}

char *RIO_MTLX::TypedValue<RIO_MTLX::Color3>::copy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  char *result;

  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF82A0;
  v4[4] = *(_QWORD *)(a1 + 8);
  *((_DWORD *)v4 + 10) = *(_DWORD *)(a1 + 16);
  a2[1] = v4;
  v4[3] = &off_24FDF82F0;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Color4>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE();
    v3 = (__int128 *)&RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Color4>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Color4>::createFromString;
  }
  return a1;
}

char *RIO_MTLX::TypedValue<RIO_MTLX::Color4>::createFromString@<X0>(RIO_MTLX *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 **v4;
  uint64_t v5;
  __int128 *v6;
  _QWORD *v7;
  char *result;
  __int128 v9;
  __int128 v10;
  _QWORD v11[3];
  void **v12;

  v10 = 0uLL;
  v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v11);
  v5 = 0;
  v6 = &v10;
  do
  {
    v5 += 24;
    v6 = (__int128 *)((char *)v6 + 4);
  }
  while (v5 != 96);
  v12 = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  v9 = v10;
  v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDF8328;
  *((_OWORD *)v7 + 2) = v9;
  a2[1] = v7;
  v7[3] = &off_24FDF8378;
  result = (char *)(v7 + 3);
  *a2 = result;
  return result;
}

void sub_230116068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Color4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Color4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Color4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypedValue<RIO_MTLX::Color4>::~TypedValue()
{
  JUMPOUT(0x2348B4E1CLL);
}

char *RIO_MTLX::TypedValue<RIO_MTLX::Color4>::copy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  char *result;

  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF8328;
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a1 + 8);
  a2[1] = v4;
  v4[3] = &off_24FDF8378;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Vector2>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE();
    v3 = (__int128 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::createFromString;
  }
  return a1;
}

_QWORD *RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::createFromString@<X0>(RIO_MTLX *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 **v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD v12[3];
  void **v13;

  v11 = 0;
  v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v12);
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = v6;
    v6 = 0;
    v5 = 1;
  }
  while ((v7 & 1) != 0);
  v13 = (void **)v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
  v8 = v11;
  v9 = operator new(0x28uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_24FDF83B0;
  v9[4] = v8;
  a2[1] = v9;
  v9[3] = &off_24FDF8400;
  result = v9 + 3;
  *a2 = result;
  return result;
}

void sub_230116288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF83B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF83B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::~TypedValue()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *RIO_MTLX::TypedValue<RIO_MTLX::Vector2>::copy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF83B0;
  v4[4] = *(_QWORD *)(a1 + 8);
  a2[1] = v4;
  v4[3] = &off_24FDF8400;
  result = v4 + 3;
  *a2 = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Vector3>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE();
    v3 = (__int128 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::createFromString;
  }
  return a1;
}

char *RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::createFromString@<X0>(RIO_MTLX *a1@<X0>, _QWORD *a2@<X8>)
{
  float v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _QWORD *v8;
  char *result;

  v3 = RIO_MTLX::fromValueString<RIO_MTLX::Vector3>(a1);
  v5 = v4;
  v7 = v6;
  v8 = operator new(0x30uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24FDF8438;
  *((float *)v8 + 8) = v3;
  *((_DWORD *)v8 + 9) = v5;
  *((_DWORD *)v8 + 10) = v7;
  a2[1] = v8;
  v8[3] = &off_24FDF8488;
  result = (char *)(v8 + 3);
  *a2 = result;
  return result;
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector3>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector3>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector3>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::~TypedValue()
{
  JUMPOUT(0x2348B4E1CLL);
}

char *RIO_MTLX::TypedValue<RIO_MTLX::Vector3>::copy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  char *result;

  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF8438;
  v4[4] = *(_QWORD *)(a1 + 8);
  *((_DWORD *)v4 + 10) = *(_DWORD *)(a1 + 16);
  a2[1] = v4;
  v4[3] = &off_24FDF8488;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Vector4>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE();
    v3 = (__int128 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::createFromString;
  }
  return a1;
}

char *RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::createFromString@<X0>(RIO_MTLX *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 **v4;
  uint64_t v5;
  __int128 *v6;
  _QWORD *v7;
  char *result;
  __int128 v9;
  __int128 v10;
  _QWORD v11[3];
  void **v12;

  v10 = 0uLL;
  v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v11);
  v5 = 0;
  v6 = &v10;
  do
  {
    v5 += 24;
    v6 = (__int128 *)((char *)v6 + 4);
  }
  while (v5 != 96);
  v12 = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  v9 = v10;
  v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24FDF84C0;
  *((_OWORD *)v7 + 2) = v9;
  a2[1] = v7;
  v7[3] = &off_24FDF8510;
  result = (char *)(v7 + 3);
  *a2 = result;
  return result;
}

void sub_230116658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF84C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF84C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Vector4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::~TypedValue()
{
  JUMPOUT(0x2348B4E1CLL);
}

char *RIO_MTLX::TypedValue<RIO_MTLX::Vector4>::copy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  char *result;

  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF84C0;
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a1 + 8);
  a2[1] = v4;
  v4[3] = &off_24FDF8510;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Matrix33>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE();
    v3 = (__int128 *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::createFromString;
  }
  return a1;
}

char *RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::createFromString@<X0>(RIO_MTLX *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  char *result;
  __int128 v13;
  __int128 v14;
  int v15;
  _QWORD v16[3];
  void **v17;

  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v16);
  v5 = 0;
  v6 = 0;
  v7 = &v13;
  do
  {
    v8 = 0;
    v9 = v5;
    do
    {
      v8 += 4;
      v9 += 24;
    }
    while (v8 != 12);
    ++v6;
    v7 = (__int128 *)((char *)v7 + 12);
    v5 += 72;
  }
  while (v6 != 3);
  v17 = (void **)v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  v10 = operator new(0x48uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_24FDF8548;
  v11 = v14;
  *((_OWORD *)v10 + 2) = v13;
  *((_OWORD *)v10 + 3) = v11;
  *((_DWORD *)v10 + 16) = v15;
  a2[1] = v10;
  v10[3] = &off_24FDF8598;
  result = (char *)(v10 + 3);
  *a2 = result;
  return result;
}

void sub_2301168A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  *(_QWORD *)(v15 - 56) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 56));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::~TypedValue()
{
  JUMPOUT(0x2348B4E1CLL);
}

char *RIO_MTLX::TypedValue<RIO_MTLX::Matrix33>::copy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  __int128 v5;
  char *result;

  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF8548;
  v5 = *(_OWORD *)(a1 + 24);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a1 + 8);
  *((_OWORD *)v4 + 3) = v5;
  *((_DWORD *)v4 + 16) = *(_DWORD *)(a1 + 40);
  a2[1] = v4;
  v4[3] = &off_24FDF8598;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<RIO_MTLX::Matrix44>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE();
    v3 = (__int128 *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)&RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::createFromString;
  }
  return a1;
}

char *RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::createFromString@<X0>(RIO_MTLX *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  char *result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[3];
  void **v19;

  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)v18);
  v5 = 0;
  v6 = 0;
  v7 = &v14;
  do
  {
    v8 = 0;
    v9 = v5;
    do
    {
      v8 += 4;
      v9 += 24;
    }
    while (v8 != 16);
    ++v6;
    ++v7;
    v5 += 96;
  }
  while (v6 != 4);
  v19 = (void **)v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_24FDF85D0;
  v11 = v15;
  *((_OWORD *)v10 + 2) = v14;
  *((_OWORD *)v10 + 3) = v11;
  v12 = v17;
  *((_OWORD *)v10 + 4) = v16;
  *((_OWORD *)v10 + 5) = v12;
  a2[1] = v10;
  v10[3] = &off_24FDF8620;
  result = (char *)(v10 + 3);
  *a2 = result;
  return result;
}

void sub_230116AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 56) = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF85D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF85D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::~TypedValue()
{
  JUMPOUT(0x2348B4E1CLL);
}

char *RIO_MTLX::TypedValue<RIO_MTLX::Matrix44>::copy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  char *result;

  v4 = operator new(0x60uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF85D0;
  v5 = *(_OWORD *)(a1 + 24);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a1 + 8);
  *((_OWORD *)v4 + 3) = v5;
  v6 = *(_OWORD *)(a1 + 56);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a1 + 40);
  *((_OWORD *)v4 + 5) = v6;
  a2[1] = v4;
  v4[3] = &off_24FDF8620;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<std::string>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<std::string>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<std::string>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<std::string>::TYPE();
    v3 = (__int128 *)RIO_MTLX::TypedValue<std::string>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<std::string>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<std::string>::createFromString;
  }
  return a1;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<std::vector<int>>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<std::vector<int>>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<std::vector<int>>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<std::vector<int>>::TYPE();
    v3 = (__int128 *)RIO_MTLX::TypedValue<std::vector<int>>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<std::vector<int>>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<std::vector<int>>::createFromString;
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<int>>::createFromString(RIO_MTLX *a1@<X0>, _OWORD *a2@<X8>)
{
  unsigned __int8 **v4;
  const std::string *i;
  const std::string *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  char *__p;
  char *v18;
  char *v19;
  __int128 v20;
  void **v21;

  __p = 0;
  v18 = 0;
  v19 = 0;
  v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)&v20);
  v6 = (const std::string *)*((_QWORD *)&v20 + 1);
  for (i = (const std::string *)v20; i != v6; ++i)
  {
    LODWORD(v21) = 0;
    v7 = v18;
    if (v18 >= v19)
    {
      v9 = __p;
      v10 = (v18 - __p) >> 2;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62)
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      v12 = v19 - __p;
      if ((v19 - __p) >> 1 > v11)
        v11 = v12 >> 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v19, v13);
        v9 = __p;
        v7 = v18;
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[4 * v10];
      *(_DWORD *)v15 = (_DWORD)v21;
      v8 = v15 + 4;
      while (v7 != v9)
      {
        v16 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v16;
        v15 -= 4;
      }
      __p = v15;
      v19 = &v14[4 * v13];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_DWORD *)v18 = (_DWORD)v21;
      v8 = v18 + 4;
    }
    v18 = v8;
  }
  v21 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<int>>,std::allocator<RIO_MTLX::TypedValue<std::vector<int>>>,std::vector<int> const&,void>(&v20, __p, (uint64_t)v18);
  *a2 = v20;
  if (__p)
    operator delete(__p);
}

void sub_230116E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<int>>,std::allocator<RIO_MTLX::TypedValue<std::vector<int>>>,std::vector<int> const&,void>(_QWORD *a1, const void *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x38uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24FDF8658;
  v6[3] = &off_24FDF86A8;
  v6[5] = 0;
  v6[6] = 0;
  v6[4] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6 + 4, a2, a3, (a3 - (uint64_t)a2) >> 2);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_230116F14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<int>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *RIO_MTLX::TypedValue<std::vector<int>>::~TypedValue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FDF86A8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<int>>::~TypedValue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FDF86A8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2348B4E1CLL);
}

double RIO_MTLX::TypedValue<std::vector<int>>::copy@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<int>>,std::allocator<RIO_MTLX::TypedValue<std::vector<int>>>,std::vector<int> const&,void>(&v4, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<std::vector<BOOL>>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE();
    v3 = (__int128 *)RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<std::vector<BOOL>>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<std::vector<BOOL>>::createFromString;
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<BOOL>>::createFromString(RIO_MTLX *a1@<X0>, _OWORD *a2@<X8>)
{
  unsigned __int8 **v4;
  RIO_MTLX *i;
  RIO_MTLX *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  void **v17;

  __p = 0;
  v14 = 0;
  v15 = 0;
  v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)&v16);
  v6 = (RIO_MTLX *)*((_QWORD *)&v16 + 1);
  for (i = (RIO_MTLX *)v16; i != v6; i = (RIO_MTLX *)((char *)i + 24))
  {
    LOBYTE(v17) = 0;
    v7 = v14;
    if (v14 == v15 << 6)
    {
      if ((uint64_t)(v14 + 1) < 0)
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      v8 = v15 << 7;
      if (v15 << 7 <= (v14 & 0xFFFFFFFFFFFFFFC0) + 64)
        v8 = (v14 & 0xFFFFFFFFFFFFFFC0) + 64;
      if (v14 <= 0x3FFFFFFFFFFFFFFELL)
        v9 = v8;
      else
        v9 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve((char **)&__p, v9);
      v7 = v14;
    }
    v14 = v7 + 1;
    v10 = v7 >> 6;
    v11 = 1 << v7;
    if ((_BYTE)v17)
      v12 = *((_QWORD *)__p + v10) | v11;
    else
      v12 = *((_QWORD *)__p + v10) & ~v11;
    *((_QWORD *)__p + v10) = v12;
  }
  v17 = (void **)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<BOOL>>,std::allocator<RIO_MTLX::TypedValue<std::vector<BOOL>>>,std::vector<BOOL> const&,void>(&v16, (uint64_t)&__p);
  *a2 = v16;
  if (__p)
    operator delete(__p);
}

void sub_2301171FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<BOOL>>,std::allocator<RIO_MTLX::TypedValue<std::vector<BOOL>>>,std::vector<BOOL> const&,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  result = operator new(0x38uLL);
  v5 = result;
  result[1] = 0;
  result[2] = 0;
  *result = &off_24FDF86E0;
  result[3] = &off_24FDF8730;
  v6 = result + 3;
  result[4] = 0;
  v7 = result + 4;
  result[5] = 0;
  result[6] = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_23;
  result = std::vector<BOOL>::__vallocate[abi:ne180100](result + 4, v8);
  v9 = *(_QWORD **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = v5[5];
  v12 = v11 + v10;
  v5[5] = v11 + v10;
  if (v11)
  {
    v13 = v12 - 1;
    if (((v12 - 1) ^ (v11 - 1)) < 0x40)
      goto LABEL_10;
  }
  else
  {
    v13 = v12 - 1;
  }
  v14 = v13 >> 6;
  if (v12 >= 0x41)
    v15 = v14;
  else
    v15 = 0;
  *(_QWORD *)(*v7 + 8 * v15) = 0;
LABEL_10:
  v16 = v10 & 0x3F;
  if (v10 > 0x3F || (v10 & 0x3F) != 0)
  {
    v17 = 0;
    v18 = 0;
    v19 = &v9[v10 >> 6];
    v20 = v11 & 0x3F;
    v21 = (uint64_t *)(*v7 + 8 * (v11 >> 6));
    do
    {
      v22 = 1 << v20;
      if (((*v9 >> v18) & 1) != 0)
        v23 = *v21 | v22;
      else
        v23 = *v21 & ~v22;
      *v21 = v23;
      ++v18;
      v9 += v17 == 63;
      if (v17 == 63)
        v18 = 0;
      v21 += v20 == 63;
      if (v20 == 63)
        v20 = 0;
      else
        ++v20;
      v17 = v18;
    }
    while (v9 != v19 || v16 != v18);
  }
LABEL_23:
  *a1 = v6;
  a1[1] = v5;
  return result;
}

void sub_230117384(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<BOOL>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF86E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<BOOL>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF86E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<BOOL>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *RIO_MTLX::TypedValue<std::vector<BOOL>>::~TypedValue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FDF8730;
  v2 = (void *)a1[1];
  if (v2)
    operator delete(v2);
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<BOOL>>::~TypedValue(_QWORD *a1)
{
  void *v1;

  *a1 = &off_24FDF8730;
  v1 = (void *)a1[1];
  if (v1)
    operator delete(v1);
  JUMPOUT(0x2348B4E1CLL);
}

double RIO_MTLX::TypedValue<std::vector<BOOL>>::copy@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<BOOL>>,std::allocator<RIO_MTLX::TypedValue<std::vector<BOOL>>>,std::vector<BOOL> const&,void>(&v4, a1 + 8);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<std::vector<float>>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<std::vector<float>>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<std::vector<float>>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<std::vector<float>>::TYPE();
    v3 = (__int128 *)RIO_MTLX::TypedValue<std::vector<float>>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<std::vector<float>>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<std::vector<float>>::createFromString;
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<float>>::createFromString(RIO_MTLX *a1@<X0>, _OWORD *a2@<X8>)
{
  unsigned __int8 **v4;
  const std::string *i;
  const std::string *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  char *__p;
  char *v18;
  char *v19;
  __int128 v20;
  void **v21;

  __p = 0;
  v18 = 0;
  v19 = 0;
  v4 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS(a1);
  RIO_MTLX::splitString((std::string *)a1, v4, (uint64_t)&v20);
  v6 = (const std::string *)*((_QWORD *)&v20 + 1);
  for (i = (const std::string *)v20; i != v6; ++i)
  {
    LODWORD(v21) = 0;
    v7 = v18;
    if (v18 >= v19)
    {
      v9 = __p;
      v10 = (v18 - __p) >> 2;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62)
        std::vector<char const*>::__throw_length_error[abi:ne180100]();
      v12 = v19 - __p;
      if ((v19 - __p) >> 1 > v11)
        v11 = v12 >> 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v19, v13);
        v9 = __p;
        v7 = v18;
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[4 * v10];
      *(_DWORD *)v15 = (_DWORD)v21;
      v8 = v15 + 4;
      while (v7 != v9)
      {
        v16 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v16;
        v15 -= 4;
      }
      __p = v15;
      v19 = &v14[4 * v13];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_DWORD *)v18 = (_DWORD)v21;
      v8 = v18 + 4;
    }
    v18 = v8;
  }
  v21 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<float>>,std::allocator<RIO_MTLX::TypedValue<std::vector<float>>>,std::vector<float> const&,void>(&v20, __p, (uint64_t)v18);
  *a2 = v20;
  if (__p)
    operator delete(__p);
}

void sub_2301176A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<float>>,std::allocator<RIO_MTLX::TypedValue<std::vector<float>>>,std::vector<float> const&,void>(_QWORD *a1, const void *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x38uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24FDF8768;
  v6[3] = &off_24FDF87B8;
  v6[5] = 0;
  v6[6] = 0;
  v6[4] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6 + 4, a2, a3, (a3 - (uint64_t)a2) >> 2);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_230117758(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<float>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *RIO_MTLX::TypedValue<std::vector<float>>::~TypedValue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FDF87B8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<float>>::~TypedValue(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24FDF87B8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x2348B4E1CLL);
}

double RIO_MTLX::TypedValue<std::vector<float>>::copy@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<float>>,std::allocator<RIO_MTLX::TypedValue<std::vector<float>>>,std::vector<float> const&,void>(&v4, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<std::vector<std::string>>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE();
    v3 = (__int128 *)RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<std::vector<std::string>>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<std::vector<std::string>>::createFromString;
  }
  return a1;
}

void RIO_MTLX::TypedValue<std::vector<std::string>>::createFromString(RIO_MTLX *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 *v3[3];
  _OWORD v4[2];

  RIO_MTLX::fromValueString<std::vector<std::string>>(a1, (uint64_t *)v3);
  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<std::string>>,std::allocator<RIO_MTLX::TypedValue<std::vector<std::string>>>,std::vector<std::string> const&,void>(v4, v3[0], v3[1]);
  *a2 = v4[0];
  *(_QWORD *)&v4[0] = v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
}

void sub_230117954(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<std::string>>,std::allocator<RIO_MTLX::TypedValue<std::vector<std::string>>>,std::vector<std::string> const&,void>(_QWORD *a1, __int128 *a2, __int128 *a3)
{
  char *v6;
  std::string *result;

  v6 = (char *)operator new(0x38uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24FDF87F0;
  *((_QWORD *)v6 + 3) = off_24FDF8840;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 4) = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v6 + 32), a2, a3, 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3));
  *a1 = v6 + 24;
  a1[1] = v6;
  return result;
}

void sub_2301179F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF87F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF87F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<std::vector<std::string>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t RIO_MTLX::TypedValue<std::vector<std::string>>::~TypedValue(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24FDF8840;
  v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_24FDF8840;
  v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x2348B4E1C](a1, 0xA1C4030951706);
}

double RIO_MTLX::TypedValue<std::vector<std::string>>::copy@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<RIO_MTLX::TypedValue<std::vector<std::string>>,std::allocator<RIO_MTLX::TypedValue<std::vector<std::string>>>,std::vector<std::string> const&,void>(&v4, *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16));
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<long>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<long>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<long>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<long>::TYPE();
    v3 = (__int128 *)RIO_MTLX::TypedValue<long>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<long>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<long>::createFromString;
  }
  return a1;
}

_QWORD *RIO_MTLX::TypedValue<long>::createFromString@<X0>(const std::string *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[13];
  char v9;
  uint64_t v10;

  v7 = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v8, a1, 24);
  MEMORY[0x2348B4BB8](v8, &v7);
  v8[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v8[2] = v3;
  v8[3] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](&v10);
  v4 = v7;
  v5 = operator new(0x28uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_24FDF8878;
  v5[4] = v4;
  a2[1] = v5;
  v5[3] = &off_24FDF88C8;
  result = v5 + 3;
  *a2 = result;
  return result;
}

void sub_230117C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  *(_QWORD *)(v29 + *(_QWORD *)(*MEMORY[0x24BEDB7F0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](&a29);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypedValue<long>::~TypedValue()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *RIO_MTLX::TypedValue<long>::copy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF8878;
  v4[4] = *(_QWORD *)(a1 + 8);
  a2[1] = v4;
  v4[3] = &off_24FDF88C8;
  result = v4 + 3;
  *a2 = result;
  return result;
}

RIO_MTLX::Value *RIO_MTLX::ValueRegistry<double>::ValueRegistry(RIO_MTLX::Value *a1)
{
  __int128 *v3;

  RIO_MTLX::Value::_creatorMap(a1);
  RIO_MTLX::TypedValue<double>::TYPE();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<double>::TYPE(void)::v))
  {
    RIO_MTLX::Value::_creatorMap(0);
    RIO_MTLX::TypedValue<double>::TYPE();
    v3 = (__int128 *)RIO_MTLX::TypedValue<double>::TYPE(void)::v;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<RIO_MTLX::Value> (*)(std::string const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&RIO_MTLX::Value::_creatorMap(void)::v, (unsigned __int8 *)RIO_MTLX::TypedValue<double>::TYPE(void)::v, (uint64_t)&std::piecewise_construct, &v3)+ 5) = RIO_MTLX::TypedValue<double>::createFromString;
  }
  return a1;
}

_QWORD *RIO_MTLX::TypedValue<double>::createFromString@<X0>(const std::string *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[13];
  char v9;
  uint64_t v10;

  v7 = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v8, a1, 24);
  MEMORY[0x2348B4B94](v8, &v7);
  v8[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v8[2] = v3;
  v8[3] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](&v10);
  v4 = v7;
  v5 = operator new(0x28uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_24FDF8900;
  v5[4] = v4;
  a2[1] = v5;
  v5[3] = &off_24FDF8950;
  result = v5 + 3;
  *a2 = result;
  return result;
}

void sub_230117F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  *(_QWORD *)(v29 + *(_QWORD *)(*MEMORY[0x24BEDB7F0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2348B4DA4](&a29);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RIO_MTLX::TypedValue<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<RIO_MTLX::TypedValue<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void RIO_MTLX::TypedValue<double>::~TypedValue()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *RIO_MTLX::TypedValue<double>::copy@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24FDF8900;
  v4[4] = *(_QWORD *)(a1 + 8);
  a2[1] = v4;
  v4[3] = &off_24FDF8950;
  result = v4 + 3;
  *a2 = result;
  return result;
}

uint64_t RIOPxrSdfAttributeSpecGetTypeID()
{
  if (RIOPxrSdfAttributeSpecGetTypeID::onceToken != -1)
    dispatch_once(&RIOPxrSdfAttributeSpecGetTypeID::onceToken, &__block_literal_global_29);
  return RIOPxrSdfAttributeSpecGetTypeID::typeID;
}

uint64_t RIOPxrSdfAttributeSpecHasColorSpace(uint64_t result)
{
  if (result)
    return pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::HasColorSpace((pxrInternal__aapl__pxrReserved__::SdfAttributeSpec *)(result + 16));
  return result;
}

uint64_t RIOPxrSdfAttributeSpecCopyLayer(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;

  v1 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v1);
  v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(&v8);
  v3 = v9;
  if (v9)
  {
    v4 = (unsigned int *)(v9 + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return v2;
}

void sub_23011814C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfSpec *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>::operator->(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v1;
  const char *v2;
  const char *p_p;
  void *__p;
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  v1 = a1;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>::o"
            "perator->() const [T = pxrInternal__aapl__pxrReserved__::SdfAttributeSpec]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__16SdfAttributeSpecE" & 0x7FFFFFFFFFFFFFFFLL), v2);
    if (v6 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, "Dereferenced an invalid %s", p_p);
    if (v6 < 0)
      operator delete(__p);
    return 0;
  }
  return v1;
}

void sub_230118238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfAttributeSpecIsBlocked(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[16];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0;
  pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDefaultValue((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)(a1 + 16));
  v1 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  return v1;
}

void sub_2301182D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void _RIOPxrSdfAttributeSpecCFFinalize(const void *a1)
{
  JUMPOUT(0x2348B2704);
}

uint64_t _RIOPxrSdfAttributeSpecCFEqual(const void *a1, const void *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfSpec::operator==();
}

unint64_t _RIOPxrSdfAttributeSpecCFHash(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * a1[2]);
}

CFStringRef _RIOPxrSdfAttributeSpecCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfAttributeSpec %p>"), a1);
}

CFStringRef _RIOPxrSdfAttributeSpecCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<RIOPxrSdfAttributeSpec %p>"), a1);
}

realityio::ShadowComponentBuilder *realityio::ShadowComponentBuilder::ShadowComponentBuilder(realityio::ShadowComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  realityio::AnyValueDirtyPropertyDescriptor *v45;
  const pxrInternal__aapl__pxrReserved__::TfToken *v46;
  realityio::AnyValueDirtyPropertyDescriptor *v47;
  unint64_t v48;
  realityio::AnyValueDirtyPropertyDescriptor *v49;
  unint64_t v50;
  uint64_t i;
  void ***v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  realityio::ShadowComponentBuilder *v57;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  void *__p[2];
  char v62;
  void *v63[2];
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD *v68[3];
  _QWORD *v69[3];
  _BYTE v70[8];
  _QWORD *v71;
  __int128 v72;
  _QWORD *v73[3];
  _QWORD *v74[3];
  __int128 v75;
  _QWORD *v76[3];
  uint64_t v77;
  uint64_t v78;
  void **v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  _OWORD v84[3];
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v63, "ShadowComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kShadowComponentBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54C70);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54C70))
  {
    v57 = this;
    v58 = a2;
    v15 = operator new();
    v16 = operator new();
    memset(v74, 0, sizeof(v74));
    v17 = (_BYTE *)operator new();
    Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!Data)
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    v19 = *((_QWORD *)Data + 1);
    v85 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 2, v20));
      if ((v21 & 1) == 0)
        v85 &= 0xFFFFFFFFFFFFFFF8;
    }
    v22 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v22)
      v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    v23 = *((_QWORD *)v22 + 4);
    v86 = v23;
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 2, v24));
      if ((v25 & 1) == 0)
        v86 &= 0xFFFFFFFFFFFFFFF8;
    }
    v26 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v26)
      v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    v87 = *(_QWORD *)v26;
    if ((v87 & 7) != 0)
    {
      v27 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 2, v27));
      if ((v28 & 1) == 0)
        v87 &= 0xFFFFFFFFFFFFFFF8;
    }
    v29 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v29)
      v29 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    v30 = *((_QWORD *)v29 + 5);
    v88 = v30;
    if ((v30 & 7) != 0)
    {
      v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 2, v31));
      if ((v32 & 1) == 0)
        v88 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v33)
      v33 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    v34 = *((_QWORD *)v33 + 4);
    v89 = v34;
    if ((v34 & 7) != 0)
    {
      v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 2, v35));
      if ((v36 & 1) == 0)
        v89 &= 0xFFFFFFFFFFFFFFF8;
    }
    v37 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v37)
      v37 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    v38 = *((_QWORD *)v37 + 2);
    v90 = v38;
    if ((v38 & 7) != 0)
    {
      v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 2, v39));
      if ((v40 & 1) == 0)
        v90 &= 0xFFFFFFFFFFFFFFF8;
    }
    v41 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v41)
      v41 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    v42 = *((_QWORD *)v41 + 3);
    v91 = v42;
    if ((v42 & 7) != 0)
    {
      v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 2, v43));
      if ((v44 & 1) == 0)
        v91 &= 0xFFFFFFFFFFFFFFF8;
    }
    std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100]((uint64_t)v70, (uint64_t *)&v85, 7);
    memset(v69, 0, sizeof(v69));
    v45 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v46 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::ShadowBuilderTokens);
    if (!v46)
      v46 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShadowBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShadowBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v45, v46);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v67, (uint64_t)v45);
    v84[0] = v67;
    v67 = 0uLL;
    v47 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v48 = atomic_load(&realityio::tokens::ShadowBuilderTokens);
    if (!v48)
      v48 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShadowBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShadowBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v47, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v48 + 8));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v66, (uint64_t)v47);
    v84[1] = v66;
    v66 = 0uLL;
    v49 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v50 = atomic_load(&realityio::tokens::ShadowBuilderTokens);
    if (!v50)
      v50 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShadowBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShadowBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v49, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v50 + 16));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v65, (uint64_t)v49);
    v84[2] = v65;
    v65 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v68, v84, 3uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v17, (uint64_t)v70, v69, v68);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v72, (uint64_t)v17);
    v92 = v72;
    v72 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v73, &v92, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v74, v73);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v75, v16);
    v93 = v75;
    v75 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v76, &v93, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v76);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v77, v15);
    _MergedGlobals_44 = v77;
    *(_QWORD *)algn_255E54C68 = v78;
    v77 = 0;
    v78 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v77);
    v79 = (void **)v76;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v79);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v93);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v75);
    v79 = (void **)v73;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v79);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v92);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v72);
    v79 = (void **)v68;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v79);
    for (i = 2; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v84[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v65);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v66);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v67);
    *(_QWORD *)&v84[0] = v69;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v84);
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)v70, v71);
    v52 = (void ***)&v92;
    do
    {
      v54 = (uint64_t)*--v52;
      v53 = v54;
      if ((v54 & 7) != 0)
      {
        v55 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
    }
    while (v52 != (void ***)&v85);
    v85 = (unint64_t)v74;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    __cxa_guard_release(&qword_255E54C70);
    this = v57;
    a2 = v58;
  }
  v59 = _MergedGlobals_44;
  v60 = *(std::__shared_weak_count **)algn_255E54C68;
  if (*(_QWORD *)algn_255E54C68)
  {
    v5 = (unint64_t *)(*(_QWORD *)algn_255E54C68 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v83 = v82;
  v80[0] = &off_24FDF8B00;
  v81 = v80;
  v82[0] = &off_24FDF8A80;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v63, (uint64_t)__p, &v59, (uint64_t)v82, (uint64_t)v80);
  v7 = v81;
  if (v81 == v80)
  {
    v8 = 4;
    v7 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_10:
  v9 = v83;
  if (v83 == v82)
  {
    v10 = 4;
    v9 = v82;
    goto LABEL_14;
  }
  if (v83)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v11 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v62 < 0)
    operator delete(__p[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  *(_QWORD *)this = &off_24FDF8A08;
  return this;
}

void sub_230118AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  MEMORY[0x2348B4E1C](v48, 0x10A1C40F82F910ELL);
  *(_QWORD *)(v49 - 184) = &a46;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v49 - 184));
  MEMORY[0x2348B4E1C](v47, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v46, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54C70);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t realityio::ShadowComponentBuilder::run(realityio::ShadowComponentBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *Data;
  BOOL v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t result;
  BOOL v14;
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  realityio::Inputs *v19;
  _BYTE v20[24];
  void *__p;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  v3 = (realityio::Inputs *)((char *)a2 + 32);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v4, v3);
  v14 = 0;
  Data = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::ShadowBuilderTokens);
  if (!Data)
    Data = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShadowBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShadowBuilderTokens_StaticTokenType>>::_TryToCreateData();
  realityio::getAttributeValue<BOOL>((pxrInternal__aapl__pxrReserved__::UsdObject *)v15, Data, (uint64_t)v20);
  if (v20[0])
  {
    v6 = v20[8] != 0;
  }
  else
  {
    if (v22 < 0)
      operator delete(__p);
    v6 = 1;
  }
  v14 = v6;
  v7 = *((_QWORD *)v19 + 6);
  v8 = operator new(0x28uLL);
  *v8 = &off_24FDF8B80;
  v8[1] = &v19;
  v8[2] = v15;
  v8[3] = &v14;
  v8[4] = this;
  __p = v8;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v20);
  v9 = __p;
  if (__p == v20)
  {
    v10 = 4;
    v9 = v20;
  }
  else
  {
    if (!__p)
      goto LABEL_13;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_13:
  if ((v18 & 7) != 0)
  {
    v11 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  result = v16;
  if (v16)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
  return result;
}

void sub_230119038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::ShadowComponentBuilder::clear(realityio::ShadowComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  realityio::Inputs *v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a2 + 6);
  v5 = a2;
  v6[0] = &off_24FDF8C80;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_23011914C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::ShadowComponentBuilder::~ShadowComponentBuilder(realityio::ShadowComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShadowBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShadowBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new();
  realityio::tokens::ShadowBuilderTokens_StaticTokenType::ShadowBuilderTokens_StaticTokenType(v0);
  while (!__ldaxr(&realityio::tokens::ShadowBuilderTokens))
  {
    if (!__stlxr((unint64_t)v0, &realityio::tokens::ShadowBuilderTokens))
      return (unint64_t)v0;
  }
  __clrex();
  realityio::tokens::ShadowBuilderTokens_StaticTokenType::~ShadowBuilderTokens_StaticTokenType((realityio::tokens::ShadowBuilderTokens_StaticTokenType *)v0);
  MEMORY[0x2348B4E1C]();
  return atomic_load(&realityio::tokens::ShadowBuilderTokens);
}

void sub_23011922C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40FC86440BLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF8A80;
  return result;
}

void std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF8A80;
}

void std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  realityio::EntityBuilder *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p;
  std::__shared_weak_count *v27;
  char v28;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v5 = (std::__shared_weak_count *)operator new(0x48uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2A20;
  std::string::basic_string[abi:ne180100]<0>(&__p, "none");
  realityio::CurrentPrimInputDescriptor::CurrentPrimInputDescriptor(&v5[1].__vftable, (uint64_t)&__p, (uint64_t *)Data + 11, 0);
  if (v28 < 0)
    operator delete(__p);
  __p = &v5[1];
  v27 = v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = (realityio::EntityBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &__p);
  v9 = v27;
  if (v27)
  {
    v10 = (unint64_t *)&v27->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = realityio::EntityBuilder::kInputName(v8);
  v13 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v13)
    v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v23 = 1;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v12, (uint64_t *)v13 + 8, &v23, &v24);
  v14 = v25;
  if (v25)
  {
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v24);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v14)
  {
    v20 = (unint64_t *)&v14->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_2301194FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v22;

  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF8B00;
  return result;
}

void std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF8B00;
}

char *std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ShadowComponentBuilder::ShadowComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24FDF8B80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF8B80;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  realityio *v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t Text;
  realityio *v12;
  char v13[8];
  realityio *v14;
  uint64_t v15;
  __int128 buf;
  uint64_t v17;
  __int128 *p_buf;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = **(_QWORD **)(a1 + 8);
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v3, v4, (uint64_t)v13);
  if (!v13[0])
  {
    v12 = 0;
    goto LABEL_9;
  }
  v5 = v14;
  v12 = v14;
  if (!v14)
  {
LABEL_9:
    v9 = *(id *)(realityio::logObjects(v5) + 24);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), &v15);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = Text;
      _os_log_impl(&dword_22FF26000, v9, OS_LOG_TYPE_DEFAULT, "Stopping operation to set shadow component because entity no longer exists for prim \"%s\"", (uint8_t *)&buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
    }

    goto LABEL_12;
  }
  RERetain();
  if (**(_BYTE **)(a1 + 24))
  {
    REShadowMapComponentGetComponentType();
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&buf = &off_24FDF8BF0;
    *((_QWORD *)&buf + 1) = v2;
    v17 = v6;
    p_buf = &buf;
    v15 = REEntityGetOrAddComponentByClass();
    if (!p_buf)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(__int128 *, uint64_t *))(*(_QWORD *)p_buf + 48))(p_buf, &v15);
    RENetworkMarkComponentDirty();
    v7 = p_buf;
    if (p_buf == &buf)
    {
      v8 = 4;
      v7 = &buf;
      goto LABEL_15;
    }
    if (p_buf)
    {
      v8 = 5;
LABEL_15:
      (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
    }
  }
  else
  {
    REShadowMapComponentGetComponentType();
    REEntityRemoveComponentByClass();
  }
LABEL_12:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v12);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_2301199E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a9);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio22ShadowComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio22ShadowComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDF8BF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio22ShadowComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF8BF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned int **_ZNSt3__110__function6__funcIZZN9realityio22ShadowComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  unint64_t Data;
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  float v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  float v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  void *__p;
  char v31;

  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  Data = atomic_load(&realityio::tokens::ShadowBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShadowBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShadowBuilderTokens_StaticTokenType>>::_TryToCreateData();
  v4 = *(_QWORD *)(Data + 8);
  v27 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  realityio::getAttributeValue<float>(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27, (uint64_t)&v28);
  if ((_BYTE)v28)
  {
    v7 = *(float *)&v29;
  }
  else
  {
    v7 = -1.0;
    if (v31 < 0)
      operator delete(__p);
  }
  if ((v27 & 7) != 0)
  {
    v8 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  v10 = atomic_load(&realityio::tokens::ShadowBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShadowBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShadowBuilderTokens_StaticTokenType>>::_TryToCreateData();
  v11 = *(_QWORD *)(v10 + 16);
  v27 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  realityio::getAttributeValue<float>(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27, (uint64_t)&v28);
  if ((_BYTE)v28)
  {
    v14 = *(float *)&v29;
  }
  else
  {
    v14 = -1.0;
    if (v31 < 0)
      operator delete(__p);
  }
  if ((v27 & 7) != 0)
  {
    v15 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16));
  v17 = v29;
  if (v29)
  {
    if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&v29)
                  + 14))
      v17 = v28;
    else
      v17 = 0;
  }
  v27 = (unint64_t)v17;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v27);
  v18 = (uint64_t)v29;
  if (v29)
  {
    v19 = v29 + 2;
    do
    {
      v20 = __ldxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>((uint64_t *)&v28, (uint64_t *)&v27);
  pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
  v22 = (uint64_t)v29;
  if (v29)
  {
    v23 = v29 + 2;
    do
    {
      v24 = __ldxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (v7 > -0.5)
    REShadowMapComponentSetDepthBias();
  if (v14 > -0.5)
    REShadowMapComponentSetDistance();
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)&v27);
}

void sub_230119DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio22ShadowComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio22ShadowComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio22ShadowComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio22ShadowComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void std::__function::__func<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF8C80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF8C80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::EntityBuilder *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[8];
  uint64_t v6;

  v1 = **((_QWORD **)a1 + 1);
  v2 = realityio::EntityBuilder::kInputName(a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v1, v2, (uint64_t)v5);
  if (v5[0])
  {
    v4 = v6;
    if (v6)
    {
      RERetain();
      REShadowMapComponentGetComponentType();
      REEntityRemoveComponentByClass();
    }
  }
  else
  {
    v4 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v4);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v5);
}

void sub_230119FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ShadowComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t SdfShouldNotCopyChildren()
{
  return pxrInternal__aapl__pxrReserved__::TfToken::operator==() ^ 1;
}

uint64_t RIOPxrUsdUtilsSdfCopySpec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (**v26)();
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  void ***v36;
  uint64_t v37;
  __int128 *v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  __int128 **v43;
  char v44;
  __int128 *v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t (*v48)();
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void **v52[3];
  void ***v53;
  uint64_t v54;

  v5 = 0;
  v54 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2 && a3 && a4)
  {
    v10 = (uint64_t *)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v48, (uint64_t *)(a1 + 16));
    v11 = (uint64_t *)(a3 + 16);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v50, v11);
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v43 = &v45;
    v44 = 0;
    v12 = (__int128 *)operator new(0x20uLL);
    v13 = 0;
    v45 = v12;
    v46 = v12;
    v47 = v12 + 2;
    v39 = v12;
    v52[0] = (void **)&v47;
    v52[1] = (void **)&v39;
    v52[2] = (void **)&v41;
    do
    {
      v14 = *((_OWORD *)&v48 + v13);
      *v12 = v14;
      if (*((_QWORD *)&v14 + 1))
      {
        v15 = (unsigned int *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      ++v13;
      ++v12;
    }
    while (v13 != 2);
    v17 = (uint64_t *)v52;
    v41 = v12;
    LOBYTE(v53) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v52);
    v46 = v12;
    do
    {
      v18 = (unsigned int *)*(v17 - 1);
      if (v18)
      {
        v19 = v18 + 2;
        do
        {
          v20 = __ldxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
      }
      v17 -= 2;
    }
    while (v17 != (uint64_t *)&v48);
    realityio::MultipleLayerMutex::MultipleLayerMutex<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> *>>((uint64_t *)&v43, v45, v46);
    realityio::MultipleLayerMutex::lock((realityio::MultipleLayerMutex *)&v43);
    v53 = 0;
    v22 = a2 + 16;
    v23 = a4 + 16;
    if (a5)
    {
      v48 = (uint64_t (*)())MEMORY[0x24BEE8418];
      v49 = v22;
      v50 = v23;
      std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator=<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,void>((uint64_t)v52, (uint64_t)&v48);
    }
    else
    {
      v48 = SdfShouldNotCopyChildren;
      v49 = v22;
      v50 = v23;
      std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator=<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,void>((uint64_t)v52, (uint64_t)&v48);
    }
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v41, v10);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v39, v11);
    v24 = (uint64_t *)operator new(0x20uLL);
    v25 = MEMORY[0x24BEE8348];
    *v24 = (uint64_t)&off_24FDF8D98;
    v24[1] = v25;
    v24[2] = v22;
    v24[3] = v23;
    v51 = v24;
    v5 = pxrInternal__aapl__pxrReserved__::SdfCopySpec();
    v26 = (uint64_t (**)())v51;
    if (v51 == (uint64_t *)&v48)
    {
      v27 = 4;
      v26 = &v48;
    }
    else
    {
      if (!v51)
      {
LABEL_25:
        v28 = v40;
        if (v40)
        {
          v29 = (unsigned int *)(v40 + 8);
          do
          {
            v30 = __ldxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
        v32 = v42;
        if (v42)
        {
          v33 = (unsigned int *)(v42 + 8);
          do
          {
            v34 = __ldxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        }
        realityio::MultipleLayerMutex::unlock((realityio::MultipleLayerMutex *)&v43);
        v36 = v53;
        if (v53 == v52)
        {
          v37 = 4;
          v36 = v52;
        }
        else
        {
          if (!v53)
          {
LABEL_40:
            v52[0] = (void **)&v43;
            std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](v52);
            v52[0] = (void **)&v45;
            std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](v52);
            return v5;
          }
          v37 = 5;
        }
        ((void (*)(void))(*v36)[v37])();
        goto LABEL_40;
      }
      v27 = 5;
    }
    (*((void (**)(void))*v26 + v27))();
    goto LABEL_25;
  }
  return v5;
}

void sub_23011A378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v19 = *(_QWORD **)(v17 - 80);
  if (v19 == (_QWORD *)(v17 - 104))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 104);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  *(_QWORD *)(v17 - 104) = &a14;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 104));
  *(_QWORD *)(v17 - 104) = &a17;
  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 104));
  _Unwind_Resume(a1);
}

void sub_23011A47C()
{
  JUMPOUT(0x23011A454);
}

void sub_23011A484()
{
  JUMPOUT(0x23011A464);
}

void sub_23011A48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  std::vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&a14);
  v24 = &a24;
  while (1)
  {
    v25 = (unsigned int *)*(v24 - 1);
    if (v25)
    {
      v26 = v25 + 2;
      do
      {
        v27 = __ldxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
        (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
    v24 -= 2;
    if (v24 == (uint64_t *)&a20)
      JUMPOUT(0x23011A474);
  }
}

void sub_23011A4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int *a21)
{
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  if (a21)
  {
    v21 = a21 + 2;
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(unsigned int *))(*(_QWORD *)a21 + 8))(a21);
  }
  JUMPOUT(0x23011A474);
}

void sub_23011A510()
{
  JUMPOUT(0x23011A474);
}

uint64_t std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator=<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,void>(uint64_t a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x20uLL);
  v5 = v4;
  *(_QWORD *)v4 = &off_24FDF8D00;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 3) = *(_QWORD *)(a2 + 16);
  v10 = v4;
  if (v9 == (_BYTE *)a1)
  {
    v7 = 5;
    goto LABEL_9;
  }
  v6 = *(_BYTE **)(a1 + 24);
  if (v6 == (_BYTE *)a1)
  {
    v5 = v9;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, v9);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v9;
    goto LABEL_8;
  }
  v10 = *(_BYTE **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = v9;
  if (v6 == v9)
  {
LABEL_8:
    v7 = 4;
    goto LABEL_9;
  }
  if (v6)
  {
    v7 = 5;
    v5 = v6;
LABEL_9:
    (*(void (**)(_QWORD *))(*v5 + 8 * v7))(v5);
  }
  return a1;
}

void sub_23011A630(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDF8D00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF8D00;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, char *a8, _QWORD *a9, _QWORD *a10)
{
  char v11;

  v11 = *a8;
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3, a4, *a5, a6, a7, v11, *a9, *a10);
}

uint64_t std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target_type()
{
}

void std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDF8D98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF8D98;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, char *a9, _QWORD *a10)
{
  char v11;

  v11 = *a9;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *a2, a3, a4, a5, *a6, a7, a8, v11, *a10);
}

uint64_t std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>,std::allocator<std::__bind<BOOL (&)(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *),std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::reference_wrapper<pxrInternal__aapl__pxrReserved__::SdfPath const>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&,std::placeholders::__ph<7> const&,std::placeholders::__ph<8> const&,std::placeholders::__ph<9> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfSpecType,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,BOOL,boost::optional<pxrInternal__aapl__pxrReserved__::VtValue> *)>::target_type()
{
}

uint64_t realityio::MeshAssetBuilder::kOutputName(realityio::MeshAssetBuilder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v3, "mesh_asset");
    realityio::MeshAssetBuilder::kOutputName(void)::kOutputName = (uint64_t)v3;
  }
  return realityio::MeshAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_23011A90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::MeshAssetBuilder *realityio::MeshAssetBuilder::MeshAssetBuilder(realityio::MeshAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v16, "MeshAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kMeshAssetBuilderIdentifier);
  realityio::generateMeshAssetBuilderDirtyStageSubscription(&v12);
  v20[0] = &off_24FDF8EA8;
  v21 = v20;
  v18[0] = &off_24FDF8FB8;
  v19 = v18;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v16, (uint64_t)__p, &v12, (uint64_t)v20, (uint64_t)v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_10;
  }
  if (v21)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  *(_QWORD *)this = &off_24FDF8E30;
  return this;
}

void sub_23011AAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v30 = a27;
  if (a27 == v27)
  {
    v31 = 4;
    v30 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 48);
  if (v32 == (_QWORD *)(v28 - 72))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 72);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t isTexCoord3(const pxrInternal__aapl__pxrReserved__::UsdAttribute *a1)
{
  unint64_t *v1;
  _QWORD v6[2];

  v6[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  v6[1] = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v6);
  v1 = (unint64_t *)MEMORY[0x24BEE82A0];
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v1))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    return 1;
  if (!atomic_load(v1))
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
  return pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
}

uint64_t realityio::MeshAssetBuilder::run(realityio::MeshAssetBuilder *this, std::__shared_weak_count **a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::UsdStage *v3;
  realityio::MeshModelDescriptorBuilder *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::TfToken *v10;
  uint64_t v11;
  std::string::size_type v12;
  std::mutex *v13;
  unint64_t *v14;
  unint64_t v15;
  const void **EmptyString;
  unsigned int *v17;
  unsigned int *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  std::string::size_type v26;
  unsigned int *value;
  unint64_t *v28;
  unint64_t v29;
  std::string::size_type v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  unsigned int *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  __int128 v44;
  std::string::size_type v45;
  _QWORD *v46;
  std::string::size_type v47;
  int64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::string *v55;
  __int128 v56;
  uint64_t String;
  int v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  uint64_t v65;
  __int8 v66;
  unsigned int *v67;
  unsigned int v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  unint64_t p_end_cap;
  std::__shared_weak_count *v76;
  uint64_t v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  unint64_t v80;
  pxrInternal__aapl__pxrReserved__::UsdStage *v81;
  std::string::size_type v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  char *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  char *v108;
  __int128 v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  realityio::MaterialAssetBuilder *v119;
  uint64_t v120;
  uint64_t EntityGeneratingDataForPrim;
  uint64_t ServiceLocator;
  uint64_t v123;
  int shared_weak_owners_low;
  uint64_t v125;
  pxrInternal__aapl__pxrReserved__::UsdStage *v126;
  realityio::SkeletonPoseDefinitionBuilder *v127;
  _QWORD *v128;
  std::__shared_weak_count *v129;
  _QWORD *v130;
  unint64_t *v131;
  unint64_t v132;
  pxrInternal__aapl__pxrReserved__::UsdStage *v133;
  uint64_t **v134;
  int v135;
  int v136;
  pxrInternal__aapl__pxrReserved__::UsdStage *v137;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v138;
  pxrInternal__aapl__pxrReserved__::UsdStage *v139;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *PrimAtPath;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *Data;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v142;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  _QWORD *v147;
  unsigned int *v148;
  unsigned int v149;
  const pxrInternal__aapl__pxrReserved__::UsdShadeShader *v150;
  unsigned int *v151;
  unsigned int v152;
  uint64_t *v153;
  uint64_t *v154;
  unsigned int *v155;
  unsigned int v156;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v157;
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *v158;
  uint64_t v159;
  unsigned int *v160;
  unsigned int v161;
  char *v162;
  unsigned int *v163;
  unsigned int v164;
  const pxrInternal__aapl__pxrReserved__::UsdShadeShader *v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int *v170;
  unsigned int v171;
  unint64_t *v172;
  unint64_t v173;
  unsigned int *v174;
  unsigned int v175;
  unint64_t v176;
  realityio::tokens::MeshBuilderTokens_StaticTokenType *v177;
  realityio::tokens::MeshBuilderTokens_StaticTokenType *v178;
  std::vector<unsigned int>::pointer v179;
  std::string::size_type v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int *v183;
  unsigned int v184;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v185;
  int v186;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  uint64_t v193;
  float v202;
  float v203;
  __int128 v204;
  float v205;
  __int128 v210;
  unsigned int *v216;
  unsigned int v217;
  int v218;
  unsigned int *v219;
  unsigned int v220;
  std::string *v221;
  std::string *v222;
  std::string::size_type v223;
  std::string *v224;
  __int128 v225;
  unsigned int *v226;
  unsigned int v227;
  __int128 *v228;
  unsigned int *v229;
  unsigned int v230;
  unsigned int *end;
  realityio::tokens::MeshBuilderTokens_StaticTokenType *v232;
  _BOOL4 RealityKitStage;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int *v238;
  pxrInternal__aapl__pxrReserved__::UsdStage *v239;
  _QWORD *v240;
  realityio *AttributeCount;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v242;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v243;
  NSObject *v244;
  uint64_t v245;
  unsigned int *v246;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim *IsValid;
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere *IsA;
  pxrInternal__aapl__pxrReserved__::UsdGeomCube *v249;
  unsigned int **v250;
  char v251;
  __int128 v252;
  realityio *v253;
  uint64_t Text;
  realityio *v255;
  uint64_t v256;
  unsigned int *v257;
  unsigned int v258;
  unint64_t v259;
  uint64_t v260;
  unsigned int *v261;
  unsigned int v262;
  pxrInternal__aapl__pxrReserved__::UsdObject *v263;
  pxrInternal__aapl__pxrReserved__::UsdObject *v264;
  unsigned int *v265;
  unsigned int v266;
  char v273;
  unsigned int *v274;
  unsigned int v275;
  unsigned int *v276;
  unsigned int v277;
  uint64_t **v278;
  uint64_t v279;
  uint64_t *v280;
  int begin_high;
  unint64_t v282;
  uint8x8_t v283;
  uint64_t **v284;
  uint64_t *i;
  unint64_t v286;
  _QWORD *v287;
  float v288;
  _BOOL8 v289;
  unint64_t v290;
  unint64_t v291;
  int8x8_t prime;
  void *v293;
  void *v294;
  uint64_t v295;
  _QWORD **v296;
  unint64_t v297;
  uint8x8_t v298;
  unint64_t v299;
  uint8x8_t v300;
  uint64_t v301;
  _QWORD *j;
  unint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  unint64_t v306;
  unsigned int *v307;
  unsigned int v308;
  unsigned int *v309;
  unsigned int v310;
  void *v311;
  int v312;
  char v313;
  char v314;
  int v315;
  void *v316;
  uint64_t v317;
  NSObject *v319;
  uint64_t v320;
  unsigned int *v321;
  unsigned int v322;
  unint64_t v323;
  const char *v324;
  unsigned int v325;
  std::string *v326;
  __int128 v327;
  uint64_t v328;
  unsigned int *v329;
  unsigned int v330;
  unsigned int *v331;
  unsigned int v332;
  uint64_t v333;
  unsigned int *v334;
  unsigned int v335;
  unsigned int *v336;
  uint64_t v337;
  unint64_t v338;
  int v339;
  _BOOL4 v340;
  unsigned int v341;
  uint64_t v342;
  unsigned int *v343;
  unsigned int v344;
  unsigned int *v345;
  unsigned int v346;
  uint64_t v347;
  unsigned int *v348;
  unsigned int v349;
  unsigned int *v350;
  unsigned int v351;
  unsigned int *v352;
  unsigned int v353;
  void **v354;
  void **v355;
  void *v356;
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *v357;
  unsigned int **v358;
  float v359;
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *v360;
  unsigned int **v361;
  float v362;
  unsigned int **v363;
  float AttributeValueWithDefault;
  unsigned int **v365;
  float v366;
  unsigned int v367;
  unsigned int **v368;
  unsigned int **v369;
  uint64_t *v370;
  uint64_t v371;
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v375;
  int v376;
  _QWORD *v377;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  int v384;
  unsigned int *v385;
  unsigned int *v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int *v389;
  unsigned int v390;
  std::vector<unsigned int>::pointer v391;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v392;
  unsigned int FaceCount;
  _QWORD *v394;
  _DWORD *v395;
  unsigned int *v396;
  std::vector<unsigned int>::pointer v397;
  unsigned int *v398;
  unsigned int v399;
  unsigned int *v400;
  unsigned int v401;
  unsigned int *v402;
  unsigned int v403;
  unsigned int *v404;
  unsigned int v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  unsigned int **v409;
  float v410;
  uint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t v413;
  _QWORD *v414;
  _QWORD *v415;
  _QWORD *v416;
  std::vector<unsigned int>::pointer *v417;
  std::vector<unsigned int>::pointer *v418;
  unint64_t v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  std::mutex *v422;
  unint64_t *v423;
  unint64_t v424;
  const void **v425;
  int begin_low;
  std::vector<unsigned int>::pointer v427;
  unint64_t *v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  std::vector<unsigned int>::pointer *v433;
  std::vector<unsigned int>::pointer *v434;
  unsigned int *v435;
  uint64_t v436;
  char *v437;
  uint64_t v438;
  char *v439;
  char *v440;
  std::string *v441;
  __int128 v442;
  uint64_t v443;
  int v444;
  const std::string::value_type *v445;
  std::string::size_type v446;
  std::string *v447;
  __int128 v448;
  std::string *v449;
  __int128 v450;
  unsigned int *v451;
  __int8 end_high;
  std::vector<unsigned int>::pointer *v453;
  unsigned int *v454;
  unsigned int v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  uint64_t *v459;
  uint64_t *k;
  uint64_t v461;
  unsigned int *v462;
  _DWORD *v463;
  realityio *ModelCount;
  std::__shared_weak_count *v465;
  char *PrimPath;
  uint64_t *v467;
  char *v468;
  char AssetURLFromBundle;
  std::__shared_weak_count *v470;
  _QWORD *v471;
  unint64_t *v472;
  uint64_t v473;
  unint64_t v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  unint64_t v477;
  char *v478;
  char *v479;
  uint64_t v480;
  unsigned int *v481;
  unsigned int v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  _OWORD *v486;
  __int128 v487;
  std::string::size_type v488;
  unsigned int *v489;
  unsigned int v490;
  _QWORD *v491;
  char *v492;
  void *v493;
  int64_t v494;
  unint64_t v495;
  unint64_t v496;
  char *v497;
  char *v498;
  char *v499;
  char *v500;
  uint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  _QWORD *m;
  pxrInternal__aapl__pxrReserved__::TfToken *v506;
  const void **v507;
  int v508;
  unsigned int *v509;
  unsigned int v510;
  uint64_t v511;
  uint64_t v512;
  pxrInternal__aapl__pxrReserved__::TfToken *v513;
  const void **v514;
  uint64_t v515;
  uint64_t *v516;
  uint64_t v517;
  __int128 *v518;
  std::string *v519;
  __int128 v520;
  std::string *v521;
  std::string::__raw *v522;
  std::string::size_type v523;
  std::string::size_type v524;
  uint64_t v525;
  unint64_t v526;
  unint64_t v527;
  char *v528;
  std::string::__raw **v529;
  char *v530;
  std::string::size_type v531;
  std::string::__raw *v532;
  char *v533;
  char **v534;
  uint64_t v535;
  uint64_t v536;
  unint64_t v537;
  unint64_t v538;
  char *v539;
  uint64_t *v540;
  char *v541;
  char *v542;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v544;
  pxrInternal__aapl__pxrReserved__::TfToken *v545;
  uint64_t v546;
  unsigned int *v547;
  unsigned int v548;
  unsigned int *v549;
  unsigned int v550;
  int v551;
  pxrInternal__aapl__pxrReserved__::UsdObject *v552;
  pxrInternal__aapl__pxrReserved__::UsdObject *v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  unint64_t v557;
  char *v558;
  char *v559;
  pxrInternal__aapl__pxrReserved__::UsdObject *v560;
  pxrInternal__aapl__pxrReserved__::UsdObject *v561;
  char *v562;
  __int128 v563;
  unsigned int *v564;
  unsigned int v565;
  unsigned int *v566;
  unsigned int v567;
  char *v568;
  char *v569;
  uint64_t v570;
  std::string::size_type v571;
  uint64_t v572;
  unint64_t v573;
  unint64_t v574;
  char *v575;
  char *v576;
  char *v577;
  char *v578;
  char *v579;
  NSObject *v580;
  uint64_t AssetWithDefinitionsAndWeightNames;
  char v582;
  char *v583;
  std::__shared_weak_count *v584;
  unint64_t *v585;
  __int128 v586;
  unint64_t *v587;
  unint64_t v588;
  std::string::size_type v589;
  unint64_t v590;
  _QWORD *v591;
  uint64_t v592;
  char *v593;
  uint64_t *v594;
  _QWORD *v595;
  char *v596;
  uint64_t v597;
  std::string *p_shared_weak_owners;
  std::string::size_type v599;
  unint64_t *v600;
  unint64_t v601;
  realityio::MeshAssetBuilder *v602;
  std::__shared_weak_count *v603;
  uint64_t v604;
  unint64_t *v605;
  unint64_t v606;
  const void **v607;
  unsigned int *v608;
  unsigned int *v609;
  unsigned int *v610;
  unint64_t v611;
  unint64_t v612;
  unint64_t v613;
  uint64_t *v614;
  std::__shared_weak_count *v615;
  unint64_t *v616;
  unint64_t v617;
  std::__shared_weak_count *v618;
  unint64_t *v619;
  unint64_t v620;
  unint64_t *v621;
  unint64_t v622;
  unint64_t *v623;
  unint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  uint64_t v628;
  __int128 v629;
  unint64_t *v630;
  unint64_t v631;
  char *v632;
  _QWORD *v633;
  uint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  void *v641;
  unsigned int *v642;
  unsigned int v643;
  uint64_t result;
  int v645;
  uint64_t v646;
  int v647;
  uint64_t v648;
  unsigned int (*v649)(_BYTE *);
  uint64_t v650;
  uint64_t SphereDescriptor;
  pxrInternal__aapl__pxrReserved__::SdfPath *v652;
  _BOOL4 v653;
  char *v655;
  uint64_t v656;
  __int128 v657;
  float32x4_t v658;
  uint64_t v659;
  int64x2_t v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  float32x4_t v664;
  float32x4_t v665;
  pxrInternal__aapl__pxrReserved__::UsdObject *v666;
  _QWORD *v667;
  uint64_t v668;
  uint64_t v669;
  char *v670;
  uint64_t **v671;
  unsigned int (*v672)(uint64_t *);
  std::vector<unsigned int>::pointer v674;
  _QWORD *v675;
  __int128 v676;
  __int128 v677;
  std::string::size_type v678;
  __int128 v679;
  uint64_t v680;
  char v681[8];
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  void *v685;
  uint64_t v686;
  void *v687;
  unsigned int *v688;
  __int128 v689;
  std::string::size_type v690;
  uint64_t begin;
  void **v692;
  std::string *v693;
  unint64_t v694;
  uint64_t v695;
  int v696;
  int v697;
  _QWORD *v698;
  std::__shared_weak_count *v699;
  uint64_t v700;
  unint64_t v701;
  unint64_t v702;
  _BYTE v703[24];
  __int128 __s;
  uint64_t v705;
  _QWORD v706[5];
  uint64_t v707;
  uint64_t v708;
  uint64_t *v709;
  _QWORD *v710;
  uint64_t v711;
  uint64_t *v712;
  _QWORD *v713;
  uint64_t v714;
  uint64_t **v715;
  uint64_t *v716;
  uint64_t v717;
  __int128 v718;
  uint64_t v719;
  void *v720;
  void *v721;
  uint64_t v722;
  std::string __p[2];
  uint64_t v724;
  void *v725;
  char *v726;
  char *v727;
  uint64_t v728;
  uint64_t v729;
  _BYTE v730[16];
  int v731;
  __int128 v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  _DWORD v738[2];
  std::string v739;
  unint64_t v740;
  std::string v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int v745;
  char **v746;
  char *v747;
  char *v748;
  void *v749;
  void *v750;
  unint64_t v751;
  std::string __str;
  void *v753;
  pxrInternal__aapl__pxrReserved__::UsdObject *v754;
  unint64_t v755;
  void *v756;
  void *v757;
  char *v758;
  std::string v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  int64x2_t v763;
  __int128 v764;
  _BYTE v765[32];
  int64x2_t v766;
  __int128 v767;
  _BYTE v768[24];
  _BYTE *v769;
  std::string v770;
  unint64_t v771;
  int v772;
  std::vector<unsigned int> buf[2];
  _QWORD v774[3];
  uint64_t v775;
  __int128 v776;
  _BYTE v777[32];
  __int128 v778;
  uint64_t v779;

  v779 = *MEMORY[0x24BDAC8D0];
  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
  v652 = v2;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v3, v2);
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v731) & 1) != 0)
  {
    realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v730, 2034, (uint64_t)this);
    v728 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v729 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    v4 = (realityio::MeshModelDescriptorBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v726 = 0;
    v725 = 0;
    v727 = 0;
    v5 = realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v4);
    v761 = 0uLL;
    v6 = a2[3];
    if (v6)
    {
      *((_QWORD *)&v761 + 1) = std::__shared_weak_count::lock(v6);
      if (*((_QWORD *)&v761 + 1))
        *(_QWORD *)&v761 = a2[2];
    }
    MEMORY[0x2348B2764](&v762, v5);
    v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(a2[1], &v761);
    v8 = v7;
    v10 = v9;
    if (v7 != v9)
    {
      memset(__p, 0, 24);
      while (1)
      {
        v11 = *((_QWORD *)v8 + 5);
        v13 = *(std::mutex **)(v11 + 16);
        v12 = *(_QWORD *)(v11 + 24);
        v770.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
        v770.__r_.__value_.__l.__size_ = v12;
        if (v12)
        {
          v14 = (unint64_t *)(v12 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        if ((*((_QWORD *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (const void **)((*((_QWORD *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
        realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>(v13, EmptyString, (uint64_t)v703);
        if (v703[0])
        {
          v17 = *(unsigned int **)&v703[8];
          v18 = *(unsigned int **)&v703[16];
          if (*(_QWORD *)&v703[16])
          {
            v19 = (unint64_t *)(*(_QWORD *)&v703[16] + 8);
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
            do
              v21 = __ldxr(v19);
            while (__stxr(v21 + 1, v19));
            LOBYTE(buf[0].__begin_) = 1;
            buf[0].__end_ = v17;
            buf[0].__end_cap_.__value_ = v18;
            do
              v22 = __ldaxr(v19);
            while (__stlxr(v22 - 1, v19));
            if (!v22)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18);
            }
          }
          else
          {
            LOBYTE(buf[0].__begin_) = 1;
            buf[0].__end_ = *(std::vector<unsigned int>::pointer *)&v703[8];
            buf[0].__end_cap_.__value_ = 0;
          }
        }
        else
        {
          v776 = *(_OWORD *)&v703[8];
          if (SHIBYTE(v705) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v777, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
          }
          else
          {
            *(_OWORD *)v777 = __s;
            *(_QWORD *)&v777[16] = v705;
          }
          LOBYTE(buf[0].__begin_) = 0;
          *(_OWORD *)&buf[0].__end_ = v776;
          buf[1] = *(std::vector<unsigned int> *)v777;
        }
        realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v703);
        size = (std::__shared_weak_count *)v770.__r_.__value_.__l.__size_;
        if (v770.__r_.__value_.__l.__size_)
        {
          v24 = (unint64_t *)(v770.__r_.__value_.__l.__size_ + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if (!LOBYTE(buf[0].__begin_))
          goto LABEL_56;
        v26 = __p[0].__r_.__value_.__l.__size_;
        if (__p[0].__r_.__value_.__l.__size_ < __p[0].__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)__p[0].__r_.__value_.__l.__size_ = buf[0].__end_;
          value = buf[0].__end_cap_.__value_;
          *(_QWORD *)(v26 + 8) = buf[0].__end_cap_.__value_;
          if (value)
          {
            v28 = (unint64_t *)(value + 2);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          v30 = v26 + 16;
          goto LABEL_55;
        }
        v31 = (uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 4;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v33 = __p[0].__r_.__value_.__r.__words[2] - __p[0].__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p[0].__r_.__value_.__r.__words[2] - __p[0].__r_.__value_.__r.__words[0]) >> 3 > v32)
          v32 = v33 >> 3;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
          v34 = 0xFFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v34);
        v37 = &v35[16 * v31];
        v38 = buf[0].__end_cap_.__value_;
        *(_OWORD *)v37 = *(_OWORD *)&buf[0].__end_;
        if (v38)
        {
          v39 = (unint64_t *)(v38 + 2);
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        v41 = (_QWORD *)__p[0].__r_.__value_.__l.__size_;
        v42 = __p[0].__r_.__value_.__r.__words[0];
        if (__p[0].__r_.__value_.__l.__size_ == __p[0].__r_.__value_.__r.__words[0])
        {
          v30 = (std::string::size_type)(v37 + 16);
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
          __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v37 + 16);
          __p[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&v35[16 * v36];
          if (!v41)
            goto LABEL_55;
        }
        else
        {
          v43 = (std::string::size_type)v37;
          do
          {
            v44 = *((_OWORD *)v41 - 1);
            v41 -= 2;
            *(_OWORD *)(v43 - 16) = v44;
            v43 -= 16;
            *v41 = 0;
            v41[1] = 0;
          }
          while (v41 != (_QWORD *)v42);
          v45 = __p[0].__r_.__value_.__l.__size_;
          v41 = (_QWORD *)__p[0].__r_.__value_.__r.__words[0];
          v30 = (std::string::size_type)(v37 + 16);
          __p[0].__r_.__value_.__r.__words[0] = v43;
          __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v37 + 16);
          __p[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&v35[16 * v36];
          while ((_QWORD *)v45 != v41)
          {
            v45 -= 16;
            std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v45);
          }
          if (!v41)
            goto LABEL_55;
        }
        operator delete(v41);
LABEL_55:
        __p[0].__r_.__value_.__l.__size_ = v30;
LABEL_56:
        v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)buf);
        v8 = *(pxrInternal__aapl__pxrReserved__::TfToken **)v8;
        if (v8 == v10)
        {
          memset(v703, 0, sizeof(v703));
          v47 = __p[0].__r_.__value_.__l.__size_;
          v46 = (_QWORD *)__p[0].__r_.__value_.__r.__words[0];
          buf[0].__begin_ = (std::vector<unsigned int>::pointer)v703;
          LOBYTE(buf[0].__end_) = 0;
          v48 = __p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0];
          if (__p[0].__r_.__value_.__l.__size_ == __p[0].__r_.__value_.__r.__words[0])
          {
            v54 = 0;
            v49 = 0;
          }
          else
          {
            if (v48 < 0)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v48 >> 4);
            *(_QWORD *)v703 = v49;
            *(_QWORD *)&v703[8] = v49;
            *(_QWORD *)&v703[16] = &v49[16 * v50];
            v48 = (int64_t)v49;
            do
            {
              *(_QWORD *)v48 = *v46;
              v51 = v46[1];
              *(_QWORD *)(v48 + 8) = v51;
              if (v51)
              {
                v52 = (unint64_t *)(v51 + 8);
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }
              v46 += 2;
              v48 += 16;
            }
            while (v46 != (_QWORD *)v47);
            v54 = *(_QWORD *)&v703[16];
          }
          v765[0] = 1;
          *(_QWORD *)&v765[8] = v49;
          *(_QWORD *)&v765[16] = v48;
          *(_QWORD *)&v765[24] = v54;
          memset(v703, 0, sizeof(v703));
          buf[0].__begin_ = (std::vector<unsigned int>::pointer)v703;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          *(_QWORD *)v703 = __p;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v703);
          goto LABEL_84;
        }
      }
    }
    std::operator+<char>();
    v55 = std::string::append(&v770, ") at prim path (");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v652);
    v58 = *(char *)(String + 23);
    if (v58 >= 0)
      v59 = (const std::string::value_type *)String;
    else
      v59 = *(const std::string::value_type **)String;
    if (v58 >= 0)
      v60 = *(unsigned __int8 *)(String + 23);
    else
      v60 = *(_QWORD *)(String + 8);
    v61 = std::string::append(__p, v59, v60);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    *(_QWORD *)v777 = *((_QWORD *)&v61->__r_.__value_.__l + 2);
    v776 = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    v63 = std::string::append((std::string *)&v776, ")");
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    buf[0].__end_cap_.__value_ = (unsigned int *)v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf[0].__begin_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v703, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)buf);
    *(_OWORD *)&v765[8] = *(_OWORD *)v703;
    v65 = *(_QWORD *)&v703[16];
    v766.i64[0] = __s;
    *(uint64_t *)((char *)v766.i64 + 7) = *(_QWORD *)((char *)&__s + 7);
    v66 = HIBYTE(__s);
    *(_QWORD *)&v703[16] = 0;
    __s = 0uLL;
    v765[0] = 0;
    *(_QWORD *)&v765[24] = v65;
    v766.i8[15] = v66;
    if (SHIBYTE(buf[0].__end_cap_.__value_) < 0)
      operator delete(buf[0].__begin_);
    if ((v777[7] & 0x80000000) != 0)
      operator delete((void *)v776);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v770.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v770.__r_.__value_.__l.__data_);
LABEL_84:
    if ((v762 & 7) != 0)
    {
      v67 = (unsigned int *)(v762 & 0xFFFFFFFFFFFFFFF8);
      do
        v68 = __ldxr(v67);
      while (__stlxr(v68 - 2, v67));
    }
    v69 = (std::__shared_weak_count *)*((_QWORD *)&v761 + 1);
    if (*((_QWORD *)&v761 + 1))
    {
      v70 = (unint64_t *)(*((_QWORD *)&v761 + 1) + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    if (!v765[0]
      || (v72 = *(_QWORD *)&v765[16], v73 = *(_QWORD *)&v765[8], *(_QWORD *)&v765[16] == *(_QWORD *)&v765[8]))
    {
      realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)v765);
LABEL_1122:
      *(_QWORD *)v703 = &v725;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v703);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v729);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v728);
      realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v730);
      goto LABEL_1123;
    }
    v74 = 0;
    v674 = (std::vector<unsigned int>::pointer)&buf[0].__end_cap_.__value_ + 1;
    p_end_cap = (unint64_t)&buf[0].__end_cap_;
    do
    {
      v77 = *(_QWORD *)v73;
      v76 = *(std::__shared_weak_count **)(v73 + 8);
      *(_QWORD *)&v776 = *(_QWORD *)v73;
      *((_QWORD *)&v776 + 1) = v76;
      if (v76)
      {
        p_shared_owners = (unint64_t *)&v76->__shared_owners_;
        do
          v79 = __ldxr(p_shared_owners);
        while (__stxr(v79 + 1, p_shared_owners));
        *((_QWORD *)&v761 + 1) = v76;
        do
          v80 = __ldxr(p_shared_owners);
        while (__stxr(v80 + 1, p_shared_owners));
      }
      else
      {
        *((_QWORD *)&v761 + 1) = 0;
      }
      *(_QWORD *)&v761 = v77;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v770, (_DWORD *)(v77 + 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v770.__r_.__value_.__r.__words + 1, (_DWORD *)(v77 + 12));
      v81 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v81, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v770);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimInPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)v703, (uint64_t)buf);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)buf))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, &v741);
          if ((v74 & 1) != 0)
          {
            if (v741.__r_.__value_.__r.__words[0] == v728)
            {
              v82 = operator new();
              v724 = *(_QWORD *)v77;
              if (v724)
                RERetain();
              realityio::MeshModelDescriptorBuilder::MeshModelDataT::MeshModelDataT(v82, &v724, &v729, (_DWORD *)(v77 + 16), (_DWORD *)(v77 + 24), (_DWORD **)(v77 + 32), (uint64_t *)(v77 + 56));
              __p[0].__r_.__value_.__r.__words[0] = v82;
              v83 = (std::__shared_weak_count *)operator new();
              v83->__shared_owners_ = 0;
              v84 = (unint64_t *)&v83->__shared_owners_;
              v83->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF9038;
              v83->__shared_weak_owners_ = 0;
              v83[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
              realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(&v724);
              do
                v85 = __ldxr(v84);
              while (__stxr(v85 + 1, v84));
              *(_QWORD *)&v761 = v82;
              *((_QWORD *)&v761 + 1) = v83;
              if (v76)
              {
                v86 = (unint64_t *)&v76->__shared_owners_;
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              do
                v88 = __ldaxr(v84);
              while (__stlxr(v88 - 1, v84));
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, &v741);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)__p[0].__r_.__value_.__r.__words + 1, (_DWORD *)v741.__r_.__value_.__r.__words + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p[0].__r_.__value_.__r.__words[1], &v770);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p[0].__r_.__value_.__r.__words[1] + 1, (_DWORD *)v770.__r_.__value_.__r.__words + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v728, (int *)__p);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v728 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v729, (int *)&__p[0].__r_.__value_.__r.__words[1]);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v729 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[0].__r_.__value_.__l.__size_);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v741);
          v74 = 1;
        }
        if (((uint64_t)buf[1].__begin_ & 7) != 0)
        {
          v89 = (unsigned int *)((unint64_t)buf[1].__begin_ & 0xFFFFFFFFFFFFFFF8);
          do
            v90 = __ldxr(v89);
          while (__stlxr(v90 - 2, v89));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf[0].__end_cap_);
        if (buf[0].__end_)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)buf[0].__end_);
      }
      v91 = v726;
      if (v726 >= v727)
      {
        v96 = (v726 - (_BYTE *)v725) >> 4;
        v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 60)
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        v98 = v727 - (_BYTE *)v725;
        if ((v727 - (_BYTE *)v725) >> 3 > v97)
          v97 = v98 >> 3;
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF0)
          v99 = 0xFFFFFFFFFFFFFFFLL;
        else
          v99 = v97;
        v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v99);
        v102 = &v100[16 * v96];
        v103 = *((_QWORD *)&v761 + 1);
        *(_OWORD *)v102 = v761;
        if (v103)
        {
          v104 = (unint64_t *)(v103 + 8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        v106 = v726;
        v107 = v725;
        if (v726 == v725)
        {
          v95 = v102 + 16;
          v725 = v102;
          v726 = v102 + 16;
          v727 = &v100[16 * v101];
        }
        else
        {
          v108 = v102;
          do
          {
            v109 = *((_OWORD *)v106 - 1);
            v106 -= 2;
            *((_OWORD *)v108 - 1) = v109;
            v108 -= 16;
            *v106 = 0;
            v106[1] = 0;
          }
          while (v106 != v107);
          v106 = v725;
          v110 = (uint64_t)v726;
          v95 = v102 + 16;
          v725 = v108;
          v726 = v102 + 16;
          v727 = &v100[16 * v101];
          while ((_QWORD *)v110 != v106)
          {
            v110 -= 16;
            std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v110);
          }
        }
        if (v106)
          operator delete(v106);
      }
      else
      {
        *(_QWORD *)v726 = v761;
        v92 = *((_QWORD *)&v761 + 1);
        *((_QWORD *)v91 + 1) = *((_QWORD *)&v761 + 1);
        if (v92)
        {
          v93 = (unint64_t *)(v92 + 8);
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        v95 = v91 + 16;
      }
      v726 = v95;
      if ((__s & 7) != 0)
      {
        v111 = (unsigned int *)(__s & 0xFFFFFFFFFFFFFFF8);
        do
          v112 = __ldxr(v111);
        while (__stlxr(v112 - 2, v111));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v703[16]);
      if (*(_QWORD *)&v703[8])
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v703[8]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v770);
      v113 = (std::__shared_weak_count *)*((_QWORD *)&v761 + 1);
      if (*((_QWORD *)&v761 + 1))
      {
        v114 = (unint64_t *)(*((_QWORD *)&v761 + 1) + 8);
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      v116 = (std::__shared_weak_count *)*((_QWORD *)&v776 + 1);
      if (*((_QWORD *)&v776 + 1))
      {
        v117 = (unint64_t *)(*((_QWORD *)&v776 + 1) + 8);
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      v73 += 16;
    }
    while (v73 != v72);
    v119 = (realityio::MaterialAssetBuilder *)realityio::Result<std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>,realityio::DetailedError>::~Result((uint64_t)v765);
    v120 = realityio::MaterialAssetBuilder::kMaterialDataName(v119);
    realityio::Inputs::getAccumulatedValues<realityio::MaterialAssetDataT *>((uint64_t)a2, v120, (uint64_t)__p);
    v721 = 0;
    v720 = 0;
    v722 = 0;
    if (__p[0].__r_.__value_.__s.__data_[0])
      std::vector<realityio::MaterialAssetDataT *>::__init_with_size[abi:ne180100]<realityio::MaterialAssetDataT **,realityio::MaterialAssetDataT **>(&v720, (const void *)__p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2], (uint64_t)(__p[0].__r_.__value_.__r.__words[2] - __p[0].__r_.__value_.__l.__size_) >> 3);
    EntityGeneratingDataForPrim = realityio::internal::PrimToEntityMap::getEntityGeneratingDataForPrim((realityio::internal::PrimToEntityMap *)&(*a2)->__shared_weak_owners_, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v731);
    v653 = EntityGeneratingDataForPrim
        && *(_QWORD *)(EntityGeneratingDataForPrim + 96) == 1
        && !*(_QWORD *)(EntityGeneratingDataForPrim + 72)
        && *(_BYTE *)(a2[5]->__shared_weak_owners_ + 272) == 0;
    v718 = 0uLL;
    v719 = 0;
    v717 = 0;
    v716 = 0;
    v715 = &v716;
    v714 = 0;
    v713 = 0;
    v712 = (uint64_t *)&v713;
    v711 = 0;
    v710 = 0;
    v709 = (uint64_t *)&v710;
    if (!REMeshAssetDescriptorCreate())
    {
LABEL_1119:
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v709, v710);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)&v712, v713);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)&v715, v716);
      *(_QWORD *)v703 = &v718;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v703);
      if (v720)
      {
        v721 = v720;
        operator delete(v720);
      }
      realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)__p);
      goto LABEL_1122;
    }
    ServiceLocator = REEngineGetServiceLocator();
    v123 = MEMORY[0x2348B1264](ServiceLocator);
    shared_weak_owners_low = LOBYTE((*a2)[11].__shared_weak_owners_);
    v125 = (uint64_t)a2[5];
    v126 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
    MaterialIndexAssignor::make(v703, (uint64_t *)&v720, &v725, shared_weak_owners_low != 0, v125, v126, (uint64_t *)this);
    v648 = v123;
    v701 = 0;
    v700 = 0;
    v702 = 0;
    v128 = v725;
    v655 = v726;
    if (v725 != v726)
    {
      SphereDescriptor = 0;
      v656 = 0;
      v645 = 0;
      v647 = LOBYTE((*a2)[11].__shared_weak_owners_);
      v646 = MEMORY[0x24BEE9CF0] + 16;
      v674 = (std::vector<unsigned int>::pointer)&v770.__r_.__value_.__r.__words[2];
      v649 = *(unsigned int (**)(_BYTE *))(MEMORY[0x24BEE9DA8] + 48);
      v672 = *(unsigned int (**)(uint64_t *))(MEMORY[0x24BEE9D78] + 48);
      v671 = (uint64_t **)((char *)this + 136);
      v650 = MEMORY[0x24BEE9DC8] + 16;
      while (1)
      {
        v130 = (_QWORD *)*v128;
        v129 = (std::__shared_weak_count *)v128[1];
        v667 = v128;
        v698 = (_QWORD *)*v128;
        v699 = v129;
        if (v129)
        {
          v131 = (unint64_t *)&v129->__shared_owners_;
          do
            v132 = __ldxr(v131);
          while (__stxr(v132 + 1, v131));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v696, (_DWORD *)v130 + 2);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v697, (_DWORD *)v130 + 3);
        v133 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v133, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v696);
        v134 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v715, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v696);
        if (&v716 != v134)
        {
          v135 = *((_DWORD *)v134 + 9);
          goto LABEL_179;
        }
        v139 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
        PrimAtPath = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v139, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v696);
        pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(PrimAtPath);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) == 0)
        {
          v218 = 5;
          v135 = -1;
          goto LABEL_705;
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v737 = 0;
        v734 = v650;
        Data = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
        if (!Data)
          Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v734, Data, 0);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v692, &v744, &v745);
        MEMORY[0x2348B274C](&begin, "primvars:st");
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        buf[1].__begin_ = 0;
        buf[0].__begin_ = (std::vector<unsigned int>::pointer)(MEMORY[0x24BEE9DC8] + 16);
        v142 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
        if (!v142)
          v142 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)buf, v142, 0);
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v765, (uint64_t *)&v770.__r_.__value_.__l.__size_, &v770.__r_.__value_.__r.__words[2]);
        v143 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
        if (!v143)
          v143 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
        v144 = *((_QWORD *)v143 + 27);
        if ((v144 & 7) != 0)
        {
          v145 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
          do
            v146 = __ldxr(v145);
          while (__stxr(v146 + 2, v145));
          if ((v146 & 1) == 0)
            v144 &= 0xFFFFFFFFFFFFFFF8;
        }
        v761 = 0uLL;
        *(_QWORD *)&v762 = 0;
        v756 = &v761;
        LOBYTE(v757) = 0;
        v147 = operator new(8uLL);
        *(_QWORD *)&v761 = v147;
        *((_QWORD *)&v761 + 1) = v147;
        *v147 = v144;
        *(_QWORD *)&v762 = v147 + 1;
        if ((v144 & 7) != 0)
        {
          v148 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
          do
            v149 = __ldxr(v148);
          while (__stxr(v149 + 2, v148));
          if ((v149 & 1) == 0)
            *v147 &= 0xFFFFFFFFFFFFFFF8;
        }
        *((_QWORD *)&v761 + 1) = v147 + 1;
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
        realityio::findFirstUVMeshAttributeNameFromShader((realityio *)&v776, v150, &v759);
        MEMORY[0x2348B1EC4](&v776);
        v756 = &v761;
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v756);
        if ((v144 & 7) != 0)
        {
          v151 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
          do
            v152 = __ldxr(v151);
          while (__stlxr(v152 - 2, v151));
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)buf);
        v153 = (uint64_t *)v757;
        v154 = (uint64_t *)v756;
        if (v757 != v756)
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v761, v154 + 1, (_DWORD *)v154 + 4);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            *(_QWORD *)&v777[8] = 0;
            *(_QWORD *)&v776 = MEMORY[0x24BEE9DC8] + 16;
            if ((BYTE8(v762) & 7) != 0)
            {
              v155 = (unsigned int *)(*((_QWORD *)&v762 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v156 = __ldxr(v155);
              while (__stlxr(v156 - 2, v155));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v762);
            if (*((_QWORD *)&v761 + 1))
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v761 + 1));
            v157 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
            if (!v157)
              v157 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
            pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v776, v157, 0);
            pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v761, (uint64_t *)&v754, &v755);
            v158 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load(MEMORY[0x24BEE8128]);
            if (!v158)
              v158 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
            v159 = *((_QWORD *)v158 + 27);
            if ((v159 & 7) != 0)
            {
              v160 = (unsigned int *)(v159 & 0xFFFFFFFFFFFFFFF8);
              do
                v161 = __ldxr(v160);
              while (__stxr(v161 + 2, v160));
              if ((v161 & 1) == 0)
                v159 &= 0xFFFFFFFFFFFFFFF8;
            }
            v747 = 0;
            v746 = 0;
            v748 = 0;
            *(_QWORD *)&v760 = &v746;
            BYTE8(v760) = 0;
            v162 = (char *)operator new(8uLL);
            v746 = (char **)v162;
            v747 = v162;
            *(_QWORD *)v162 = v159;
            v748 = v162 + 8;
            if ((v159 & 7) != 0)
            {
              v163 = (unsigned int *)(v159 & 0xFFFFFFFFFFFFFFF8);
              do
                v164 = __ldxr(v163);
              while (__stxr(v164 + 2, v163));
              if ((v164 & 1) == 0)
                *(_QWORD *)v162 &= 0xFFFFFFFFFFFFFFF8;
            }
            v747 = v162 + 8;
            pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
            realityio::findFirstUVMeshAttributeNameFromShader((realityio *)&v749, v165, &__str);
            MEMORY[0x2348B1EC4](&v749);
            *(_QWORD *)&v760 = &v746;
            std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v760);
            if ((v159 & 7) != 0)
            {
              v166 = (unsigned int *)(v159 & 0xFFFFFFFFFFFFFFF8);
              do
                v167 = __ldxr(v166);
              while (__stlxr(v167 - 2, v166));
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              if (__str.__r_.__value_.__l.__size_)
              {
LABEL_291:
                std::string::operator=(&v759, &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if ((BYTE8(v762) & 7) != 0)
                {
                  v219 = (unsigned int *)(*((_QWORD *)&v762 + 1) & 0xFFFFFFFFFFFFFFF8);
                  do
                    v220 = __ldxr(v219);
                  while (__stlxr(v220 - 2, v219));
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v762);
                if (*((_QWORD *)&v761 + 1))
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v761 + 1));
                MEMORY[0x2348B20B0](&v753);
                MEMORY[0x2348B24C4](&v776);
                break;
              }
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            else if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
            {
              goto LABEL_291;
            }
            if ((BYTE8(v762) & 7) != 0)
            {
              v168 = (unsigned int *)(*((_QWORD *)&v762 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v169 = __ldxr(v168);
              while (__stlxr(v169 - 2, v168));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v762);
            if (*((_QWORD *)&v761 + 1))
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v761 + 1));
            MEMORY[0x2348B20B0](&v753);
            MEMORY[0x2348B24C4](&v776);
            v154 += 3;
          }
          while (v154 != v153);
        }
        if (SHIBYTE(v759.__r_.__value_.__r.__words[2]) < 0)
        {
          if (!v759.__r_.__value_.__l.__size_)
          {
LABEL_310:
            std::string::basic_string[abi:ne180100]<0>(&v689, "");
            goto LABEL_311;
          }
        }
        else if (!*((_BYTE *)&v759.__r_.__value_.__s + 23))
        {
          goto LABEL_310;
        }
        v221 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v776, "primvars:");
        if ((v759.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v222 = &v759;
        else
          v222 = (std::string *)v759.__r_.__value_.__r.__words[0];
        if ((v759.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v223 = HIBYTE(v759.__r_.__value_.__r.__words[2]);
        else
          v223 = v759.__r_.__value_.__l.__size_;
        v224 = std::string::append(v221, (const std::string::value_type *)v222, v223);
        v225 = *(_OWORD *)&v224->__r_.__value_.__l.__data_;
        v690 = v224->__r_.__value_.__r.__words[2];
        v689 = v225;
        v224->__r_.__value_.__l.__size_ = 0;
        v224->__r_.__value_.__r.__words[2] = 0;
        v224->__r_.__value_.__r.__words[0] = 0;
        if ((v777[7] & 0x80000000) != 0)
          operator delete((void *)v776);
LABEL_311:
        *(_QWORD *)&v776 = &v756;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)&v776);
        if (SHIBYTE(v759.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v759.__r_.__value_.__l.__data_);
        if ((v765[24] & 7) != 0)
        {
          v226 = (unsigned int *)(*(_QWORD *)&v765[24] & 0xFFFFFFFFFFFFFFF8);
          do
            v227 = __ldxr(v226);
          while (__stlxr(v227 - 2, v226));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v765[16]);
        if (*(_QWORD *)&v765[8])
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v765[8]);
        MEMORY[0x2348B20B0](&v770);
        MEMORY[0x2348B24C4](buf);
        if (SHIBYTE(v690) < 0)
        {
          if (!*((_QWORD *)&v689 + 1))
            goto LABEL_327;
          v228 = (__int128 *)v689;
        }
        else
        {
          if (!HIBYTE(v690))
            goto LABEL_327;
          v228 = &v689;
        }
        MEMORY[0x2348B274C](buf, v228);
        if ((begin & 7) != 0)
        {
          v229 = (unsigned int *)(begin & 0xFFFFFFFFFFFFFFF8);
          do
            v230 = __ldxr(v229);
          while (__stlxr(v230 - 2, v229));
        }
        begin = (uint64_t)buf[0].__begin_;
LABEL_327:
        LOBYTE(v746) = 0;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v731);
        end = buf[0].__end_;
        if (buf[0].__end_)
        {
          if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&buf[0].__end_)
                        + 14))
            end = buf[0].__begin_;
          else
            end = 0;
        }
        v688 = end;
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v688);
        v232 = (realityio::tokens::MeshBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MeshBuilderTokens);
        if (!v232)
          v232 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MeshBuilderTokens);
        RealityKitStage = realityio::getRealityKitStageMetadata<BOOL>((uint64_t *)&v688, (_QWORD *)v232 + 14, (pxrInternal__aapl__pxrReserved__::VtValue *)&v746);
        pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v688);
        v234 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)buf[0].__end_;
        if (buf[0].__end_)
        {
          v235 = buf[0].__end_ + 2;
          do
          {
            v236 = __ldxr(v235);
            v237 = v236 - 1;
          }
          while (__stlxr(v237, v235));
          if (!v237)
            v234 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *))(*(_QWORD *)v234 + 8))(v234);
        }
        v749 = 0;
        pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v234);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
        {
          if (*(_BYTE *)(a2[5]->__shared_weak_owners_ + 272))
          {
            realityio::createGeomModelDescriptorWithPrimitivePrim((realityio *)&v739, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)0x40, 64, 32, 64, (uint64_t *)buf);
            v246 = (unsigned int *)v749;
            if (v749 != buf[0].__begin_)
            {
              v749 = buf[0].__begin_;
              buf[0].__begin_ = v246;
            }
            realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(buf);
            goto LABEL_644;
          }
          IsValid = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v739);
          if (!(_DWORD)IsValid)
            goto LABEL_643;
          pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(IsValid);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if (!(_DWORD)IsA)
            goto LABEL_643;
          pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(IsA);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          v249 = (pxrInternal__aapl__pxrReserved__::UsdGeomCube *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if ((_DWORD)v249)
          {
            v250 = (unsigned int **)atomic_load(&realityio::tokens::SphereMeshBuilderTokens);
            if (!v250)
              v250 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::SphereMeshBuilderTokens);
            realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v739, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v250 + 1), (uint64_t)buf);
            if (!LOBYTE(buf[0].__begin_) && SHIBYTE(buf[1].__end_cap_.__value_) < 0)
              operator delete(buf[1].__begin_);
            REGeomBuildSphereDefaultOptions();
            SphereDescriptor = REMeshAssetCreateSphereDescriptor();
            goto LABEL_644;
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(v249);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          v357 = (pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if ((_DWORD)v357)
          {
            v358 = (unsigned int **)atomic_load(&realityio::tokens::CubeMeshBuilderTokens);
            if (!v358)
              v358 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CubeMeshBuilderTokens);
            realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v739, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v358 + 1), (uint64_t)buf);
            if (LOBYTE(buf[0].__begin_))
            {
              v359 = *(float *)&buf[0].__end_;
            }
            else
            {
              v359 = 2.0;
              if (SHIBYTE(buf[1].__end_cap_.__value_) < 0)
                operator delete(buf[1].__begin_);
            }
            memset(buf, 0, 28);
            REGeomBuildBoxDefaultOptions();
            *((float *)&buf[0].__end_ + 1) = v359;
            *(float *)&buf[0].__end_cap_.__value_ = v359;
            *((float *)&buf[0].__end_cap_.__value_ + 1) = v359;
            *(_OWORD *)v765 = *(_OWORD *)&buf[0].__begin_;
            *(_OWORD *)&v765[12] = *(_OWORD *)((char *)&buf[0].__end_ + 4);
            SphereDescriptor = REMeshAssetCreateBoxDescriptor();
            goto LABEL_644;
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType(v357);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          v360 = (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if ((_DWORD)v360)
          {
            v361 = (unsigned int **)atomic_load(&realityio::tokens::CylinderMeshBuilderTokens);
            if (!v361)
              v361 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CylinderMeshBuilderTokens);
            realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v739, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v361 + 3), (uint64_t)buf);
            if (LOBYTE(buf[0].__begin_))
            {
              v362 = *(float *)&buf[0].__end_;
            }
            else
            {
              v362 = 1.0;
              if (SHIBYTE(buf[1].__end_cap_.__value_) < 0)
                operator delete(buf[1].__begin_);
            }
            v409 = (unsigned int **)atomic_load(&realityio::tokens::CylinderMeshBuilderTokens);
            if (!v409)
              v409 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CylinderMeshBuilderTokens);
            realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v739, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v409 + 2), (uint64_t)buf);
            if (LOBYTE(buf[0].__begin_))
            {
              v410 = *(float *)&buf[0].__end_;
            }
            else
            {
              v410 = 2.0;
              if (SHIBYTE(buf[1].__end_cap_.__value_) < 0)
                operator delete(buf[1].__begin_);
            }
            memset(buf, 0, 24);
            REGeomBuildCylinderDefaultOptions();
            *((float *)&buf[0].__end_ + 1) = v362;
            *(float *)&buf[0].__end_ = v362;
            *((float *)&buf[0].__begin_ + 1) = v410;
            strcpy((char *)buf, "@");
            *(std::vector<unsigned int> *)v765 = buf[0];
            SphereDescriptor = REMeshAssetCreateCylinderDescriptor();
            goto LABEL_644;
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(v360);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
          {
            v363 = (unsigned int **)atomic_load(&realityio::tokens::CapsuleMeshBuilderTokens);
            if (!v363)
              v363 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CapsuleMeshBuilderTokens);
            LODWORD(buf[0].__begin_) = 1056964608;
            AttributeValueWithDefault = realityio::getAttributeValueWithDefaultValue<float>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v363 + 3), (float *)buf, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v739);
            v365 = (unsigned int **)atomic_load(&realityio::tokens::CapsuleMeshBuilderTokens);
            if (!v365)
              v365 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CapsuleMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CapsuleMeshBuilderTokens);
            LODWORD(buf[0].__begin_) = 1065353216;
            v366 = realityio::getAttributeValueWithDefaultValue<float>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v365 + 2), (float *)buf, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v739);
            memset(buf, 0, 20);
            REGeomBuildCapsuleDefaultOptions();
            *(float *)&v367 = v366 + AttributeValueWithDefault * 2.0;
            buf[0].__end_ = (std::vector<unsigned int>::pointer)__PAIR64__(v367, LODWORD(AttributeValueWithDefault));
            strcpy((char *)buf, "@");
            strcpy((char *)&buf[0].__begin_ + 4, " ");
            *(_DWORD *)&v765[16] = buf[0].__end_cap_.__value_;
            *(_OWORD *)v765 = *(_OWORD *)&buf[0].__begin_;
            SphereDescriptor = REMeshAssetCreateCapsuleDescriptor();
            goto LABEL_644;
          }
          if (!pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCone>((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)&v739))
          {
LABEL_643:
            SphereDescriptor = 0;
            goto LABEL_644;
          }
          v368 = (unsigned int **)atomic_load(&realityio::tokens::ConeMeshBuilderTokens);
          if (!v368)
            v368 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ConeMeshBuilderTokens);
          LODWORD(buf[0].__begin_) = 1065353216;
          realityio::getAttributeValueWithDefaultValue<float>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v368 + 3), (float *)buf, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v739);
          v369 = (unsigned int **)atomic_load(&realityio::tokens::ConeMeshBuilderTokens);
          if (!v369)
            v369 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ConeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::ConeMeshBuilderTokens);
          LODWORD(buf[0].__begin_) = 0x40000000;
          realityio::getAttributeValueWithDefaultValue<float>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v369 + 2), (float *)buf, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v739);
          REGeomBuildConeDefaultOptions();
          SphereDescriptor = REMeshAssetCreateConeDescriptor();
LABEL_644:
          v356 = v749;
          if ((unint64_t)v749 | SphereDescriptor)
            goto LABEL_645;
          SphereDescriptor = 0;
LABEL_683:
          v218 = 5;
          v135 = -1;
          goto LABEL_694;
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v759.__r_.__value_.__r.__words[0] = v646;
        realityio::createModelDescriptorFromUsdGeomMesh((realityio *)&v759, (const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&begin, (const pxrInternal__aapl__pxrReserved__::TfToken *)1, RealityKitStage, v647 != 0, (uint64_t *)buf);
        v238 = (unsigned int *)v749;
        if (v749 != buf[0].__begin_)
        {
          v749 = buf[0].__begin_;
          buf[0].__begin_ = v238;
        }
        realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(buf);
        if (!v749)
        {
          MEMORY[0x2348B1AF8](&v759);
          goto LABEL_683;
        }
        v687 = v749;
        RERetain();
        v239 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
        v240 = v698;
        AttributeCount = (realityio *)REGeomModelDescriptorGetAttributeCount();
        v243 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v240[7];
        v242 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v240[8];
        if (((v242 - v243) >> 5) + (unint64_t)AttributeCount <= 0xC8)
        {
          if (v243 != v242)
          {
            v251 = 0;
            do
            {
              pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v239, v243);
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *(_QWORD *)v765 = MEMORY[0x24BEE9DA8] + 16;
              if (*(_QWORD *)&v765[8] && (*(_BYTE *)(*(_QWORD *)&v765[8] + 57) & 8) == 0 && v649(v765))
              {
                pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetInbetweens((pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)v765);
                v252 = v776;
                *(_QWORD *)&v761 = &v776;
                std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v761);
                if (*((_QWORD *)&v252 + 1) != (_QWORD)v252)
                {
                  p_end_cap = (unint64_t)*(id *)(realityio::logObjects(v253) + 24);
                  if (os_log_type_enabled((os_log_t)p_end_cap, OS_LOG_TYPE_DEFAULT))
                  {
                    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, &v761);
                    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v761);
                    LODWORD(v776) = 136315138;
                    *(_QWORD *)((char *)&v776 + 4) = Text;
                    _os_log_impl(&dword_22FF26000, (os_log_t)p_end_cap, OS_LOG_TYPE_DEFAULT, "USD blend shape inbetweens on: \"%s\" are not currently supported by RealityIO.", (uint8_t *)&v776, 0xCu);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v761);
                  }

                }
                v770.__r_.__value_.__r.__words[0] = (std::string::size_type)v687;
                if (v687)
                  RERetain();
                LOBYTE(v73) = realityio::addAttributeFromUsdSkelBlendShape((uint64_t *)&v770, (uint64_t)v243 + 8, (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)v765);
                v255 = (realityio *)realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v770);
                if ((v73 & 1) != 0)
                {
                  v251 = 1;
                }
                else
                {
                  p_end_cap = (unint64_t)*(id *)(realityio::logObjects(v255) + 24);
                  if (os_log_type_enabled((os_log_t)p_end_cap, OS_LOG_TYPE_DEFAULT))
                  {
                    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, &v761);
                    v256 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v761);
                    LODWORD(v776) = 136315138;
                    *(_QWORD *)((char *)&v776 + 4) = v256;
                    _os_log_impl(&dword_22FF26000, (os_log_t)p_end_cap, OS_LOG_TYPE_DEFAULT, "Could not ingest blend shape \"%s\"", (uint8_t *)&v776, 0xCu);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v761);
                  }

                }
              }
              MEMORY[0x2348B2188](v765);
              if (((uint64_t)buf[1].__begin_ & 7) != 0)
              {
                v257 = (unsigned int *)((unint64_t)buf[1].__begin_ & 0xFFFFFFFFFFFFFFF8);
                do
                  v258 = __ldxr(v257);
                while (__stlxr(v258 - 2, v257));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf[0].__end_cap_);
              if (buf[0].__end_)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)buf[0].__end_);
              v243 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v243 + 32);
            }
            while (v243 != v242);
            realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v687);
            if ((v251 & 1) != 0)
            {
              v259 = v701;
              if (v701 >= v702)
              {
                v260 = std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::UsdPrim const&>(&v700, (uint64_t)&v739);
              }
              else
              {
                std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::UsdShadeOutput,pxrInternal__aapl__pxrReserved__::UsdShadeOutput&>((uint64_t)&v702, v701, (uint64_t)&v739);
                v260 = v259 + 32;
              }
              v701 = v260;
              v645 = 1;
            }
            goto LABEL_383;
          }
        }
        else
        {
          v244 = *(NSObject **)(realityio::logObjects(AttributeCount) + 24);
          if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
          {
            v245 = (uint64_t)(v240[8] - v240[7]) >> 5;
            LODWORD(buf[0].__begin_) = 134217984;
            *(std::vector<unsigned int>::pointer *)((char *)&buf[0].__begin_ + 4) = (std::vector<unsigned int>::pointer)v245;
            _os_log_impl(&dword_22FF26000, v244, OS_LOG_TYPE_DEFAULT, "Skipping %zu blend shape paths to avoid exceeding attribute limit", (uint8_t *)buf, 0xCu);
          }
        }
        realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v687);
LABEL_383:
        v757 = 0;
        v758 = 0;
        v756 = &v757;
        v761 = 0u;
        v762 = 0u;
        v763.i32[0] = 1065353216;
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)buf, (uint64_t *)&v759.__r_.__value_.__l.__size_, &v759.__r_.__value_.__r.__words[2]);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes((pxrInternal__aapl__pxrReserved__::UsdPrim *)buf);
        if (((uint64_t)buf[1].__begin_ & 7) != 0)
        {
          v261 = (unsigned int *)((unint64_t)buf[1].__begin_ & 0xFFFFFFFFFFFFFFF8);
          do
            v262 = __ldxr(v261);
          while (__stlxr(v262 - 2, v261));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf[0].__end_cap_);
        if (buf[0].__end_)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)buf[0].__end_);
        v263 = v754;
        v264 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v753;
        v666 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v753;
        while (v263 != v264)
        {
          v263 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v263 - 32);
          v73 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v263);
          if ((v73 & 7) != 0)
          {
            v265 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
            do
              v266 = __ldxr(v265);
            while (__stxr(v266 + 2, v265));
            if ((v266 & 1) == 0)
              v73 &= 0xFFFFFFFFFFFFFFF8;
          }
          *(_QWORD *)v765 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v263);
          buf[0].__begin_ = (std::vector<unsigned int>::pointer)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v765);
          if (!atomic_load(MEMORY[0x24BEE82A0]))
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
          if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
          {
            if (!atomic_load(MEMORY[0x24BEE82A0]))
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
            if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
            {
              if (!atomic_load(MEMORY[0x24BEE82A0]))
                pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
              if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0
                && (isTexCoord3(v263) & 1) == 0)
              {
                *(_QWORD *)v765 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v263);
                buf[0].__begin_ = (std::vector<unsigned int>::pointer)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v765);
                if (!atomic_load(MEMORY[0x24BEE82A0]))
                  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
                if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
                {
                  if (!atomic_load(MEMORY[0x24BEE82A0]))
                    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
                  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
                  {
                    if (!atomic_load(MEMORY[0x24BEE82A0]))
                      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x24BEE82A0]);
                    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
                    {
                      if ((v73 & 7) == 0)
                        goto LABEL_507;
LABEL_505:
                      v309 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
                      do
                        v310 = __ldxr(v309);
                      while (__stlxr(v310 - 2, v309));
                      goto LABEL_507;
                    }
                  }
                }
              }
            }
          }
          v273 = isTexCoord3(v263);
          v686 = v73;
          if ((v73 & 7) != 0)
          {
            v274 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
            do
              v275 = __ldxr(v274);
            while (__stxr(v275 + 2, v274));
            if ((v275 & 1) == 0)
              v686 &= 0xFFFFFFFFFFFFFFF8;
          }
          realityio::TexcoordID::TexcoordID((uint64_t)buf, &v686, -1, v273);
          if ((v686 & 7) != 0)
          {
            v276 = (unsigned int *)(v686 & 0xFFFFFFFFFFFFFFF8);
            do
              v277 = __ldxr(v276);
            while (__stlxr(v277 - 2, v276));
          }
          v278 = (uint64_t **)std::__tree<realityio::TexcoordID>::__find_equal<realityio::TexcoordID>((uint64_t)&v756, &v776, (realityio::TexcoordID *)buf);
          if (!*v278)
          {
            *(_QWORD *)v765 = operator new(0x50uLL);
            *(_QWORD *)&v765[8] = &v757;
            v765[16] = 0;
            realityio::TexcoordID::TexcoordID(*(_QWORD *)v765 + 32, (uint64_t)buf);
            v765[16] = 1;
            v279 = v776;
            v280 = *(uint64_t **)v765;
            **(_QWORD **)v765 = 0;
            v280[1] = 0;
            v280[2] = v279;
            *v278 = v280;
            if (*(_QWORD *)v756)
            {
              v756 = *(void **)v756;
              v280 = *v278;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v757, v280);
            ++v758;
            *(_QWORD *)v765 = 0;
            std::unique_ptr<std::__tree_node<realityio::TexcoordID,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TexcoordID,void *>>>>::reset[abi:ne180100]((uint64_t)v765, 0);
          }
          begin_high = HIDWORD(buf[0].__begin_);
          if (HIDWORD(buf[0].__begin_) != -1)
          {
            v282 = *((_QWORD *)&v761 + 1);
            if (*((_QWORD *)&v761 + 1))
            {
              v283 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v761 + 8));
              v283.i16[0] = vaddlv_u8(v283);
              if (v283.u32[0] > 1uLL)
              {
                p_end_cap = SHIDWORD(buf[0].__begin_);
                if (*((_QWORD *)&v761 + 1) <= (unint64_t)SHIDWORD(buf[0].__begin_))
                  p_end_cap = (unint64_t)SHIDWORD(buf[0].__begin_) % *((_QWORD *)&v761 + 1);
              }
              else
              {
                p_end_cap = (*((_QWORD *)&v761 + 1) - 1) & SHIDWORD(buf[0].__begin_);
              }
              v284 = *(uint64_t ***)(v761 + 8 * p_end_cap);
              if (v284)
              {
                for (i = *v284; i; i = (uint64_t *)*i)
                {
                  v286 = i[1];
                  if (v286 == SHIDWORD(buf[0].__begin_))
                  {
                    if (*((_DWORD *)i + 4) == HIDWORD(buf[0].__begin_))
                      goto LABEL_499;
                  }
                  else
                  {
                    if (v283.u32[0] > 1uLL)
                    {
                      if (v286 >= *((_QWORD *)&v761 + 1))
                        v286 %= *((_QWORD *)&v761 + 1);
                    }
                    else
                    {
                      v286 &= *((_QWORD *)&v761 + 1) - 1;
                    }
                    if (v286 != p_end_cap)
                      break;
                  }
                }
              }
            }
            v287 = operator new(0x18uLL);
            *v287 = 0;
            v287[1] = begin_high;
            *((_DWORD *)v287 + 4) = begin_high;
            v288 = (float)(unint64_t)(*((_QWORD *)&v762 + 1) + 1);
            if (!v282 || (float)(*(float *)v763.i32 * (float)v282) < v288)
            {
              v289 = (v282 & (v282 - 1)) != 0;
              if (v282 < 3)
                v289 = 1;
              v290 = v289 | (2 * v282);
              v291 = vcvtps_u32_f32(v288 / *(float *)v763.i32);
              if (v290 <= v291)
                prime = (int8x8_t)v291;
              else
                prime = (int8x8_t)v290;
              if (*(_QWORD *)&prime == 1)
              {
                prime = (int8x8_t)2;
              }
              else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
              {
                prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                v282 = *((_QWORD *)&v761 + 1);
              }
              if (*(_QWORD *)&prime <= v282)
              {
                if (*(_QWORD *)&prime < v282)
                {
                  v299 = vcvtps_u32_f32((float)*((unint64_t *)&v762 + 1) / *(float *)v763.i32);
                  if (v282 < 3
                    || (v300 = (uint8x8_t)vcnt_s8((int8x8_t)v282), v300.i16[0] = vaddlv_u8(v300), v300.u32[0] > 1uLL))
                  {
                    v299 = std::__next_prime(v299);
                  }
                  else
                  {
                    v301 = 1 << -(char)__clz(v299 - 1);
                    if (v299 >= 2)
                      v299 = v301;
                  }
                  if (*(_QWORD *)&prime <= v299)
                    prime = (int8x8_t)v299;
                  if (*(_QWORD *)&prime >= v282)
                  {
                    v282 = *((_QWORD *)&v761 + 1);
                  }
                  else
                  {
                    if (prime)
                      goto LABEL_455;
                    v311 = (void *)v761;
                    *(_QWORD *)&v761 = 0;
                    if (v311)
                      operator delete(v311);
                    v282 = 0;
                    *((_QWORD *)&v761 + 1) = 0;
                  }
                }
              }
              else
              {
LABEL_455:
                if (*(_QWORD *)&prime >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v293 = operator new(8 * *(_QWORD *)&prime);
                v294 = (void *)v761;
                *(_QWORD *)&v761 = v293;
                if (v294)
                  operator delete(v294);
                v295 = 0;
                *((int8x8_t *)&v761 + 1) = prime;
                do
                  *(_QWORD *)(v761 + 8 * v295++) = 0;
                while (*(_QWORD *)&prime != v295);
                v296 = (_QWORD **)v762;
                if ((_QWORD)v762)
                {
                  v297 = *(_QWORD *)(v762 + 8);
                  v298 = (uint8x8_t)vcnt_s8(prime);
                  v298.i16[0] = vaddlv_u8(v298);
                  if (v298.u32[0] > 1uLL)
                  {
                    if (v297 >= *(_QWORD *)&prime)
                      v297 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v297 &= *(_QWORD *)&prime - 1;
                  }
                  *(_QWORD *)(v761 + 8 * v297) = &v762;
                  for (j = *v296; j; v297 = v303)
                  {
                    v303 = j[1];
                    if (v298.u32[0] > 1uLL)
                    {
                      if (v303 >= *(_QWORD *)&prime)
                        v303 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v303 &= *(_QWORD *)&prime - 1;
                    }
                    if (v303 != v297)
                    {
                      if (!*(_QWORD *)(v761 + 8 * v303))
                      {
                        *(_QWORD *)(v761 + 8 * v303) = v296;
                        goto LABEL_480;
                      }
                      *v296 = (_QWORD *)*j;
                      *j = **(_QWORD **)(v761 + 8 * v303);
                      **(_QWORD **)(v761 + 8 * v303) = j;
                      j = v296;
                    }
                    v303 = v297;
LABEL_480:
                    v296 = (_QWORD **)j;
                    j = (_QWORD *)*j;
                  }
                }
                v282 = (unint64_t)prime;
              }
              if ((v282 & (v282 - 1)) != 0)
              {
                if (v282 <= begin_high)
                  p_end_cap = begin_high % v282;
                else
                  p_end_cap = begin_high;
              }
              else
              {
                p_end_cap = (v282 - 1) & begin_high;
              }
            }
            v304 = v761;
            v305 = *(_QWORD **)(v761 + 8 * p_end_cap);
            if (v305)
            {
              *v287 = *v305;
              goto LABEL_497;
            }
            *v287 = v762;
            *(_QWORD *)&v762 = v287;
            *(_QWORD *)(v304 + 8 * p_end_cap) = &v762;
            if (*v287)
            {
              v306 = *(_QWORD *)(*v287 + 8);
              if ((v282 & (v282 - 1)) != 0)
              {
                if (v306 >= v282)
                  v306 %= v282;
              }
              else
              {
                v306 &= v282 - 1;
              }
              v305 = (_QWORD *)(v761 + 8 * v306);
LABEL_497:
              *v305 = v287;
            }
            ++*((_QWORD *)&v762 + 1);
          }
LABEL_499:
          if (SHIBYTE(buf[1].__end_) < 0)
            operator delete(buf[0].__end_cap_.__value_);
          if (((uint64_t)buf[0].__end_ & 7) != 0)
          {
            v307 = (unsigned int *)((unint64_t)buf[0].__end_ & 0xFFFFFFFFFFFFFFF8);
            do
              v308 = __ldxr(v307);
            while (__stlxr(v308 - 2, v307));
          }
          if ((v73 & 7) != 0)
            goto LABEL_505;
LABEL_507:
          v264 = v666;
        }
        v312 = 0;
        memset(buf, 0, sizeof(buf));
        v313 = 1;
        *(_DWORD *)v765 = 0;
        do
        {
          v314 = v313;
          if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v761, *((unint64_t *)&v761 + 1), v312))std::deque<int>::push_back(buf, v765);
          v313 = 0;
          *(_DWORD *)v765 = v312 + 1;
          v312 = 1;
        }
        while ((v314 & 1) != 0);
        v766 = 0u;
        memset(v765, 0, sizeof(v765));
        v315 = 3;
        LODWORD(v776) = 2;
        do
        {
          if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v761, *((unint64_t *)&v761 + 1), v315 - 1))std::deque<int>::push_back(v765, &v776);
          LODWORD(v776) = v315++;
        }
        while (v315 != 7);
        v316 = v756;
        if (v756 != &v757)
        {
          do
          {
            realityio::TexcoordID::TexcoordID((uint64_t)&v776, (uint64_t)v316 + 32);
            LODWORD(v317) = DWORD1(v776);
            if (DWORD1(v776) != -1)
              goto LABEL_553;
            _ZF = v777[24] || buf[1].__end_cap_.__value_ == 0;
            if (_ZF)
            {
              if (v766.i64[1])
              {
                realityio::TexcoordID::setIndex((realityio::TexcoordID *)&v776, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v765[8]+ (((unint64_t)v766.i64[0] >> 7) & 0x1FFFFFFFFFFFFF8))+ 4 * (v766.i16[0] & 0x3FF)));
                v766 = vaddq_s64(v766, (int64x2_t)xmmword_230208240);
                if (v766.i64[0] >= 0x800uLL)
                {
                  operator delete(**(void ***)&v765[8]);
                  *(_QWORD *)&v765[8] += 8;
                  v766.i64[0] -= 1024;
                }
              }
              else
              {
                v319 = *(id *)(realityio::logObjects((realityio *)DWORD1(v776)) + 24);
                if (os_log_type_enabled(v319, OS_LOG_TYPE_DEFAULT))
                {
                  v320 = *((_QWORD *)&v776 + 1);
                  if ((BYTE8(v776) & 7) != 0)
                  {
                    v321 = (unsigned int *)(*((_QWORD *)&v776 + 1) & 0xFFFFFFFFFFFFFFF8);
                    do
                      v322 = __ldxr(v321);
                    while (__stxr(v322 + 2, v321));
                    if ((v322 & 1) == 0)
                      v320 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  v323 = v320 & 0xFFFFFFFFFFFFFFF8;
                  if ((v320 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    v324 = (const char *)(v323 + 16);
                    if (*(char *)(v323 + 39) < 0)
                      v324 = *(const char **)v324;
                  }
                  else
                  {
                    v324 = "";
                  }
                  LODWORD(v770.__r_.__value_.__l.__data_) = 136316162;
                  *(std::string::size_type *)((char *)v770.__r_.__value_.__r.__words + 4) = (std::string::size_type)v324;
                  WORD2(v770.__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&v770.__r_.__value_.__r.__words[1] + 6) = 6 - LODWORD(buf[1].__end_cap_.__value_);
                  WORD1(v770.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v770.__r_.__value_.__r.__words[2]) = 2;
                  LOWORD(v771) = 1024;
                  *(_DWORD *)((char *)&v771 + 2) = 6 - v766.i32[2];
                  HIWORD(v771) = 1024;
                  v772 = 6;
                  _os_log_impl(&dword_22FF26000, v319, OS_LOG_TYPE_DEFAULT, "Could not allocate a material buffer for '%s'. %d of %d float2 and %d of %d float4 buffers have been assigned already.", (uint8_t *)&v770, 0x24u);
                  if ((v320 & 7) != 0)
                  {
                    do
                      v325 = __ldxr((unsigned int *)v323);
                    while (__stlxr(v325 - 2, (unsigned int *)v323));
                  }
                }

              }
            }
            else
            {
              realityio::TexcoordID::setIndex((realityio::TexcoordID *)&v776, *(_DWORD *)(*(_QWORD *)((char *)buf[0].__end_+ (((unint64_t)buf[1].__end_ >> 7) & 0x1FFFFFFFFFFFFF8))+ 4 * ((uint64_t)buf[1].__end_ & 0x3FF)));
              *(int64x2_t *)&buf[1].__end_ = vaddq_s64(*(int64x2_t *)&buf[1].__end_, (int64x2_t)xmmword_230208240);
              if (buf[1].__end_ >= (std::vector<unsigned int>::pointer)0x800)
              {
                operator delete(*(void **)buf[0].__end_);
                buf[0].__end_ += 2;
                buf[1].__end_ -= 256;
              }
            }
            v317 = DWORD1(v776);
            if (DWORD1(v776) != -1)
            {
LABEL_553:
              std::to_string(&__str, v317);
              v326 = std::string::insert(&__str, 0, "UV");
              v327 = *(_OWORD *)&v326->__r_.__value_.__l.__data_;
              v770.__r_.__value_.__r.__words[2] = v326->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v770.__r_.__value_.__l.__data_ = v327;
              v326->__r_.__value_.__l.__size_ = 0;
              v326->__r_.__value_.__r.__words[2] = 0;
              v326->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v328 = *((_QWORD *)&v776 + 1);
              if ((BYTE8(v776) & 7) != 0)
              {
                v329 = (unsigned int *)(*((_QWORD *)&v776 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v330 = __ldxr(v329);
                while (__stxr(v330 + 2, v329));
                if ((v330 & 1) == 0)
                  v328 &= 0xFFFFFFFFFFFFFFF8;
              }
              v331 = (unsigned int *)(v328 & 0xFFFFFFFFFFFFFFF8);
              v317 = REGeomModelDescriptorAddAttributeAlias();
              if ((v328 & 7) != 0)
              {
                do
                  v332 = __ldxr(v331);
                while (__stlxr(v332 - 2, v331));
              }
              if (SHIBYTE(v770.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v770.__r_.__value_.__l.__data_);
            }
            v333 = *((_QWORD *)&v776 + 1);
            if ((BYTE8(v776) & 7) != 0)
            {
              v334 = (unsigned int *)(*((_QWORD *)&v776 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v335 = __ldxr(v334);
              while (__stxr(v335 + 2, v334));
              if ((v335 & 1) == 0)
                v333 &= 0xFFFFFFFFFFFFFFF8;
            }
            v336 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFFFF8);
            if ((v333 & 0xFFFFFFFFFFFFFFF8) != 0)
              v337 = (uint64_t)(v336 + 4);
            else
              v337 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v317);
            v338 = *(unsigned __int8 *)(v337 + 23);
            v339 = (char)v338;
            if ((v338 & 0x80u) != 0)
              v338 = *(_QWORD *)(v337 + 8);
            if (v338 >= 9)
            {
              if (v339 < 0)
                v337 = *(_QWORD *)v337;
              v337 = strncmp((const char *)v337, "primvars:", 9uLL);
              v340 = v337 == 0;
            }
            else
            {
              v340 = 0;
            }
            if ((v333 & 7) != 0)
            {
              do
                v341 = __ldxr(v336);
              while (__stlxr(v341 - 2, v336));
            }
            if (v340)
            {
              v342 = *((_QWORD *)&v776 + 1);
              if ((BYTE8(v776) & 7) != 0)
              {
                v343 = (unsigned int *)(*((_QWORD *)&v776 + 1) & 0xFFFFFFFFFFFFFFF8);
                do
                  v344 = __ldxr(v343);
                while (__stxr(v344 + 2, v343));
                if ((v344 & 1) == 0)
                  v342 &= 0xFFFFFFFFFFFFFFF8;
              }
              v345 = (unsigned int *)(v342 & 0xFFFFFFFFFFFFFFF8);
              if ((v342 & 0xFFFFFFFFFFFFFFF8) == 0)
                pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v337);
              pxrInternal__aapl__pxrReserved__::TfStringGetSuffix();
              if ((v342 & 7) != 0)
              {
                do
                  v346 = __ldxr(v345);
                while (__stlxr(v346 - 2, v345));
              }
              if (REGeomModelDescriptorGetAttributeIndex() == -1)
              {
                v347 = *((_QWORD *)&v776 + 1);
                if ((BYTE8(v776) & 7) != 0)
                {
                  v348 = (unsigned int *)(*((_QWORD *)&v776 + 1) & 0xFFFFFFFFFFFFFFF8);
                  do
                    v349 = __ldxr(v348);
                  while (__stxr(v349 + 2, v348));
                  if ((v349 & 1) == 0)
                    v347 &= 0xFFFFFFFFFFFFFFF8;
                }
                v350 = (unsigned int *)(v347 & 0xFFFFFFFFFFFFFFF8);
                REGeomModelDescriptorAddAttributeAlias();
                if ((v347 & 7) != 0)
                {
                  do
                    v351 = __ldxr(v350);
                  while (__stlxr(v351 - 2, v350));
                }
              }
              if (SHIBYTE(v770.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v770.__r_.__value_.__l.__data_);
            }
            if ((v777[23] & 0x80000000) != 0)
              operator delete(*(void **)v777);
            if ((BYTE8(v776) & 7) != 0)
            {
              v352 = (unsigned int *)(*((_QWORD *)&v776 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v353 = __ldxr(v352);
              while (__stlxr(v353 - 2, v352));
            }
            v354 = (void **)*((_QWORD *)v316 + 1);
            if (v354)
            {
              do
              {
                v355 = v354;
                v354 = (void **)*v354;
              }
              while (v354);
            }
            else
            {
              do
              {
                v355 = (void **)*((_QWORD *)v316 + 2);
                _ZF = *v355 == v316;
                v316 = v355;
              }
              while (!_ZF);
            }
            v316 = v355;
          }
          while (v355 != &v757);
        }
        std::deque<int>::~deque[abi:ne180100]((uint64_t)v765);
        std::deque<int>::~deque[abi:ne180100]((uint64_t)buf);
        buf[0].__begin_ = (std::vector<unsigned int>::pointer)&v753;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v761);
        std::__tree<realityio::TexcoordID>::destroy((uint64_t)&v756, v757);
        MEMORY[0x2348B1AF8](&v759);
        v356 = v749;
LABEL_645:
        if (v356)
        {
          v135 = REMeshAssetDescriptorAddModel();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v765, &v696);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v765[4], &v697);
          *(_DWORD *)&v765[8] = v135;
          v370 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v715, &v776, (pxrInternal__aapl__pxrReserved__::SdfPath *)v765);
          if (!*v370)
          {
            v73 = (uint64_t)operator new(0x28uLL);
            buf[0].__end_ = (std::vector<unsigned int>::pointer)&v716;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v73 + 28), v765);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v73 + 32), &v765[4]);
            *(_DWORD *)(v73 + 36) = *(_DWORD *)&v765[8];
            LOBYTE(buf[0].__end_cap_.__value_) = 1;
            v371 = v776;
            *(_QWORD *)v73 = 0;
            *(_QWORD *)(v73 + 8) = 0;
            *(_QWORD *)(v73 + 16) = v371;
            *v370 = v73;
            if (*v715)
            {
              v715 = (uint64_t **)*v715;
              v73 = *v370;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v716, (uint64_t *)v73);
            ++v717;
            buf[0].__begin_ = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,void *>>>>::reset[abi:ne180100]((uint64_t)buf, 0);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v765);
          v685 = v749;
          if (v749)
            RERetain();
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v739, buf);
          v372 = (_QWORD *)v706[0];
          if (!v706[0])
            goto LABEL_662;
          v373 = v706;
          do
          {
            v374 = v373;
            v375 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v372 + 4);
            v376 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v372 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
            v377 = v372 + 1;
            if (!v376)
            {
              v377 = v372;
              v373 = v372;
            }
            v372 = (_QWORD *)*v377;
          }
          while (*v377);
          if (v373 == v706
            || (!v376 ? (v378 = v375) : (v378 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v374 + 4)),
                pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)buf, v378)))
          {
LABEL_662:
            v373 = v706;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
          LODWORD(v770.__r_.__value_.__l.__data_) = *((_DWORD *)v373 + 15);
          v380 = v373[8];
          v379 = v373[9];
          v381 = v379 - v380;
          if (v379 == v380)
          {
            v392 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)REGeomModelDescriptorSetMaterialAssignmentForModel();
            pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v392);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) == 0)
            {
              FaceCount = REGeomModelDescriptorGetFaceCount();
              std::vector<unsigned int>::vector(buf, FaceCount, (const std::vector<unsigned int>::value_type *)&v770);
              REGeomModelDescriptorSetMaterialAssignmentsPerFace();
              v391 = buf[0].__begin_;
              if (buf[0].__begin_)
              {
                buf[0].__end_ = buf[0].__begin_;
LABEL_688:
                operator delete(v391);
              }
            }
          }
          else
          {
            v382 = REGeomModelDescriptorGetFaceCount();
            std::vector<unsigned int>::vector((std::vector<unsigned int> *)&v776, v382, (const std::vector<unsigned int>::value_type *)&v770);
            v383 = 0;
            if ((unint64_t)(v381 / 24) <= 1)
              v73 = 1;
            else
              v73 = v381 / 24;
            do
            {
              pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)(v373[8] + 24 * v383));
              realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)v765, (uint64_t)buf);
              if (LOBYTE(buf[0].__begin_))
              {
                v384 = *(_DWORD *)(v373[11] + 4 * v383);
                if (v384 != -1)
                {
                  pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&buf[0].__end_);
                  v385 = buf[1].__end_cap_.__value_;
                  pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&buf[0].__end_);
                  v386 = &buf[1].__end_cap_.__value_[(uint64_t)buf[0].__end_];
                  if (v385 != v386)
                  {
                    v387 = v776;
                    do
                    {
                      v388 = (int)*v385;
                      if (v388 < v382)
                        *(_DWORD *)(v387 + 4 * v388) = v384;
                      ++v385;
                    }
                    while (v385 != v386);
                  }
                }
              }
              realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)buf);
              if ((v765[24] & 7) != 0)
              {
                v389 = (unsigned int *)(*(_QWORD *)&v765[24] & 0xFFFFFFFFFFFFFFF8);
                do
                  v390 = __ldxr(v389);
                while (__stlxr(v390 - 2, v389));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v765[16]);
              if (*(_QWORD *)&v765[8])
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v765[8]);
              ++v383;
            }
            while (v383 != v73);
            REGeomModelDescriptorSetMaterialAssignmentsPerFace();
            v391 = (std::vector<unsigned int>::pointer)v776;
            if ((_QWORD)v776)
            {
              *((_QWORD *)&v776 + 1) = v776;
              goto LABEL_688;
            }
          }
          realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v685);
        }
        else
        {
          v135 = -1;
        }
        v394 = v698;
        p_end_cap = (unint64_t)(v698 + 2);
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
        {
          buf[0].__begin_ = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          v396 = (unsigned int *)v394[3];
          v395 = v394 + 3;
          v397 = buf[0].__begin_;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
          if (v396 != v397)
          {
            std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(buf, (_DWORD *)p_end_cap, v395);
            std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v709, (pxrInternal__aapl__pxrReserved__::SdfPath *)buf, buf);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf[0].__end_);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
          }
        }
        v218 = 0;
LABEL_694:
        realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v749);
        if (SHIBYTE(v690) < 0)
          operator delete((void *)v689);
        if ((begin & 7) != 0)
        {
          v398 = (unsigned int *)(begin & 0xFFFFFFFFFFFFFFF8);
          do
            v399 = __ldxr(v398);
          while (__stlxr(v399 - 2, v398));
        }
        if ((v695 & 7) != 0)
        {
          v400 = (unsigned int *)(v695 & 0xFFFFFFFFFFFFFFF8);
          do
            v401 = __ldxr(v400);
          while (__stlxr(v401 - 2, v400));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v694);
        if (v693)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v693);
        MEMORY[0x2348B20B0](&v743);
        MEMORY[0x2348B24C4](&v734);
LABEL_705:
        if ((v740 & 7) != 0)
        {
          v402 = (unsigned int *)(v740 & 0xFFFFFFFFFFFFFFF8);
          do
            v403 = __ldxr(v402);
          while (__stlxr(v403 - 2, v402));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v739.__r_.__value_.__r.__words[2]);
        if (v739.__r_.__value_.__l.__size_)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v739.__r_.__value_.__l.__size_);
        if (!v218)
        {
LABEL_179:
          if (!v656)
            v656 = *v698;
          if (v135 != -1)
          {
            p_end_cap = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
            v73 = (uint64_t)(v698 + 2);
            v136 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
            if (v136)
            {
              v137 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
              pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v137, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v73);
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v681))
                v138 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v73;
              else
                v138 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v696;
            }
            else
            {
              v138 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v696;
            }
            pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::UsdStage *)p_end_cap, v138);
            if (v136)
            {
              if ((v684 & 7) != 0)
              {
                v170 = (unsigned int *)(v684 & 0xFFFFFFFFFFFFFFF8);
                do
                  v171 = __ldxr(v170);
                while (__stlxr(v171 - 2, v170));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v683);
              if (v682)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v682);
            }
            pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v765, 1.0);
            LODWORD(v770.__r_.__value_.__l.__data_) = v739.__r_.__value_.__l.__data_;
            v770.__r_.__value_.__l.__size_ = v739.__r_.__value_.__l.__size_;
            if (v739.__r_.__value_.__l.__size_)
            {
              v172 = (unint64_t *)(v739.__r_.__value_.__l.__size_ + 48);
              do
                v173 = __ldxr(v172);
              while (__stxr(v173 + 1, v172));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v770.__r_.__value_.__r.__words[2], &v739.__r_.__value_.__r.__words[2]);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v770.__r_.__value_.__r.__words[2] + 1, (_DWORD *)&v739.__r_.__value_.__r.__words[2] + 1);
            v771 = v740;
            if ((v740 & 7) != 0)
            {
              v174 = (unsigned int *)(v740 & 0xFFFFFFFFFFFFFFF8);
              do
                v175 = __ldxr(v174);
              while (__stxr(v175 + 2, v174));
              if ((v175 & 1) == 0)
                v771 &= 0xFFFFFFFFFFFFFFF8;
            }
            while ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v770) & 1) != 0)
            {
              if (LODWORD(v770.__r_.__value_.__l.__data_) == v731
                && *(_OWORD *)&v770.__r_.__value_.__r.__words[1] == v732)
              {
                v176 = v771;
                if ((v771 & 0xFFFFFFFFFFFFFFF8) == (v733 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_277;
              }
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              v734 = MEMORY[0x24BEE9D78] + 16;
              if (v735 && (*(_BYTE *)(v735 + 57) & 8) == 0 && v672(&v734))
              {
                pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v776, 1.0);
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)buf, 1.0);
                MEMORY[0x2348B2068](&v761, &v734);
                pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation();
                v692 = (void **)&v761;
                std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](&v692);
                MEMORY[0x2348B199C](&v761, buf);
                v776 = v761;
                *(_OWORD *)v777 = v762;
                *(int64x2_t *)&v777[16] = v763;
                v778 = v764;
                v761 = *(_OWORD *)v765;
                v762 = *(_OWORD *)&v765[16];
                v763 = v766;
                v764 = v767;
                pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
                *(_OWORD *)v765 = v761;
                *(_OWORD *)&v765[16] = v762;
                v766 = v763;
                v767 = v764;
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v770, &v761);
                v177 = (realityio::tokens::MeshBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MeshBuilderTokens);
                if (!v177)
                  v177 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MeshBuilderTokens);
                realityio::MutableDirtyPropertyTable::addProperty(v671, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v761, (realityio::tokens::MeshBuilderTokens_StaticTokenType *)((char *)v177 + 88));
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v761);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v770, &v761);
                v178 = (realityio::tokens::MeshBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::MeshBuilderTokens);
                if (!v178)
                  v178 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::MeshBuilderTokens);
                realityio::MutableDirtyPropertyTable::addProperty(v671, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v761, (realityio::tokens::MeshBuilderTokens_StaticTokenType *)((char *)v178 + 96));
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v761);
              }
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v770, (uint64_t)buf);
              LODWORD(v770.__r_.__value_.__l.__data_) = buf[0].__begin_;
              v179 = buf[0].__end_;
              buf[0].__end_ = 0;
              v180 = v770.__r_.__value_.__l.__size_;
              v770.__r_.__value_.__l.__size_ = (std::string::size_type)v179;
              if (v180)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v180);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v770.__r_.__value_.__r.__words[2], (int *)&buf[0].__end_cap_);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v770.__r_.__value_.__r.__words[2] + 4);
              if ((v771 & 7) != 0)
              {
                v181 = (unsigned int *)(v771 & 0xFFFFFFFFFFFFFFF8);
                do
                  v182 = __ldxr(v181);
                while (__stlxr(v182 - 2, v181));
              }
              v771 = (unint64_t)buf[1].__begin_;
              buf[1].__begin_ = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf[0].__end_cap_);
              if (buf[0].__end_)
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)buf[0].__end_);
              MEMORY[0x2348B2080](&v734);
            }
            v176 = v771;
LABEL_277:
            v662 = *(float32x4_t *)&v765[16];
            v664 = *(float32x4_t *)v765;
            v657 = v767;
            v660 = v766;
            if ((v176 & 7) != 0)
            {
              v183 = (unsigned int *)(v176 & 0xFFFFFFFFFFFFFFF8);
              do
                v184 = __ldxr(v183);
              while (__stlxr(v184 - 2, v183));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v770.__r_.__value_.__r.__words[2]);
            v185 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v770.__r_.__value_.__l.__size_;
            if (v770.__r_.__value_.__l.__size_)
              v185 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v770.__r_.__value_.__l.__size_);
            pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v185);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            v186 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            v188 = (float32x4_t)v657;
            v188.i32[3] = 1.0;
            v189 = (float32x4_t)v660;
            v189.i32[3] = 0;
            v658 = v188;
            v661 = v189;
            v190 = v662;
            v190.i32[3] = 0;
            v663 = v190;
            v191 = v664;
            v191.i32[3] = 0;
            v665 = v191;
            if (((v653 | v186) & 1) == 0)
            {
              _Q0 = realityio::getGeomPrimitiveOrientation((realityio *)&v739, v187);
              v193 = 0;
              _S1 = _Q0.n128_u32[1];
              _S3 = _Q0.n128_u32[2];
              __asm { FMLS            S2, S3, V0.S[2] }
              _S5 = _Q0.n128_u32[3];
              __asm { FMLA            S2, S5, V0.S[3] }
              v202 = vmlas_n_f32(vmuls_lane_f32(_Q0.n128_f32[2], (float32x4_t)_Q0, 3), _Q0.n128_f32[1], _Q0.n128_f32[0]);
              v203 = vmlas_n_f32(-(float)(_Q0.n128_f32[1] * _Q0.n128_f32[3]), _Q0.n128_f32[2], _Q0.n128_f32[0]);
              HIDWORD(v204) = 0;
              LODWORD(v204) = _S2;
              *((float *)&v204 + 1) = v202 + v202;
              *((float *)&v204 + 2) = v203 + v203;
              v205 = vmlas_n_f32(-(float)(_Q0.n128_f32[2] * _Q0.n128_f32[3]), _Q0.n128_f32[1], _Q0.n128_f32[0]);
              __asm
              {
                FMLA            S4, S1, V0.S[1]
                FMLA            S4, S5, V0.S[3]
                FMLS            S4, S0, V0.S[0]
                FMLA            S6, S3, V0.S[1]
              }
              HIDWORD(v210) = 0;
              *(float *)&v210 = v205 + v205;
              DWORD1(v210) = _S4;
              *((float *)&v210 + 2) = _S6 + _S6;
              __asm
              {
                FMLA            S7, S0, V0.S[2]
                FMLA            S4, S3, V0.S[1]
                FMLA            S5, S3, V0.S[2]
                FMLS            S5, S0, V0.S[0]
                FMLS            S5, S1, V0.S[1]
              }
              _Q0.n128_f32[0] = _S7 + _S7;
              _Q0.n128_f32[1] = _S4 + _S4;
              _Q0.n128_u64[1] = _S5;
              *(_OWORD *)v765 = v204;
              *(_OWORD *)&v765[16] = v210;
              v766 = (int64x2_t)_Q0;
              v767 = xmmword_230204CF0;
              do
              {
                *(float32x4_t *)((char *)&buf[0].__begin_ + v193) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v665, COERCE_FLOAT(*(_OWORD *)&v765[v193])), v663, *(float32x2_t *)&v765[v193], 1), v661, *(float32x4_t *)&v765[v193], 2), v658, *(float32x4_t *)&v765[v193], 3);
                v193 += 16;
              }
              while (v193 != 64);
            }
            REGeomInstanceCreate();
            REMeshAssetDescriptorAddInstance();
            RERelease();
            if ((v740 & 7) != 0)
            {
              v216 = (unsigned int *)(v740 & 0xFFFFFFFFFFFFFFF8);
              do
                v217 = __ldxr(v216);
              while (__stlxr(v217 - 2, v216));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v739.__r_.__value_.__r.__words[2]);
            if (v739.__r_.__value_.__l.__size_)
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v739.__r_.__value_.__l.__size_);
          }
        }
        if ((v742 & 7) != 0)
        {
          v404 = (unsigned int *)(v742 & 0xFFFFFFFFFFFFFFF8);
          do
            v405 = __ldxr(v404);
          while (__stlxr(v405 - 2, v404));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v741.__r_.__value_.__r.__words[2]);
        if (v741.__r_.__value_.__l.__size_)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v741.__r_.__value_.__l.__size_);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        v127 = (realityio::SkeletonPoseDefinitionBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v696);
        v406 = v699;
        if (v699)
        {
          v407 = (unint64_t *)&v699->__shared_owners_;
          do
            v408 = __ldaxr(v407);
          while (__stlxr(v408 - 1, v407));
          if (!v408)
          {
            ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
            std::__shared_weak_count::__release_weak(v406);
          }
        }
        v128 = v667 + 2;
        if (v667 + 2 == (_QWORD *)v655)
          goto LABEL_733;
      }
    }
    v645 = 0;
    SphereDescriptor = 0;
LABEL_733:
    v411 = realityio::SkeletonPoseDefinitionBuilder::kOutputName(v127);
    v761 = 0uLL;
    v412 = a2[3];
    if (v412)
    {
      *((_QWORD *)&v761 + 1) = std::__shared_weak_count::lock(v412);
      if (*((_QWORD *)&v761 + 1))
        *(_QWORD *)&v761 = a2[2];
    }
    MEMORY[0x2348B2764](&v762, v411);
    v413 = (unint64_t)std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(a2[1], &v761);
    v414 = (_QWORD *)v413;
    v416 = v415;
    if ((_QWORD *)v413 != v415)
    {
      v417 = 0;
      v418 = 0;
      v419 = 0;
      while (1)
      {
        v420 = v414[5];
        v422 = *(std::mutex **)(v420 + 16);
        v421 = *(std::__shared_weak_count **)(v420 + 24);
        v770.__r_.__value_.__r.__words[0] = (std::string::size_type)v422;
        v770.__r_.__value_.__l.__size_ = (std::string::size_type)v421;
        if (v421)
        {
          v423 = (unint64_t *)&v421->__shared_owners_;
          do
            v424 = __ldxr(v423);
          while (__stxr(v424 + 1, v423));
        }
        if ((v414[7] & 0xFFFFFFFFFFFFFFF8) != 0)
          v425 = (const void **)((v414[7] & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v425 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v413);
        realityio::Outputs::getRawValue<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>(v422, v425, (uint64_t)buf);
        begin_low = LOBYTE(buf[0].__begin_);
        if (LOBYTE(buf[0].__begin_))
        {
          v427 = buf[0].__end_;
        }
        else
        {
          v776 = *(_OWORD *)&buf[0].__end_;
          if (SHIBYTE(buf[1].__end_cap_.__value_) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v777, (const std::string::value_type *)buf[1].__begin_, (std::string::size_type)buf[1].__end_);
            v427 = (std::vector<unsigned int>::pointer)v776;
            v674 = *(std::vector<unsigned int>::pointer *)v777;
            LOBYTE(v73) = v777[23];
            if (!LOBYTE(buf[0].__begin_) && SHIBYTE(buf[1].__end_cap_.__value_) < 0)
              operator delete(buf[1].__begin_);
          }
          else
          {
            *(std::vector<unsigned int> *)v777 = buf[1];
            v427 = (std::vector<unsigned int>::pointer)v776;
            v674 = buf[1].__begin_;
            LOBYTE(v73) = HIBYTE(buf[1].__end_cap_.__value_);
          }
        }
        if (!v421)
          goto LABEL_755;
        v428 = (unint64_t *)&v421->__shared_owners_;
        do
          v429 = __ldaxr(v428);
        while (__stlxr(v429 - 1, v428));
        if (!v429)
        {
          ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
          std::__shared_weak_count::__release_weak(v421);
          if (!begin_low)
          {
LABEL_767:
            if ((v73 & 0x80) != 0)
              operator delete(v674);
            goto LABEL_776;
          }
        }
        else
        {
LABEL_755:
          if (!begin_low)
            goto LABEL_767;
        }
        if ((unint64_t)v418 >= v419)
        {
          v430 = v418 - v417;
          v431 = v430 + 1;
          if ((unint64_t)(v430 + 1) >> 61)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v419 - (_QWORD)v417) >> 2 > v431)
            v431 = (uint64_t)(v419 - (_QWORD)v417) >> 2;
          if (v419 - (unint64_t)v417 >= 0x7FFFFFFFFFFFFFF8)
            v413 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v413 = v431;
          if (v413)
            v413 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v413);
          else
            v432 = 0;
          v433 = (std::vector<unsigned int>::pointer *)(v413 + 8 * v430);
          *v433 = v427;
          v434 = v433 + 1;
          while (v418 != v417)
          {
            v435 = *--v418;
            *--v433 = v435;
          }
          v419 = v413 + 8 * v432;
          if (v417)
            operator delete(v417);
          v417 = v433;
          v418 = v434;
        }
        else
        {
          *v418++ = v427;
        }
LABEL_776:
        v414 = (_QWORD *)*v414;
        if (v414 == v416)
        {
          v436 = (char *)v418 - (char *)v417;
          if (v418 == v417)
          {
            v437 = 0;
            v440 = 0;
            v439 = 0;
          }
          else
          {
            if (v436 < 0)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v437 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v436 >> 3);
            v439 = &v437[8 * v438];
            memmove(v437, v417, (char *)v418 - (char *)v417);
            v440 = &v437[8 * (v436 >> 3)];
          }
          v765[0] = 1;
          *(_QWORD *)&v765[8] = v437;
          *(_QWORD *)&v765[16] = v440;
          *(_QWORD *)&v765[24] = v439;
          if (v417)
          {
            v453 = v417;
LABEL_797:
            operator delete(v453);
          }
          goto LABEL_798;
        }
      }
    }
    std::operator+<char>();
    v441 = std::string::append(&v739, ") at prim path (");
    v442 = *(_OWORD *)&v441->__r_.__value_.__l.__data_;
    v741.__r_.__value_.__r.__words[2] = v441->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v741.__r_.__value_.__l.__data_ = v442;
    v441->__r_.__value_.__l.__size_ = 0;
    v441->__r_.__value_.__r.__words[2] = 0;
    v441->__r_.__value_.__r.__words[0] = 0;
    v443 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v652);
    v444 = *(char *)(v443 + 23);
    if (v444 >= 0)
      v445 = (const std::string::value_type *)v443;
    else
      v445 = *(const std::string::value_type **)v443;
    if (v444 >= 0)
      v446 = *(unsigned __int8 *)(v443 + 23);
    else
      v446 = *(_QWORD *)(v443 + 8);
    v447 = std::string::append(&v741, v445, v446);
    v448 = *(_OWORD *)&v447->__r_.__value_.__l.__data_;
    v770.__r_.__value_.__r.__words[2] = v447->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v770.__r_.__value_.__l.__data_ = v448;
    v447->__r_.__value_.__l.__size_ = 0;
    v447->__r_.__value_.__r.__words[2] = 0;
    v447->__r_.__value_.__r.__words[0] = 0;
    v449 = std::string::append(&v770, ")");
    v450 = *(_OWORD *)&v449->__r_.__value_.__l.__data_;
    *(_QWORD *)v777 = *((_QWORD *)&v449->__r_.__value_.__l + 2);
    v776 = v450;
    v449->__r_.__value_.__l.__size_ = 0;
    v449->__r_.__value_.__r.__words[2] = 0;
    v449->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(buf, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v776);
    *(_OWORD *)&v765[8] = *(_OWORD *)&buf[0].__begin_;
    v451 = buf[0].__end_cap_.__value_;
    v766.i64[0] = (uint64_t)buf[1].__begin_;
    *(uint64_t *)((char *)v766.i64 + 7) = *(uint64_t *)((char *)&buf[1].__begin_ + 7);
    end_high = HIBYTE(buf[1].__end_);
    buf[1].__end_ = 0;
    buf[0].__end_cap_.__value_ = 0;
    buf[1].__begin_ = 0;
    v765[0] = 0;
    *(_QWORD *)&v765[24] = v451;
    v766.i8[15] = end_high;
    if ((v777[7] & 0x80000000) != 0)
      operator delete((void *)v776);
    if (SHIBYTE(v770.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v770.__r_.__value_.__l.__data_);
    if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v741.__r_.__value_.__l.__data_);
    if (SHIBYTE(v739.__r_.__value_.__r.__words[2]) < 0)
    {
      v453 = (std::vector<unsigned int>::pointer *)v739.__r_.__value_.__r.__words[0];
      goto LABEL_797;
    }
LABEL_798:
    if ((v762 & 7) != 0)
    {
      v454 = (unsigned int *)(v762 & 0xFFFFFFFFFFFFFFF8);
      do
        v455 = __ldxr(v454);
      while (__stlxr(v455 - 2, v454));
    }
    v456 = (std::__shared_weak_count *)*((_QWORD *)&v761 + 1);
    if (*((_QWORD *)&v761 + 1))
    {
      v457 = (unint64_t *)(*((_QWORD *)&v761 + 1) + 8);
      do
        v458 = __ldaxr(v457);
      while (__stlxr(v458 - 1, v457));
      if (!v458)
      {
        ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
        std::__shared_weak_count::__release_weak(v456);
      }
    }
    if (v765[0])
    {
      v459 = *(uint64_t **)&v765[8];
      for (k = *(uint64_t **)&v765[16]; v459 != k; ++v459)
      {
        v461 = *v459;
        v462 = (unsigned int *)REMeshAssetDescriptorAddSkeleton();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(buf, (_DWORD *)(v461 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&buf[0].__begin_ + 1, (_DWORD *)(v461 + 20));
        buf[0].__end_ = v462;
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>(&v712, (pxrInternal__aapl__pxrReserved__::SdfPath *)buf, (uint64_t)buf);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
        v463 = *(_DWORD **)(v461 + 8);
        if (v463)
        {
          std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(buf, (_DWORD *)(v461 + 16), v463);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(&v709, (pxrInternal__aapl__pxrReserved__::SdfPath *)buf, buf);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf[0].__end_);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v776);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    begin = 0;
    v680 = 0;
    ModelCount = (realityio *)REMeshAssetDescriptorGetModelCount();
    if ((_DWORD)ModelCount)
    {
      memset(buf, 0, 24);
      v465 = a2[5];
      PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v731);
      v467 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
      std::string::basic_string[abi:ne180100]<0>(&v761, "Mesh");
      v468 = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v731);
      AssetURLFromBundle = realityio::ImportSessionImpl::getAssetURLFromBundle(v465->__shared_weak_owners_, v467, (uint64_t *)&v761, (uint64_t)v468, (uint64_t)buf);
      if (SBYTE7(v762) < 0)
        operator delete((void *)v761);
      if ((AssetURLFromBundle & 1) != 0)
      {
        v680 = REMemoryAssetParametersCreate();
        REMemoryAssetParametersSetAsyncRegistration();
        REMemoryAssetParametersSetAssetName();
        ModelCount = (realityio *)REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsWithParameters();
      }
      else
      {
        ModelCount = (realityio *)REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsAsyncRegistration();
      }
      begin = (uint64_t)ModelCount;
      if (SHIBYTE(buf[0].__end_cap_.__value_) < 0)
        operator delete(buf[0].__begin_);
    }
    else if (SphereDescriptor)
    {
      REAssetRegistrationOptionsCreate();
      begin = REAssetHandleCreateFromAssetRegistrationOptions();
      ModelCount = (realityio *)RERelease();
    }
    if (!begin)
    {
      v580 = *(id *)(realityio::logObjects(ModelCount) + 24);
      if (os_log_type_enabled(v580, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0].__begin_) = 0;
        _os_log_impl(&dword_22FF26000, v580, OS_LOG_TYPE_DEFAULT, "Could not create valid meshAssetRef.", (uint8_t *)buf, 2u);
      }

      RERelease();
      goto LABEL_1114;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v731, buf);
    v470 = a2[5];
    v471 = operator new(0x50uLL);
    v471[1] = 0;
    v472 = v471 + 1;
    v471[2] = 0;
    *v471 = &off_24FDF90B0;
    v471[3] = &off_24FDF9100;
    v471[4] = 0;
    *((_BYTE *)v471 + 40) = 0;
    v471[6] = 0;
    v471[7] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v471 + 16, buf);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v471 + 17, (_DWORD *)&buf[0].__begin_ + 1);
    v471[9] = v470;
    *(_QWORD *)&v760 = v471 + 3;
    *((_QWORD *)&v760 + 1) = v471;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
    realityio::WrappedRERef<REAsset *>::operator=(v471 + 4, &begin);
    v473 = *(_QWORD *)(*(_QWORD *)(a2[5]->__shared_weak_owners_ + 40) + 488);
    *(_QWORD *)&v679 = v471 + 3;
    *((_QWORD *)&v679 + 1) = v471;
    do
      v474 = __ldxr(v472);
    while (__stxr(v474 + 1, v472));
    realityio::AssetLoadTracker::add(v473, &v679);
    v475 = (std::__shared_weak_count *)*((_QWORD *)&v679 + 1);
    if (*((_QWORD *)&v679 + 1))
    {
      v476 = (unint64_t *)(*((_QWORD *)&v679 + 1) + 8);
      do
        v477 = __ldaxr(v476);
      while (__stlxr(v477 - 1, v476));
      if (!v477)
      {
        ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
        std::__shared_weak_count::__release_weak(v475);
      }
    }
    v689 = 0uLL;
    v690 = 0;
    std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(&v689, v707, v708, (v708 - v707) >> 3);
    v678 = 0;
    v693 = 0;
    v692 = 0;
    v694 = 0;
    memset(&v759, 0, sizeof(v759));
    v757 = 0;
    v756 = 0;
    v758 = 0;
    v754 = 0;
    v753 = 0;
    v755 = 0;
    memset(&__str, 0, sizeof(__str));
    v750 = 0;
    v749 = 0;
    v751 = 0;
    if ((int)((v701 - v700) >> 5) < 1)
    {
      v478 = 0;
      v568 = 0;
    }
    else
    {
      v670 = 0;
      v478 = 0;
      v479 = 0;
      v480 = 0;
      v659 = ((v701 - v700) >> 5);
      v669 = MEMORY[0x24BEE9D10] + 16;
      v668 = MEMORY[0x24BEE9DA0] + 16;
      do
      {
        v747 = 0;
        v748 = 0;
        v746 = &v747;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v743 = v669;
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)buf, &v744, &v745);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v771 = 0;
        v770.__r_.__value_.__r.__words[0] = v668;
        if (((uint64_t)buf[1].__begin_ & 7) != 0)
        {
          v481 = (unsigned int *)((unint64_t)buf[1].__begin_ & 0xFFFFFFFFFFFFFFF8);
          do
            v482 = __ldxr(v481);
          while (__stlxr(v482 - 2, v481));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf[0].__end_cap_);
        if (buf[0].__end_)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)buf[0].__end_);
        MEMORY[0x2348B235C](buf, &v770);
        v483 = v774[1];
        v484 = v774[0];
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v761, &v744, &v745);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v761, &v741);
        v485 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v741);
        v486 = (_OWORD *)__str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
        {
          v488 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__str, (__int128 *)v485);
        }
        else
        {
          if (*(char *)(v485 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str.__r_.__value_.__l.__size_, *(const std::string::value_type **)v485, *(_QWORD *)(v485 + 8));
          }
          else
          {
            v487 = *(_OWORD *)v485;
            *(_QWORD *)(__str.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v485 + 16);
            *v486 = v487;
          }
          v488 = (std::string::size_type)v486 + 24;
        }
        __str.__r_.__value_.__l.__size_ = v488;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v741);
        if ((BYTE8(v762) & 7) != 0)
        {
          v489 = (unsigned int *)(*((_QWORD *)&v762 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
            v490 = __ldxr(v489);
          while (__stlxr(v490 - 2, v489));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v762);
        if (*((_QWORD *)&v761 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v761 + 1));
        v491 = (_QWORD *)(__str.__r_.__value_.__l.__size_ - 24);
        if (*(char *)(__str.__r_.__value_.__l.__size_ - 1) < 0)
          v491 = (_QWORD *)*v491;
        v492 = (char *)v750;
        if ((unint64_t)v750 >= v751)
        {
          v494 = ((_BYTE *)v750 - (_BYTE *)v749) >> 3;
          if ((unint64_t)(v494 + 1) >> 61)
            std::vector<char const*>::__throw_length_error[abi:ne180100]();
          v495 = (uint64_t)(v751 - (_QWORD)v749) >> 2;
          if (v495 <= v494 + 1)
            v495 = v494 + 1;
          if (v751 - (unint64_t)v749 >= 0x7FFFFFFFFFFFFFF8)
            v496 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v496 = v495;
          if (v496)
            v497 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v751, v496);
          else
            v497 = 0;
          v498 = &v497[8 * v494];
          *(_QWORD *)v498 = v491;
          v493 = v498 + 8;
          v499 = (char *)v750;
          v500 = (char *)v749;
          if (v750 != v749)
          {
            do
            {
              v501 = *((_QWORD *)v499 - 1);
              v499 -= 8;
              *((_QWORD *)v498 - 1) = v501;
              v498 -= 8;
            }
            while (v499 != v500);
            v499 = (char *)v749;
          }
          v749 = v498;
          v750 = v493;
          v751 = (unint64_t)&v497[8 * v496];
          if (v499)
            operator delete(v499);
        }
        else
        {
          *(_QWORD *)v750 = v491;
          v493 = v492 + 8;
        }
        v750 = v493;
        if (v483 != v484)
        {
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v770);
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v741))
          {
            MEMORY[0x2348B1C0C](&v761);
            pxrInternal__aapl__pxrReserved__::UsdSkelCache::GetAnimQuery((pxrInternal__aapl__pxrReserved__::UsdSkelCache *)&v761, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v741);
            v502 = (std::__shared_weak_count *)*((_QWORD *)&v761 + 1);
            if (*((_QWORD *)&v761 + 1))
            {
              v503 = (unint64_t *)(*((_QWORD *)&v761 + 1) + 8);
              do
                v504 = __ldaxr(v503);
              while (__stlxr(v504 - 1, v503));
              if (!v504)
              {
                ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
                std::__shared_weak_count::__release_weak(v502);
              }
            }
            pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery::GetBlendShapeOrder((pxrInternal__aapl__pxrReserved__::UsdSkelAnimQuery *)&v739);
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v761);
            for (m = (_QWORD *)v763.i64[0]; ; ++m)
            {
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v761);
              if (m == (_QWORD *)(v763.i64[0] + 8 * v761))
                break;
              if ((*m & 0xFFFFFFFFFFFFFFF8) != 0)
                v507 = (const void **)((*m & 0xFFFFFFFFFFFFFFF8) + 16);
              else
                v507 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v506);
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v746, v507, (uint64_t)v507);
            }
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v761);
            pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::~TfRefPtr((unsigned int **)&v739);
          }
          v763.i64[0] = 0;
          v761 = 0u;
          v762 = 0u;
          pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v770);
          v508 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
          if ((v740 & 7) != 0)
          {
            v509 = (unsigned int *)(v740 & 0xFFFFFFFFFFFFFFF8);
            do
              v510 = __ldxr(v509);
            while (__stlxr(v510 - 2, v509));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v739.__r_.__value_.__r.__words[2]);
          if (v739.__r_.__value_.__l.__size_)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v739.__r_.__value_.__l.__size_);
          if (v508)
          {
            v511 = 0;
            if ((unint64_t)((v483 - v484) / 40) <= 1)
              v512 = 1;
            else
              v512 = (v483 - v484) / 40;
            do
            {
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v761);
              if ((*(_QWORD *)(v763.i64[0] + 8 * v511) & 0xFFFFFFFFFFFFFFF8) != 0)
                v514 = (const void **)((*(_QWORD *)(v763.i64[0] + 8 * v511) & 0xFFFFFFFFFFFFFFF8) + 16);
              else
                v514 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v513);
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v746, v514, (uint64_t)v514);
              ++v511;
            }
            while (v512 != v511);
          }
          v515 = (uint64_t)(v759.__r_.__value_.__l.__size_ - v759.__r_.__value_.__r.__words[0]) >> 3;
          v516 = (uint64_t *)v746;
          v517 = v515;
          if (v746 != &v747)
          {
            do
            {
              v518 = (__int128 *)(v516 + 4);
              v519 = v693;
              if ((unint64_t)v693 >= v694)
              {
                v521 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v692, v518);
              }
              else
              {
                if (*((char *)v516 + 55) < 0)
                {
                  std::string::__init_copy_ctor_external(v693, (const std::string::value_type *)v516[4], v516[5]);
                }
                else
                {
                  v520 = *v518;
                  v693->__r_.__value_.__r.__words[2] = v516[6];
                  *(_OWORD *)&v519->__r_.__value_.__l.__data_ = v520;
                }
                v521 = v519 + 1;
              }
              v693 = v521;
              v522 = (std::string::__raw *)&v521[-1];
              if (SHIBYTE(v521[-1].__r_.__value_.__r.__words[2]) < 0)
                v522 = (std::string::__raw *)v522->__words[0];
              v523 = v759.__r_.__value_.__l.__size_;
              if (v759.__r_.__value_.__l.__size_ >= v759.__r_.__value_.__r.__words[2])
              {
                v525 = (uint64_t)(v759.__r_.__value_.__l.__size_ - v759.__r_.__value_.__r.__words[0]) >> 3;
                if ((unint64_t)(v525 + 1) >> 61)
                  std::vector<char const*>::__throw_length_error[abi:ne180100]();
                v526 = (uint64_t)(v759.__r_.__value_.__r.__words[2] - v759.__r_.__value_.__r.__words[0]) >> 2;
                if (v526 <= v525 + 1)
                  v526 = v525 + 1;
                if (v759.__r_.__value_.__r.__words[2] - v759.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
                  v527 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v527 = v526;
                if (v527)
                  v528 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v759.__r_.__value_.__r.__words[2], v527);
                else
                  v528 = 0;
                v529 = (std::string::__raw **)&v528[8 * v525];
                *v529 = v522;
                v524 = (std::string::size_type)(v529 + 1);
                v530 = (char *)v759.__r_.__value_.__l.__size_;
                v531 = v759.__r_.__value_.__r.__words[0];
                if (v759.__r_.__value_.__l.__size_ != v759.__r_.__value_.__r.__words[0])
                {
                  do
                  {
                    v532 = (std::string::__raw *)*((_QWORD *)v530 - 1);
                    v530 -= 8;
                    *--v529 = v532;
                  }
                  while (v530 != (char *)v531);
                  v530 = (char *)v759.__r_.__value_.__r.__words[0];
                }
                v759.__r_.__value_.__r.__words[0] = (std::string::size_type)v529;
                v759.__r_.__value_.__l.__size_ = v524;
                v759.__r_.__value_.__r.__words[2] = (std::string::size_type)&v528[8 * v527];
                if (v530)
                  operator delete(v530);
              }
              else
              {
                *(_QWORD *)v759.__r_.__value_.__l.__size_ = v522;
                v524 = v523 + 8;
              }
              v759.__r_.__value_.__l.__size_ = v524;
              v533 = (char *)v516[1];
              if (v533)
              {
                do
                {
                  v534 = (char **)v533;
                  v533 = *(char **)v533;
                }
                while (v533);
              }
              else
              {
                do
                {
                  v534 = (char **)v516[2];
                  _ZF = *v534 == (char *)v516;
                  v516 = (uint64_t *)v534;
                }
                while (!_ZF);
              }
              v516 = (uint64_t *)v534;
            }
            while (v534 != &v747);
            v517 = (uint64_t)(v524 - v759.__r_.__value_.__r.__words[0]) >> 3;
          }
          v535 = v517 - v515;
          if (v478 >= v670)
          {
            v536 = (v478 - v479) >> 4;
            v537 = v536 + 1;
            if ((unint64_t)(v536 + 1) >> 60)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            if ((v670 - v479) >> 3 > v537)
              v537 = (v670 - v479) >> 3;
            if ((unint64_t)(v670 - v479) >= 0x7FFFFFFFFFFFFFF0)
              v538 = 0xFFFFFFFFFFFFFFFLL;
            else
              v538 = v537;
            if (v538)
            {
              if (v538 >> 60)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v539 = (char *)operator new(16 * v538);
            }
            else
            {
              v539 = 0;
            }
            v540 = (uint64_t *)&v539[16 * v536];
            *v540 = v535;
            v540[1] = v515;
            if (v478 == v479)
            {
              v542 = &v539[16 * v536];
            }
            else
            {
              v541 = &v539[16 * v536];
              do
              {
                v542 = v541 - 16;
                *((_OWORD *)v541 - 1) = *((_OWORD *)v478 - 1);
                v478 -= 16;
                v541 -= 16;
              }
              while (v478 != v479);
            }
            v670 = &v539[16 * v538];
            v478 = (char *)(v540 + 2);
            if (v479)
              operator delete(v479);
            v479 = v542;
          }
          else
          {
            *(_QWORD *)v478 = v535;
            *((_QWORD *)v478 + 1) = v515;
            v478 += 16;
          }
          *(_DWORD *)((char *)v738 + 3) = 0;
          v738[0] = 0;
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v739, &v744, &v745);
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v739);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) != 0)
            v544 = (*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v544 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          if (*(char *)(v544 + 23) < 0)
            v544 = *(_QWORD *)v544;
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v734, &v744, &v745);
          v545 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v734);
          if ((*(_QWORD *)v545 & 0xFFFFFFFFFFFFFFF8) != 0)
            v546 = (*(_QWORD *)v545 & 0xFFFFFFFFFFFFFFF8) + 16;
          else
            v546 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v545);
          if (*(char *)(v546 + 23) < 0)
            v546 = *(_QWORD *)v546;
          if ((v737 & 7) != 0)
          {
            v547 = (unsigned int *)(v737 & 0xFFFFFFFFFFFFFFF8);
            do
              v548 = __ldxr(v547);
            while (__stlxr(v548 - 2, v547));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v736);
          if (v735)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v735);
          if ((v740 & 7) != 0)
          {
            v549 = (unsigned int *)(v740 & 0xFFFFFFFFFFFFFFF8);
            do
              v550 = __ldxr(v549);
            while (__stlxr(v550 - 2, v549));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v739.__r_.__value_.__r.__words[2]);
          if (v739.__r_.__value_.__l.__size_)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v739.__r_.__value_.__l.__size_);
          v551 = ((unint64_t)(v478 - v479) >> 4) - 1;
          v552 = v754;
          if ((unint64_t)v754 >= v755)
          {
            v554 = (v754 - (pxrInternal__aapl__pxrReserved__::UsdObject *)v753) >> 5;
            v555 = v554 + 1;
            if ((unint64_t)(v554 + 1) >> 59)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v556 = v755 - (_QWORD)v753;
            if ((uint64_t)(v755 - (_QWORD)v753) >> 4 > v555)
              v555 = v556 >> 4;
            if ((unint64_t)v556 >= 0x7FFFFFFFFFFFFFE0)
              v557 = 0x7FFFFFFFFFFFFFFLL;
            else
              v557 = v555;
            if (v557)
              v558 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)&v755, v557);
            else
              v558 = 0;
            v559 = &v558[32 * v554];
            *v559 = 2;
            *((_DWORD *)v559 + 1) = *(_DWORD *)((char *)v738 + 3);
            *(_DWORD *)(v559 + 1) = v738[0];
            *((_QWORD *)v559 + 1) = v544;
            *((_QWORD *)v559 + 2) = v546;
            *((_DWORD *)v559 + 6) = v551;
            *((_DWORD *)v559 + 7) = 0;
            v560 = v754;
            v561 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v753;
            v562 = v559;
            if (v754 != v753)
            {
              do
              {
                v563 = *((_OWORD *)v560 - 1);
                *((_OWORD *)v562 - 2) = *((_OWORD *)v560 - 2);
                *((_OWORD *)v562 - 1) = v563;
                v562 -= 32;
                v560 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v560 - 32);
              }
              while (v560 != v561);
              v560 = v561;
            }
            v553 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(v559 + 32);
            v753 = v562;
            v754 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(v559 + 32);
            v755 = (unint64_t)&v558[32 * v557];
            if (v560)
              operator delete(v560);
          }
          else
          {
            *(_BYTE *)v754 = 2;
            *(_DWORD *)((char *)v552 + 1) = v738[0];
            *((_DWORD *)v552 + 1) = *(_DWORD *)((char *)v738 + 3);
            *((_QWORD *)v552 + 1) = v544;
            *((_QWORD *)v552 + 2) = v546;
            *((_DWORD *)v552 + 6) = v551;
            *((_DWORD *)v552 + 7) = 0;
            v553 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v552 + 32);
          }
          v754 = v553;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v761);
          if ((v742 & 7) != 0)
          {
            v564 = (unsigned int *)(v742 & 0xFFFFFFFFFFFFFFF8);
            do
              v565 = __ldxr(v564);
            while (__stlxr(v565 - 2, v564));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v741.__r_.__value_.__r.__words[2]);
          if (v741.__r_.__value_.__l.__size_)
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v741.__r_.__value_.__l.__size_);
        }
        *(_QWORD *)&v761 = &v775;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v761);
        *(_QWORD *)&v761 = v774;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::_BlendShape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v761);
        if (buf[1].__end_)
        {
          buf[1].__end_cap_.__value_ = buf[1].__end_;
          operator delete(buf[1].__end_);
        }
        if (((uint64_t)buf[1].__begin_ & 7) != 0)
        {
          v566 = (unsigned int *)((unint64_t)buf[1].__begin_ & 0xFFFFFFFFFFFFFFF8);
          do
            v567 = __ldxr(v566);
          while (__stlxr(v567 - 2, v566));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf[0].__end_cap_);
        if (buf[0].__end_)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)buf[0].__end_);
        MEMORY[0x2348B217C](&v770);
        MEMORY[0x2348B1BE8](&v743);
        std::__tree<std::string>::destroy((uint64_t)&v746, v747);
        ++v480;
      }
      while (v480 != v659);
      if (v479 == v478)
      {
        v568 = (char *)v757;
      }
      else
      {
        v568 = (char *)v757;
        v569 = v479;
        do
        {
          v570 = *(_QWORD *)v569;
          v571 = v759.__r_.__value_.__r.__words[0] + 8 * *((_QWORD *)v569 + 1);
          if (v568 >= v758)
          {
            v572 = (v568 - (_BYTE *)v756) >> 4;
            if ((unint64_t)(v572 + 1) >> 60)
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            v573 = (v758 - (_BYTE *)v756) >> 3;
            if (v573 <= v572 + 1)
              v573 = v572 + 1;
            if ((unint64_t)(v758 - (_BYTE *)v756) >= 0x7FFFFFFFFFFFFFF0)
              v574 = 0xFFFFFFFFFFFFFFFLL;
            else
              v574 = v573;
            if (v574)
              v575 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v758, v574);
            else
              v575 = 0;
            v576 = &v575[16 * v572];
            *(_QWORD *)v576 = v570;
            *((_QWORD *)v576 + 1) = v571;
            v577 = (char *)v757;
            v578 = (char *)v756;
            v579 = v576;
            if (v757 != v756)
            {
              do
              {
                *((_OWORD *)v579 - 1) = *((_OWORD *)v577 - 1);
                v579 -= 16;
                v577 -= 16;
              }
              while (v577 != v578);
              v577 = (char *)v756;
            }
            v568 = v576 + 16;
            v756 = v579;
            v757 = v576 + 16;
            v758 = &v575[16 * v574];
            if (v577)
              operator delete(v577);
          }
          else
          {
            *(_QWORD *)v568 = v570;
            *((_QWORD *)v568 + 1) = v571;
            v568 += 16;
          }
          v757 = v568;
          v569 += 16;
        }
        while (v569 != v478);
        v478 = v479;
      }
    }
    if (v568 != v756 && v754 != v753)
    {
      AssetWithDefinitionsAndWeightNames = REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitionsAndWeightNames();
      if (v678)
        RERelease();
      v678 = AssetWithDefinitionsAndWeightNames;
    }
    if (v749)
    {
      v750 = v749;
      operator delete(v749);
    }
    buf[0].__begin_ = (std::vector<unsigned int>::pointer)&__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v753)
    {
      v754 = (pxrInternal__aapl__pxrReserved__::UsdObject *)v753;
      operator delete(v753);
    }
    if (v756)
    {
      v757 = v756;
      operator delete(v756);
    }
    if (v759.__r_.__value_.__r.__words[0])
    {
      v759.__r_.__value_.__l.__size_ = v759.__r_.__value_.__r.__words[0];
      operator delete(v759.__r_.__value_.__l.__data_);
    }
    buf[0].__begin_ = (std::vector<unsigned int>::pointer)&v692;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v478)
      operator delete(v478);
    v582 = v703[9];
    v583 = (char *)operator new(0xD8uLL);
    v584 = (std::__shared_weak_count *)v583;
    *((_QWORD *)v583 + 1) = 0;
    v585 = (unint64_t *)(v583 + 8);
    *((_QWORD *)v583 + 2) = 0;
    *(_QWORD *)v583 = &off_24FDF9130;
    v586 = v760;
    if (*((_QWORD *)&v760 + 1))
    {
      v587 = (unint64_t *)(*((_QWORD *)&v760 + 1) + 8);
      do
        v588 = __ldxr(v587);
      while (__stxr(v588 + 1, v587));
      v589 = v678;
      *(_OWORD *)(v583 + 24) = v586;
      do
        v590 = __ldxr(v587);
      while (__stxr(v590 + 1, v587));
    }
    else
    {
      v589 = v678;
      *((_QWORD *)v583 + 3) = v760;
      *((_QWORD *)v583 + 4) = 0;
    }
    v770.__r_.__value_.__r.__words[0] = v589;
    v678 = 0;
    *(_OWORD *)(v583 + 40) = v718;
    *((_QWORD *)v583 + 7) = v719;
    v718 = 0uLL;
    v719 = 0;
    *((_OWORD *)v583 + 4) = v689;
    *((_QWORD *)v583 + 10) = v690;
    v689 = 0uLL;
    v591 = v713;
    *((_QWORD *)v583 + 11) = v712;
    v690 = 0;
    v592 = v714;
    *((_QWORD *)v583 + 12) = v591;
    *((_QWORD *)v583 + 13) = v592;
    v593 = v583 + 96;
    if (v592)
    {
      v591[2] = v593;
      v712 = (uint64_t *)&v713;
      v713 = 0;
      v714 = 0;
    }
    else
    {
      *((_QWORD *)v583 + 11) = v593;
    }
    v594 = v709;
    v595 = v710;
    *((_QWORD *)v583 + 15) = v710;
    v596 = v583 + 120;
    v675 = v583 + 24;
    *((_QWORD *)v583 + 14) = v594;
    v597 = v711;
    *((_QWORD *)v583 + 16) = v711;
    if (v597)
    {
      v595[2] = v596;
      v709 = (uint64_t *)&v710;
      v710 = 0;
      v711 = 0;
    }
    else
    {
      *((_QWORD *)v583 + 14) = v596;
    }
    if ((v777[7] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v583 + 136), (const std::string::value_type *)v776, *((std::string::size_type *)&v776 + 1));
    }
    else
    {
      *(_OWORD *)(v583 + 136) = v776;
      *((_QWORD *)v583 + 19) = *(_QWORD *)v777;
    }
    p_shared_weak_owners = (std::string *)&v584[6].__shared_weak_owners_;
    if ((v777[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(p_shared_weak_owners, *(const std::string::value_type **)&v777[8], *(std::string::size_type *)&v777[16]);
    }
    else
    {
      *(_OWORD *)&p_shared_weak_owners->__r_.__value_.__l.__data_ = *(_OWORD *)&v777[8];
      v584[7].__shared_owners_ = *(_QWORD *)&v777[24];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v584[7].__shared_weak_owners_, &v696);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v584[7].__shared_weak_owners_ + 1, &v697);
    LOBYTE(v584[8].__vftable) = v645 != 0;
    v599 = v770.__r_.__value_.__r.__words[0];
    v584[8].__shared_owners_ = v770.__r_.__value_.__r.__words[0];
    if (v599)
      RERetain();
    LOBYTE(v584[8].__shared_weak_owners_) = v582;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)&v712, v713);
    v714 = 0;
    v712 = (uint64_t *)&v713;
    v713 = 0;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&v709, v710);
    v711 = 0;
    v709 = (uint64_t *)&v710;
    v710 = 0;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v770);
    if (*((_QWORD *)&v586 + 1))
    {
      v600 = (unint64_t *)(*((_QWORD *)&v586 + 1) + 8);
      do
        v601 = __ldaxr(v600);
      while (__stlxr(v601 - 1, v600));
      if (!v601)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v586 + 1) + 16))(*((_QWORD *)&v586 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v586 + 1));
      }
    }
    v698 = v675;
    v699 = v584;
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v678);
    buf[0].__begin_ = (std::vector<unsigned int>::pointer)&v689;
    std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    v604 = *((_QWORD *)this + 2);
    v603 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    *(_QWORD *)&v761 = v604;
    *((_QWORD *)&v761 + 1) = v603;
    if (v603)
    {
      v605 = (unint64_t *)&v603->__shared_owners_;
      do
        v606 = __ldxr(v605);
      while (__stxr(v606 + 1, v605));
    }
    v607 = (const void **)realityio::MeshAssetBuilder::kOutputName(v602);
    std::mutex::lock((std::mutex *)(v604 + 64));
    v608 = (unsigned int *)operator new(0x30uLL);
    v609 = v608;
    *((_QWORD *)v608 + 1) = 0;
    *((_QWORD *)v608 + 2) = 0;
    *(_QWORD *)v608 = &off_24FDF9180;
    v610 = v608 + 6;
    do
      v611 = __ldxr(v585);
    while (__stxr(v611 + 1, v585));
    *((_QWORD *)v608 + 3) = &off_24FDF91D0;
    *((_QWORD *)v608 + 4) = v675;
    *((_QWORD *)v608 + 5) = v584;
    do
      v612 = __ldxr(v585);
    while (__stxr(v612 + 1, v585));
    do
      v613 = __ldaxr(v585);
    while (__stlxr(v613 - 1, v585));
    if (!v613)
    {
      ((void (*)(std::__shared_weak_count *))v584->__on_zero_shared)(v584);
      std::__shared_weak_count::__release_weak(v584);
    }
    buf[0].__begin_ = v610;
    buf[0].__end_ = v609;
    v770.__r_.__value_.__r.__words[0] = (std::string::size_type)v607;
    v614 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v604 + 40), v607, (uint64_t)&std::piecewise_construct, (__int128 **)&v770);
    buf[0].__end_ = 0;
    buf[0].__begin_ = 0;
    v615 = (std::__shared_weak_count *)v614[8];
    v614[7] = (uint64_t)v610;
    v614[8] = (uint64_t)v609;
    if (v615)
    {
      v616 = (unint64_t *)&v615->__shared_owners_;
      do
        v617 = __ldaxr(v616);
      while (__stlxr(v617 - 1, v616));
      if (!v617)
      {
        ((void (*)(std::__shared_weak_count *))v615->__on_zero_shared)(v615);
        std::__shared_weak_count::__release_weak(v615);
      }
    }
    v618 = (std::__shared_weak_count *)buf[0].__end_;
    if (buf[0].__end_)
    {
      v619 = (unint64_t *)(buf[0].__end_ + 2);
      do
        v620 = __ldaxr(v619);
      while (__stlxr(v620 - 1, v619));
      if (!v620)
      {
        ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
        std::__shared_weak_count::__release_weak(v618);
      }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v604, (unsigned __int8 *)v607, (uint64_t)v607);
    std::mutex::unlock((std::mutex *)(v604 + 64));
    if (v603)
    {
      v621 = (unint64_t *)&v603->__shared_owners_;
      do
        v622 = __ldaxr(v621);
      while (__stlxr(v622 - 1, v621));
      if (!v622)
      {
        ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
        std::__shared_weak_count::__release_weak(v603);
      }
    }
    v677 = v760;
    if (*((_QWORD *)&v760 + 1))
    {
      v623 = (unint64_t *)(*((_QWORD *)&v760 + 1) + 8);
      do
        v624 = __ldxr(v623);
      while (__stxr(v624 + 1, v623));
    }
    std::vector<std::shared_ptr<realityio::AssetLoadTracker::Asset>>::push_back[abi:ne180100]((char **)this + 11, &v677);
    v625 = (std::__shared_weak_count *)*((_QWORD *)&v677 + 1);
    if (*((_QWORD *)&v677 + 1))
    {
      v626 = (unint64_t *)(*((_QWORD *)&v677 + 1) + 8);
      do
        v627 = __ldaxr(v626);
      while (__stlxr(v627 - 1, v626));
      if (!v627)
      {
        ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
        std::__shared_weak_count::__release_weak(v625);
      }
    }
    v628 = (uint64_t)a2[5];
    *(_QWORD *)&v676 = begin;
    *((_QWORD *)&v676 + 1) = this;
    v629 = v760;
    if (*((_QWORD *)&v760 + 1))
    {
      v630 = (unint64_t *)(*((_QWORD *)&v760 + 1) + 8);
      do
        v631 = __ldxr(v630);
      while (__stxr(v631 + 1, v630));
    }
    v769 = 0;
    v632 = (char *)operator new(0x30uLL);
    *(_QWORD *)v632 = &off_24FDF9200;
    *(_OWORD *)(v632 + 8) = v676;
    *(_OWORD *)(v632 + 24) = v629;
    *((_QWORD *)v632 + 5) = v648;
    v769 = v632;
    realityio::ImportSession::performBlockPostAssetLoadOnEngineQueue(v628, (uint64_t)v768);
    v633 = v769;
    if (v769 == v768)
    {
      v634 = 4;
      v633 = v768;
    }
    else
    {
      if (!v769)
      {
LABEL_1102:
        RERelease();
        RERelease();
        if (SphereDescriptor)
          RERelease();
        v635 = v699;
        if (v699)
        {
          v636 = (unint64_t *)&v699->__shared_owners_;
          do
            v637 = __ldaxr(v636);
          while (__stlxr(v637 - 1, v636));
          if (!v637)
          {
            ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
            std::__shared_weak_count::__release_weak(v635);
          }
        }
        v638 = (std::__shared_weak_count *)*((_QWORD *)&v760 + 1);
        if (*((_QWORD *)&v760 + 1))
        {
          v639 = (unint64_t *)(*((_QWORD *)&v760 + 1) + 8);
          do
            v640 = __ldaxr(v639);
          while (__stlxr(v640 - 1, v639));
          if (!v640)
          {
            ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
            std::__shared_weak_count::__release_weak(v638);
          }
        }
LABEL_1114:
        realityio::WrappedRERef<REMemoryAssetParameters *>::~WrappedRERef(&v680);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v696);
        if ((v777[31] & 0x80000000) != 0)
          operator delete(*(void **)&v777[8]);
        if ((v777[7] & 0x80000000) != 0)
          operator delete((void *)v776);
        realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)v765);
        buf[0].__begin_ = (std::vector<unsigned int>::pointer)&v700;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        realityio::Result<MaterialIndexAssignor,realityio::DetailedError>::~Result((uint64_t)v703, v641);
        goto LABEL_1119;
      }
      v634 = 5;
    }
    (*(void (**)(void))(*v633 + 8 * v634))();
    goto LABEL_1102;
  }
LABEL_1123:
  if ((v733 & 7) != 0)
  {
    v642 = (unsigned int *)(v733 & 0xFFFFFFFFFFFFFFF8);
    do
      v643 = __ldxr(v642);
    while (__stlxr(v643 - 2, v642));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v732 + 8);
  result = v732;
  if ((_QWORD)v732)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v732);
  return result;
}

void sub_23011FE44(_Unwind_Exception *a1)
{
  unsigned int *v2;
  unsigned int v3;
  void *v4;
  void *v5;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0xAE0]);
  MEMORY[0x2348B20B0](&STACK[0xB40]);
  MEMORY[0x2348B24C4](&STACK[0xB70]);
  if ((STACK[0x318] & 7) != 0)
  {
    v2 = (unsigned int *)(STACK[0x318] & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x320]);
  MEMORY[0x2348B20B0](&STACK[0x9E8]);
  MEMORY[0x2348B24C4](&STACK[0x978]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x9A0]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x9C0]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x340]);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x348]);
  STACK[0xAA0] = (unint64_t)&STACK[0x358];
  std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xAA0]);
  realityio::Result<MaterialIndexAssignor,realityio::DetailedError>::~Result((uint64_t)&STACK[0x370], v4);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy((uint64_t)&STACK[0x868], (_QWORD *)STACK[0x870]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)&STACK[0x880], (_QWORD *)STACK[0x888]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy((uint64_t)&STACK[0x898], (_QWORD *)STACK[0x8A0]);
  STACK[0x370] = (unint64_t)&STACK[0x8B0];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x370]);
  v5 = (void *)STACK[0x8C8];
  if (STACK[0x8C8])
  {
    STACK[0x8D0] = (unint64_t)v5;
    operator delete(v5);
  }
  realityio::Result<std::vector<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>,realityio::DetailedError>::~Result((uint64_t)&STACK[0x8E0]);
  STACK[0xAA0] = (unint64_t)&STACK[0x920];
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xAA0]);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair((uint64_t)&STACK[0x938]);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&STACK[0x948]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x958]);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimInPrototype@<X0>(pxrInternal__aapl__pxrReserved__::UsdPrim *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(a2, (uint64_t *)this + 1, &v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
  }
  else
  {
    *(_DWORD *)a2 = 1;
    *(_QWORD *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

void sub_230120D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

void MaterialIndexAssignor::make(_BYTE *a1, uint64_t *a2, _QWORD *a3, char a4, uint64_t a5, pxrInternal__aapl__pxrReserved__::UsdStage *a6, uint64_t *a7)
{
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  std::vector<unsigned int>::pointer *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  std::vector<unsigned int>::pointer *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  size_t v41;
  std::vector<unsigned int>::size_type v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  pxrInternal__aapl__pxrReserved__::UsdStage *v47;
  _QWORD *v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  int BoundSubsetsAndCoverage;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  std::vector<unsigned int>::pointer begin;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  pxrInternal__aapl__pxrReserved__::UsdStage *v75;
  _QWORD *v76;
  std::vector<unsigned int>::pointer v77;
  uint64_t *v78;
  uint64_t *v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v86;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *hasMaterialXSurface;
  const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v88;
  char v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *v96;
  unsigned int *v97;
  unsigned int v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v103;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t ServiceLocator;
  _QWORD **v108;
  _QWORD *v109;
  uint64_t Name;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  unsigned int *v120;
  unsigned int **v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t *v124;
  uint64_t **v125;
  uint64_t **v126;
  unsigned int v127;
  float32x4_t v128;
  unsigned __int8 v130;
  unsigned __int8 v131;
  char *v132;
  unsigned int *v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD **v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  unsigned int *v142;
  uint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  unsigned int **v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  unsigned int v152;
  float v153;
  float v154;
  uint64_t **v155;
  float v156;
  float v157;
  unsigned int v158;
  __int128 v159;
  BOOL v160;
  unsigned int v161;
  __int128 v162;
  uint64_t *v163;
  uint64_t *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  uint64_t v169;
  _BYTE *v170;
  size_t v171;
  unint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v177;
  uint64_t v178;
  unsigned int **v180;
  pxrInternal__aapl__pxrReserved__::UsdStage *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  pxrInternal__aapl__pxrReserved__::SdfPath *v186;
  unint64_t v187;
  float32x4_t v188;
  unsigned int *v189;
  unsigned int *v190;
  uint64_t *v191;
  _QWORD **v192;
  _QWORD *v193[2];
  uint64_t *v194;
  _QWORD *v195[2];
  uint64_t *v196;
  _QWORD *v197[2];
  __int128 v198;
  unsigned int **v199;
  __int128 v200;
  uint64_t **v201;
  uint64_t *v202;
  uint64_t v203;
  _BYTE v204[560];
  _BYTE v205[564];
  int v206;
  int v207;
  int v208;
  int v209;
  char v210;
  int v211;
  int v212;
  char v213;
  BOOL v214;
  __int128 v215;
  std::vector<unsigned int>::value_type __x;
  unsigned int *v217;
  unsigned int *v218;
  uint64_t v219;
  std::vector<unsigned int> v220;
  uint64_t v221;
  __int128 v222;
  unsigned int **v223;
  uint64_t v224;
  _QWORD v225[3];
  void *__p;
  _QWORD *v227;
  uint64_t v228;
  void *v229;
  char v230;
  _QWORD *v231[2];
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;

  v238 = *MEMORY[0x24BDAC8D0];
  LODWORD(v191) = 0;
  v192 = v193;
  v193[0] = 0;
  v195[0] = 0;
  v195[1] = 0;
  v193[1] = 0;
  v194 = (uint64_t *)v195;
  v197[1] = 0;
  v198 = 0uLL;
  v196 = (uint64_t *)v197;
  v197[0] = 0;
  v199 = 0;
  *(_QWORD *)&v11 = 0xFFFFFFFFLL;
  *((_QWORD *)&v11 + 1) = 0xFFFFFFFFLL;
  v200 = v11;
  v202 = 0;
  v203 = 0;
  v201 = &v202;
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::concurrent_unordered_base((uint64_t)v204, 8uLL, &v234);
  v183 = a3;
  v170 = a1;
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::concurrent_unordered_base((uint64_t)v205, 8uLL, &v234);
  v13 = *a2;
  v12 = a2[1];
  v14 = v12 - *a2;
  v15 = (char *)*((_QWORD *)&v198 + 1);
  v16 = (char *)v198;
  v181 = a6;
  if (*((_QWORD *)&v198 + 1) == (_QWORD)v198)
  {
    v17 = v12 - *a2;
  }
  else
  {
    do
    {
      v15 -= 8;
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(v15);
    }
    while (v15 != v16);
    v17 = a2[1] - *a2;
    v15 = (char *)v198;
  }
  *((_QWORD *)&v198 + 1) = v16;
  if (v17 >> 2 > (unint64_t)(((char *)v199 - v15) >> 3))
  {
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
    v225[0] = &v199;
    *(_QWORD *)&v222 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v199, v17 >> 2);
    *((_QWORD *)&v222 + 1) = v222 + v16 - v15;
    v223 = (unsigned int **)*((_QWORD *)&v222 + 1);
    v224 = v222 + 8 * v18;
    std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer((uint64_t *)&v198, &v222);
    std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)&v222);
  }
  if (v12 != v13)
  {
    v19 = 0;
    if ((unint64_t)(v14 >> 3) <= 1)
      v20 = 1;
    else
      v20 = v14 >> 3;
    do
    {
      v21 = *(_QWORD *)(*a2 + 8 * v19);
      if (v21)
      {
        if (*(_QWORD *)(v21 + 8))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v234, *(_DWORD **)(*a2 + 8 * v19));
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v234 + 1, (_DWORD *)(v21 + 4));
          BYTE8(v234) = 0;
          if (v197 == (_QWORD **)std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)&v196, (unsigned __int8 *)&v234))
          {
            v22 = (uint64_t)(*((_QWORD *)&v198 + 1) - v198) >> 3;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v222, &v234);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v222 + 1, (_DWORD *)&v234 + 1);
            BYTE8(v222) = BYTE8(v234);
            v223 = (unsigned int **)v22;
            std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::__emplace_unique_key_args<MaterialIndexAssignor::MaterialKey,std::pair<MaterialIndexAssignor::MaterialKey,unsigned long>>(&v196, (unsigned __int8 *)&v222, (uint64_t)&v222);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
            v220.__begin_ = *(std::vector<unsigned int>::pointer *)(v21 + 8);
            if (v220.__begin_)
              RERetain();
            v23 = *((_QWORD *)&v198 + 1);
            if (*((_QWORD *)&v198 + 1) >= (unint64_t)v199)
            {
              v25 = (uint64_t)(*((_QWORD *)&v198 + 1) - v198) >> 3;
              if ((unint64_t)(v25 + 1) >> 61)
                std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
              v26 = (uint64_t)((uint64_t)v199 - v198) >> 2;
              if (v26 <= v25 + 1)
                v26 = v25 + 1;
              if ((unint64_t)((unint64_t)v199 - v198) >= 0x7FFFFFFFFFFFFFF8)
                v27 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v27 = v26;
              v225[0] = &v199;
              if (v27)
                v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v199, v27);
              else
                v28 = 0;
              v29 = (std::vector<unsigned int>::pointer *)&v28[8 * v25];
              *(_QWORD *)&v222 = v28;
              *((_QWORD *)&v222 + 1) = v29;
              v224 = (uint64_t)&v28[8 * v27];
              *v29 = v220.__begin_;
              v220.__begin_ = 0;
              v223 = v29 + 1;
              std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer((uint64_t *)&v198, &v222);
              v24 = *((_QWORD *)&v198 + 1);
              std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)&v222);
            }
            else
            {
              **((_QWORD **)&v198 + 1) = v220.__begin_;
              v24 = v23 + 8;
              v220.__begin_ = 0;
            }
            *((_QWORD *)&v198 + 1) = v24;
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v220);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v234);
        }
        if (*(_QWORD *)(v21 + 16))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v234, (_DWORD *)v21);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v234 + 1, (_DWORD *)(v21 + 4));
          BYTE8(v234) = 1;
          if (v197 == (_QWORD **)std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)&v196, (unsigned __int8 *)&v234))
          {
            v30 = (uint64_t)(*((_QWORD *)&v198 + 1) - v198) >> 3;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v222, &v234);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v222 + 1, (_DWORD *)&v234 + 1);
            BYTE8(v222) = BYTE8(v234);
            v223 = (unsigned int **)v30;
            std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::__emplace_unique_key_args<MaterialIndexAssignor::MaterialKey,std::pair<MaterialIndexAssignor::MaterialKey,unsigned long>>(&v196, (unsigned __int8 *)&v222, (uint64_t)&v222);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
            v220.__begin_ = *(std::vector<unsigned int>::pointer *)(v21 + 16);
            if (v220.__begin_)
              RERetain();
            v31 = *((_QWORD *)&v198 + 1);
            if (*((_QWORD *)&v198 + 1) >= (unint64_t)v199)
            {
              v33 = (uint64_t)(*((_QWORD *)&v198 + 1) - v198) >> 3;
              if ((unint64_t)(v33 + 1) >> 61)
                std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
              v34 = (uint64_t)((uint64_t)v199 - v198) >> 2;
              if (v34 <= v33 + 1)
                v34 = v33 + 1;
              if ((unint64_t)((unint64_t)v199 - v198) >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v34;
              v225[0] = &v199;
              if (v35)
                v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v199, v35);
              else
                v36 = 0;
              v37 = (std::vector<unsigned int>::pointer *)&v36[8 * v33];
              *(_QWORD *)&v222 = v36;
              *((_QWORD *)&v222 + 1) = v37;
              v224 = (uint64_t)&v36[8 * v35];
              *v37 = v220.__begin_;
              v220.__begin_ = 0;
              v223 = v37 + 1;
              std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer((uint64_t *)&v198, &v222);
              v32 = *((_QWORD *)&v198 + 1);
              std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)&v222);
            }
            else
            {
              **((_QWORD **)&v198 + 1) = v220.__begin_;
              v32 = v31 + 8;
              v220.__begin_ = 0;
            }
            *((_QWORD *)&v198 + 1) = v32;
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v220);
            LOBYTE(v191) = 1;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v234);
        }
      }
      ++v19;
    }
    while (v20 != v19);
  }
  v39 = *v183;
  v38 = v183[1];
  v40 = v198;
  v41 = *((_QWORD *)&v198 + 1) - v198;
  v42 = (uint64_t)(*((_QWORD *)&v198 + 1) - v198) >> 3;
  __x = -1;
  std::vector<unsigned int>::vector(&v220, v42, &__x);
  v172 = v42;
  v171 = v41;
  if (v38 == v39)
  {
    v44 = 0;
  }
  else
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v187 = (v38 - v39) >> 4;
    v186 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(MEMORY[0x24BEE9D10] + 16);
    v46 = MEMORY[0x24BEE9DC8] + 16;
    v47 = v181;
    v48 = v183;
    do
    {
      v49 = *(_OWORD *)(*v48 + 16 * v43);
      v215 = v49;
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      if (*((_QWORD *)&v49 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      if ((_QWORD)v49)
      {
        v214 = 0;
        v218 = 0;
        v217 = 0;
        v219 = 0;
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v47, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v49 + 8));
        v53 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        *(_QWORD *)&v234 = v186;
        BoundSubsetsAndCoverage = realityio::getBoundSubsetsAndCoverage(v53, (void **)&v217, &v214);
        MEMORY[0x2348B1BE8](&v234);
        if (!BoundSubsetsAndCoverage)
          goto LABEL_69;
        v55 = !v214;
        if (v218 != v217)
        {
          v56 = 0;
          if ((unint64_t)(((char *)v218 - (char *)v217) / 24) <= 1)
            v57 = 1;
          else
            v57 = ((char *)v218 - (char *)v217) / 24;
          do
          {
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            *((_QWORD *)&v235 + 1) = 0;
            *(_QWORD *)&v234 = v46;
            if (!atomic_load(MEMORY[0x24BEE8128]))
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
            pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v211, &v206);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v208, &v206);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v209, &v207);
            v210 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v206);
            v59 = std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)&v196, (unsigned __int8 *)&v208);
            if (v197 == (_QWORD **)v59)
            {
              v55 = 1;
            }
            else
            {
              v60 = v59[6];
              if (v220.__begin_[v60] == -1)
                v220.__begin_[v60] = v44++;
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v208);
            MEMORY[0x2348B20B0](&v211);
            MEMORY[0x2348B24C4](&v234);
            v56 += 24;
            --v57;
          }
          while (v57);
        }
        v47 = v181;
        v48 = v183;
        if (v55)
        {
LABEL_69:
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          *((_QWORD *)&v235 + 1) = 0;
          *(_QWORD *)&v234 = MEMORY[0x24BEE9DC8] + 16;
          if (!atomic_load(MEMORY[0x24BEE8128]))
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v211, &v206);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v208, &v206);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v209, &v207);
          v210 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v206);
          v62 = std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)&v196, (unsigned __int8 *)&v208);
          if (v197 != (_QWORD **)v62)
          {
            v63 = v62[6];
            if (v220.__begin_[v63] == -1)
              v220.__begin_[v63] = v44++;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v208);
          MEMORY[0x2348B20B0](&v211);
          MEMORY[0x2348B24C4](&v234);
        }
        if ((v224 & 7) != 0)
        {
          v64 = (unsigned int *)(v224 & 0xFFFFFFFFFFFFFFF8);
          do
            v65 = __ldxr(v64);
          while (__stlxr(v65 - 2, v64));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
        if (*((_QWORD *)&v222 + 1))
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v222 + 1));
        *(_QWORD *)&v222 = &v217;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
      }
      if (v50)
      {
        p_shared_owners = (unint64_t *)&v50->__shared_owners_;
        do
          v67 = __ldaxr(p_shared_owners);
        while (__stlxr(v67 - 1, p_shared_owners));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v43 = ++v45;
    }
    while (v187 > v45);
  }
  if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
  {
    v222 = 0uLL;
    v223 = 0;
  }
  else
  {
    begin = v220.__begin_;
    if (v172 <= 1)
      v69 = 1;
    else
      v69 = v172;
    v70 = v69;
    do
    {
      if (*begin == -1)
        *begin = v44++;
      ++begin;
      --v70;
    }
    while (v70);
    v222 = 0uLL;
    v223 = 0;
    *(_QWORD *)&v234 = &v222;
    BYTE8(v234) = 0;
    std::vector<realityio::WrappedRERef<REAsset *>>::__vallocate[abi:ne180100](&v222, v172);
    v71 = *((_QWORD *)&v222 + 1);
    bzero(*((void **)&v222 + 1), v171);
    v72 = 0;
    v73 = 0;
    *((_QWORD *)&v222 + 1) = v71 + v171;
    do
    {
      realityio::WrappedRERef<REAsset *>::operator=((uint64_t *)(v222 + 8 * v220.__begin_[v73++]), (uint64_t *)(v198 + v72));
      v72 += 8;
    }
    while (v69 != v73);
  }
  std::vector<realityio::WrappedRERef<REAsset *>>::__vdeallocate((void **)&v198);
  v198 = v222;
  v199 = v223;
  v222 = 0uLL;
  v223 = 0;
  v74 = v196;
  v75 = v181;
  v76 = v183;
  if (v196 != (uint64_t *)v197)
  {
    v77 = v220.__begin_;
    do
    {
      v74[6] = v77[v74[6]];
      v78 = (uint64_t *)v74[1];
      if (v78)
      {
        do
        {
          v79 = v78;
          v78 = (uint64_t *)*v78;
        }
        while (v78);
      }
      else
      {
        do
        {
          v79 = (uint64_t *)v74[2];
          v80 = *v79 == (_QWORD)v74;
          v74 = v79;
        }
        while (!v80);
      }
      v74 = v79;
    }
    while (v79 != (uint64_t *)v197);
  }
  *(_QWORD *)&v234 = &v222;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
  if (v220.__begin_)
  {
    v220.__end_ = v220.__begin_;
    operator delete(v220.__begin_);
  }
  v81 = v183[1] - *v183;
  if (v81)
  {
    v82 = 0;
    v83 = v81 >> 4;
    if (v83 <= 1)
      v84 = 1;
    else
      v84 = v83;
    v177 = MEMORY[0x24BEE9CF0] + 16;
    v184 = MEMORY[0x24BEE9DC8] + 16;
    while (1)
    {
      v85 = *(_QWORD *)(*v76 + 16 * v82);
      if (v85)
        break;
LABEL_135:
      if (++v82 == v84)
        goto LABEL_168;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v215, (_DWORD *)(v85 + 8));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v215 + 1, (_DWORD *)(v85 + 12));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v75, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v215);
    hasMaterialXSurface = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)realityio::hasMaterialXSurface((realityio *)&v220, v86);
    if ((hasMaterialXSurface & 1) != 0
      || (pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(hasMaterialXSurface),
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
          !pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
      || (pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(),
          *(_QWORD *)&v222 = v177,
          v89 = realityio::isCatmullClarkSurface((realityio *)&v222, v88) & a4,
          MEMORY[0x2348B1AF8](&v222),
          (v89 & 1) == 0))
    {
      MaterialIndexAssignor::registerNonSubdGPrim(&v191, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v220);
LABEL_129:
      if ((v221 & 7) != 0)
      {
        v97 = (unsigned int *)(v221 & 0xFFFFFFFFFFFFFFF8);
        do
          v98 = __ldxr(v97);
        while (__stlxr(v98 - 2, v97));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v220.__end_cap_);
      if (v220.__end_)
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v220.__end_);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v215);
      goto LABEL_135;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v220, &v222);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v234, &v222);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v234 + 1, (_DWORD *)&v222 + 1);
    WORD4(v234) = 1;
    HIDWORD(v234) = -1;
    v235 = 0u;
    v236 = 0u;
    v237 = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(_QWORD *)&v222 = MEMORY[0x24BEE9CF0] + 16;
    v90 = realityio::getBoundSubsetsAndCoverage((uint64_t)&v222, (void **)&v235, (BOOL *)((unint64_t)&v234 | 9));
    MEMORY[0x2348B1AF8](&v222);
    v173 = *((_QWORD *)&v235 + 1);
    v169 = v235;
    v91 = (*((_QWORD *)&v235 + 1) - (_QWORD)v235) / 24;
    if (*((_QWORD *)&v235 + 1) == (_QWORD)v235)
    {
      LOBYTE(v93) = 0;
    }
    else
    {
      v92 = 0;
      v93 = 0;
      if (v91 <= 1)
        v94 = 1;
      else
        v94 = (*((_QWORD *)&v235 + 1) - (_QWORD)v235) / 24;
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v224 = 0;
        *(_QWORD *)&v222 = MEMORY[0x24BEE9DC8] + 16;
        if (!atomic_load(MEMORY[0x24BEE8128]))
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
        v93 |= realityio::isMaterialX((realityio *)&v217, v96);
        MEMORY[0x2348B20B0](&v217);
        MEMORY[0x2348B24C4](&v222);
        v92 += 24;
        --v94;
      }
      while (v94);
    }
    if (BYTE9(v234))
      v99 = 0;
    else
      v99 = v90;
    if ((v99 & 1) != 0 || (v93 & 1) != 0)
      goto LABEL_164;
    if (v90)
    {
      std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)&v236 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v235 + 1) - v235) >> 3), &MaterialIndexAssignor::kInvalidMaterialIndex);
      if (v173 != v169)
      {
        v100 = 0;
        v101 = 0;
        if (v91 <= 1)
          v91 = 1;
        v174 = 1;
        do
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v224 = 0;
          *(_QWORD *)&v222 = v184;
          if (!atomic_load(MEMORY[0x24BEE8128]))
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v217, &v208);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v211, &v208);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v212, &v209);
          v213 = 1;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v208);
          v103 = std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)&v196, (unsigned __int8 *)&v211);
          if (v197 == (_QWORD **)v103)
            v174 = 0;
          else
            *(_DWORD *)(*((_QWORD *)&v236 + 1) + 4 * v101) = v103[6];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v211);
          MEMORY[0x2348B20B0](&v217);
          MEMORY[0x2348B24C4](&v222);
          ++v101;
          v100 += 24;
        }
        while (v91 != v101);
        if ((v174 & 1) == 0)
        {
LABEL_164:
          MaterialIndexAssignor::registerNonSubdGPrim(&v191, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v220);
          v76 = v183;
LABEL_165:
          if (*((_QWORD *)&v236 + 1))
          {
            *(_QWORD *)&v237 = *((_QWORD *)&v236 + 1);
            operator delete(*((void **)&v236 + 1));
          }
          *(_QWORD *)&v222 = &v235;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          v75 = v181;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v234);
          goto LABEL_129;
        }
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v224 = 0;
      *(_QWORD *)&v222 = MEMORY[0x24BEE9DC8] + 16;
      if (!atomic_load(MEMORY[0x24BEE8128]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v217, &v208);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v211, &v208);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v212, &v209);
      v213 = 1;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v208);
      v105 = std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)&v196, (unsigned __int8 *)&v211);
      v106 = v105;
      if (v197 != (_QWORD **)v105)
        HIDWORD(v234) = v105[6];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v211);
      MEMORY[0x2348B20B0](&v217);
      MEMORY[0x2348B24C4](&v222);
      if (v197 == (_QWORD **)v106)
        goto LABEL_164;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v220, &v211);
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo,0>((uint64_t)&v222, &v211, (uint64_t)&v234);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>(&v194, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v222, (uint64_t)&v222);
    if (__p)
    {
      v227 = __p;
      operator delete(__p);
    }
    v217 = (unsigned int *)v225;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    v76 = v183;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v222);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v211);
    BYTE1(v191) = 1;
    goto LABEL_165;
  }
LABEL_168:
  ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2348B1264](ServiceLocator);
  v108 = v192;
  v109 = (_QWORD *)MEMORY[0x24BEDB7F0];
  if (v192 != v193)
  {
    v185 = *MEMORY[0x24BEDB7F0];
    v180 = *(unsigned int ***)(MEMORY[0x24BEDB7F0] + 72);
    v182 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v178 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v222);
      Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a7 + 1));
      v111 = *(char *)(Name + 23);
      if (v111 >= 0)
        v112 = Name;
      else
        v112 = *(_QWORD *)Name;
      if (v111 >= 0)
        v113 = *(unsigned __int8 *)(Name + 23);
      else
        v113 = *(_QWORD *)(Name + 8);
      v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v223, v112, v113);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"_baseColor_", 11);
      v115 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"_", 1);
      v116 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"_", 1);
      v117 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"_", 1);
      v118 = (_QWORD *)std::ostream::operator<<();
      v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"_", 1);
      LOBYTE(v234) = *((_BYTE *)v108 + 48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)&v234, 1);
      std::stringbuf::str();
      v217 = 0;
      if (REAssetManagerCreateAssetHandle())
      {
        if (REMaterialAssetBuilderCreate())
        {
          REMaterialAssetBuilderSetName();
          REMaterialAssetBuilderSetMaterialDefinition();
          REMaterialAssetBuilderSetColor4F();
          v120 = (unsigned int *)REAssetManagerMaterialAssetBuilderBuildAsync();
          v220.__begin_ = v120;
          if (v120)
          {
            RERetain();
            v217 = v120;
            v220.__begin_ = 0;
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v220);
            RERelease();
          }
          else
          {
            realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v220);
          }
          RERelease();
        }
        RERelease();
      }
      if (SBYTE7(v235) < 0)
        operator delete((void *)v234);
      if (v217)
        break;
LABEL_229:
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v217);
      *(_QWORD *)&v222 = v185;
      *(_QWORD *)((char *)&v222 + *(_QWORD *)(v185 - 24)) = v182;
      v223 = v180;
      v224 = v178;
      if (v230 < 0)
        operator delete(v229);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2348B4DA4](v231);
      v135 = v108[1];
      if (v135)
      {
        do
        {
          v136 = (_QWORD **)v135;
          v135 = (_QWORD *)*v135;
        }
        while (v135);
      }
      else
      {
        do
        {
          v136 = (_QWORD **)v108[2];
          v80 = *v136 == v108;
          v108 = v136;
        }
        while (!v80);
      }
      v108 = v136;
      if (v136 == v193)
        goto LABEL_237;
    }
    if (*(_QWORD *)(*(_QWORD *)(a5 + 16) + 40))
    {
      realityio::LiveSceneManager::queueForDeferredAssetLoad(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 40), (uint64_t *)&v217);
      v190 = v217;
      if (!v217)
        goto LABEL_191;
    }
    else
    {
      v190 = v217;
    }
    RERetain();
LABEL_191:
    realityio::Builder::addAsset(a7, (uint64_t *)&v190, 0);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v190);
    v121 = (unsigned int **)*((_QWORD *)&v198 + 1);
    v122 = v198;
    v188 = *((float32x4_t *)v108 + 2);
    v123 = *((unsigned __int8 *)v108 + 48);
    *(_QWORD *)&v234 = *(_QWORD **)((char *)v108 + 49);
    *(_QWORD *)((char *)&v234 + 7) = v108[7];
    v124 = v202;
    v125 = &v202;
    v126 = &v202;
    if (v202)
    {
      while (1)
      {
        while (1)
        {
          v125 = (uint64_t **)v124;
          v127 = *((unsigned __int8 *)v124 + 48);
          if (v127 <= v123)
            break;
LABEL_193:
          v124 = *v125;
          v126 = v125;
          if (!*v125)
            goto LABEL_220;
        }
        if (v127 == v123)
        {
          v128 = *((float32x4_t *)v125 + 2);
          if ((vmovn_s32(vcgtq_f32(v128, v188)).u8[0] & 1) != 0)
            goto LABEL_193;
          if ((vmovn_s32(vceqq_f32(v188, v128)).u8[0] & 1) == 0)
          {
            v130 = vmovn_s32(vcgtq_f32(v188, v128)).u8[0];
LABEL_214:
            if ((v130 & 1) == 0)
              goto LABEL_223;
            goto LABEL_215;
          }
          if (v188.f32[1] < v128.f32[1])
            goto LABEL_193;
          if (v188.f32[1] != v128.f32[1])
          {
            if ((vmovn_s32(vcgtq_f32(v188, v128)).u8[0] & 1) == 0 && v128.f32[1] >= v188.f32[1])
              goto LABEL_223;
            goto LABEL_215;
          }
          if (v188.f32[2] < v128.f32[2])
            goto LABEL_193;
          if (v188.f32[2] == v128.f32[2] && v188.f32[3] < v128.f32[3])
            goto LABEL_193;
          v130 = v188.f32[2] == v128.f32[2];
          v131 = vmovn_s32(vcgtq_f32(v188, v128)).u8[0];
          if (v128.f32[3] >= v188.f32[3])
            v130 = 0;
          if ((v131 & 1) == 0 && v128.f32[1] >= v188.f32[1] && v128.f32[2] >= v188.f32[2])
            goto LABEL_214;
        }
        else if (v127 >= v123)
        {
          goto LABEL_223;
        }
LABEL_215:
        v124 = v125[1];
        if (!v124)
        {
          v126 = v125 + 1;
          break;
        }
      }
    }
LABEL_220:
    v132 = (char *)operator new(0x50uLL);
    *((float32x4_t *)v132 + 2) = v188;
    v132[48] = v123;
    *(_QWORD *)(v132 + 49) = v234;
    *((_QWORD *)v132 + 7) = *(_QWORD *)((char *)&v234 + 7);
    *((_QWORD *)v132 + 8) = ((uint64_t)v121 - v122) >> 3;
    *(_QWORD *)v132 = 0;
    *((_QWORD *)v132 + 1) = 0;
    *((_QWORD *)v132 + 2) = v125;
    *v126 = (uint64_t *)v132;
    if (*v201)
    {
      v201 = (uint64_t **)*v201;
      v132 = (char *)*v126;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v202, (uint64_t *)v132);
    v121 = (unsigned int **)*((_QWORD *)&v198 + 1);
    ++v203;
LABEL_223:
    if (v121 >= v199)
    {
      v134 = std::vector<realityio::WrappedRERef<REAsset *>>::__push_back_slow_path<realityio::WrappedRERef<REAsset *> const&>((uint64_t *)&v198, (uint64_t *)&v217);
    }
    else
    {
      v133 = v217;
      *v121 = v217;
      if (v133)
        RERetain();
      v134 = (uint64_t)(v121 + 1);
    }
    *((_QWORD *)&v198 + 1) = v134;
    goto LABEL_229;
  }
LABEL_237:
  if (BYTE3(v191))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v222);
    v137 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a7 + 1));
    v138 = *(char *)(v137 + 23);
    if (v138 >= 0)
      v139 = v137;
    else
      v139 = *(_QWORD *)v137;
    if (v138 >= 0)
      v140 = *(unsigned __int8 *)(v137 + 23);
    else
      v140 = *(_QWORD *)(v137 + 8);
    v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v223, v139, v140);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)"_vertexColor", 12);
    std::stringbuf::str();
    v217 = 0;
    if (REAssetManagerCreateAssetHandle())
    {
      if (REMaterialAssetBuilderCreate())
      {
        REMaterialAssetBuilderSetName();
        REMaterialAssetBuilderSetMaterialDefinition();
        REMaterialAssetBuilderSetFunctionConstant();
        REMaterialAssetBuilderSetFunctionConstant();
        v142 = (unsigned int *)REAssetManagerMaterialAssetBuilderBuildAsync();
        v220.__begin_ = v142;
        if (v142)
        {
          RERetain();
          v217 = v142;
          v220.__begin_ = 0;
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v220);
          RERelease();
        }
        else
        {
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v220);
        }
        RERelease();
      }
      RERelease();
    }
    if (SBYTE7(v235) < 0)
      operator delete((void *)v234);
    if (!v217)
      goto LABEL_265;
    if (*(_QWORD *)(*(_QWORD *)(a5 + 16) + 40))
    {
      realityio::LiveSceneManager::queueForDeferredAssetLoad(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 40), (uint64_t *)&v217);
      v189 = v217;
      if (!v217)
        goto LABEL_259;
    }
    else
    {
      v189 = v217;
    }
    RERetain();
LABEL_259:
    realityio::Builder::addAsset(a7, (uint64_t *)&v189, 0);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v189);
    v143 = *((_QWORD *)&v198 + 1);
    *((_QWORD *)&v200 + 1) = (uint64_t)(*((_QWORD *)&v198 + 1) - v198) >> 3;
    if (*((_QWORD *)&v198 + 1) >= (unint64_t)v199)
    {
      v145 = std::vector<realityio::WrappedRERef<REAsset *>>::__push_back_slow_path<realityio::WrappedRERef<REAsset *> const&>((uint64_t *)&v198, (uint64_t *)&v217);
    }
    else
    {
      v144 = v217;
      **((_QWORD **)&v198 + 1) = v217;
      if (v144)
        RERetain();
      v145 = v143 + 8;
    }
    *((_QWORD *)&v198 + 1) = v145;
LABEL_265:
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v217);
    *(_QWORD *)&v222 = *v109;
    v146 = (unsigned int **)v109[9];
    *(_QWORD *)((char *)&v222 + *(_QWORD *)(v222 - 24)) = v109[8];
    v223 = v146;
    v224 = MEMORY[0x24BEDB848] + 16;
    if (v230 < 0)
      operator delete(v229);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2348B4DA4](v231);
  }
  if (BYTE2(v191))
  {
    *(_QWORD *)&v222 = *(_QWORD *)(*(_QWORD *)(a5 + 16) + 248);
    if ((_QWORD)v222)
    {
      RERetain();
      if ((_QWORD)v222)
      {
        v147 = *((_QWORD *)&v198 + 1);
        *(_QWORD *)&v200 = (uint64_t)(*((_QWORD *)&v198 + 1) - v198) >> 3;
        if (*((_QWORD *)&v198 + 1) >= (unint64_t)v199)
        {
          v148 = std::vector<realityio::WrappedRERef<REAsset *>>::__push_back_slow_path<realityio::WrappedRERef<REAsset *> const&>((uint64_t *)&v198, (uint64_t *)&v222);
        }
        else
        {
          **((_QWORD **)&v198 + 1) = v222;
          RERetain();
          v148 = v147 + 8;
        }
        *((_QWORD *)&v198 + 1) = v148;
        v149 = *(_QWORD *)(*(_QWORD *)(a5 + 16) + 40);
        if (v149)
          realityio::LiveSceneManager::queueForDeferredAssetLoad(v149, (uint64_t *)&v222);
      }
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v222);
  }
  v150 = v194;
  if (v194 != (uint64_t *)v195)
  {
    do
    {
      MaterialIndexAssignor::updateSentinelToRealIndex((uint64_t)(v150 + 6), -2, v200);
      MaterialIndexAssignor::updateSentinelToRealIndex((uint64_t)(v150 + 6), -3, SDWORD2(v200));
      if (*((_DWORD *)v150 + 15) == -4)
      {
        v151 = v202;
        if (v202)
        {
          v152 = *((unsigned __int8 *)v150 + 128);
          v154 = *((float *)v150 + 28);
          v153 = *((float *)v150 + 29);
          v155 = &v202;
          v157 = *((float *)v150 + 30);
          v156 = *((float *)v150 + 31);
          do
          {
            v158 = *((unsigned __int8 *)v151 + 48);
            if (v158 < v152
              || v158 == v152
              && ((v159 = *((_OWORD *)v151 + 2), *(float *)&v159 < v154)
               || *(float *)&v159 == v154
               && (*((float *)&v159 + 1) < v153
                || *((float *)&v159 + 1) == v153
                && (*((float *)&v159 + 2) < v157
                 || (*((float *)&v159 + 2) == v157 ? (v160 = *((float *)&v159 + 3) < v156) : (v160 = 0), v160)))))
            {
              ++v151;
            }
            else
            {
              v155 = (uint64_t **)v151;
            }
            v151 = (uint64_t *)*v151;
          }
          while (v151);
          if (v155 != &v202)
          {
            v161 = *((unsigned __int8 *)v155 + 48);
            if (v161 <= v152)
            {
              if (v161 != v152
                || (v162 = *((_OWORD *)v155 + 2), v154 >= *(float *)&v162)
                && (v154 != *(float *)&v162
                 || v153 >= *((float *)&v162 + 1)
                 && (v153 != *((float *)&v162 + 1)
                  || v157 >= *((float *)&v162 + 2) && (v157 != *((float *)&v162 + 2) || v156 >= *((float *)&v162 + 3)))))
              {
                *((_DWORD *)v150 + 15) = v155[8];
              }
            }
          }
        }
      }
      v163 = (uint64_t *)v150[1];
      if (v163)
      {
        do
        {
          v164 = v163;
          v163 = (uint64_t *)*v163;
        }
        while (v163);
      }
      else
      {
        do
        {
          v164 = (uint64_t *)v150[2];
          v80 = *v164 == (_QWORD)v150;
          v150 = v164;
        }
        while (!v80);
      }
      v150 = v164;
    }
    while (v164 != (uint64_t *)v195);
  }
  MaterialIndexAssignor::MaterialIndexAssignor((uint64_t)&v222, (uint64_t)&v191);
  *v170 = 1;
  MaterialIndexAssignor::MaterialIndexAssignor((uint64_t)(v170 + 8), (uint64_t)&v222);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base((uint64_t)&v233, v165);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base((uint64_t)&v232, v166);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(v231[0]);
  *(_QWORD *)&v234 = &v228;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
  std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(v227);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy((_QWORD *)v225[1]);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(v223);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base((uint64_t)v205, v167);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base((uint64_t)v204, v168);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(v202);
  *(_QWORD *)&v222 = &v198;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
  std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(v197[0]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(v195[0]);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(v193[0]);
}

void sub_230122784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,__int16 a44)
{
  void *v45;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&STACK[0x658]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x690]);
  realityio::types::Ok<MaterialIndexAssignor>::~Ok((uint64_t)&a44, v45);
  _Unwind_Resume(a1);
}

BOOL realityio::getRealityKitStageMetadata<BOOL>(uint64_t *a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  BOOL v4;
  int v5;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::VtValue *ValueAtPath;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::VtValue *v16;
  pxrInternal__aapl__pxrReserved__::VtValue *v17;
  uint64_t v18;
  void *__p;
  char v21;
  void *v22;
  unsigned int *v23;
  char v24;
  uint64_t v25;

  v3 = a3;
  if (*a1)
    v4 = *a2 == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(unsigned __int8 *)a3;
  }
  else
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v7);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v22);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v8);
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)v23;
    if (v23)
    {
      v10 = v23 + 2;
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v9 + 8))(v9);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    std::operator+<char>();
    ValueAtPath = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
    v14 = ValueAtPath;
    if (ValueAtPath && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(ValueAtPath))
    {
      v15 = *((_QWORD *)v14 + 1);
      if ((v15 & 4) != 0)
        v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v14);
      v5 = *(unsigned __int8 *)v14;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfStringToLower();
      v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      v17 = v16;
      if (v16 && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(v16))
      {
        v18 = *((_QWORD *)v17 + 1);
        if ((v18 & 4) != 0)
          v3 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(v17);
        else
          v3 = v17;
      }
      v5 = *(unsigned __int8 *)v3;
      if (v21 < 0)
        operator delete(__p);
    }
    if (v24 < 0)
      operator delete(v22);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v25, 0);
  }
  return v5 != 0;
}

void sub_230122CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)(v21 - 24), 0);
  _Unwind_Resume(a1);
}

void sub_230122CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a14)
  {
    v14 = a14 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a14 + 8))(a14);
  }
  JUMPOUT(0x230122CE4);
}

void std::deque<int>::push_back(_QWORD *a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 7) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x400)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v31);
        v34 = v33;
        v35 = operator new(0x1000uLL);
        v36 = &v32[8 * v24];
        v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          v38 = 8 * v24;
          if (v6 < 1)
          {
            v73 = v35;
            v74 = v38 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v75);
            v36 = &v76[8 * (v75 >> 2)];
            v37 = &v76[8 * v77];
            if (v32)
              operator delete(v32);
            v32 = v76;
            v35 = v73;
          }
          else
          {
            v39 = v38 >> 3;
            if (v39 >= -1)
              v40 = v39 + 1;
            else
              v40 = v39 + 2;
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(_QWORD *)v36 = v35;
        v78 = v36 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32)
                v84 = 1;
              else
                v84 = (v37 - v32) >> 2;
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v84);
              v87 = v85;
              v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v32;
              v88 = v78 == v32;
              v78 = v36;
              if (!v88)
              {
                v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v36;
                v92 = (uint64_t *)v32;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v37 = &v85[8 * v86];
              if (v32)
                operator delete(v32);
              v32 = v87;
            }
            else
            {
              v80 = (v37 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v36 = &v32[8 * (v81 >> 1)];
              v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v36 - 1) = v94;
          v36 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v25 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v16 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v16)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 1024;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = a1[4] + v8;
  }
  *(_DWORD *)(*(_QWORD *)&v4[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_2301231E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t realityio::MeshAssetBuilder::clear(realityio::MeshAssetBuilder *this, realityio::Inputs *a2)
{
  std::__shared_weak_count *v4;
  std::mutex *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void **v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  realityio::ImportSession *v18;
  pxrInternal__aapl__pxrReserved__::UsdStage *v19;
  unsigned int *v20;
  unsigned int v21;
  realityio::MeshAssetBuilder *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  const void **v27;
  unint64_t *v28;
  unint64_t v29;
  int v31;
  int v32;
  std::string v33;
  std::string __p;
  std::mutex *v35;
  std::__shared_weak_count *v36;
  char v37[8];
  __int128 v38;
  std::string v39;
  __int128 v40;
  std::string v41;
  uint64_t v42;
  __int128 v43;
  std::string v44;

  v5 = (std::mutex *)*((_QWORD *)this + 2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v35 = v5;
  v36 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (const void **)realityio::MeshAssetBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>(v5, v8, (uint64_t)&v42);
  if ((_BYTE)v42)
  {
    v9 = v43;
    if (*((_QWORD *)&v43 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      do
        v12 = __ldxr(v10);
      while (__stxr(v12 + 1, v10));
      v37[0] = 1;
      v38 = v9;
      do
        v13 = __ldaxr(v10);
      while (__stlxr(v13 - 1, v10));
      if (!v13)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 16))(*((_QWORD *)&v9 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
      }
    }
    else
    {
      v37[0] = 1;
      v38 = (unint64_t)v43;
    }
  }
  else
  {
    v40 = v43;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v41, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
    else
      v41 = v44;
    v37[0] = 0;
    v38 = v40;
    v39 = v41;
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v42);
  if (v36)
  {
    v14 = &v36->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v37[0])
  {
    v16 = v38;
    v17 = (_DWORD *)(v38 + 160);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    {
      if (*(char *)(v38 + 135) < 0)
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v38 + 112), *(_QWORD *)(v38 + 120));
      else
        v33 = *(std::string *)(v38 + 112);
      if (*(char *)(v16 + 159) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 136), *(_QWORD *)(v16 + 144));
      else
        __p = *(std::string *)(v16 + 136);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, v17);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)(v16 + 164));
      realityio::ImportSession::assetDescriptorCacheEject((__int128 *)&v33, &v31);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
    }
    v18 = (realityio::ImportSession *)*((_QWORD *)a2 + 5);
    v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v19, (realityio::Inputs *)((char *)a2 + 32));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v42, &v40);
    realityio::ImportSession::clearMeshAsset(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    if ((v44.__r_.__value_.__s.__data_[0] & 7) != 0)
    {
      v20 = (unsigned int *)(v44.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43 + 8);
    v22 = (realityio::MeshAssetBuilder *)v43;
    if ((_QWORD)v43)
      v22 = (realityio::MeshAssetBuilder *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v43);
    v24 = *((_QWORD *)this + 2);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    v42 = v24;
    *(_QWORD *)&v43 = v23;
    if (v23)
    {
      v25 = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = (const void **)realityio::MeshAssetBuilder::kOutputName(v22);
    std::mutex::lock((std::mutex *)(v24 + 64));
    if (v24 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v24 + 40, v27))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v24 + 40), v27);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((_QWORD *)v24, (unsigned __int8 *)v27);
    std::mutex::unlock((std::mutex *)(v24 + 64));
    if (v23)
    {
      v28 = (unint64_t *)&v23->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  return realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v37);
}

void sub_2301235C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a16 < 0)
    operator delete(__p);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void realityio::MeshAssetBuilder::~MeshAssetBuilder(realityio::MeshAssetBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t MaterialIndexAssignor::updateSentinelToRealIndex(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  unint64_t v5;
  _DWORD *v6;

  if (*(_DWORD *)(result + 12) == a2)
  {
    *(_DWORD *)(result + 12) = a3;
    v3 = *(_QWORD *)(result + 24) - *(_QWORD *)(result + 16);
    if (v3 && *(_BYTE *)(result + 9) == 0)
    {
      v5 = v3 / 24;
      v6 = *(_DWORD **)(result + 40);
      if (v5 <= 1)
        v5 = 1;
      do
      {
        if (*v6 == a2)
          *v6 = a3;
        ++v6;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t realityio::types::Ok<MaterialIndexAssignor>::~Ok(uint64_t a1, void *a2)
{
  void *v3;
  void **v5;

  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base(a1 + 704, a2);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base(a1 + 144, v3);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(_QWORD **)(a1 + 128));
  v5 = (void **)(a1 + 80);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(*(_QWORD **)(a1 + 64));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(*(_QWORD **)(a1 + 40));
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(_QWORD **)(a1 + 16));
  return a1;
}

void std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(*a1);
    std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<MaterialIndexAssignor::MaterialKey const,unsigned long>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<MaterialIndexAssignor::MaterialKey const,unsigned long>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void MaterialIndexAssignor::MaterialKey::~MaterialKey(MaterialIndexAssignor::MaterialKey *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,MaterialIndexAssignor::GPrimInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,MaterialIndexAssignor::GPrimInfo>,0>(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 32);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void MaterialIndexAssignor::GPrimInfo::~GPrimInfo(MaterialIndexAssignor::GPrimInfo *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 16);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t std::pair<MaterialIndexAssignor::MaterialKey,unsigned long>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t *std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v5;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (uint64_t *)(a1 + 8);
  do
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2)|| v3[4] == *(_QWORD *)a2 && *((unsigned __int8 *)v3 + 40) < a2[8])
    {
      ++v3;
    }
    else
    {
      v5 = v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == v5
    || (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4)) & 1) != 0|| *(_QWORD *)a2 == v5[4] && a2[8] < *((unsigned __int8 *)v5 + 40))
  {
    return v2;
  }
  return v5;
}

uint64_t std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::__emplace_unique_key_args<MaterialIndexAssignor::MaterialKey,std::pair<MaterialIndexAssignor::MaterialKey,unsigned long>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t result;
  _DWORD *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = (uint64_t *)(a1 + 1);
LABEL_13:
    v11 = operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11 + 8, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11 + 9, (_DWORD *)(a3 + 4));
    *((_BYTE *)v11 + 40) = *(_BYTE *)(a3 + 8);
    *((_QWORD *)v11 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v8;
    *v6 = v11;
    v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      v11 = (_DWORD *)*v6;
    }
    result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      v8 = v5;
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4);
      if ((pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4)) & 1) == 0&& (*(_QWORD *)a2 != *(_QWORD *)v9 || a2[8] >= *((unsigned __int8 *)v8 + 40)))
      {
        break;
      }
      v5 = (uint64_t *)*v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_13;
    }
    result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    if ((result & 1) == 0 && (*(_QWORD *)v9 != *(_QWORD *)a2 || *((unsigned __int8 *)v8 + 40) >= a2[8]))
      break;
    v6 = v8 + 1;
    v5 = (uint64_t *)v8[1];
    if (!v5)
      goto LABEL_13;
  }
  if (!*v6)
    goto LABEL_13;
  return result;
}

uint64_t MaterialIndexAssignor::registerNonSubdGPrim(uint64_t **this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t result;
  uint64_t v5;
  int BoundSubsetsAndCoverage;
  uint64_t v7;
  char v8;
  __int128 v9;
  std::vector<unsigned int>::size_type v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t *v15;
  uint64_t *v17;
  int v18;
  int *v19;
  unint64_t v20;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh *v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v30;
  float32x4_t **v31;
  float32x4_t *v32;
  unsigned int v33;
  float32x4_t v34;
  unsigned __int8 v36;
  unsigned __int8 v37;
  _DWORD *v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  uint64_t *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  __int128 v53;
  __int128 v54;
  unsigned int *v55;
  __int128 v56;
  unsigned __int8 v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  int v64;
  int v65;
  char v66;
  _BYTE v67[24];
  uint64_t v68;
  char v69;
  uint64_t v70;
  void **v71;
  __int128 v72;
  __int128 v73;
  unsigned int *v74;
  void *__p;
  void *v76;
  int v77;
  int v78;
  __int16 v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)this);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  result = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (!(_DWORD)result)
    return result;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v71);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v77, &v71);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v78, (_DWORD *)&v71 + 1);
  v79 = 0;
  v80 = -1;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v5 = MEMORY[0x24BEE9D10];
  v71 = (void **)(MEMORY[0x24BEE9D10] + 16);
  BoundSubsetsAndCoverage = realityio::getBoundSubsetsAndCoverage((uint64_t)&v71, (void **)&v81, (BOOL *)((unint64_t)&v77 | 9));
  MEMORY[0x2348B1BE8](&v71);
  v7 = MEMORY[0x24BEE9DC8];
  if (!BoundSubsetsAndCoverage)
    goto LABEL_14;
  v8 = HIBYTE(v79);
  v9 = v81;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v81 + 1) - v81) >> 3);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)&v82 + 8), v10, &MaterialIndexAssignor::kInvalidMaterialIndex);
  v51 = v8 ^ 1;
  if (*((_QWORD *)&v9 + 1) != (_QWORD)v9)
  {
    v11 = 0;
    v12 = 0;
    if (v10 <= 1)
      v10 = 1;
    v13 = (void **)(v7 + 16);
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *(_QWORD *)&v73 = 0;
      v71 = v13;
      if (!atomic_load(MEMORY[0x24BEE8128]))
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v53, &v58);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v68, &v58);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v68 + 1, &v59);
      v69 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v58);
      v15 = std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)(this + 7), (unsigned __int8 *)&v68);
      if (this + 8 == (uint64_t **)v15)
        v51 = 1;
      else
        *(_DWORD *)(*((_QWORD *)&v82 + 1) + 4 * v12) = v15[6];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
      MEMORY[0x2348B20B0](&v53);
      MEMORY[0x2348B24C4](&v71);
      ++v12;
      v11 += 24;
    }
    while (v10 != v12);
  }
  v5 = MEMORY[0x24BEE9D10];
  v7 = MEMORY[0x24BEE9DC8];
  if ((v51 & 1) != 0)
  {
LABEL_14:
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v70 = 0;
    v68 = v7 + 16;
    if (!atomic_load(MEMORY[0x24BEE8128]))
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData(MEMORY[0x24BEE8128]);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v67, &v71);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v64, &v71);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v65, (_DWORD *)&v71 + 1);
    v66 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
    v17 = std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::find<MaterialIndexAssignor::MaterialKey>((uint64_t)(this + 7), (unsigned __int8 *)&v64);
    if (this + 8 != (uint64_t **)v17)
    {
      v18 = *((_DWORD *)v17 + 12);
      v80 = v18;
      if (BoundSubsetsAndCoverage)
      {
        v19 = (int *)*((_QWORD *)&v82 + 1);
        if ((_QWORD)v83 != *((_QWORD *)&v82 + 1))
        {
          v20 = (uint64_t)(v83 - *((_QWORD *)&v82 + 1)) >> 2;
          if (v20 <= 1)
            v20 = 1;
          do
          {
            if (*v19 == -1)
              *v19 = v18;
            ++v19;
            --v20;
          }
          while (v20);
        }
      }
LABEL_92:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v64);
      MEMORY[0x2348B20B0](v67);
      MEMORY[0x2348B24C4](&v68);
      goto LABEL_93;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v63[0] = v5 + 16;
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v21);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v63);
      if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
        && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v71))
      {
        *((_BYTE *)this + 3) = 1;
        v80 = -3;
        if (BoundSubsetsAndCoverage)
        {
          v22 = (_DWORD *)*((_QWORD *)&v82 + 1);
          if ((_QWORD)v83 != *((_QWORD *)&v82 + 1))
          {
            v23 = (uint64_t)(v83 - *((_QWORD *)&v82 + 1)) >> 2;
            if (v23 <= 1)
              v23 = 1;
            do
            {
              if (*v22 == -1)
                *v22 = -3;
              ++v22;
              --v23;
            }
            while (v23);
          }
        }
      }
      else
      {
        *((_BYTE *)this + 2) = 1;
        v80 = -2;
        if (BoundSubsetsAndCoverage)
        {
          v38 = (_DWORD *)*((_QWORD *)&v82 + 1);
          if ((_QWORD)v83 != *((_QWORD *)&v82 + 1))
          {
            v39 = (uint64_t)(v83 - *((_QWORD *)&v82 + 1)) >> 2;
            if (v39 <= 1)
              v39 = 1;
            do
            {
              if (*v38 == -1)
                *v38 = -2;
              ++v38;
              --v39;
            }
            while (v39);
          }
        }
      }
      if ((BYTE8(v73) & 7) != 0)
      {
        v40 = (unsigned int *)(*((_QWORD *)&v73 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      if ((v73 & 7) != 0)
      {
        v42 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72 + 8);
      v44 = v72;
      if (!(_QWORD)v72)
        goto LABEL_91;
      goto LABEL_90;
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorAttr((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v63);
    v57 = 0;
    v56 = xmmword_230204D00;
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v58)
      && pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v58))
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v58, (uint64_t)&v71);
      if ((_BYTE)v71)
      {
        v53 = v72;
        v54 = v73;
        v55 = v74;
        if (v74)
        {
          v24 = (unint64_t *)(v74 - 4);
          if (*((_QWORD *)&v54 + 1))
            v24 = (unint64_t *)*((_QWORD *)&v54 + 1);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        if ((_QWORD)v53)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53);
          v52 = *v55;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53);
          v50 = v55[1];
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53);
          __asm { FMOV            V0.4S, #1.0 }
          _Q0.i64[0] = __PAIR64__(v50, v52);
          _Q0.i32[2] = v55[2];
          v56 = (__int128)_Q0;
        }
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v53);
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)&v71);
    }
    realityio::assignGamutFromAttribute((const void **)&v56, &v57, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v58);
    v80 = -4;
    v84 = (float32x4_t)v56;
    v85.i8[0] = v57;
    v31 = (float32x4_t **)(this + 2);
    v30 = this[2];
    if (!v30)
    {
      v32 = (float32x4_t *)(this + 2);
      goto LABEL_100;
    }
    while (1)
    {
      while (1)
      {
        v32 = (float32x4_t *)v30;
        v33 = *((unsigned __int8 *)v30 + 48);
        if (v33 <= v57)
          break;
LABEL_49:
        v30 = (uint64_t *)v32->i64[0];
        v31 = (float32x4_t **)v32;
        if (!v32->i64[0])
          goto LABEL_100;
      }
      if (v33 == v57)
      {
        v34 = v32[2];
        if ((vmovn_s32(vcgtq_f32(v34, (float32x4_t)v56)).u8[0] & 1) != 0)
          goto LABEL_49;
        if ((vmovn_s32(vceqq_f32((float32x4_t)v56, v34)).u8[0] & 1) == 0)
        {
          v36 = vmovn_s32(vcgtq_f32((float32x4_t)v56, v34)).u8[0];
LABEL_70:
          if ((v36 & 1) == 0)
            goto LABEL_103;
          goto LABEL_71;
        }
        if (*((float *)&v56 + 1) < v34.f32[1])
          goto LABEL_49;
        if (*((float *)&v56 + 1) != v34.f32[1])
        {
          if ((vmovn_s32(vcgtq_f32((float32x4_t)v56, v34)).u8[0] & 1) == 0 && v34.f32[1] >= *((float *)&v56 + 1))
            goto LABEL_103;
          goto LABEL_71;
        }
        if (*((float *)&v56 + 2) < v34.f32[2])
          goto LABEL_49;
        if (*((float *)&v56 + 2) == v34.f32[2] && *((float *)&v56 + 3) < v34.f32[3])
          goto LABEL_49;
        v36 = *((float *)&v56 + 2) == v34.f32[2];
        v37 = vmovn_s32(vcgtq_f32((float32x4_t)v56, v34)).u8[0];
        if (v34.f32[3] >= *((float *)&v56 + 3))
          v36 = 0;
        if ((v37 & 1) == 0 && v34.f32[1] >= *((float *)&v56 + 1) && v34.f32[2] >= *((float *)&v56 + 2))
          goto LABEL_70;
      }
      else if (v33 >= v57)
      {
        goto LABEL_103;
      }
LABEL_71:
      v30 = (uint64_t *)v32->i64[1];
      if (!v30)
      {
        v31 = (float32x4_t **)&v32->i64[1];
LABEL_100:
        v45 = (float32x4_t *)operator new(0x40uLL);
        v46 = v85;
        v45[2] = v84;
        v45[3] = v46;
        v45->i64[0] = 0;
        v45->i64[1] = 0;
        v45[1].i64[0] = (uint64_t)v32;
        *v31 = v45;
        v47 = (uint64_t *)*this[1];
        if (v47)
        {
          this[1] = v47;
          v45 = *v31;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[2], (uint64_t *)v45);
        this[3] = (uint64_t *)((char *)this[3] + 1);
LABEL_103:
        if ((v62 & 7) != 0)
        {
          v48 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
        v44 = v60;
        if (!v60)
        {
LABEL_91:
          MEMORY[0x2348B1BE8](v63);
          goto LABEL_92;
        }
LABEL_90:
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v44);
        goto LABEL_91;
      }
    }
  }
LABEL_93:
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v68);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo,0>((uint64_t)&v71, &v68, (uint64_t)&v77);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>(this + 4, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (uint64_t)&v71);
  if (__p)
  {
    v76 = __p;
    operator delete(__p);
  }
  *(_QWORD *)&v53 = (char *)&v73 + 8;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
  if (*((_QWORD *)&v82 + 1))
  {
    *(_QWORD *)&v83 = *((_QWORD *)&v82 + 1);
    operator delete(*((void **)&v82 + 1));
  }
  v71 = (void **)&v81;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v71);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v77);
}

void sub_2301243F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,int a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>::~pair(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 32);
  std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  char *v5;
  char **v6;
  char **v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t result;
  char *v11;
  __int128 v12;
  uint64_t *v13;

  v6 = (char **)(a1 + 1);
  v5 = (char *)a1[1];
  if (!v5)
  {
    v8 = (char **)(a1 + 1);
LABEL_10:
    v11 = (char *)operator new(0x90uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 8, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 9, (_DWORD *)(a3 + 4));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 12, (_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 13, (_DWORD *)(a3 + 20));
    *((_QWORD *)v11 + 7) = *(_QWORD *)(a3 + 24);
    *((_OWORD *)v11 + 4) = *(_OWORD *)(a3 + 32);
    *((_QWORD *)v11 + 10) = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_OWORD *)(v11 + 88) = *(_OWORD *)(a3 + 56);
    *((_QWORD *)v11 + 13) = *(_QWORD *)(a3 + 72);
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    v12 = *(_OWORD *)(a3 + 96);
    *((_OWORD *)v11 + 7) = *(_OWORD *)(a3 + 80);
    *((_OWORD *)v11 + 8) = v12;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v8;
    *v6 = v11;
    v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      v11 = *v6;
    }
    result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return result;
  }
  while (1)
  {
    while (1)
    {
      v8 = (char **)v5;
      v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 32);
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 32)))break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    result = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, a2);
    if (!(_DWORD)result)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  if (!*v6)
    goto LABEL_10;
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo,0>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v6;
  __int128 v7;

  v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a3 + 4));
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 96) = v7;
  return a1;
}

uint64_t MaterialIndexAssignor::MaterialIndexAssignor(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v45;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a1 + 16;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *(_QWORD *)(a2 + 8) = v4;
    *v4 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v6;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = (_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a1 + 40;
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    *(_QWORD *)(a2 + 32) = v8;
    *v8 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v10;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = (_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v13;
  v14 = a1 + 64;
  v15 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v15;
  if (v15)
  {
    *(_QWORD *)(v13 + 16) = v14;
    *(_QWORD *)(a2 + 56) = v12;
    *v12 = 0;
    *(_QWORD *)(a2 + 72) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v14;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v16 = (_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v17;
  v18 = a1 + 128;
  v19 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v19;
  if (v19)
  {
    *(_QWORD *)(v17 + 16) = v18;
    *(_QWORD *)(a2 + 120) = v16;
    *v16 = 0;
    *(_QWORD *)(a2 + 136) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 120) = v18;
  }
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_QWORD *)(a1 + 168) = 0;
  v20 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  v20[3] = 0;
  *v20 = 0;
  *(_QWORD *)(a1 + 176) = v20;
  *(_DWORD *)(a1 + 188) = 1082130432;
  __dmb(0xBu);
  *(_QWORD *)(a1 + 152) = 8;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v45 = *(_QWORD *)(a1 + 176);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(a1 + 144, 0, &v45);
  if (a1 != a2)
  {
    v21 = 0;
    v22 = *(_WORD *)(a1 + 144);
    *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
    *(_WORD *)(a2 + 144) = v22;
    v23 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = v23;
    v24 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 176) = v24;
    v25 = a2 + 192;
    v26 = a1 + 192;
    do
    {
      v27 = *(_QWORD *)(v26 + v21);
      __dmb(0xBu);
      v28 = *(_QWORD *)(v25 + v21);
      __dmb(0xBu);
      *(_QWORD *)(v26 + v21) = v28;
      __dmb(0xBu);
      *(_QWORD *)(v25 + v21) = v27;
      v21 += 8;
    }
    while (v21 != 512);
    v45 = *(_QWORD *)(a1 + 152);
    v29 = *(_QWORD *)(a2 + 152);
    __dmb(0xBu);
    *(_QWORD *)(a1 + 152) = v29;
    v30 = v45;
    __dmb(0xBu);
    *(_QWORD *)(a2 + 152) = v30;
    v31 = *(_DWORD *)(a1 + 188);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
    *(_DWORD *)(a2 + 188) = v31;
  }
  *(_WORD *)(a1 + 704) = *(_WORD *)(a2 + 704);
  *(_QWORD *)(a1 + 728) = 0;
  v32 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  v32[3] = 0;
  *v32 = 0;
  *(_QWORD *)(a1 + 736) = v32;
  *(_DWORD *)(a1 + 748) = 1082130432;
  __dmb(0xBu);
  *(_QWORD *)(a1 + 712) = 8;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  v45 = *(_QWORD *)(a1 + 736);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>,realityio::UsdLayerMutexTracker::SdfLayerHandleHashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const,realityio::UsdLayerMutexTracker::StdMutexFakeCopyWrapper>>,false>>::set_bucket(a1 + 704, 0, &v45);
  if (a1 != a2)
  {
    v33 = 0;
    v34 = *(_WORD *)(a1 + 704);
    *(_WORD *)(a1 + 704) = *(_WORD *)(a2 + 704);
    *(_WORD *)(a2 + 704) = v34;
    v35 = *(_QWORD *)(a1 + 728);
    *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
    *(_QWORD *)(a2 + 728) = v35;
    v36 = *(_QWORD *)(a1 + 736);
    *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
    *(_QWORD *)(a2 + 736) = v36;
    v37 = a2 + 752;
    v38 = a1 + 752;
    do
    {
      v39 = *(_QWORD *)(v38 + v33);
      __dmb(0xBu);
      v40 = *(_QWORD *)(v37 + v33);
      __dmb(0xBu);
      *(_QWORD *)(v38 + v33) = v40;
      __dmb(0xBu);
      *(_QWORD *)(v37 + v33) = v39;
      v33 += 8;
    }
    while (v33 != 512);
    v45 = *(_QWORD *)(a1 + 712);
    v41 = *(_QWORD *)(a2 + 712);
    __dmb(0xBu);
    *(_QWORD *)(a1 + 712) = v41;
    v42 = v45;
    __dmb(0xBu);
    *(_QWORD *)(a2 + 712) = v42;
    v43 = *(_DWORD *)(a1 + 748);
    *(_DWORD *)(a1 + 748) = *(_DWORD *)(a2 + 748);
    *(_DWORD *)(a2 + 748) = v43;
  }
  return a1;
}

void sub_230124B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v16;

  tbb::interface5::internal::split_ordered_list<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>>::~split_ordered_list(v9 + 720);
  tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base(v10, v16);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*v14);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(*v13);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(*v12);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*v11);
  _Unwind_Resume(a1);
}

uint64_t realityio::TexcoordID::TexcoordID(uint64_t a1, _QWORD *a2, int a3, char a4)
{
  uint64_t *v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  std::string v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;
  uint64_t v22;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v8 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  realityio::TexcoordID::setIndex((realityio::TexcoordID *)a1, a3);
  pxrInternal__aapl__pxrReserved__::TfToken::operator=(v8, a2);
  *(_BYTE *)(a1 + 40) = a4;
  if (*v8)
  {
    realityio::TexcoordID::computeNormalizedName((realityio::TexcoordID *)a1);
    if (a3 == -1)
      realityio::TexcoordID::getIndexFromName((realityio::TexcoordID *)a1);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "UV");
    std::to_string(&v18, a3);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v18;
    else
      v9 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    else
      size = v18.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v19, (const std::string::value_type *)v9, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v21 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x2348B2764](&v22, __p);
    if (&v22 == v8)
    {
      if ((v22 & 7) != 0)
      {
        v15 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
    }
    else
    {
      if ((*v8 & 7) != 0)
      {
        v13 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      *v8 = v22;
      v22 = 0;
    }
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_230124D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  _QWORD *v27;
  unsigned int *v29;
  unsigned int v30;

  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v26 + 39) < 0)
    operator delete(*(void **)(v26 + 16));
  if ((*v27 & 7) != 0)
  {
    v29 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<true,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v6;

  v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 3, a3 + 1);
  return a1;
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  unsigned int **result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::ShadowBuilderTokens_StaticTokenType::~ShadowBuilderTokens_StaticTokenType((realityio::tokens::ShadowBuilderTokens_StaticTokenType *)result);
    MEMORY[0x2348B4E1C]();
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SphereMeshBuilderTokens_StaticTokenType>::New()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new();
  realityio::tokens::SphereMeshBuilderTokens_StaticTokenType::SphereMeshBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_230124EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40FC86440BLL);
  _Unwind_Resume(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(unint64_t *a1)
{
  unsigned int **result;

  result = pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType>::New();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    realityio::tokens::ShadowBuilderTokens_StaticTokenType::~ShadowBuilderTokens_StaticTokenType((realityio::tokens::ShadowBuilderTokens_StaticTokenType *)result);
    MEMORY[0x2348B4E1C]();
  }
  return (unsigned int **)atomic_load(a1);
}

unsigned int **pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType>::New()
{
  unsigned int **v0;

  v0 = (unsigned int **)operator new();
  realityio::tokens::CubeMeshBuilderTokens_StaticTokenType::CubeMeshBuilderTokens_StaticTokenType(v0);
  return v0;
}

void sub_230124F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2348B4E1C](v1, 0x60C40FC86440BLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF8EA8;
  return result;
}

void std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF8EA8;
}

void std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  __int128 v8;
  unint64_t v9;
  realityio::SkeletonPoseDefinitionBuilder *v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  realityio::MaterialAssetBuilder *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  realityio::tokens::OutputIdentifiers_StaticTokenType *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string v40;
  std::string v41;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName((realityio::MeshModelDescriptorBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v6 = (std::__shared_weak_count *)operator new(0x48uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8F18;
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
  }
  else
  {
    v8 = *(_OWORD *)v4;
    v40.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v8;
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v41, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    v41 = v40;
  realityio::InputDescriptor::InputDescriptor((uint64_t)&v6[1], (__int128 *)&v41, (uint64_t *)Data + 13, 0);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8F68;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v6[1];
  v41.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (realityio::SkeletonPoseDefinitionBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v41);
  size = (std::__shared_weak_count *)v41.__r_.__value_.__l.__size_;
  if (v41.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v41.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v14 = realityio::SkeletonPoseDefinitionBuilder::kOutputName(v10);
  v15 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v15)
    v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v38) = 1;
  std::allocate_shared[abi:ne180100]<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::SkeletonPrimsOnPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v14, (uint64_t *)v15 + 28, (int *)&v38, &v40);
  v16 = (std::__shared_weak_count *)v40.__r_.__value_.__l.__size_;
  if (v40.__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(v40.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (realityio::MaterialAssetBuilder *)realityio::InputsDescriptor::addInputDescriptor(v3, &v40);
  v20 = (std::__shared_weak_count *)v40.__r_.__value_.__l.__size_;
  if (v40.__r_.__value_.__l.__size_)
  {
    v21 = (unint64_t *)(v40.__r_.__value_.__l.__size_ + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = realityio::MaterialAssetBuilder::kMaterialDataName(v19);
  v24 = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v24)
    v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  LODWORD(v36) = 1;
  std::allocate_shared[abi:ne180100]<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor,std::allocator<realityio::MaterialsBoundToMeshesForPrimGeneratingEntityOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v23, (uint64_t *)v24 + 22, (int *)&v36, &v38);
  v36 = v38;
  v37 = v39;
  if (v39)
  {
    v25 = (unint64_t *)&v39->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v36);
  v27 = v37;
  if (v37)
  {
    v28 = (unint64_t *)&v37->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  v30 = v39;
  if (v39)
  {
    v31 = (unint64_t *)&v39->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v16)
  {
    v33 = (unint64_t *)&v16->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_230125398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  void *v31;
  unint64_t v32;

  if (a20 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v31);
  do
    v32 = __ldaxr(v29);
  while (__stlxr(v32 - 1, v29));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::GPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8F18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::GPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF8F18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::GPrimsOnPrimGeneratingEntityOnlyInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void realityio::GPrimsOnPrimGeneratingEntityOnlyInputDescriptor::~GPrimsOnPrimGeneratingEntityOnlyInputDescriptor(realityio::GPrimsOnPrimGeneratingEntityOnlyInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);
  JUMPOUT(0x2348B4E1CLL);
}

void realityio::GPrimsOnPrimGeneratingEntityOnlyInputDescriptor::resolvedPrimPaths(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X2>, const realityio::internal::PrimToEntityMap *a2@<X3>, uint64_t a3@<X8>)
{
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  BOOL v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v8 = (char *)a2 + 48;
  v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2 + 48, a1);
  if ((_QWORD *)((char *)a2 + 56) != v9 && *(_QWORD *)(*((_QWORD *)a2 + 3) + 104 * v9[5] + 24) == *(_QWORD *)a1)
  {
    v10 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v8, a1);
    if ((_QWORD *)((char *)a2 + 56) != v10)
    {
      v11 = *((_QWORD *)a2 + 3);
      if (v11)
      {
        v12 = v10[5];
        v13 = (_QWORD *)(v11 + 104 * v12);
        v14 = (unsigned int *)v13[7];
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a3, vcvtps_u32_f32((float)(unint64_t)(v13[12] + v13[9]) / *(float *)(a3 + 32)));
        v15 = (unsigned int *)(v13 + 8);
        if (v14 != v15)
        {
          do
          {
            std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, v14 + 7, v14 + 7);
            v16 = (unsigned int *)*((_QWORD *)v14 + 1);
            if (v16)
            {
              do
              {
                v17 = v16;
                v16 = *(unsigned int **)v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v17 = (unsigned int *)*((_QWORD *)v14 + 2);
                v18 = *(_QWORD *)v17 == (_QWORD)v14;
                v14 = v17;
              }
              while (!v18);
            }
            v14 = v17;
          }
          while (v17 != v15);
        }
        v19 = v11 + 104 * v12;
        v20 = *(unsigned int **)(v19 + 80);
        v21 = (unsigned int *)(v19 + 88);
        if (v20 != (unsigned int *)(v19 + 88))
        {
          do
          {
            std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, v20 + 7, v20 + 7);
            v22 = (unsigned int *)*((_QWORD *)v20 + 1);
            if (v22)
            {
              do
              {
                v23 = v22;
                v22 = *(unsigned int **)v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                v23 = (unsigned int *)*((_QWORD *)v20 + 2);
                v18 = *(_QWORD *)v23 == (_QWORD)v20;
                v20 = v23;
              }
              while (!v18);
            }
            v20 = v23;
          }
          while (v23 != v21);
        }
      }
    }
  }
}

void sub_2301257B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF8FB8;
  return result;
}

void std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF8FB8;
}

void std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  v4 = realityio::MeshAssetBuilder::kOutputName((realityio::MeshAssetBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)Data + 12, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_230125988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::getAttributeValue<std::string>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1);
    v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<std::string>(a1, (double *)__p, a2);
    v9 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v16, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
    *(_OWORD *)(a2 + 8) = v16;
    v13 = v18;
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 39) = *(_QWORD *)((char *)&v18 + 7);
    LOBYTE(v13) = HIBYTE(v18);
    v18 = 0uLL;
    v17 = 0;
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 47) = v13;
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_230125BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<std::string>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v12;
  std::type_info *v13;
  pxrInternal__aapl__pxrReserved__::VtValue *v14;
  uint64_t v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t v27;
  std::string v28;
  std::string v29;
  void *__p[2];
  std::string::size_type v31;
  std::string v32;
  __int128 v33;
  std::string v34;
  _BYTE v35[8];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) != 0)
  {
    v36 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdAttribute::Get() & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)v35))
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)v35);
        if (*(char *)(v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
        }
        else
        {
          v7 = *(_OWORD *)v6;
          v32.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v7;
        }
        *(_BYTE *)a3 = 1;
        *(std::string *)(a3 + 8) = v32;
        goto LABEL_45;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v35);
      {
        v13 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)v35);
        v14 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v34, (const pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        if (v34.__r_.__value_.__l.__size_)
        {
          v15 = pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>(v14);
          if (*(char *)(v15 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
          }
          else
          {
            v16 = *(_OWORD *)v15;
            v32.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 16);
            *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
          }
          *(_BYTE *)a3 = 1;
          *(std::string *)(a3 + 8) = v32;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
          *(_OWORD *)(a3 + 8) = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
          v27 = v33;
          *(_QWORD *)(a3 + 24) = *((_QWORD *)&v32.__r_.__value_.__l + 2);
          *(_QWORD *)(a3 + 32) = v27;
          *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v33 + 7);
          LOBYTE(v27) = HIBYTE(v33);
          v33 = 0uLL;
          v32.__r_.__value_.__r.__words[2] = 0;
          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 47) = v27;
          if (SHIBYTE(v31) < 0)
            operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v34);
        goto LABEL_45;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
      v25 = v33;
      *(_QWORD *)(a3 + 24) = *((_QWORD *)&v32.__r_.__value_.__l + 2);
      *(_QWORD *)(a3 + 32) = v25;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v33 + 7);
      LOBYTE(v25) = HIBYTE(v33);
      v33 = 0uLL;
      v32.__r_.__value_.__r.__words[2] = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v25;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_45:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v35);
        return;
      }
      v24 = __p[0];
    }
    else
    {
      v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      std::operator+<char>();
      v17 = std::string::append(&v29, ") at the given time: ");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v28, *a2);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v28;
      else
        v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      else
        size = v28.__r_.__value_.__l.__size_;
      v21 = std::string::append(&v34, (const std::string::value_type *)v19, size);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v31 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
      v23 = v33;
      *(_QWORD *)(a3 + 24) = *((_QWORD *)&v32.__r_.__value_.__l + 2);
      *(_QWORD *)(a3 + 32) = v23;
      *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v33 + 7);
      LOBYTE(v23) = HIBYTE(v33);
      v33 = 0uLL;
      v32.__r_.__value_.__r.__words[2] = 0;
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 47) = v23;
      if (SHIBYTE(v31) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_45;
      v24 = (void *)v29.__r_.__value_.__r.__words[0];
    }
    operator delete(v24);
    goto LABEL_45;
  }
  v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (__int128 *)__p);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  v10 = v33;
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v32.__r_.__value_.__l + 2);
  *(_QWORD *)(a3 + 32) = v10;
  *(_QWORD *)(a3 + 39) = *(_QWORD *)((char *)&v33 + 7);
  LOBYTE(v10) = HIBYTE(v33);
  v33 = 0uLL;
  v32.__r_.__value_.__r.__words[2] = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 47) = v10;
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
}

void sub_230126068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<realityio::MeshModelDescriptorBuilder::MeshModelDataT *,std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::__shared_ptr_default_delete<realityio::MeshModelDescriptorBuilder::MeshModelDataT,realityio::MeshModelDescriptorBuilder::MeshModelDataT>,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

realityio::MeshModelDescriptorBuilder::MeshModelDataT *std::__shared_ptr_pointer<realityio::MeshModelDescriptorBuilder::MeshModelDataT *,std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::__shared_ptr_default_delete<realityio::MeshModelDescriptorBuilder::MeshModelDataT,realityio::MeshModelDescriptorBuilder::MeshModelDataT>,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>::__on_zero_shared(uint64_t a1)
{
  realityio::MeshModelDescriptorBuilder::MeshModelDataT *result;

  result = *(realityio::MeshModelDescriptorBuilder::MeshModelDataT **)(a1 + 24);
  if (result)
  {
    realityio::MeshModelDescriptorBuilder::MeshModelDataT::~MeshModelDataT(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::MeshModelDescriptorBuilder::MeshModelDataT *,std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::__shared_ptr_default_delete<realityio::MeshModelDescriptorBuilder::MeshModelDataT,realityio::MeshModelDescriptorBuilder::MeshModelDataT>,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

realityio::MeshModelDescriptorBuilder::MeshModelDataT *std::unique_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::reset[abi:ne180100](realityio::MeshModelDescriptorBuilder::MeshModelDataT **a1)
{
  realityio::MeshModelDescriptorBuilder::MeshModelDataT *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    realityio::MeshModelDescriptorBuilder::MeshModelDataT::~MeshModelDataT(result);
    JUMPOUT(0x2348B4E1CLL);
  }
  return result;
}

uint64_t realityio::Result<MaterialIndexAssignor,realityio::DetailedError>::~Result(uint64_t a1, void *a2)
{
  void *v3;
  void **v5;

  if (*(_BYTE *)a1)
  {
    tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base(a1 + 712, a2);
    tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base(a1 + 152, v3);
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(_QWORD **)(a1 + 136));
    v5 = (void **)(a1 + 88);
    std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(*(_QWORD **)(a1 + 72));
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(*(_QWORD **)(a1 + 48));
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(_QWORD **)(a1 + 24));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t std::deque<int>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(uint64_t a1, unint64_t a2, int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void std::__shared_ptr_emplace<`anonymous namespace'::DeduplicatingMeshAsset>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF90B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::DeduplicatingMeshAsset>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF90B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__shared_ptr_emplace<`anonymous namespace'::DeduplicatingMeshAsset>::__on_zero_shared(_QWORD *a1)
{
  a1[3] = &off_24FDF9100;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 8));
  a1[3] = &off_24FDF09F0;
  realityio::WrappedRERef<REAssetLoadRequest *>::~WrappedRERef(a1 + 7);
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 4);
}

_QWORD *`anonymous namespace'::DeduplicatingMeshAsset::onComplete(_anonymous_namespace_::DeduplicatingMeshAsset *this)
{
  _QWORD *v1;
  uint64_t *v3;

  v1 = (_QWORD *)((char *)this + 8);
  v3 = realityio::ImportSession::deduplicateMeshAsset(*((_QWORD *)this + 6), (_anonymous_namespace_::DeduplicatingMeshAsset *)((char *)this + 40), *((uint64_t **)this + 1), 0);
  return realityio::WrappedRERef<REAsset *>::operator=(v1, (uint64_t *)&v3);
}

void std::__shared_ptr_emplace<realityio::MeshAssetBuilder::MeshAssetDataT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF9130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshAssetBuilder::MeshAssetDataT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF9130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::MeshAssetBuilder::MeshAssetDataT>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  realityio::WrappedRERef<REAsset *>::~WrappedRERef((_QWORD *)(a1 + 200));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 184);
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1 + 112, *(_QWORD **)(a1 + 120));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy(a1 + 88, *(_QWORD **)(a1 + 96));
  v3 = (void **)(a1 + 64);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 40);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 24);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF9180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDF9180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2348B4E1CLL);
}

uint64_t std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>>::__on_zero_shared(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_24FDF91D0;
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>::getRawValue(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

_QWORD *std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24FDF9200;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_24FDF9200;
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  JUMPOUT(0x2348B4E1CLL);
}

char *std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)result = &off_24FDF9200;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_24FDF9200;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  return result;
}

uint64_t std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 24);
}

void std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 24);
  operator delete(a1);
}

uint64_t std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t Size;
  uint64_t v3;
  uint64_t i;
  uint64_t Asset;
  const __CFString *Type;

  v1 = *(uint64_t **)(a1 + 16);
  REAssetCopyDependencyArray();
  Size = REAssetDynamicArrayGetSize();
  if (Size)
  {
    v3 = Size;
    for (i = 0; i != v3; ++i)
    {
      Asset = REAssetDynamicArrayGetAsset();
      Type = (const __CFString *)REAssetGetType();
      if (CFStringCompare(Type, CFSTR("Skeleton"), 0) == kCFCompareEqualTo)
        realityio::Builder::addAsset(v1, Asset, 0);
    }
  }
  return RERelease();
}

uint64_t std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::LiveSceneManager::insertEntityBuilders(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  BOOL v11;
  uint64_t **v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v31;
  int v32;
  uint64_t *v33;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t **v54;
  __int128 *v55;
  uint64_t **v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t **v60;
  _QWORD *v61;
  char *__s;
  uint64_t **v65;
  int v67;
  int v68;
  char v69[8];
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  void *v74[2];
  char v75;
  void *__p;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  uint64_t **v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t ***v82;
  uint64_t **v83;
  uint64_t v84;

  v80 = 0;
  v81 = 0;
  v79 = &v80;
  v6 = *(_QWORD **)(a1 + 304);
  v7 = (_QWORD *)(a1 + 312);
  if (v6 != (_QWORD *)(a1 + 312))
  {
    while (1)
    {
      v8 = v80;
      if (v79 == &v80)
        break;
      v9 = &v80;
      if (v80)
      {
        do
        {
          v10 = (uint64_t **)v8;
          v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v10 = (uint64_t **)v9[2];
          v11 = *v10 == (uint64_t *)v9;
          v9 = v10;
        }
        while (v11);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 4)))
      {
        if (!v80)
          goto LABEL_9;
LABEL_11:
        __p = v10;
        v12 = v10 + 1;
        goto LABEL_13;
      }
      v12 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v79, &__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 4));
LABEL_13:
      if (!*v12)
        goto LABEL_14;
LABEL_20:
      v18 = (_QWORD *)v6[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v6[2];
          v11 = *v19 == (_QWORD)v6;
          v6 = v19;
        }
        while (!v11);
      }
      v6 = v19;
      if (v19 == v7)
        goto LABEL_26;
    }
    v10 = &v80;
    if (!v80)
    {
LABEL_9:
      __p = &v80;
      v12 = &v80;
LABEL_14:
      v13 = operator new(0x38uLL);
      v83 = &v80;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v13 + 8, (_DWORD *)v6 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v13 + 9, (_DWORD *)v6 + 9);
      *((_QWORD *)v13 + 5) = v6[5];
      v14 = v6[6];
      *((_QWORD *)v13 + 6) = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      LOBYTE(v84) = 1;
      v17 = __p;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = v17;
      *v12 = (uint64_t *)v13;
      if (*v79)
      {
        v79 = (uint64_t **)*v79;
        v13 = *v12;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v80, (uint64_t *)v13);
      ++v81;
      v82 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v82);
      goto LABEL_20;
    }
    goto LABEL_11;
  }
LABEL_26:
  v65 = (uint64_t **)(a1 + 304);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy(a1 + 304, *(_QWORD **)(a1 + 312));
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = v7;
  v83 = 0;
  v84 = 0;
  v82 = &v83;
  v22 = (_QWORD *)*a2;
  v21 = a2 + 1;
  v20 = v22;
  if (v22 != v21)
  {
    v23 = v21;
    __s = (char *)realityio::kEntityBuilderIdentifier;
    do
    {
      v24 = atomic_load((unsigned __int8 *)&qword_255E54C80);
      if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_255E54C80))
      {
        MEMORY[0x2348B274C](&_MergedGlobals_45, __s);
        __cxa_guard_release(&qword_255E54C80);
      }
      v25 = atomic_load((unsigned __int8 *)&qword_255E54C90);
      if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_255E54C90))
      {
        std::string::basic_string[abi:ne180100]<0>(v74, __s);
        pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier();
        MEMORY[0x2348B2764](&qword_255E54C88, &__p);
        if (SHIBYTE(v78) < 0)
          operator delete(__p);
        if (v75 < 0)
          operator delete(v74[0]);
        __cxa_guard_release(&qword_255E54C90);
      }
      v74[0] = 0;
      v74[1] = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v20 + 36), (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_255E54C88);
      v71 = qword_255E54C88;
      if ((qword_255E54C88 & 7) != 0)
      {
        v26 = (unsigned int *)(qword_255E54C88 & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 2, v26));
        if ((v27 & 1) == 0)
          v71 &= 0xFFFFFFFFFFFFFFF8;
      }
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v20 + 36)))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "/__root");
        MEMORY[0x2348B26F8](v69, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v69, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v71);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v72, (int *)&v70);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v73);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v70);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v69);
        if (SHIBYTE(v78) < 0)
          operator delete(__p);
      }
      if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v20 + 28)) & 1) == 0)
      {
        v28 = v80;
        if (!v80)
          goto LABEL_49;
        v29 = &v80;
        do
        {
          v30 = v29;
          v31 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v28 + 4);
          v32 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v28 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v72);
          v33 = v28 + 1;
          if (!v32)
          {
            v33 = v28;
            v29 = (uint64_t **)v28;
          }
          v28 = (uint64_t *)*v33;
        }
        while (*v33);
        if (v29 == &v80
          || (!v32 ? (v34 = v31) : (v34 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v30 + 4)),
              pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v72, v34)))
        {
LABEL_49:
          v35 = *(_QWORD *)(a1 + 296);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v67, (_DWORD *)v20 + 9);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v68, (_DWORD *)v20 + 10);
          v70 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v35 + 64))(v35, &v67);
          if (v70)
            RERetain();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v67);
          v36 = operator new(0x148uLL);
          v36[2] = 0;
          *v36 = &off_24FDEC188;
          v36[1] = 0;
          v37 = (void *)realityio::EntityBuilder::EntityBuilder((uint64_t)(v36 + 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v20 + 36), &v70);
          v38 = (std::__shared_weak_count *)v74[1];
          v74[0] = v37;
          v74[1] = v36;
          if (v38)
          {
            p_shared_owners = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldaxr(p_shared_owners);
            while (__stlxr(v40 - 1, p_shared_owners));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath&,std::shared_ptr<realityio::Builder>&,0>((uint64_t)&__p, &v72, v74);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>(v65, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (uint64_t)&__p);
          v41 = v78;
          if (v78)
          {
            v42 = (unint64_t *)&v78->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          std::__tree<std::shared_ptr<realityio::Builder>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t *)&v82, (unint64_t)v74[0], (uint64_t)v74[0], (uint64_t)v74[1]);
          *((_QWORD *)v74[0] + 21) = *(_QWORD *)(a1 + 24);
          realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(a3, (__int128 *)v74);
          realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v70);
        }
        else
        {
          std::shared_ptr<RIO_MTLX::Element>::operator=[abi:ne180100](v74, (uint64_t *)v29 + 5);
          std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath&,std::shared_ptr<realityio::Builder>&,0>((uint64_t)&__p, &v72, v74);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>(v65, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (uint64_t)&__p);
          v51 = v78;
          if (v78)
          {
            v52 = (unint64_t *)&v78->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
          std::__tree<std::shared_ptr<realityio::Builder>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t *)&v82, (unint64_t)v74[0], (uint64_t)v74[0], (uint64_t)v74[1]);
        }
      }
      if ((v71 & 7) != 0)
      {
        v44 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
      v46 = (std::__shared_weak_count *)v74[1];
      if (v74[1])
      {
        v47 = (unint64_t *)((char *)v74[1] + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = (_QWORD *)v20[1];
      if (v49)
      {
        do
        {
          v50 = v49;
          v49 = (_QWORD *)*v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          v50 = (_QWORD *)v20[2];
          v11 = *v50 == (_QWORD)v20;
          v20 = v50;
        }
        while (!v11);
      }
      v20 = v50;
    }
    while (v50 != v23);
  }
  v77 = 0;
  v78 = 0;
  __p = &v77;
  v54 = v79;
  if (v79 == &v80)
  {
    v61 = 0;
  }
  else
  {
    do
    {
      v55 = (__int128 *)(v54 + 5);
      v56 = v83;
      if (v83)
      {
        v57 = *(_QWORD *)v55;
        do
        {
          v58 = v56[4];
          if (v57 >= (unint64_t)v58)
          {
            if ((unint64_t)v58 >= v57)
              goto LABEL_99;
            ++v56;
          }
          v56 = (uint64_t **)*v56;
        }
        while (v56);
      }
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(a5, v55);
LABEL_99:
      v59 = v54[1];
      if (v59)
      {
        do
        {
          v60 = (uint64_t **)v59;
          v59 = (uint64_t *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          v60 = (uint64_t **)v54[2];
          v11 = *v60 == (uint64_t *)v54;
          v54 = v60;
        }
        while (!v11);
      }
      v54 = v60;
    }
    while (v60 != &v80);
    v61 = v77;
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy((uint64_t)&__p, v61);
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(v83);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy((uint64_t)&v79, v80);
}

void sub_230126FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a39 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  __cxa_guard_abort(&qword_255E54C90);
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(*(_QWORD **)(v39 - 104));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy(v39 - 136, *(_QWORD **)(v39 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>::~pair(uint64_t a1)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath&,std::shared_ptr<realityio::Builder>&,0>(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  _DWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  v7 = a3[1];
  *(_QWORD *)(a1 + 8) = *a3;
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::shared_ptr<realityio::Builder>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::shared_ptr<realityio::Builder>>,0>(uint64_t a1)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::shared_ptr<realityio::Builder>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v6;
  char *v7;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v10, a2);
  if (!*v5)
  {
    v6 = v5;
    v7 = (char *)operator new(0x38uLL);
    v8[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7 + 8, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7 + 9, (_DWORD *)(a3 + 4));
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v9 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, (uint64_t *)v7);
    v8[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100]((uint64_t)v8);
  }
}

uint64_t *std::__tree<std::shared_ptr<realityio::Builder>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>(uint64_t *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  v6 = result;
  v8 = (uint64_t **)(result + 1);
  v7 = (uint64_t *)result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = v7[4];
        if (v10 <= a2)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= a2)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(result + 1);
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v12 = v11;
    v11[4] = a3;
    v11[5] = a4;
    if (a4)
    {
      v13 = (unint64_t *)(a4 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *v8 = v11;
    v15 = *(_QWORD *)*v6;
    if (v15)
    {
      *v6 = v15;
      v12 = *v8;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], v12);
    ++v6[2];
  }
  return result;
}

double _ZTWN9realityio33kDummyLayerMutexForInvalidObjectsE(double a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;
  void *context;

  if (!*(_BYTE *)__tls_guard(&__tls_guard))
  {
    *(_BYTE *)v2(v3) = 1;
    context = (void *)MEMORY[0x2348B514C]();
    v5 = realityio::kDummyLayerMutexForInvalidObjects(&realityio::kDummyLayerMutexForInvalidObjects);
    MEMORY[0x2348B4CCC](v5);
    objc_autoreleasePoolPop(context);
  }
  realityio::kDummyLayerMutexForInvalidObjects(&realityio::kDummyLayerMutexForInvalidObjects);
  return a1;
}

realityio::tokens::TransformBuilderTokens_StaticTokenType *realityio::tokens::TransformBuilderTokens_StaticTokenType::TransformBuilderTokens_StaticTokenType(realityio::tokens::TransformBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v46 = (uint64_t *)(MEMORY[0x2348B2758](this, "face", 0) + 8);
  MEMORY[0x2348B2758]();
  MEMORY[0x2348B2758]((char *)this + 16, "image", 0);
  MEMORY[0x2348B2758]((char *)this + 24, "plane", 0);
  MEMORY[0x2348B2758]((char *)this + 32, "vertical", 0);
  MEMORY[0x2348B2758]((char *)this + 40, "xformOp", 0);
  MEMORY[0x2348B2758]((char *)this + 48, "xformOpOrder", 0);
  MEMORY[0x2348B2758]((char *)this + 56, "disableAnchoringSchema", 0);
  MEMORY[0x2348B2758]((char *)this + 64, "preliminary:anchoring:type", 0);
  MEMORY[0x2348B2758]((char *)this + 72, "preliminary:planeAnchoring:alignment", 0);
  MEMORY[0x2348B2758]((char *)this + 80, "preliminary:imageAnchoring:referenceImage", 0);
  v2 = *(_QWORD *)this;
  v47 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v46;
  v48 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v49 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v50 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v51 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v52 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v53 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v54 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v55 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v56 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v57 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v35 = operator new(0x58uLL);
  v36 = 0;
  *((_QWORD *)this + 11) = v35;
  *((_QWORD *)this + 12) = v35;
  *((_QWORD *)this + 13) = v35 + 11;
  do
  {
    v37 = *(&v47 + v36);
    *v35 = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 2, v38));
      if ((v39 & 1) == 0)
        *v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v36;
    ++v35;
  }
  while (v36 != 11);
  v40 = &v58;
  *((_QWORD *)this + 12) = v35;
  do
  {
    v42 = *--v40;
    v41 = v42;
    if ((v42 & 7) != 0)
    {
      v43 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
  }
  while (v40 != &v47);
  return this;
}

void sub_2301279E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, _QWORD *a10, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a11);
  v34 = (char *)&a24;
  while (1)
  {
    v36 = *((_QWORD *)v34 - 1);
    v34 -= 8;
    v35 = v36;
    if ((v36 & 7) != 0)
    {
      v37 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    if (v34 == &a13)
    {
      if ((*v25 & 7) != 0)
      {
        v39 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v33 & 7) != 0)
      {
        v41 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v32 & 7) != 0)
      {
        v43 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v31 & 7) != 0)
      {
        v45 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v30 & 7) != 0)
      {
        v47 = (unsigned int *)(*v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v29 & 7) != 0)
      {
        v49 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v28 & 7) != 0)
      {
        v51 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((*v27 & 7) != 0)
      {
        v53 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((*v26 & 7) != 0)
      {
        v55 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if ((*a10 & 7) != 0)
      {
        v57 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      if ((*v24 & 7) != 0)
      {
        v59 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_230127BC8()
{
  JUMPOUT(0x230127B7CLL);
}

void sub_230127BD0()
{
  JUMPOUT(0x230127BA0);
}

void realityio::generateTransformDirtyStageSubscription(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  __int128 *EmptyString;
  realityio::AnyValueDirtyPropertyDescriptor *v13;
  _QWORD *v14;
  uint64_t i;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24[3];
  _QWORD *v25[3];
  __int128 v26;
  _QWORD *v27[3];
  _QWORD *v28[3];
  __int128 v29;
  _QWORD *v30[3];
  uint64_t v31;
  uint64_t v32;
  void **v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_255E54CA8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_255E54CA8))
  {
    v7 = operator new();
    v8 = operator new();
    memset(v28, 0, sizeof(v28));
    v9 = operator new();
    memset(v25, 0, sizeof(v25));
    v10 = (_BYTE *)operator new();
    v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2348B274C](&v22, "xformOp");
    if ((v22 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (__int128 *)((v22 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (__int128 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
    realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor(v10, EmptyString);
    std::shared_ptr<realityio::AnyValueNamedspacedDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueNamedspacedDirtyPropertyDescriptor,void>(&v23, (uint64_t)v10);
    v34[0] = v23;
    v23 = 0uLL;
    v13 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    MEMORY[0x2348B274C](&v20, "xformOpOrder");
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20);
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v21, (uint64_t)v13);
    v34[1] = v21;
    v21 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v24, v34, 2uLL);
    realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor(v9, v25, v24);
    std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::PrimitiveDirtyPrimDescriptor,void>(&v26, v9);
    v35 = v26;
    v26 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v27, &v35, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v8, v28, v27);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v29, v8);
    v36 = v29;
    v29 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v30, &v36, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v7, v30);
    v14 = std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v31, v7);
    _MergedGlobals_46 = v31;
    unk_255E54CA0 = v32;
    v31 = 0;
    v32 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v14);
    v33 = (void **)v30;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v33);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v29);
    v33 = (void **)v27;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v33);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v35);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v26);
    v33 = (void **)v24;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v33);
    for (i = 1; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v34[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v21);
    if ((v20 & 7) != 0)
    {
      v16 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v23);
    if ((v22 & 7) != 0)
    {
      v18 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v19 = __ldxr(v18);
      while (__stlxr(v19 - 2, v18));
    }
    *(_QWORD *)&v34[0] = v25;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    *(_QWORD *)&v34[0] = v28;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    __cxa_guard_release(&qword_255E54CA8);
  }
  v4 = unk_255E54CA0;
  *a1 = _MergedGlobals_46;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_230127F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v32 - 112);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  *(_QWORD *)(v32 - 168) = &a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 168));
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v32 - 128);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  *(_QWORD *)(v32 - 168) = &a17;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 168));
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v32 - 160 + i);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if ((a10 & 7) != 0)
  {
    v35 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
  }
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if ((a14 & 7) != 0)
  {
    v37 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 2, v37));
  }
  *(_QWORD *)(v32 - 160) = &a20;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 160));
  *(_QWORD *)(v32 - 160) = &a28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 160));
  MEMORY[0x2348B4E1C](v31, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54CA8);
  _Unwind_Resume(a1);
}

realityio::RectAreaLightComponentBuilder *realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(realityio::RectAreaLightComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v19;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v20;
  realityio::AnyValueDirtyPropertyDescriptor *v21;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v22;
  realityio::AnyValueDirtyPropertyDescriptor *v23;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v24;
  realityio::AnyValueDirtyPropertyDescriptor *v25;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v26;
  realityio::AnyValueDirtyPropertyDescriptor *v27;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v28;
  uint64_t i;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41[3];
  _QWORD *v42[3];
  __int128 v43;
  _QWORD *v44[3];
  _QWORD *v45[3];
  __int128 v46;
  _QWORD *v47[3];
  uint64_t v48;
  uint64_t v49;
  void **v50;
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  _OWORD v55[5];
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v34, "RectAreaLightComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kRectAreaLightComponentBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54CD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54CD0))
  {
    v15 = operator new();
    v16 = operator new();
    memset(v45, 0, sizeof(v45));
    v17 = (_BYTE *)operator new();
    Data = (uint64_t *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!Data)
      Data = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    memset(v42, 0, sizeof(v42));
    v19 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v20 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v20)
      v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v19, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v20 + 56));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v40, (uint64_t)v19);
    v55[0] = v40;
    v40 = 0uLL;
    v21 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v22 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v22)
      v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v21, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v22 + 64));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v39, (uint64_t)v21);
    v55[1] = v39;
    v39 = 0uLL;
    v23 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v24 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v24)
      v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v23, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v24 + 72));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v38, (uint64_t)v23);
    v55[2] = v38;
    v38 = 0uLL;
    v25 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v26 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v26)
      v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v25, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v26 + 104));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v37, (uint64_t)v25);
    v55[3] = v37;
    v37 = 0uLL;
    v27 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v28 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
    if (!v28)
      v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v27, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v28 + 112));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v36, (uint64_t)v27);
    v55[4] = v36;
    v36 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v41, v55, 5uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v17, Data, v42, v41);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v43, (uint64_t)v17);
    v56 = v43;
    v43 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v44, &v56, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v45, v44);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v46, v16);
    v57 = v46;
    v46 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v47, &v57, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v47);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v48, v15);
    qword_255E54CC0 = v48;
    *(_QWORD *)algn_255E54CC8 = v49;
    v48 = 0;
    v49 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v48);
    v50 = (void **)v47;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v50);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v57);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
    v50 = (void **)v44;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v50);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v56);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
    v50 = (void **)v41;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v50);
    for (i = 4; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v55[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v37);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v40);
    *(_QWORD *)&v55[0] = v42;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
    *(_QWORD *)&v55[0] = v45;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
    __cxa_guard_release(&qword_255E54CD0);
  }
  v30 = qword_255E54CC0;
  v31 = *(std::__shared_weak_count **)algn_255E54CC8;
  if (*(_QWORD *)algn_255E54CC8)
  {
    v5 = (unint64_t *)(*(_QWORD *)algn_255E54CC8 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v53[0] = &off_24FDF93A0;
  v54 = v53;
  v51[0] = &off_24FDF9420;
  v52 = v51;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v34, (uint64_t)__p, &v30, (uint64_t)v53, (uint64_t)v51);
  v7 = v52;
  if (v52 == v51)
  {
    v8 = 4;
    v7 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
LABEL_10:
  v9 = v54;
  if (v54 == v53)
  {
    v10 = 4;
    v9 = v53;
    goto LABEL_14;
  }
  if (v54)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  v11 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  *(_QWORD *)this = &off_24FDF9328;
  return this;
}

void sub_230128834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  MEMORY[0x2348B4E1C](v58, 0x10A1C40F82F910ELL);
  *(_QWORD *)(v61 - 208) = &a44;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v61 - 208));
  MEMORY[0x2348B4E1C](v59, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v60, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54CD0);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t realityio::RectAreaLightComponentBuilder::run(realityio::RectAreaLightComponentBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  realityio::tokens::LightBuilderTokens_StaticTokenType *Data;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v6;
  unsigned __int32 v7;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v8;
  unsigned __int32 v9;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v10;
  unsigned __int32 v11;
  realityio::tokens::LightBuilderTokens_StaticTokenType *v12;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v13;
  unsigned __int32 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unsigned __int8 v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t result;
  _QWORD *v31;
  uint64_t v32;
  unsigned __int32 v33;
  unsigned __int32 v34;
  unsigned __int32 v35;
  float v36;
  _BYTE v37[8];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  realityio::Inputs *v41;
  __n128 v42;
  char v43;
  __n128 v44;
  char v45;
  void *__p;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v41 = a2;
  v3 = (realityio::Inputs *)((char *)a2 + 32);
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v4, v3);
  Data = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeColor4FAndGamut((pxrInternal__aapl__pxrReserved__::UsdObject *)v37, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)Data + 72), &v44, (__n128)xmmword_230214180);
  v42 = v44;
  v43 = v45;
  v36 = 0.0;
  v6 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v6)
    v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v37, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v6 + 56), (uint64_t)&v44);
  if (v44.n128_u8[0])
  {
    v7 = v44.n128_u32[2];
  }
  else
  {
    v7 = 1.0;
    if (v47 < 0)
      operator delete(__p);
  }
  v36 = *(float *)&v7;
  v35 = 0;
  v8 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v8)
    v8 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v37, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v8 + 64), (uint64_t)&v44);
  if (v44.n128_u8[0])
  {
    v9 = v44.n128_u32[2];
  }
  else
  {
    v9 = 0;
    if (v47 < 0)
      operator delete(__p);
  }
  v35 = v9;
  v34 = 0;
  v10 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v37, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v10 + 104), (uint64_t)&v44);
  if (v44.n128_u8[0])
  {
    v11 = v44.n128_u32[2];
  }
  else
  {
    v11 = 1.0;
    if (v47 < 0)
      operator delete(__p);
  }
  v34 = v11;
  v33 = 0;
  v12 = (realityio::tokens::LightBuilderTokens_StaticTokenType *)atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v12)
    v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::LightBuilderTokens);
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)v37, (realityio::tokens::LightBuilderTokens_StaticTokenType *)((char *)v12 + 112), (uint64_t)&v44);
  if (v44.n128_u8[0])
  {
    v14 = v44.n128_u32[2];
  }
  else
  {
    v14 = 1.0;
    if (v47 < 0)
      operator delete(__p);
  }
  v33 = v14;
  v36 = realityio::scaleLightIntensityByStageUnits((realityio *)v37, v13, *MEMORY[0x24BE21AE8] * v36);
  v32 = 0;
  v15 = *((_QWORD *)v41 + 6);
  v16 = operator new(0x48uLL);
  *v16 = &off_24FDF94A0;
  v16[1] = &v41;
  v16[2] = v37;
  v16[3] = &v32;
  v16[4] = &v36;
  v16[5] = &v35;
  v16[6] = &v42;
  v16[7] = &v34;
  v16[8] = &v33;
  __p = v16;
  (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v15 + 16))(v15, &v44);
  v19 = (__n128 *)__p;
  if (__p == &v44)
  {
    v20 = 4;
    v19 = &v44;
  }
  else
  {
    if (!__p)
      goto LABEL_32;
    v20 = 5;
  }
  (*(void (**)(__n128 *, uint64_t, uint64_t))(v19->n128_u64[0] + 8 * v20))(v19, v17, v18);
LABEL_32:
  realityio::Builder::addComponent((uint64_t *)this, v32);
  v22 = *((_QWORD *)this + 2);
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  v44.n128_u64[0] = v22;
  v44.n128_u64[1] = (unint64_t)v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  v25 = atomic_load((unsigned __int8 *)&qword_255E54CB8);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_255E54CB8))
  {
    v31 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v31, "light_component");
    _MergedGlobals_47 = (uint64_t)v31;
    __cxa_guard_release(&qword_255E54CB8);
  }
  realityio::Outputs::storeValue<REComponent *&>(v22, (__int128 *)_MergedGlobals_47, &v32);
  if (v21)
  {
    v26 = (unint64_t *)&v21->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if ((v40 & 7) != 0)
  {
    v28 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
  result = v38;
  if (v38)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v38);
  return result;
}

void sub_230128FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  MEMORY[0x2348B4E1C](v4, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_255E54CB8);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

_QWORD *realityio::RectAreaLightComponentBuilder::clear(realityio::RectAreaLightComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  realityio::Inputs *v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a2 + 6);
  v5 = a2;
  v6[0] = &off_24FDF95A0;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_230129148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void realityio::RectAreaLightComponentBuilder::~RectAreaLightComponentBuilder(realityio::RectAreaLightComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF93A0;
  return result;
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF93A0;
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_230129350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF9420;
  return result;
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF9420;
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  std::string::size_type v14;
  std::__shared_weak_count *v15;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v13 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>("none", (std::string::size_type *)Data + 11, &v13, &v14);
  v5 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2301295F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24FDF94A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDF94A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  realityio *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  double v10;
  float v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 *p_buf;
  uint64_t v20;
  NSObject *v21;
  uint64_t Text;
  __int128 v24;
  __int128 v25;
  float v26;
  unsigned int *v27;
  realityio *v28;
  char v29[8];
  realityio *v30;
  uint64_t v31;
  __int128 buf;
  __int128 *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = **(_QWORD **)(a1 + 8);
  v3 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v2, v3, (uint64_t)v29);
  if (v29[0])
  {
    v4 = v30;
    v28 = v30;
    if (v30)
    {
      RERetain();
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16));
      v5 = (unsigned int *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        if (*(_BYTE *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&buf + 1)
                      + 14))
          v5 = (unsigned int *)buf;
        else
          v5 = 0;
      }
      v27 = v5;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v27);
      v6 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v7 = (unsigned int *)(*((_QWORD *)&buf + 1) + 8);
        do
        {
          v8 = __ldxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      v26 = 0.0;
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>((uint64_t *)&buf, (uint64_t *)&v27);
      pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
      v11 = v10;
      v12 = *((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v13 = (unsigned int *)(*((_QWORD *)&buf + 1) + 8);
        do
        {
          v14 = __ldxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      v26 = v11;
      RERectAreaLightComponentGetComponentType();
      v24 = *(_OWORD *)(a1 + 40);
      v25 = *(_OWORD *)(a1 + 24);
      v17 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 64);
      v33 = 0;
      v18 = (char *)operator new(0x40uLL);
      *(_QWORD *)v18 = &off_24FDF9510;
      *(_OWORD *)(v18 + 8) = v25;
      *(_OWORD *)(v18 + 24) = v24;
      *((_QWORD *)v18 + 5) = v17;
      *((_QWORD *)v18 + 6) = &v26;
      *((_QWORD *)v18 + 7) = v16;
      v33 = (__int128 *)v18;
      v31 = REEntityGetOrAddComponentByClass();
      if (!v33)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(__int128 *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v31);
      RENetworkMarkComponentDirty();
      p_buf = v33;
      if (v33 == &buf)
      {
        v20 = 4;
        p_buf = &buf;
      }
      else
      {
        if (!v33)
        {
LABEL_27:
          pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v27);
          goto LABEL_28;
        }
        v20 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)p_buf + 8 * v20))();
      goto LABEL_27;
    }
  }
  else
  {
    v28 = 0;
  }
  v21 = *(id *)(realityio::logObjects(v4) + 24);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), &v31);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31);
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = Text;
    _os_log_impl(&dword_22FF26000, v21, OS_LOG_TYPE_DEFAULT, "Stopping operation to set rectAreaLight component because entity no longer exists for prim \"%s\"", (uint8_t *)&buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
  }

LABEL_28:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v28);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v29);
}

void sub_230129A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v12 = va_arg(va1, unsigned int *);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v8 = *(unsigned int **)(v6 - 88);
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(void))(*(_QWORD *)v8 + 8))();
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((unsigned int **)va);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va1);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio29RectAreaLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio29RectAreaLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24FDF9510;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio29RectAreaLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FDF9510;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio29RectAreaLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, _QWORD *a2)
{
  **(_QWORD **)(a1 + 8) = *a2;
  exp2f(**(float **)(a1 + 24));
  RERectAreaLightComponentSetIntensity();
  RERectAreaLightComponentSetColorGamut3F();
  return RERectAreaLightComponentSetExtents();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio29RectAreaLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio29RectAreaLightComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio29RectAreaLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio29RectAreaLightComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF95A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF95A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::EntityBuilder *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[8];
  uint64_t v6;

  v1 = **((_QWORD **)a1 + 1);
  v2 = realityio::EntityBuilder::kInputName(a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v1, v2, (uint64_t)v5);
  if (v5[0])
  {
    v4 = v6;
    if (v6)
    {
      RERetain();
      RERectAreaLightComponentGetComponentType();
      REEntityRemoveComponentByClass();
    }
  }
  else
  {
    v4 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v4);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v5);
}

void sub_230129DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::internal::PrimToEntityMap::makePrimToEntityMap(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  pxrInternal__aapl__pxrReserved__ *PseudoRoot;
  uint64_t UsdPrimDefaultPredicate;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdStage *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  _QWORD *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44[2];
  _QWORD **v45;
  _QWORD *v46[2];
  uint64_t *v47;
  _QWORD *v48[2];
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53[2];
  __int128 v54;
  uint64_t v55;
  int64x2_t v56;
  __int128 v57;
  uint64_t v58;
  _BYTE v59[32];
  uint64_t v60;
  void *v61;
  int v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  _QWORD **v66;
  _QWORD *v67[2];
  _BYTE v68[16];
  uint64_t v69;

  realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v68, 2044, (uint64_t)a1);
  v67[0] = 0;
  v67[1] = 0;
  v66 = v67;
  v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v4);
  if ((v59[24] & 7) != 0)
  {
    v5 = (unsigned int *)(*(_QWORD *)&v59[24] & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59[16]);
  if (*(_QWORD *)&v59[8])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v59[8]);
  v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  PseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v7);
  UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(PseudoRoot);
  v11 = *(_QWORD *)UsdPrimDefaultPredicate;
  v10 = *(_QWORD *)(UsdPrimDefaultPredicate + 8);
  v12 = *(_QWORD *)(UsdPrimDefaultPredicate + 16);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v11 & 0x2000) != 0 || (v10 & 0x2000) == 0))
  {
    v11 |= 0x2000uLL;
    v10 &= ~0x2000uLL;
  }
  v53[0] = (void *)v11;
  v53[1] = (void *)v10;
  *(_QWORD *)&v54 = v12;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v56, (uint64_t *)v53, (uint64_t)v59);
  if ((BYTE8(v57) & 7) != 0)
  {
    v13 = (unsigned int *)(*((_QWORD *)&v57 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  v39 = a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
  if (v56.i64[1])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v56.i64[1]);
  v56.i64[0] = *(_QWORD *)v59;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v56.i32[2], &v59[8]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v56.i32[3], &v59[12]);
  v57 = *(_OWORD *)&v59[16];
  v58 = v60;
  v53[0] = v61;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v53[1], &v62);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v53[1] + 1, &v63);
  v54 = v64;
  v55 = v65;
  while (*(_OWORD *)&v56 != *(_OWORD *)v53
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v57, (uint64_t)&v54))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v56, (uint64_t)&v49);
    if ((v52 & 7) != 0)
    {
      v15 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
    if (v50)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v50);
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v56);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53[1]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56.i64[1]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59[8]);
  v56 = 0uLL;
  *(_QWORD *)&v57 = 0;
  v53[0] = 0;
  v53[1] = 0;
  *(_QWORD *)&v54 = 0;
  v50 = 0;
  v51 = 0;
  v48[1] = 0;
  v49 = (uint64_t *)&v50;
  v47 = (uint64_t *)v48;
  v48[0] = 0;
  v46[0] = 0;
  v46[1] = 0;
  v44[1] = 0;
  v45 = v46;
  v43 = (uint64_t *)v44;
  v44[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v17 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v17);
  if ((v59[24] & 7) != 0)
  {
    v18 = (unsigned int *)(*(_QWORD *)&v59[24] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59[16]);
  if (*(_QWORD *)&v59[8])
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v59[8]);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  v41 = 0;
  v42 = 0;
  __p = &v41;
  if (v56.i64[1] == v56.i64[0])
  {
    v29 = vdupq_n_s64(v56.u64[1]);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    if ((unint64_t)((v56.i64[1] - v56.i64[0]) / 104) <= 1)
      v22 = 1;
    else
      v22 = (v56.i64[1] - v56.i64[0]) / 104;
    do
    {
      v23 = (__int128 *)(v56.i64[0] + v20);
      if (*(char *)(v56.i64[0] + v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v59, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
      }
      else
      {
        v24 = *v23;
        *(_QWORD *)&v59[16] = *((_QWORD *)v23 + 2);
        *(_OWORD *)v59 = v24;
      }
      *(_QWORD *)&v59[24] = v21;
      v25 = std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)&__p, &v69, (const void **)v59);
      if (!*v25)
      {
        v26 = operator new(0x40uLL);
        v26[2] = *(_OWORD *)v59;
        v27 = *(_OWORD *)&v59[16];
        memset(v59, 0, 24);
        v26[3] = v27;
        v28 = v69;
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 2) = v28;
        *v25 = v26;
        if (*(_QWORD *)__p)
        {
          __p = *(void **)__p;
          v26 = (_OWORD *)*v25;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v41, (uint64_t *)v26);
        ++v42;
      }
      if ((v59[23] & 0x80000000) != 0)
        operator delete(*(void **)v59);
      ++v21;
      v20 += 104;
    }
    while (v22 != v21);
    v29 = v56;
  }
  *(_OWORD *)v39 = *(_OWORD *)v53;
  *(_QWORD *)(v39 + 16) = v54;
  v53[1] = 0;
  *(_QWORD *)&v54 = 0;
  v53[0] = 0;
  *(int64x2_t *)(v39 + 24) = v29;
  v30 = v57;
  *(_QWORD *)&v57 = 0;
  v56 = 0uLL;
  v32 = v49;
  v31 = v50;
  *(_QWORD *)(v39 + 40) = v30;
  *(_QWORD *)(v39 + 48) = v32;
  *(_QWORD *)(v39 + 56) = v31;
  v33 = v39 + 56;
  v34 = v51;
  *(_QWORD *)(v39 + 64) = v51;
  if (v34)
  {
    v31[2] = v33;
    v49 = (uint64_t *)&v50;
    v50 = 0;
    v51 = 0;
  }
  else
  {
    *(_QWORD *)(v39 + 48) = v33;
  }
  v36 = __p;
  v35 = v41;
  *(_QWORD *)(v39 + 80) = v41;
  v37 = v39 + 80;
  *(_QWORD *)(v39 + 72) = v36;
  v38 = v42;
  *(_QWORD *)(v39 + 88) = v42;
  if (v38)
  {
    v35[2] = v37;
    __p = &v41;
    v41 = 0;
    v42 = 0;
    v35 = 0;
  }
  else
  {
    *(_QWORD *)(v39 + 72) = v37;
  }
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)v35);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v43, v44[0]);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v45, v46[0]);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v47, v48[0]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&v49, v50);
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  *(_QWORD *)v59 = &v56;
  std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy((uint64_t)&v66, v67[0]);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v68);
}

void sub_23012A448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,_QWORD *a24,uint64_t a25,char a26,_QWORD *a27,uint64_t a28,char a29,_QWORD *a30,uint64_t a31,char a32,_QWORD *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v42 - 224));
  if (a22 < 0)
    operator delete(__p);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a23, a24);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a26, a27);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a29, a30);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&a32, a33);
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  *(_QWORD *)(v42 - 224) = &a42;
  std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 224));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(v42 - 136, *(_QWORD **)(v42 - 128));
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)(v42 - 112));
  _Unwind_Resume(a1);
}

uint64_t realityio::internal::`anonymous namespace'::appendSkeletonsHelper(realityio::internal::_anonymous_namespace_ *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  int v13;
  int v14;
  _QWORD v15[3];
  int v16;
  int v17;
  _BYTE v18[24];
  _QWORD v19[4];
  void **v20;

  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v19[3] = 0;
    v19[0] = MEMORY[0x24BEE9DA0] + 16;
    pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v19);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v18, &v16);
    v5 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16);
    v6 = (uint64_t *)((char *)a2 + 8);
    if ((uint64_t *)((char *)a2 + 8) == v5)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, &v16);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, &v17);
      memset(v15, 0, sizeof(v15));
      memset(v12, 0, sizeof(v12));
      v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>((uint64_t **)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (uint64_t)&v13);
      v9 = v8;
      v20 = (void **)v15;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
      v20 = (void **)v12;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v20);
      if ((v9 & 1) != 0)
        v5 = v7;
      else
        v5 = v6;
    }
    if (v5 != v6)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, &v13);
      v10 = v5[6];
      if (v10 >= v5[7])
      {
        v11 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(v5 + 5, &v13);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5[6], &v13);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v10 + 4), &v14);
        v11 = v10 + 8;
      }
      v5[6] = v11;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
    MEMORY[0x2348B1F9C](v18);
    return MEMORY[0x2348B217C](v19);
  }
  return result;
}

void sub_23012A72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va1);
  MEMORY[0x2348B1F9C]((uint64_t *)va2);
  MEMORY[0x2348B217C](va3);
  _Unwind_Resume(a1);
}

void realityio::internal::`anonymous namespace'::createEntitiesAndBuildInitialMappingsHelper(uint64_t a1, pxrInternal__aapl__pxrReserved__ **a2, int a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t **a7, uint64_t a8, uint64_t **a9, uint64_t a10, uint64_t **a11)
{
  uint64_t *isEntityProviding;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::TfToken *Name;
  uint64_t EmptyString;
  __int128 v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  size_t v24;
  _BYTE *v25;
  const void *v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  int64x2_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t **v64;
  uint64_t IsA;
  const pxrInternal__aapl__pxrReserved__::UsdPrim *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v72;
  pxrInternal__aapl__pxrReserved__ *v73;
  _QWORD *v74;
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *Data;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *v85;
  _QWORD *v86;
  _QWORD *v87;
  int v88;
  _QWORD *v89;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v90;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v91;
  unsigned int *v92;
  unsigned int v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t **v101;
  _DWORD *v102;
  uint64_t v103;
  unsigned int v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t **v109;
  uint64_t v112;
  int v113;
  _DWORD v114[2];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE v118[32];
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  _QWORD **v124;
  _QWORD *v125;
  uint64_t v126;
  _BYTE v127[32];
  __int128 v128;
  _QWORD v129[4];
  __int128 v130;
  uint64_t v131;
  std::string v132;
  _BYTE v133[32];
  int64x2_t *v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v132 = *(std::string *)a1;
  v105 = realityio::getPrimEntityProvidingSetting((realityio *)a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a2) | a3;
  isEntityProviding = (uint64_t *)realityio::isEntityProviding((realityio *)a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v105);
  v17 = a4;
  v103 = a4;
  if (!(_DWORD)isEntityProviding)
    goto LABEL_80;
  Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)a2);
  if ((*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (*(_QWORD *)Name & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v118, *(const std::string::value_type **)EmptyString, *(_QWORD *)(EmptyString + 8));
  }
  else
  {
    v20 = *(_OWORD *)EmptyString;
    *(_QWORD *)&v118[16] = *(_QWORD *)(EmptyString + 16);
    *(_OWORD *)v118 = v20;
  }
  v21 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      v22 = (_BYTE *)a1;
      if (v21 != 1)
        goto LABEL_22;
      goto LABEL_18;
    }
LABEL_19:
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, (const void **)v118, (uint64_t)v127);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v132.__r_.__value_.__l.__data_);
    v132 = *(std::string *)v127;
    goto LABEL_42;
  }
  v23 = *(_QWORD *)(a1 + 8);
  if (!v23)
    goto LABEL_19;
  if (v23 != 1)
    goto LABEL_22;
  v22 = *(_BYTE **)a1;
LABEL_18:
  if (*v22 == 47)
    goto LABEL_19;
LABEL_22:
  if ((v21 & 0x80u) == 0)
    v24 = *(unsigned __int8 *)(a1 + 23);
  else
    v24 = *(_QWORD *)(a1 + 8);
  v25 = v127;
  std::string::basic_string[abi:ne180100]((uint64_t)v127, v24 + 1);
  if (v127[23] < 0)
    v25 = *(_BYTE **)v127;
  if (v24)
  {
    if (*(char *)(a1 + 23) >= 0)
      v26 = (const void *)a1;
    else
      v26 = *(const void **)a1;
    memmove(v25, v26, v24);
  }
  *(_WORD *)&v25[v24] = 47;
  if (v118[23] >= 0)
    v27 = v118;
  else
    v27 = *(const std::string::value_type **)v118;
  if (v118[23] >= 0)
    v28 = v118[23];
  else
    v28 = *(_QWORD *)&v118[8];
  v29 = std::string::append((std::string *)v127, v27, v28);
  v30 = v29->__r_.__value_.__r.__words[0];
  *(_QWORD *)v133 = v29->__r_.__value_.__l.__size_;
  *(_QWORD *)&v133[7] = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
  v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  v132.__r_.__value_.__r.__words[0] = v30;
  v132.__r_.__value_.__l.__size_ = *(_QWORD *)v133;
  *(std::string::size_type *)((char *)&v132.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v133[7];
  *((_BYTE *)&v132.__r_.__value_.__s + 23) = v31;
  if ((v127[23] & 0x80000000) != 0)
    operator delete(*(void **)v127);
LABEL_42:
  v32 = a6->i64[0];
  v33 = a6->i64[1];
  v131 = 0;
  v130 = 0u;
  v128 = 0u;
  memset(v129, 0, sizeof(v129));
  memset(v127, 0, sizeof(v127));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)&v128 = (char *)&v128 + 8;
  *((_QWORD *)&v128 + 1) = 0;
  v129[2] = 0;
  v129[3] = 0;
  v129[0] = 0;
  v129[1] = &v129[2];
  *((_QWORD *)&v130 + 1) = 0;
  v131 = 0;
  *(_QWORD *)&v130 = (char *)&v130 + 8;
  v34 = a6->u64[1];
  v35 = a6[1].u64[0];
  if (v34 >= v35)
  {
    v37 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v34 - a6->i64[0]) >> 3);
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) > 0x276276276276276)
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    v39 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v35 - a6->i64[0]) >> 3);
    if (2 * v39 > v38)
      v38 = 2 * v39;
    if (v39 >= 0x13B13B13B13B13BLL)
      v40 = 0x276276276276276;
    else
      v40 = v38;
    v134 = a6 + 1;
    if (v40)
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::internal::PrimToEntityMap::EntityData>>((uint64_t)a6[1].i64, v40);
    else
      v41 = 0;
    v108 = a5;
    *(_QWORD *)v133 = v41;
    *(_QWORD *)&v133[8] = &v41[104 * v37];
    *(_QWORD *)&v133[16] = *(_QWORD *)&v133[8];
    *(_QWORD *)&v133[24] = &v41[104 * v40];
    realityio::internal::PrimToEntityMap::EntityData::EntityData(*(uint64_t *)&v133[8], (__int128 *)v127);
    v42 = *(_QWORD *)&v133[8];
    v36 = *(_QWORD *)&v133[16] + 104;
    *(_QWORD *)&v133[16] += 104;
    v43 = a6;
    v46 = (uint64_t *)a6;
    v44 = a6->i64[0];
    v45 = v46[1];
    if (v45 == v44)
    {
      v48 = vdupq_n_s64(v45);
      a6 = v43;
    }
    else
    {
      v106 = v33;
      v47 = 0;
      do
      {
        realityio::internal::PrimToEntityMap::EntityData::EntityData((std::string *)(v42 + v47 - 104), (const realityio::internal::PrimToEntityMap::EntityData *)(v45 + v47 - 104));
        v47 -= 104;
      }
      while (v45 + v47 != v44);
      a6 = v43;
      v48 = *v43;
      v36 = *(_QWORD *)&v133[16];
      v42 += v47;
      v33 = v106;
    }
    a6->i64[0] = v42;
    a6->i64[1] = v36;
    *(int64x2_t *)&v133[8] = v48;
    v49 = a6[1].i64[0];
    a6[1].i64[0] = *(_QWORD *)&v133[24];
    *(_QWORD *)&v133[24] = v49;
    *(_QWORD *)v133 = v48.i64[0];
    std::__split_buffer<realityio::internal::PrimToEntityMap::EntityData>::~__split_buffer((uint64_t)v133);
    a5 = v108;
  }
  else
  {
    realityio::internal::PrimToEntityMap::EntityData::EntityData(v34, (__int128 *)v127);
    v36 = v34 + 104;
    a6->i64[1] = v34 + 104;
  }
  a6->i64[1] = v36;
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v130, *((_QWORD **)&v130 + 1));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v129[1], (_QWORD *)v129[2]);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v128, *((_QWORD **)&v128 + 1));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  isEntityProviding = (uint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127[24]);
  a4 = v103;
  v50 = v32;
  if ((v127[23] & 0x80000000) != 0)
    operator delete(*(void **)v127);
  v51 = *(_QWORD *)(a5 + 16);
  v52 = *(uint64_t **)(a5 + 8);
  if ((unint64_t)v52 >= v51)
  {
    isEntityProviding = *(uint64_t **)a5;
    v54 = ((uint64_t)v52 - *(_QWORD *)a5) >> 3;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61)
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    v56 = v51 - (_QWORD)isEntityProviding;
    if (v56 >> 2 > v55)
      v55 = v56 >> 2;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
      v57 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    if (v57)
    {
      v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(a5 + 16, v57);
      isEntityProviding = *(uint64_t **)a5;
      v52 = *(uint64_t **)(a5 + 8);
    }
    else
    {
      v58 = 0;
    }
    v59 = &v58[8 * v54];
    v60 = &v58[8 * v57];
    *(_QWORD *)v59 = v103;
    v53 = v59 + 8;
    while (v52 != isEntityProviding)
    {
      v61 = *--v52;
      *((_QWORD *)v59 - 1) = v61;
      v59 -= 8;
    }
    *(_QWORD *)a5 = v59;
    *(_QWORD *)(a5 + 8) = v53;
    *(_QWORD *)(a5 + 16) = v60;
    if (isEntityProviding)
      operator delete(isEntityProviding);
  }
  else
  {
    *v52 = v103;
    v53 = v52 + 1;
  }
  v62 = 0x4EC4EC4EC4EC4EC5 * ((v33 - v50) >> 3);
  *(_QWORD *)(a5 + 8) = v53;
  if ((v118[23] & 0x80000000) != 0)
    operator delete(*(void **)v118);
  v17 = v62;
LABEL_80:
  v125 = 0;
  v126 = 0;
  v123 = 0;
  v124 = &v125;
  v112 = v17;
  if (v17 == a4)
    v64 = (uint64_t **)a10;
  else
    v64 = (uint64_t **)&v124;
  *(_QWORD *)&v122 = (char *)&v122 + 8;
  *((_QWORD *)&v122 + 1) = 0;
  if (v17 != a4)
    a9 = (uint64_t **)&v122;
  *((_QWORD *)&v120 + 1) = 0;
  v121 = 0;
  if (v17 != a4)
    a11 = (uint64_t **)&v120;
  v109 = a11;
  *(_QWORD *)&v120 = (char *)&v120 + 8;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)isEntityProviding);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((_DWORD)IsA)
  {
    if ((IsA & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, v127);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v64, (pxrInternal__aapl__pxrReserved__::SdfPath *)v127, v127);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      IsA = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v127);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCube *)IsA);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  v68 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((v68 & 1) != 0)
    goto LABEL_102;
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)v68);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  v69 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((v69 & 1) != 0)
    goto LABEL_102;
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)v69);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  v70 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((v70 & 1) != 0)
    goto LABEL_102;
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v70);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  v71 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((v71 & 1) != 0)
    goto LABEL_102;
  pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)v71);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA() & 1) != 0)
    goto LABEL_102;
  v73 = a2[1];
  if (!v73 || (*((_BYTE *)v73 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], v72);
  v74 = (_QWORD *)*((_QWORD *)v73 + 3);
  Data = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::TextBuilderTokens);
  if ((*v74 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)Data + 14) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_102:
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, v127);
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v109, (pxrInternal__aapl__pxrReserved__::SdfPath *)v127, v127);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v127);
  }
  v107 = (uint64_t *)a6;
  memset(v127, 0, 17);
  v76 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v127, 0);
  *(_OWORD *)v133 = *(_OWORD *)v76;
  *(_QWORD *)&v133[16] = *(_QWORD *)(v76 + 16);
  *(_OWORD *)v127 = *(_OWORD *)v133;
  v127[16] = v133[16];
  v77 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v127, 1);
  *(_OWORD *)v118 = *(_OWORD *)v77;
  *(_QWORD *)&v118[16] = *(_QWORD *)(v77 + 16);
  *(_OWORD *)v127 = *(_OWORD *)v118;
  v127[16] = v118[16];
  v78 = (uint64_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v127, 0x100000005);
  v79 = *v78;
  v80 = v78[1];
  v81 = v78[2];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  v82 = a5;
  *(_QWORD *)v133 = v79 & 0xFFFFFFFFFFFFDFFFLL;
  *(_QWORD *)&v133[8] = v80 | 0x2000;
  *(_QWORD *)&v133[16] = v81;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)a2, (uint64_t *)v133, (uint64_t)v127);
  *(_QWORD *)v133 = *(_QWORD *)v127;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v133[8], &v127[8]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v133[12], &v127[12]);
  *(_OWORD *)&v133[16] = *(_OWORD *)&v127[16];
  *(_QWORD *)v118 = *((_QWORD *)&v128 + 1);
  v134 = (int64x2_t *)v128;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v118[8], v129);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v118[12], (_DWORD *)v129 + 1);
  *(_OWORD *)&v118[16] = *(_OWORD *)&v129[1];
  v119 = v129[3];
  v83 = (_QWORD *)(a8 + 8);
  if (v112 == v103)
    v84 = (_QWORD *)(a10 + 8);
  else
    v84 = &v125;
  while (*(_OWORD *)v133 != *(_OWORD *)v118
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v133[16], (uint64_t)&v118[16]))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)v133, (uint64_t)v114);
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(v85);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v114, &v113);
      v86 = (_QWORD *)*v83;
      if (!*v83)
        goto LABEL_116;
      v87 = (_QWORD *)(a8 + 8);
      do
      {
        v88 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)(v86 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v113);
        v89 = v86 + 1;
        if (!v88)
        {
          v89 = v86;
          v87 = v86;
        }
        v86 = (_QWORD *)*v89;
      }
      while (*v89);
      if (v87 == v83
        || pxrInternal__aapl__pxrReserved__::SdfPath::operator<((pxrInternal__aapl__pxrReserved__::SdfPath *)&v113, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v87 + 4)))
      {
LABEL_116:
        v87 = (_QWORD *)(a8 + 8);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v113);
      if (v83 != v87)
      {
        v90 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v87[5];
        v91 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v87[6];
        while (v90 != v91)
        {
          std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v64, v84, v90, v90);
          v90 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v90 + 8);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v114, &v113);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(a9, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v113, &v113);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v113);
    }
    if ((v117 & 7) != 0)
    {
      v92 = (unsigned int *)(v117 & 0xFFFFFFFFFFFFFFF8);
      do
        v93 = __ldxr(v92);
      while (__stlxr(v93 - 2, v92));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v116);
    if (v115)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v115);
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)v133);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v118[8]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v133[8]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v129);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127[8]);
  if (v112 != v103)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, v133);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)v127, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
    else
      *(std::string *)v127 = v132;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v127[24], v133);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v127[28], &v133[4]);
    v128 = v122;
    v129[0] = v123;
    if (v123)
    {
      *(_QWORD *)(*((_QWORD *)&v122 + 1) + 16) = (char *)&v128 + 8;
      *(_QWORD *)&v122 = (char *)&v122 + 8;
      *((_QWORD *)&v122 + 1) = 0;
      v123 = 0;
    }
    else
    {
      *(_QWORD *)&v128 = (char *)&v128 + 8;
    }
    v129[1] = v124;
    v129[2] = v125;
    v129[3] = v126;
    if (v126)
    {
      v125[2] = &v129[2];
      v124 = &v125;
      v125 = 0;
      v126 = 0;
    }
    else
    {
      v129[1] = &v129[2];
    }
    v94 = (_QWORD *)*((_QWORD *)&v120 + 1);
    v130 = v120;
    v131 = v121;
    if (v121)
    {
      *(_QWORD *)(*((_QWORD *)&v120 + 1) + 16) = (char *)&v130 + 8;
      *(_QWORD *)&v120 = (char *)&v120 + 8;
      *((_QWORD *)&v120 + 1) = 0;
      v121 = 0;
    }
    else
    {
      *(_QWORD *)&v130 = (char *)&v130 + 8;
    }
    v95 = *v107;
    v96 = *v107 + 104 * v112;
    if ((_BYTE *)v96 != v127)
    {
      v97 = *(_QWORD *)(v96 + 16);
      v98 = *(_OWORD *)v96;
      v99 = *(_QWORD *)&v127[16];
      *(_OWORD *)v96 = *(_OWORD *)v127;
      *(_QWORD *)(v96 + 16) = v99;
      *(_OWORD *)v127 = v98;
      *(_QWORD *)&v127[16] = v97;
      v100 = v95 + 104 * v112;
      std::swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>((int *)(v100 + 24), (int *)&v127[24]);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::swap((uint64_t *)(v100 + 32), (uint64_t)&v128);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::swap((uint64_t *)(v100 + 56), (uint64_t)&v129[1]);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::swap((uint64_t *)(v100 + 80), (uint64_t)&v130);
      v94 = (_QWORD *)*((_QWORD *)&v130 + 1);
    }
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v130, v94);
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v129[1], (_QWORD *)v129[2]);
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v128, *((_QWORD **)&v128 + 1));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v127[24]);
    if ((v127[23] & 0x80000000) != 0)
      operator delete(*(void **)v127);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v133);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, v114);
  *(_DWORD *)v133 = v114[0];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  *(_DWORD *)&v133[4] = v114[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  *(_QWORD *)&v133[8] = v112;
  v101 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a7, v118, (pxrInternal__aapl__pxrReserved__::SdfPath *)v133);
  if (!*v101)
  {
    v102 = operator new(0x30uLL);
    *(_QWORD *)&v127[8] = a7 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v102 + 8, v133);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v102 + 9, &v133[4]);
    *((_QWORD *)v102 + 5) = *(_QWORD *)&v133[8];
    v127[16] = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a7, *(uint64_t *)v118, v101, (uint64_t *)v102);
    *(_QWORD *)v127 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v127, 0);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v133);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v114);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v120, *((_QWORD **)&v120 + 1));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v122, *((_QWORD **)&v122 + 1));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v124, v125);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
}

void sub_23012B524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51)
{
  uint64_t v51;

  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v51 - 144));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a44, (_QWORD *)a45);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a47, (_QWORD *)a48);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a50, (_QWORD *)a51);
  if (*(char *)(v51 - 185) < 0)
    operator delete(*(void **)(v51 - 208));
  _Unwind_Resume(a1);
}

uint64_t realityio::internal::PrimToEntityMap::EntityData::estimateMeshes@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::UsdStage *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  _QWORD *v24;
  pxrInternal__aapl__pxrReserved__::UsdStage *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p;
  void *v41;
  _QWORD v42[3];
  uint64_t v43;
  void **v44[3];
  _QWORD v45[4];
  _QWORD v46[2];
  unint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void **v53[2];

  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  v5 = *(_QWORD **)(result + 56);
  v34 = result;
  v6 = (_QWORD *)(result + 64);
  if (v5 != (_QWORD *)(result + 64))
  {
    v7 = MEMORY[0x24BEE9CF0] + 16;
    v8 = MEMORY[0x24BEE9DC8] + 16;
    v35 = MEMORY[0x24BEE9DA0] + 16;
    do
    {
      v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 28));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v36);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v48[0] = v7;
      MEMORY[0x2348B274C](&v36, "primvars:st");
      realityio::approximateGeomFromUsdGeomMesh((realityio *)v48, (const pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v36, (const pxrInternal__aapl__pxrReserved__::TfToken *)1, 0, v46);
      if ((v36 & 7) != 0)
      {
        v10 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      if (v46[0])
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v45[3] = 0;
        v45[0] = v35;
        pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v45);
        MEMORY[0x2348B235C](&v36, v45);
        v47 += 0x6666666666666667 * ((uint64_t)(v42[1] - v42[0]) >> 3);
        v53[0] = (void **)&v43;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape>::__destroy_vector::operator()[abi:ne180100](v53);
        v53[0] = (void **)v42;
        std::vector<pxrInternal__aapl__pxrReserved__::UsdSkelBlendShapeQuery::_BlendShape>::__destroy_vector::operator()[abi:ne180100](v53);
        if (__p)
        {
          v41 = __p;
          operator delete(__p);
        }
        if ((v39 & 7) != 0)
        {
          v12 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
          do
            v13 = __ldxr(v12);
          while (__stlxr(v13 - 2, v12));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
        if (v37)
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v37);
        MEMORY[0x2348B1F9C](v44);
        MEMORY[0x2348B217C](v45);
        v14 = v46[0];
        if (v46[0])
        {
          ++*(_DWORD *)a3;
          v15 = *(_QWORD *)(a3 + 8) + v14;
          v16 = v47;
          v17 = *(_QWORD *)(a3 + 16) + v46[1];
          *(_QWORD *)(a3 + 8) = v15;
          *(_QWORD *)(a3 + 16) = v17;
          if (v16 > *(unsigned int *)(a3 + 24))
            *(_DWORD *)(a3 + 24) = v16;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v39 = 0;
      v36 = v8;
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v36);
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45[1] - v45[0]) >> 3);
      v44[0] = (void **)v45;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomSubset>::__destroy_vector::operator()[abi:ne180100](v44);
      if (v18 >= 2)
        *(_DWORD *)a3 = v18 + *(_DWORD *)a3 - 1;
      MEMORY[0x2348B24C4](&v36);
      MEMORY[0x2348B1AF8](v48);
      if ((v52 & 7) != 0)
      {
        v19 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51);
      result = v50;
      if (v50)
        result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v50);
      v21 = (_QWORD *)v5[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v5[2];
          v23 = *v22 == (_QWORD)v5;
          v5 = v22;
        }
        while (!v23);
      }
      v5 = v22;
    }
    while (v22 != v6);
  }
  v24 = *(_QWORD **)(v34 + 80);
  if (v24 != (_QWORD *)(v34 + 88))
  {
    do
    {
      v25 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 28));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v49);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
      realityio::approximateGeomWithPrimitivePrim((realityio *)&v36, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)0x40, 64, 64, 32, (uint64_t)&v49);
      v26 = v49;
      if (v49)
      {
        ++*(_DWORD *)a3;
        v27 = *(_QWORD *)(a3 + 8) + v26;
        v28 = v51;
        v29 = *(_QWORD *)(a3 + 16) + v50;
        *(_QWORD *)(a3 + 8) = v27;
        *(_QWORD *)(a3 + 16) = v29;
        if (v28 > *(unsigned int *)(a3 + 24))
          *(_DWORD *)(a3 + 24) = v28;
      }
      if ((v39 & 7) != 0)
      {
        v30 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
      result = v37;
      if (v37)
        result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v37);
      v32 = (_QWORD *)v24[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v24[2];
          v23 = *v33 == (_QWORD)v24;
          v24 = v33;
        }
        while (!v23);
      }
      v24 = v33;
    }
    while (v33 != (_QWORD *)(v34 + 88));
  }
  return result;
}

uint64_t realityio::internal::`anonymous namespace'::isBoundToSkeleton(realityio::internal::_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(this);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v6[3] = 0;
  v6[0] = MEMORY[0x24BEE9DA0] + 16;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton((pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v6);
  if (!v5 || (*(_BYTE *)(v5 + 57) & 8) != 0)
    v2 = 0;
  else
    v2 = (*(uint64_t (**)(uint64_t *))(v4 + 32))(&v4);
  MEMORY[0x2348B1F9C](&v4);
  MEMORY[0x2348B217C](v6);
  return v2;
}

void realityio::internal::PrimToEntityMap::EntityData::~EntityData(realityio::internal::PrimToEntityMap::EntityData *this)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t realityio::internal::PrimToEntityMap::EntityData::EntityData(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v18 = (uint64_t)a2 + 24;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 24), (_DWORD *)a2 + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 28), (_DWORD *)a2 + 7);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  v6 = (_QWORD *)a2 + 5;
  v5 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 40) = v5;
  v7 = a1 + 40;
  v8 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 48) = v8;
  if (v8)
  {
    *(_QWORD *)(v5 + 16) = v7;
    *((_QWORD *)a2 + 4) = v6;
    *v6 = 0;
    *((_QWORD *)a2 + 6) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  v10 = a2 + 4;
  v9 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 64) = v9;
  v11 = a1 + 64;
  v12 = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 72) = v12;
  if (v12)
  {
    *(_QWORD *)(v9 + 16) = v11;
    *((_QWORD *)a2 + 7) = v10;
    *v10 = 0;
    *((_QWORD *)a2 + 9) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v11;
  }
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  v14 = (_QWORD *)a2 + 11;
  v13 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 88) = v13;
  v15 = a1 + 88;
  v16 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 96) = v16;
  if (v16)
  {
    *(_QWORD *)(v13 + 16) = v15;
    *((_QWORD *)a2 + 10) = v14;
    *v14 = 0;
    *((_QWORD *)a2 + 12) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v15;
  }
  v19 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v18, (int *)&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  MEMORY[0x2348B4AD4](a2, "");
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)a2 + 56, *((_QWORD **)a2 + 8));
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 7) = v10;
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)(a2 + 2), *((_QWORD **)a2 + 5));
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 4) = v6;
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)(a2 + 5), *((_QWORD **)a2 + 11));
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 10) = v14;
  return a1;
}

void sub_23012BF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::SdfPath *a11)
{
  uint64_t v11;
  uint64_t v12;

  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(v12, *(_QWORD **)(v11 + 88));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a9, *(_QWORD **)(v11 + 64));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a10, *(_QWORD **)(v11 + 40));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a11);
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::internal::PrimToEntityMap::EntityData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a2);
}

std::string *realityio::internal::PrimToEntityMap::EntityData::EntityData(std::string *this, const realityio::internal::PrimToEntityMap::EntityData *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&this[1], (_DWORD *)a2 + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)a2 + 7);
  std::set<pxrInternal__aapl__pxrReserved__::SdfPath>::set[abi:ne180100]((uint64_t *)&this[1].__r_.__value_.__l.__size_, (uint64_t)a2 + 32);
  std::set<pxrInternal__aapl__pxrReserved__::SdfPath>::set[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__l.__size_, (uint64_t)a2 + 56);
  std::set<pxrInternal__aapl__pxrReserved__::SdfPath>::set[abi:ne180100]((uint64_t *)&this[3].__r_.__value_.__l.__size_, (uint64_t)a2 + 80);
  return this;
}

void sub_23012C068(_Unwind_Exception *a1)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  uint64_t v3;
  uint64_t v4;

  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(v4, *(_QWORD **)(v1 + 64));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(v3, *(_QWORD **)(v1 + 40));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::set<pxrInternal__aapl__pxrReserved__::SdfPath>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<pxrInternal__aapl__pxrReserved__::SdfPath>::insert[abi:ne180100]<std::__tree_const_iterator<pxrInternal__aapl__pxrReserved__::SdfPath,std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_23012C0F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<pxrInternal__aapl__pxrReserved__::SdfPath>::insert[abi:ne180100]<std::__tree_const_iterator<pxrInternal__aapl__pxrReserved__::SdfPath,std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v5, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28), (_DWORD *)v4 + 7);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::__split_buffer<realityio::internal::PrimToEntityMap::EntityData>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = i - 104;
    std::allocator<realityio::internal::PrimToEntityMap::EntityData>::destroy[abi:ne180100](v4, i - 104);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *result;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v5 = result[1];
  v4 = result[2];
  v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (result[2])
    result = (uint64_t *)(*v3 + 16);
  *result = (uint64_t)v3;
  v6 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  if (!v4)
    v6 = (_QWORD *)a2;
  *v6 = a2 + 8;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,unsigned long>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t realityio::logObjects(realityio *this)
{
  unsigned __int8 v1;
  realityio::LogObjects *v3;

  {
    v3 = (realityio::LogObjects *)operator new();
    realityio::logObjects(void)::logObjects = (uint64_t)realityio::LogObjects::LogObjects(v3);
  }
  return realityio::logObjects(void)::logObjects;
}

void sub_23012C2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

realityio::LogObjects *realityio::LogObjects::LogObjects(realityio::LogObjects *this)
{
  *(_QWORD *)this = os_log_create("com.apple.corerio", "Foundation");
  *((_QWORD *)this + 1) = os_log_create("com.apple.corerio", "StateTracking");
  *((_QWORD *)this + 2) = os_log_create("com.apple.corerio", "Scheduler");
  *((_QWORD *)this + 3) = os_log_create("com.apple.corerio", "Builder");
  *((_QWORD *)this + 4) = os_log_create("com.apple.corerio", "CDM");
  *((_QWORD *)this + 5) = os_log_create("com.apple.corerio", "Replication");
  *((_QWORD *)this + 6) = os_log_create("com.apple.corerio", "Mtlx");
  *((_QWORD *)this + 7) = os_log_create("com.apple.corerio", "BuilderExecutor");
  return this;
}

BOOL RIOPxrUsdUtilsStageGetRealityKitOptionBool(uint64_t a1, uint64_t a2, _BOOL8 a3)
{
  _BOOL8 RealityKitStage;
  unsigned int *v6;
  BOOL v7;

  RealityKitStage = a3;
  v7 = a3;
  if (a1 && a2)
  {
    v6 = *(unsigned int **)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v6);
    RealityKitStage = realityio::getRealityKitStageMetadata<BOOL>((uint64_t *)&v6, (_QWORD *)(a2 + 16), (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v6);
  }
  return RealityKitStage;
}

void sub_23012C42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a9);
  _Unwind_Resume(a1);
}

void RIOPxrUsdUtilsStageSetRealityKitOptionBool(uint64_t *a1, uint64_t a2, char a3)
{
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::UsdStage *v9;
  uint64_t EditTarget;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  __n128 v14;
  std::recursive_mutex *v15;
  std::recursive_mutex *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  pxrInternal__aapl__pxrReserved__::UsdStage *v21;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v22;
  pxrInternal__aapl__pxrReserved__::TfToken *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  pxrInternal__aapl__pxrReserved__::UsdStage *v27;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  void *__p;
  unsigned int *v34;
  char v35;
  uint64_t v36;
  char v37[8];
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    v6 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    v8 = a1[2];
    v7 = a1 + 2;
    if (v8)
    {
      v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
      EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v9);
      v11 = *(unsigned int **)(EditTarget + 8);
      __p = *(void **)EditTarget;
      v34 = v11;
      if (v11)
      {
        v12 = v11 + 2;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
    }
    else
    {
      __p = 0;
      v34 = 0;
    }
    v14.n128_f64[0] = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v6, &__p);
    v16 = v15;
    v17 = v34;
    if (v34)
    {
      v18 = v34 + 2;
      do
      {
        v19 = __ldxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v17 + 8))(v17, v14);
    }
    std::recursive_mutex::lock(v16);
    v21 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v21);
    v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(v22);
    v23 = (pxrInternal__aapl__pxrReserved__::TfToken *)v34;
    if (v34)
    {
      v24 = v34 + 2;
      do
      {
        v25 = __ldxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
        v23 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v23 + 8))(v23);
    }
    v38 = &unk_24FDE59C3;
    v37[0] = a3;
    if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v23);
    std::operator+<char>();
    pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
    if (v35 < 0)
      operator delete(__p);
    v27 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v27);
    v28 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(v28, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v36);
    v29 = v34;
    if (v34)
    {
      v30 = v34 + 2;
      do
      {
        v31 = __ldxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
        (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
    }
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v37);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v36, 0);
    std::recursive_mutex::unlock(v16);
  }
}

void sub_23012C64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, __int16 a17, char a18, char a19)
{
  std::recursive_mutex *v19;

  if (a15 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a17);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a16, 0);
  std::recursive_mutex::unlock(v19);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrUsdUtilsPrimCopyRealityKitOptionString(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, CFStringRef a3)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v5;
  uint64_t v6;
  __int128 v7;
  std::string *v8;
  unsigned int *v9;
  unsigned int v10;
  std::string __p;
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    if ((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    std::operator+<char>();
    MEMORY[0x2348B2764](&v13, &__p);
    v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)a1 + 24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomDataKey(v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomDataByKey(v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13);
      if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)v14) & 1) != 0)
      {
        v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
        if (*(char *)(v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
        }
        else
        {
          v7 = *(_OWORD *)v6;
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
        }
        v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        a3 = CFStringCreateWithCString(0, (const char *)v8, 0x8000100u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
    }
    if ((v13 & 7) != 0)
    {
      v9 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  return a3;
}

void sub_23012C8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  unsigned int *v18;
  unsigned int v19;

  if (a14 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a17);
  if ((a16 & 7) != 0)
  {
    v18 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  _Unwind_Resume(a1);
}

_QWORD *realityio::AnimationLibraryComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v7 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  v18 = 0;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v7))
  {
    v8 = *((_QWORD *)a4 + 1);
    if ((v8 & 4) != 0)
      v9 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v8 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a4);
    else
      v9 = *(uint64_t **)a4;
    realityio::WrappedRERef<REAsset *>::operator=(&v18, v9);
    v10 = v18;
  }
  else
  {
    v10 = 0;
  }
  if (a2[1] != *a2)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v11));
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v19))
      {
        if ((v20 & 4) != 0)
          v14 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(&v19);
        else
          v14 = v19;
        v13 = *v14;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
      ++v12;
      v11 += 16;
    }
    while (v12 < (uint64_t)(a2[1] - *a2) >> 3);
    if (v13)
    {
      if (!v10)
      {
        REAnimationLibraryComponentGetComponentType();
        v15 = REComponentCreateByClass();
        v19 = (uint64_t *)v15;
        if (v15)
          RERetain();
        v16 = v18;
        if (v18 != v15)
        {
          v18 = v15;
          v19 = (uint64_t *)v16;
        }
        realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v19);
        v20 = (unint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy((uint64_t *)&v19, &v18);
        pxrInternal__aapl__pxrReserved__::VtValue::operator=(a4, &v19);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
        RERelease();
      }
      REAnimationLibraryComponentAssignAnimationLibraryAsset();
      RENetworkMarkComponentDirty();
    }
  }
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v18);
}

void sub_23012CAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v9;

  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

realityio::tokens::CubeMeshBuilderTokens_StaticTokenType *realityio::tokens::CubeMeshBuilderTokens_StaticTokenType::CubeMeshBuilderTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(MEMORY[0x2348B2758](this, "Cube", 0) + 8);
  MEMORY[0x2348B2758](v2, "size", 0);
  MEMORY[0x2348B2758](this + 2, "material:binding", 0);
  v3 = *this;
  v23 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v23 = v4;
  }
  v6 = *v2;
  v24 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v24 = v7;
  }
  v9 = this[2];
  v25 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      v25 = v10;
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  v12 = (unsigned int *)operator new(0x18uLL);
  v13 = 0;
  this[3] = v12;
  this[4] = v12;
  this[5] = v12 + 6;
  do
  {
    v14 = (&v23)[v13];
    *(_QWORD *)v12 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        *(_QWORD *)v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v13;
    v12 += 2;
  }
  while (v13 != 3);
  v17 = (unsigned int **)&v26;
  this[4] = v12;
  do
  {
    v19 = (uint64_t)*--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
  }
  while (v17 != &v23);
  return (realityio::tokens::CubeMeshBuilderTokens_StaticTokenType *)this;
}

void sub_23012CCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  v18 = &a14;
  while (1)
  {
    v20 = *--v18;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == (uint64_t *)&a11)
    {
      if ((*v16 & 7) != 0)
      {
        v23 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((*v15 & 7) != 0)
      {
        v25 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((*v14 & 7) != 0)
      {
        v27 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::getCubeMeshBuilderDirtyStageDescriptor(uint64_t *a1@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count_vtbl *v4;
  uint64_t *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v6;
  unsigned int **v7;
  uint64_t v8;
  realityio::AnyValueDirtyPropertyDescriptor *v9;
  unsigned int **v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t i;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32[3];
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38[3];
  void **v39;
  char v40;
  void **v41[7];

  v41[6] = *(void ***)MEMORY[0x24BDAC8D0];
  v3 = operator new();
  memset(v38, 0, sizeof(v38));
  v4 = (std::__shared_weak_count_vtbl *)operator new();
  Data = (uint64_t *)atomic_load(&realityio::tokens::CubeMeshBuilderTokens);
  if (!Data)
    Data = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CubeMeshBuilderTokens);
  memset(v32, 0, sizeof(v32));
  v6 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v7 = (unsigned int **)atomic_load(&realityio::tokens::CubeMeshBuilderTokens);
  if (!v7)
    v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CubeMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 1));
  v8 = operator new();
  *(_QWORD *)v8 = &off_24FDE24C0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = v6;
  v41[0] = (void **)v6;
  v41[1] = (void **)v8;
  v9 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
  v10 = (unsigned int **)atomic_load(&realityio::tokens::CubeMeshBuilderTokens);
  if (!v10)
    v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CubeMeshBuilderTokens_StaticTokenType>>::_TryToCreateData(&realityio::tokens::CubeMeshBuilderTokens);
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 2));
  v11 = operator new();
  *(_QWORD *)v11 = &off_24FDE24C0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v9;
  v41[2] = (void **)v9;
  v41[3] = (void **)v11;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v39 = (void **)&v29;
  v40 = 0;
  v12 = operator new(0x20uLL);
  v13 = 0;
  v14 = 0;
  v29 = v12;
  v30 = v12;
  v31 = v12 + 4;
  do
  {
    v15 = v13;
    v16 = *(_OWORD *)&v41[2 * v14];
    *(_OWORD *)v12 = v16;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v12 += 2;
    v13 = 1;
    v14 = 1;
  }
  while ((v15 & 1) == 0);
  v30 = v12;
  realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v4, Data, v32, &v29);
  v33 = v4;
  v19 = (std::__shared_weak_count *)operator new();
  v19->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24FDE2538;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = v4;
  v41[4] = (void **)&v4->~__shared_weak_count;
  v41[5] = (void **)&v19->__vftable;
  v33 = 0;
  v34 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v39 = (void **)&v35;
  v40 = 0;
  v21 = operator new(0x10uLL);
  v35 = v21;
  v37 = v21 + 2;
  *v21 = v4;
  v21[1] = v19;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v36 = v21 + 2;
  realityio::DirtyStageDescriptor::DirtyStageDescriptor(v3, v38, &v35);
  v23 = (_QWORD *)operator new();
  *v23 = &off_24FDE25B0;
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = v3;
  *a1 = v3;
  a1[1] = (uint64_t)v23;
  v39 = (void **)&v35;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v39);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v25 = v34;
  if (v34)
  {
    v26 = (unint64_t *)&v34->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v39 = (void **)&v29;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v39);
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v41[i]);
  v41[0] = (void **)v32;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v41);
  v41[0] = (void **)v38;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v41);
}

void sub_23012D1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  MEMORY[0x2348B4E1C](v26, 0x10A1C40F82F910ELL);
  *(_QWORD *)(v27 - 120) = &a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 120));
  MEMORY[0x2348B4E1C](v25, 0x10A1C401BF1BAA1);
  _Unwind_Resume(a1);
}

void realityio::tokens::CameraBuilderTokens_StaticTokenType::~CameraBuilderTokens_StaticTokenType(realityio::tokens::CameraBuilderTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  void **v19;

  v19 = (void **)((char *)this + 48);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v19);
  v2 = *((_QWORD *)this + 5);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 4);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 2);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v17 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
}

realityio::CameraComponentBuilder *realityio::CameraComponentBuilder::CameraComponentBuilder(realityio::CameraComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned __int8 v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t *Data;
  realityio::AnyValueDirtyPropertyDescriptor *v19;
  unint64_t v20;
  realityio::AnyValueDirtyPropertyDescriptor *v21;
  unint64_t v22;
  realityio::AnyValueDirtyPropertyDescriptor *v23;
  unint64_t v24;
  realityio::AnyValueDirtyPropertyDescriptor *v25;
  unint64_t v26;
  realityio::AnyValueDirtyPropertyDescriptor *v27;
  unint64_t v28;
  uint64_t i;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41[3];
  _QWORD *v42[3];
  __int128 v43;
  _QWORD *v44[3];
  _QWORD *v45[3];
  __int128 v46;
  _QWORD *v47[3];
  uint64_t v48;
  uint64_t v49;
  void **v50;
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  _OWORD v55[5];
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v34, "CameraComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kCameraComponentBuilderIdentifier);
  v4 = atomic_load((unsigned __int8 *)&qword_255E54CF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_255E54CF0))
  {
    v15 = operator new();
    v16 = operator new();
    memset(v45, 0, sizeof(v45));
    v17 = (_BYTE *)operator new();
    Data = (uint64_t *)atomic_load(&_MergedGlobals_48);
    if (!Data)
      Data = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CameraBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CameraBuilderTokens_StaticTokenType>>::_TryToCreateData();
    memset(v42, 0, sizeof(v42));
    v19 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v20 = atomic_load(&_MergedGlobals_48);
    if (!v20)
      v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CameraBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CameraBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v20 + 8));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v40, (uint64_t)v19);
    v55[0] = v40;
    v40 = 0uLL;
    v21 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v22 = atomic_load(&_MergedGlobals_48);
    if (!v22)
      v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CameraBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CameraBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v22 + 16));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v39, (uint64_t)v21);
    v55[1] = v39;
    v39 = 0uLL;
    v23 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v24 = atomic_load(&_MergedGlobals_48);
    if (!v24)
      v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CameraBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CameraBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v24 + 24));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v38, (uint64_t)v23);
    v55[2] = v38;
    v38 = 0uLL;
    v25 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v26 = atomic_load(&_MergedGlobals_48);
    if (!v26)
      v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CameraBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CameraBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v26 + 32));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v37, (uint64_t)v25);
    v55[3] = v37;
    v37 = 0uLL;
    v27 = (realityio::AnyValueDirtyPropertyDescriptor *)operator new();
    v28 = atomic_load(&_MergedGlobals_48);
    if (!v28)
      v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CameraBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CameraBuilderTokens_StaticTokenType>>::_TryToCreateData();
    realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(v27, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v28 + 40));
    std::shared_ptr<realityio::AnyValueDirtyPropertyDescriptor>::shared_ptr[abi:ne180100]<realityio::AnyValueDirtyPropertyDescriptor,void>(&v36, (uint64_t)v27);
    v55[4] = v36;
    v36 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::vector[abi:ne180100](v41, v55, 5uLL);
    realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(v17, Data, v42, v41);
    std::shared_ptr<realityio::TypeNameDirtyPrimDescriptor>::shared_ptr[abi:ne180100]<realityio::TypeNameDirtyPrimDescriptor,void>(&v43, (uint64_t)v17);
    v56 = v43;
    v43 = 0uLL;
    std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::vector[abi:ne180100](v44, &v56, 1uLL);
    realityio::DirtyStageDescriptor::DirtyStageDescriptor(v16, v45, v44);
    std::shared_ptr<realityio::DirtyStageDescriptor>::shared_ptr[abi:ne180100]<realityio::DirtyStageDescriptor,void>(&v46, v16);
    v57 = v46;
    v46 = 0uLL;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::vector[abi:ne180100](v47, &v57, 1uLL);
    realityio::DirtyStageSubscription::DirtyStageSubscription(v15, v47);
    std::shared_ptr<realityio::DirtyStageSubscription>::shared_ptr[abi:ne180100]<realityio::DirtyStageSubscription,void>(&v48, v15);
    qword_255E54CE0 = v48;
    *(_QWORD *)algn_255E54CE8 = v49;
    v48 = 0;
    v49 = 0;
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v48);
    v50 = (void **)v47;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v50);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v57);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v46);
    v50 = (void **)v44;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v50);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v56);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
    v50 = (void **)v41;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v50);
    for (i = 4; i != -1; --i)
      std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v55[i]);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v37);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v39);
    std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&v40);
    *(_QWORD *)&v55[0] = v42;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
    *(_QWORD *)&v55[0] = v45;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
    __cxa_guard_release(&qword_255E54CF0);
  }
  v30 = qword_255E54CE0;
  v31 = *(std::__shared_weak_count **)algn_255E54CE8;
  if (*(_QWORD *)algn_255E54CE8)
  {
    v5 = (unint64_t *)(*(_QWORD *)algn_255E54CE8 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v53[0] = &off_24FDF96D0;
  v54 = v53;
  v51[0] = &off_24FDF9750;
  v52 = v51;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v34, (uint64_t)__p, &v30, (uint64_t)v53, (uint64_t)v51);
  v7 = v52;
  if (v52 == v51)
  {
    v8 = 4;
    v7 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
LABEL_10:
  v9 = v54;
  if (v54 == v53)
  {
    v10 = 4;
    v9 = v53;
    goto LABEL_14;
  }
  if (v54)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  v11 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v33 < 0)
    operator delete(__p[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  *(_QWORD *)this = &off_24FDF9658;
  return this;
}

void sub_23012DA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  MEMORY[0x2348B4E1C](v58, 0x10A1C40F82F910ELL);
  *(_QWORD *)(v61 - 208) = &a44;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v61 - 208));
  MEMORY[0x2348B4E1C](v59, 0x10A1C401BF1BAA1);
  MEMORY[0x2348B4E1C](v60, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_255E54CF0);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t realityio::CameraComponentBuilder::run(realityio::CameraComponentBuilder *this, realityio::Inputs *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::UsdStage *v5;
  pxrInternal__aapl__pxrReserved__::UsdGeomCamera *PrimAtPath;
  uint64_t IsA;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  realityio *v11;
  pxrInternal__aapl__pxrReserved__::UsdGeomCamera *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t result;
  unint64_t v23;
  uint8_t buf[160];
  void *__p;
  void *v26;
  realityio *v27;
  char v28[8];
  realityio *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (realityio::Inputs *)((char *)a2 + 32);
  v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(_QWORD *)a2 + 8));
  PrimAtPath = (pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, v4);
  pxrInternal__aapl__pxrReserved__::UsdGeomCamera::_GetStaticTfType(PrimAtPath);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if ((IsA & 1) != 0)
  {
    v8 = *(NSObject **)(realityio::logObjects((realityio *)IsA) + 24);
    v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
    if (v9)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22FF26000, v8, OS_LOG_TYPE_INFO, "Updating entity's camera", buf, 2u);
    }
    v10 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v9);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v10, (uint64_t)v28);
    if (v28[0])
    {
      v11 = v29;
      v27 = v29;
      if (v29)
      {
        v11 = (realityio *)RERetain();
        if (v27)
        {
          v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v33[0] = MEMORY[0x24BEE9D18] + 16;
          v23 = 0;
          pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetCamera(v12, (const pxrInternal__aapl__pxrReserved__::UsdTimeCode *)&v23);
          MEMORY[0x2348B1D08](v33);
          pxrInternal__aapl__pxrReserved__::GfCamera::GetClippingRange((pxrInternal__aapl__pxrReserved__::GfCamera *)buf);
          v23 = __PAIR64__(v14, v13);
          v15 = *((_QWORD *)a2 + 6);
          v16 = operator new(0x28uLL);
          *v16 = &off_24FDF97D0;
          v16[1] = buf;
          v16[2] = &v27;
          v16[3] = this;
          v16[4] = &v23;
          v34 = v16;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v33);
          v17 = v34;
          if (v34 == v33)
          {
            v18 = 4;
            v17 = v33;
          }
          else
          {
            if (!v34)
              goto LABEL_15;
            v18 = 5;
          }
          (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_15:
          if (__p)
          {
            v26 = __p;
            operator delete(__p);
          }
LABEL_17:
          realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v27);
          realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v28);
          goto LABEL_18;
        }
      }
    }
    else
    {
      v27 = 0;
    }
    v19 = *(NSObject **)(realityio::logObjects(v11) + 24);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22FF26000, v19, OS_LOG_TYPE_DEFAULT, "Stopping operation to set the component because entity no longer exists", buf, 2u);
    }
    goto LABEL_17;
  }
LABEL_18:
  if ((v32 & 7) != 0)
  {
    v20 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
  result = v30;
  if (v30)
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
  return result;
}

void sub_23012E0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;

  v35 = *(_QWORD **)(v33 - 48);
  if (v35 == v32)
  {
    v36 = 4;
    v35 = (_QWORD *)(v33 - 72);
  }
  else
  {
    if (!v35)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_6:
  if (__p)
    operator delete(__p);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((_QWORD *)(v33 - 160));
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result(v33 - 152);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v33 - 104));
  _Unwind_Resume(a1);
}

uint64_t realityio::CameraComponentBuilder::clear(realityio::CameraComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = realityio::EntityBuilder::kInputName(this);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v3, (uint64_t)v9);
  if (v9[0])
  {
    v8 = v10;
    if (v10)
    {
      RERetain();
      v4 = *((_QWORD *)a2 + 6);
      v11[0] = &off_24FDF9950;
      v11[1] = &v8;
      v12 = v11;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v11);
      v5 = v12;
      if (v12 == v11)
      {
        v6 = 4;
        v5 = v11;
        goto LABEL_8;
      }
      if (v12)
      {
        v6 = 5;
LABEL_8:
        (*(void (**)(void))(*v5 + 8 * v6))();
      }
    }
  }
  else
  {
    v8 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v8);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v9);
}

void sub_23012E254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a9);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void realityio::CameraComponentBuilder::~CameraComponentBuilder(realityio::CameraComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);
  JUMPOUT(0x2348B4E1CLL);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CameraBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CameraBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  realityio::tokens::CameraBuilderTokens_StaticTokenType *v0;
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int **v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v0 = (realityio::tokens::CameraBuilderTokens_StaticTokenType *)operator new();
  MEMORY[0x2348B2758](v0, "Camera", 0);
  MEMORY[0x2348B2758]((char *)v0 + 8, "projection", 0);
  MEMORY[0x2348B2758]((char *)v0 + 16, "clippingRange", 0);
  MEMORY[0x2348B2758]((char *)v0 + 24, "verticalAperture", 0);
  MEMORY[0x2348B2758]((char *)v0 + 32, "horizontalAperture", 0);
  MEMORY[0x2348B2758]((char *)v0 + 40, "focalLength", 0);
  v1 = *(unsigned int **)v0;
  v31 = v1;
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)((unint64_t)v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 2, v2));
    if ((v3 & 1) == 0)
      v31 = v2;
  }
  v4 = (unsigned int *)*((_QWORD *)v0 + 1);
  v32 = v4;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v32 = v5;
  }
  v7 = (unsigned int *)*((_QWORD *)v0 + 2);
  v33 = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      v33 = v8;
  }
  v10 = (unsigned int *)*((_QWORD *)v0 + 3);
  v34 = v10;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v34 = v11;
  }
  v13 = (unsigned int *)*((_QWORD *)v0 + 4);
  v35 = v13;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      v35 = v14;
  }
  v16 = (unsigned int *)*((_QWORD *)v0 + 5);
  v36 = v16;
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 2, v17));
    if ((v18 & 1) == 0)
      v36 = v17;
  }
  *((_QWORD *)v0 + 6) = 0;
  *((_QWORD *)v0 + 7) = 0;
  *((_QWORD *)v0 + 8) = 0;
  v19 = operator new(0x30uLL);
  v20 = 0;
  *((_QWORD *)v0 + 6) = v19;
  *((_QWORD *)v0 + 7) = v19;
  *((_QWORD *)v0 + 8) = v19 + 6;
  do
  {
    v21 = (&v31)[v20];
    *v19 = v21;
    if ((v21 & 7) != 0)
    {
      v22 = (unsigned int *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 2, v22));
      if ((v23 & 1) == 0)
        *v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v20;
    ++v19;
  }
  while (v20 != 6);
  v24 = (unsigned int **)&v37;
  *((_QWORD *)v0 + 7) = v19;
  do
  {
    v26 = (uint64_t)*--v24;
    v25 = v26;
    if ((v26 & 7) != 0)
    {
      v27 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v28 = __ldxr(v27);
      while (__stlxr(v28 - 2, v27));
    }
  }
  while (v24 != &v31);
  while (!__ldaxr(&_MergedGlobals_48))
  {
    if (!__stlxr((unint64_t)v0, &_MergedGlobals_48))
      return (unint64_t)v0;
  }
  __clrex();
  realityio::tokens::CameraBuilderTokens_StaticTokenType::~CameraBuilderTokens_StaticTokenType(v0);
  MEMORY[0x2348B4E1C]();
  return atomic_load(&_MergedGlobals_48);
}

void sub_23012E5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;

  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  v25 = &a18;
  while (1)
  {
    v27 = *--v25;
    v26 = v27;
    if ((v27 & 7) != 0)
    {
      v28 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
    }
    if (v25 == (uint64_t *)&a12)
    {
      if ((*v23 & 7) != 0)
      {
        v30 = (unsigned int *)(*v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      if ((*v22 & 7) != 0)
      {
        v32 = (unsigned int *)(*v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
      if ((*v21 & 7) != 0)
      {
        v34 = (unsigned int *)(*v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      if ((*v20 & 7) != 0)
      {
        v36 = (unsigned int *)(*v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      if ((*v19 & 7) != 0)
      {
        v38 = (unsigned int *)(*v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((*v18 & 7) != 0)
      {
        v40 = (unsigned int *)(*v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      MEMORY[0x2348B4E1C](v18, 0x60C40D8CED4CELL);
      _Unwind_Resume(a1);
    }
  }
}

void std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF96D0;
  return result;
}

void std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF96D0;
}

void std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  realityio::tokens::OutputIdentifiers_StaticTokenType *Data;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1E30;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  Data = (realityio::tokens::OutputIdentifiers_StaticTokenType *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!Data)
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData(&realityio::tokens::OutputIdentifiers);
  v14 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)Data + 8, &v14, &v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_23012E8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v14;

  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24FDF9750;
  return result;
}

void std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24FDF9750;
}

char *std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0x68uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24FDE1F10;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 std::__function::__func<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24FDF97D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF97D0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  if (pxrInternal__aapl__pxrReserved__::GfCamera::GetProjection(*(pxrInternal__aapl__pxrReserved__::GfCamera **)(a1 + 8)))
  {
    REOrthographicCameraComponentGetComponentType();
    v3 = *(_QWORD *)(a1 + 32);
    v13[0] = &off_24FDF98C0;
    v13[1] = v2;
    v13[2] = v3;
    v14 = v13;
    v12 = REEntityGetOrAddComponentByClass();
    if (!v14)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, uint64_t *))(*v14 + 48))(v14, &v12);
    RENetworkMarkComponentDirty();
    v4 = v14;
    if (v14 == v13)
    {
      v5 = 4;
      v4 = v13;
    }
    else
    {
      if (!v14)
      {
LABEL_12:
        REPerspectiveCameraComponentGetComponentType();
        return REEntityRemoveComponentByClass();
      }
      v5 = 5;
    }
    (*(void (**)(_QWORD *))(*v4 + 8 * v5))(v4);
    goto LABEL_12;
  }
  REPerspectiveCameraComponentGetComponentType();
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = operator new(0x20uLL);
  *v8 = &off_24FDF9840;
  v8[1] = v2;
  v8[2] = v6;
  v8[3] = v7;
  v14 = v8;
  v12 = REEntityGetOrAddComponentByClass();
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, uint64_t *))(*v14 + 48))(v14, &v12);
  RENetworkMarkComponentDirty();
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_14;
  }
  if (v14)
  {
    v10 = 5;
LABEL_14:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
  }
  REOrthographicCameraComponentGetComponentType();
  return REEntityRemoveComponentByClass();
}

void sub_23012ED00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24FDF9840;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF9840;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  REPerspectiveCameraComponentSetNear();
  REPerspectiveCameraComponentSetFar();
  pxrInternal__aapl__pxrReserved__::GfCamera::GetFieldOfView();
  return REPerspectiveCameraComponentSetFieldOfView();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio22CameraComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio22CameraComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
  JUMPOUT(0x2348B4E1CLL);
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24FDF98C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24FDF98C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  REOrthographicCameraComponentSetNear();
  return REOrthographicCameraComponentSetFar();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio22CameraComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio22CameraComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void std::__function::__func<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x2348B4E1CLL);
}

_QWORD *std::__function::__func<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24FDF9950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24FDF9950;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()()
{
  REPerspectiveCameraComponentGetComponentType();
  REEntityRemoveComponentByClass();
  REOrthographicCameraComponentGetComponentType();
  return REEntityRemoveComponentByClass();
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void RIO_MTLX::getShaderNodes(RIO_MTLX::InterfaceElement **a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  RIO_MTLX::Implementation *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *j;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  RIO_MTLX::InterfaceElement *v24;
  std::__shared_weak_count *v25;
  RIO_MTLX::InterfaceElement *v26;
  uint64_t *NodeGraph;
  RIO_MTLX::PortElement *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t *OutputString;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  void *v41;
  void *v42;
  void *v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  __int128 v54;
  int64x2_t v55;
  uint64_t v56;
  __int128 v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  char *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *k;
  unint64_t v72;
  uint64_t v73;
  RIO_MTLX::InterfaceElement *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  RIO_MTLX *v94;
  std::string *v95;
  uint64_t *v96;
  RIO_MTLX *v97;
  RIO_MTLX::InterfaceElement *v98;
  uint64_t *v99;
  uint64_t v100;
  RIO_MTLX *v101;
  uint64_t *v102;
  RIO_MTLX::Implementation *v103;
  std::__shared_weak_count *v104;
  unsigned __int8 *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  size_t *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  size_t v111;
  uint64_t v112;
  int v113;
  unsigned __int8 *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  RIO_MTLX *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  size_t *v124;
  unsigned __int8 *v125;
  uint64_t v126;
  size_t v127;
  uint64_t v128;
  int v129;
  unsigned __int8 *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  _QWORD *i;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  __int128 v167;
  _QWORD v168[2];
  uint64_t v169;
  std::__shared_weak_count *v170;
  __int128 v171;
  void *__p[2];
  char *v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  __int128 v178;
  _BYTE v179[24];
  char *v180;
  void **v181;
  char v182[24];
  __int128 v183;
  RIO_MTLX::Implementation *v184;
  std::__shared_weak_count *v185;
  RIO_MTLX::InterfaceElement *v186;
  std::__shared_weak_count *v187;
  __int128 v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  RIO_MTLX::InterfaceElement *v191;
  std::__shared_weak_count *v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD **v196;
  _QWORD *v197[3];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v197[0] = 0;
  v197[1] = 0;
  v196 = v197;
  RIO_MTLX::InterfaceElement::getActiveInputs(*a1, (uint64_t)&v194);
  v8 = v194;
  v9 = v195;
  if (v194 == v195)
  {
LABEL_135:
    RIO_MTLX::Node::getNodeDef((std::string *)*a1, a3, 0, (RIO_MTLX::InterfaceElement **)&v193);
    v95 = (std::string *)v193;
    if ((_QWORD)v193)
    {
      v96 = RIO_MTLX::EMPTY_STRING(v94);
      RIO_MTLX::NodeDef::getImplementation(v95, (uint64_t)v96, &v191);
      v98 = v191;
      if (v191)
      {
        v99 = RIO_MTLX::EMPTY_STRING(v97);
        if (RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>((uint64_t)v98, (unsigned __int8 *)v99))
        {
          RIO_MTLX::Element::asA<RIO_MTLX::NodeGraph>((uint64_t)v191, &v189);
          v100 = v193;
          v102 = RIO_MTLX::EMPTY_STRING(v101);
          RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v100, (unsigned __int8 *)v102, (uint64_t)&v184);
          v103 = v184;
          v166 = v185;
          if (v184 != (RIO_MTLX::Implementation *)v185)
          {
            while (1)
            {
              v105 = *(unsigned __int8 **)v103;
              v104 = (std::__shared_weak_count *)*((_QWORD *)v103 + 1);
              *(_QWORD *)&v188 = *(_QWORD *)v103;
              *((_QWORD *)&v188 + 1) = v104;
              if (v104)
              {
                p_shared_owners = (unint64_t *)&v104->__shared_owners_;
                do
                  v107 = __ldxr(p_shared_owners);
                while (__stxr(v107 + 1, p_shared_owners));
              }
              v108 = (size_t *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v105 + 56))(v105);
              v109 = (unsigned __int8 *)RIO_MTLX::MATERIAL_TYPE_STRING((RIO_MTLX *)v108);
              v110 = *((unsigned __int8 *)v108 + 23);
              if ((v110 & 0x80u) == 0)
                v111 = *((unsigned __int8 *)v108 + 23);
              else
                v111 = v108[1];
              v112 = v109[23];
              v113 = (char)v112;
              if ((v112 & 0x80u) != 0)
                v112 = *((_QWORD *)v109 + 1);
              if (v111 == v112)
                break;
LABEL_232:
              if (v104)
              {
                v155 = (unint64_t *)&v104->__shared_owners_;
                do
                  v156 = __ldaxr(v155);
                while (__stlxr(v156 - 1, v155));
                if (!v156)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
              v103 = (RIO_MTLX::Implementation *)((char *)v103 + 16);
              if (v103 == (RIO_MTLX::Implementation *)v166)
                goto LABEL_238;
            }
            if (v113 >= 0)
              v114 = v109;
            else
              v114 = *(unsigned __int8 **)v109;
            if ((v110 & 0x80) != 0)
            {
              if (memcmp((const void *)*v108, v114, v108[1]))
                goto LABEL_232;
            }
            else if (*((_BYTE *)v108 + 23))
            {
              do
              {
                if (*(unsigned __int8 *)v108 != *v114)
                  goto LABEL_232;
                v108 = (size_t *)((char *)v108 + 1);
                ++v114;
                --v110;
              }
              while (v110);
            }
            RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(v189, v105 + 48, &v186);
            RIO_MTLX::Element::traverseGraph(v186, (uint64_t)__p);
            if (v176 == v177)
              RIO_MTLX::GraphIterator::operator++((RIO_MTLX *)__p);
            *((_QWORD *)&v178 + 1) = 0;
            *(_OWORD *)v179 = *(_OWORD *)__p;
            if (__p[1])
            {
              v115 = (unint64_t *)((char *)__p[1] + 8);
              do
                v116 = __ldxr(v115);
              while (__stxr(v116 + 1, v115));
            }
            *(_QWORD *)&v179[16] = v173;
            v180 = (char *)v174;
            if (v174)
            {
              v117 = (unint64_t *)(v174 + 8);
              do
                v118 = __ldxr(v117);
              while (__stxr(v118 + 1, v117));
            }
            std::set<std::shared_ptr<RIO_MTLX::Element>>::set[abi:ne180100]((uint64_t *)&v181, (uint64_t)&v175);
            memset(v182, 0, sizeof(v182));
            std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(v182, v176, v177, 0xAAAAAAAAAAAAAAABLL * (v177 - v176));
            v183 = v178;
            RIO_MTLX::GraphIterator::~GraphIterator((RIO_MTLX::GraphIterator *)__p);
            while (1)
            {
              RIO_MTLX::NULL_GRAPH_ITERATOR(v119);
              if (RIO_MTLX::GraphIterator::operator==((uint64_t)v179, (uint64_t)&RIO_MTLX::NULL_GRAPH_ITERATOR(void)::v))
              {
                RIO_MTLX::GraphIterator::~GraphIterator((RIO_MTLX::GraphIterator *)v179);
                v152 = v187;
                if (v187)
                {
                  v153 = (unint64_t *)&v187->__shared_owners_;
                  do
                    v154 = __ldaxr(v153);
                  while (__stlxr(v154 - 1, v153));
                  if (!v154)
                  {
                    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                    std::__shared_weak_count::__release_weak(v152);
                  }
                }
                v104 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
                goto LABEL_232;
              }
              v121 = *(std::__shared_weak_count **)&v179[8];
              v120 = *(_QWORD *)v179;
              v171 = *(_OWORD *)v179;
              if (*(_QWORD *)&v179[8])
              {
                v122 = (unint64_t *)(*(_QWORD *)&v179[8] + 8);
                do
                  v123 = __ldxr(v122);
                while (__stxr(v123 + 1, v122));
              }
              if (!v120)
              {
                LOBYTE(v183) = 1;
                if (!v121)
                  goto LABEL_225;
LABEL_221:
                v150 = (unint64_t *)&v121->__shared_owners_;
                do
                  v151 = __ldaxr(v150);
                while (__stlxr(v151 - 1, v150));
                if (!v151)
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                }
                goto LABEL_225;
              }
              RIO_MTLX::Element::asA<RIO_MTLX::Node>(v120, &v169);
              if (v169)
              {
                v124 = (size_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v169 + 56))(v169);
                v125 = (unsigned __int8 *)RIO_MTLX::MATERIAL_TYPE_STRING((RIO_MTLX *)v124);
                v126 = *((unsigned __int8 *)v124 + 23);
                if ((v126 & 0x80u) == 0)
                  v127 = *((unsigned __int8 *)v124 + 23);
                else
                  v127 = v124[1];
                v128 = v125[23];
                v129 = (char)v128;
                if ((v128 & 0x80u) != 0)
                  v128 = *((_QWORD *)v125 + 1);
                if (v127 == v128)
                {
                  if (v129 >= 0)
                    v130 = v125;
                  else
                    v130 = *(unsigned __int8 **)v125;
                  if ((v126 & 0x80) != 0)
                  {
                    if (memcmp((const void *)*v124, v130, v124[1]))
                      goto LABEL_215;
LABEL_189:
                    v131 = v170;
                    v168[0] = v169;
                    v168[1] = v170;
                    if (v170)
                    {
                      v132 = (unint64_t *)&v170->__shared_owners_;
                      do
                        v133 = __ldxr(v132);
                      while (__stxr(v133 + 1, v132));
                    }
                    RIO_MTLX::getShaderNodes(__p, v168, a2, a3);
                    if (v131)
                    {
                      v134 = (unint64_t *)&v131->__shared_owners_;
                      do
                        v135 = __ldaxr(v134);
                      while (__stlxr(v135 - 1, v134));
                      if (!v135)
                      {
                        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                        std::__shared_weak_count::__release_weak(v131);
                      }
                    }
                    v136 = (unint64_t *)__p[0];
                    v137 = (unint64_t *)__p[1];
                    while (v136 != v137)
                    {
                      v138 = *v136;
                      v139 = v136[1];
                      *(_QWORD *)&v167 = *v136;
                      *((_QWORD *)&v167 + 1) = v139;
                      if (v139)
                      {
                        v140 = (unint64_t *)(v139 + 8);
                        do
                          v141 = __ldxr(v140);
                        while (__stxr(v141 + 1, v140));
                      }
                      for (i = v197[0]; i; i = (_QWORD *)*i)
                      {
                        v143 = i[4];
                        if (v138 >= v143)
                        {
                          if (v143 >= v138)
                            goto LABEL_208;
                          ++i;
                        }
                      }
                      std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a4, &v167);
                      std::__tree<std::shared_ptr<realityio::Builder>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t *)&v196, v167, v167, *((uint64_t *)&v167 + 1));
LABEL_208:
                      v144 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
                      if (*((_QWORD *)&v167 + 1))
                      {
                        v145 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
                        do
                          v146 = __ldaxr(v145);
                        while (__stlxr(v146 - 1, v145));
                        if (!v146)
                        {
                          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                          std::__shared_weak_count::__release_weak(v144);
                        }
                      }
                      v136 += 2;
                    }
                    *(_QWORD *)&v167 = __p;
                    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v167);
                    goto LABEL_215;
                  }
                  if (!*((_BYTE *)v124 + 23))
                    goto LABEL_189;
                  while (*(unsigned __int8 *)v124 == *v130)
                  {
                    v124 = (size_t *)((char *)v124 + 1);
                    ++v130;
                    if (!--v126)
                      goto LABEL_189;
                  }
                }
              }
LABEL_215:
              v147 = v170;
              if (v170)
              {
                v148 = (unint64_t *)&v170->__shared_owners_;
                do
                  v149 = __ldaxr(v148);
                while (__stlxr(v149 - 1, v148));
                if (!v149)
                {
                  ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                  std::__shared_weak_count::__release_weak(v147);
                }
              }
              v121 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
              if (*((_QWORD *)&v171 + 1))
                goto LABEL_221;
LABEL_225:
              v119 = RIO_MTLX::GraphIterator::operator++((RIO_MTLX *)v179);
            }
          }
LABEL_238:
          *(_QWORD *)v179 = &v184;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v179);
          v157 = v190;
          if (v190)
          {
            v158 = (unint64_t *)&v190->__shared_owners_;
            do
              v159 = __ldaxr(v158);
            while (__stlxr(v159 - 1, v158));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
              std::__shared_weak_count::__release_weak(v157);
            }
          }
        }
      }
      v160 = v192;
      if (v192)
      {
        v161 = (unint64_t *)&v192->__shared_owners_;
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
    }
    v163 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
    if (*((_QWORD *)&v193 + 1))
    {
      v164 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    goto LABEL_253;
  }
  do
  {
    v11 = *(RIO_MTLX::Implementation **)v8;
    v10 = *(std::__shared_weak_count **)(v8 + 8);
    v184 = *(RIO_MTLX::Implementation **)v8;
    v185 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    (*(void (**)(__int128 *__return_ptr, RIO_MTLX::Implementation *))(*(_QWORD *)v11 + 64))(&v193, v11);
    if ((_QWORD)v193)
    {
      for (j = v197[0]; j; j = (_QWORD *)*j)
      {
        v15 = j[4];
        if ((unint64_t)v193 >= v15)
        {
          if (v15 >= (unint64_t)v193)
            goto LABEL_28;
          ++j;
        }
      }
      v16 = a2[23];
      if ((v16 & 0x80u) != 0)
        v16 = *((_QWORD *)a2 + 1);
      if (v16)
      {
        v17 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v193 + 56))(v193);
        v18 = v17[23];
        if ((v18 & 0x80u) == 0)
          v19 = v17[23];
        else
          v19 = *((_QWORD *)v17 + 1);
        v20 = a2[23];
        v21 = (char)v20;
        if ((v20 & 0x80u) != 0)
          v20 = *((_QWORD *)a2 + 1);
        if (v19 != v20)
          goto LABEL_123;
        if (v21 >= 0)
          v22 = a2;
        else
          v22 = *(unsigned __int8 **)a2;
        if ((v18 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v17, v22, *((_QWORD *)v17 + 1)))
            goto LABEL_123;
        }
        else if (v17[23])
        {
          while (*v17 == *v22)
          {
            ++v17;
            ++v22;
            if (!--v18)
              goto LABEL_63;
          }
          goto LABEL_123;
        }
      }
LABEL_63:
      v56 = *(unsigned __int8 *)(a3 + 23);
      if ((v56 & 0x80u) != 0)
        v56 = *(_QWORD *)(a3 + 8);
      if (v56)
      {
        RIO_MTLX::Node::getNodeDef((std::string *)v193, a3, 0, (RIO_MTLX::InterfaceElement **)v179);
        v57 = *(_OWORD *)v179;
        if (!*(_QWORD *)&v179[8])
          goto LABEL_70;
        v58 = (unint64_t *)(*(_QWORD *)&v179[8] + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v57 + 1) + 16))(*((_QWORD *)&v57 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v57 + 1));
          if (!(_QWORD)v57)
            goto LABEL_123;
        }
        else
        {
LABEL_70:
          if (!(_QWORD)v57)
            goto LABEL_123;
        }
      }
      std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a4, &v193);
      std::__tree<std::shared_ptr<realityio::Builder>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t *)&v196, v193, v193, *((uint64_t *)&v193 + 1));
      goto LABEL_123;
    }
LABEL_28:
    v23 = (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE((RIO_MTLX::PortElement *)v193);
    if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v11 + 20, v23))goto LABEL_123;
    v24 = *a1;
    v191 = 0;
    v192 = 0;
    v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 29);
    if (v25 && (v192 = std::__shared_weak_count::lock(v25)) != 0)
    {
      v26 = (RIO_MTLX::InterfaceElement *)*((_QWORD *)v24 + 28);
      v191 = v26;
    }
    else
    {
      v26 = 0;
    }
    NodeGraph = RIO_MTLX::Implementation::getNodeGraph(v11);
    RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeGraph>((uint64_t)v26, (unsigned __int8 *)NodeGraph, &v189);
    if (v189)
    {
      __p[0] = 0;
      __p[1] = 0;
      v173 = 0;
      v29 = (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(v28);
      if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)v11 + 20, v29))
      {
        v30 = v189;
        OutputString = RIO_MTLX::PortElement::getOutputString(v11);
        RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(v30, (unsigned __int8 *)OutputString, &v188);
        v32 = (char *)__p[1];
        if (__p[1] >= v173)
        {
          v44 = ((char *)__p[1] - (char *)__p[0]) >> 4;
          v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 60)
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          v46 = v173 - (char *)__p[0];
          if ((v173 - (char *)__p[0]) >> 3 > v45)
            v45 = v46 >> 3;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
            v47 = 0xFFFFFFFFFFFFFFFLL;
          else
            v47 = v45;
          v181 = (void **)&v173;
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v173, v47);
          v50 = &v48[16 * v44];
          *(_OWORD *)v50 = v188;
          v188 = 0uLL;
          v52 = __p[0];
          v51 = __p[1];
          if (__p[1] == __p[0])
          {
            v55 = vdupq_n_s64((unint64_t)__p[1]);
            v53 = &v48[16 * v44];
          }
          else
          {
            v53 = &v48[16 * v44];
            do
            {
              v54 = *((_OWORD *)v51 - 1);
              v51 -= 2;
              *((_OWORD *)v53 - 1) = v54;
              v53 -= 16;
              *v51 = 0;
              v51[1] = 0;
            }
            while (v51 != v52);
            v55 = *(int64x2_t *)__p;
          }
          v60 = v50 + 16;
          __p[0] = v53;
          __p[1] = v50 + 16;
          *(int64x2_t *)&v179[8] = v55;
          v61 = v173;
          v173 = &v48[16 * v49];
          v180 = v61;
          *(_QWORD *)v179 = v55.i64[0];
          std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((uint64_t)v179);
          v62 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
          __p[1] = v60;
          if (*((_QWORD *)&v188 + 1))
          {
            v63 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
        }
        else
        {
          *(_OWORD *)__p[1] = v188;
          __p[1] = v32 + 16;
        }
      }
      else
      {
        v39 = v189;
        v40 = RIO_MTLX::EMPTY_STRING(0);
        RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v39, (unsigned __int8 *)v40, (uint64_t)v179);
        v41 = __p[0];
        if (__p[0])
        {
          v42 = __p[1];
          v43 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              v42 = (void *)std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)v42 - 16);
            while (v42 != v41);
            v43 = __p[0];
          }
          __p[1] = v41;
          operator delete(v43);
        }
        *(_OWORD *)__p = *(_OWORD *)v179;
        v173 = *(char **)&v179[16];
        memset(v179, 0, sizeof(v179));
        *(_QWORD *)&v188 = v179;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
      }
      v65 = (uint64_t *)__p[0];
      v66 = (uint64_t *)__p[1];
      while (1)
      {
        if (v65 == v66)
        {
          *(_QWORD *)v179 = __p;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v179);
          v84 = v190;
          if (v190)
          {
            v85 = (unint64_t *)&v190->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          v36 = v192;
          if (v192)
          {
            v87 = (unint64_t *)&v192->__shared_owners_;
            do
              v38 = __ldaxr(v87);
            while (__stlxr(v38 - 1, v87));
LABEL_121:
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          goto LABEL_123;
        }
        v67 = *v65;
        v68 = v65[1];
        *(_QWORD *)v179 = *v65;
        *(_QWORD *)&v179[8] = v68;
        if (v68)
        {
          v69 = (unint64_t *)(v68 + 8);
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v67 + 64))(&v188);
        if ((_QWORD)v188)
        {
          for (k = v197[0]; k; k = (_QWORD *)*k)
          {
            v72 = k[4];
            if ((unint64_t)v188 >= v72)
            {
              if (v72 >= (unint64_t)v188)
                goto LABEL_100;
              ++k;
            }
          }
          v73 = *(unsigned __int8 *)(a3 + 23);
          if ((v73 & 0x80u) != 0)
            v73 = *(_QWORD *)(a3 + 8);
          if (!v73)
            goto LABEL_99;
          RIO_MTLX::Node::getNodeDef((std::string *)v188, a3, 0, &v186);
          v74 = v186;
          v75 = v187;
          if (v187)
          {
            v76 = (unint64_t *)&v187->__shared_owners_;
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
              if (!v74)
                goto LABEL_100;
LABEL_99:
              std::vector<std::shared_ptr<RIO_MTLX::Element>>::push_back[abi:ne180100]((char **)a4, &v188);
              std::__tree<std::shared_ptr<realityio::Builder>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t *)&v196, v188, v188, *((uint64_t *)&v188 + 1));
              goto LABEL_100;
            }
          }
          if (v74)
            goto LABEL_99;
        }
LABEL_100:
        v78 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
        if (*((_QWORD *)&v188 + 1))
        {
          v79 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v81 = *(std::__shared_weak_count **)&v179[8];
        if (*(_QWORD *)&v179[8])
        {
          v82 = (unint64_t *)(*(_QWORD *)&v179[8] + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v65 += 2;
      }
    }
    v33 = v190;
    if (v190)
    {
      v34 = (unint64_t *)&v190->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v192;
    if (v192)
    {
      v37 = (unint64_t *)&v192->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      goto LABEL_121;
    }
LABEL_123:
    v88 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
    if (*((_QWORD *)&v193 + 1))
    {
      v89 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v91 = v185;
    if (v185)
    {
      v92 = (unint64_t *)&v185->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v8 += 16;
  }
  while (v8 != v9);
  if (v194 == v195)
    goto LABEL_135;
LABEL_253:
  *(_QWORD *)v179 = &v194;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v179);
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(v197[0]);
}

void sub_23012FDC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v2 - 184);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v2 - 168);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100](v2 - 152);
  *(_QWORD *)(v2 - 152) = v2 - 136;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 152));
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(*(_QWORD **)(v2 - 104));
  *(_QWORD *)(v2 - 112) = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 112));
  _Unwind_Resume(a1);
}

uint64_t realityio::DirtyStageDescriptor::DirtyStageDescriptor(uint64_t a1, _QWORD **a2, _QWORD **a3)
{
  *(_QWORD *)a1 = off_24FDF99D0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>((char *)(a1 + 8), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*>((char *)(a1 + 32), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  *(_BYTE *)(a1 + 56) = realityio::DirtyStageDescriptor::_isEmpty((realityio::DirtyStageDescriptor *)a1);
  *(_BYTE *)(a1 + 57) = realityio::DirtyStageDescriptor::_isStageMetadataOnlyPredicate((realityio::DirtyStageDescriptor *)a1);
  return a1;
}

void sub_230130024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::DirtyStageDescriptor::_isEmpty(realityio::DirtyStageDescriptor *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;

  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  while (1)
  {
    if (v2 == v3)
    {
      v10 = 1;
      goto LABEL_16;
    }
    v4 = *v2;
    v5 = (std::__shared_weak_count *)v2[1];
    if (v5)
      break;
    if (!*(_BYTE *)(v4 + 8))
      goto LABEL_15;
LABEL_13:
    v2 += 2;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = *(unsigned __int8 *)(v4 + 8);
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v8)
    goto LABEL_13;
LABEL_15:
  v10 = 0;
LABEL_16:
  v11 = (uint64_t *)*((_QWORD *)this + 4);
  v12 = (uint64_t *)*((_QWORD *)this + 5);
  if (v11 == v12)
  {
    v17 = 1;
  }
  else
  {
    do
    {
      v13 = *v11;
      v14 = (std::__shared_weak_count *)v11[1];
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      if (v14)
      {
        v18 = (unint64_t *)&v14->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v11 += 2;
      if (v11 == v12)
        v20 = 0;
      else
        v20 = v17;
    }
    while ((v20 & 1) != 0);
  }
  return v10 & v17;
}

void sub_23013018C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::DirtyStageDescriptor::_isStageMetadataOnlyPredicate(realityio::DirtyStageDescriptor *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = (uint64_t *)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  while (1)
  {
    v4 = *v1;
    v5 = (std::__shared_weak_count *)v1[1];
    if (v5)
      break;
    if (!*(_BYTE *)(v4 + 8))
      goto LABEL_14;
LABEL_12:
    v1 += 2;
    if (v1 == v2)
      return 0;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = *(unsigned __int8 *)(v4 + 8);
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v8)
    goto LABEL_12;
LABEL_14:
  v11 = (uint64_t *)*((_QWORD *)this + 4);
  v12 = (uint64_t *)*((_QWORD *)this + 5);
  if (v11 == v12)
    return 1;
  do
  {
    v13 = *v11;
    v14 = (std::__shared_weak_count *)v11[1];
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    if (v14)
    {
      v17 = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v11 += 2;
    if (v11 == v12)
      v19 = 0;
    else
      v19 = v10;
  }
  while ((v19 & 1) != 0);
  return v10;
}

void sub_2301302DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void realityio::DirtyStageDescriptor::getExplicitPrimTypes(realityio::DirtyStageDescriptor *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  uint64_t v21;
  void **v22;

  v21 = 0;
  v3 = 0uLL;
  v20 = 0u;
  v4 = (uint64_t *)*((_QWORD *)this + 4);
  v5 = (uint64_t *)*((_QWORD *)this + 5);
  if (v4 == v5)
  {
    v13 = 0;
LABEL_17:
    *(_OWORD *)a2 = v3;
    *(_QWORD *)(a2 + 16) = v13;
    v21 = 0;
    v20 = 0uLL;
  }
  else
  {
    while (1)
    {
      v6 = *v4;
      v7 = (std::__shared_weak_count *)v4[1];
      v18 = *v4;
      v19 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v16 = 0uLL;
      v17 = 0;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v6 + 40))(&v14);
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vdeallocate((void **)&v16);
      v16 = v14;
      v17 = v15;
      v15 = 0;
      v14 = 0uLL;
      v22 = (void **)&v14;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v22);
      v10 = v16;
      if ((_QWORD)v16 == *((_QWORD *)&v16 + 1))
      {
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
      }
      else
      {
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>((uint64_t *)&v20, *((_QWORD **)&v20 + 1), (uint64_t *)v16, *((uint64_t **)&v16 + 1), (uint64_t)(*((_QWORD *)&v16 + 1) - v16) >> 3);
      }
      *(_QWORD *)&v14 = &v16;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
      if (v7)
      {
        v11 = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if ((_QWORD)v10 == *((_QWORD *)&v10 + 1))
        break;
      v4 += 2;
      if (v4 == v5)
      {
        v3 = v20;
        v13 = v21;
        goto LABEL_17;
      }
    }
  }
  *(_QWORD *)&v16 = &v20;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_230130468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  a9 = &a13;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::shared_ptr<realityio::DirtyStageDescriptor const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  a13 = (void **)&a19;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t realityio::DirtyStageDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::UsdStage *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char IsValid;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  _BYTE *v27;
  _QWORD *v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  pxrInternal__aapl__pxrReserved__::UsdStage *v59;
  _BYTE v61[24];
  _BYTE *v62;
  _BYTE v63[24];
  _BYTE *v64;
  _BYTE v65[24];
  _BYTE *v66;
  _QWORD v67[3];
  _QWORD *v68;
  char v69;
  _BYTE v70[24];
  _BYTE *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a7 + 24) || !*(_QWORD *)(a8 + 24) || !*(_QWORD *)(a9 + 24) || !*(_QWORD *)(a10 + 24))
    return 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(this, a2);
  IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v72);
  if ((v75 & 7) != 0)
  {
    v16 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v74);
  if (v73)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v73);
  if ((IsValid & 1) == 0)
    return 0;
  v59 = this;
  v55 = a1;
  v19 = a1 + 8;
  v18 = *(uint64_t **)(a1 + 8);
  v56 = *(uint64_t **)(v19 + 8);
  if (v56 != v18)
  {
    while (1)
    {
      v20 = *v18;
      v21 = (std::__shared_weak_count *)v18[1];
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)&v73, a7);
      v24 = (uint64_t)v76;
      if (!v76)
        goto LABEL_18;
      if (v76 != (uint64_t *)&v73)
        break;
      v68 = v67;
      ((void (*)(std::__shared_weak_count **, _QWORD *))v73[1].__vftable)(&v73, v67);
LABEL_20:
      v25 = v77;
      v69 = v77;
      v71 = 0;
      v26 = operator new(0x38uLL);
      v27 = v26;
      *v26 = &off_24FDF9A00;
      if (!v68)
      {
        v28 = v26 + 5;
        goto LABEL_24;
      }
      if (v68 != v67)
      {
        v26[5] = v68;
        v28 = &v68;
LABEL_24:
        *v28 = 0;
        goto LABEL_26;
      }
      v26[5] = v26 + 2;
      (*(void (**)(_QWORD *))(v67[0] + 24))(v67);
      v25 = v69;
LABEL_26:
      v27[48] = v25;
      v71 = v27;
      v29 = (*(uint64_t (**)(_BYTE *, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v27 + 48))(v27, a2, v20);
      v30 = v71;
      if (v71 == v70)
      {
        v30 = v70;
        v31 = 4;
      }
      else
      {
        if (!v71)
          goto LABEL_31;
        v31 = 5;
      }
      (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_31:
      v32 = v68;
      if (v68 == v67)
      {
        v32 = v67;
        v33 = 4;
      }
      else
      {
        if (!v68)
          goto LABEL_36;
        v33 = 5;
      }
      (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_36:
      v34 = v76;
      if (v76 == (uint64_t *)&v73)
      {
        v34 = (uint64_t *)&v73;
        v35 = 4;
        goto LABEL_40;
      }
      if (v76)
      {
        v35 = 5;
LABEL_40:
        (*(void (**)(void))(*v34 + 8 * v35))();
      }
      if (v21)
      {
        v36 = (unint64_t *)&v21->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if ((v29 & 1) != 0)
        goto LABEL_51;
      v38 = 0;
      v18 += 2;
      if (v18 == v56)
        return v38;
    }
    v24 = (*(uint64_t (**)(void))(*v76 + 16))();
LABEL_18:
    v68 = (_QWORD *)v24;
    goto LABEL_20;
  }
LABEL_51:
  v40 = *(uint64_t **)(v55 + 32);
  v41 = *(uint64_t **)(v55 + 40);
  if (v40 != v41)
  {
    while (1)
    {
      v42 = *v40;
      v43 = (std::__shared_weak_count *)v40[1];
      v72 = *v40;
      v73 = v43;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v65, a8);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v63, a9);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v61, a10);
      v38 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, pxrInternal__aapl__pxrReserved__::UsdStage *, uint64_t, uint64_t, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)v42 + 16))(v42, a2, a3, v59, a5, a6, v65, v63, v61);
      v46 = v62;
      if (v62 == v61)
      {
        v46 = v61;
        v47 = 4;
      }
      else
      {
        if (!v62)
          goto LABEL_60;
        v47 = 5;
      }
      (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_60:
      v48 = v64;
      if (v64 == v63)
      {
        v48 = v63;
        v49 = 4;
      }
      else
      {
        if (!v64)
          goto LABEL_65;
        v49 = 5;
      }
      (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_65:
      v50 = v66;
      if (v66 == v65)
      {
        v50 = v65;
        v51 = 4;
      }
      else
      {
        if (!v66)
          goto LABEL_70;
        v51 = 5;
      }
      (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_70:
      if (v43)
      {
        v52 = (unint64_t *)&v43->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v40 += 2;
      if (v40 == v41)
        v54 = 1;
      else
        v54 = v38;
      if ((v54 & 1) != 0)
        return v38;
    }
  }
  return 1;
}

void sub_230130928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

const void **realityio::DirtyStageDescriptor::description@<X0>(realityio::DirtyStageDescriptor *this@<X0>, CFStringRef *a2@<X8>)
{
  const char *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  realityio::DirtyMetadataDescriptor *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  CFStringRef v14;
  const char *v15;
  __CFArray *v16;
  realityio::DirtyMetadataDescriptor **v17;
  realityio::DirtyMetadataDescriptor **v18;
  realityio::DirtyMetadataDescriptor *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  CFStringRef v25;
  CFTypeRef v27;
  CFTypeRef cf;
  void *value;
  realityio::DirtyMetadataDescriptor *v30;
  std::__shared_weak_count *v31;

  cf = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *(realityio::DirtyMetadataDescriptor **)v6;
    v9 = *(std::__shared_weak_count **)(v6 + 8);
    v30 = *(realityio::DirtyMetadataDescriptor **)v6;
    v31 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    realityio::DirtyMetadataDescriptor::description(v8, (CFStringRef *)&value);
    CFArrayAppendValue(Mutable, value);
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v6 += 16;
  }
  v14 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v4);
  CFRelease(Mutable);
  v27 = 0;
  cf = v14;
  v16 = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  v17 = (realityio::DirtyMetadataDescriptor **)*((_QWORD *)this + 4);
  v18 = (realityio::DirtyMetadataDescriptor **)*((_QWORD *)this + 5);
  while (v17 != v18)
  {
    v19 = *v17;
    v20 = (std::__shared_weak_count *)v17[1];
    v30 = *v17;
    v31 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v19 + 32))(&value);
    CFArrayAppendValue(v16, value);
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
    if (v20)
    {
      v23 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v17 += 2;
  }
  v25 = realityio::joinAsCFStringRef(v16, (const __CFArray *)", ", v15);
  CFRelease(v16);
  *a2 = 0;
  *a2 = CFStringCreateWithFormat(0, 0, CFSTR("<DirtyStageDescriptor: %p { dirtyStageMetadataContainAnyOf: (%lu) [ %@ ], dirtyPrimsContainAnyOf: (%lu) [ %@ ] } >"), this, (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4, cf, (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 4, v25, v25);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&v27);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_230130CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const void **v6;
  const void *v8;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, const void *);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va1);
  _Unwind_Resume(a1);
}

void realityio::DirtyStageDescriptor::~DirtyStageDescriptor(realityio::DirtyStageDescriptor *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = off_24FDF99D0;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_24FDF99D0;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2348B4E1C](this, 0x10A1C401BF1BAA1);
}

_QWORD *std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24FDF9A00;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24FDF9A00;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2348B4E1CLL);
}

_BYTE *std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  _BYTE *v2;

  v2 = operator new(0x38uLL);
  *(_QWORD *)v2 = &off_24FDF9A00;
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 16), a1 + 16);
  v2[48] = *(_BYTE *)(a1 + 48);
  return v2;
}

void sub_230130F2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = &off_24FDF9A00;
  result = std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100](a2 + 16, a1 + 16);
  *(_BYTE *)(a2 + 48) = *(_BYTE *)(a1 + 48);
  return result;
}

_QWORD *std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, a3);
}

uint64_t std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

uint64_t RIOPxrUsdPrimCreateEmpty()
{
  uint64_t v0;
  unsigned int *v1;
  unsigned int v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v4 = 1;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v7 = 0;
  v8 = 1;
  v0 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v4, &v8);
  if ((v7 & 7) != 0)
  {
    v1 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stlxr(v2 - 2, v1));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  if (v5)
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  return v0;
}

void sub_230131128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__ *RIOPxrUsdPrimCopyChildren(uint64_t a1)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__ *Mutable;
  uint64_t *UsdPrimDefaultPredicate;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  unsigned int *v8;
  unsigned int v9;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  int v33[3];

  if (!a1)
    return 0;
  v1 = a1 + 24;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(Mutable);
  v5 = *UsdPrimDefaultPredicate;
  v4 = UsdPrimDefaultPredicate[1];
  v6 = UsdPrimDefaultPredicate[2];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  v19 = v5;
  v20 = v4;
  *(_QWORD *)&v21 = v6;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(v1, &v19, (uint64_t)&v23);
  v19 = v23;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, &v24);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v20 + 1, &v25);
  v21 = v26;
  v22 = v27;
  v15 = v28;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, &v29);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v16 + 1, &v30);
  v17 = v31;
  v18 = v32;
  while (v19 != v15
       || v20 != v16
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v21, (uint64_t)&v17))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v19, (uint64_t)v11);
    v33[0] = 1;
    v7 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v11, v33);
    CFArrayAppendValue(Mutable, v7);
    CFRelease(v7);
    if ((v14 & 7) != 0)
    {
      v8 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
    if (v12)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v19);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
  return Mutable;
}

void sub_23013139C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&a19);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&a24);
  pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::~UsdPrimSiblingRange((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *)&a29);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__ *RIOPxrUsdPrimCopyDescendants(uint64_t a1)
{
  uint64_t v1;
  pxrInternal__aapl__pxrReserved__ *Mutable;
  uint64_t UsdPrimDefaultPredicate;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  unsigned int *v8;
  unsigned int v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;
  int v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  int v33[3];

  if (!a1)
    return 0;
  v1 = a1 + 24;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x24BDBD690]);
  UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(Mutable);
  v5 = *(_QWORD *)UsdPrimDefaultPredicate;
  v4 = *(_QWORD *)(UsdPrimDefaultPredicate + 8);
  v6 = *(_QWORD *)(UsdPrimDefaultPredicate + 16);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  v19 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v5;
  v20 = v4;
  *(_QWORD *)&v21 = v6;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange(v1, (uint64_t *)&v19, (uint64_t)&v23);
  v19 = v23;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, &v24);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v20 + 1, &v25);
  v21 = v26;
  v22 = v27;
  v15 = v28;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, &v29);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v16 + 1, &v30);
  v17 = v31;
  v18 = v32;
  while (v19 != v15
       || v20 != v16
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v21, (uint64_t)&v17))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v19, (uint64_t)v11);
    v33[0] = 1;
    v7 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v11, v33);
    CFArrayAppendValue(Mutable, v7);
    CFRelease(v7);
    if ((v14 & 7) != 0)
    {
      v8 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
    if (v12)
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v19);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v24);
  return Mutable;
}

